// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/gen/pb/bai_zhan/bai_zhan.proto
// DO NOT EDIT!

/*
	Package bai_zhan is a generated protocol buffer package.

	It is generated from these files:
		github.com/lightpaw/male7/gen/pb/bai_zhan/bai_zhan.proto

	It has these top-level messages:
		S2CQueryBaiZhanInfoProto
		S2CBaiZhanChallengeProto
		C2SCollectJunXianPrizeProto
		S2CCollectJunXianPrizeProto
		C2SSelfRecordProto
		S2CSelfRecordProto
		C2SRequestRankProto
		S2CRequestRankProto
		S2CRequestSelfRankProto
		S2CMaxJunXianLevelChangedProto
*/
package bai_zhan

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type S2CQueryBaiZhanInfoProto struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *S2CQueryBaiZhanInfoProto) Reset()                    { *m = S2CQueryBaiZhanInfoProto{} }
func (m *S2CQueryBaiZhanInfoProto) String() string            { return proto.CompactTextString(m) }
func (*S2CQueryBaiZhanInfoProto) ProtoMessage()               {}
func (*S2CQueryBaiZhanInfoProto) Descriptor() ([]byte, []int) { return fileDescriptorBaiZhan, []int{0} }

func (m *S2CQueryBaiZhanInfoProto) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type S2CBaiZhanChallengeProto struct {
	Win             bool   `protobuf:"varint,1,opt,name=win,proto3" json:"win,omitempty"`
	ChallengeTimes  int32  `protobuf:"varint,2,opt,name=challenge_times,json=challengeTimes,proto3" json:"challenge_times,omitempty"`
	Link            string `protobuf:"bytes,3,opt,name=link,proto3" json:"link,omitempty"`
	Share           []byte `protobuf:"bytes,6,opt,name=share,proto3" json:"share,omitempty"`
	Point           int32  `protobuf:"varint,4,opt,name=point,proto3" json:"point,omitempty"`
	HistoryMaxPoint int32  `protobuf:"varint,5,opt,name=history_max_point,json=historyMaxPoint,proto3" json:"history_max_point,omitempty"`
}

func (m *S2CBaiZhanChallengeProto) Reset()                    { *m = S2CBaiZhanChallengeProto{} }
func (m *S2CBaiZhanChallengeProto) String() string            { return proto.CompactTextString(m) }
func (*S2CBaiZhanChallengeProto) ProtoMessage()               {}
func (*S2CBaiZhanChallengeProto) Descriptor() ([]byte, []int) { return fileDescriptorBaiZhan, []int{1} }

func (m *S2CBaiZhanChallengeProto) GetWin() bool {
	if m != nil {
		return m.Win
	}
	return false
}

func (m *S2CBaiZhanChallengeProto) GetChallengeTimes() int32 {
	if m != nil {
		return m.ChallengeTimes
	}
	return 0
}

func (m *S2CBaiZhanChallengeProto) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *S2CBaiZhanChallengeProto) GetShare() []byte {
	if m != nil {
		return m.Share
	}
	return nil
}

func (m *S2CBaiZhanChallengeProto) GetPoint() int32 {
	if m != nil {
		return m.Point
	}
	return 0
}

func (m *S2CBaiZhanChallengeProto) GetHistoryMaxPoint() int32 {
	if m != nil {
		return m.HistoryMaxPoint
	}
	return 0
}

type C2SCollectJunXianPrizeProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SCollectJunXianPrizeProto) Reset()         { *m = C2SCollectJunXianPrizeProto{} }
func (m *C2SCollectJunXianPrizeProto) String() string { return proto.CompactTextString(m) }
func (*C2SCollectJunXianPrizeProto) ProtoMessage()    {}
func (*C2SCollectJunXianPrizeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorBaiZhan, []int{2}
}

func (m *C2SCollectJunXianPrizeProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type S2CCollectJunXianPrizeProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *S2CCollectJunXianPrizeProto) Reset()         { *m = S2CCollectJunXianPrizeProto{} }
func (m *S2CCollectJunXianPrizeProto) String() string { return proto.CompactTextString(m) }
func (*S2CCollectJunXianPrizeProto) ProtoMessage()    {}
func (*S2CCollectJunXianPrizeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorBaiZhan, []int{3}
}

func (m *S2CCollectJunXianPrizeProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type C2SSelfRecordProto struct {
	Version int32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *C2SSelfRecordProto) Reset()                    { *m = C2SSelfRecordProto{} }
func (m *C2SSelfRecordProto) String() string            { return proto.CompactTextString(m) }
func (*C2SSelfRecordProto) ProtoMessage()               {}
func (*C2SSelfRecordProto) Descriptor() ([]byte, []int) { return fileDescriptorBaiZhan, []int{4} }

func (m *C2SSelfRecordProto) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type S2CSelfRecordProto struct {
	Version int32    `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Data    [][]byte `protobuf:"bytes,2,rep,name=data" json:"data,omitempty"`
}

func (m *S2CSelfRecordProto) Reset()                    { *m = S2CSelfRecordProto{} }
func (m *S2CSelfRecordProto) String() string            { return proto.CompactTextString(m) }
func (*S2CSelfRecordProto) ProtoMessage()               {}
func (*S2CSelfRecordProto) Descriptor() ([]byte, []int) { return fileDescriptorBaiZhan, []int{5} }

func (m *S2CSelfRecordProto) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *S2CSelfRecordProto) GetData() [][]byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type C2SRequestRankProto struct {
	Self      bool  `protobuf:"varint,3,opt,name=self,proto3" json:"self,omitempty"`
	StartRank int32 `protobuf:"varint,2,opt,name=start_rank,json=startRank,proto3" json:"start_rank,omitempty"`
}

func (m *C2SRequestRankProto) Reset()                    { *m = C2SRequestRankProto{} }
func (m *C2SRequestRankProto) String() string            { return proto.CompactTextString(m) }
func (*C2SRequestRankProto) ProtoMessage()               {}
func (*C2SRequestRankProto) Descriptor() ([]byte, []int) { return fileDescriptorBaiZhan, []int{6} }

func (m *C2SRequestRankProto) GetSelf() bool {
	if m != nil {
		return m.Self
	}
	return false
}

func (m *C2SRequestRankProto) GetStartRank() int32 {
	if m != nil {
		return m.StartRank
	}
	return 0
}

type S2CRequestRankProto struct {
	Self                  bool     `protobuf:"varint,6,opt,name=self,proto3" json:"self,omitempty"`
	JunXianLevel          int32    `protobuf:"varint,2,opt,name=jun_xian_level,json=junXianLevel,proto3" json:"jun_xian_level,omitempty"`
	StartRank             int32    `protobuf:"varint,3,opt,name=start_rank,json=startRank,proto3" json:"start_rank,omitempty"`
	TotalRankCount        int32    `protobuf:"varint,4,opt,name=total_rank_count,json=totalRankCount,proto3" json:"total_rank_count,omitempty"`
	LevelUpNeedMinPoint   int32    `protobuf:"varint,9,opt,name=level_up_need_min_point,json=levelUpNeedMinPoint,proto3" json:"level_up_need_min_point,omitempty"`
	LevelKeepNeedMinPoint int32    `protobuf:"varint,10,opt,name=level_keep_need_min_point,json=levelKeepNeedMinPoint,proto3" json:"level_keep_need_min_point,omitempty"`
	Data                  [][]byte `protobuf:"bytes,5,rep,name=data" json:"data,omitempty"`
}

func (m *S2CRequestRankProto) Reset()                    { *m = S2CRequestRankProto{} }
func (m *S2CRequestRankProto) String() string            { return proto.CompactTextString(m) }
func (*S2CRequestRankProto) ProtoMessage()               {}
func (*S2CRequestRankProto) Descriptor() ([]byte, []int) { return fileDescriptorBaiZhan, []int{7} }

func (m *S2CRequestRankProto) GetSelf() bool {
	if m != nil {
		return m.Self
	}
	return false
}

func (m *S2CRequestRankProto) GetJunXianLevel() int32 {
	if m != nil {
		return m.JunXianLevel
	}
	return 0
}

func (m *S2CRequestRankProto) GetStartRank() int32 {
	if m != nil {
		return m.StartRank
	}
	return 0
}

func (m *S2CRequestRankProto) GetTotalRankCount() int32 {
	if m != nil {
		return m.TotalRankCount
	}
	return 0
}

func (m *S2CRequestRankProto) GetLevelUpNeedMinPoint() int32 {
	if m != nil {
		return m.LevelUpNeedMinPoint
	}
	return 0
}

func (m *S2CRequestRankProto) GetLevelKeepNeedMinPoint() int32 {
	if m != nil {
		return m.LevelKeepNeedMinPoint
	}
	return 0
}

func (m *S2CRequestRankProto) GetData() [][]byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type S2CRequestSelfRankProto struct {
	Rank                  int32 `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`
	LevelChangeType       int32 `protobuf:"varint,2,opt,name=level_change_type,json=levelChangeType,proto3" json:"level_change_type,omitempty"`
	LevelUpNeedMinPoint   int32 `protobuf:"varint,5,opt,name=level_up_need_min_point,json=levelUpNeedMinPoint,proto3" json:"level_up_need_min_point,omitempty"`
	LevelKeepNeedMinPoint int32 `protobuf:"varint,6,opt,name=level_keep_need_min_point,json=levelKeepNeedMinPoint,proto3" json:"level_keep_need_min_point,omitempty"`
}

func (m *S2CRequestSelfRankProto) Reset()                    { *m = S2CRequestSelfRankProto{} }
func (m *S2CRequestSelfRankProto) String() string            { return proto.CompactTextString(m) }
func (*S2CRequestSelfRankProto) ProtoMessage()               {}
func (*S2CRequestSelfRankProto) Descriptor() ([]byte, []int) { return fileDescriptorBaiZhan, []int{8} }

func (m *S2CRequestSelfRankProto) GetRank() int32 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *S2CRequestSelfRankProto) GetLevelChangeType() int32 {
	if m != nil {
		return m.LevelChangeType
	}
	return 0
}

func (m *S2CRequestSelfRankProto) GetLevelUpNeedMinPoint() int32 {
	if m != nil {
		return m.LevelUpNeedMinPoint
	}
	return 0
}

func (m *S2CRequestSelfRankProto) GetLevelKeepNeedMinPoint() int32 {
	if m != nil {
		return m.LevelKeepNeedMinPoint
	}
	return 0
}

type S2CMaxJunXianLevelChangedProto struct {
	Level int32 `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
}

func (m *S2CMaxJunXianLevelChangedProto) Reset()         { *m = S2CMaxJunXianLevelChangedProto{} }
func (m *S2CMaxJunXianLevelChangedProto) String() string { return proto.CompactTextString(m) }
func (*S2CMaxJunXianLevelChangedProto) ProtoMessage()    {}
func (*S2CMaxJunXianLevelChangedProto) Descriptor() ([]byte, []int) {
	return fileDescriptorBaiZhan, []int{9}
}

func (m *S2CMaxJunXianLevelChangedProto) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func init() {
	proto.RegisterType((*S2CQueryBaiZhanInfoProto)(nil), "proto.S2CQueryBaiZhanInfoProto")
	proto.RegisterType((*S2CBaiZhanChallengeProto)(nil), "proto.S2CBaiZhanChallengeProto")
	proto.RegisterType((*C2SCollectJunXianPrizeProto)(nil), "proto.C2SCollectJunXianPrizeProto")
	proto.RegisterType((*S2CCollectJunXianPrizeProto)(nil), "proto.S2CCollectJunXianPrizeProto")
	proto.RegisterType((*C2SSelfRecordProto)(nil), "proto.C2SSelfRecordProto")
	proto.RegisterType((*S2CSelfRecordProto)(nil), "proto.S2CSelfRecordProto")
	proto.RegisterType((*C2SRequestRankProto)(nil), "proto.C2SRequestRankProto")
	proto.RegisterType((*S2CRequestRankProto)(nil), "proto.S2CRequestRankProto")
	proto.RegisterType((*S2CRequestSelfRankProto)(nil), "proto.S2CRequestSelfRankProto")
	proto.RegisterType((*S2CMaxJunXianLevelChangedProto)(nil), "proto.S2CMaxJunXianLevelChangedProto")
}
func (m *S2CQueryBaiZhanInfoProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CQueryBaiZhanInfoProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *S2CBaiZhanChallengeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CBaiZhanChallengeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Win {
		dAtA[i] = 0x8
		i++
		if m.Win {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ChallengeTimes != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(m.ChallengeTimes))
	}
	if len(m.Link) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(len(m.Link)))
		i += copy(dAtA[i:], m.Link)
	}
	if m.Point != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(m.Point))
	}
	if m.HistoryMaxPoint != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(m.HistoryMaxPoint))
	}
	if len(m.Share) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(len(m.Share)))
		i += copy(dAtA[i:], m.Share)
	}
	return i, nil
}

func (m *C2SCollectJunXianPrizeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCollectJunXianPrizeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *S2CCollectJunXianPrizeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCollectJunXianPrizeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *C2SSelfRecordProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SSelfRecordProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(m.Version))
	}
	return i, nil
}

func (m *S2CSelfRecordProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSelfRecordProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(m.Version))
	}
	if len(m.Data) > 0 {
		for _, b := range m.Data {
			dAtA[i] = 0x12
			i++
			i = encodeVarintBaiZhan(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *C2SRequestRankProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SRequestRankProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StartRank != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(m.StartRank))
	}
	if m.Self {
		dAtA[i] = 0x18
		i++
		if m.Self {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CRequestRankProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CRequestRankProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.JunXianLevel != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(m.JunXianLevel))
	}
	if m.StartRank != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(m.StartRank))
	}
	if m.TotalRankCount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(m.TotalRankCount))
	}
	if len(m.Data) > 0 {
		for _, b := range m.Data {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintBaiZhan(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.Self {
		dAtA[i] = 0x30
		i++
		if m.Self {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.LevelUpNeedMinPoint != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(m.LevelUpNeedMinPoint))
	}
	if m.LevelKeepNeedMinPoint != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(m.LevelKeepNeedMinPoint))
	}
	return i, nil
}

func (m *S2CRequestSelfRankProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CRequestSelfRankProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rank != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(m.Rank))
	}
	if m.LevelChangeType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(m.LevelChangeType))
	}
	if m.LevelUpNeedMinPoint != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(m.LevelUpNeedMinPoint))
	}
	if m.LevelKeepNeedMinPoint != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(m.LevelKeepNeedMinPoint))
	}
	return i, nil
}

func (m *S2CMaxJunXianLevelChangedProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CMaxJunXianLevelChangedProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Level != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(m.Level))
	}
	return i, nil
}

func encodeFixed64BaiZhan(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32BaiZhan(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintBaiZhan(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *S2CQueryBaiZhanInfoProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovBaiZhan(uint64(l))
	}
	return n
}

func (m *S2CBaiZhanChallengeProto) Size() (n int) {
	var l int
	_ = l
	if m.Win {
		n += 2
	}
	if m.ChallengeTimes != 0 {
		n += 1 + sovBaiZhan(uint64(m.ChallengeTimes))
	}
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovBaiZhan(uint64(l))
	}
	if m.Point != 0 {
		n += 1 + sovBaiZhan(uint64(m.Point))
	}
	if m.HistoryMaxPoint != 0 {
		n += 1 + sovBaiZhan(uint64(m.HistoryMaxPoint))
	}
	l = len(m.Share)
	if l > 0 {
		n += 1 + l + sovBaiZhan(uint64(l))
	}
	return n
}

func (m *C2SCollectJunXianPrizeProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBaiZhan(uint64(m.Id))
	}
	return n
}

func (m *S2CCollectJunXianPrizeProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBaiZhan(uint64(m.Id))
	}
	return n
}

func (m *C2SSelfRecordProto) Size() (n int) {
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovBaiZhan(uint64(m.Version))
	}
	return n
}

func (m *S2CSelfRecordProto) Size() (n int) {
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovBaiZhan(uint64(m.Version))
	}
	if len(m.Data) > 0 {
		for _, b := range m.Data {
			l = len(b)
			n += 1 + l + sovBaiZhan(uint64(l))
		}
	}
	return n
}

func (m *C2SRequestRankProto) Size() (n int) {
	var l int
	_ = l
	if m.StartRank != 0 {
		n += 1 + sovBaiZhan(uint64(m.StartRank))
	}
	if m.Self {
		n += 2
	}
	return n
}

func (m *S2CRequestRankProto) Size() (n int) {
	var l int
	_ = l
	if m.JunXianLevel != 0 {
		n += 1 + sovBaiZhan(uint64(m.JunXianLevel))
	}
	if m.StartRank != 0 {
		n += 1 + sovBaiZhan(uint64(m.StartRank))
	}
	if m.TotalRankCount != 0 {
		n += 1 + sovBaiZhan(uint64(m.TotalRankCount))
	}
	if len(m.Data) > 0 {
		for _, b := range m.Data {
			l = len(b)
			n += 1 + l + sovBaiZhan(uint64(l))
		}
	}
	if m.Self {
		n += 2
	}
	if m.LevelUpNeedMinPoint != 0 {
		n += 1 + sovBaiZhan(uint64(m.LevelUpNeedMinPoint))
	}
	if m.LevelKeepNeedMinPoint != 0 {
		n += 1 + sovBaiZhan(uint64(m.LevelKeepNeedMinPoint))
	}
	return n
}

func (m *S2CRequestSelfRankProto) Size() (n int) {
	var l int
	_ = l
	if m.Rank != 0 {
		n += 1 + sovBaiZhan(uint64(m.Rank))
	}
	if m.LevelChangeType != 0 {
		n += 1 + sovBaiZhan(uint64(m.LevelChangeType))
	}
	if m.LevelUpNeedMinPoint != 0 {
		n += 1 + sovBaiZhan(uint64(m.LevelUpNeedMinPoint))
	}
	if m.LevelKeepNeedMinPoint != 0 {
		n += 1 + sovBaiZhan(uint64(m.LevelKeepNeedMinPoint))
	}
	return n
}

func (m *S2CMaxJunXianLevelChangedProto) Size() (n int) {
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovBaiZhan(uint64(m.Level))
	}
	return n
}

func sovBaiZhan(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBaiZhan(x uint64) (n int) {
	return sovBaiZhan(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *S2CQueryBaiZhanInfoProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBaiZhan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CQueryBaiZhanInfoProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CQueryBaiZhanInfoProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBaiZhan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBaiZhan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBaiZhan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CBaiZhanChallengeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBaiZhan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CBaiZhanChallengeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CBaiZhanChallengeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Win", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Win = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeTimes", wireType)
			}
			m.ChallengeTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBaiZhan
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Point", wireType)
			}
			m.Point = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Point |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryMaxPoint", wireType)
			}
			m.HistoryMaxPoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HistoryMaxPoint |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Share", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBaiZhan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Share = append(m.Share[:0], dAtA[iNdEx:postIndex]...)
			if m.Share == nil {
				m.Share = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBaiZhan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBaiZhan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SCollectJunXianPrizeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBaiZhan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCollectJunXianPrizeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCollectJunXianPrizeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBaiZhan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBaiZhan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCollectJunXianPrizeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBaiZhan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCollectJunXianPrizeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCollectJunXianPrizeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBaiZhan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBaiZhan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SSelfRecordProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBaiZhan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SSelfRecordProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SSelfRecordProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBaiZhan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBaiZhan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSelfRecordProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBaiZhan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSelfRecordProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSelfRecordProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBaiZhan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, make([]byte, postIndex-iNdEx))
			copy(m.Data[len(m.Data)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBaiZhan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBaiZhan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SRequestRankProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBaiZhan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SRequestRankProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SRequestRankProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartRank", wireType)
			}
			m.StartRank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartRank |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Self", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Self = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBaiZhan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBaiZhan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CRequestRankProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBaiZhan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CRequestRankProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CRequestRankProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JunXianLevel", wireType)
			}
			m.JunXianLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JunXianLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartRank", wireType)
			}
			m.StartRank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartRank |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRankCount", wireType)
			}
			m.TotalRankCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalRankCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBaiZhan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, make([]byte, postIndex-iNdEx))
			copy(m.Data[len(m.Data)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Self", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Self = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelUpNeedMinPoint", wireType)
			}
			m.LevelUpNeedMinPoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LevelUpNeedMinPoint |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelKeepNeedMinPoint", wireType)
			}
			m.LevelKeepNeedMinPoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LevelKeepNeedMinPoint |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBaiZhan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBaiZhan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CRequestSelfRankProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBaiZhan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CRequestSelfRankProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CRequestSelfRankProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelChangeType", wireType)
			}
			m.LevelChangeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LevelChangeType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelUpNeedMinPoint", wireType)
			}
			m.LevelUpNeedMinPoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LevelUpNeedMinPoint |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelKeepNeedMinPoint", wireType)
			}
			m.LevelKeepNeedMinPoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LevelKeepNeedMinPoint |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBaiZhan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBaiZhan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CMaxJunXianLevelChangedProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBaiZhan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CMaxJunXianLevelChangedProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CMaxJunXianLevelChangedProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBaiZhan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBaiZhan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBaiZhan(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBaiZhan
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBaiZhan
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBaiZhan
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBaiZhan(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBaiZhan = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBaiZhan   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/gen/pb/bai_zhan/bai_zhan.proto", fileDescriptorBaiZhan)
}

var fileDescriptorBaiZhan = []byte{
	// 595 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0x49, 0x1d, 0xda, 0x51, 0x95, 0x16, 0xb7, 0xa8, 0x46, 0x40, 0x14, 0x45, 0x48, 0x44,
	0x48, 0x24, 0x92, 0x41, 0xd0, 0x73, 0xf7, 0x52, 0x0a, 0x45, 0xc5, 0x2e, 0x12, 0xea, 0xc5, 0xda,
	0x24, 0xd3, 0x78, 0x9b, 0xcd, 0xda, 0xd8, 0xeb, 0x36, 0xe9, 0x93, 0x70, 0xe0, 0x65, 0xb8, 0xc1,
	0x8d, 0x47, 0x40, 0xe5, 0x45, 0x90, 0x67, 0x5d, 0x07, 0x5a, 0xa9, 0xaa, 0x38, 0x79, 0x7e, 0xbe,
	0xf9, 0xf9, 0x66, 0xc6, 0x0b, 0xdb, 0x63, 0xa1, 0xa3, 0x7c, 0xd0, 0x1b, 0xc6, 0xd3, 0xbe, 0x14,
	0xe3, 0x48, 0x27, 0xfc, 0xac, 0x3f, 0xe5, 0x12, 0x5f, 0xf7, 0xc7, 0xa8, 0xfa, 0xc9, 0xa0, 0x3f,
	0xe0, 0x22, 0x3c, 0x8f, 0xb8, 0xaa, 0x84, 0x5e, 0x92, 0xc6, 0x3a, 0x76, 0x6c, 0xfa, 0x74, 0x7a,
	0xe0, 0x06, 0x1e, 0xfb, 0x90, 0x63, 0x3a, 0xdf, 0xe1, 0xe2, 0x28, 0xe2, 0xea, 0x8d, 0x3a, 0x8e,
	0x0f, 0x08, 0xe2, 0xc0, 0xd2, 0x88, 0x6b, 0xee, 0x5a, 0x6d, 0xab, 0xbb, 0xea, 0x93, 0xdc, 0xf9,
	0x66, 0x51, 0x40, 0x89, 0x65, 0x11, 0x97, 0x12, 0xd5, 0x18, 0x4d, 0xc0, 0x3a, 0xd4, 0xcf, 0x84,
	0x22, 0xfc, 0xb2, 0x5f, 0x88, 0xce, 0x53, 0x58, 0x1b, 0x5e, 0x62, 0x42, 0x2d, 0xa6, 0x98, 0xb9,
	0xb5, 0xb6, 0xd5, 0xb5, 0xfd, 0x66, 0x65, 0x3e, 0x2c, 0xac, 0x45, 0x2d, 0x29, 0xd4, 0xc4, 0xad,
	0xb7, 0xad, 0xee, 0x8a, 0x4f, 0xb2, 0xb3, 0x09, 0x76, 0x12, 0x0b, 0xa5, 0xdd, 0x25, 0x0a, 0x31,
	0x8a, 0xf3, 0x0c, 0xee, 0x45, 0x22, 0xd3, 0x71, 0x3a, 0x0f, 0xa7, 0x7c, 0x16, 0x1a, 0x84, 0x4d,
	0x88, 0xb5, 0xd2, 0xb1, 0xcf, 0x67, 0x07, 0x84, 0xdd, 0x04, 0x3b, 0x8b, 0x78, 0x8a, 0x6e, 0x83,
	0x28, 0x18, 0xa5, 0xf3, 0x1c, 0x1e, 0x32, 0x2f, 0x60, 0xb1, 0x94, 0x38, 0xd4, 0x7b, 0xb9, 0xfa,
	0x24, 0xb8, 0x3a, 0x48, 0xc5, 0x79, 0xc9, 0xa2, 0x09, 0x35, 0x31, 0x22, 0x12, 0xb6, 0x5f, 0x13,
	0xa3, 0x02, 0x1e, 0x78, 0xec, 0xd6, 0xf0, 0x1e, 0x38, 0xcc, 0x0b, 0x02, 0x94, 0xc7, 0x3e, 0x0e,
	0xe3, 0x74, 0x64, 0x50, 0x2e, 0xdc, 0x3d, 0xc5, 0x34, 0x13, 0xb1, 0x2a, 0xa1, 0x97, 0x6a, 0x67,
	0x07, 0x9c, 0xc0, 0x63, 0xb7, 0xc6, 0x57, 0x5b, 0xa9, 0xb5, 0xeb, 0xd5, 0x56, 0x76, 0x61, 0x83,
	0x79, 0x81, 0x8f, 0x9f, 0x73, 0xcc, 0xb4, 0xcf, 0xd5, 0xc4, 0x24, 0x79, 0x0c, 0x90, 0x69, 0x9e,
	0xea, 0x30, 0xe5, 0x6a, 0x52, 0x0e, 0x7e, 0x85, 0x2c, 0x05, 0xa6, 0xc8, 0x94, 0xa1, 0x3c, 0xa6,
	0x99, 0x2f, 0xfb, 0x24, 0x77, 0xbe, 0xd6, 0x60, 0x23, 0xf0, 0xd8, 0xb5, 0x54, 0x4f, 0xa0, 0x79,
	0x92, 0xab, 0x70, 0x26, 0xb8, 0x0a, 0x25, 0x9e, 0xa2, 0x2c, 0xd3, 0xad, 0x9e, 0x98, 0x81, 0xbc,
	0x2b, 0x6c, 0x57, 0x0a, 0xd6, 0xaf, 0x16, 0xec, 0xc2, 0xba, 0x8e, 0x35, 0x97, 0xe4, 0x0e, 0x87,
	0x71, 0x5e, 0xed, 0xb6, 0x49, 0xf6, 0x02, 0xc4, 0x0a, 0x6b, 0x45, 0xd2, 0x5e, 0x90, 0xac, 0xda,
	0x6d, 0x2c, 0xda, 0x75, 0x5e, 0xc2, 0x16, 0x75, 0x13, 0xe6, 0x49, 0xa8, 0x10, 0x47, 0xe1, 0x54,
	0xa8, 0xf2, 0x24, 0x56, 0x28, 0xf1, 0x06, 0xb9, 0x3f, 0x26, 0xef, 0x11, 0x47, 0xfb, 0x42, 0x99,
	0xb3, 0xd8, 0x86, 0x07, 0x26, 0x6a, 0x82, 0x78, 0x2d, 0x0e, 0x28, 0xee, 0x3e, 0x01, 0xde, 0x22,
	0xfe, 0x13, 0xd9, 0xf9, 0x61, 0xc1, 0xd6, 0x62, 0x3c, 0xb4, 0xb4, 0x6a, 0x44, 0x0e, 0x2c, 0x11,
	0x6d, 0xb3, 0x2f, 0x92, 0x8b, 0x63, 0x35, 0x95, 0x86, 0x11, 0xa7, 0x5f, 0x60, 0x9e, 0x60, 0x39,
	0xb9, 0x35, 0x72, 0x30, 0xb2, 0x1f, 0xce, 0x13, 0xbc, 0x89, 0x8b, 0xfd, 0x9f, 0x5c, 0x1a, 0x37,
	0x71, 0x79, 0x05, 0xad, 0xc0, 0x63, 0xfb, 0x7c, 0xb6, 0xf7, 0xd7, 0x0a, 0x4d, 0x3f, 0xe5, 0x11,
	0x6e, 0x82, 0x6d, 0x76, 0x6d, 0x28, 0x19, 0x65, 0xe7, 0xd1, 0xf7, 0x8b, 0x96, 0xf5, 0xf3, 0xa2,
	0x65, 0xfd, 0xba, 0x68, 0x59, 0x5f, 0x7e, 0xb7, 0xee, 0xec, 0x5a, 0x47, 0xcb, 0x97, 0xaf, 0xcb,
	0xa0, 0x41, 0xef, 0xca, 0x8b, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x0b, 0x3b, 0x35, 0xbe, 0x9a,
	0x04, 0x00, 0x00,
}
