// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/gen/pb/domestic/domestic.proto
// DO NOT EDIT!

/*
	Package domestic is a generated protocol buffer package.

	It is generated from these files:
		github.com/lightpaw/male7/gen/pb/domestic/domestic.proto

	It has these top-level messages:
		S2CUpdateResourceBuildingProto
		S2CUpdateMultiResourceBuildingProto
		C2SCreateBuildingProto
		S2CCreateBuildingProto
		C2SUpgradeBuildingProto
		S2CUpgradeBuildingProto
		C2SRebuildResourceBuildingProto
		S2CRebuildResourceBuildingProto
		C2SUnlockOuterCityProto
		S2CUnlockOuterCityProto
		C2SUpdateOuterCityTypeProto
		S2CUpdateOuterCityTypeProto
		C2SUpgradeOuterCityBuildingProto
		S2CUpgradeOuterCityBuildingProto
		S2CResourceUpdateProto
		S2CResourceUpdateSingleProto
		S2CResourceCapcityUpdateProto
		C2SCollectResourceProto
		S2CCollectResourceProto
		C2SCollectResourceV2Proto
		S2CCollectResourceV2Proto
		S2CCollectResourceTimesChangedProto
		S2CResourcePointChangeV2Proto
		S2CRequestResourceConflictProto
		C2SLearnTechnologyProto
		S2CLearnTechnologyProto
		C2SUnlockStableBuildingProto
		S2CUnlockStableBuildingProto
		C2SUpgradeStableBuildingProto
		S2CUpgradeStableBuildingProto
		S2CHeroUpdateExpProto
		S2CHeroUpgradeLevelProto
		S2CHeroUpdateProsperityProto
		C2SIsHeroNameExistProto
		S2CIsHeroNameExistProto
		C2SChangeHeroNameProto
		S2CChangeHeroNameProto
		S2CHeroNameChangedBroadcastProto
		C2SListOldNameProto
		S2CListOldNameProto
		C2SViewOtherHeroProto
		S2CViewOtherHeroProto
		C2SViewFightInfoProto
		S2CViewFightInfoProto
		S2CUpdateBuildingWorkerCoefProto
		S2CUpdateTechWorkerCoefProto
		S2CUpdateBuildingWorkerFatigueDurationProto
		S2CUpdateTechWorkerFatigueDurationProto
		C2SMiaoBuildingWorkerCdProto
		S2CMiaoBuildingWorkerCdProto
		C2SMiaoTechWorkerCdProto
		S2CMiaoTechWorkerCdProto
		S2CUpdateYuanbaoProto
		S2CUpdateYuanbaoGiftLimitProto
		S2CUpdateDianquanProto
		S2CUpdateYinliangProto
		S2CUpdateHeroFightAmountProto
		S2CRecoveryForgingTimeChangeProto
		C2SForgingEquipProto
		S2CForgingEquipProto
		S2CUpdateNewForgingPosProto
		C2SSignProto
		C2SVoiceProto
		S2CBuildingWorkerTimeChangedProto
		S2CTechWorkerTimeChangedProto
		S2CCityEventTimeChangedProto
		S2CRequestCityExchangeEventProto
		C2SCityEventExchangeProto
		S2CCityEventExchangeProto
		S2CUpdateStrategyRestoreStartTimeProto
		S2CUpdateStrategyNextUseTimeProto
		S2CUpdateJadeOreProto
		S2CUpdateJadeProto
		C2SChangeHeadProto
		S2CChangeHeadProto
		C2SChangeBodyProto
		S2CChangeBodyProto
		S2CCollectCountdownPrizeProto
		S2CListWorkshopEquipmentProto
		C2SStartWorkshopProto
		S2CStartWorkshopProto
		C2SCollectWorkshopProto
		S2CCollectWorkshopProto
		C2SWorkshopMiaoCdProto
		S2CWorkshopMiaoCdProto
		S2CSeasonStartBroadcastProto
		S2CUpdateCostReduceCoefProto
		S2CUpdateSpProto
		C2SBuySpProto
		S2CBuySpProto
		C2SUseBufEffectProto
		S2CUseBufEffectProto
		S2COpenBufEffectUiProto
		C2SUseAdvantageProto
		S2CUseAdvantageProto
		S2CUpdateAdvantageCountProto
		C2SWorkerUnlockProto
		S2CWorkerUnlockProto
		S2CWorkerAlwaysUnlockProto
*/
package domestic

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import proto1 "github.com/lightpaw/male7/pb/shared_proto"
import proto3 "github.com/lightpaw/male7/pb/shared_proto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type S2CUpdateResourceBuildingProto struct {
	Id            int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Amount        int32 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Capcity       int32 `protobuf:"varint,3,opt,name=capcity,proto3" json:"capcity,omitempty"`
	Output        int32 `protobuf:"varint,4,opt,name=output,proto3" json:"output,omitempty"`
	Conflict      bool  `protobuf:"varint,5,opt,name=conflict,proto3" json:"conflict,omitempty"`
	BaseLevelLock bool  `protobuf:"varint,6,opt,name=base_level_lock,json=baseLevelLock,proto3" json:"base_level_lock,omitempty"`
}

func (m *S2CUpdateResourceBuildingProto) Reset()         { *m = S2CUpdateResourceBuildingProto{} }
func (m *S2CUpdateResourceBuildingProto) String() string { return proto.CompactTextString(m) }
func (*S2CUpdateResourceBuildingProto) ProtoMessage()    {}
func (*S2CUpdateResourceBuildingProto) Descriptor() ([]byte, []int) {
	return fileDescriptorDomestic, []int{0}
}

func (m *S2CUpdateResourceBuildingProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *S2CUpdateResourceBuildingProto) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *S2CUpdateResourceBuildingProto) GetCapcity() int32 {
	if m != nil {
		return m.Capcity
	}
	return 0
}

func (m *S2CUpdateResourceBuildingProto) GetOutput() int32 {
	if m != nil {
		return m.Output
	}
	return 0
}

func (m *S2CUpdateResourceBuildingProto) GetConflict() bool {
	if m != nil {
		return m.Conflict
	}
	return false
}

func (m *S2CUpdateResourceBuildingProto) GetBaseLevelLock() bool {
	if m != nil {
		return m.BaseLevelLock
	}
	return false
}

type S2CUpdateMultiResourceBuildingProto struct {
	Id            []int32 `protobuf:"varint,1,rep,name=id" json:"id,omitempty"`
	Amount        []int32 `protobuf:"varint,2,rep,name=amount" json:"amount,omitempty"`
	Capcity       []int32 `protobuf:"varint,3,rep,name=capcity" json:"capcity,omitempty"`
	Output        []int32 `protobuf:"varint,4,rep,name=output" json:"output,omitempty"`
	Conflict      []bool  `protobuf:"varint,5,rep,name=conflict" json:"conflict,omitempty"`
	BaseLevelLock []bool  `protobuf:"varint,6,rep,name=base_level_lock,json=baseLevelLock" json:"base_level_lock,omitempty"`
}

func (m *S2CUpdateMultiResourceBuildingProto) Reset()         { *m = S2CUpdateMultiResourceBuildingProto{} }
func (m *S2CUpdateMultiResourceBuildingProto) String() string { return proto.CompactTextString(m) }
func (*S2CUpdateMultiResourceBuildingProto) ProtoMessage()    {}
func (*S2CUpdateMultiResourceBuildingProto) Descriptor() ([]byte, []int) {
	return fileDescriptorDomestic, []int{1}
}

func (m *S2CUpdateMultiResourceBuildingProto) GetId() []int32 {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *S2CUpdateMultiResourceBuildingProto) GetAmount() []int32 {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *S2CUpdateMultiResourceBuildingProto) GetCapcity() []int32 {
	if m != nil {
		return m.Capcity
	}
	return nil
}

func (m *S2CUpdateMultiResourceBuildingProto) GetOutput() []int32 {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *S2CUpdateMultiResourceBuildingProto) GetConflict() []bool {
	if m != nil {
		return m.Conflict
	}
	return nil
}

func (m *S2CUpdateMultiResourceBuildingProto) GetBaseLevelLock() []bool {
	if m != nil {
		return m.BaseLevelLock
	}
	return nil
}

type C2SCreateBuildingProto struct {
	Id   int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type int32 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *C2SCreateBuildingProto) Reset()                    { *m = C2SCreateBuildingProto{} }
func (m *C2SCreateBuildingProto) String() string            { return proto.CompactTextString(m) }
func (*C2SCreateBuildingProto) ProtoMessage()               {}
func (*C2SCreateBuildingProto) Descriptor() ([]byte, []int) { return fileDescriptorDomestic, []int{2} }

func (m *C2SCreateBuildingProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *C2SCreateBuildingProto) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type S2CCreateBuildingProto struct {
	Id                int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Building          int32 `protobuf:"varint,2,opt,name=building,proto3" json:"building,omitempty"`
	WorkerPos         int32 `protobuf:"varint,6,opt,name=worker_pos,json=workerPos,proto3" json:"worker_pos,omitempty"`
	WorkerRestEndTime int32 `protobuf:"varint,3,opt,name=worker_rest_end_time,json=workerRestEndTime,proto3" json:"worker_rest_end_time,omitempty"`
}

func (m *S2CCreateBuildingProto) Reset()                    { *m = S2CCreateBuildingProto{} }
func (m *S2CCreateBuildingProto) String() string            { return proto.CompactTextString(m) }
func (*S2CCreateBuildingProto) ProtoMessage()               {}
func (*S2CCreateBuildingProto) Descriptor() ([]byte, []int) { return fileDescriptorDomestic, []int{3} }

func (m *S2CCreateBuildingProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *S2CCreateBuildingProto) GetBuilding() int32 {
	if m != nil {
		return m.Building
	}
	return 0
}

func (m *S2CCreateBuildingProto) GetWorkerPos() int32 {
	if m != nil {
		return m.WorkerPos
	}
	return 0
}

func (m *S2CCreateBuildingProto) GetWorkerRestEndTime() int32 {
	if m != nil {
		return m.WorkerRestEndTime
	}
	return 0
}

type C2SUpgradeBuildingProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SUpgradeBuildingProto) Reset()                    { *m = C2SUpgradeBuildingProto{} }
func (m *C2SUpgradeBuildingProto) String() string            { return proto.CompactTextString(m) }
func (*C2SUpgradeBuildingProto) ProtoMessage()               {}
func (*C2SUpgradeBuildingProto) Descriptor() ([]byte, []int) { return fileDescriptorDomestic, []int{4} }

func (m *C2SUpgradeBuildingProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type S2CUpgradeBuildingProto struct {
	Id                int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Building          int32 `protobuf:"varint,2,opt,name=building,proto3" json:"building,omitempty"`
	WorkerPos         int32 `protobuf:"varint,6,opt,name=worker_pos,json=workerPos,proto3" json:"worker_pos,omitempty"`
	WorkerRestEndTime int32 `protobuf:"varint,3,opt,name=worker_rest_end_time,json=workerRestEndTime,proto3" json:"worker_rest_end_time,omitempty"`
}

func (m *S2CUpgradeBuildingProto) Reset()                    { *m = S2CUpgradeBuildingProto{} }
func (m *S2CUpgradeBuildingProto) String() string            { return proto.CompactTextString(m) }
func (*S2CUpgradeBuildingProto) ProtoMessage()               {}
func (*S2CUpgradeBuildingProto) Descriptor() ([]byte, []int) { return fileDescriptorDomestic, []int{5} }

func (m *S2CUpgradeBuildingProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *S2CUpgradeBuildingProto) GetBuilding() int32 {
	if m != nil {
		return m.Building
	}
	return 0
}

func (m *S2CUpgradeBuildingProto) GetWorkerPos() int32 {
	if m != nil {
		return m.WorkerPos
	}
	return 0
}

func (m *S2CUpgradeBuildingProto) GetWorkerRestEndTime() int32 {
	if m != nil {
		return m.WorkerRestEndTime
	}
	return 0
}

type C2SRebuildResourceBuildingProto struct {
	Id   int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type int32 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *C2SRebuildResourceBuildingProto) Reset()         { *m = C2SRebuildResourceBuildingProto{} }
func (m *C2SRebuildResourceBuildingProto) String() string { return proto.CompactTextString(m) }
func (*C2SRebuildResourceBuildingProto) ProtoMessage()    {}
func (*C2SRebuildResourceBuildingProto) Descriptor() ([]byte, []int) {
	return fileDescriptorDomestic, []int{6}
}

func (m *C2SRebuildResourceBuildingProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *C2SRebuildResourceBuildingProto) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type S2CRebuildResourceBuildingProto struct {
	Id                int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Building          int32 `protobuf:"varint,2,opt,name=building,proto3" json:"building,omitempty"`
	WorkerPos         int32 `protobuf:"varint,4,opt,name=worker_pos,json=workerPos,proto3" json:"worker_pos,omitempty"`
	WorkerRestEndTime int32 `protobuf:"varint,3,opt,name=worker_rest_end_time,json=workerRestEndTime,proto3" json:"worker_rest_end_time,omitempty"`
}

func (m *S2CRebuildResourceBuildingProto) Reset()         { *m = S2CRebuildResourceBuildingProto{} }
func (m *S2CRebuildResourceBuildingProto) String() string { return proto.CompactTextString(m) }
func (*S2CRebuildResourceBuildingProto) ProtoMessage()    {}
func (*S2CRebuildResourceBuildingProto) Descriptor() ([]byte, []int) {
	return fileDescriptorDomestic, []int{7}
}

func (m *S2CRebuildResourceBuildingProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *S2CRebuildResourceBuildingProto) GetBuilding() int32 {
	if m != nil {
		return m.Building
	}
	return 0
}

func (m *S2CRebuildResourceBuildingProto) GetWorkerPos() int32 {
	if m != nil {
		return m.WorkerPos
	}
	return 0
}

func (m *S2CRebuildResourceBuildingProto) GetWorkerRestEndTime() int32 {
	if m != nil {
		return m.WorkerRestEndTime
	}
	return 0
}

type C2SUnlockOuterCityProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	T  int32 `protobuf:"varint,2,opt,name=t,proto3" json:"t,omitempty"`
}

func (m *C2SUnlockOuterCityProto) Reset()                    { *m = C2SUnlockOuterCityProto{} }
func (m *C2SUnlockOuterCityProto) String() string            { return proto.CompactTextString(m) }
func (*C2SUnlockOuterCityProto) ProtoMessage()               {}
func (*C2SUnlockOuterCityProto) Descriptor() ([]byte, []int) { return fileDescriptorDomestic, []int{8} }

func (m *C2SUnlockOuterCityProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *C2SUnlockOuterCityProto) GetT() int32 {
	if m != nil {
		return m.T
	}
	return 0
}

type S2CUnlockOuterCityProto struct {
	OuterCity []byte `protobuf:"bytes,1,opt,name=outer_city,json=outerCity,proto3" json:"outer_city,omitempty"`
}

func (m *S2CUnlockOuterCityProto) Reset()                    { *m = S2CUnlockOuterCityProto{} }
func (m *S2CUnlockOuterCityProto) String() string            { return proto.CompactTextString(m) }
func (*S2CUnlockOuterCityProto) ProtoMessage()               {}
func (*S2CUnlockOuterCityProto) Descriptor() ([]byte, []int) { return fileDescriptorDomestic, []int{9} }

func (m *S2CUnlockOuterCityProto) GetOuterCity() []byte {
	if m != nil {
		return m.OuterCity
	}
	return nil
}

type C2SUpdateOuterCityTypeProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	T  int32 `protobuf:"varint,2,opt,name=t,proto3" json:"t,omitempty"`
}

func (m *C2SUpdateOuterCityTypeProto) Reset()         { *m = C2SUpdateOuterCityTypeProto{} }
func (m *C2SUpdateOuterCityTypeProto) String() string { return proto.CompactTextString(m) }
func (*C2SUpdateOuterCityTypeProto) ProtoMessage()    {}
func (*C2SUpdateOuterCityTypeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorDomestic, []int{10}
}

func (m *C2SUpdateOuterCityTypeProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *C2SUpdateOuterCityTypeProto) GetT() int32 {
	if m != nil {
		return m.T
	}
	return 0
}

type S2CUpdateOuterCityTypeProto struct {
	Id  int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	T   int32   `protobuf:"varint,2,opt,name=t,proto3" json:"t,omitempty"`
	Ids []int32 `protobuf:"varint,3,rep,name=ids" json:"ids,omitempty"`
}

func (m *S2CUpdateOuterCityTypeProto) Reset()         { *m = S2CUpdateOuterCityTypeProto{} }
func (m *S2CUpdateOuterCityTypeProto) String() string { return proto.CompactTextString(m) }
func (*S2CUpdateOuterCityTypeProto) ProtoMessage()    {}
func (*S2CUpdateOuterCityTypeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorDomestic, []int{11}
}

func (m *S2CUpdateOuterCityTypeProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *S2CUpdateOuterCityTypeProto) GetT() int32 {
	if m != nil {
		return m.T
	}
	return 0
}

func (m *S2CUpdateOuterCityTypeProto) GetIds() []int32 {
	if m != nil {
		return m.Ids
	}
	return nil
}

type C2SUpgradeOuterCityBuildingProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SUpgradeOuterCityBuildingProto) Reset()         { *m = C2SUpgradeOuterCityBuildingProto{} }
func (m *C2SUpgradeOuterCityBuildingProto) String() string { return proto.CompactTextString(m) }
func (*C2SUpgradeOuterCityBuildingProto) ProtoMessage()    {}
func (*C2SUpgradeOuterCityBuildingProto) Descriptor() ([]byte, []int) {
	return fileDescriptorDomestic, []int{12}
}

func (m *C2SUpgradeOuterCityBuildingProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type S2CUpgradeOuterCityBuildingProto struct {
	CityId int32 `protobuf:"varint,2,opt,name=city_id,json=cityId,proto3" json:"city_id,omitempty"`
	OldId  int32 `protobuf:"varint,3,opt,name=old_id,json=oldId,proto3" json:"old_id,omitempty"`
	Id     int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *S2CUpgradeOuterCityBuildingProto) Reset()         { *m = S2CUpgradeOuterCityBuildingProto{} }
func (m *S2CUpgradeOuterCityBuildingProto) String() string { return proto.CompactTextString(m) }
func (*S2CUpgradeOuterCityBuildingProto) ProtoMessage()    {}
func (*S2CUpgradeOuterCityBuildingProto) Descriptor() ([]byte, []int) {
	return fileDescriptorDomestic, []int{13}
}

func (m *S2CUpgradeOuterCityBuildingProto) GetCityId() int32 {
	if m != nil {
		return m.CityId
	}
	return 0
}

func (m *S2CUpgradeOuterCityBuildingProto) GetOldId() int32 {
	if m != nil {
		return m.OldId
	}
	return 0
}

func (m *S2CUpgradeOuterCityBuildingProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type S2CResourceUpdateProto struct {
	Gold   int32 `protobuf:"varint,1,opt,name=gold,proto3" json:"gold,omitempty"`
	Food   int32 `protobuf:"varint,2,opt,name=food,proto3" json:"food,omitempty"`
	Wood   int32 `protobuf:"varint,3,opt,name=wood,proto3" json:"wood,omitempty"`
	Stone  int32 `protobuf:"varint,4,opt,name=stone,proto3" json:"stone,omitempty"`
	IsSafe bool  `protobuf:"varint,5,opt,name=is_safe,json=isSafe,proto3" json:"is_safe,omitempty"`
}

func (m *S2CResourceUpdateProto) Reset()                    { *m = S2CResourceUpdateProto{} }
func (m *S2CResourceUpdateProto) String() string            { return proto.CompactTextString(m) }
func (*S2CResourceUpdateProto) ProtoMessage()               {}
func (*S2CResourceUpdateProto) Descriptor() ([]byte, []int) { return fileDescriptorDomestic, []int{14} }

func (m *S2CResourceUpdateProto) GetGold() int32 {
	if m != nil {
		return m.Gold
	}
	return 0
}

func (m *S2CResourceUpdateProto) GetFood() int32 {
	if m != nil {
		return m.Food
	}
	return 0
}

func (m *S2CResourceUpdateProto) GetWood() int32 {
	if m != nil {
		return m.Wood
	}
	return 0
}

func (m *S2CResourceUpdateProto) GetStone() int32 {
	if m != nil {
		return m.Stone
	}
	return 0
}

func (m *S2CResourceUpdateProto) GetIsSafe() bool {
	if m != nil {
		return m.IsSafe
	}
	return false
}

type S2CResourceUpdateSingleProto struct {
	ResType int32 `protobuf:"varint,1,opt,name=res_type,json=resType,proto3" json:"res_type,omitempty"`
	Amount  int32 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	IsSafe  bool  `protobuf:"varint,3,opt,name=is_safe,json=isSafe,proto3" json:"is_safe,omitempty"`
}

func (m *S2CResourceUpdateSingleProto) Reset()         { *m = S2CResourceUpdateSingleProto{} }
func (m *S2CResourceUpdateSingleProto) String() string { return proto.CompactTextString(m) }
func (*S2CResourceUpdateSingleProto) ProtoMessage()    {}
func (*S2CResourceUpdateSingleProto) Descriptor() ([]byte, []int) {
	return fileDescriptorDomestic, []int{15}
}

func (m *S2CResourceUpdateSingleProto) GetResType() int32 {
	if m != nil {
		return m.ResType
	}
	return 0
}

func (m *S2CResourceUpdateSingleProto) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *S2CResourceUpdateSingleProto) GetIsSafe() bool {
	if m != nil {
		return m.IsSafe
	}
	return false
}

type S2CResourceCapcityUpdateProto struct {
	GoldCapcity      int32 `protobuf:"varint,1,opt,name=gold_capcity,json=goldCapcity,proto3" json:"gold_capcity,omitempty"`
	FoodCapcity      int32 `protobuf:"varint,2,opt,name=food_capcity,json=foodCapcity,proto3" json:"food_capcity,omitempty"`
	WoodCapcity      int32 `protobuf:"varint,3,opt,name=wood_capcity,json=woodCapcity,proto3" json:"wood_capcity,omitempty"`
	StoneCapcity     int32 `protobuf:"varint,4,opt,name=stone_capcity,json=stoneCapcity,proto3" json:"stone_capcity,omitempty"`
	ProtectedCapcity int32 `protobuf:"varint,9,opt,name=protected_capcity,json=protectedCapcity,proto3" json:"protected_capcity,omitempty"`
}

func (m *S2CResourceCapcityUpdateProto) Reset()         { *m = S2CResourceCapcityUpdateProto{} }
func (m *S2CResourceCapcityUpdateProto) String() string { return proto.CompactTextString(m) }
func (*S2CResourceCapcityUpdateProto) ProtoMessage()    {}
func (*S2CResourceCapcityUpdateProto) Descriptor() ([]byte, []int) {
	return fileDescriptorDomestic, []int{16}
}

func (m *S2CResourceCapcityUpdateProto) GetGoldCapcity() int32 {
	if m != nil {
		return m.GoldCapcity
	}
	return 0
}

func (m *S2CResourceCapcityUpdateProto) GetFoodCapcity() int32 {
	if m != nil {
		return m.FoodCapcity
	}
	return 0
}

func (m *S2CResourceCapcityUpdateProto) GetWoodCapcity() int32 {
	if m != nil {
		return m.WoodCapcity
	}
	return 0
}

func (m *S2CResourceCapcityUpdateProto) GetStoneCapcity() int32 {
	if m != nil {
		return m.StoneCapcity
	}
	return 0
}

func (m *S2CResourceCapcityUpdateProto) GetProtectedCapcity() int32 {
	if m != nil {
		return m.ProtectedCapcity
	}
	return 0
}

type C2SCollectResourceProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SCollectResourceProto) Reset()                    { *m = C2SCollectResourceProto{} }
func (m *C2SCollectResourceProto) String() string            { return proto.CompactTextString(m) }
func (*C2SCollectResourceProto) ProtoMessage()               {}
func (*C2SCollectResourceProto) Descriptor() ([]byte, []int) { return fileDescriptorDomestic, []int{17} }

func (m *C2SCollectResourceProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type S2CCollectResourceProto struct {
	Id     int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Amount int32 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *S2CCollectResourceProto) Reset()                    { *m = S2CCollectResourceProto{} }
func (m *S2CCollectResourceProto) String() string            { return proto.CompactTextString(m) }
func (*S2CCollectResourceProto) ProtoMessage()               {}
func (*S2CCollectResourceProto) Descriptor() ([]byte, []int) { return fileDescriptorDomestic, []int{18} }

func (m *S2CCollectResourceProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *S2CCollectResourceProto) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type C2SCollectResourceV2Proto struct {
	ResType int32 `protobuf:"varint,1,opt,name=res_type,json=resType,proto3" json:"res_type,omitempty"`
}

func (m *C2SCollectResourceV2Proto) Reset()         { *m = C2SCollectResourceV2Proto{} }
func (m *C2SCollectResourceV2Proto) String() string { return proto.CompactTextString(m) }
func (*C2SCollectResourceV2Proto) ProtoMessage()    {}
func (*C2SCollectResourceV2Proto) Descriptor() ([]byte, []int) {
	return fileDescriptorDomestic, []int{19}
}

func (m *C2SCollectResourceV2Proto) GetResType() int32 {
	if m != nil {
		return m.ResType
	}
	return 0
}

type S2CCollectResourceV2Proto struct {
	ResType         int32 `protobuf:"varint,1,opt,name=res_type,json=resType,proto3" json:"res_type,omitempty"`
	Amount          int32 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	CollectTimes    int32 `protobuf:"varint,3,opt,name=collect_times,json=collectTimes,proto3" json:"collect_times,omitempty"`
	NextCollectTime int32 `protobuf:"varint,4,opt,name=next_collect_time,json=nextCollectTime,proto3" json:"next_collect_time,omitempty"`
}

func (m *S2CCollectResourceV2Proto) Reset()         { *m = S2CCollectResourceV2Proto{} }
func (m *S2CCollectResourceV2Proto) String() string { return proto.CompactTextString(m) }
func (*S2CCollectResourceV2Proto) ProtoMessage()    {}
func (*S2CCollectResourceV2Proto) Descriptor() ([]byte, []int) {
	return fileDescriptorDomestic, []int{20}
}

func (m *S2CCollectResourceV2Proto) GetResType() int32 {
	if m != nil {
		return m.ResType
	}
	return 0
}

func (m *S2CCollectResourceV2Proto) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *S2CCollectResourceV2Proto) GetCollectTimes() int32 {
	if m != nil {
		return m.CollectTimes
	}
	return 0
}

func (m *S2CCollectResourceV2Proto) GetNextCollectTime() int32 {
	if m != nil {
		return m.NextCollectTime
	}
	return 0
}

type S2CCollectResourceTimesChangedProto struct {
	StartRecoverCollectTime int32 `protobuf:"varint,1,opt,name=start_recover_collect_time,json=startRecoverCollectTime,proto3" json:"start_recover_collect_time,omitempty"`
}

func (m *S2CCollectResourceTimesChangedProto) Reset()         { *m = S2CCollectResourceTimesChangedProto{} }
func (m *S2CCollectResourceTimesChangedProto) String() string { return proto.CompactTextString(m) }
func (*S2CCollectResourceTimesChangedProto) ProtoMessage()    {}
func (*S2CCollectResourceTimesChangedProto) Descriptor() ([]byte, []int) {
	return fileDescriptorDomestic, []int{21}
}

func (m *S2CCollectResourceTimesChangedProto) GetStartRecoverCollectTime() int32 {
	if m != nil {
		return m.StartRecoverCollectTime
	}
	return 0
}

type S2CResourcePointChangeV2Proto struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *S2CResourcePointChangeV2Proto) Reset()         { *m = S2CResourcePointChangeV2Proto{} }
func (m *S2CResourcePointChangeV2Proto) String() string { return proto.CompactTextString(m) }
func (*S2CResourcePointChangeV2Proto) ProtoMessage()    {}
func (*S2CResourcePointChangeV2Proto) Descriptor() ([]byte, []int) {
	return fileDescriptorDomestic, []int{22}
}

func (m *S2CResourcePointChangeV2Proto) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type S2CRequestResourceConflictProto struct {
	Flag []string `protobuf:"bytes,1,rep,name=flag" json:"flag,omitempty"`
	Name []string `protobuf:"bytes,2,rep,name=name" json:"name,omitempty"`
}

func (m *S2CRequestResourceConflictProto) Reset()         { *m = S2CRequestResourceConflictProto{} }
func (m *S2CRequestResourceConflictProto) String() string { return proto.CompactTextString(m) }
func (*S2CRequestResourceConflictProto) ProtoMessage()    {}
func (*S2CRequestResourceConflictProto) Descriptor() ([]byte, []int) {
	return fileDescriptorDomestic, []int{23}
}

func (m *S2CRequestResourceConflictProto) GetFlag() []string {
	if m != nil {
		return m.Flag
	}
	return nil
}

func (m *S2CRequestResourceConflictProto) GetName() []string {
	if m != nil {
		return m.Name
	}
	return nil
}

type C2SLearnTechnologyProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SLearnTechnologyProto) Reset()                    { *m = C2SLearnTechnologyProto{} }
func (m *C2SLearnTechnologyProto) String() string            { return proto.CompactTextString(m) }
func (*C2SLearnTechnologyProto) ProtoMessage()               {}
func (*C2SLearnTechnologyProto) Descriptor() ([]byte, []int) { return fileDescriptorDomestic, []int{24} }

func (m *C2SLearnTechnologyProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type S2CLearnTechnologyProto struct {
	Id                int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	WorkerPos         int32 `protobuf:"varint,2,opt,name=worker_pos,json=workerPos,proto3" json:"worker_pos,omitempty"`
	WorkerRestEndTime int32 `protobuf:"varint,3,opt,name=worker_rest_end_time,json=workerRestEndTime,proto3" json:"worker_rest_end_time,omitempty"`
}

func (m *S2CLearnTechnologyProto) Reset()                    { *m = S2CLearnTechnologyProto{} }
func (m *S2CLearnTechnologyProto) String() string            { return proto.CompactTextString(m) }
func (*S2CLearnTechnologyProto) ProtoMessage()               {}
func (*S2CLearnTechnologyProto) Descriptor() ([]byte, []int) { return fileDescriptorDomestic, []int{25} }

func (m *S2CLearnTechnologyProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *S2CLearnTechnologyProto) GetWorkerPos() int32 {
	if m != nil {
		return m.WorkerPos
	}
	return 0
}

func (m *S2CLearnTechnologyProto) GetWorkerRestEndTime() int32 {
	if m != nil {
		return m.WorkerRestEndTime
	}
	return 0
}

type C2SUnlockStableBuildingProto struct {
	Type int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *C2SUnlockStableBuildingProto) Reset()         { *m = C2SUnlockStableBuildingProto{} }
func (m *C2SUnlockStableBuildingProto) String() string { return proto.CompactTextString(m) }
func (*C2SUnlockStableBuildingProto) ProtoMessage()    {}
func (*C2SUnlockStableBuildingProto) Descriptor() ([]byte, []int) {
	return fileDescriptorDomestic, []int{26}
}

func (m *C2SUnlockStableBuildingProto) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type S2CUnlockStableBuildingProto struct {
	Building int32 `protobuf:"varint,1,opt,name=building,proto3" json:"building,omitempty"`
}

func (m *S2CUnlockStableBuildingProto) Reset()         { *m = S2CUnlockStableBuildingProto{} }
func (m *S2CUnlockStableBuildingProto) String() string { return proto.CompactTextString(m) }
func (*S2CUnlockStableBuildingProto) ProtoMessage()    {}
func (*S2CUnlockStableBuildingProto) Descriptor() ([]byte, []int) {
	return fileDescriptorDomestic, []int{27}
}

func (m *S2CUnlockStableBuildingProto) GetBuilding() int32 {
	if m != nil {
		return m.Building
	}
	return 0
}

type C2SUpgradeStableBuildingProto struct {
	Type  int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Level int32 `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
}

func (m *C2SUpgradeStableBuildingProto) Reset()         { *m = C2SUpgradeStableBuildingProto{} }
func (m *C2SUpgradeStableBuildingProto) String() string { return proto.CompactTextString(m) }
func (*C2SUpgradeStableBuildingProto) ProtoMessage()    {}
func (*C2SUpgradeStableBuildingProto) Descriptor() ([]byte, []int) {
	return fileDescriptorDomestic, []int{28}
}

func (m *C2SUpgradeStableBuildingProto) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *C2SUpgradeStableBuildingProto) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

type S2CUpgradeStableBuildingProto struct {
	Building          int32 `protobuf:"varint,1,opt,name=building,proto3" json:"building,omitempty"`
	WorkerPos         int32 `protobuf:"varint,2,opt,name=worker_pos,json=workerPos,proto3" json:"worker_pos,omitempty"`
	WorkerRestEndTime int32 `protobuf:"varint,3,opt,name=worker_rest_end_time,json=workerRestEndTime,proto3" json:"worker_rest_end_time,omitempty"`
}

func (m *S2CUpgradeStableBuildingProto) Reset()         { *m = S2CUpgradeStableBuildingProto{} }
func (m *S2CUpgradeStableBuildingProto) String() string { return proto.CompactTextString(m) }
func (*S2CUpgradeStableBuildingProto) ProtoMessage()    {}
func (*S2CUpgradeStableBuildingProto) Descriptor() ([]byte, []int) {
	return fileDescriptorDomestic, []int{29}
}

func (m *S2CUpgradeStableBuildingProto) GetBuilding() int32 {
	if m != nil {
		return m.Building
	}
	return 0
}

func (m *S2CUpgradeStableBuildingProto) GetWorkerPos() int32 {
	if m != nil {
		return m.WorkerPos
	}
	return 0
}

func (m *S2CUpgradeStableBuildingProto) GetWorkerRestEndTime() int32 {
	if m != nil {
		return m.WorkerRestEndTime
	}
	return 0
}

type S2CHeroUpdateExpProto struct {
	Exp int32 `protobuf:"varint,1,opt,name=exp,proto3" json:"exp,omitempty"`
}

func (m *S2CHeroUpdateExpProto) Reset()                    { *m = S2CHeroUpdateExpProto{} }
func (m *S2CHeroUpdateExpProto) String() string            { return proto.CompactTextString(m) }
func (*S2CHeroUpdateExpProto) ProtoMessage()               {}
func (*S2CHeroUpdateExpProto) Descriptor() ([]byte, []int) { return fileDescriptorDomestic, []int{30} }

func (m *S2CHeroUpdateExpProto) GetExp() int32 {
	if m != nil {
		return m.Exp
	}
	return 0
}

type S2CHeroUpgradeLevelProto struct {
	Exp   int32 `protobuf:"varint,2,opt,name=exp,proto3" json:"exp,omitempty"`
	Level int32 `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
}

func (m *S2CHeroUpgradeLevelProto) Reset()         { *m = S2CHeroUpgradeLevelProto{} }
func (m *S2CHeroUpgradeLevelProto) String() string { return proto.CompactTextString(m) }
func (*S2CHeroUpgradeLevelProto) ProtoMessage()    {}
func (*S2CHeroUpgradeLevelProto) Descriptor() ([]byte, []int) {
	return fileDescriptorDomestic, []int{31}
}

func (m *S2CHeroUpgradeLevelProto) GetExp() int32 {
	if m != nil {
		return m.Exp
	}
	return 0
}

func (m *S2CHeroUpgradeLevelProto) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

type S2CHeroUpdateProsperityProto struct {
	Prosperity int32 `protobuf:"varint,1,opt,name=prosperity,proto3" json:"prosperity,omitempty"`
	Capcity    int32 `protobuf:"varint,2,opt,name=capcity,proto3" json:"capcity,omitempty"`
}

func (m *S2CHeroUpdateProsperityProto) Reset()         { *m = S2CHeroUpdateProsperityProto{} }
func (m *S2CHeroUpdateProsperityProto) String() string { return proto.CompactTextString(m) }
func (*S2CHeroUpdateProsperityProto) ProtoMessage()    {}
func (*S2CHeroUpdateProsperityProto) Descriptor() ([]byte, []int) {
	return fileDescriptorDomestic, []int{32}
}

func (m *S2CHeroUpdateProsperityProto) GetProsperity() int32 {
	if m != nil {
		return m.Prosperity
	}
	return 0
}

func (m *S2CHeroUpdateProsperityProto) GetCapcity() int32 {
	if m != nil {
		return m.Capcity
	}
	return 0
}

type C2SIsHeroNameExistProto struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *C2SIsHeroNameExistProto) Reset()                    { *m = C2SIsHeroNameExistProto{} }
func (m *C2SIsHeroNameExistProto) String() string            { return proto.CompactTextString(m) }
func (*C2SIsHeroNameExistProto) ProtoMessage()               {}
func (*C2SIsHeroNameExistProto) Descriptor() ([]byte, []int) { return fileDescriptorDomestic, []int{33} }

func (m *C2SIsHeroNameExistProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type S2CIsHeroNameExistProto struct {
	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Exist bool   `protobuf:"varint,2,opt,name=exist,proto3" json:"exist,omitempty"`
}

func (m *S2CIsHeroNameExistProto) Reset()                    { *m = S2CIsHeroNameExistProto{} }
func (m *S2CIsHeroNameExistProto) String() string            { return proto.CompactTextString(m) }
func (*S2CIsHeroNameExistProto) ProtoMessage()               {}
func (*S2CIsHeroNameExistProto) Descriptor() ([]byte, []int) { return fileDescriptorDomestic, []int{34} }

func (m *S2CIsHeroNameExistProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *S2CIsHeroNameExistProto) GetExist() bool {
	if m != nil {
		return m.Exist
	}
	return false
}

type C2SChangeHeroNameProto struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *C2SChangeHeroNameProto) Reset()                    { *m = C2SChangeHeroNameProto{} }
func (m *C2SChangeHeroNameProto) String() string            { return proto.CompactTextString(m) }
func (*C2SChangeHeroNameProto) ProtoMessage()               {}
func (*C2SChangeHeroNameProto) Descriptor() ([]byte, []int) { return fileDescriptorDomestic, []int{35} }

func (m *C2SChangeHeroNameProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type S2CChangeHeroNameProto struct {
	Name               string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	NextChangeNameTime int32  `protobuf:"varint,2,opt,name=next_change_name_time,json=nextChangeNameTime,proto3" json:"next_change_name_time,omitempty"`
}

func (m *S2CChangeHeroNameProto) Reset()                    { *m = S2CChangeHeroNameProto{} }
func (m *S2CChangeHeroNameProto) String() string            { return proto.CompactTextString(m) }
func (*S2CChangeHeroNameProto) ProtoMessage()               {}
func (*S2CChangeHeroNameProto) Descriptor() ([]byte, []int) { return fileDescriptorDomestic, []int{36} }

func (m *S2CChangeHeroNameProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *S2CChangeHeroNameProto) GetNextChangeNameTime() int32 {
	if m != nil {
		return m.NextChangeNameTime
	}
	return 0
}

type S2CHeroNameChangedBroadcastProto struct {
	Id   []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *S2CHeroNameChangedBroadcastProto) Reset()         { *m = S2CHeroNameChangedBroadcastProto{} }
func (m *S2CHeroNameChangedBroadcastProto) String() string { return proto.CompactTextString(m) }
func (*S2CHeroNameChangedBroadcastProto) ProtoMessage()    {}
func (*S2CHeroNameChangedBroadcastProto) Descriptor() ([]byte, []int) {
	return fileDescriptorDomestic, []int{37}
}

func (m *S2CHeroNameChangedBroadcastProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *S2CHeroNameChangedBroadcastProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type C2SListOldNameProto struct {
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SListOldNameProto) Reset()                    { *m = C2SListOldNameProto{} }
func (m *C2SListOldNameProto) String() string            { return proto.CompactTextString(m) }
func (*C2SListOldNameProto) ProtoMessage()               {}
func (*C2SListOldNameProto) Descriptor() ([]byte, []int) { return fileDescriptorDomestic, []int{38} }

func (m *C2SListOldNameProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type S2CListOldNameProto struct {
	Name []string `protobuf:"bytes,1,rep,name=name" json:"name,omitempty"`
}

func (m *S2CListOldNameProto) Reset()                    { *m = S2CListOldNameProto{} }
func (m *S2CListOldNameProto) String() string            { return proto.CompactTextString(m) }
func (*S2CListOldNameProto) ProtoMessage()               {}
func (*S2CListOldNameProto) Descriptor() ([]byte, []int) { return fileDescriptorDomestic, []int{39} }

func (m *S2CListOldNameProto) GetName() []string {
	if m != nil {
		return m.Name
	}
	return nil
}

type C2SViewOtherHeroProto struct {
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SViewOtherHeroProto) Reset()                    { *m = C2SViewOtherHeroProto{} }
func (m *C2SViewOtherHeroProto) String() string            { return proto.CompactTextString(m) }
func (*C2SViewOtherHeroProto) ProtoMessage()               {}
func (*C2SViewOtherHeroProto) Descriptor() ([]byte, []int) { return fileDescriptorDomestic, []int{40} }

func (m *C2SViewOtherHeroProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type S2CViewOtherHeroProto struct {
	Hero []byte `protobuf:"bytes,16,opt,name=hero,proto3" json:"hero,omitempty"`
}

func (m *S2CViewOtherHeroProto) Reset()                    { *m = S2CViewOtherHeroProto{} }
func (m *S2CViewOtherHeroProto) String() string            { return proto.CompactTextString(m) }
func (*S2CViewOtherHeroProto) ProtoMessage()               {}
func (*S2CViewOtherHeroProto) Descriptor() ([]byte, []int) { return fileDescriptorDomestic, []int{41} }

func (m *S2CViewOtherHeroProto) GetHero() []byte {
	if m != nil {
		return m.Hero
	}
	return nil
}

type C2SViewFightInfoProto struct {
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SViewFightInfoProto) Reset()                    { *m = C2SViewFightInfoProto{} }
func (m *C2SViewFightInfoProto) String() string            { return proto.CompactTextString(m) }
func (*C2SViewFightInfoProto) ProtoMessage()               {}
func (*C2SViewFightInfoProto) Descriptor() ([]byte, []int) { return fileDescriptorDomestic, []int{42} }

func (m *C2SViewFightInfoProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type S2CViewFightInfoProto struct {
	Id                 []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RealmFightSuccess  int32  `protobuf:"varint,2,opt,name=realm_fight_success,json=realmFightSuccess,proto3" json:"realm_fight_success,omitempty"`
	RealmFightFail     int32  `protobuf:"varint,3,opt,name=realm_fight_fail,json=realmFightFail,proto3" json:"realm_fight_fail,omitempty"`
	RealmAssist        int32  `protobuf:"varint,4,opt,name=realm_assist,json=realmAssist,proto3" json:"realm_assist,omitempty"`
	RealmBeenAssist    int32  `protobuf:"varint,5,opt,name=realm_been_assist,json=realmBeenAssist,proto3" json:"realm_been_assist,omitempty"`
	Inverstigation     int32  `protobuf:"varint,6,opt,name=inverstigation,proto3" json:"inverstigation,omitempty"`
	BeenInverstigation int32  `protobuf:"varint,7,opt,name=been_inverstigation,json=beenInverstigation,proto3" json:"been_inverstigation,omitempty"`
}

func (m *S2CViewFightInfoProto) Reset()                    { *m = S2CViewFightInfoProto{} }
func (m *S2CViewFightInfoProto) String() string            { return proto.CompactTextString(m) }
func (*S2CViewFightInfoProto) ProtoMessage()               {}
func (*S2CViewFightInfoProto) Descriptor() ([]byte, []int) { return fileDescriptorDomestic, []int{43} }

func (m *S2CViewFightInfoProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *S2CViewFightInfoProto) GetRealmFightSuccess() int32 {
	if m != nil {
		return m.RealmFightSuccess
	}
	return 0
}

func (m *S2CViewFightInfoProto) GetRealmFightFail() int32 {
	if m != nil {
		return m.RealmFightFail
	}
	return 0
}

func (m *S2CViewFightInfoProto) GetRealmAssist() int32 {
	if m != nil {
		return m.RealmAssist
	}
	return 0
}

func (m *S2CViewFightInfoProto) GetRealmBeenAssist() int32 {
	if m != nil {
		return m.RealmBeenAssist
	}
	return 0
}

func (m *S2CViewFightInfoProto) GetInverstigation() int32 {
	if m != nil {
		return m.Inverstigation
	}
	return 0
}

func (m *S2CViewFightInfoProto) GetBeenInverstigation() int32 {
	if m != nil {
		return m.BeenInverstigation
	}
	return 0
}

type S2CUpdateBuildingWorkerCoefProto struct {
	Coef int32 `protobuf:"varint,1,opt,name=coef,proto3" json:"coef,omitempty"`
}

func (m *S2CUpdateBuildingWorkerCoefProto) Reset()         { *m = S2CUpdateBuildingWorkerCoefProto{} }
func (m *S2CUpdateBuildingWorkerCoefProto) String() string { return proto.CompactTextString(m) }
func (*S2CUpdateBuildingWorkerCoefProto) ProtoMessage()    {}
func (*S2CUpdateBuildingWorkerCoefProto) Descriptor() ([]byte, []int) {
	return fileDescriptorDomestic, []int{44}
}

func (m *S2CUpdateBuildingWorkerCoefProto) GetCoef() int32 {
	if m != nil {
		return m.Coef
	}
	return 0
}

type S2CUpdateTechWorkerCoefProto struct {
	Coef int32 `protobuf:"varint,1,opt,name=coef,proto3" json:"coef,omitempty"`
}

func (m *S2CUpdateTechWorkerCoefProto) Reset()         { *m = S2CUpdateTechWorkerCoefProto{} }
func (m *S2CUpdateTechWorkerCoefProto) String() string { return proto.CompactTextString(m) }
func (*S2CUpdateTechWorkerCoefProto) ProtoMessage()    {}
func (*S2CUpdateTechWorkerCoefProto) Descriptor() ([]byte, []int) {
	return fileDescriptorDomestic, []int{45}
}

func (m *S2CUpdateTechWorkerCoefProto) GetCoef() int32 {
	if m != nil {
		return m.Coef
	}
	return 0
}

type S2CUpdateBuildingWorkerFatigueDurationProto struct {
	Fatigue int32 `protobuf:"varint,1,opt,name=fatigue,proto3" json:"fatigue,omitempty"`
}

func (m *S2CUpdateBuildingWorkerFatigueDurationProto) Reset() {
	*m = S2CUpdateBuildingWorkerFatigueDurationProto{}
}
func (m *S2CUpdateBuildingWorkerFatigueDurationProto) String() string {
	return proto.CompactTextString(m)
}
func (*S2CUpdateBuildingWorkerFatigueDurationProto) ProtoMessage() {}
func (*S2CUpdateBuildingWorkerFatigueDurationProto) Descriptor() ([]byte, []int) {
	return fileDescriptorDomestic, []int{46}
}

func (m *S2CUpdateBuildingWorkerFatigueDurationProto) GetFatigue() int32 {
	if m != nil {
		return m.Fatigue
	}
	return 0
}

type S2CUpdateTechWorkerFatigueDurationProto struct {
	Fatigue int32 `protobuf:"varint,1,opt,name=fatigue,proto3" json:"fatigue,omitempty"`
}

func (m *S2CUpdateTechWorkerFatigueDurationProto) Reset() {
	*m = S2CUpdateTechWorkerFatigueDurationProto{}
}
func (m *S2CUpdateTechWorkerFatigueDurationProto) String() string { return proto.CompactTextString(m) }
func (*S2CUpdateTechWorkerFatigueDurationProto) ProtoMessage()    {}
func (*S2CUpdateTechWorkerFatigueDurationProto) Descriptor() ([]byte, []int) {
	return fileDescriptorDomestic, []int{47}
}

func (m *S2CUpdateTechWorkerFatigueDurationProto) GetFatigue() int32 {
	if m != nil {
		return m.Fatigue
	}
	return 0
}

type C2SMiaoBuildingWorkerCdProto struct {
	WorkerPos int32 `protobuf:"varint,1,opt,name=worker_pos,json=workerPos,proto3" json:"worker_pos,omitempty"`
}

func (m *C2SMiaoBuildingWorkerCdProto) Reset()         { *m = C2SMiaoBuildingWorkerCdProto{} }
func (m *C2SMiaoBuildingWorkerCdProto) String() string { return proto.CompactTextString(m) }
func (*C2SMiaoBuildingWorkerCdProto) ProtoMessage()    {}
func (*C2SMiaoBuildingWorkerCdProto) Descriptor() ([]byte, []int) {
	return fileDescriptorDomestic, []int{48}
}

func (m *C2SMiaoBuildingWorkerCdProto) GetWorkerPos() int32 {
	if m != nil {
		return m.WorkerPos
	}
	return 0
}

type S2CMiaoBuildingWorkerCdProto struct {
	WorkerPos int32 `protobuf:"varint,1,opt,name=worker_pos,json=workerPos,proto3" json:"worker_pos,omitempty"`
}

func (m *S2CMiaoBuildingWorkerCdProto) Reset()         { *m = S2CMiaoBuildingWorkerCdProto{} }
func (m *S2CMiaoBuildingWorkerCdProto) String() string { return proto.CompactTextString(m) }
func (*S2CMiaoBuildingWorkerCdProto) ProtoMessage()    {}
func (*S2CMiaoBuildingWorkerCdProto) Descriptor() ([]byte, []int) {
	return fileDescriptorDomestic, []int{49}
}

func (m *S2CMiaoBuildingWorkerCdProto) GetWorkerPos() int32 {
	if m != nil {
		return m.WorkerPos
	}
	return 0
}

type C2SMiaoTechWorkerCdProto struct {
	WorkerPos int32 `protobuf:"varint,1,opt,name=worker_pos,json=workerPos,proto3" json:"worker_pos,omitempty"`
}

func (m *C2SMiaoTechWorkerCdProto) Reset()         { *m = C2SMiaoTechWorkerCdProto{} }
func (m *C2SMiaoTechWorkerCdProto) String() string { return proto.CompactTextString(m) }
func (*C2SMiaoTechWorkerCdProto) ProtoMessage()    {}
func (*C2SMiaoTechWorkerCdProto) Descriptor() ([]byte, []int) {
	return fileDescriptorDomestic, []int{50}
}

func (m *C2SMiaoTechWorkerCdProto) GetWorkerPos() int32 {
	if m != nil {
		return m.WorkerPos
	}
	return 0
}

type S2CMiaoTechWorkerCdProto struct {
	WorkerPos int32 `protobuf:"varint,1,opt,name=worker_pos,json=workerPos,proto3" json:"worker_pos,omitempty"`
}

func (m *S2CMiaoTechWorkerCdProto) Reset()         { *m = S2CMiaoTechWorkerCdProto{} }
func (m *S2CMiaoTechWorkerCdProto) String() string { return proto.CompactTextString(m) }
func (*S2CMiaoTechWorkerCdProto) ProtoMessage()    {}
func (*S2CMiaoTechWorkerCdProto) Descriptor() ([]byte, []int) {
	return fileDescriptorDomestic, []int{51}
}

func (m *S2CMiaoTechWorkerCdProto) GetWorkerPos() int32 {
	if m != nil {
		return m.WorkerPos
	}
	return 0
}

type S2CUpdateYuanbaoProto struct {
	Yuanbao int32 `protobuf:"varint,1,opt,name=yuanbao,proto3" json:"yuanbao,omitempty"`
}

func (m *S2CUpdateYuanbaoProto) Reset()                    { *m = S2CUpdateYuanbaoProto{} }
func (m *S2CUpdateYuanbaoProto) String() string            { return proto.CompactTextString(m) }
func (*S2CUpdateYuanbaoProto) ProtoMessage()               {}
func (*S2CUpdateYuanbaoProto) Descriptor() ([]byte, []int) { return fileDescriptorDomestic, []int{52} }

func (m *S2CUpdateYuanbaoProto) GetYuanbao() int32 {
	if m != nil {
		return m.Yuanbao
	}
	return 0
}

type S2CUpdateYuanbaoGiftLimitProto struct {
	YuanbaoGiftLimit int32 `protobuf:"varint,1,opt,name=yuanbao_gift_limit,json=yuanbaoGiftLimit,proto3" json:"yuanbao_gift_limit,omitempty"`
}

func (m *S2CUpdateYuanbaoGiftLimitProto) Reset()         { *m = S2CUpdateYuanbaoGiftLimitProto{} }
func (m *S2CUpdateYuanbaoGiftLimitProto) String() string { return proto.CompactTextString(m) }
func (*S2CUpdateYuanbaoGiftLimitProto) ProtoMessage()    {}
func (*S2CUpdateYuanbaoGiftLimitProto) Descriptor() ([]byte, []int) {
	return fileDescriptorDomestic, []int{53}
}

func (m *S2CUpdateYuanbaoGiftLimitProto) GetYuanbaoGiftLimit() int32 {
	if m != nil {
		return m.YuanbaoGiftLimit
	}
	return 0
}

type S2CUpdateDianquanProto struct {
	Dianquan int32 `protobuf:"varint,1,opt,name=dianquan,proto3" json:"dianquan,omitempty"`
}

func (m *S2CUpdateDianquanProto) Reset()                    { *m = S2CUpdateDianquanProto{} }
func (m *S2CUpdateDianquanProto) String() string            { return proto.CompactTextString(m) }
func (*S2CUpdateDianquanProto) ProtoMessage()               {}
func (*S2CUpdateDianquanProto) Descriptor() ([]byte, []int) { return fileDescriptorDomestic, []int{54} }

func (m *S2CUpdateDianquanProto) GetDianquan() int32 {
	if m != nil {
		return m.Dianquan
	}
	return 0
}

type S2CUpdateYinliangProto struct {
	Yinliang int32 `protobuf:"varint,1,opt,name=yinliang,proto3" json:"yinliang,omitempty"`
}

func (m *S2CUpdateYinliangProto) Reset()                    { *m = S2CUpdateYinliangProto{} }
func (m *S2CUpdateYinliangProto) String() string            { return proto.CompactTextString(m) }
func (*S2CUpdateYinliangProto) ProtoMessage()               {}
func (*S2CUpdateYinliangProto) Descriptor() ([]byte, []int) { return fileDescriptorDomestic, []int{55} }

func (m *S2CUpdateYinliangProto) GetYinliang() int32 {
	if m != nil {
		return m.Yinliang
	}
	return 0
}

type S2CUpdateHeroFightAmountProto struct {
	FightAmount int32 `protobuf:"varint,1,opt,name=fight_amount,json=fightAmount,proto3" json:"fight_amount,omitempty"`
}

func (m *S2CUpdateHeroFightAmountProto) Reset()         { *m = S2CUpdateHeroFightAmountProto{} }
func (m *S2CUpdateHeroFightAmountProto) String() string { return proto.CompactTextString(m) }
func (*S2CUpdateHeroFightAmountProto) ProtoMessage()    {}
func (*S2CUpdateHeroFightAmountProto) Descriptor() ([]byte, []int) {
	return fileDescriptorDomestic, []int{56}
}

func (m *S2CUpdateHeroFightAmountProto) GetFightAmount() int32 {
	if m != nil {
		return m.FightAmount
	}
	return 0
}

type S2CRecoveryForgingTimeChangeProto struct {
	Times    int32 `protobuf:"varint,3,opt,name=times,proto3" json:"times,omitempty"`
	NextTime int32 `protobuf:"varint,4,opt,name=next_time,json=nextTime,proto3" json:"next_time,omitempty"`
}

func (m *S2CRecoveryForgingTimeChangeProto) Reset()         { *m = S2CRecoveryForgingTimeChangeProto{} }
func (m *S2CRecoveryForgingTimeChangeProto) String() string { return proto.CompactTextString(m) }
func (*S2CRecoveryForgingTimeChangeProto) ProtoMessage()    {}
func (*S2CRecoveryForgingTimeChangeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorDomestic, []int{57}
}

func (m *S2CRecoveryForgingTimeChangeProto) GetTimes() int32 {
	if m != nil {
		return m.Times
	}
	return 0
}

func (m *S2CRecoveryForgingTimeChangeProto) GetNextTime() int32 {
	if m != nil {
		return m.NextTime
	}
	return 0
}

type C2SForgingEquipProto struct {
	Slot int32 `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
}

func (m *C2SForgingEquipProto) Reset()                    { *m = C2SForgingEquipProto{} }
func (m *C2SForgingEquipProto) String() string            { return proto.CompactTextString(m) }
func (*C2SForgingEquipProto) ProtoMessage()               {}
func (*C2SForgingEquipProto) Descriptor() ([]byte, []int) { return fileDescriptorDomestic, []int{58} }

func (m *C2SForgingEquipProto) GetSlot() int32 {
	if m != nil {
		return m.Slot
	}
	return 0
}

type S2CForgingEquipProto struct {
	Slot int32 `protobuf:"varint,1,opt,name=slot,proto3" json:"slot,omitempty"`
}

func (m *S2CForgingEquipProto) Reset()                    { *m = S2CForgingEquipProto{} }
func (m *S2CForgingEquipProto) String() string            { return proto.CompactTextString(m) }
func (*S2CForgingEquipProto) ProtoMessage()               {}
func (*S2CForgingEquipProto) Descriptor() ([]byte, []int) { return fileDescriptorDomestic, []int{59} }

func (m *S2CForgingEquipProto) GetSlot() int32 {
	if m != nil {
		return m.Slot
	}
	return 0
}

type S2CUpdateNewForgingPosProto struct {
	NewForgingPos []int32 `protobuf:"varint,1,rep,name=new_forging_pos,json=newForgingPos" json:"new_forging_pos,omitempty"`
}

func (m *S2CUpdateNewForgingPosProto) Reset()         { *m = S2CUpdateNewForgingPosProto{} }
func (m *S2CUpdateNewForgingPosProto) String() string { return proto.CompactTextString(m) }
func (*S2CUpdateNewForgingPosProto) ProtoMessage()    {}
func (*S2CUpdateNewForgingPosProto) Descriptor() ([]byte, []int) {
	return fileDescriptorDomestic, []int{60}
}

func (m *S2CUpdateNewForgingPosProto) GetNewForgingPos() []int32 {
	if m != nil {
		return m.NewForgingPos
	}
	return nil
}

type C2SSignProto struct {
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (m *C2SSignProto) Reset()                    { *m = C2SSignProto{} }
func (m *C2SSignProto) String() string            { return proto.CompactTextString(m) }
func (*C2SSignProto) ProtoMessage()               {}
func (*C2SSignProto) Descriptor() ([]byte, []int) { return fileDescriptorDomestic, []int{61} }

func (m *C2SSignProto) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type C2SVoiceProto struct {
	Content []byte `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *C2SVoiceProto) Reset()                    { *m = C2SVoiceProto{} }
func (m *C2SVoiceProto) String() string            { return proto.CompactTextString(m) }
func (*C2SVoiceProto) ProtoMessage()               {}
func (*C2SVoiceProto) Descriptor() ([]byte, []int) { return fileDescriptorDomestic, []int{62} }

func (m *C2SVoiceProto) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type S2CBuildingWorkerTimeChangedProto struct {
	WorkerPos         int32 `protobuf:"varint,1,opt,name=worker_pos,json=workerPos,proto3" json:"worker_pos,omitempty"`
	WorkerRestEndTime int32 `protobuf:"varint,2,opt,name=worker_rest_end_time,json=workerRestEndTime,proto3" json:"worker_rest_end_time,omitempty"`
}

func (m *S2CBuildingWorkerTimeChangedProto) Reset()         { *m = S2CBuildingWorkerTimeChangedProto{} }
func (m *S2CBuildingWorkerTimeChangedProto) String() string { return proto.CompactTextString(m) }
func (*S2CBuildingWorkerTimeChangedProto) ProtoMessage()    {}
func (*S2CBuildingWorkerTimeChangedProto) Descriptor() ([]byte, []int) {
	return fileDescriptorDomestic, []int{63}
}

func (m *S2CBuildingWorkerTimeChangedProto) GetWorkerPos() int32 {
	if m != nil {
		return m.WorkerPos
	}
	return 0
}

func (m *S2CBuildingWorkerTimeChangedProto) GetWorkerRestEndTime() int32 {
	if m != nil {
		return m.WorkerRestEndTime
	}
	return 0
}

type S2CTechWorkerTimeChangedProto struct {
	WorkerPos         int32 `protobuf:"varint,1,opt,name=worker_pos,json=workerPos,proto3" json:"worker_pos,omitempty"`
	WorkerRestEndTime int32 `protobuf:"varint,2,opt,name=worker_rest_end_time,json=workerRestEndTime,proto3" json:"worker_rest_end_time,omitempty"`
}

func (m *S2CTechWorkerTimeChangedProto) Reset()         { *m = S2CTechWorkerTimeChangedProto{} }
func (m *S2CTechWorkerTimeChangedProto) String() string { return proto.CompactTextString(m) }
func (*S2CTechWorkerTimeChangedProto) ProtoMessage()    {}
func (*S2CTechWorkerTimeChangedProto) Descriptor() ([]byte, []int) {
	return fileDescriptorDomestic, []int{64}
}

func (m *S2CTechWorkerTimeChangedProto) GetWorkerPos() int32 {
	if m != nil {
		return m.WorkerPos
	}
	return 0
}

func (m *S2CTechWorkerTimeChangedProto) GetWorkerRestEndTime() int32 {
	if m != nil {
		return m.WorkerRestEndTime
	}
	return 0
}

type S2CCityEventTimeChangedProto struct {
	NextTime int32 `protobuf:"varint,1,opt,name=next_time,json=nextTime,proto3" json:"next_time,omitempty"`
}

func (m *S2CCityEventTimeChangedProto) Reset()         { *m = S2CCityEventTimeChangedProto{} }
func (m *S2CCityEventTimeChangedProto) String() string { return proto.CompactTextString(m) }
func (*S2CCityEventTimeChangedProto) ProtoMessage()    {}
func (*S2CCityEventTimeChangedProto) Descriptor() ([]byte, []int) {
	return fileDescriptorDomestic, []int{65}
}

func (m *S2CCityEventTimeChangedProto) GetNextTime() int32 {
	if m != nil {
		return m.NextTime
	}
	return 0
}

type S2CRequestCityExchangeEventProto struct {
	AcceptTimes int32 `protobuf:"varint,1,opt,name=accept_times,json=acceptTimes,proto3" json:"accept_times,omitempty"`
	EventId     int32 `protobuf:"varint,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
}

func (m *S2CRequestCityExchangeEventProto) Reset()         { *m = S2CRequestCityExchangeEventProto{} }
func (m *S2CRequestCityExchangeEventProto) String() string { return proto.CompactTextString(m) }
func (*S2CRequestCityExchangeEventProto) ProtoMessage()    {}
func (*S2CRequestCityExchangeEventProto) Descriptor() ([]byte, []int) {
	return fileDescriptorDomestic, []int{66}
}

func (m *S2CRequestCityExchangeEventProto) GetAcceptTimes() int32 {
	if m != nil {
		return m.AcceptTimes
	}
	return 0
}

func (m *S2CRequestCityExchangeEventProto) GetEventId() int32 {
	if m != nil {
		return m.EventId
	}
	return 0
}

type C2SCityEventExchangeProto struct {
	GiveUp bool `protobuf:"varint,1,opt,name=give_up,json=giveUp,proto3" json:"give_up,omitempty"`
}

func (m *C2SCityEventExchangeProto) Reset()         { *m = C2SCityEventExchangeProto{} }
func (m *C2SCityEventExchangeProto) String() string { return proto.CompactTextString(m) }
func (*C2SCityEventExchangeProto) ProtoMessage()    {}
func (*C2SCityEventExchangeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorDomestic, []int{67}
}

func (m *C2SCityEventExchangeProto) GetGiveUp() bool {
	if m != nil {
		return m.GiveUp
	}
	return false
}

type S2CCityEventExchangeProto struct {
	GiveUp bool `protobuf:"varint,1,opt,name=give_up,json=giveUp,proto3" json:"give_up,omitempty"`
}

func (m *S2CCityEventExchangeProto) Reset()         { *m = S2CCityEventExchangeProto{} }
func (m *S2CCityEventExchangeProto) String() string { return proto.CompactTextString(m) }
func (*S2CCityEventExchangeProto) ProtoMessage()    {}
func (*S2CCityEventExchangeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorDomestic, []int{68}
}

func (m *S2CCityEventExchangeProto) GetGiveUp() bool {
	if m != nil {
		return m.GiveUp
	}
	return false
}

type S2CUpdateStrategyRestoreStartTimeProto struct {
	Time int32 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
}

func (m *S2CUpdateStrategyRestoreStartTimeProto) Reset() {
	*m = S2CUpdateStrategyRestoreStartTimeProto{}
}
func (m *S2CUpdateStrategyRestoreStartTimeProto) String() string { return proto.CompactTextString(m) }
func (*S2CUpdateStrategyRestoreStartTimeProto) ProtoMessage()    {}
func (*S2CUpdateStrategyRestoreStartTimeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorDomestic, []int{69}
}

func (m *S2CUpdateStrategyRestoreStartTimeProto) GetTime() int32 {
	if m != nil {
		return m.Time
	}
	return 0
}

type S2CUpdateStrategyNextUseTimeProto struct {
	Id   int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Time int32 `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (m *S2CUpdateStrategyNextUseTimeProto) Reset()         { *m = S2CUpdateStrategyNextUseTimeProto{} }
func (m *S2CUpdateStrategyNextUseTimeProto) String() string { return proto.CompactTextString(m) }
func (*S2CUpdateStrategyNextUseTimeProto) ProtoMessage()    {}
func (*S2CUpdateStrategyNextUseTimeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorDomestic, []int{70}
}

func (m *S2CUpdateStrategyNextUseTimeProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *S2CUpdateStrategyNextUseTimeProto) GetTime() int32 {
	if m != nil {
		return m.Time
	}
	return 0
}

type S2CUpdateJadeOreProto struct {
	Amount int32 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *S2CUpdateJadeOreProto) Reset()                    { *m = S2CUpdateJadeOreProto{} }
func (m *S2CUpdateJadeOreProto) String() string            { return proto.CompactTextString(m) }
func (*S2CUpdateJadeOreProto) ProtoMessage()               {}
func (*S2CUpdateJadeOreProto) Descriptor() ([]byte, []int) { return fileDescriptorDomestic, []int{71} }

func (m *S2CUpdateJadeOreProto) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type S2CUpdateJadeProto struct {
	Amount          int32 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	HistoryJade     int32 `protobuf:"varint,2,opt,name=history_jade,json=historyJade,proto3" json:"history_jade,omitempty"`
	TodayObtainJade int32 `protobuf:"varint,3,opt,name=today_obtain_jade,json=todayObtainJade,proto3" json:"today_obtain_jade,omitempty"`
}

func (m *S2CUpdateJadeProto) Reset()                    { *m = S2CUpdateJadeProto{} }
func (m *S2CUpdateJadeProto) String() string            { return proto.CompactTextString(m) }
func (*S2CUpdateJadeProto) ProtoMessage()               {}
func (*S2CUpdateJadeProto) Descriptor() ([]byte, []int) { return fileDescriptorDomestic, []int{72} }

func (m *S2CUpdateJadeProto) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *S2CUpdateJadeProto) GetHistoryJade() int32 {
	if m != nil {
		return m.HistoryJade
	}
	return 0
}

func (m *S2CUpdateJadeProto) GetTodayObtainJade() int32 {
	if m != nil {
		return m.TodayObtainJade
	}
	return 0
}

type C2SChangeHeadProto struct {
	HeadId string `protobuf:"bytes,2,opt,name=head_id,json=headId,proto3" json:"head_id,omitempty"`
}

func (m *C2SChangeHeadProto) Reset()                    { *m = C2SChangeHeadProto{} }
func (m *C2SChangeHeadProto) String() string            { return proto.CompactTextString(m) }
func (*C2SChangeHeadProto) ProtoMessage()               {}
func (*C2SChangeHeadProto) Descriptor() ([]byte, []int) { return fileDescriptorDomestic, []int{73} }

func (m *C2SChangeHeadProto) GetHeadId() string {
	if m != nil {
		return m.HeadId
	}
	return ""
}

type S2CChangeHeadProto struct {
	HeadId string `protobuf:"bytes,3,opt,name=head_id,json=headId,proto3" json:"head_id,omitempty"`
}

func (m *S2CChangeHeadProto) Reset()                    { *m = S2CChangeHeadProto{} }
func (m *S2CChangeHeadProto) String() string            { return proto.CompactTextString(m) }
func (*S2CChangeHeadProto) ProtoMessage()               {}
func (*S2CChangeHeadProto) Descriptor() ([]byte, []int) { return fileDescriptorDomestic, []int{74} }

func (m *S2CChangeHeadProto) GetHeadId() string {
	if m != nil {
		return m.HeadId
	}
	return ""
}

type C2SChangeBodyProto struct {
	BodyId int32 `protobuf:"varint,1,opt,name=body_id,json=bodyId,proto3" json:"body_id,omitempty"`
}

func (m *C2SChangeBodyProto) Reset()                    { *m = C2SChangeBodyProto{} }
func (m *C2SChangeBodyProto) String() string            { return proto.CompactTextString(m) }
func (*C2SChangeBodyProto) ProtoMessage()               {}
func (*C2SChangeBodyProto) Descriptor() ([]byte, []int) { return fileDescriptorDomestic, []int{75} }

func (m *C2SChangeBodyProto) GetBodyId() int32 {
	if m != nil {
		return m.BodyId
	}
	return 0
}

type S2CChangeBodyProto struct {
	BodyId int32 `protobuf:"varint,1,opt,name=body_id,json=bodyId,proto3" json:"body_id,omitempty"`
}

func (m *S2CChangeBodyProto) Reset()                    { *m = S2CChangeBodyProto{} }
func (m *S2CChangeBodyProto) String() string            { return proto.CompactTextString(m) }
func (*S2CChangeBodyProto) ProtoMessage()               {}
func (*S2CChangeBodyProto) Descriptor() ([]byte, []int) { return fileDescriptorDomestic, []int{76} }

func (m *S2CChangeBodyProto) GetBodyId() int32 {
	if m != nil {
		return m.BodyId
	}
	return 0
}

type S2CCollectCountdownPrizeProto struct {
	Prize       []byte `protobuf:"bytes,1,opt,name=prize,proto3" json:"prize,omitempty"`
	CollectTime int32  `protobuf:"varint,2,opt,name=collect_time,json=collectTime,proto3" json:"collect_time,omitempty"`
	DescId      int32  `protobuf:"varint,3,opt,name=desc_id,json=descId,proto3" json:"desc_id,omitempty"`
	Prosprity   int32  `protobuf:"varint,4,opt,name=prosprity,proto3" json:"prosprity,omitempty"`
}

func (m *S2CCollectCountdownPrizeProto) Reset()         { *m = S2CCollectCountdownPrizeProto{} }
func (m *S2CCollectCountdownPrizeProto) String() string { return proto.CompactTextString(m) }
func (*S2CCollectCountdownPrizeProto) ProtoMessage()    {}
func (*S2CCollectCountdownPrizeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorDomestic, []int{77}
}

func (m *S2CCollectCountdownPrizeProto) GetPrize() []byte {
	if m != nil {
		return m.Prize
	}
	return nil
}

func (m *S2CCollectCountdownPrizeProto) GetCollectTime() int32 {
	if m != nil {
		return m.CollectTime
	}
	return 0
}

func (m *S2CCollectCountdownPrizeProto) GetDescId() int32 {
	if m != nil {
		return m.DescId
	}
	return 0
}

func (m *S2CCollectCountdownPrizeProto) GetProsprity() int32 {
	if m != nil {
		return m.Prosprity
	}
	return 0
}

type S2CListWorkshopEquipmentProto struct {
	RefreshTime          int32   `protobuf:"varint,1,opt,name=refresh_time,json=refreshTime,proto3" json:"refresh_time,omitempty"`
	Equipment            []int32 `protobuf:"varint,2,rep,name=equipment" json:"equipment,omitempty"`
	Duration             []int32 `protobuf:"varint,3,rep,name=duration" json:"duration,omitempty"`
	Index                int32   `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"`
	CollectTime          int32   `protobuf:"varint,5,opt,name=collect_time,json=collectTime,proto3" json:"collect_time,omitempty"`
	WorkshopRefreshTimes int32   `protobuf:"varint,6,opt,name=workshop_refresh_times,json=workshopRefreshTimes,proto3" json:"workshop_refresh_times,omitempty"`
}

func (m *S2CListWorkshopEquipmentProto) Reset()         { *m = S2CListWorkshopEquipmentProto{} }
func (m *S2CListWorkshopEquipmentProto) String() string { return proto.CompactTextString(m) }
func (*S2CListWorkshopEquipmentProto) ProtoMessage()    {}
func (*S2CListWorkshopEquipmentProto) Descriptor() ([]byte, []int) {
	return fileDescriptorDomestic, []int{78}
}

func (m *S2CListWorkshopEquipmentProto) GetRefreshTime() int32 {
	if m != nil {
		return m.RefreshTime
	}
	return 0
}

func (m *S2CListWorkshopEquipmentProto) GetEquipment() []int32 {
	if m != nil {
		return m.Equipment
	}
	return nil
}

func (m *S2CListWorkshopEquipmentProto) GetDuration() []int32 {
	if m != nil {
		return m.Duration
	}
	return nil
}

func (m *S2CListWorkshopEquipmentProto) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *S2CListWorkshopEquipmentProto) GetCollectTime() int32 {
	if m != nil {
		return m.CollectTime
	}
	return 0
}

func (m *S2CListWorkshopEquipmentProto) GetWorkshopRefreshTimes() int32 {
	if m != nil {
		return m.WorkshopRefreshTimes
	}
	return 0
}

type C2SStartWorkshopProto struct {
	Index int32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *C2SStartWorkshopProto) Reset()                    { *m = C2SStartWorkshopProto{} }
func (m *C2SStartWorkshopProto) String() string            { return proto.CompactTextString(m) }
func (*C2SStartWorkshopProto) ProtoMessage()               {}
func (*C2SStartWorkshopProto) Descriptor() ([]byte, []int) { return fileDescriptorDomestic, []int{79} }

func (m *C2SStartWorkshopProto) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

type S2CStartWorkshopProto struct {
	Index       int32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	CollectTime int32 `protobuf:"varint,2,opt,name=collect_time,json=collectTime,proto3" json:"collect_time,omitempty"`
}

func (m *S2CStartWorkshopProto) Reset()                    { *m = S2CStartWorkshopProto{} }
func (m *S2CStartWorkshopProto) String() string            { return proto.CompactTextString(m) }
func (*S2CStartWorkshopProto) ProtoMessage()               {}
func (*S2CStartWorkshopProto) Descriptor() ([]byte, []int) { return fileDescriptorDomestic, []int{80} }

func (m *S2CStartWorkshopProto) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *S2CStartWorkshopProto) GetCollectTime() int32 {
	if m != nil {
		return m.CollectTime
	}
	return 0
}

type C2SCollectWorkshopProto struct {
	Index int32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *C2SCollectWorkshopProto) Reset()                    { *m = C2SCollectWorkshopProto{} }
func (m *C2SCollectWorkshopProto) String() string            { return proto.CompactTextString(m) }
func (*C2SCollectWorkshopProto) ProtoMessage()               {}
func (*C2SCollectWorkshopProto) Descriptor() ([]byte, []int) { return fileDescriptorDomestic, []int{81} }

func (m *C2SCollectWorkshopProto) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

type S2CCollectWorkshopProto struct {
	Index int32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *S2CCollectWorkshopProto) Reset()                    { *m = S2CCollectWorkshopProto{} }
func (m *S2CCollectWorkshopProto) String() string            { return proto.CompactTextString(m) }
func (*S2CCollectWorkshopProto) ProtoMessage()               {}
func (*S2CCollectWorkshopProto) Descriptor() ([]byte, []int) { return fileDescriptorDomestic, []int{82} }

func (m *S2CCollectWorkshopProto) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

type C2SWorkshopMiaoCdProto struct {
	Index int32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *C2SWorkshopMiaoCdProto) Reset()                    { *m = C2SWorkshopMiaoCdProto{} }
func (m *C2SWorkshopMiaoCdProto) String() string            { return proto.CompactTextString(m) }
func (*C2SWorkshopMiaoCdProto) ProtoMessage()               {}
func (*C2SWorkshopMiaoCdProto) Descriptor() ([]byte, []int) { return fileDescriptorDomestic, []int{83} }

func (m *C2SWorkshopMiaoCdProto) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

type S2CWorkshopMiaoCdProto struct {
	Index int32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *S2CWorkshopMiaoCdProto) Reset()                    { *m = S2CWorkshopMiaoCdProto{} }
func (m *S2CWorkshopMiaoCdProto) String() string            { return proto.CompactTextString(m) }
func (*S2CWorkshopMiaoCdProto) ProtoMessage()               {}
func (*S2CWorkshopMiaoCdProto) Descriptor() ([]byte, []int) { return fileDescriptorDomestic, []int{84} }

func (m *S2CWorkshopMiaoCdProto) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

type S2CSeasonStartBroadcastProto struct {
	Season    proto3.Season `protobuf:"varint,1,opt,name=season,proto3,enum=proto.Season" json:"season,omitempty"`
	StartTime int32         `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	IsReset   bool          `protobuf:"varint,3,opt,name=is_reset,json=isReset,proto3" json:"is_reset,omitempty"`
}

func (m *S2CSeasonStartBroadcastProto) Reset()         { *m = S2CSeasonStartBroadcastProto{} }
func (m *S2CSeasonStartBroadcastProto) String() string { return proto.CompactTextString(m) }
func (*S2CSeasonStartBroadcastProto) ProtoMessage()    {}
func (*S2CSeasonStartBroadcastProto) Descriptor() ([]byte, []int) {
	return fileDescriptorDomestic, []int{85}
}

func (m *S2CSeasonStartBroadcastProto) GetSeason() proto3.Season {
	if m != nil {
		return m.Season
	}
	return proto3.Season_InvalidSeason
}

func (m *S2CSeasonStartBroadcastProto) GetStartTime() int32 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *S2CSeasonStartBroadcastProto) GetIsReset() bool {
	if m != nil {
		return m.IsReset
	}
	return false
}

type S2CUpdateCostReduceCoefProto struct {
	Building int32 `protobuf:"varint,1,opt,name=building,proto3" json:"building,omitempty"`
	Tech     int32 `protobuf:"varint,2,opt,name=tech,proto3" json:"tech,omitempty"`
}

func (m *S2CUpdateCostReduceCoefProto) Reset()         { *m = S2CUpdateCostReduceCoefProto{} }
func (m *S2CUpdateCostReduceCoefProto) String() string { return proto.CompactTextString(m) }
func (*S2CUpdateCostReduceCoefProto) ProtoMessage()    {}
func (*S2CUpdateCostReduceCoefProto) Descriptor() ([]byte, []int) {
	return fileDescriptorDomestic, []int{86}
}

func (m *S2CUpdateCostReduceCoefProto) GetBuilding() int32 {
	if m != nil {
		return m.Building
	}
	return 0
}

func (m *S2CUpdateCostReduceCoefProto) GetTech() int32 {
	if m != nil {
		return m.Tech
	}
	return 0
}

type S2CUpdateSpProto struct {
	Sp int32 `protobuf:"varint,1,opt,name=sp,proto3" json:"sp,omitempty"`
}

func (m *S2CUpdateSpProto) Reset()                    { *m = S2CUpdateSpProto{} }
func (m *S2CUpdateSpProto) String() string            { return proto.CompactTextString(m) }
func (*S2CUpdateSpProto) ProtoMessage()               {}
func (*S2CUpdateSpProto) Descriptor() ([]byte, []int) { return fileDescriptorDomestic, []int{87} }

func (m *S2CUpdateSpProto) GetSp() int32 {
	if m != nil {
		return m.Sp
	}
	return 0
}

type C2SBuySpProto struct {
	BuyTimes int32 `protobuf:"varint,1,opt,name=buy_times,json=buyTimes,proto3" json:"buy_times,omitempty"`
}

func (m *C2SBuySpProto) Reset()                    { *m = C2SBuySpProto{} }
func (m *C2SBuySpProto) String() string            { return proto.CompactTextString(m) }
func (*C2SBuySpProto) ProtoMessage()               {}
func (*C2SBuySpProto) Descriptor() ([]byte, []int) { return fileDescriptorDomestic, []int{88} }

func (m *C2SBuySpProto) GetBuyTimes() int32 {
	if m != nil {
		return m.BuyTimes
	}
	return 0
}

type S2CBuySpProto struct {
	Sp         int32 `protobuf:"varint,1,opt,name=sp,proto3" json:"sp,omitempty"`
	BuySpTimes int32 `protobuf:"varint,2,opt,name=buy_sp_times,json=buySpTimes,proto3" json:"buy_sp_times,omitempty"`
}

func (m *S2CBuySpProto) Reset()                    { *m = S2CBuySpProto{} }
func (m *S2CBuySpProto) String() string            { return proto.CompactTextString(m) }
func (*S2CBuySpProto) ProtoMessage()               {}
func (*S2CBuySpProto) Descriptor() ([]byte, []int) { return fileDescriptorDomestic, []int{89} }

func (m *S2CBuySpProto) GetSp() int32 {
	if m != nil {
		return m.Sp
	}
	return 0
}

func (m *S2CBuySpProto) GetBuySpTimes() int32 {
	if m != nil {
		return m.BuySpTimes
	}
	return 0
}

type C2SUseBufEffectProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SUseBufEffectProto) Reset()                    { *m = C2SUseBufEffectProto{} }
func (m *C2SUseBufEffectProto) String() string            { return proto.CompactTextString(m) }
func (*C2SUseBufEffectProto) ProtoMessage()               {}
func (*C2SUseBufEffectProto) Descriptor() ([]byte, []int) { return fileDescriptorDomestic, []int{90} }

func (m *C2SUseBufEffectProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type S2CUseBufEffectProto struct {
	BufEffect *proto1.BufferEffectProto `protobuf:"bytes,1,opt,name=buf_effect,json=bufEffect" json:"buf_effect,omitempty"`
}

func (m *S2CUseBufEffectProto) Reset()                    { *m = S2CUseBufEffectProto{} }
func (m *S2CUseBufEffectProto) String() string            { return proto.CompactTextString(m) }
func (*S2CUseBufEffectProto) ProtoMessage()               {}
func (*S2CUseBufEffectProto) Descriptor() ([]byte, []int) { return fileDescriptorDomestic, []int{91} }

func (m *S2CUseBufEffectProto) GetBufEffect() *proto1.BufferEffectProto {
	if m != nil {
		return m.BufEffect
	}
	return nil
}

type S2COpenBufEffectUiProto struct {
	Buffers *proto1.HeroBufferProto `protobuf:"bytes,1,opt,name=buffers" json:"buffers,omitempty"`
}

func (m *S2COpenBufEffectUiProto) Reset()                    { *m = S2COpenBufEffectUiProto{} }
func (m *S2COpenBufEffectUiProto) String() string            { return proto.CompactTextString(m) }
func (*S2COpenBufEffectUiProto) ProtoMessage()               {}
func (*S2COpenBufEffectUiProto) Descriptor() ([]byte, []int) { return fileDescriptorDomestic, []int{92} }

func (m *S2COpenBufEffectUiProto) GetBuffers() *proto1.HeroBufferProto {
	if m != nil {
		return m.Buffers
	}
	return nil
}

type C2SUseAdvantageProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SUseAdvantageProto) Reset()                    { *m = C2SUseAdvantageProto{} }
func (m *C2SUseAdvantageProto) String() string            { return proto.CompactTextString(m) }
func (*C2SUseAdvantageProto) ProtoMessage()               {}
func (*C2SUseAdvantageProto) Descriptor() ([]byte, []int) { return fileDescriptorDomestic, []int{93} }

func (m *C2SUseAdvantageProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type S2CUseAdvantageProto struct {
	Id        int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	StartTime int32 `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   int32 `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (m *S2CUseAdvantageProto) Reset()                    { *m = S2CUseAdvantageProto{} }
func (m *S2CUseAdvantageProto) String() string            { return proto.CompactTextString(m) }
func (*S2CUseAdvantageProto) ProtoMessage()               {}
func (*S2CUseAdvantageProto) Descriptor() ([]byte, []int) { return fileDescriptorDomestic, []int{94} }

func (m *S2CUseAdvantageProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *S2CUseAdvantageProto) GetStartTime() int32 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *S2CUseAdvantageProto) GetEndTime() int32 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

type S2CUpdateAdvantageCountProto struct {
	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *S2CUpdateAdvantageCountProto) Reset()         { *m = S2CUpdateAdvantageCountProto{} }
func (m *S2CUpdateAdvantageCountProto) String() string { return proto.CompactTextString(m) }
func (*S2CUpdateAdvantageCountProto) ProtoMessage()    {}
func (*S2CUpdateAdvantageCountProto) Descriptor() ([]byte, []int) {
	return fileDescriptorDomestic, []int{95}
}

func (m *S2CUpdateAdvantageCountProto) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type C2SWorkerUnlockProto struct {
	Pos int32 `protobuf:"varint,1,opt,name=pos,proto3" json:"pos,omitempty"`
}

func (m *C2SWorkerUnlockProto) Reset()                    { *m = C2SWorkerUnlockProto{} }
func (m *C2SWorkerUnlockProto) String() string            { return proto.CompactTextString(m) }
func (*C2SWorkerUnlockProto) ProtoMessage()               {}
func (*C2SWorkerUnlockProto) Descriptor() ([]byte, []int) { return fileDescriptorDomestic, []int{96} }

func (m *C2SWorkerUnlockProto) GetPos() int32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

type S2CWorkerUnlockProto struct {
	Pos              int32 `protobuf:"varint,1,opt,name=pos,proto3" json:"pos,omitempty"`
	NewLockStartTime int32 `protobuf:"varint,2,opt,name=new_lock_start_time,json=newLockStartTime,proto3" json:"new_lock_start_time,omitempty"`
}

func (m *S2CWorkerUnlockProto) Reset()                    { *m = S2CWorkerUnlockProto{} }
func (m *S2CWorkerUnlockProto) String() string            { return proto.CompactTextString(m) }
func (*S2CWorkerUnlockProto) ProtoMessage()               {}
func (*S2CWorkerUnlockProto) Descriptor() ([]byte, []int) { return fileDescriptorDomestic, []int{97} }

func (m *S2CWorkerUnlockProto) GetPos() int32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

func (m *S2CWorkerUnlockProto) GetNewLockStartTime() int32 {
	if m != nil {
		return m.NewLockStartTime
	}
	return 0
}

type S2CWorkerAlwaysUnlockProto struct {
	Pos int32 `protobuf:"varint,1,opt,name=pos,proto3" json:"pos,omitempty"`
}

func (m *S2CWorkerAlwaysUnlockProto) Reset()         { *m = S2CWorkerAlwaysUnlockProto{} }
func (m *S2CWorkerAlwaysUnlockProto) String() string { return proto.CompactTextString(m) }
func (*S2CWorkerAlwaysUnlockProto) ProtoMessage()    {}
func (*S2CWorkerAlwaysUnlockProto) Descriptor() ([]byte, []int) {
	return fileDescriptorDomestic, []int{98}
}

func (m *S2CWorkerAlwaysUnlockProto) GetPos() int32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

func init() {
	proto.RegisterType((*S2CUpdateResourceBuildingProto)(nil), "proto.S2CUpdateResourceBuildingProto")
	proto.RegisterType((*S2CUpdateMultiResourceBuildingProto)(nil), "proto.S2CUpdateMultiResourceBuildingProto")
	proto.RegisterType((*C2SCreateBuildingProto)(nil), "proto.C2SCreateBuildingProto")
	proto.RegisterType((*S2CCreateBuildingProto)(nil), "proto.S2CCreateBuildingProto")
	proto.RegisterType((*C2SUpgradeBuildingProto)(nil), "proto.C2SUpgradeBuildingProto")
	proto.RegisterType((*S2CUpgradeBuildingProto)(nil), "proto.S2CUpgradeBuildingProto")
	proto.RegisterType((*C2SRebuildResourceBuildingProto)(nil), "proto.C2SRebuildResourceBuildingProto")
	proto.RegisterType((*S2CRebuildResourceBuildingProto)(nil), "proto.S2CRebuildResourceBuildingProto")
	proto.RegisterType((*C2SUnlockOuterCityProto)(nil), "proto.C2SUnlockOuterCityProto")
	proto.RegisterType((*S2CUnlockOuterCityProto)(nil), "proto.S2CUnlockOuterCityProto")
	proto.RegisterType((*C2SUpdateOuterCityTypeProto)(nil), "proto.C2SUpdateOuterCityTypeProto")
	proto.RegisterType((*S2CUpdateOuterCityTypeProto)(nil), "proto.S2CUpdateOuterCityTypeProto")
	proto.RegisterType((*C2SUpgradeOuterCityBuildingProto)(nil), "proto.C2SUpgradeOuterCityBuildingProto")
	proto.RegisterType((*S2CUpgradeOuterCityBuildingProto)(nil), "proto.S2CUpgradeOuterCityBuildingProto")
	proto.RegisterType((*S2CResourceUpdateProto)(nil), "proto.S2CResourceUpdateProto")
	proto.RegisterType((*S2CResourceUpdateSingleProto)(nil), "proto.S2CResourceUpdateSingleProto")
	proto.RegisterType((*S2CResourceCapcityUpdateProto)(nil), "proto.S2CResourceCapcityUpdateProto")
	proto.RegisterType((*C2SCollectResourceProto)(nil), "proto.C2SCollectResourceProto")
	proto.RegisterType((*S2CCollectResourceProto)(nil), "proto.S2CCollectResourceProto")
	proto.RegisterType((*C2SCollectResourceV2Proto)(nil), "proto.C2SCollectResourceV2Proto")
	proto.RegisterType((*S2CCollectResourceV2Proto)(nil), "proto.S2CCollectResourceV2Proto")
	proto.RegisterType((*S2CCollectResourceTimesChangedProto)(nil), "proto.S2CCollectResourceTimesChangedProto")
	proto.RegisterType((*S2CResourcePointChangeV2Proto)(nil), "proto.S2CResourcePointChangeV2Proto")
	proto.RegisterType((*S2CRequestResourceConflictProto)(nil), "proto.S2CRequestResourceConflictProto")
	proto.RegisterType((*C2SLearnTechnologyProto)(nil), "proto.C2SLearnTechnologyProto")
	proto.RegisterType((*S2CLearnTechnologyProto)(nil), "proto.S2CLearnTechnologyProto")
	proto.RegisterType((*C2SUnlockStableBuildingProto)(nil), "proto.C2SUnlockStableBuildingProto")
	proto.RegisterType((*S2CUnlockStableBuildingProto)(nil), "proto.S2CUnlockStableBuildingProto")
	proto.RegisterType((*C2SUpgradeStableBuildingProto)(nil), "proto.C2SUpgradeStableBuildingProto")
	proto.RegisterType((*S2CUpgradeStableBuildingProto)(nil), "proto.S2CUpgradeStableBuildingProto")
	proto.RegisterType((*S2CHeroUpdateExpProto)(nil), "proto.S2CHeroUpdateExpProto")
	proto.RegisterType((*S2CHeroUpgradeLevelProto)(nil), "proto.S2CHeroUpgradeLevelProto")
	proto.RegisterType((*S2CHeroUpdateProsperityProto)(nil), "proto.S2CHeroUpdateProsperityProto")
	proto.RegisterType((*C2SIsHeroNameExistProto)(nil), "proto.C2SIsHeroNameExistProto")
	proto.RegisterType((*S2CIsHeroNameExistProto)(nil), "proto.S2CIsHeroNameExistProto")
	proto.RegisterType((*C2SChangeHeroNameProto)(nil), "proto.C2SChangeHeroNameProto")
	proto.RegisterType((*S2CChangeHeroNameProto)(nil), "proto.S2CChangeHeroNameProto")
	proto.RegisterType((*S2CHeroNameChangedBroadcastProto)(nil), "proto.S2CHeroNameChangedBroadcastProto")
	proto.RegisterType((*C2SListOldNameProto)(nil), "proto.C2SListOldNameProto")
	proto.RegisterType((*S2CListOldNameProto)(nil), "proto.S2CListOldNameProto")
	proto.RegisterType((*C2SViewOtherHeroProto)(nil), "proto.C2SViewOtherHeroProto")
	proto.RegisterType((*S2CViewOtherHeroProto)(nil), "proto.S2CViewOtherHeroProto")
	proto.RegisterType((*C2SViewFightInfoProto)(nil), "proto.C2SViewFightInfoProto")
	proto.RegisterType((*S2CViewFightInfoProto)(nil), "proto.S2CViewFightInfoProto")
	proto.RegisterType((*S2CUpdateBuildingWorkerCoefProto)(nil), "proto.S2CUpdateBuildingWorkerCoefProto")
	proto.RegisterType((*S2CUpdateTechWorkerCoefProto)(nil), "proto.S2CUpdateTechWorkerCoefProto")
	proto.RegisterType((*S2CUpdateBuildingWorkerFatigueDurationProto)(nil), "proto.S2CUpdateBuildingWorkerFatigueDurationProto")
	proto.RegisterType((*S2CUpdateTechWorkerFatigueDurationProto)(nil), "proto.S2CUpdateTechWorkerFatigueDurationProto")
	proto.RegisterType((*C2SMiaoBuildingWorkerCdProto)(nil), "proto.C2SMiaoBuildingWorkerCdProto")
	proto.RegisterType((*S2CMiaoBuildingWorkerCdProto)(nil), "proto.S2CMiaoBuildingWorkerCdProto")
	proto.RegisterType((*C2SMiaoTechWorkerCdProto)(nil), "proto.C2SMiaoTechWorkerCdProto")
	proto.RegisterType((*S2CMiaoTechWorkerCdProto)(nil), "proto.S2CMiaoTechWorkerCdProto")
	proto.RegisterType((*S2CUpdateYuanbaoProto)(nil), "proto.S2CUpdateYuanbaoProto")
	proto.RegisterType((*S2CUpdateYuanbaoGiftLimitProto)(nil), "proto.S2CUpdateYuanbaoGiftLimitProto")
	proto.RegisterType((*S2CUpdateDianquanProto)(nil), "proto.S2CUpdateDianquanProto")
	proto.RegisterType((*S2CUpdateYinliangProto)(nil), "proto.S2CUpdateYinliangProto")
	proto.RegisterType((*S2CUpdateHeroFightAmountProto)(nil), "proto.S2CUpdateHeroFightAmountProto")
	proto.RegisterType((*S2CRecoveryForgingTimeChangeProto)(nil), "proto.S2CRecoveryForgingTimeChangeProto")
	proto.RegisterType((*C2SForgingEquipProto)(nil), "proto.C2SForgingEquipProto")
	proto.RegisterType((*S2CForgingEquipProto)(nil), "proto.S2CForgingEquipProto")
	proto.RegisterType((*S2CUpdateNewForgingPosProto)(nil), "proto.S2CUpdateNewForgingPosProto")
	proto.RegisterType((*C2SSignProto)(nil), "proto.C2SSignProto")
	proto.RegisterType((*C2SVoiceProto)(nil), "proto.C2SVoiceProto")
	proto.RegisterType((*S2CBuildingWorkerTimeChangedProto)(nil), "proto.S2CBuildingWorkerTimeChangedProto")
	proto.RegisterType((*S2CTechWorkerTimeChangedProto)(nil), "proto.S2CTechWorkerTimeChangedProto")
	proto.RegisterType((*S2CCityEventTimeChangedProto)(nil), "proto.S2CCityEventTimeChangedProto")
	proto.RegisterType((*S2CRequestCityExchangeEventProto)(nil), "proto.S2CRequestCityExchangeEventProto")
	proto.RegisterType((*C2SCityEventExchangeProto)(nil), "proto.C2SCityEventExchangeProto")
	proto.RegisterType((*S2CCityEventExchangeProto)(nil), "proto.S2CCityEventExchangeProto")
	proto.RegisterType((*S2CUpdateStrategyRestoreStartTimeProto)(nil), "proto.S2CUpdateStrategyRestoreStartTimeProto")
	proto.RegisterType((*S2CUpdateStrategyNextUseTimeProto)(nil), "proto.S2CUpdateStrategyNextUseTimeProto")
	proto.RegisterType((*S2CUpdateJadeOreProto)(nil), "proto.S2CUpdateJadeOreProto")
	proto.RegisterType((*S2CUpdateJadeProto)(nil), "proto.S2CUpdateJadeProto")
	proto.RegisterType((*C2SChangeHeadProto)(nil), "proto.C2SChangeHeadProto")
	proto.RegisterType((*S2CChangeHeadProto)(nil), "proto.S2CChangeHeadProto")
	proto.RegisterType((*C2SChangeBodyProto)(nil), "proto.C2SChangeBodyProto")
	proto.RegisterType((*S2CChangeBodyProto)(nil), "proto.S2CChangeBodyProto")
	proto.RegisterType((*S2CCollectCountdownPrizeProto)(nil), "proto.S2CCollectCountdownPrizeProto")
	proto.RegisterType((*S2CListWorkshopEquipmentProto)(nil), "proto.S2CListWorkshopEquipmentProto")
	proto.RegisterType((*C2SStartWorkshopProto)(nil), "proto.C2SStartWorkshopProto")
	proto.RegisterType((*S2CStartWorkshopProto)(nil), "proto.S2CStartWorkshopProto")
	proto.RegisterType((*C2SCollectWorkshopProto)(nil), "proto.C2SCollectWorkshopProto")
	proto.RegisterType((*S2CCollectWorkshopProto)(nil), "proto.S2CCollectWorkshopProto")
	proto.RegisterType((*C2SWorkshopMiaoCdProto)(nil), "proto.C2SWorkshopMiaoCdProto")
	proto.RegisterType((*S2CWorkshopMiaoCdProto)(nil), "proto.S2CWorkshopMiaoCdProto")
	proto.RegisterType((*S2CSeasonStartBroadcastProto)(nil), "proto.S2CSeasonStartBroadcastProto")
	proto.RegisterType((*S2CUpdateCostReduceCoefProto)(nil), "proto.S2CUpdateCostReduceCoefProto")
	proto.RegisterType((*S2CUpdateSpProto)(nil), "proto.S2CUpdateSpProto")
	proto.RegisterType((*C2SBuySpProto)(nil), "proto.C2SBuySpProto")
	proto.RegisterType((*S2CBuySpProto)(nil), "proto.S2CBuySpProto")
	proto.RegisterType((*C2SUseBufEffectProto)(nil), "proto.C2SUseBufEffectProto")
	proto.RegisterType((*S2CUseBufEffectProto)(nil), "proto.S2CUseBufEffectProto")
	proto.RegisterType((*S2COpenBufEffectUiProto)(nil), "proto.S2COpenBufEffectUiProto")
	proto.RegisterType((*C2SUseAdvantageProto)(nil), "proto.C2SUseAdvantageProto")
	proto.RegisterType((*S2CUseAdvantageProto)(nil), "proto.S2CUseAdvantageProto")
	proto.RegisterType((*S2CUpdateAdvantageCountProto)(nil), "proto.S2CUpdateAdvantageCountProto")
	proto.RegisterType((*C2SWorkerUnlockProto)(nil), "proto.C2SWorkerUnlockProto")
	proto.RegisterType((*S2CWorkerUnlockProto)(nil), "proto.S2CWorkerUnlockProto")
	proto.RegisterType((*S2CWorkerAlwaysUnlockProto)(nil), "proto.S2CWorkerAlwaysUnlockProto")
}
func (m *S2CUpdateResourceBuildingProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateResourceBuildingProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Id))
	}
	if m.Amount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Amount))
	}
	if m.Capcity != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Capcity))
	}
	if m.Output != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Output))
	}
	if m.Conflict {
		dAtA[i] = 0x28
		i++
		if m.Conflict {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BaseLevelLock {
		dAtA[i] = 0x30
		i++
		if m.BaseLevelLock {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CUpdateMultiResourceBuildingProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateMultiResourceBuildingProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		for _, num := range m.Id {
			dAtA[i] = 0x8
			i++
			i = encodeVarintDomestic(dAtA, i, uint64(num))
		}
	}
	if len(m.Amount) > 0 {
		for _, num := range m.Amount {
			dAtA[i] = 0x10
			i++
			i = encodeVarintDomestic(dAtA, i, uint64(num))
		}
	}
	if len(m.Capcity) > 0 {
		for _, num := range m.Capcity {
			dAtA[i] = 0x18
			i++
			i = encodeVarintDomestic(dAtA, i, uint64(num))
		}
	}
	if len(m.Output) > 0 {
		for _, num := range m.Output {
			dAtA[i] = 0x20
			i++
			i = encodeVarintDomestic(dAtA, i, uint64(num))
		}
	}
	if len(m.Conflict) > 0 {
		for _, b := range m.Conflict {
			dAtA[i] = 0x28
			i++
			if b {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i++
		}
	}
	if len(m.BaseLevelLock) > 0 {
		for _, b := range m.BaseLevelLock {
			dAtA[i] = 0x30
			i++
			if b {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i++
		}
	}
	return i, nil
}

func (m *C2SCreateBuildingProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCreateBuildingProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Id))
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *S2CCreateBuildingProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCreateBuildingProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Id))
	}
	if m.Building != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Building))
	}
	if m.WorkerRestEndTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.WorkerRestEndTime))
	}
	if m.WorkerPos != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.WorkerPos))
	}
	return i, nil
}

func (m *C2SUpgradeBuildingProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SUpgradeBuildingProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *S2CUpgradeBuildingProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpgradeBuildingProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Id))
	}
	if m.Building != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Building))
	}
	if m.WorkerRestEndTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.WorkerRestEndTime))
	}
	if m.WorkerPos != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.WorkerPos))
	}
	return i, nil
}

func (m *C2SRebuildResourceBuildingProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SRebuildResourceBuildingProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Id))
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *S2CRebuildResourceBuildingProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CRebuildResourceBuildingProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Id))
	}
	if m.Building != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Building))
	}
	if m.WorkerRestEndTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.WorkerRestEndTime))
	}
	if m.WorkerPos != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.WorkerPos))
	}
	return i, nil
}

func (m *C2SUnlockOuterCityProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SUnlockOuterCityProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Id))
	}
	if m.T != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.T))
	}
	return i, nil
}

func (m *S2CUnlockOuterCityProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUnlockOuterCityProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OuterCity) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(len(m.OuterCity)))
		i += copy(dAtA[i:], m.OuterCity)
	}
	return i, nil
}

func (m *C2SUpdateOuterCityTypeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SUpdateOuterCityTypeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Id))
	}
	if m.T != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.T))
	}
	return i, nil
}

func (m *S2CUpdateOuterCityTypeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateOuterCityTypeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Id))
	}
	if m.T != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.T))
	}
	if len(m.Ids) > 0 {
		for _, num := range m.Ids {
			dAtA[i] = 0x18
			i++
			i = encodeVarintDomestic(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *C2SUpgradeOuterCityBuildingProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SUpgradeOuterCityBuildingProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *S2CUpgradeOuterCityBuildingProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpgradeOuterCityBuildingProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Id))
	}
	if m.CityId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.CityId))
	}
	if m.OldId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.OldId))
	}
	return i, nil
}

func (m *S2CResourceUpdateProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CResourceUpdateProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Gold != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Gold))
	}
	if m.Food != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Food))
	}
	if m.Wood != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Wood))
	}
	if m.Stone != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Stone))
	}
	if m.IsSafe {
		dAtA[i] = 0x28
		i++
		if m.IsSafe {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CResourceUpdateSingleProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CResourceUpdateSingleProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ResType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.ResType))
	}
	if m.Amount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Amount))
	}
	if m.IsSafe {
		dAtA[i] = 0x18
		i++
		if m.IsSafe {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CResourceCapcityUpdateProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CResourceCapcityUpdateProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GoldCapcity != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.GoldCapcity))
	}
	if m.FoodCapcity != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.FoodCapcity))
	}
	if m.WoodCapcity != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.WoodCapcity))
	}
	if m.StoneCapcity != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.StoneCapcity))
	}
	if m.ProtectedCapcity != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.ProtectedCapcity))
	}
	return i, nil
}

func (m *C2SCollectResourceProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCollectResourceProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *S2CCollectResourceProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCollectResourceProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Id))
	}
	if m.Amount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Amount))
	}
	return i, nil
}

func (m *C2SCollectResourceV2Proto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCollectResourceV2Proto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ResType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.ResType))
	}
	return i, nil
}

func (m *S2CCollectResourceV2Proto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCollectResourceV2Proto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ResType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.ResType))
	}
	if m.Amount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Amount))
	}
	if m.CollectTimes != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.CollectTimes))
	}
	if m.NextCollectTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.NextCollectTime))
	}
	return i, nil
}

func (m *S2CCollectResourceTimesChangedProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCollectResourceTimesChangedProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StartRecoverCollectTime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.StartRecoverCollectTime))
	}
	return i, nil
}

func (m *S2CResourcePointChangeV2Proto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CResourcePointChangeV2Proto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *S2CRequestResourceConflictProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CRequestResourceConflictProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Flag) > 0 {
		for _, s := range m.Flag {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Name) > 0 {
		for _, s := range m.Name {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *C2SLearnTechnologyProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SLearnTechnologyProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *S2CLearnTechnologyProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CLearnTechnologyProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Id))
	}
	if m.WorkerPos != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.WorkerPos))
	}
	if m.WorkerRestEndTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.WorkerRestEndTime))
	}
	return i, nil
}

func (m *C2SUnlockStableBuildingProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SUnlockStableBuildingProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *S2CUnlockStableBuildingProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUnlockStableBuildingProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Building != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Building))
	}
	return i, nil
}

func (m *C2SUpgradeStableBuildingProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SUpgradeStableBuildingProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Type))
	}
	if m.Level != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Level))
	}
	return i, nil
}

func (m *S2CUpgradeStableBuildingProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpgradeStableBuildingProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Building != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Building))
	}
	if m.WorkerPos != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.WorkerPos))
	}
	if m.WorkerRestEndTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.WorkerRestEndTime))
	}
	return i, nil
}

func (m *S2CHeroUpdateExpProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CHeroUpdateExpProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Exp != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Exp))
	}
	return i, nil
}

func (m *S2CHeroUpgradeLevelProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CHeroUpgradeLevelProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Level != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Level))
	}
	if m.Exp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Exp))
	}
	return i, nil
}

func (m *S2CHeroUpdateProsperityProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CHeroUpdateProsperityProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Prosperity != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Prosperity))
	}
	if m.Capcity != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Capcity))
	}
	return i, nil
}

func (m *C2SIsHeroNameExistProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SIsHeroNameExistProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *S2CIsHeroNameExistProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CIsHeroNameExistProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Exist {
		dAtA[i] = 0x10
		i++
		if m.Exist {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *C2SChangeHeroNameProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SChangeHeroNameProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *S2CChangeHeroNameProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CChangeHeroNameProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.NextChangeNameTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.NextChangeNameTime))
	}
	return i, nil
}

func (m *S2CHeroNameChangedBroadcastProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CHeroNameChangedBroadcastProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *C2SListOldNameProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SListOldNameProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *S2CListOldNameProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CListOldNameProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		for _, s := range m.Name {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *C2SViewOtherHeroProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SViewOtherHeroProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *S2CViewOtherHeroProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CViewOtherHeroProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Hero) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(len(m.Hero)))
		i += copy(dAtA[i:], m.Hero)
	}
	return i, nil
}

func (m *C2SViewFightInfoProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SViewFightInfoProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *S2CViewFightInfoProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CViewFightInfoProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.RealmFightSuccess != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.RealmFightSuccess))
	}
	if m.RealmFightFail != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.RealmFightFail))
	}
	if m.RealmAssist != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.RealmAssist))
	}
	if m.RealmBeenAssist != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.RealmBeenAssist))
	}
	if m.Inverstigation != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Inverstigation))
	}
	if m.BeenInverstigation != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.BeenInverstigation))
	}
	return i, nil
}

func (m *S2CUpdateBuildingWorkerCoefProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateBuildingWorkerCoefProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Coef != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Coef))
	}
	return i, nil
}

func (m *S2CUpdateTechWorkerCoefProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateTechWorkerCoefProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Coef != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Coef))
	}
	return i, nil
}

func (m *S2CUpdateBuildingWorkerFatigueDurationProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateBuildingWorkerFatigueDurationProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fatigue != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Fatigue))
	}
	return i, nil
}

func (m *S2CUpdateTechWorkerFatigueDurationProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateTechWorkerFatigueDurationProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fatigue != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Fatigue))
	}
	return i, nil
}

func (m *C2SMiaoBuildingWorkerCdProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SMiaoBuildingWorkerCdProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.WorkerPos != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.WorkerPos))
	}
	return i, nil
}

func (m *S2CMiaoBuildingWorkerCdProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CMiaoBuildingWorkerCdProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.WorkerPos != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.WorkerPos))
	}
	return i, nil
}

func (m *C2SMiaoTechWorkerCdProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SMiaoTechWorkerCdProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.WorkerPos != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.WorkerPos))
	}
	return i, nil
}

func (m *S2CMiaoTechWorkerCdProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CMiaoTechWorkerCdProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.WorkerPos != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.WorkerPos))
	}
	return i, nil
}

func (m *S2CUpdateYuanbaoProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateYuanbaoProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Yuanbao != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Yuanbao))
	}
	return i, nil
}

func (m *S2CUpdateYuanbaoGiftLimitProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateYuanbaoGiftLimitProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.YuanbaoGiftLimit != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.YuanbaoGiftLimit))
	}
	return i, nil
}

func (m *S2CUpdateDianquanProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateDianquanProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Dianquan != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Dianquan))
	}
	return i, nil
}

func (m *S2CUpdateYinliangProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateYinliangProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Yinliang != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Yinliang))
	}
	return i, nil
}

func (m *S2CUpdateHeroFightAmountProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateHeroFightAmountProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FightAmount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.FightAmount))
	}
	return i, nil
}

func (m *S2CRecoveryForgingTimeChangeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CRecoveryForgingTimeChangeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Times != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Times))
	}
	if m.NextTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.NextTime))
	}
	return i, nil
}

func (m *C2SForgingEquipProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SForgingEquipProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Slot != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Slot))
	}
	return i, nil
}

func (m *S2CForgingEquipProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CForgingEquipProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Slot != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Slot))
	}
	return i, nil
}

func (m *S2CUpdateNewForgingPosProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateNewForgingPosProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NewForgingPos) > 0 {
		for _, num := range m.NewForgingPos {
			dAtA[i] = 0x8
			i++
			i = encodeVarintDomestic(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *C2SSignProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SSignProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Text) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	return i, nil
}

func (m *C2SVoiceProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SVoiceProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Content) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	return i, nil
}

func (m *S2CBuildingWorkerTimeChangedProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CBuildingWorkerTimeChangedProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.WorkerPos != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.WorkerPos))
	}
	if m.WorkerRestEndTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.WorkerRestEndTime))
	}
	return i, nil
}

func (m *S2CTechWorkerTimeChangedProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CTechWorkerTimeChangedProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.WorkerPos != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.WorkerPos))
	}
	if m.WorkerRestEndTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.WorkerRestEndTime))
	}
	return i, nil
}

func (m *S2CCityEventTimeChangedProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCityEventTimeChangedProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NextTime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.NextTime))
	}
	return i, nil
}

func (m *S2CRequestCityExchangeEventProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CRequestCityExchangeEventProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AcceptTimes != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.AcceptTimes))
	}
	if m.EventId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.EventId))
	}
	return i, nil
}

func (m *C2SCityEventExchangeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCityEventExchangeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GiveUp {
		dAtA[i] = 0x8
		i++
		if m.GiveUp {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CCityEventExchangeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCityEventExchangeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GiveUp {
		dAtA[i] = 0x8
		i++
		if m.GiveUp {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CUpdateStrategyRestoreStartTimeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateStrategyRestoreStartTimeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Time))
	}
	return i, nil
}

func (m *S2CUpdateStrategyNextUseTimeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateStrategyNextUseTimeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Id))
	}
	if m.Time != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Time))
	}
	return i, nil
}

func (m *S2CUpdateJadeOreProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateJadeOreProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Amount))
	}
	return i, nil
}

func (m *S2CUpdateJadeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateJadeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Amount))
	}
	if m.HistoryJade != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.HistoryJade))
	}
	if m.TodayObtainJade != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.TodayObtainJade))
	}
	return i, nil
}

func (m *C2SChangeHeadProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SChangeHeadProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HeadId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(len(m.HeadId)))
		i += copy(dAtA[i:], m.HeadId)
	}
	return i, nil
}

func (m *S2CChangeHeadProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CChangeHeadProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HeadId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(len(m.HeadId)))
		i += copy(dAtA[i:], m.HeadId)
	}
	return i, nil
}

func (m *C2SChangeBodyProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SChangeBodyProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BodyId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.BodyId))
	}
	return i, nil
}

func (m *S2CChangeBodyProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CChangeBodyProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BodyId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.BodyId))
	}
	return i, nil
}

func (m *S2CCollectCountdownPrizeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCollectCountdownPrizeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Prize) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(len(m.Prize)))
		i += copy(dAtA[i:], m.Prize)
	}
	if m.CollectTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.CollectTime))
	}
	if m.DescId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.DescId))
	}
	if m.Prosprity != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Prosprity))
	}
	return i, nil
}

func (m *S2CListWorkshopEquipmentProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CListWorkshopEquipmentProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RefreshTime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.RefreshTime))
	}
	if len(m.Equipment) > 0 {
		for _, num := range m.Equipment {
			dAtA[i] = 0x10
			i++
			i = encodeVarintDomestic(dAtA, i, uint64(num))
		}
	}
	if len(m.Duration) > 0 {
		for _, num := range m.Duration {
			dAtA[i] = 0x18
			i++
			i = encodeVarintDomestic(dAtA, i, uint64(num))
		}
	}
	if m.Index != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Index))
	}
	if m.CollectTime != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.CollectTime))
	}
	if m.WorkshopRefreshTimes != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.WorkshopRefreshTimes))
	}
	return i, nil
}

func (m *C2SStartWorkshopProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SStartWorkshopProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Index))
	}
	return i, nil
}

func (m *S2CStartWorkshopProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CStartWorkshopProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Index))
	}
	if m.CollectTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.CollectTime))
	}
	return i, nil
}

func (m *C2SCollectWorkshopProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCollectWorkshopProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Index))
	}
	return i, nil
}

func (m *S2CCollectWorkshopProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCollectWorkshopProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Index))
	}
	return i, nil
}

func (m *C2SWorkshopMiaoCdProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SWorkshopMiaoCdProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Index))
	}
	return i, nil
}

func (m *S2CWorkshopMiaoCdProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CWorkshopMiaoCdProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Index))
	}
	return i, nil
}

func (m *S2CSeasonStartBroadcastProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSeasonStartBroadcastProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Season != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Season))
	}
	if m.StartTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.StartTime))
	}
	if m.IsReset {
		dAtA[i] = 0x18
		i++
		if m.IsReset {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CUpdateCostReduceCoefProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateCostReduceCoefProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Building != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Building))
	}
	if m.Tech != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Tech))
	}
	return i, nil
}

func (m *S2CUpdateSpProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateSpProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sp != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Sp))
	}
	return i, nil
}

func (m *C2SBuySpProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SBuySpProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BuyTimes != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.BuyTimes))
	}
	return i, nil
}

func (m *S2CBuySpProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CBuySpProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sp != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Sp))
	}
	if m.BuySpTimes != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.BuySpTimes))
	}
	return i, nil
}

func (m *C2SUseBufEffectProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SUseBufEffectProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *S2CUseBufEffectProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUseBufEffectProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BufEffect != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.BufEffect.Size()))
		n1, err := m.BufEffect.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *S2COpenBufEffectUiProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2COpenBufEffectUiProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Buffers != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Buffers.Size()))
		n2, err := m.Buffers.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *C2SUseAdvantageProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SUseAdvantageProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *S2CUseAdvantageProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUseAdvantageProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Id))
	}
	if m.StartTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.EndTime))
	}
	return i, nil
}

func (m *S2CUpdateAdvantageCountProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateAdvantageCountProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *C2SWorkerUnlockProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SWorkerUnlockProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Pos != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Pos))
	}
	return i, nil
}

func (m *S2CWorkerUnlockProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CWorkerUnlockProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Pos != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Pos))
	}
	if m.NewLockStartTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.NewLockStartTime))
	}
	return i, nil
}

func (m *S2CWorkerAlwaysUnlockProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CWorkerAlwaysUnlockProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Pos != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDomestic(dAtA, i, uint64(m.Pos))
	}
	return i, nil
}

func encodeFixed64Domestic(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Domestic(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintDomestic(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *S2CUpdateResourceBuildingProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDomestic(uint64(m.Id))
	}
	if m.Amount != 0 {
		n += 1 + sovDomestic(uint64(m.Amount))
	}
	if m.Capcity != 0 {
		n += 1 + sovDomestic(uint64(m.Capcity))
	}
	if m.Output != 0 {
		n += 1 + sovDomestic(uint64(m.Output))
	}
	if m.Conflict {
		n += 2
	}
	if m.BaseLevelLock {
		n += 2
	}
	return n
}

func (m *S2CUpdateMultiResourceBuildingProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Id) > 0 {
		for _, e := range m.Id {
			n += 1 + sovDomestic(uint64(e))
		}
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			n += 1 + sovDomestic(uint64(e))
		}
	}
	if len(m.Capcity) > 0 {
		for _, e := range m.Capcity {
			n += 1 + sovDomestic(uint64(e))
		}
	}
	if len(m.Output) > 0 {
		for _, e := range m.Output {
			n += 1 + sovDomestic(uint64(e))
		}
	}
	if len(m.Conflict) > 0 {
		n += 2 * len(m.Conflict)
	}
	if len(m.BaseLevelLock) > 0 {
		n += 2 * len(m.BaseLevelLock)
	}
	return n
}

func (m *C2SCreateBuildingProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDomestic(uint64(m.Id))
	}
	if m.Type != 0 {
		n += 1 + sovDomestic(uint64(m.Type))
	}
	return n
}

func (m *S2CCreateBuildingProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDomestic(uint64(m.Id))
	}
	if m.Building != 0 {
		n += 1 + sovDomestic(uint64(m.Building))
	}
	if m.WorkerRestEndTime != 0 {
		n += 1 + sovDomestic(uint64(m.WorkerRestEndTime))
	}
	if m.WorkerPos != 0 {
		n += 1 + sovDomestic(uint64(m.WorkerPos))
	}
	return n
}

func (m *C2SUpgradeBuildingProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDomestic(uint64(m.Id))
	}
	return n
}

func (m *S2CUpgradeBuildingProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDomestic(uint64(m.Id))
	}
	if m.Building != 0 {
		n += 1 + sovDomestic(uint64(m.Building))
	}
	if m.WorkerRestEndTime != 0 {
		n += 1 + sovDomestic(uint64(m.WorkerRestEndTime))
	}
	if m.WorkerPos != 0 {
		n += 1 + sovDomestic(uint64(m.WorkerPos))
	}
	return n
}

func (m *C2SRebuildResourceBuildingProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDomestic(uint64(m.Id))
	}
	if m.Type != 0 {
		n += 1 + sovDomestic(uint64(m.Type))
	}
	return n
}

func (m *S2CRebuildResourceBuildingProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDomestic(uint64(m.Id))
	}
	if m.Building != 0 {
		n += 1 + sovDomestic(uint64(m.Building))
	}
	if m.WorkerRestEndTime != 0 {
		n += 1 + sovDomestic(uint64(m.WorkerRestEndTime))
	}
	if m.WorkerPos != 0 {
		n += 1 + sovDomestic(uint64(m.WorkerPos))
	}
	return n
}

func (m *C2SUnlockOuterCityProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDomestic(uint64(m.Id))
	}
	if m.T != 0 {
		n += 1 + sovDomestic(uint64(m.T))
	}
	return n
}

func (m *S2CUnlockOuterCityProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.OuterCity)
	if l > 0 {
		n += 1 + l + sovDomestic(uint64(l))
	}
	return n
}

func (m *C2SUpdateOuterCityTypeProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDomestic(uint64(m.Id))
	}
	if m.T != 0 {
		n += 1 + sovDomestic(uint64(m.T))
	}
	return n
}

func (m *S2CUpdateOuterCityTypeProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDomestic(uint64(m.Id))
	}
	if m.T != 0 {
		n += 1 + sovDomestic(uint64(m.T))
	}
	if len(m.Ids) > 0 {
		for _, e := range m.Ids {
			n += 1 + sovDomestic(uint64(e))
		}
	}
	return n
}

func (m *C2SUpgradeOuterCityBuildingProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDomestic(uint64(m.Id))
	}
	return n
}

func (m *S2CUpgradeOuterCityBuildingProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDomestic(uint64(m.Id))
	}
	if m.CityId != 0 {
		n += 1 + sovDomestic(uint64(m.CityId))
	}
	if m.OldId != 0 {
		n += 1 + sovDomestic(uint64(m.OldId))
	}
	return n
}

func (m *S2CResourceUpdateProto) Size() (n int) {
	var l int
	_ = l
	if m.Gold != 0 {
		n += 1 + sovDomestic(uint64(m.Gold))
	}
	if m.Food != 0 {
		n += 1 + sovDomestic(uint64(m.Food))
	}
	if m.Wood != 0 {
		n += 1 + sovDomestic(uint64(m.Wood))
	}
	if m.Stone != 0 {
		n += 1 + sovDomestic(uint64(m.Stone))
	}
	if m.IsSafe {
		n += 2
	}
	return n
}

func (m *S2CResourceUpdateSingleProto) Size() (n int) {
	var l int
	_ = l
	if m.ResType != 0 {
		n += 1 + sovDomestic(uint64(m.ResType))
	}
	if m.Amount != 0 {
		n += 1 + sovDomestic(uint64(m.Amount))
	}
	if m.IsSafe {
		n += 2
	}
	return n
}

func (m *S2CResourceCapcityUpdateProto) Size() (n int) {
	var l int
	_ = l
	if m.GoldCapcity != 0 {
		n += 1 + sovDomestic(uint64(m.GoldCapcity))
	}
	if m.FoodCapcity != 0 {
		n += 1 + sovDomestic(uint64(m.FoodCapcity))
	}
	if m.WoodCapcity != 0 {
		n += 1 + sovDomestic(uint64(m.WoodCapcity))
	}
	if m.StoneCapcity != 0 {
		n += 1 + sovDomestic(uint64(m.StoneCapcity))
	}
	if m.ProtectedCapcity != 0 {
		n += 1 + sovDomestic(uint64(m.ProtectedCapcity))
	}
	return n
}

func (m *C2SCollectResourceProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDomestic(uint64(m.Id))
	}
	return n
}

func (m *S2CCollectResourceProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDomestic(uint64(m.Id))
	}
	if m.Amount != 0 {
		n += 1 + sovDomestic(uint64(m.Amount))
	}
	return n
}

func (m *C2SCollectResourceV2Proto) Size() (n int) {
	var l int
	_ = l
	if m.ResType != 0 {
		n += 1 + sovDomestic(uint64(m.ResType))
	}
	return n
}

func (m *S2CCollectResourceV2Proto) Size() (n int) {
	var l int
	_ = l
	if m.ResType != 0 {
		n += 1 + sovDomestic(uint64(m.ResType))
	}
	if m.Amount != 0 {
		n += 1 + sovDomestic(uint64(m.Amount))
	}
	if m.CollectTimes != 0 {
		n += 1 + sovDomestic(uint64(m.CollectTimes))
	}
	if m.NextCollectTime != 0 {
		n += 1 + sovDomestic(uint64(m.NextCollectTime))
	}
	return n
}

func (m *S2CCollectResourceTimesChangedProto) Size() (n int) {
	var l int
	_ = l
	if m.StartRecoverCollectTime != 0 {
		n += 1 + sovDomestic(uint64(m.StartRecoverCollectTime))
	}
	return n
}

func (m *S2CResourcePointChangeV2Proto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovDomestic(uint64(l))
	}
	return n
}

func (m *S2CRequestResourceConflictProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Flag) > 0 {
		for _, s := range m.Flag {
			l = len(s)
			n += 1 + l + sovDomestic(uint64(l))
		}
	}
	if len(m.Name) > 0 {
		for _, s := range m.Name {
			l = len(s)
			n += 1 + l + sovDomestic(uint64(l))
		}
	}
	return n
}

func (m *C2SLearnTechnologyProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDomestic(uint64(m.Id))
	}
	return n
}

func (m *S2CLearnTechnologyProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDomestic(uint64(m.Id))
	}
	if m.WorkerPos != 0 {
		n += 1 + sovDomestic(uint64(m.WorkerPos))
	}
	if m.WorkerRestEndTime != 0 {
		n += 1 + sovDomestic(uint64(m.WorkerRestEndTime))
	}
	return n
}

func (m *C2SUnlockStableBuildingProto) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovDomestic(uint64(m.Type))
	}
	return n
}

func (m *S2CUnlockStableBuildingProto) Size() (n int) {
	var l int
	_ = l
	if m.Building != 0 {
		n += 1 + sovDomestic(uint64(m.Building))
	}
	return n
}

func (m *C2SUpgradeStableBuildingProto) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovDomestic(uint64(m.Type))
	}
	if m.Level != 0 {
		n += 1 + sovDomestic(uint64(m.Level))
	}
	return n
}

func (m *S2CUpgradeStableBuildingProto) Size() (n int) {
	var l int
	_ = l
	if m.Building != 0 {
		n += 1 + sovDomestic(uint64(m.Building))
	}
	if m.WorkerPos != 0 {
		n += 1 + sovDomestic(uint64(m.WorkerPos))
	}
	if m.WorkerRestEndTime != 0 {
		n += 1 + sovDomestic(uint64(m.WorkerRestEndTime))
	}
	return n
}

func (m *S2CHeroUpdateExpProto) Size() (n int) {
	var l int
	_ = l
	if m.Exp != 0 {
		n += 1 + sovDomestic(uint64(m.Exp))
	}
	return n
}

func (m *S2CHeroUpgradeLevelProto) Size() (n int) {
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovDomestic(uint64(m.Level))
	}
	if m.Exp != 0 {
		n += 1 + sovDomestic(uint64(m.Exp))
	}
	return n
}

func (m *S2CHeroUpdateProsperityProto) Size() (n int) {
	var l int
	_ = l
	if m.Prosperity != 0 {
		n += 1 + sovDomestic(uint64(m.Prosperity))
	}
	if m.Capcity != 0 {
		n += 1 + sovDomestic(uint64(m.Capcity))
	}
	return n
}

func (m *C2SIsHeroNameExistProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDomestic(uint64(l))
	}
	return n
}

func (m *S2CIsHeroNameExistProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDomestic(uint64(l))
	}
	if m.Exist {
		n += 2
	}
	return n
}

func (m *C2SChangeHeroNameProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDomestic(uint64(l))
	}
	return n
}

func (m *S2CChangeHeroNameProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDomestic(uint64(l))
	}
	if m.NextChangeNameTime != 0 {
		n += 1 + sovDomestic(uint64(m.NextChangeNameTime))
	}
	return n
}

func (m *S2CHeroNameChangedBroadcastProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDomestic(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDomestic(uint64(l))
	}
	return n
}

func (m *C2SListOldNameProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDomestic(uint64(l))
	}
	return n
}

func (m *S2CListOldNameProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Name) > 0 {
		for _, s := range m.Name {
			l = len(s)
			n += 1 + l + sovDomestic(uint64(l))
		}
	}
	return n
}

func (m *C2SViewOtherHeroProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDomestic(uint64(l))
	}
	return n
}

func (m *S2CViewOtherHeroProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Hero)
	if l > 0 {
		n += 2 + l + sovDomestic(uint64(l))
	}
	return n
}

func (m *C2SViewFightInfoProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDomestic(uint64(l))
	}
	return n
}

func (m *S2CViewFightInfoProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDomestic(uint64(l))
	}
	if m.RealmFightSuccess != 0 {
		n += 1 + sovDomestic(uint64(m.RealmFightSuccess))
	}
	if m.RealmFightFail != 0 {
		n += 1 + sovDomestic(uint64(m.RealmFightFail))
	}
	if m.RealmAssist != 0 {
		n += 1 + sovDomestic(uint64(m.RealmAssist))
	}
	if m.RealmBeenAssist != 0 {
		n += 1 + sovDomestic(uint64(m.RealmBeenAssist))
	}
	if m.Inverstigation != 0 {
		n += 1 + sovDomestic(uint64(m.Inverstigation))
	}
	if m.BeenInverstigation != 0 {
		n += 1 + sovDomestic(uint64(m.BeenInverstigation))
	}
	return n
}

func (m *S2CUpdateBuildingWorkerCoefProto) Size() (n int) {
	var l int
	_ = l
	if m.Coef != 0 {
		n += 1 + sovDomestic(uint64(m.Coef))
	}
	return n
}

func (m *S2CUpdateTechWorkerCoefProto) Size() (n int) {
	var l int
	_ = l
	if m.Coef != 0 {
		n += 1 + sovDomestic(uint64(m.Coef))
	}
	return n
}

func (m *S2CUpdateBuildingWorkerFatigueDurationProto) Size() (n int) {
	var l int
	_ = l
	if m.Fatigue != 0 {
		n += 1 + sovDomestic(uint64(m.Fatigue))
	}
	return n
}

func (m *S2CUpdateTechWorkerFatigueDurationProto) Size() (n int) {
	var l int
	_ = l
	if m.Fatigue != 0 {
		n += 1 + sovDomestic(uint64(m.Fatigue))
	}
	return n
}

func (m *C2SMiaoBuildingWorkerCdProto) Size() (n int) {
	var l int
	_ = l
	if m.WorkerPos != 0 {
		n += 1 + sovDomestic(uint64(m.WorkerPos))
	}
	return n
}

func (m *S2CMiaoBuildingWorkerCdProto) Size() (n int) {
	var l int
	_ = l
	if m.WorkerPos != 0 {
		n += 1 + sovDomestic(uint64(m.WorkerPos))
	}
	return n
}

func (m *C2SMiaoTechWorkerCdProto) Size() (n int) {
	var l int
	_ = l
	if m.WorkerPos != 0 {
		n += 1 + sovDomestic(uint64(m.WorkerPos))
	}
	return n
}

func (m *S2CMiaoTechWorkerCdProto) Size() (n int) {
	var l int
	_ = l
	if m.WorkerPos != 0 {
		n += 1 + sovDomestic(uint64(m.WorkerPos))
	}
	return n
}

func (m *S2CUpdateYuanbaoProto) Size() (n int) {
	var l int
	_ = l
	if m.Yuanbao != 0 {
		n += 1 + sovDomestic(uint64(m.Yuanbao))
	}
	return n
}

func (m *S2CUpdateYuanbaoGiftLimitProto) Size() (n int) {
	var l int
	_ = l
	if m.YuanbaoGiftLimit != 0 {
		n += 1 + sovDomestic(uint64(m.YuanbaoGiftLimit))
	}
	return n
}

func (m *S2CUpdateDianquanProto) Size() (n int) {
	var l int
	_ = l
	if m.Dianquan != 0 {
		n += 1 + sovDomestic(uint64(m.Dianquan))
	}
	return n
}

func (m *S2CUpdateYinliangProto) Size() (n int) {
	var l int
	_ = l
	if m.Yinliang != 0 {
		n += 1 + sovDomestic(uint64(m.Yinliang))
	}
	return n
}

func (m *S2CUpdateHeroFightAmountProto) Size() (n int) {
	var l int
	_ = l
	if m.FightAmount != 0 {
		n += 1 + sovDomestic(uint64(m.FightAmount))
	}
	return n
}

func (m *S2CRecoveryForgingTimeChangeProto) Size() (n int) {
	var l int
	_ = l
	if m.Times != 0 {
		n += 1 + sovDomestic(uint64(m.Times))
	}
	if m.NextTime != 0 {
		n += 1 + sovDomestic(uint64(m.NextTime))
	}
	return n
}

func (m *C2SForgingEquipProto) Size() (n int) {
	var l int
	_ = l
	if m.Slot != 0 {
		n += 1 + sovDomestic(uint64(m.Slot))
	}
	return n
}

func (m *S2CForgingEquipProto) Size() (n int) {
	var l int
	_ = l
	if m.Slot != 0 {
		n += 1 + sovDomestic(uint64(m.Slot))
	}
	return n
}

func (m *S2CUpdateNewForgingPosProto) Size() (n int) {
	var l int
	_ = l
	if len(m.NewForgingPos) > 0 {
		for _, e := range m.NewForgingPos {
			n += 1 + sovDomestic(uint64(e))
		}
	}
	return n
}

func (m *C2SSignProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovDomestic(uint64(l))
	}
	return n
}

func (m *C2SVoiceProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovDomestic(uint64(l))
	}
	return n
}

func (m *S2CBuildingWorkerTimeChangedProto) Size() (n int) {
	var l int
	_ = l
	if m.WorkerPos != 0 {
		n += 1 + sovDomestic(uint64(m.WorkerPos))
	}
	if m.WorkerRestEndTime != 0 {
		n += 1 + sovDomestic(uint64(m.WorkerRestEndTime))
	}
	return n
}

func (m *S2CTechWorkerTimeChangedProto) Size() (n int) {
	var l int
	_ = l
	if m.WorkerPos != 0 {
		n += 1 + sovDomestic(uint64(m.WorkerPos))
	}
	if m.WorkerRestEndTime != 0 {
		n += 1 + sovDomestic(uint64(m.WorkerRestEndTime))
	}
	return n
}

func (m *S2CCityEventTimeChangedProto) Size() (n int) {
	var l int
	_ = l
	if m.NextTime != 0 {
		n += 1 + sovDomestic(uint64(m.NextTime))
	}
	return n
}

func (m *S2CRequestCityExchangeEventProto) Size() (n int) {
	var l int
	_ = l
	if m.AcceptTimes != 0 {
		n += 1 + sovDomestic(uint64(m.AcceptTimes))
	}
	if m.EventId != 0 {
		n += 1 + sovDomestic(uint64(m.EventId))
	}
	return n
}

func (m *C2SCityEventExchangeProto) Size() (n int) {
	var l int
	_ = l
	if m.GiveUp {
		n += 2
	}
	return n
}

func (m *S2CCityEventExchangeProto) Size() (n int) {
	var l int
	_ = l
	if m.GiveUp {
		n += 2
	}
	return n
}

func (m *S2CUpdateStrategyRestoreStartTimeProto) Size() (n int) {
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovDomestic(uint64(m.Time))
	}
	return n
}

func (m *S2CUpdateStrategyNextUseTimeProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDomestic(uint64(m.Id))
	}
	if m.Time != 0 {
		n += 1 + sovDomestic(uint64(m.Time))
	}
	return n
}

func (m *S2CUpdateJadeOreProto) Size() (n int) {
	var l int
	_ = l
	if m.Amount != 0 {
		n += 1 + sovDomestic(uint64(m.Amount))
	}
	return n
}

func (m *S2CUpdateJadeProto) Size() (n int) {
	var l int
	_ = l
	if m.Amount != 0 {
		n += 1 + sovDomestic(uint64(m.Amount))
	}
	if m.HistoryJade != 0 {
		n += 1 + sovDomestic(uint64(m.HistoryJade))
	}
	if m.TodayObtainJade != 0 {
		n += 1 + sovDomestic(uint64(m.TodayObtainJade))
	}
	return n
}

func (m *C2SChangeHeadProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.HeadId)
	if l > 0 {
		n += 1 + l + sovDomestic(uint64(l))
	}
	return n
}

func (m *S2CChangeHeadProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.HeadId)
	if l > 0 {
		n += 1 + l + sovDomestic(uint64(l))
	}
	return n
}

func (m *C2SChangeBodyProto) Size() (n int) {
	var l int
	_ = l
	if m.BodyId != 0 {
		n += 1 + sovDomestic(uint64(m.BodyId))
	}
	return n
}

func (m *S2CChangeBodyProto) Size() (n int) {
	var l int
	_ = l
	if m.BodyId != 0 {
		n += 1 + sovDomestic(uint64(m.BodyId))
	}
	return n
}

func (m *S2CCollectCountdownPrizeProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Prize)
	if l > 0 {
		n += 1 + l + sovDomestic(uint64(l))
	}
	if m.CollectTime != 0 {
		n += 1 + sovDomestic(uint64(m.CollectTime))
	}
	if m.DescId != 0 {
		n += 1 + sovDomestic(uint64(m.DescId))
	}
	if m.Prosprity != 0 {
		n += 1 + sovDomestic(uint64(m.Prosprity))
	}
	return n
}

func (m *S2CListWorkshopEquipmentProto) Size() (n int) {
	var l int
	_ = l
	if m.RefreshTime != 0 {
		n += 1 + sovDomestic(uint64(m.RefreshTime))
	}
	if len(m.Equipment) > 0 {
		for _, e := range m.Equipment {
			n += 1 + sovDomestic(uint64(e))
		}
	}
	if len(m.Duration) > 0 {
		for _, e := range m.Duration {
			n += 1 + sovDomestic(uint64(e))
		}
	}
	if m.Index != 0 {
		n += 1 + sovDomestic(uint64(m.Index))
	}
	if m.CollectTime != 0 {
		n += 1 + sovDomestic(uint64(m.CollectTime))
	}
	if m.WorkshopRefreshTimes != 0 {
		n += 1 + sovDomestic(uint64(m.WorkshopRefreshTimes))
	}
	return n
}

func (m *C2SStartWorkshopProto) Size() (n int) {
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovDomestic(uint64(m.Index))
	}
	return n
}

func (m *S2CStartWorkshopProto) Size() (n int) {
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovDomestic(uint64(m.Index))
	}
	if m.CollectTime != 0 {
		n += 1 + sovDomestic(uint64(m.CollectTime))
	}
	return n
}

func (m *C2SCollectWorkshopProto) Size() (n int) {
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovDomestic(uint64(m.Index))
	}
	return n
}

func (m *S2CCollectWorkshopProto) Size() (n int) {
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovDomestic(uint64(m.Index))
	}
	return n
}

func (m *C2SWorkshopMiaoCdProto) Size() (n int) {
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovDomestic(uint64(m.Index))
	}
	return n
}

func (m *S2CWorkshopMiaoCdProto) Size() (n int) {
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovDomestic(uint64(m.Index))
	}
	return n
}

func (m *S2CSeasonStartBroadcastProto) Size() (n int) {
	var l int
	_ = l
	if m.Season != 0 {
		n += 1 + sovDomestic(uint64(m.Season))
	}
	if m.StartTime != 0 {
		n += 1 + sovDomestic(uint64(m.StartTime))
	}
	if m.IsReset {
		n += 2
	}
	return n
}

func (m *S2CUpdateCostReduceCoefProto) Size() (n int) {
	var l int
	_ = l
	if m.Building != 0 {
		n += 1 + sovDomestic(uint64(m.Building))
	}
	if m.Tech != 0 {
		n += 1 + sovDomestic(uint64(m.Tech))
	}
	return n
}

func (m *S2CUpdateSpProto) Size() (n int) {
	var l int
	_ = l
	if m.Sp != 0 {
		n += 1 + sovDomestic(uint64(m.Sp))
	}
	return n
}

func (m *C2SBuySpProto) Size() (n int) {
	var l int
	_ = l
	if m.BuyTimes != 0 {
		n += 1 + sovDomestic(uint64(m.BuyTimes))
	}
	return n
}

func (m *S2CBuySpProto) Size() (n int) {
	var l int
	_ = l
	if m.Sp != 0 {
		n += 1 + sovDomestic(uint64(m.Sp))
	}
	if m.BuySpTimes != 0 {
		n += 1 + sovDomestic(uint64(m.BuySpTimes))
	}
	return n
}

func (m *C2SUseBufEffectProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDomestic(uint64(m.Id))
	}
	return n
}

func (m *S2CUseBufEffectProto) Size() (n int) {
	var l int
	_ = l
	if m.BufEffect != nil {
		l = m.BufEffect.Size()
		n += 1 + l + sovDomestic(uint64(l))
	}
	return n
}

func (m *S2COpenBufEffectUiProto) Size() (n int) {
	var l int
	_ = l
	if m.Buffers != nil {
		l = m.Buffers.Size()
		n += 1 + l + sovDomestic(uint64(l))
	}
	return n
}

func (m *C2SUseAdvantageProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDomestic(uint64(m.Id))
	}
	return n
}

func (m *S2CUseAdvantageProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDomestic(uint64(m.Id))
	}
	if m.StartTime != 0 {
		n += 1 + sovDomestic(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovDomestic(uint64(m.EndTime))
	}
	return n
}

func (m *S2CUpdateAdvantageCountProto) Size() (n int) {
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovDomestic(uint64(m.Count))
	}
	return n
}

func (m *C2SWorkerUnlockProto) Size() (n int) {
	var l int
	_ = l
	if m.Pos != 0 {
		n += 1 + sovDomestic(uint64(m.Pos))
	}
	return n
}

func (m *S2CWorkerUnlockProto) Size() (n int) {
	var l int
	_ = l
	if m.Pos != 0 {
		n += 1 + sovDomestic(uint64(m.Pos))
	}
	if m.NewLockStartTime != 0 {
		n += 1 + sovDomestic(uint64(m.NewLockStartTime))
	}
	return n
}

func (m *S2CWorkerAlwaysUnlockProto) Size() (n int) {
	var l int
	_ = l
	if m.Pos != 0 {
		n += 1 + sovDomestic(uint64(m.Pos))
	}
	return n
}

func sovDomestic(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDomestic(x uint64) (n int) {
	return sovDomestic(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *S2CUpdateResourceBuildingProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateResourceBuildingProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateResourceBuildingProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capcity", wireType)
			}
			m.Capcity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Capcity |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			m.Output = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Output |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conflict", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Conflict = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseLevelLock", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BaseLevelLock = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateMultiResourceBuildingProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateMultiResourceBuildingProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateMultiResourceBuildingProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDomestic
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDomestic
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDomestic
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDomestic
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDomestic
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Amount = append(m.Amount, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDomestic
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDomestic
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDomestic
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Amount = append(m.Amount, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDomestic
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Capcity = append(m.Capcity, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDomestic
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDomestic
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDomestic
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Capcity = append(m.Capcity, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Capcity", wireType)
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDomestic
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Output = append(m.Output, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDomestic
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDomestic
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDomestic
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Output = append(m.Output, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
		case 5:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDomestic
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Conflict = append(m.Conflict, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDomestic
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDomestic
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDomestic
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Conflict = append(m.Conflict, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Conflict", wireType)
			}
		case 6:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDomestic
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BaseLevelLock = append(m.BaseLevelLock, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDomestic
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDomestic
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDomestic
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BaseLevelLock = append(m.BaseLevelLock, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseLevelLock", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SCreateBuildingProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCreateBuildingProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCreateBuildingProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCreateBuildingProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCreateBuildingProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCreateBuildingProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Building", wireType)
			}
			m.Building = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Building |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerRestEndTime", wireType)
			}
			m.WorkerRestEndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkerRestEndTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerPos", wireType)
			}
			m.WorkerPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkerPos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SUpgradeBuildingProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SUpgradeBuildingProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SUpgradeBuildingProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpgradeBuildingProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpgradeBuildingProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpgradeBuildingProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Building", wireType)
			}
			m.Building = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Building |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerRestEndTime", wireType)
			}
			m.WorkerRestEndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkerRestEndTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerPos", wireType)
			}
			m.WorkerPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkerPos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SRebuildResourceBuildingProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SRebuildResourceBuildingProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SRebuildResourceBuildingProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CRebuildResourceBuildingProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CRebuildResourceBuildingProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CRebuildResourceBuildingProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Building", wireType)
			}
			m.Building = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Building |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerRestEndTime", wireType)
			}
			m.WorkerRestEndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkerRestEndTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerPos", wireType)
			}
			m.WorkerPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkerPos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SUnlockOuterCityProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SUnlockOuterCityProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SUnlockOuterCityProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field T", wireType)
			}
			m.T = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.T |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUnlockOuterCityProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUnlockOuterCityProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUnlockOuterCityProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OuterCity", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDomestic
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OuterCity = append(m.OuterCity[:0], dAtA[iNdEx:postIndex]...)
			if m.OuterCity == nil {
				m.OuterCity = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SUpdateOuterCityTypeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SUpdateOuterCityTypeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SUpdateOuterCityTypeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field T", wireType)
			}
			m.T = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.T |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateOuterCityTypeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateOuterCityTypeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateOuterCityTypeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field T", wireType)
			}
			m.T = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.T |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDomestic
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDomestic
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDomestic
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDomestic
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SUpgradeOuterCityBuildingProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SUpgradeOuterCityBuildingProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SUpgradeOuterCityBuildingProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpgradeOuterCityBuildingProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpgradeOuterCityBuildingProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpgradeOuterCityBuildingProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityId", wireType)
			}
			m.CityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldId", wireType)
			}
			m.OldId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OldId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CResourceUpdateProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CResourceUpdateProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CResourceUpdateProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gold", wireType)
			}
			m.Gold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gold |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Food", wireType)
			}
			m.Food = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Food |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wood", wireType)
			}
			m.Wood = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wood |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stone", wireType)
			}
			m.Stone = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stone |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSafe", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSafe = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CResourceUpdateSingleProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CResourceUpdateSingleProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CResourceUpdateSingleProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResType", wireType)
			}
			m.ResType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSafe", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSafe = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CResourceCapcityUpdateProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CResourceCapcityUpdateProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CResourceCapcityUpdateProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoldCapcity", wireType)
			}
			m.GoldCapcity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoldCapcity |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FoodCapcity", wireType)
			}
			m.FoodCapcity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FoodCapcity |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WoodCapcity", wireType)
			}
			m.WoodCapcity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WoodCapcity |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoneCapcity", wireType)
			}
			m.StoneCapcity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoneCapcity |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtectedCapcity", wireType)
			}
			m.ProtectedCapcity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProtectedCapcity |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SCollectResourceProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCollectResourceProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCollectResourceProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCollectResourceProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCollectResourceProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCollectResourceProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SCollectResourceV2Proto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCollectResourceV2Proto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCollectResourceV2Proto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResType", wireType)
			}
			m.ResType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCollectResourceV2Proto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCollectResourceV2Proto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCollectResourceV2Proto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResType", wireType)
			}
			m.ResType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectTimes", wireType)
			}
			m.CollectTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollectTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextCollectTime", wireType)
			}
			m.NextCollectTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextCollectTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCollectResourceTimesChangedProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCollectResourceTimesChangedProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCollectResourceTimesChangedProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartRecoverCollectTime", wireType)
			}
			m.StartRecoverCollectTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartRecoverCollectTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CResourcePointChangeV2Proto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CResourcePointChangeV2Proto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CResourcePointChangeV2Proto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDomestic
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CRequestResourceConflictProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CRequestResourceConflictProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CRequestResourceConflictProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDomestic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Flag = append(m.Flag, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDomestic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = append(m.Name, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SLearnTechnologyProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SLearnTechnologyProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SLearnTechnologyProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CLearnTechnologyProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CLearnTechnologyProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CLearnTechnologyProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerPos", wireType)
			}
			m.WorkerPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkerPos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerRestEndTime", wireType)
			}
			m.WorkerRestEndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkerRestEndTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SUnlockStableBuildingProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SUnlockStableBuildingProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SUnlockStableBuildingProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUnlockStableBuildingProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUnlockStableBuildingProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUnlockStableBuildingProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Building", wireType)
			}
			m.Building = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Building |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SUpgradeStableBuildingProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SUpgradeStableBuildingProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SUpgradeStableBuildingProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpgradeStableBuildingProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpgradeStableBuildingProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpgradeStableBuildingProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Building", wireType)
			}
			m.Building = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Building |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerPos", wireType)
			}
			m.WorkerPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkerPos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerRestEndTime", wireType)
			}
			m.WorkerRestEndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkerRestEndTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CHeroUpdateExpProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CHeroUpdateExpProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CHeroUpdateExpProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			m.Exp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CHeroUpgradeLevelProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CHeroUpgradeLevelProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CHeroUpgradeLevelProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			m.Exp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CHeroUpdateProsperityProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CHeroUpdateProsperityProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CHeroUpdateProsperityProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prosperity", wireType)
			}
			m.Prosperity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Prosperity |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capcity", wireType)
			}
			m.Capcity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Capcity |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SIsHeroNameExistProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SIsHeroNameExistProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SIsHeroNameExistProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDomestic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CIsHeroNameExistProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CIsHeroNameExistProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CIsHeroNameExistProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDomestic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exist", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Exist = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SChangeHeroNameProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SChangeHeroNameProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SChangeHeroNameProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDomestic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CChangeHeroNameProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CChangeHeroNameProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CChangeHeroNameProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDomestic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextChangeNameTime", wireType)
			}
			m.NextChangeNameTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextChangeNameTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CHeroNameChangedBroadcastProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CHeroNameChangedBroadcastProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CHeroNameChangedBroadcastProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDomestic
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDomestic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SListOldNameProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SListOldNameProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SListOldNameProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDomestic
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CListOldNameProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CListOldNameProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CListOldNameProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDomestic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = append(m.Name, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SViewOtherHeroProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SViewOtherHeroProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SViewOtherHeroProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDomestic
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CViewOtherHeroProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CViewOtherHeroProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CViewOtherHeroProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hero", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDomestic
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hero = append(m.Hero[:0], dAtA[iNdEx:postIndex]...)
			if m.Hero == nil {
				m.Hero = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SViewFightInfoProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SViewFightInfoProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SViewFightInfoProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDomestic
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CViewFightInfoProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CViewFightInfoProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CViewFightInfoProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDomestic
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealmFightSuccess", wireType)
			}
			m.RealmFightSuccess = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RealmFightSuccess |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealmFightFail", wireType)
			}
			m.RealmFightFail = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RealmFightFail |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealmAssist", wireType)
			}
			m.RealmAssist = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RealmAssist |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealmBeenAssist", wireType)
			}
			m.RealmBeenAssist = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RealmBeenAssist |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inverstigation", wireType)
			}
			m.Inverstigation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Inverstigation |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeenInverstigation", wireType)
			}
			m.BeenInverstigation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeenInverstigation |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateBuildingWorkerCoefProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateBuildingWorkerCoefProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateBuildingWorkerCoefProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coef", wireType)
			}
			m.Coef = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coef |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateTechWorkerCoefProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateTechWorkerCoefProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateTechWorkerCoefProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coef", wireType)
			}
			m.Coef = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coef |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateBuildingWorkerFatigueDurationProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateBuildingWorkerFatigueDurationProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateBuildingWorkerFatigueDurationProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fatigue", wireType)
			}
			m.Fatigue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fatigue |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateTechWorkerFatigueDurationProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateTechWorkerFatigueDurationProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateTechWorkerFatigueDurationProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fatigue", wireType)
			}
			m.Fatigue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fatigue |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SMiaoBuildingWorkerCdProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SMiaoBuildingWorkerCdProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SMiaoBuildingWorkerCdProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerPos", wireType)
			}
			m.WorkerPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkerPos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CMiaoBuildingWorkerCdProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CMiaoBuildingWorkerCdProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CMiaoBuildingWorkerCdProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerPos", wireType)
			}
			m.WorkerPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkerPos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SMiaoTechWorkerCdProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SMiaoTechWorkerCdProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SMiaoTechWorkerCdProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerPos", wireType)
			}
			m.WorkerPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkerPos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CMiaoTechWorkerCdProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CMiaoTechWorkerCdProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CMiaoTechWorkerCdProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerPos", wireType)
			}
			m.WorkerPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkerPos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateYuanbaoProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateYuanbaoProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateYuanbaoProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Yuanbao", wireType)
			}
			m.Yuanbao = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Yuanbao |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateYuanbaoGiftLimitProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateYuanbaoGiftLimitProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateYuanbaoGiftLimitProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field YuanbaoGiftLimit", wireType)
			}
			m.YuanbaoGiftLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.YuanbaoGiftLimit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateDianquanProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateDianquanProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateDianquanProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dianquan", wireType)
			}
			m.Dianquan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dianquan |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateYinliangProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateYinliangProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateYinliangProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Yinliang", wireType)
			}
			m.Yinliang = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Yinliang |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateHeroFightAmountProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateHeroFightAmountProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateHeroFightAmountProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FightAmount", wireType)
			}
			m.FightAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FightAmount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CRecoveryForgingTimeChangeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CRecoveryForgingTimeChangeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CRecoveryForgingTimeChangeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Times", wireType)
			}
			m.Times = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Times |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextTime", wireType)
			}
			m.NextTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SForgingEquipProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SForgingEquipProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SForgingEquipProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CForgingEquipProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CForgingEquipProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CForgingEquipProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateNewForgingPosProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateNewForgingPosProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateNewForgingPosProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDomestic
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NewForgingPos = append(m.NewForgingPos, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDomestic
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDomestic
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDomestic
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NewForgingPos = append(m.NewForgingPos, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NewForgingPos", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SSignProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SSignProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SSignProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDomestic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SVoiceProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SVoiceProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SVoiceProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDomestic
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content[:0], dAtA[iNdEx:postIndex]...)
			if m.Content == nil {
				m.Content = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CBuildingWorkerTimeChangedProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CBuildingWorkerTimeChangedProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CBuildingWorkerTimeChangedProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerPos", wireType)
			}
			m.WorkerPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkerPos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerRestEndTime", wireType)
			}
			m.WorkerRestEndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkerRestEndTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CTechWorkerTimeChangedProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CTechWorkerTimeChangedProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CTechWorkerTimeChangedProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerPos", wireType)
			}
			m.WorkerPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkerPos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerRestEndTime", wireType)
			}
			m.WorkerRestEndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkerRestEndTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCityEventTimeChangedProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCityEventTimeChangedProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCityEventTimeChangedProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextTime", wireType)
			}
			m.NextTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CRequestCityExchangeEventProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CRequestCityExchangeEventProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CRequestCityExchangeEventProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptTimes", wireType)
			}
			m.AcceptTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AcceptTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			m.EventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SCityEventExchangeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCityEventExchangeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCityEventExchangeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiveUp", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GiveUp = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCityEventExchangeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCityEventExchangeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCityEventExchangeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiveUp", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GiveUp = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateStrategyRestoreStartTimeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateStrategyRestoreStartTimeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateStrategyRestoreStartTimeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateStrategyNextUseTimeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateStrategyNextUseTimeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateStrategyNextUseTimeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateJadeOreProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateJadeOreProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateJadeOreProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateJadeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateJadeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateJadeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryJade", wireType)
			}
			m.HistoryJade = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HistoryJade |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TodayObtainJade", wireType)
			}
			m.TodayObtainJade = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TodayObtainJade |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SChangeHeadProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SChangeHeadProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SChangeHeadProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDomestic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeadId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CChangeHeadProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CChangeHeadProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CChangeHeadProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDomestic
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeadId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SChangeBodyProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SChangeBodyProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SChangeBodyProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BodyId", wireType)
			}
			m.BodyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BodyId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CChangeBodyProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CChangeBodyProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CChangeBodyProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BodyId", wireType)
			}
			m.BodyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BodyId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCollectCountdownPrizeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCollectCountdownPrizeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCollectCountdownPrizeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prize", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDomestic
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prize = append(m.Prize[:0], dAtA[iNdEx:postIndex]...)
			if m.Prize == nil {
				m.Prize = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectTime", wireType)
			}
			m.CollectTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollectTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescId", wireType)
			}
			m.DescId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DescId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prosprity", wireType)
			}
			m.Prosprity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Prosprity |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CListWorkshopEquipmentProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CListWorkshopEquipmentProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CListWorkshopEquipmentProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshTime", wireType)
			}
			m.RefreshTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefreshTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDomestic
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Equipment = append(m.Equipment, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDomestic
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDomestic
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDomestic
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Equipment = append(m.Equipment, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Equipment", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDomestic
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Duration = append(m.Duration, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDomestic
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDomestic
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDomestic
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Duration = append(m.Duration, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectTime", wireType)
			}
			m.CollectTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollectTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkshopRefreshTimes", wireType)
			}
			m.WorkshopRefreshTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkshopRefreshTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SStartWorkshopProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SStartWorkshopProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SStartWorkshopProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CStartWorkshopProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CStartWorkshopProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CStartWorkshopProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectTime", wireType)
			}
			m.CollectTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollectTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SCollectWorkshopProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCollectWorkshopProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCollectWorkshopProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCollectWorkshopProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCollectWorkshopProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCollectWorkshopProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SWorkshopMiaoCdProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SWorkshopMiaoCdProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SWorkshopMiaoCdProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CWorkshopMiaoCdProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CWorkshopMiaoCdProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CWorkshopMiaoCdProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSeasonStartBroadcastProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSeasonStartBroadcastProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSeasonStartBroadcastProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Season", wireType)
			}
			m.Season = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Season |= (proto3.Season(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsReset", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsReset = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateCostReduceCoefProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateCostReduceCoefProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateCostReduceCoefProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Building", wireType)
			}
			m.Building = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Building |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tech", wireType)
			}
			m.Tech = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tech |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateSpProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateSpProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateSpProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sp", wireType)
			}
			m.Sp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SBuySpProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SBuySpProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SBuySpProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyTimes", wireType)
			}
			m.BuyTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuyTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CBuySpProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CBuySpProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CBuySpProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sp", wireType)
			}
			m.Sp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuySpTimes", wireType)
			}
			m.BuySpTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuySpTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SUseBufEffectProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SUseBufEffectProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SUseBufEffectProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUseBufEffectProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUseBufEffectProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUseBufEffectProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BufEffect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDomestic
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BufEffect == nil {
				m.BufEffect = &proto1.BufferEffectProto{}
			}
			if err := m.BufEffect.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2COpenBufEffectUiProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2COpenBufEffectUiProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2COpenBufEffectUiProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buffers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDomestic
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Buffers == nil {
				m.Buffers = &proto1.HeroBufferProto{}
			}
			if err := m.Buffers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SUseAdvantageProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SUseAdvantageProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SUseAdvantageProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUseAdvantageProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUseAdvantageProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUseAdvantageProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateAdvantageCountProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateAdvantageCountProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateAdvantageCountProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SWorkerUnlockProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SWorkerUnlockProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SWorkerUnlockProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			m.Pos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CWorkerUnlockProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CWorkerUnlockProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CWorkerUnlockProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			m.Pos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewLockStartTime", wireType)
			}
			m.NewLockStartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewLockStartTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CWorkerAlwaysUnlockProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CWorkerAlwaysUnlockProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CWorkerAlwaysUnlockProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			m.Pos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDomestic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDomestic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDomestic(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDomestic
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDomestic
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDomestic
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDomestic
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDomestic(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDomestic = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDomestic   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/gen/pb/domestic/domestic.proto", fileDescriptorDomestic)
}

var fileDescriptorDomestic = []byte{
	// 2540 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x59, 0x4f, 0x77, 0x1b, 0xb7,
	0x11, 0x0f, 0xf5, 0x97, 0x84, 0x24, 0x5b, 0x5e, 0xcb, 0x36, 0x2d, 0xdb, 0x8a, 0x82, 0xbc, 0x38,
	0xb2, 0x13, 0x8b, 0x0d, 0xe3, 0x97, 0xa4, 0x4d, 0x72, 0x90, 0x36, 0xb2, 0xa3, 0xd6, 0xb1, 0x54,
	0xd2, 0x72, 0x9a, 0x5e, 0x36, 0xe0, 0x2e, 0x48, 0x22, 0x5e, 0x2d, 0xd6, 0x0b, 0x50, 0x14, 0xdb,
	0x43, 0x0f, 0x3d, 0xf6, 0xd0, 0x4b, 0xfb, 0x5e, 0x2f, 0x7d, 0x3d, 0xf7, 0x4b, 0xf4, 0xdc, 0x63,
	0xcf, 0xed, 0xa5, 0xcf, 0xfd, 0x08, 0xfd, 0x02, 0x7d, 0x18, 0x00, 0xbb, 0x20, 0x45, 0xca, 0x54,
	0x5f, 0xd3, 0x13, 0x77, 0x06, 0xbf, 0x19, 0xcc, 0x00, 0x83, 0x99, 0x01, 0x88, 0x3e, 0xe9, 0x30,
	0xd9, 0xed, 0xb5, 0xb6, 0x43, 0x7e, 0x5c, 0x8b, 0x59, 0xa7, 0x2b, 0x53, 0xd2, 0xaf, 0x1d, 0x93,
	0x98, 0x7e, 0x5c, 0xeb, 0xd0, 0xa4, 0x96, 0xb6, 0x6a, 0x11, 0x3f, 0xa6, 0x42, 0xb2, 0x30, 0xff,
	0xd8, 0x4e, 0x33, 0x2e, 0xb9, 0x37, 0x0f, 0x3f, 0xeb, 0x1f, 0x4d, 0x56, 0x90, 0xb6, 0x6a, 0xa2,
	0x4b, 0x32, 0x1a, 0x05, 0x00, 0xad, 0xb5, 0x7a, 0xed, 0x36, 0xcd, 0xb6, 0x2f, 0x2c, 0x27, 0x28,
	0x11, 0x3c, 0xd1, 0x72, 0xf8, 0x2f, 0x25, 0xb4, 0xd1, 0xac, 0xfb, 0x47, 0x69, 0x44, 0x24, 0x6d,
	0x50, 0xc1, 0x7b, 0x59, 0x48, 0x77, 0x7b, 0x2c, 0x8e, 0x58, 0xd2, 0x39, 0x04, 0xcb, 0x2e, 0xa1,
	0x19, 0x16, 0x55, 0x4b, 0x9b, 0xa5, 0xad, 0xf9, 0xc6, 0x0c, 0x8b, 0xbc, 0xeb, 0x68, 0x81, 0x1c,
	0xf3, 0x5e, 0x22, 0xab, 0x33, 0xc0, 0x33, 0x94, 0x57, 0x45, 0x8b, 0x21, 0x49, 0x43, 0x26, 0x07,
	0xd5, 0x59, 0x18, 0xb0, 0xa4, 0x92, 0xe0, 0x3d, 0x99, 0xf6, 0x64, 0x75, 0x4e, 0x4b, 0x68, 0xca,
	0x5b, 0x47, 0xe5, 0x90, 0x27, 0xed, 0x98, 0x85, 0xb2, 0x3a, 0xbf, 0x59, 0xda, 0x2a, 0x37, 0x72,
	0xda, 0xbb, 0x8b, 0x2e, 0xb7, 0x88, 0xa0, 0x41, 0x4c, 0x4f, 0x68, 0x1c, 0xc4, 0x3c, 0x7c, 0x51,
	0x5d, 0x00, 0xc8, 0x8a, 0x62, 0x3f, 0x51, 0xdc, 0x27, 0x3c, 0x7c, 0x81, 0xff, 0x51, 0x42, 0x6f,
	0xe7, 0x0e, 0x7c, 0xd5, 0x8b, 0x25, 0x1b, 0xef, 0x85, 0x67, 0xbc, 0x98, 0xdd, 0x9a, 0xdf, 0x9d,
	0x59, 0x7d, 0x03, 0x3c, 0x59, 0x77, 0x3c, 0xb1, 0x7c, 0xeb, 0xcd, 0x6d, 0xd7, 0x1b, 0x3b, 0x98,
	0x7b, 0xb4, 0xee, 0x78, 0x94, 0x4b, 0x1a, 0xaf, 0x36, 0x86, 0xbc, 0x9a, 0xdd, 0x2a, 0xc3, 0x68,
	0xe1, 0xd9, 0xfd, 0x71, 0x9e, 0x59, 0xd8, 0x88, 0x77, 0x9f, 0xa1, 0xeb, 0x7e, 0xbd, 0xe9, 0x67,
	0x94, 0xc8, 0xd7, 0xec, 0x8a, 0x87, 0xe6, 0xe4, 0x20, 0xa5, 0x66, 0x4f, 0xe0, 0x1b, 0xff, 0xae,
	0x84, 0xae, 0x37, 0xeb, 0xfe, 0x34, 0xe2, 0xeb, 0xa8, 0xdc, 0x32, 0x00, 0xa3, 0x22, 0xa7, 0xbd,
	0x1a, 0x5a, 0xeb, 0xf3, 0xec, 0x05, 0xcd, 0x82, 0x8c, 0x0a, 0x19, 0xd0, 0x24, 0x0a, 0x24, 0x3b,
	0xa6, 0x66, 0x97, 0xaf, 0xe8, 0xb1, 0x06, 0x15, 0x72, 0x2f, 0x89, 0x9e, 0xb1, 0x63, 0xea, 0xdd,
	0x41, 0xc8, 0x08, 0xa4, 0x5c, 0xc0, 0xb6, 0xcd, 0x37, 0x2a, 0x9a, 0x73, 0xc8, 0x05, 0xbe, 0x87,
	0x6e, 0xf8, 0xf5, 0xe6, 0x51, 0xda, 0xc9, 0x48, 0x74, 0xbe, 0x59, 0xf8, 0xf7, 0x25, 0x74, 0x03,
	0x76, 0xf7, 0xf5, 0xd8, 0xff, 0xab, 0x0b, 0x7b, 0xe8, 0x4d, 0xbf, 0xde, 0x6c, 0x50, 0x98, 0x60,
	0xba, 0x63, 0x33, 0x6e, 0x83, 0xfe, 0x58, 0x42, 0x6f, 0x36, 0xeb, 0xfe, 0x85, 0xf4, 0x7c, 0x8f,
	0x6e, 0xce, 0x8d, 0xba, 0xf9, 0xb1, 0xde, 0xa9, 0x44, 0x05, 0xe9, 0x41, 0x4f, 0xd2, 0xcc, 0x67,
	0x72, 0x30, 0xde, 0xac, 0x65, 0x54, 0xb2, 0x09, 0xa1, 0x24, 0xf1, 0x27, 0x7a, 0xdb, 0xc6, 0x09,
	0xde, 0x41, 0x88, 0x2b, 0x4e, 0x00, 0x67, 0x4b, 0x29, 0x58, 0x6e, 0x54, 0xb8, 0xc5, 0xe0, 0x4f,
	0xd1, 0x2d, 0x08, 0x0e, 0x75, 0x9c, 0x73, 0xc9, 0x67, 0x83, 0x94, 0x4e, 0x33, 0xed, 0x4f, 0xd1,
	0xad, 0x3c, 0x17, 0x5c, 0x54, 0xd8, 0x5b, 0x43, 0xb3, 0x2c, 0x12, 0xce, 0x69, 0x57, 0x24, 0xae,
	0xa3, 0xcd, 0x22, 0x58, 0x73, 0x9d, 0xe7, 0x47, 0x6d, 0x0b, 0x6d, 0x16, 0x41, 0x3b, 0x9d, 0x8c,
	0x77, 0x03, 0x2d, 0xaa, 0x05, 0x09, 0x58, 0x64, 0xd3, 0xaa, 0x22, 0xf7, 0x23, 0xef, 0x1a, 0x5a,
	0xe0, 0x71, 0xa4, 0xf8, 0x7a, 0x17, 0xe7, 0x79, 0x1c, 0xed, 0x47, 0xf8, 0xd7, 0xfa, 0x6c, 0xdb,
	0x98, 0xd1, 0x3e, 0xdb, 0x54, 0x37, 0xd7, 0xe1, 0xb1, 0x55, 0x0e, 0xdf, 0x8a, 0xd7, 0xe6, 0xdc,
	0xea, 0x86, 0x6f, 0xc5, 0xeb, 0x2b, 0x9e, 0xd6, 0x0b, 0xdf, 0xde, 0x1a, 0x9a, 0x17, 0x92, 0x27,
	0xd4, 0xc4, 0x82, 0x26, 0x94, 0x71, 0x4c, 0x04, 0x82, 0xb4, 0xa9, 0xc9, 0xd3, 0x0b, 0x4c, 0x34,
	0x49, 0x9b, 0xe2, 0xef, 0xd0, 0xed, 0x33, 0x46, 0x34, 0x59, 0xd2, 0x89, 0x8d, 0x29, 0x37, 0x51,
	0x39, 0xa3, 0x22, 0x80, 0xc0, 0xd7, 0xe6, 0x2c, 0x66, 0x54, 0xa8, 0x1d, 0x99, 0x58, 0x46, 0x9c,
	0xb9, 0x66, 0x87, 0xe6, 0xfa, 0x7b, 0x09, 0xdd, 0x71, 0x26, 0xf3, 0x75, 0x2a, 0x76, 0x1d, 0x7f,
	0x0b, 0x2d, 0x2b, 0x67, 0x03, 0x9b, 0xb8, 0xf5, 0x8c, 0x4b, 0x8a, 0x67, 0xd0, 0x0a, 0xa2, 0x7c,
	0xcf, 0x21, 0x7a, 0xee, 0x25, 0xc5, 0x73, 0x20, 0x7d, 0x17, 0xa2, 0x97, 0x67, 0xa9, 0xef, 0x40,
	0xde, 0x46, 0x2b, 0xb0, 0x30, 0x39, 0x46, 0xaf, 0xd6, 0x32, 0x30, 0x2d, 0xe8, 0x3d, 0x74, 0x45,
	0xd5, 0x58, 0x1a, 0x4a, 0x5a, 0x28, 0xab, 0x00, 0x70, 0x35, 0x1f, 0x30, 0x60, 0x93, 0x13, 0x7d,
	0x1e, 0xc7, 0x34, 0x94, 0xd6, 0xc5, 0xf1, 0xd1, 0xb5, 0x03, 0x67, 0x6b, 0x1a, 0xa8, 0xb3, 0xc6,
	0xb3, 0xee, 0x1a, 0xe3, 0x8f, 0xd0, 0xcd, 0xb3, 0xb3, 0x3d, 0xaf, 0xbf, 0x6e, 0xcf, 0xf0, 0x9f,
	0x4a, 0xe8, 0xe6, 0xd9, 0xb9, 0x5f, 0x2f, 0x38, 0x71, 0xb3, 0xdf, 0x46, 0x2b, 0xa1, 0x56, 0x06,
	0x89, 0x4a, 0x18, 0x3b, 0x97, 0x0d, 0x53, 0xe5, 0x28, 0xe1, 0xdd, 0x47, 0x57, 0x12, 0x7a, 0x2a,
	0x03, 0x17, 0x69, 0x56, 0xfc, 0xb2, 0x1a, 0xf0, 0x0b, 0x30, 0x6e, 0x41, 0x37, 0x30, 0x62, 0x20,
	0xa8, 0xf1, 0xbb, 0x24, 0xe9, 0xd0, 0x48, 0x9b, 0xfa, 0x29, 0x5a, 0x17, 0x92, 0x64, 0x32, 0xc8,
	0x68, 0xc8, 0x4f, 0x54, 0x32, 0x72, 0x75, 0x6b, 0xe3, 0x6f, 0x00, 0xa2, 0xa1, 0x01, 0xee, 0x1c,
	0x1f, 0x0e, 0xc5, 0xe1, 0x21, 0x67, 0x89, 0xd4, 0xca, 0xed, 0x42, 0x78, 0x68, 0x2e, 0x22, 0x92,
	0x98, 0xe4, 0x06, 0xdf, 0x78, 0xdf, 0x64, 0xfa, 0x97, 0x3d, 0x2a, 0x72, 0xc3, 0x7c, 0xd3, 0x13,
	0xe4, 0x62, 0xed, 0x98, 0x74, 0xa0, 0x49, 0xa9, 0x34, 0xe0, 0x5b, 0xf1, 0x12, 0x72, 0x4c, 0xa1,
	0x41, 0xa9, 0x34, 0xe0, 0xdb, 0xc4, 0xca, 0x13, 0x4a, 0xb2, 0xe4, 0x19, 0x0d, 0xbb, 0x09, 0x8f,
	0x79, 0x67, 0x7c, 0x56, 0xc6, 0x03, 0x88, 0x95, 0x69, 0xa0, 0x23, 0xa5, 0x60, 0x66, 0xa4, 0x14,
	0x5c, 0xb8, 0xb4, 0xe0, 0x3a, 0xba, 0x9d, 0xd7, 0x8e, 0xa6, 0x24, 0xad, 0xf8, 0x4c, 0x43, 0x36,
	0xe7, 0x44, 0x8a, 0xae, 0x87, 0x3f, 0x82, 0x74, 0x32, 0x59, 0xc6, 0xad, 0x7d, 0xa5, 0xe1, 0xda,
	0x87, 0xf7, 0xd1, 0x9d, 0x22, 0x51, 0x4f, 0x39, 0xa1, 0x4a, 0x77, 0xd0, 0x86, 0x19, 0x7f, 0x35,
	0x81, 0x7f, 0xa3, 0x33, 0xcd, 0x39, 0xba, 0xce, 0x31, 0xe4, 0x7f, 0xbe, 0x90, 0xf7, 0xd0, 0xb5,
	0x66, 0xdd, 0xff, 0x92, 0x66, 0x5c, 0xe7, 0xba, 0xbd, 0xd3, 0x54, 0x1b, 0xb1, 0x8a, 0x66, 0xe9,
	0x69, 0x6a, 0xe6, 0x57, 0x9f, 0x78, 0x17, 0x55, 0x73, 0x28, 0xd8, 0x0e, 0x9d, 0xa4, 0x46, 0xe7,
	0xae, 0x96, 0x1c, 0x57, 0xad, 0x8e, 0x99, 0x42, 0xc7, 0xcf, 0x60, 0x0f, 0x8a, 0xe9, 0x0e, 0x33,
	0x2e, 0x52, 0x9a, 0xe5, 0xf5, 0x7b, 0x03, 0xa1, 0x34, 0x67, 0x19, 0x65, 0x0e, 0xc7, 0xbd, 0x06,
	0xcc, 0x0c, 0x5d, 0x03, 0xf0, 0x03, 0x88, 0xdb, 0x7d, 0xa1, 0x74, 0x3f, 0x25, 0xc7, 0x74, 0xef,
	0x94, 0x89, 0x22, 0xf4, 0x21, 0xcc, 0x95, 0x3a, 0x1b, 0xe6, 0x3e, 0xc4, 0xee, 0xb4, 0x70, 0xe5,
	0x1f, 0x55, 0x08, 0x98, 0xb5, 0xdc, 0xd0, 0x04, 0x7e, 0x5f, 0x37, 0xd0, 0x70, 0x3c, 0xad, 0xa2,
	0xc9, 0x53, 0x06, 0xba, 0x5f, 0x9e, 0x0e, 0xed, 0x7d, 0x80, 0xae, 0xe9, 0xbc, 0x04, 0xf8, 0x40,
	0xf1, 0xf4, 0x56, 0x6a, 0xbf, 0x3d, 0xc8, 0x4d, 0x30, 0xa6, 0xf4, 0xc0, 0x5e, 0x3e, 0x82, 0xce,
	0xc0, 0xaa, 0x36, 0x29, 0x69, 0x37, 0xe3, 0x24, 0x0a, 0x89, 0x75, 0xae, 0x38, 0x98, 0xcb, 0xb6,
	0x71, 0x34, 0x29, 0xa0, 0x30, 0xf4, 0x1d, 0x74, 0x55, 0xa5, 0x00, 0x26, 0xe4, 0x41, 0x1c, 0x15,
	0x56, 0x8e, 0x88, 0xe2, 0x7b, 0xe8, 0xaa, 0x3a, 0xfe, 0xa3, 0xb0, 0xc2, 0x99, 0x22, 0xa9, 0xbc,
	0x8b, 0xae, 0xf9, 0xf5, 0xe6, 0x73, 0x46, 0xfb, 0x07, 0xb2, 0x4b, 0x33, 0x65, 0xe2, 0x78, 0x9d,
	0xef, 0x41, 0x38, 0x8e, 0x01, 0x7a, 0x68, 0xae, 0x4b, 0x33, 0x5e, 0x5d, 0xd5, 0x59, 0x4f, 0x7d,
	0x3b, 0x5a, 0x1f, 0xa9, 0x4b, 0xe9, 0x7e, 0xd2, 0x9e, 0xa0, 0xf5, 0xcf, 0x33, 0xb9, 0xda, 0xf3,
	0x91, 0xde, 0x36, 0xba, 0x9a, 0x51, 0x12, 0x1f, 0x07, 0x6d, 0x85, 0x0b, 0x44, 0x2f, 0x0c, 0xa9,
	0xb0, 0xe7, 0xec, 0x0a, 0x0c, 0x81, 0x86, 0xa6, 0x1e, 0xf0, 0xb6, 0xd0, 0xaa, 0x8b, 0x6f, 0x13,
	0x16, 0x9b, 0xb3, 0x76, 0xa9, 0x00, 0x3f, 0x22, 0x2c, 0x56, 0x85, 0x5f, 0x23, 0x89, 0x10, 0x2a,
	0x90, 0x74, 0x89, 0x59, 0x02, 0xde, 0x0e, 0xb0, 0x54, 0x29, 0xd2, 0x90, 0x16, 0xa5, 0x89, 0xc5,
	0xcd, 0xeb, 0x52, 0x04, 0x03, 0xbb, 0x94, 0x26, 0x06, 0x7b, 0x17, 0x5d, 0x62, 0xc9, 0x09, 0xcd,
	0x84, 0x64, 0x1d, 0x22, 0x19, 0x4f, 0xcc, 0x35, 0x62, 0x84, 0xeb, 0xd5, 0xd0, 0x55, 0xd0, 0x36,
	0x02, 0x5e, 0xd4, 0x41, 0xa4, 0x86, 0xf6, 0x87, 0x46, 0xf0, 0x47, 0xa6, 0xbd, 0x8c, 0x9c, 0x5b,
	0xdd, 0xd7, 0x90, 0x36, 0x7c, 0x4e, 0xdb, 0xf9, 0x66, 0x84, 0x9c, 0xb6, 0x6d, 0xb2, 0x53, 0xdf,
	0x2a, 0x23, 0xe7, 0x72, 0xaa, 0x1a, 0x4c, 0x23, 0xf3, 0x18, 0xbd, 0x37, 0x61, 0xae, 0x47, 0x44,
	0xb2, 0x4e, 0x8f, 0x7e, 0xd1, 0xcb, 0xc0, 0x2a, 0xad, 0xa2, 0x8a, 0x16, 0xdb, 0x9a, 0x6f, 0x3b,
	0x00, 0x43, 0x62, 0x1f, 0xbd, 0x3b, 0x66, 0xf2, 0x0b, 0x2a, 0xf9, 0x1c, 0x6a, 0xca, 0x57, 0x8c,
	0xf0, 0x11, 0xbf, 0xa3, 0xfc, 0x6e, 0xe1, 0xa4, 0xde, 0xd2, 0xe8, 0x75, 0xe6, 0x73, 0x58, 0x80,
	0xff, 0x5a, 0xfc, 0x87, 0xa8, 0x6a, 0x66, 0x77, 0x56, 0x6f, 0x6a, 0x51, 0x33, 0xf3, 0x85, 0x45,
	0x3f, 0x80, 0x83, 0xa1, 0x17, 0xee, 0x9b, 0x1e, 0x49, 0x5a, 0x84, 0xe7, 0xcb, 0x34, 0xd0, 0xb4,
	0x5d, 0x26, 0x43, 0xe2, 0xa7, 0xce, 0x9b, 0x8e, 0x11, 0x79, 0xcc, 0xda, 0xf2, 0x09, 0x3b, 0x66,
	0x26, 0xc7, 0xbc, 0x8f, 0x3c, 0x03, 0x0e, 0x3a, 0xac, 0x2d, 0x83, 0x58, 0x0d, 0x19, 0x35, 0xab,
	0x83, 0x11, 0x11, 0xfc, 0x10, 0xd2, 0xa2, 0xd6, 0xf7, 0x05, 0x23, 0xc9, 0xcb, 0x1e, 0x49, 0xf2,
	0x3a, 0x18, 0x19, 0x86, 0xad, 0x83, 0x96, 0x1e, 0x92, 0xfa, 0x86, 0x25, 0x31, 0x23, 0x4e, 0xf5,
	0x1c, 0x18, 0x86, 0x95, 0xb2, 0x34, 0xde, 0x35, 0xa5, 0x57, 0x49, 0xa9, 0xdc, 0x02, 0xc7, 0x73,
	0x07, 0xba, 0xc5, 0xbc, 0xc9, 0xd7, 0x27, 0xd9, 0x34, 0x94, 0xa6, 0xc9, 0x6f, 0x17, 0x38, 0xfc,
	0x1c, 0xbd, 0x05, 0xbd, 0x16, 0x74, 0x6e, 0x83, 0x47, 0x3c, 0xeb, 0xb0, 0xa4, 0xa3, 0xf2, 0xaf,
	0x4e, 0xb8, 0x79, 0x3d, 0x74, 0x5b, 0x4e, 0x4d, 0x78, 0xb7, 0x50, 0x05, 0x72, 0xba, 0xd3, 0x63,
	0x96, 0x15, 0x03, 0xb2, 0xf7, 0x7d, 0xb4, 0xe6, 0xd7, 0x9b, 0x46, 0xdf, 0xde, 0xcb, 0x1e, 0x4b,
	0xf3, 0x83, 0x23, 0x62, 0x6e, 0x4d, 0x81, 0x6f, 0x85, 0x6d, 0xd6, 0xfd, 0xe9, 0xb0, 0xfb, 0xce,
	0xb5, 0xf5, 0x29, 0xed, 0x1b, 0xa1, 0x43, 0x2e, 0xb4, 0xc8, 0x7d, 0x74, 0x39, 0xa1, 0xfd, 0xa0,
	0xad, 0xd9, 0x26, 0x4a, 0xec, 0x25, 0x75, 0x25, 0x71, 0x05, 0x30, 0x46, 0xcb, 0x7e, 0xbd, 0xd9,
	0x64, 0x9d, 0xa4, 0x68, 0x7a, 0xe8, 0xa9, 0xb4, 0x75, 0x4b, 0x7d, 0xe3, 0x7b, 0x68, 0x45, 0x25,
	0x65, 0xce, 0xec, 0xb5, 0x41, 0x95, 0x6c, 0x9e, 0x48, 0x6a, 0x56, 0x73, 0xb9, 0x61, 0x49, 0x2c,
	0x60, 0x25, 0x87, 0x4f, 0x4b, 0xb1, 0x90, 0x53, 0x05, 0xf0, 0xc4, 0x86, 0x67, 0x66, 0x52, 0xc3,
	0xc3, 0x21, 0x04, 0x8a, 0x83, 0xf2, 0xbd, 0x4f, 0xf8, 0x29, 0xe4, 0x05, 0x75, 0x47, 0xdf, 0x3b,
	0xa1, 0x89, 0x3c, 0x33, 0xdf, 0x50, 0x50, 0x94, 0x46, 0x82, 0xe2, 0x5b, 0xc8, 0xc6, 0xa6, 0xb1,
	0x07, 0x1d, 0xa7, 0xba, 0x21, 0x00, 0x5d, 0x79, 0xcc, 0x92, 0x30, 0xa4, 0xa9, 0xbd, 0xe5, 0x98,
	0x98, 0xd5, 0x3c, 0x7d, 0xc9, 0xb9, 0x89, 0xca, 0x54, 0x09, 0x14, 0x0f, 0x00, 0x8b, 0x40, 0xef,
	0x47, 0xf8, 0xa1, 0xbe, 0xad, 0x59, 0xf3, 0xac, 0x7e, 0xad, 0xfa, 0x06, 0x5a, 0xec, 0xb0, 0x13,
	0x1a, 0xf4, 0x74, 0x23, 0x58, 0x6e, 0x2c, 0x28, 0xf2, 0x28, 0x55, 0x52, 0xae, 0x53, 0x53, 0x4a,
	0x7d, 0x86, 0xee, 0xe6, 0xa1, 0xd8, 0x94, 0x19, 0x91, 0xb4, 0x33, 0x50, 0x4b, 0xc5, 0x33, 0xd5,
	0x07, 0x67, 0x60, 0x6c, 0x11, 0x59, 0xc5, 0x7a, 0xc0, 0x37, 0x7e, 0x0c, 0xe1, 0x32, 0x2c, 0xfd,
	0x94, 0x9e, 0xca, 0x23, 0x41, 0x0b, 0xc1, 0x71, 0x0f, 0x63, 0xc5, 0xf6, 0x68, 0x45, 0x35, 0x27,
	0xe9, 0xfd, 0x98, 0x44, 0xf4, 0x20, 0x33, 0xc2, 0xc5, 0x45, 0xb2, 0x34, 0x74, 0xa3, 0xfd, 0x25,
	0xf2, 0x86, 0x04, 0xce, 0x45, 0xab, 0xfd, 0xe8, 0x32, 0xe5, 0xd4, 0x20, 0xf8, 0x8e, 0x44, 0x76,
	0xea, 0x25, 0xc3, 0x53, 0xf2, 0xaa, 0xd2, 0x4b, 0x1e, 0x91, 0x41, 0xc0, 0x5b, 0x92, 0xb0, 0x44,
	0xe3, 0x74, 0xaa, 0xb8, 0x0c, 0x03, 0x07, 0xc0, 0x57, 0x58, 0xfc, 0x00, 0x79, 0x4e, 0x93, 0x49,
	0xa2, 0x7c, 0x8d, 0xbb, 0x94, 0x44, 0x76, 0x43, 0x2b, 0x8d, 0x05, 0x45, 0xee, 0x47, 0x0a, 0xee,
	0x74, 0x99, 0x63, 0xe0, 0xb3, 0xa3, 0xf0, 0x5c, 0xfb, 0x2e, 0x8f, 0x06, 0x39, 0xbc, 0xc5, 0x23,
	0x78, 0x2f, 0x32, 0xbe, 0x29, 0x72, 0x44, 0xfb, 0x14, 0xf0, 0xdf, 0xea, 0xbb, 0x8e, 0xb9, 0xdf,
	0xfa, 0x6a, 0x79, 0x22, 0xde, 0x4f, 0x0e, 0x33, 0xf6, 0x8b, 0x22, 0x51, 0xa6, 0x8a, 0x32, 0xb9,
	0x41, 0x13, 0x6a, 0x09, 0x87, 0xee, 0xcc, 0x66, 0x09, 0x9d, 0x8b, 0xbb, 0x9a, 0x33, 0xa2, 0x22,
	0x2c, 0x9e, 0xae, 0x16, 0x14, 0xb9, 0x1f, 0x79, 0xb7, 0x51, 0x05, 0x2e, 0x0c, 0x59, 0xf1, 0x74,
	0x52, 0x30, 0xf0, 0xbf, 0xb5, 0x45, 0xaa, 0x6b, 0x55, 0xe7, 0x5f, 0x74, 0x79, 0x0a, 0xf9, 0xf3,
	0xd8, 0x3d, 0x4e, 0x19, 0x6d, 0x67, 0x54, 0x74, 0xdd, 0x23, 0xb9, 0x64, 0x78, 0x30, 0xf7, 0x26,
	0xaa, 0x50, 0x2b, 0xe4, 0xbc, 0xee, 0x17, 0x4c, 0x6f, 0x03, 0x95, 0x23, 0xd3, 0x76, 0x38, 0x6f,
	0x7e, 0x39, 0x4f, 0xb9, 0xcd, 0x92, 0x88, 0x9e, 0xda, 0x97, 0x30, 0x20, 0xce, 0xb8, 0x3d, 0x7f,
	0xd6, 0xed, 0x87, 0xe8, 0x7a, 0xdf, 0xd8, 0x1d, 0xb8, 0x66, 0xda, 0x67, 0xe4, 0x35, 0x3b, 0xda,
	0x28, 0xec, 0x15, 0xf8, 0x01, 0x74, 0xca, 0x70, 0xc6, 0xac, 0xd7, 0xf9, 0xf2, 0x6b, 0x3b, 0x4a,
	0x8e, 0x1d, 0xf8, 0x10, 0x0e, 0xc8, 0xb4, 0xf0, 0x29, 0x76, 0x0b, 0xd7, 0xdc, 0x17, 0xa8, 0x69,
	0x4c, 0xa8, 0xb9, 0xef, 0x50, 0xd3, 0x08, 0x6c, 0xc3, 0x5d, 0xcc, 0x22, 0x55, 0x33, 0x64, 0x5b,
	0xa0, 0x89, 0xf8, 0x66, 0xdd, 0x9f, 0x1e, 0xff, 0x2b, 0x48, 0xe3, 0x4d, 0xf8, 0x7b, 0x0b, 0x56,
	0x66, 0xe4, 0x62, 0xf5, 0x0e, 0x5a, 0xd0, 0xff, 0x7d, 0x81, 0xd8, 0xa5, 0xfa, 0x8a, 0xfe, 0x0f,
	0x6c, 0x5b, 0x4b, 0x34, 0xcc, 0xa0, 0xaa, 0x2e, 0xfa, 0x6d, 0xc8, 0x59, 0xa9, 0x8a, 0xb0, 0xc9,
	0x4f, 0x25, 0x6a, 0x26, 0x54, 0x65, 0xa1, 0xd2, 0x3c, 0x50, 0x2e, 0x32, 0xd1, 0x50, 0x24, 0x7e,
	0xea, 0x34, 0xd8, 0x3e, 0x17, 0xb2, 0x41, 0xa3, 0x5e, 0x48, 0x8b, 0x06, 0xfb, 0xbc, 0x57, 0x03,
	0x28, 0xd4, 0x61, 0x37, 0xcf, 0x82, 0x34, 0xec, 0x62, 0x8c, 0x56, 0x8b, 0x74, 0x9a, 0xe6, 0xd9,
	0x53, 0xd8, 0x3b, 0xff, 0x8c, 0x48, 0xf1, 0xfb, 0x50, 0xcc, 0x77, 0x7b, 0x03, 0x0b, 0xb8, 0x85,
	0x2a, 0xad, 0xde, 0x60, 0xa8, 0xd0, 0x94, 0x5b, 0xbd, 0x81, 0x8e, 0xb2, 0x1d, 0xb4, 0x02, 0xf5,
	0x7c, 0x30, 0x41, 0x9d, 0xb7, 0x89, 0x96, 0x95, 0xb4, 0x48, 0x8d, 0x02, 0x6d, 0x0e, 0x6a, 0x29,
	0x09, 0xad, 0xe2, 0x2e, 0x34, 0x41, 0x47, 0x82, 0xee, 0xf6, 0xda, 0x7b, 0xed, 0x36, 0x0d, 0xe5,
	0xf8, 0xa7, 0xa7, 0x03, 0x68, 0x80, 0xce, 0xe2, 0x3e, 0x46, 0xa8, 0xd5, 0x6b, 0x07, 0x14, 0x58,
	0x80, 0x5f, 0xaa, 0x57, 0xcd, 0x4e, 0xec, 0xc2, 0x5f, 0x9a, 0x0e, 0xba, 0x51, 0x69, 0x59, 0x69,
	0xfc, 0x13, 0x88, 0xb7, 0x83, 0x94, 0x26, 0xb9, 0xc6, 0x23, 0xa6, 0x75, 0xfe, 0x00, 0x2d, 0xea,
	0x7f, 0x43, 0x85, 0x51, 0x78, 0xdd, 0x28, 0x54, 0x1d, 0xa4, 0x56, 0xaa, 0xd5, 0x59, 0x58, 0xe1,
	0xc5, 0x4e, 0x74, 0x42, 0x12, 0x49, 0x3a, 0x13, 0x1e, 0x5b, 0xbf, 0xb5, 0x5e, 0x9c, 0x8f, 0x9b,
	0x22, 0x68, 0x46, 0x1e, 0x7a, 0x16, 0xa9, 0x69, 0x3e, 0x1e, 0x3a, 0x41, 0x93, 0x4f, 0xe2, 0x17,
	0xfd, 0xee, 0x1a, 0x9a, 0x0f, 0x9d, 0x12, 0xa6, 0x09, 0xbc, 0x05, 0xf6, 0xeb, 0xfe, 0x48, 0xbf,
	0x97, 0xe5, 0x6f, 0x42, 0x45, 0x4f, 0xa4, 0x3e, 0xf1, 0xd7, 0xe0, 0xc1, 0x14, 0x48, 0xef, 0x01,
	0xba, 0xaa, 0xfa, 0x4c, 0x05, 0x09, 0xce, 0x38, 0xb3, 0x9a, 0xd0, 0xfe, 0x13, 0xfd, 0x2c, 0xa7,
	0x7d, 0xc2, 0xdb, 0x68, 0x3d, 0x57, 0xbc, 0x13, 0xf7, 0xc9, 0x40, 0x9c, 0xab, 0x7e, 0xf7, 0xf6,
	0x5f, 0x5f, 0x6d, 0x94, 0xfe, 0xf6, 0x6a, 0xa3, 0xf4, 0xcf, 0x57, 0x1b, 0xa5, 0x3f, 0xfc, 0x6b,
	0xe3, 0x8d, 0x2f, 0x4b, 0x3f, 0x2f, 0xdb, 0x7f, 0xc1, 0x5b, 0x0b, 0xb0, 0x61, 0x1f, 0xfe, 0x27,
	0x00, 0x00, 0xff, 0xff, 0x8e, 0x2d, 0xb0, 0x13, 0x42, 0x1f, 0x00, 0x00,
}
