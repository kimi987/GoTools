// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/gen/pb/secret_tower/secret_tower.proto
// DO NOT EDIT!

/*
	Package secret_tower is a generated protocol buffer package.

	It is generated from these files:
		github.com/lightpaw/male7/gen/pb/secret_tower/secret_tower.proto

	It has these top-level messages:
		S2CUnlockSecretTowerProto
		S2CRequestTeamCountProto
		C2SRequestTeamListProto
		S2CRequestTeamListProto
		C2SCreateTeamProto
		S2CCreateTeamProto
		C2SJoinTeamProto
		S2CJoinTeamProto
		S2COtherJoinJoinTeamProto
		S2COtherLeaveLeaveTeamProto
		C2SKickMemberProto
		S2CKickMemberProto
		S2COtherBeenKickKickMemberProto
		C2SMoveMemberProto
		S2CBroadcsatMoveMemberProto
		C2SUpdateMemberPosProto
		S2CUpdateMemberPosProto
		C2SChangeModeProto
		S2CChangeModeProto
		S2COtherChangedChangeModeProto
		S2CHelpTimesChangeProto
		S2CTimesChangeProto
		C2SInviteProto
		S2CInviteProto
		S2CFailTargetNotFoundInviteProto
		S2CFailTargetNotInMyGuildInviteProto
		S2CFailTargetNotOpenInviteProto
		S2CFailTargetNotOnlineInviteProto
		S2CFailTargetInYourTeamInviteProto
		S2CFailTargetNoTimesInviteProto
		C2SInviteAllProto
		S2CInviteAllProto
		S2CReceiveInviteProto
		S2CRequestInviteListProto
		S2CRequestTeamDetailProto
		S2CBroadcastStartChallengeProto
		S2CFailWithMemberTimesNotEnoughStartChallengeProto
		S2CFailWithMemberHelpTimesNotEnoughStartChallengeProto
		S2CFailWithMemberNoGuildStartChallengeProto
		S2CFailWithMemberNotMyGuildStartChallengeProto
		S2CFailWithMemberIsHelpButNoGuildStartChallengeProto
		S2CFailWithMemberIsHelpButNoGuildMemberStartChallengeProto
		C2SQuickQueryTeamBasicProto
		S2CQuickQueryTeamBasicProto
		S2CChangeGuildModeBroadcastProto
		S2CMemberTroopChangedProto
		S2CListRecordProto
		C2STeamTalkProto
		S2CTeamTalkProto
		S2CTeamWhoTalkProto
		S2CTeamHistoryTalkProto
*/
package secret_tower

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import proto7 "github.com/lightpaw/male7/pb/shared_proto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type S2CUnlockSecretTowerProto struct {
	SecretTowerId int32 `protobuf:"varint,1,opt,name=secret_tower_id,json=secretTowerId,proto3" json:"secret_tower_id,omitempty"`
}

func (m *S2CUnlockSecretTowerProto) Reset()         { *m = S2CUnlockSecretTowerProto{} }
func (m *S2CUnlockSecretTowerProto) String() string { return proto.CompactTextString(m) }
func (*S2CUnlockSecretTowerProto) ProtoMessage()    {}
func (*S2CUnlockSecretTowerProto) Descriptor() ([]byte, []int) {
	return fileDescriptorSecretTower, []int{0}
}

func (m *S2CUnlockSecretTowerProto) GetSecretTowerId() int32 {
	if m != nil {
		return m.SecretTowerId
	}
	return 0
}

type S2CRequestTeamCountProto struct {
	SecretTowerId []int32 `protobuf:"varint,1,rep,name=secret_tower_id,json=secretTowerId" json:"secret_tower_id,omitempty"`
	TeamCount     []int32 `protobuf:"varint,2,rep,name=team_count,json=teamCount" json:"team_count,omitempty"`
}

func (m *S2CRequestTeamCountProto) Reset()         { *m = S2CRequestTeamCountProto{} }
func (m *S2CRequestTeamCountProto) String() string { return proto.CompactTextString(m) }
func (*S2CRequestTeamCountProto) ProtoMessage()    {}
func (*S2CRequestTeamCountProto) Descriptor() ([]byte, []int) {
	return fileDescriptorSecretTower, []int{1}
}

func (m *S2CRequestTeamCountProto) GetSecretTowerId() []int32 {
	if m != nil {
		return m.SecretTowerId
	}
	return nil
}

func (m *S2CRequestTeamCountProto) GetTeamCount() []int32 {
	if m != nil {
		return m.TeamCount
	}
	return nil
}

type C2SRequestTeamListProto struct {
	SecretTowerId int32 `protobuf:"varint,1,opt,name=secret_tower_id,json=secretTowerId,proto3" json:"secret_tower_id,omitempty"`
}

func (m *C2SRequestTeamListProto) Reset()         { *m = C2SRequestTeamListProto{} }
func (m *C2SRequestTeamListProto) String() string { return proto.CompactTextString(m) }
func (*C2SRequestTeamListProto) ProtoMessage()    {}
func (*C2SRequestTeamListProto) Descriptor() ([]byte, []int) {
	return fileDescriptorSecretTower, []int{2}
}

func (m *C2SRequestTeamListProto) GetSecretTowerId() int32 {
	if m != nil {
		return m.SecretTowerId
	}
	return 0
}

type S2CRequestTeamListProto struct {
	SecretTowerId int32    `protobuf:"varint,1,opt,name=secret_tower_id,json=secretTowerId,proto3" json:"secret_tower_id,omitempty"`
	TeamList      [][]byte `protobuf:"bytes,2,rep,name=team_list,json=teamList" json:"team_list,omitempty"`
}

func (m *S2CRequestTeamListProto) Reset()         { *m = S2CRequestTeamListProto{} }
func (m *S2CRequestTeamListProto) String() string { return proto.CompactTextString(m) }
func (*S2CRequestTeamListProto) ProtoMessage()    {}
func (*S2CRequestTeamListProto) Descriptor() ([]byte, []int) {
	return fileDescriptorSecretTower, []int{3}
}

func (m *S2CRequestTeamListProto) GetSecretTowerId() int32 {
	if m != nil {
		return m.SecretTowerId
	}
	return 0
}

func (m *S2CRequestTeamListProto) GetTeamList() [][]byte {
	if m != nil {
		return m.TeamList
	}
	return nil
}

type C2SCreateTeamProto struct {
	SecretTowerId int32 `protobuf:"varint,1,opt,name=secret_tower_id,json=secretTowerId,proto3" json:"secret_tower_id,omitempty"`
	IsGuild       bool  `protobuf:"varint,3,opt,name=is_guild,json=isGuild,proto3" json:"is_guild,omitempty"`
}

func (m *C2SCreateTeamProto) Reset()                    { *m = C2SCreateTeamProto{} }
func (m *C2SCreateTeamProto) String() string            { return proto.CompactTextString(m) }
func (*C2SCreateTeamProto) ProtoMessage()               {}
func (*C2SCreateTeamProto) Descriptor() ([]byte, []int) { return fileDescriptorSecretTower, []int{4} }

func (m *C2SCreateTeamProto) GetSecretTowerId() int32 {
	if m != nil {
		return m.SecretTowerId
	}
	return 0
}

func (m *C2SCreateTeamProto) GetIsGuild() bool {
	if m != nil {
		return m.IsGuild
	}
	return false
}

type S2CCreateTeamProto struct {
	TeamDetail []byte `protobuf:"bytes,1,opt,name=team_detail,json=teamDetail,proto3" json:"team_detail,omitempty"`
}

func (m *S2CCreateTeamProto) Reset()                    { *m = S2CCreateTeamProto{} }
func (m *S2CCreateTeamProto) String() string            { return proto.CompactTextString(m) }
func (*S2CCreateTeamProto) ProtoMessage()               {}
func (*S2CCreateTeamProto) Descriptor() ([]byte, []int) { return fileDescriptorSecretTower, []int{5} }

func (m *S2CCreateTeamProto) GetTeamDetail() []byte {
	if m != nil {
		return m.TeamDetail
	}
	return nil
}

type C2SJoinTeamProto struct {
	TeamId        int32 `protobuf:"varint,1,opt,name=team_id,json=teamId,proto3" json:"team_id,omitempty"`
	SecretTowerId int32 `protobuf:"varint,3,opt,name=secret_tower_id,json=secretTowerId,proto3" json:"secret_tower_id,omitempty"`
}

func (m *C2SJoinTeamProto) Reset()                    { *m = C2SJoinTeamProto{} }
func (m *C2SJoinTeamProto) String() string            { return proto.CompactTextString(m) }
func (*C2SJoinTeamProto) ProtoMessage()               {}
func (*C2SJoinTeamProto) Descriptor() ([]byte, []int) { return fileDescriptorSecretTower, []int{6} }

func (m *C2SJoinTeamProto) GetTeamId() int32 {
	if m != nil {
		return m.TeamId
	}
	return 0
}

func (m *C2SJoinTeamProto) GetSecretTowerId() int32 {
	if m != nil {
		return m.SecretTowerId
	}
	return 0
}

type S2CJoinTeamProto struct {
	TeamDetail []byte `protobuf:"bytes,1,opt,name=team_detail,json=teamDetail,proto3" json:"team_detail,omitempty"`
}

func (m *S2CJoinTeamProto) Reset()                    { *m = S2CJoinTeamProto{} }
func (m *S2CJoinTeamProto) String() string            { return proto.CompactTextString(m) }
func (*S2CJoinTeamProto) ProtoMessage()               {}
func (*S2CJoinTeamProto) Descriptor() ([]byte, []int) { return fileDescriptorSecretTower, []int{7} }

func (m *S2CJoinTeamProto) GetTeamDetail() []byte {
	if m != nil {
		return m.TeamDetail
	}
	return nil
}

type S2COtherJoinJoinTeamProto struct {
	Member         []byte `protobuf:"bytes,1,opt,name=member,proto3" json:"member,omitempty"`
	ProtectEndTime int32  `protobuf:"varint,2,opt,name=protect_end_time,json=protectEndTime,proto3" json:"protect_end_time,omitempty"`
}

func (m *S2COtherJoinJoinTeamProto) Reset()         { *m = S2COtherJoinJoinTeamProto{} }
func (m *S2COtherJoinJoinTeamProto) String() string { return proto.CompactTextString(m) }
func (*S2COtherJoinJoinTeamProto) ProtoMessage()    {}
func (*S2COtherJoinJoinTeamProto) Descriptor() ([]byte, []int) {
	return fileDescriptorSecretTower, []int{8}
}

func (m *S2COtherJoinJoinTeamProto) GetMember() []byte {
	if m != nil {
		return m.Member
	}
	return nil
}

func (m *S2COtherJoinJoinTeamProto) GetProtectEndTime() int32 {
	if m != nil {
		return m.ProtectEndTime
	}
	return 0
}

type S2COtherLeaveLeaveTeamProto struct {
	Id              []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	NewTeamLeaderId []byte `protobuf:"bytes,2,opt,name=new_team_leader_id,json=newTeamLeaderId,proto3" json:"new_team_leader_id,omitempty"`
}

func (m *S2COtherLeaveLeaveTeamProto) Reset()         { *m = S2COtherLeaveLeaveTeamProto{} }
func (m *S2COtherLeaveLeaveTeamProto) String() string { return proto.CompactTextString(m) }
func (*S2COtherLeaveLeaveTeamProto) ProtoMessage()    {}
func (*S2COtherLeaveLeaveTeamProto) Descriptor() ([]byte, []int) {
	return fileDescriptorSecretTower, []int{9}
}

func (m *S2COtherLeaveLeaveTeamProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *S2COtherLeaveLeaveTeamProto) GetNewTeamLeaderId() []byte {
	if m != nil {
		return m.NewTeamLeaderId
	}
	return nil
}

type C2SKickMemberProto struct {
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SKickMemberProto) Reset()                    { *m = C2SKickMemberProto{} }
func (m *C2SKickMemberProto) String() string            { return proto.CompactTextString(m) }
func (*C2SKickMemberProto) ProtoMessage()               {}
func (*C2SKickMemberProto) Descriptor() ([]byte, []int) { return fileDescriptorSecretTower, []int{10} }

func (m *C2SKickMemberProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type S2CKickMemberProto struct {
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *S2CKickMemberProto) Reset()                    { *m = S2CKickMemberProto{} }
func (m *S2CKickMemberProto) String() string            { return proto.CompactTextString(m) }
func (*S2CKickMemberProto) ProtoMessage()               {}
func (*S2CKickMemberProto) Descriptor() ([]byte, []int) { return fileDescriptorSecretTower, []int{11} }

func (m *S2CKickMemberProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type S2COtherBeenKickKickMemberProto struct {
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *S2COtherBeenKickKickMemberProto) Reset()         { *m = S2COtherBeenKickKickMemberProto{} }
func (m *S2COtherBeenKickKickMemberProto) String() string { return proto.CompactTextString(m) }
func (*S2COtherBeenKickKickMemberProto) ProtoMessage()    {}
func (*S2COtherBeenKickKickMemberProto) Descriptor() ([]byte, []int) {
	return fileDescriptorSecretTower, []int{12}
}

func (m *S2COtherBeenKickKickMemberProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type C2SMoveMemberProto struct {
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Up bool   `protobuf:"varint,2,opt,name=up,proto3" json:"up,omitempty"`
}

func (m *C2SMoveMemberProto) Reset()                    { *m = C2SMoveMemberProto{} }
func (m *C2SMoveMemberProto) String() string            { return proto.CompactTextString(m) }
func (*C2SMoveMemberProto) ProtoMessage()               {}
func (*C2SMoveMemberProto) Descriptor() ([]byte, []int) { return fileDescriptorSecretTower, []int{13} }

func (m *C2SMoveMemberProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *C2SMoveMemberProto) GetUp() bool {
	if m != nil {
		return m.Up
	}
	return false
}

type S2CBroadcsatMoveMemberProto struct {
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Up bool   `protobuf:"varint,2,opt,name=up,proto3" json:"up,omitempty"`
}

func (m *S2CBroadcsatMoveMemberProto) Reset()         { *m = S2CBroadcsatMoveMemberProto{} }
func (m *S2CBroadcsatMoveMemberProto) String() string { return proto.CompactTextString(m) }
func (*S2CBroadcsatMoveMemberProto) ProtoMessage()    {}
func (*S2CBroadcsatMoveMemberProto) Descriptor() ([]byte, []int) {
	return fileDescriptorSecretTower, []int{14}
}

func (m *S2CBroadcsatMoveMemberProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *S2CBroadcsatMoveMemberProto) GetUp() bool {
	if m != nil {
		return m.Up
	}
	return false
}

type C2SUpdateMemberPosProto struct {
	Id [][]byte `protobuf:"bytes,1,rep,name=id" json:"id,omitempty"`
}

func (m *C2SUpdateMemberPosProto) Reset()         { *m = C2SUpdateMemberPosProto{} }
func (m *C2SUpdateMemberPosProto) String() string { return proto.CompactTextString(m) }
func (*C2SUpdateMemberPosProto) ProtoMessage()    {}
func (*C2SUpdateMemberPosProto) Descriptor() ([]byte, []int) {
	return fileDescriptorSecretTower, []int{15}
}

func (m *C2SUpdateMemberPosProto) GetId() [][]byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type S2CUpdateMemberPosProto struct {
	Id [][]byte `protobuf:"bytes,1,rep,name=id" json:"id,omitempty"`
}

func (m *S2CUpdateMemberPosProto) Reset()         { *m = S2CUpdateMemberPosProto{} }
func (m *S2CUpdateMemberPosProto) String() string { return proto.CompactTextString(m) }
func (*S2CUpdateMemberPosProto) ProtoMessage()    {}
func (*S2CUpdateMemberPosProto) Descriptor() ([]byte, []int) {
	return fileDescriptorSecretTower, []int{16}
}

func (m *S2CUpdateMemberPosProto) GetId() [][]byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type C2SChangeModeProto struct {
	Mode int32 `protobuf:"varint,1,opt,name=mode,proto3" json:"mode,omitempty"`
}

func (m *C2SChangeModeProto) Reset()                    { *m = C2SChangeModeProto{} }
func (m *C2SChangeModeProto) String() string            { return proto.CompactTextString(m) }
func (*C2SChangeModeProto) ProtoMessage()               {}
func (*C2SChangeModeProto) Descriptor() ([]byte, []int) { return fileDescriptorSecretTower, []int{17} }

func (m *C2SChangeModeProto) GetMode() int32 {
	if m != nil {
		return m.Mode
	}
	return 0
}

type S2CChangeModeProto struct {
	Mode int32 `protobuf:"varint,1,opt,name=mode,proto3" json:"mode,omitempty"`
}

func (m *S2CChangeModeProto) Reset()                    { *m = S2CChangeModeProto{} }
func (m *S2CChangeModeProto) String() string            { return proto.CompactTextString(m) }
func (*S2CChangeModeProto) ProtoMessage()               {}
func (*S2CChangeModeProto) Descriptor() ([]byte, []int) { return fileDescriptorSecretTower, []int{18} }

func (m *S2CChangeModeProto) GetMode() int32 {
	if m != nil {
		return m.Mode
	}
	return 0
}

type S2COtherChangedChangeModeProto struct {
	Id   []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Mode int32  `protobuf:"varint,2,opt,name=mode,proto3" json:"mode,omitempty"`
}

func (m *S2COtherChangedChangeModeProto) Reset()         { *m = S2COtherChangedChangeModeProto{} }
func (m *S2COtherChangedChangeModeProto) String() string { return proto.CompactTextString(m) }
func (*S2COtherChangedChangeModeProto) ProtoMessage()    {}
func (*S2COtherChangedChangeModeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorSecretTower, []int{19}
}

func (m *S2COtherChangedChangeModeProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *S2COtherChangedChangeModeProto) GetMode() int32 {
	if m != nil {
		return m.Mode
	}
	return 0
}

type S2CHelpTimesChangeProto struct {
	NewTimes int32 `protobuf:"varint,1,opt,name=new_times,json=newTimes,proto3" json:"new_times,omitempty"`
}

func (m *S2CHelpTimesChangeProto) Reset()         { *m = S2CHelpTimesChangeProto{} }
func (m *S2CHelpTimesChangeProto) String() string { return proto.CompactTextString(m) }
func (*S2CHelpTimesChangeProto) ProtoMessage()    {}
func (*S2CHelpTimesChangeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorSecretTower, []int{20}
}

func (m *S2CHelpTimesChangeProto) GetNewTimes() int32 {
	if m != nil {
		return m.NewTimes
	}
	return 0
}

type S2CTimesChangeProto struct {
	ChallengeTimes        int32 `protobuf:"varint,2,opt,name=challenge_times,json=challengeTimes,proto3" json:"challenge_times,omitempty"`
	HistoryChallengeTimes int32 `protobuf:"varint,3,opt,name=history_challenge_times,json=historyChallengeTimes,proto3" json:"history_challenge_times,omitempty"`
}

func (m *S2CTimesChangeProto) Reset()                    { *m = S2CTimesChangeProto{} }
func (m *S2CTimesChangeProto) String() string            { return proto.CompactTextString(m) }
func (*S2CTimesChangeProto) ProtoMessage()               {}
func (*S2CTimesChangeProto) Descriptor() ([]byte, []int) { return fileDescriptorSecretTower, []int{21} }

func (m *S2CTimesChangeProto) GetChallengeTimes() int32 {
	if m != nil {
		return m.ChallengeTimes
	}
	return 0
}

func (m *S2CTimesChangeProto) GetHistoryChallengeTimes() int32 {
	if m != nil {
		return m.HistoryChallengeTimes
	}
	return 0
}

type C2SInviteProto struct {
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SInviteProto) Reset()                    { *m = C2SInviteProto{} }
func (m *C2SInviteProto) String() string            { return proto.CompactTextString(m) }
func (*C2SInviteProto) ProtoMessage()               {}
func (*C2SInviteProto) Descriptor() ([]byte, []int) { return fileDescriptorSecretTower, []int{22} }

func (m *C2SInviteProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type S2CInviteProto struct {
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *S2CInviteProto) Reset()                    { *m = S2CInviteProto{} }
func (m *S2CInviteProto) String() string            { return proto.CompactTextString(m) }
func (*S2CInviteProto) ProtoMessage()               {}
func (*S2CInviteProto) Descriptor() ([]byte, []int) { return fileDescriptorSecretTower, []int{23} }

func (m *S2CInviteProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type S2CFailTargetNotFoundInviteProto struct {
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *S2CFailTargetNotFoundInviteProto) Reset()         { *m = S2CFailTargetNotFoundInviteProto{} }
func (m *S2CFailTargetNotFoundInviteProto) String() string { return proto.CompactTextString(m) }
func (*S2CFailTargetNotFoundInviteProto) ProtoMessage()    {}
func (*S2CFailTargetNotFoundInviteProto) Descriptor() ([]byte, []int) {
	return fileDescriptorSecretTower, []int{24}
}

func (m *S2CFailTargetNotFoundInviteProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type S2CFailTargetNotInMyGuildInviteProto struct {
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *S2CFailTargetNotInMyGuildInviteProto) Reset()         { *m = S2CFailTargetNotInMyGuildInviteProto{} }
func (m *S2CFailTargetNotInMyGuildInviteProto) String() string { return proto.CompactTextString(m) }
func (*S2CFailTargetNotInMyGuildInviteProto) ProtoMessage()    {}
func (*S2CFailTargetNotInMyGuildInviteProto) Descriptor() ([]byte, []int) {
	return fileDescriptorSecretTower, []int{25}
}

func (m *S2CFailTargetNotInMyGuildInviteProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type S2CFailTargetNotOpenInviteProto struct {
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *S2CFailTargetNotOpenInviteProto) Reset()         { *m = S2CFailTargetNotOpenInviteProto{} }
func (m *S2CFailTargetNotOpenInviteProto) String() string { return proto.CompactTextString(m) }
func (*S2CFailTargetNotOpenInviteProto) ProtoMessage()    {}
func (*S2CFailTargetNotOpenInviteProto) Descriptor() ([]byte, []int) {
	return fileDescriptorSecretTower, []int{26}
}

func (m *S2CFailTargetNotOpenInviteProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type S2CFailTargetNotOnlineInviteProto struct {
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *S2CFailTargetNotOnlineInviteProto) Reset()         { *m = S2CFailTargetNotOnlineInviteProto{} }
func (m *S2CFailTargetNotOnlineInviteProto) String() string { return proto.CompactTextString(m) }
func (*S2CFailTargetNotOnlineInviteProto) ProtoMessage()    {}
func (*S2CFailTargetNotOnlineInviteProto) Descriptor() ([]byte, []int) {
	return fileDescriptorSecretTower, []int{27}
}

func (m *S2CFailTargetNotOnlineInviteProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type S2CFailTargetInYourTeamInviteProto struct {
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *S2CFailTargetInYourTeamInviteProto) Reset()         { *m = S2CFailTargetInYourTeamInviteProto{} }
func (m *S2CFailTargetInYourTeamInviteProto) String() string { return proto.CompactTextString(m) }
func (*S2CFailTargetInYourTeamInviteProto) ProtoMessage()    {}
func (*S2CFailTargetInYourTeamInviteProto) Descriptor() ([]byte, []int) {
	return fileDescriptorSecretTower, []int{28}
}

func (m *S2CFailTargetInYourTeamInviteProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type S2CFailTargetNoTimesInviteProto struct {
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *S2CFailTargetNoTimesInviteProto) Reset()         { *m = S2CFailTargetNoTimesInviteProto{} }
func (m *S2CFailTargetNoTimesInviteProto) String() string { return proto.CompactTextString(m) }
func (*S2CFailTargetNoTimesInviteProto) ProtoMessage()    {}
func (*S2CFailTargetNoTimesInviteProto) Descriptor() ([]byte, []int) {
	return fileDescriptorSecretTower, []int{29}
}

func (m *S2CFailTargetNoTimesInviteProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type C2SInviteAllProto struct {
	Id [][]byte `protobuf:"bytes,1,rep,name=id" json:"id,omitempty"`
}

func (m *C2SInviteAllProto) Reset()                    { *m = C2SInviteAllProto{} }
func (m *C2SInviteAllProto) String() string            { return proto.CompactTextString(m) }
func (*C2SInviteAllProto) ProtoMessage()               {}
func (*C2SInviteAllProto) Descriptor() ([]byte, []int) { return fileDescriptorSecretTower, []int{30} }

func (m *C2SInviteAllProto) GetId() [][]byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type S2CInviteAllProto struct {
	Id [][]byte `protobuf:"bytes,1,rep,name=id" json:"id,omitempty"`
}

func (m *S2CInviteAllProto) Reset()                    { *m = S2CInviteAllProto{} }
func (m *S2CInviteAllProto) String() string            { return proto.CompactTextString(m) }
func (*S2CInviteAllProto) ProtoMessage()               {}
func (*S2CInviteAllProto) Descriptor() ([]byte, []int) { return fileDescriptorSecretTower, []int{31} }

func (m *S2CInviteAllProto) GetId() [][]byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type S2CReceiveInviteProto struct {
	Count   int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	HaveNew bool  `protobuf:"varint,2,opt,name=have_new,json=haveNew,proto3" json:"have_new,omitempty"`
}

func (m *S2CReceiveInviteProto) Reset()         { *m = S2CReceiveInviteProto{} }
func (m *S2CReceiveInviteProto) String() string { return proto.CompactTextString(m) }
func (*S2CReceiveInviteProto) ProtoMessage()    {}
func (*S2CReceiveInviteProto) Descriptor() ([]byte, []int) {
	return fileDescriptorSecretTower, []int{32}
}

func (m *S2CReceiveInviteProto) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *S2CReceiveInviteProto) GetHaveNew() bool {
	if m != nil {
		return m.HaveNew
	}
	return false
}

type S2CRequestInviteListProto struct {
	InviteList [][]byte `protobuf:"bytes,1,rep,name=invite_list,json=inviteList" json:"invite_list,omitempty"`
}

func (m *S2CRequestInviteListProto) Reset()         { *m = S2CRequestInviteListProto{} }
func (m *S2CRequestInviteListProto) String() string { return proto.CompactTextString(m) }
func (*S2CRequestInviteListProto) ProtoMessage()    {}
func (*S2CRequestInviteListProto) Descriptor() ([]byte, []int) {
	return fileDescriptorSecretTower, []int{33}
}

func (m *S2CRequestInviteListProto) GetInviteList() [][]byte {
	if m != nil {
		return m.InviteList
	}
	return nil
}

type S2CRequestTeamDetailProto struct {
	TeamDetail []byte `protobuf:"bytes,1,opt,name=team_detail,json=teamDetail,proto3" json:"team_detail,omitempty"`
}

func (m *S2CRequestTeamDetailProto) Reset()         { *m = S2CRequestTeamDetailProto{} }
func (m *S2CRequestTeamDetailProto) String() string { return proto.CompactTextString(m) }
func (*S2CRequestTeamDetailProto) ProtoMessage()    {}
func (*S2CRequestTeamDetailProto) Descriptor() ([]byte, []int) {
	return fileDescriptorSecretTower, []int{34}
}

func (m *S2CRequestTeamDetailProto) GetTeamDetail() []byte {
	if m != nil {
		return m.TeamDetail
	}
	return nil
}

type S2CBroadcastStartChallengeProto struct {
	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *S2CBroadcastStartChallengeProto) Reset()         { *m = S2CBroadcastStartChallengeProto{} }
func (m *S2CBroadcastStartChallengeProto) String() string { return proto.CompactTextString(m) }
func (*S2CBroadcastStartChallengeProto) ProtoMessage()    {}
func (*S2CBroadcastStartChallengeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorSecretTower, []int{35}
}

func (m *S2CBroadcastStartChallengeProto) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

type S2CFailWithMemberTimesNotEnoughStartChallengeProto struct {
	Id        []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	GuildFlag string `protobuf:"bytes,3,opt,name=guild_flag,json=guildFlag,proto3" json:"guild_flag,omitempty"`
}

func (m *S2CFailWithMemberTimesNotEnoughStartChallengeProto) Reset() {
	*m = S2CFailWithMemberTimesNotEnoughStartChallengeProto{}
}
func (m *S2CFailWithMemberTimesNotEnoughStartChallengeProto) String() string {
	return proto.CompactTextString(m)
}
func (*S2CFailWithMemberTimesNotEnoughStartChallengeProto) ProtoMessage() {}
func (*S2CFailWithMemberTimesNotEnoughStartChallengeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorSecretTower, []int{36}
}

func (m *S2CFailWithMemberTimesNotEnoughStartChallengeProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *S2CFailWithMemberTimesNotEnoughStartChallengeProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *S2CFailWithMemberTimesNotEnoughStartChallengeProto) GetGuildFlag() string {
	if m != nil {
		return m.GuildFlag
	}
	return ""
}

type S2CFailWithMemberHelpTimesNotEnoughStartChallengeProto struct {
	Id        []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	GuildFlag string `protobuf:"bytes,3,opt,name=guild_flag,json=guildFlag,proto3" json:"guild_flag,omitempty"`
}

func (m *S2CFailWithMemberHelpTimesNotEnoughStartChallengeProto) Reset() {
	*m = S2CFailWithMemberHelpTimesNotEnoughStartChallengeProto{}
}
func (m *S2CFailWithMemberHelpTimesNotEnoughStartChallengeProto) String() string {
	return proto.CompactTextString(m)
}
func (*S2CFailWithMemberHelpTimesNotEnoughStartChallengeProto) ProtoMessage() {}
func (*S2CFailWithMemberHelpTimesNotEnoughStartChallengeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorSecretTower, []int{37}
}

func (m *S2CFailWithMemberHelpTimesNotEnoughStartChallengeProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *S2CFailWithMemberHelpTimesNotEnoughStartChallengeProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *S2CFailWithMemberHelpTimesNotEnoughStartChallengeProto) GetGuildFlag() string {
	if m != nil {
		return m.GuildFlag
	}
	return ""
}

type S2CFailWithMemberNoGuildStartChallengeProto struct {
	Id        []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	GuildFlag string `protobuf:"bytes,3,opt,name=guild_flag,json=guildFlag,proto3" json:"guild_flag,omitempty"`
}

func (m *S2CFailWithMemberNoGuildStartChallengeProto) Reset() {
	*m = S2CFailWithMemberNoGuildStartChallengeProto{}
}
func (m *S2CFailWithMemberNoGuildStartChallengeProto) String() string {
	return proto.CompactTextString(m)
}
func (*S2CFailWithMemberNoGuildStartChallengeProto) ProtoMessage() {}
func (*S2CFailWithMemberNoGuildStartChallengeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorSecretTower, []int{38}
}

func (m *S2CFailWithMemberNoGuildStartChallengeProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *S2CFailWithMemberNoGuildStartChallengeProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *S2CFailWithMemberNoGuildStartChallengeProto) GetGuildFlag() string {
	if m != nil {
		return m.GuildFlag
	}
	return ""
}

type S2CFailWithMemberNotMyGuildStartChallengeProto struct {
	Id        []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	GuildFlag string `protobuf:"bytes,3,opt,name=guild_flag,json=guildFlag,proto3" json:"guild_flag,omitempty"`
}

func (m *S2CFailWithMemberNotMyGuildStartChallengeProto) Reset() {
	*m = S2CFailWithMemberNotMyGuildStartChallengeProto{}
}
func (m *S2CFailWithMemberNotMyGuildStartChallengeProto) String() string {
	return proto.CompactTextString(m)
}
func (*S2CFailWithMemberNotMyGuildStartChallengeProto) ProtoMessage() {}
func (*S2CFailWithMemberNotMyGuildStartChallengeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorSecretTower, []int{39}
}

func (m *S2CFailWithMemberNotMyGuildStartChallengeProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *S2CFailWithMemberNotMyGuildStartChallengeProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *S2CFailWithMemberNotMyGuildStartChallengeProto) GetGuildFlag() string {
	if m != nil {
		return m.GuildFlag
	}
	return ""
}

type S2CFailWithMemberIsHelpButNoGuildStartChallengeProto struct {
	Id        []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	GuildFlag string `protobuf:"bytes,3,opt,name=guild_flag,json=guildFlag,proto3" json:"guild_flag,omitempty"`
}

func (m *S2CFailWithMemberIsHelpButNoGuildStartChallengeProto) Reset() {
	*m = S2CFailWithMemberIsHelpButNoGuildStartChallengeProto{}
}
func (m *S2CFailWithMemberIsHelpButNoGuildStartChallengeProto) String() string {
	return proto.CompactTextString(m)
}
func (*S2CFailWithMemberIsHelpButNoGuildStartChallengeProto) ProtoMessage() {}
func (*S2CFailWithMemberIsHelpButNoGuildStartChallengeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorSecretTower, []int{40}
}

func (m *S2CFailWithMemberIsHelpButNoGuildStartChallengeProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *S2CFailWithMemberIsHelpButNoGuildStartChallengeProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *S2CFailWithMemberIsHelpButNoGuildStartChallengeProto) GetGuildFlag() string {
	if m != nil {
		return m.GuildFlag
	}
	return ""
}

type S2CFailWithMemberIsHelpButNoGuildMemberStartChallengeProto struct {
	Id        []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	GuildFlag string `protobuf:"bytes,3,opt,name=guild_flag,json=guildFlag,proto3" json:"guild_flag,omitempty"`
}

func (m *S2CFailWithMemberIsHelpButNoGuildMemberStartChallengeProto) Reset() {
	*m = S2CFailWithMemberIsHelpButNoGuildMemberStartChallengeProto{}
}
func (m *S2CFailWithMemberIsHelpButNoGuildMemberStartChallengeProto) String() string {
	return proto.CompactTextString(m)
}
func (*S2CFailWithMemberIsHelpButNoGuildMemberStartChallengeProto) ProtoMessage() {}
func (*S2CFailWithMemberIsHelpButNoGuildMemberStartChallengeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorSecretTower, []int{41}
}

func (m *S2CFailWithMemberIsHelpButNoGuildMemberStartChallengeProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *S2CFailWithMemberIsHelpButNoGuildMemberStartChallengeProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *S2CFailWithMemberIsHelpButNoGuildMemberStartChallengeProto) GetGuildFlag() string {
	if m != nil {
		return m.GuildFlag
	}
	return ""
}

type C2SQuickQueryTeamBasicProto struct {
	Ids []int32 `protobuf:"varint,1,rep,name=ids" json:"ids,omitempty"`
}

func (m *C2SQuickQueryTeamBasicProto) Reset()         { *m = C2SQuickQueryTeamBasicProto{} }
func (m *C2SQuickQueryTeamBasicProto) String() string { return proto.CompactTextString(m) }
func (*C2SQuickQueryTeamBasicProto) ProtoMessage()    {}
func (*C2SQuickQueryTeamBasicProto) Descriptor() ([]byte, []int) {
	return fileDescriptorSecretTower, []int{42}
}

func (m *C2SQuickQueryTeamBasicProto) GetIds() []int32 {
	if m != nil {
		return m.Ids
	}
	return nil
}

type S2CQuickQueryTeamBasicProto struct {
	Basics      [][]byte `protobuf:"bytes,5,rep,name=basics" json:"basics,omitempty"`
	NotExistIds []int32  `protobuf:"varint,6,rep,name=not_exist_ids,json=notExistIds" json:"not_exist_ids,omitempty"`
}

func (m *S2CQuickQueryTeamBasicProto) Reset()         { *m = S2CQuickQueryTeamBasicProto{} }
func (m *S2CQuickQueryTeamBasicProto) String() string { return proto.CompactTextString(m) }
func (*S2CQuickQueryTeamBasicProto) ProtoMessage()    {}
func (*S2CQuickQueryTeamBasicProto) Descriptor() ([]byte, []int) {
	return fileDescriptorSecretTower, []int{43}
}

func (m *S2CQuickQueryTeamBasicProto) GetBasics() [][]byte {
	if m != nil {
		return m.Basics
	}
	return nil
}

func (m *S2CQuickQueryTeamBasicProto) GetNotExistIds() []int32 {
	if m != nil {
		return m.NotExistIds
	}
	return nil
}

type S2CChangeGuildModeBroadcastProto struct {
	GuildId int32 `protobuf:"varint,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
}

func (m *S2CChangeGuildModeBroadcastProto) Reset()         { *m = S2CChangeGuildModeBroadcastProto{} }
func (m *S2CChangeGuildModeBroadcastProto) String() string { return proto.CompactTextString(m) }
func (*S2CChangeGuildModeBroadcastProto) ProtoMessage()    {}
func (*S2CChangeGuildModeBroadcastProto) Descriptor() ([]byte, []int) {
	return fileDescriptorSecretTower, []int{44}
}

func (m *S2CChangeGuildModeBroadcastProto) GetGuildId() int32 {
	if m != nil {
		return m.GuildId
	}
	return 0
}

type S2CMemberTroopChangedProto struct {
	Member         []byte `protobuf:"bytes,1,opt,name=member,proto3" json:"member,omitempty"`
	ProtectEndTime int32  `protobuf:"varint,2,opt,name=protect_end_time,json=protectEndTime,proto3" json:"protect_end_time,omitempty"`
}

func (m *S2CMemberTroopChangedProto) Reset()         { *m = S2CMemberTroopChangedProto{} }
func (m *S2CMemberTroopChangedProto) String() string { return proto.CompactTextString(m) }
func (*S2CMemberTroopChangedProto) ProtoMessage()    {}
func (*S2CMemberTroopChangedProto) Descriptor() ([]byte, []int) {
	return fileDescriptorSecretTower, []int{45}
}

func (m *S2CMemberTroopChangedProto) GetMember() []byte {
	if m != nil {
		return m.Member
	}
	return nil
}

func (m *S2CMemberTroopChangedProto) GetProtectEndTime() int32 {
	if m != nil {
		return m.ProtectEndTime
	}
	return 0
}

type S2CListRecordProto struct {
	Record []*proto7.SecretRecordProto `protobuf:"bytes,6,rep,name=record" json:"record,omitempty"`
}

func (m *S2CListRecordProto) Reset()                    { *m = S2CListRecordProto{} }
func (m *S2CListRecordProto) String() string            { return proto.CompactTextString(m) }
func (*S2CListRecordProto) ProtoMessage()               {}
func (*S2CListRecordProto) Descriptor() ([]byte, []int) { return fileDescriptorSecretTower, []int{46} }

func (m *S2CListRecordProto) GetRecord() []*proto7.SecretRecordProto {
	if m != nil {
		return m.Record
	}
	return nil
}

type C2STeamTalkProto struct {
	WordsId int32  `protobuf:"varint,1,opt,name=words_id,json=wordsId,proto3" json:"words_id,omitempty"`
	Text    string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (m *C2STeamTalkProto) Reset()                    { *m = C2STeamTalkProto{} }
func (m *C2STeamTalkProto) String() string            { return proto.CompactTextString(m) }
func (*C2STeamTalkProto) ProtoMessage()               {}
func (*C2STeamTalkProto) Descriptor() ([]byte, []int) { return fileDescriptorSecretTower, []int{47} }

func (m *C2STeamTalkProto) GetWordsId() int32 {
	if m != nil {
		return m.WordsId
	}
	return 0
}

func (m *C2STeamTalkProto) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type S2CTeamTalkProto struct {
	WordsId int32  `protobuf:"varint,1,opt,name=words_id,json=wordsId,proto3" json:"words_id,omitempty"`
	Text    string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (m *S2CTeamTalkProto) Reset()                    { *m = S2CTeamTalkProto{} }
func (m *S2CTeamTalkProto) String() string            { return proto.CompactTextString(m) }
func (*S2CTeamTalkProto) ProtoMessage()               {}
func (*S2CTeamTalkProto) Descriptor() ([]byte, []int) { return fileDescriptorSecretTower, []int{48} }

func (m *S2CTeamTalkProto) GetWordsId() int32 {
	if m != nil {
		return m.WordsId
	}
	return 0
}

func (m *S2CTeamTalkProto) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type S2CTeamWhoTalkProto struct {
	HeroId  []byte `protobuf:"bytes,1,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
	WordsId int32  `protobuf:"varint,2,opt,name=words_id,json=wordsId,proto3" json:"words_id,omitempty"`
	Text    string `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
}

func (m *S2CTeamWhoTalkProto) Reset()                    { *m = S2CTeamWhoTalkProto{} }
func (m *S2CTeamWhoTalkProto) String() string            { return proto.CompactTextString(m) }
func (*S2CTeamWhoTalkProto) ProtoMessage()               {}
func (*S2CTeamWhoTalkProto) Descriptor() ([]byte, []int) { return fileDescriptorSecretTower, []int{49} }

func (m *S2CTeamWhoTalkProto) GetHeroId() []byte {
	if m != nil {
		return m.HeroId
	}
	return nil
}

func (m *S2CTeamWhoTalkProto) GetWordsId() int32 {
	if m != nil {
		return m.WordsId
	}
	return 0
}

func (m *S2CTeamWhoTalkProto) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type S2CTeamHistoryTalkProto struct {
	Records []*proto7.SecretTowerChatRecordProto `protobuf:"bytes,1,rep,name=records" json:"records,omitempty"`
}

func (m *S2CTeamHistoryTalkProto) Reset()         { *m = S2CTeamHistoryTalkProto{} }
func (m *S2CTeamHistoryTalkProto) String() string { return proto.CompactTextString(m) }
func (*S2CTeamHistoryTalkProto) ProtoMessage()    {}
func (*S2CTeamHistoryTalkProto) Descriptor() ([]byte, []int) {
	return fileDescriptorSecretTower, []int{50}
}

func (m *S2CTeamHistoryTalkProto) GetRecords() []*proto7.SecretTowerChatRecordProto {
	if m != nil {
		return m.Records
	}
	return nil
}

func init() {
	proto.RegisterType((*S2CUnlockSecretTowerProto)(nil), "proto.S2CUnlockSecretTowerProto")
	proto.RegisterType((*S2CRequestTeamCountProto)(nil), "proto.S2CRequestTeamCountProto")
	proto.RegisterType((*C2SRequestTeamListProto)(nil), "proto.C2SRequestTeamListProto")
	proto.RegisterType((*S2CRequestTeamListProto)(nil), "proto.S2CRequestTeamListProto")
	proto.RegisterType((*C2SCreateTeamProto)(nil), "proto.C2SCreateTeamProto")
	proto.RegisterType((*S2CCreateTeamProto)(nil), "proto.S2CCreateTeamProto")
	proto.RegisterType((*C2SJoinTeamProto)(nil), "proto.C2SJoinTeamProto")
	proto.RegisterType((*S2CJoinTeamProto)(nil), "proto.S2CJoinTeamProto")
	proto.RegisterType((*S2COtherJoinJoinTeamProto)(nil), "proto.S2COtherJoinJoinTeamProto")
	proto.RegisterType((*S2COtherLeaveLeaveTeamProto)(nil), "proto.S2COtherLeaveLeaveTeamProto")
	proto.RegisterType((*C2SKickMemberProto)(nil), "proto.C2SKickMemberProto")
	proto.RegisterType((*S2CKickMemberProto)(nil), "proto.S2CKickMemberProto")
	proto.RegisterType((*S2COtherBeenKickKickMemberProto)(nil), "proto.S2COtherBeenKickKickMemberProto")
	proto.RegisterType((*C2SMoveMemberProto)(nil), "proto.C2SMoveMemberProto")
	proto.RegisterType((*S2CBroadcsatMoveMemberProto)(nil), "proto.S2CBroadcsatMoveMemberProto")
	proto.RegisterType((*C2SUpdateMemberPosProto)(nil), "proto.C2SUpdateMemberPosProto")
	proto.RegisterType((*S2CUpdateMemberPosProto)(nil), "proto.S2CUpdateMemberPosProto")
	proto.RegisterType((*C2SChangeModeProto)(nil), "proto.C2SChangeModeProto")
	proto.RegisterType((*S2CChangeModeProto)(nil), "proto.S2CChangeModeProto")
	proto.RegisterType((*S2COtherChangedChangeModeProto)(nil), "proto.S2COtherChangedChangeModeProto")
	proto.RegisterType((*S2CHelpTimesChangeProto)(nil), "proto.S2CHelpTimesChangeProto")
	proto.RegisterType((*S2CTimesChangeProto)(nil), "proto.S2CTimesChangeProto")
	proto.RegisterType((*C2SInviteProto)(nil), "proto.C2SInviteProto")
	proto.RegisterType((*S2CInviteProto)(nil), "proto.S2CInviteProto")
	proto.RegisterType((*S2CFailTargetNotFoundInviteProto)(nil), "proto.S2CFailTargetNotFoundInviteProto")
	proto.RegisterType((*S2CFailTargetNotInMyGuildInviteProto)(nil), "proto.S2CFailTargetNotInMyGuildInviteProto")
	proto.RegisterType((*S2CFailTargetNotOpenInviteProto)(nil), "proto.S2CFailTargetNotOpenInviteProto")
	proto.RegisterType((*S2CFailTargetNotOnlineInviteProto)(nil), "proto.S2CFailTargetNotOnlineInviteProto")
	proto.RegisterType((*S2CFailTargetInYourTeamInviteProto)(nil), "proto.S2CFailTargetInYourTeamInviteProto")
	proto.RegisterType((*S2CFailTargetNoTimesInviteProto)(nil), "proto.S2CFailTargetNoTimesInviteProto")
	proto.RegisterType((*C2SInviteAllProto)(nil), "proto.C2SInviteAllProto")
	proto.RegisterType((*S2CInviteAllProto)(nil), "proto.S2CInviteAllProto")
	proto.RegisterType((*S2CReceiveInviteProto)(nil), "proto.S2CReceiveInviteProto")
	proto.RegisterType((*S2CRequestInviteListProto)(nil), "proto.S2CRequestInviteListProto")
	proto.RegisterType((*S2CRequestTeamDetailProto)(nil), "proto.S2CRequestTeamDetailProto")
	proto.RegisterType((*S2CBroadcastStartChallengeProto)(nil), "proto.S2CBroadcastStartChallengeProto")
	proto.RegisterType((*S2CFailWithMemberTimesNotEnoughStartChallengeProto)(nil), "proto.S2CFailWithMemberTimesNotEnoughStartChallengeProto")
	proto.RegisterType((*S2CFailWithMemberHelpTimesNotEnoughStartChallengeProto)(nil), "proto.S2CFailWithMemberHelpTimesNotEnoughStartChallengeProto")
	proto.RegisterType((*S2CFailWithMemberNoGuildStartChallengeProto)(nil), "proto.S2CFailWithMemberNoGuildStartChallengeProto")
	proto.RegisterType((*S2CFailWithMemberNotMyGuildStartChallengeProto)(nil), "proto.S2CFailWithMemberNotMyGuildStartChallengeProto")
	proto.RegisterType((*S2CFailWithMemberIsHelpButNoGuildStartChallengeProto)(nil), "proto.S2CFailWithMemberIsHelpButNoGuildStartChallengeProto")
	proto.RegisterType((*S2CFailWithMemberIsHelpButNoGuildMemberStartChallengeProto)(nil), "proto.S2CFailWithMemberIsHelpButNoGuildMemberStartChallengeProto")
	proto.RegisterType((*C2SQuickQueryTeamBasicProto)(nil), "proto.C2SQuickQueryTeamBasicProto")
	proto.RegisterType((*S2CQuickQueryTeamBasicProto)(nil), "proto.S2CQuickQueryTeamBasicProto")
	proto.RegisterType((*S2CChangeGuildModeBroadcastProto)(nil), "proto.S2CChangeGuildModeBroadcastProto")
	proto.RegisterType((*S2CMemberTroopChangedProto)(nil), "proto.S2CMemberTroopChangedProto")
	proto.RegisterType((*S2CListRecordProto)(nil), "proto.S2CListRecordProto")
	proto.RegisterType((*C2STeamTalkProto)(nil), "proto.C2STeamTalkProto")
	proto.RegisterType((*S2CTeamTalkProto)(nil), "proto.S2CTeamTalkProto")
	proto.RegisterType((*S2CTeamWhoTalkProto)(nil), "proto.S2CTeamWhoTalkProto")
	proto.RegisterType((*S2CTeamHistoryTalkProto)(nil), "proto.S2CTeamHistoryTalkProto")
}
func (m *S2CUnlockSecretTowerProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUnlockSecretTowerProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SecretTowerId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(m.SecretTowerId))
	}
	return i, nil
}

func (m *S2CRequestTeamCountProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CRequestTeamCountProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SecretTowerId) > 0 {
		for _, num := range m.SecretTowerId {
			dAtA[i] = 0x8
			i++
			i = encodeVarintSecretTower(dAtA, i, uint64(num))
		}
	}
	if len(m.TeamCount) > 0 {
		for _, num := range m.TeamCount {
			dAtA[i] = 0x10
			i++
			i = encodeVarintSecretTower(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *C2SRequestTeamListProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SRequestTeamListProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SecretTowerId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(m.SecretTowerId))
	}
	return i, nil
}

func (m *S2CRequestTeamListProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CRequestTeamListProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SecretTowerId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(m.SecretTowerId))
	}
	if len(m.TeamList) > 0 {
		for _, b := range m.TeamList {
			dAtA[i] = 0x12
			i++
			i = encodeVarintSecretTower(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *C2SCreateTeamProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCreateTeamProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SecretTowerId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(m.SecretTowerId))
	}
	if m.IsGuild {
		dAtA[i] = 0x18
		i++
		if m.IsGuild {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CCreateTeamProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCreateTeamProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TeamDetail) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(len(m.TeamDetail)))
		i += copy(dAtA[i:], m.TeamDetail)
	}
	return i, nil
}

func (m *C2SJoinTeamProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SJoinTeamProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TeamId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(m.TeamId))
	}
	if m.SecretTowerId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(m.SecretTowerId))
	}
	return i, nil
}

func (m *S2CJoinTeamProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CJoinTeamProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TeamDetail) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(len(m.TeamDetail)))
		i += copy(dAtA[i:], m.TeamDetail)
	}
	return i, nil
}

func (m *S2COtherJoinJoinTeamProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2COtherJoinJoinTeamProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Member) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(len(m.Member)))
		i += copy(dAtA[i:], m.Member)
	}
	if m.ProtectEndTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(m.ProtectEndTime))
	}
	return i, nil
}

func (m *S2COtherLeaveLeaveTeamProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2COtherLeaveLeaveTeamProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.NewTeamLeaderId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(len(m.NewTeamLeaderId)))
		i += copy(dAtA[i:], m.NewTeamLeaderId)
	}
	return i, nil
}

func (m *C2SKickMemberProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SKickMemberProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *S2CKickMemberProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CKickMemberProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *S2COtherBeenKickKickMemberProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2COtherBeenKickKickMemberProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *C2SMoveMemberProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SMoveMemberProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Up {
		dAtA[i] = 0x10
		i++
		if m.Up {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CBroadcsatMoveMemberProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CBroadcsatMoveMemberProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Up {
		dAtA[i] = 0x10
		i++
		if m.Up {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *C2SUpdateMemberPosProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SUpdateMemberPosProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		for _, b := range m.Id {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSecretTower(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *S2CUpdateMemberPosProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateMemberPosProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		for _, b := range m.Id {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSecretTower(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *C2SChangeModeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SChangeModeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(m.Mode))
	}
	return i, nil
}

func (m *S2CChangeModeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CChangeModeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(m.Mode))
	}
	return i, nil
}

func (m *S2COtherChangedChangeModeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2COtherChangedChangeModeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Mode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(m.Mode))
	}
	return i, nil
}

func (m *S2CHelpTimesChangeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CHelpTimesChangeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NewTimes != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(m.NewTimes))
	}
	return i, nil
}

func (m *S2CTimesChangeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CTimesChangeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChallengeTimes != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(m.ChallengeTimes))
	}
	if m.HistoryChallengeTimes != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(m.HistoryChallengeTimes))
	}
	return i, nil
}

func (m *C2SInviteProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SInviteProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *S2CInviteProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CInviteProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *S2CFailTargetNotFoundInviteProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CFailTargetNotFoundInviteProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *S2CFailTargetNotInMyGuildInviteProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CFailTargetNotInMyGuildInviteProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *S2CFailTargetNotOpenInviteProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CFailTargetNotOpenInviteProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *S2CFailTargetNotOnlineInviteProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CFailTargetNotOnlineInviteProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *S2CFailTargetInYourTeamInviteProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CFailTargetInYourTeamInviteProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *S2CFailTargetNoTimesInviteProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CFailTargetNoTimesInviteProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *C2SInviteAllProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SInviteAllProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		for _, b := range m.Id {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSecretTower(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *S2CInviteAllProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CInviteAllProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		for _, b := range m.Id {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSecretTower(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *S2CReceiveInviteProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CReceiveInviteProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(m.Count))
	}
	if m.HaveNew {
		dAtA[i] = 0x10
		i++
		if m.HaveNew {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CRequestInviteListProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CRequestInviteListProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.InviteList) > 0 {
		for _, b := range m.InviteList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSecretTower(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *S2CRequestTeamDetailProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CRequestTeamDetailProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TeamDetail) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(len(m.TeamDetail)))
		i += copy(dAtA[i:], m.TeamDetail)
	}
	return i, nil
}

func (m *S2CBroadcastStartChallengeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CBroadcastStartChallengeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	return i, nil
}

func (m *S2CFailWithMemberTimesNotEnoughStartChallengeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CFailWithMemberTimesNotEnoughStartChallengeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.GuildFlag) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(len(m.GuildFlag)))
		i += copy(dAtA[i:], m.GuildFlag)
	}
	return i, nil
}

func (m *S2CFailWithMemberHelpTimesNotEnoughStartChallengeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CFailWithMemberHelpTimesNotEnoughStartChallengeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.GuildFlag) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(len(m.GuildFlag)))
		i += copy(dAtA[i:], m.GuildFlag)
	}
	return i, nil
}

func (m *S2CFailWithMemberNoGuildStartChallengeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CFailWithMemberNoGuildStartChallengeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.GuildFlag) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(len(m.GuildFlag)))
		i += copy(dAtA[i:], m.GuildFlag)
	}
	return i, nil
}

func (m *S2CFailWithMemberNotMyGuildStartChallengeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CFailWithMemberNotMyGuildStartChallengeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.GuildFlag) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(len(m.GuildFlag)))
		i += copy(dAtA[i:], m.GuildFlag)
	}
	return i, nil
}

func (m *S2CFailWithMemberIsHelpButNoGuildStartChallengeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CFailWithMemberIsHelpButNoGuildStartChallengeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.GuildFlag) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(len(m.GuildFlag)))
		i += copy(dAtA[i:], m.GuildFlag)
	}
	return i, nil
}

func (m *S2CFailWithMemberIsHelpButNoGuildMemberStartChallengeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CFailWithMemberIsHelpButNoGuildMemberStartChallengeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.GuildFlag) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(len(m.GuildFlag)))
		i += copy(dAtA[i:], m.GuildFlag)
	}
	return i, nil
}

func (m *C2SQuickQueryTeamBasicProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SQuickQueryTeamBasicProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, num := range m.Ids {
			dAtA[i] = 0x8
			i++
			i = encodeVarintSecretTower(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *S2CQuickQueryTeamBasicProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CQuickQueryTeamBasicProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Basics) > 0 {
		for _, b := range m.Basics {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintSecretTower(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.NotExistIds) > 0 {
		for _, num := range m.NotExistIds {
			dAtA[i] = 0x30
			i++
			i = encodeVarintSecretTower(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *S2CChangeGuildModeBroadcastProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CChangeGuildModeBroadcastProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GuildId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(m.GuildId))
	}
	return i, nil
}

func (m *S2CMemberTroopChangedProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CMemberTroopChangedProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Member) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(len(m.Member)))
		i += copy(dAtA[i:], m.Member)
	}
	if m.ProtectEndTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(m.ProtectEndTime))
	}
	return i, nil
}

func (m *S2CListRecordProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CListRecordProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Record) > 0 {
		for _, msg := range m.Record {
			dAtA[i] = 0x32
			i++
			i = encodeVarintSecretTower(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *C2STeamTalkProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2STeamTalkProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.WordsId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(m.WordsId))
	}
	if len(m.Text) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	return i, nil
}

func (m *S2CTeamTalkProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CTeamTalkProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.WordsId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(m.WordsId))
	}
	if len(m.Text) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	return i, nil
}

func (m *S2CTeamWhoTalkProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CTeamWhoTalkProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HeroId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(len(m.HeroId)))
		i += copy(dAtA[i:], m.HeroId)
	}
	if m.WordsId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(m.WordsId))
	}
	if len(m.Text) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSecretTower(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	return i, nil
}

func (m *S2CTeamHistoryTalkProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CTeamHistoryTalkProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, msg := range m.Records {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSecretTower(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64SecretTower(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32SecretTower(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintSecretTower(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *S2CUnlockSecretTowerProto) Size() (n int) {
	var l int
	_ = l
	if m.SecretTowerId != 0 {
		n += 1 + sovSecretTower(uint64(m.SecretTowerId))
	}
	return n
}

func (m *S2CRequestTeamCountProto) Size() (n int) {
	var l int
	_ = l
	if len(m.SecretTowerId) > 0 {
		for _, e := range m.SecretTowerId {
			n += 1 + sovSecretTower(uint64(e))
		}
	}
	if len(m.TeamCount) > 0 {
		for _, e := range m.TeamCount {
			n += 1 + sovSecretTower(uint64(e))
		}
	}
	return n
}

func (m *C2SRequestTeamListProto) Size() (n int) {
	var l int
	_ = l
	if m.SecretTowerId != 0 {
		n += 1 + sovSecretTower(uint64(m.SecretTowerId))
	}
	return n
}

func (m *S2CRequestTeamListProto) Size() (n int) {
	var l int
	_ = l
	if m.SecretTowerId != 0 {
		n += 1 + sovSecretTower(uint64(m.SecretTowerId))
	}
	if len(m.TeamList) > 0 {
		for _, b := range m.TeamList {
			l = len(b)
			n += 1 + l + sovSecretTower(uint64(l))
		}
	}
	return n
}

func (m *C2SCreateTeamProto) Size() (n int) {
	var l int
	_ = l
	if m.SecretTowerId != 0 {
		n += 1 + sovSecretTower(uint64(m.SecretTowerId))
	}
	if m.IsGuild {
		n += 2
	}
	return n
}

func (m *S2CCreateTeamProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.TeamDetail)
	if l > 0 {
		n += 1 + l + sovSecretTower(uint64(l))
	}
	return n
}

func (m *C2SJoinTeamProto) Size() (n int) {
	var l int
	_ = l
	if m.TeamId != 0 {
		n += 1 + sovSecretTower(uint64(m.TeamId))
	}
	if m.SecretTowerId != 0 {
		n += 1 + sovSecretTower(uint64(m.SecretTowerId))
	}
	return n
}

func (m *S2CJoinTeamProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.TeamDetail)
	if l > 0 {
		n += 1 + l + sovSecretTower(uint64(l))
	}
	return n
}

func (m *S2COtherJoinJoinTeamProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Member)
	if l > 0 {
		n += 1 + l + sovSecretTower(uint64(l))
	}
	if m.ProtectEndTime != 0 {
		n += 1 + sovSecretTower(uint64(m.ProtectEndTime))
	}
	return n
}

func (m *S2COtherLeaveLeaveTeamProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSecretTower(uint64(l))
	}
	l = len(m.NewTeamLeaderId)
	if l > 0 {
		n += 1 + l + sovSecretTower(uint64(l))
	}
	return n
}

func (m *C2SKickMemberProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSecretTower(uint64(l))
	}
	return n
}

func (m *S2CKickMemberProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSecretTower(uint64(l))
	}
	return n
}

func (m *S2COtherBeenKickKickMemberProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSecretTower(uint64(l))
	}
	return n
}

func (m *C2SMoveMemberProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSecretTower(uint64(l))
	}
	if m.Up {
		n += 2
	}
	return n
}

func (m *S2CBroadcsatMoveMemberProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSecretTower(uint64(l))
	}
	if m.Up {
		n += 2
	}
	return n
}

func (m *C2SUpdateMemberPosProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Id) > 0 {
		for _, b := range m.Id {
			l = len(b)
			n += 1 + l + sovSecretTower(uint64(l))
		}
	}
	return n
}

func (m *S2CUpdateMemberPosProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Id) > 0 {
		for _, b := range m.Id {
			l = len(b)
			n += 1 + l + sovSecretTower(uint64(l))
		}
	}
	return n
}

func (m *C2SChangeModeProto) Size() (n int) {
	var l int
	_ = l
	if m.Mode != 0 {
		n += 1 + sovSecretTower(uint64(m.Mode))
	}
	return n
}

func (m *S2CChangeModeProto) Size() (n int) {
	var l int
	_ = l
	if m.Mode != 0 {
		n += 1 + sovSecretTower(uint64(m.Mode))
	}
	return n
}

func (m *S2COtherChangedChangeModeProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSecretTower(uint64(l))
	}
	if m.Mode != 0 {
		n += 1 + sovSecretTower(uint64(m.Mode))
	}
	return n
}

func (m *S2CHelpTimesChangeProto) Size() (n int) {
	var l int
	_ = l
	if m.NewTimes != 0 {
		n += 1 + sovSecretTower(uint64(m.NewTimes))
	}
	return n
}

func (m *S2CTimesChangeProto) Size() (n int) {
	var l int
	_ = l
	if m.ChallengeTimes != 0 {
		n += 1 + sovSecretTower(uint64(m.ChallengeTimes))
	}
	if m.HistoryChallengeTimes != 0 {
		n += 1 + sovSecretTower(uint64(m.HistoryChallengeTimes))
	}
	return n
}

func (m *C2SInviteProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSecretTower(uint64(l))
	}
	return n
}

func (m *S2CInviteProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSecretTower(uint64(l))
	}
	return n
}

func (m *S2CFailTargetNotFoundInviteProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSecretTower(uint64(l))
	}
	return n
}

func (m *S2CFailTargetNotInMyGuildInviteProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSecretTower(uint64(l))
	}
	return n
}

func (m *S2CFailTargetNotOpenInviteProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSecretTower(uint64(l))
	}
	return n
}

func (m *S2CFailTargetNotOnlineInviteProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSecretTower(uint64(l))
	}
	return n
}

func (m *S2CFailTargetInYourTeamInviteProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSecretTower(uint64(l))
	}
	return n
}

func (m *S2CFailTargetNoTimesInviteProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSecretTower(uint64(l))
	}
	return n
}

func (m *C2SInviteAllProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Id) > 0 {
		for _, b := range m.Id {
			l = len(b)
			n += 1 + l + sovSecretTower(uint64(l))
		}
	}
	return n
}

func (m *S2CInviteAllProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Id) > 0 {
		for _, b := range m.Id {
			l = len(b)
			n += 1 + l + sovSecretTower(uint64(l))
		}
	}
	return n
}

func (m *S2CReceiveInviteProto) Size() (n int) {
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovSecretTower(uint64(m.Count))
	}
	if m.HaveNew {
		n += 2
	}
	return n
}

func (m *S2CRequestInviteListProto) Size() (n int) {
	var l int
	_ = l
	if len(m.InviteList) > 0 {
		for _, b := range m.InviteList {
			l = len(b)
			n += 1 + l + sovSecretTower(uint64(l))
		}
	}
	return n
}

func (m *S2CRequestTeamDetailProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.TeamDetail)
	if l > 0 {
		n += 1 + l + sovSecretTower(uint64(l))
	}
	return n
}

func (m *S2CBroadcastStartChallengeProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovSecretTower(uint64(l))
	}
	return n
}

func (m *S2CFailWithMemberTimesNotEnoughStartChallengeProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSecretTower(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSecretTower(uint64(l))
	}
	l = len(m.GuildFlag)
	if l > 0 {
		n += 1 + l + sovSecretTower(uint64(l))
	}
	return n
}

func (m *S2CFailWithMemberHelpTimesNotEnoughStartChallengeProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSecretTower(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSecretTower(uint64(l))
	}
	l = len(m.GuildFlag)
	if l > 0 {
		n += 1 + l + sovSecretTower(uint64(l))
	}
	return n
}

func (m *S2CFailWithMemberNoGuildStartChallengeProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSecretTower(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSecretTower(uint64(l))
	}
	l = len(m.GuildFlag)
	if l > 0 {
		n += 1 + l + sovSecretTower(uint64(l))
	}
	return n
}

func (m *S2CFailWithMemberNotMyGuildStartChallengeProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSecretTower(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSecretTower(uint64(l))
	}
	l = len(m.GuildFlag)
	if l > 0 {
		n += 1 + l + sovSecretTower(uint64(l))
	}
	return n
}

func (m *S2CFailWithMemberIsHelpButNoGuildStartChallengeProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSecretTower(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSecretTower(uint64(l))
	}
	l = len(m.GuildFlag)
	if l > 0 {
		n += 1 + l + sovSecretTower(uint64(l))
	}
	return n
}

func (m *S2CFailWithMemberIsHelpButNoGuildMemberStartChallengeProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSecretTower(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSecretTower(uint64(l))
	}
	l = len(m.GuildFlag)
	if l > 0 {
		n += 1 + l + sovSecretTower(uint64(l))
	}
	return n
}

func (m *C2SQuickQueryTeamBasicProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, e := range m.Ids {
			n += 1 + sovSecretTower(uint64(e))
		}
	}
	return n
}

func (m *S2CQuickQueryTeamBasicProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Basics) > 0 {
		for _, b := range m.Basics {
			l = len(b)
			n += 1 + l + sovSecretTower(uint64(l))
		}
	}
	if len(m.NotExistIds) > 0 {
		for _, e := range m.NotExistIds {
			n += 1 + sovSecretTower(uint64(e))
		}
	}
	return n
}

func (m *S2CChangeGuildModeBroadcastProto) Size() (n int) {
	var l int
	_ = l
	if m.GuildId != 0 {
		n += 1 + sovSecretTower(uint64(m.GuildId))
	}
	return n
}

func (m *S2CMemberTroopChangedProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Member)
	if l > 0 {
		n += 1 + l + sovSecretTower(uint64(l))
	}
	if m.ProtectEndTime != 0 {
		n += 1 + sovSecretTower(uint64(m.ProtectEndTime))
	}
	return n
}

func (m *S2CListRecordProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Record) > 0 {
		for _, e := range m.Record {
			l = e.Size()
			n += 1 + l + sovSecretTower(uint64(l))
		}
	}
	return n
}

func (m *C2STeamTalkProto) Size() (n int) {
	var l int
	_ = l
	if m.WordsId != 0 {
		n += 1 + sovSecretTower(uint64(m.WordsId))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovSecretTower(uint64(l))
	}
	return n
}

func (m *S2CTeamTalkProto) Size() (n int) {
	var l int
	_ = l
	if m.WordsId != 0 {
		n += 1 + sovSecretTower(uint64(m.WordsId))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovSecretTower(uint64(l))
	}
	return n
}

func (m *S2CTeamWhoTalkProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.HeroId)
	if l > 0 {
		n += 1 + l + sovSecretTower(uint64(l))
	}
	if m.WordsId != 0 {
		n += 1 + sovSecretTower(uint64(m.WordsId))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovSecretTower(uint64(l))
	}
	return n
}

func (m *S2CTeamHistoryTalkProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovSecretTower(uint64(l))
		}
	}
	return n
}

func sovSecretTower(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSecretTower(x uint64) (n int) {
	return sovSecretTower(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *S2CUnlockSecretTowerProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecretTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUnlockSecretTowerProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUnlockSecretTowerProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretTowerId", wireType)
			}
			m.SecretTowerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SecretTowerId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSecretTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecretTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CRequestTeamCountProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecretTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CRequestTeamCountProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CRequestTeamCountProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSecretTower
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SecretTowerId = append(m.SecretTowerId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSecretTower
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSecretTower
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSecretTower
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SecretTowerId = append(m.SecretTowerId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretTowerId", wireType)
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSecretTower
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TeamCount = append(m.TeamCount, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSecretTower
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSecretTower
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSecretTower
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TeamCount = append(m.TeamCount, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamCount", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSecretTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecretTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SRequestTeamListProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecretTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SRequestTeamListProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SRequestTeamListProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretTowerId", wireType)
			}
			m.SecretTowerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SecretTowerId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSecretTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecretTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CRequestTeamListProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecretTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CRequestTeamListProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CRequestTeamListProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretTowerId", wireType)
			}
			m.SecretTowerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SecretTowerId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamList", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSecretTower
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamList = append(m.TeamList, make([]byte, postIndex-iNdEx))
			copy(m.TeamList[len(m.TeamList)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecretTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecretTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SCreateTeamProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecretTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCreateTeamProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCreateTeamProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretTowerId", wireType)
			}
			m.SecretTowerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SecretTowerId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsGuild", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsGuild = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSecretTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecretTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCreateTeamProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecretTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCreateTeamProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCreateTeamProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamDetail", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSecretTower
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamDetail = append(m.TeamDetail[:0], dAtA[iNdEx:postIndex]...)
			if m.TeamDetail == nil {
				m.TeamDetail = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecretTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecretTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SJoinTeamProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecretTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SJoinTeamProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SJoinTeamProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamId", wireType)
			}
			m.TeamId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretTowerId", wireType)
			}
			m.SecretTowerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SecretTowerId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSecretTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecretTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CJoinTeamProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecretTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CJoinTeamProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CJoinTeamProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamDetail", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSecretTower
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamDetail = append(m.TeamDetail[:0], dAtA[iNdEx:postIndex]...)
			if m.TeamDetail == nil {
				m.TeamDetail = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecretTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecretTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2COtherJoinJoinTeamProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecretTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2COtherJoinJoinTeamProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2COtherJoinJoinTeamProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Member", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSecretTower
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Member = append(m.Member[:0], dAtA[iNdEx:postIndex]...)
			if m.Member == nil {
				m.Member = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtectEndTime", wireType)
			}
			m.ProtectEndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProtectEndTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSecretTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecretTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2COtherLeaveLeaveTeamProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecretTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2COtherLeaveLeaveTeamProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2COtherLeaveLeaveTeamProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSecretTower
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewTeamLeaderId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSecretTower
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewTeamLeaderId = append(m.NewTeamLeaderId[:0], dAtA[iNdEx:postIndex]...)
			if m.NewTeamLeaderId == nil {
				m.NewTeamLeaderId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecretTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecretTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SKickMemberProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecretTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SKickMemberProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SKickMemberProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSecretTower
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecretTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecretTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CKickMemberProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecretTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CKickMemberProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CKickMemberProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSecretTower
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecretTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecretTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2COtherBeenKickKickMemberProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecretTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2COtherBeenKickKickMemberProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2COtherBeenKickKickMemberProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSecretTower
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecretTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecretTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SMoveMemberProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecretTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SMoveMemberProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SMoveMemberProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSecretTower
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Up", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Up = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSecretTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecretTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CBroadcsatMoveMemberProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecretTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CBroadcsatMoveMemberProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CBroadcsatMoveMemberProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSecretTower
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Up", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Up = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSecretTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecretTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SUpdateMemberPosProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecretTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SUpdateMemberPosProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SUpdateMemberPosProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSecretTower
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id, make([]byte, postIndex-iNdEx))
			copy(m.Id[len(m.Id)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecretTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecretTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateMemberPosProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecretTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateMemberPosProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateMemberPosProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSecretTower
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id, make([]byte, postIndex-iNdEx))
			copy(m.Id[len(m.Id)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecretTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecretTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SChangeModeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecretTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SChangeModeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SChangeModeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSecretTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecretTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CChangeModeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecretTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CChangeModeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CChangeModeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSecretTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecretTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2COtherChangedChangeModeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecretTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2COtherChangedChangeModeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2COtherChangedChangeModeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSecretTower
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSecretTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecretTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CHelpTimesChangeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecretTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CHelpTimesChangeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CHelpTimesChangeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewTimes", wireType)
			}
			m.NewTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSecretTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecretTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CTimesChangeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecretTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CTimesChangeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CTimesChangeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeTimes", wireType)
			}
			m.ChallengeTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryChallengeTimes", wireType)
			}
			m.HistoryChallengeTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HistoryChallengeTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSecretTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecretTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SInviteProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecretTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SInviteProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SInviteProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSecretTower
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecretTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecretTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CInviteProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecretTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CInviteProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CInviteProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSecretTower
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecretTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecretTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CFailTargetNotFoundInviteProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecretTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CFailTargetNotFoundInviteProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CFailTargetNotFoundInviteProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSecretTower
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecretTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecretTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CFailTargetNotInMyGuildInviteProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecretTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CFailTargetNotInMyGuildInviteProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CFailTargetNotInMyGuildInviteProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSecretTower
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecretTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecretTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CFailTargetNotOpenInviteProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecretTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CFailTargetNotOpenInviteProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CFailTargetNotOpenInviteProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSecretTower
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecretTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecretTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CFailTargetNotOnlineInviteProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecretTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CFailTargetNotOnlineInviteProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CFailTargetNotOnlineInviteProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSecretTower
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecretTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecretTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CFailTargetInYourTeamInviteProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecretTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CFailTargetInYourTeamInviteProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CFailTargetInYourTeamInviteProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSecretTower
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecretTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecretTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CFailTargetNoTimesInviteProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecretTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CFailTargetNoTimesInviteProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CFailTargetNoTimesInviteProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSecretTower
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecretTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecretTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SInviteAllProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecretTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SInviteAllProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SInviteAllProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSecretTower
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id, make([]byte, postIndex-iNdEx))
			copy(m.Id[len(m.Id)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecretTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecretTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CInviteAllProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecretTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CInviteAllProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CInviteAllProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSecretTower
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id, make([]byte, postIndex-iNdEx))
			copy(m.Id[len(m.Id)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecretTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecretTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CReceiveInviteProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecretTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CReceiveInviteProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CReceiveInviteProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HaveNew", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HaveNew = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSecretTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecretTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CRequestInviteListProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecretTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CRequestInviteListProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CRequestInviteListProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteList", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSecretTower
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InviteList = append(m.InviteList, make([]byte, postIndex-iNdEx))
			copy(m.InviteList[len(m.InviteList)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecretTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecretTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CRequestTeamDetailProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecretTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CRequestTeamDetailProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CRequestTeamDetailProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamDetail", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSecretTower
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamDetail = append(m.TeamDetail[:0], dAtA[iNdEx:postIndex]...)
			if m.TeamDetail == nil {
				m.TeamDetail = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecretTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecretTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CBroadcastStartChallengeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecretTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CBroadcastStartChallengeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CBroadcastStartChallengeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSecretTower
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecretTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecretTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CFailWithMemberTimesNotEnoughStartChallengeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecretTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CFailWithMemberTimesNotEnoughStartChallengeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CFailWithMemberTimesNotEnoughStartChallengeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSecretTower
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecretTower
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildFlag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecretTower
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildFlag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecretTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecretTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CFailWithMemberHelpTimesNotEnoughStartChallengeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecretTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CFailWithMemberHelpTimesNotEnoughStartChallengeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CFailWithMemberHelpTimesNotEnoughStartChallengeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSecretTower
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecretTower
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildFlag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecretTower
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildFlag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecretTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecretTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CFailWithMemberNoGuildStartChallengeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecretTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CFailWithMemberNoGuildStartChallengeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CFailWithMemberNoGuildStartChallengeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSecretTower
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecretTower
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildFlag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecretTower
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildFlag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecretTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecretTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CFailWithMemberNotMyGuildStartChallengeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecretTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CFailWithMemberNotMyGuildStartChallengeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CFailWithMemberNotMyGuildStartChallengeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSecretTower
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecretTower
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildFlag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecretTower
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildFlag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecretTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecretTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CFailWithMemberIsHelpButNoGuildStartChallengeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecretTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CFailWithMemberIsHelpButNoGuildStartChallengeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CFailWithMemberIsHelpButNoGuildStartChallengeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSecretTower
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecretTower
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildFlag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecretTower
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildFlag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecretTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecretTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CFailWithMemberIsHelpButNoGuildMemberStartChallengeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecretTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CFailWithMemberIsHelpButNoGuildMemberStartChallengeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CFailWithMemberIsHelpButNoGuildMemberStartChallengeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSecretTower
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecretTower
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildFlag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecretTower
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildFlag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecretTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecretTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SQuickQueryTeamBasicProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecretTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SQuickQueryTeamBasicProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SQuickQueryTeamBasicProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSecretTower
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSecretTower
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSecretTower
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSecretTower
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSecretTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecretTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CQuickQueryTeamBasicProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecretTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CQuickQueryTeamBasicProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CQuickQueryTeamBasicProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Basics", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSecretTower
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Basics = append(m.Basics, make([]byte, postIndex-iNdEx))
			copy(m.Basics[len(m.Basics)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSecretTower
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NotExistIds = append(m.NotExistIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSecretTower
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSecretTower
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSecretTower
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NotExistIds = append(m.NotExistIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NotExistIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSecretTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecretTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CChangeGuildModeBroadcastProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecretTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CChangeGuildModeBroadcastProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CChangeGuildModeBroadcastProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildId", wireType)
			}
			m.GuildId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuildId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSecretTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecretTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CMemberTroopChangedProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecretTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CMemberTroopChangedProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CMemberTroopChangedProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Member", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSecretTower
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Member = append(m.Member[:0], dAtA[iNdEx:postIndex]...)
			if m.Member == nil {
				m.Member = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtectEndTime", wireType)
			}
			m.ProtectEndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProtectEndTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSecretTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecretTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CListRecordProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecretTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CListRecordProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CListRecordProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecretTower
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Record = append(m.Record, &proto7.SecretRecordProto{})
			if err := m.Record[len(m.Record)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecretTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecretTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2STeamTalkProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecretTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2STeamTalkProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2STeamTalkProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WordsId", wireType)
			}
			m.WordsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WordsId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecretTower
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecretTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecretTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CTeamTalkProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecretTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CTeamTalkProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CTeamTalkProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WordsId", wireType)
			}
			m.WordsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WordsId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecretTower
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecretTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecretTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CTeamWhoTalkProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecretTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CTeamWhoTalkProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CTeamWhoTalkProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSecretTower
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeroId = append(m.HeroId[:0], dAtA[iNdEx:postIndex]...)
			if m.HeroId == nil {
				m.HeroId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WordsId", wireType)
			}
			m.WordsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WordsId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSecretTower
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecretTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecretTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CTeamHistoryTalkProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSecretTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CTeamHistoryTalkProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CTeamHistoryTalkProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSecretTower
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, &proto7.SecretTowerChatRecordProto{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSecretTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSecretTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSecretTower(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSecretTower
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSecretTower
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSecretTower
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSecretTower
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSecretTower(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSecretTower = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSecretTower   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/gen/pb/secret_tower/secret_tower.proto", fileDescriptorSecretTower)
}

var fileDescriptorSecretTower = []byte{
	// 1221 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0x6d, 0x6f, 0xd3, 0xd6,
	0x17, 0x27, 0xe9, 0xbf, 0x6d, 0x7a, 0x5a, 0xa0, 0xf8, 0x3f, 0x68, 0xa0, 0x5a, 0x29, 0x06, 0xb1,
	0x32, 0xa4, 0x66, 0x73, 0xa1, 0xd3, 0x1e, 0x90, 0x46, 0x0c, 0x5d, 0xb3, 0xd1, 0x32, 0xe2, 0x30,
	0x34, 0x24, 0x66, 0xdd, 0xda, 0x67, 0xf1, 0x55, 0x1d, 0xdf, 0xcc, 0xbe, 0x4e, 0xa8, 0xf6, 0x62,
	0x5f, 0x63, 0x1f, 0x69, 0x2f, 0xf7, 0x11, 0x26, 0xf6, 0x45, 0xa6, 0x7b, 0xae, 0xe3, 0xc4, 0x69,
	0x48, 0x5b, 0x6d, 0x7d, 0xd3, 0xe6, 0x5c, 0x9f, 0xdf, 0xef, 0x3c, 0xf8, 0x3c, 0x5c, 0xc3, 0xd7,
	0x6d, 0x2e, 0x83, 0xf4, 0x60, 0xd3, 0x13, 0x9d, 0x5a, 0xc8, 0xdb, 0x81, 0xec, 0xb2, 0x7e, 0xad,
	0xc3, 0x42, 0xfc, 0xac, 0xd6, 0xc6, 0xa8, 0xd6, 0x3d, 0xa8, 0x25, 0xe8, 0xc5, 0x28, 0x5d, 0x29,
	0xfa, 0x18, 0x17, 0x84, 0xcd, 0x6e, 0x2c, 0xa4, 0x30, 0x66, 0xe9, 0xdf, 0x8d, 0x87, 0xef, 0x27,
	0x52, 0x24, 0x01, 0x8b, 0xd1, 0x77, 0x49, 0xb5, 0x36, 0x82, 0x36, 0x6d, 0xb8, 0xee, 0x58, 0xf6,
	0xcb, 0x28, 0x14, 0xde, 0xa1, 0x43, 0xe4, 0x2d, 0xf5, 0xf4, 0x7b, 0xa2, 0xbe, 0x0b, 0x97, 0x47,
	0x0d, 0xba, 0xdc, 0xaf, 0x96, 0xd6, 0x4b, 0x1b, 0xb3, 0xcd, 0x8b, 0xc9, 0x50, 0xb5, 0xe1, 0x9b,
	0x1c, 0xaa, 0x8e, 0x65, 0x37, 0xf1, 0x97, 0x14, 0x13, 0xd9, 0x42, 0xd6, 0xb1, 0x45, 0x1a, 0x49,
	0xcd, 0xf1, 0xf1, 0x24, 0x8e, 0x99, 0x8d, 0xd9, 0x7a, 0x79, 0xf9, 0xc2, 0x18, 0x8f, 0x71, 0x0b,
	0x40, 0x22, 0xeb, 0xb8, 0x9e, 0x82, 0x57, 0xcb, 0xb9, 0xda, 0x82, 0x1c, 0x70, 0x9a, 0x8f, 0x61,
	0xc5, 0xb6, 0x9c, 0x11, 0x53, 0xcf, 0x78, 0x22, 0xcf, 0xe6, 0xed, 0x4f, 0xb0, 0x52, 0xf4, 0xf6,
	0xcc, 0x14, 0xc6, 0x2a, 0x90, 0x4b, 0x6e, 0xc8, 0x13, 0xed, 0xe7, 0x52, 0xb3, 0x22, 0x33, 0x26,
	0xf3, 0x15, 0x18, 0xb6, 0xe5, 0xd8, 0x31, 0x32, 0x89, 0x8a, 0xfe, 0x6c, 0xd4, 0xd7, 0xa1, 0xc2,
	0x13, 0xb7, 0x9d, 0xf2, 0xd0, 0xaf, 0xce, 0xac, 0x97, 0x36, 0x2a, 0xcd, 0x79, 0x9e, 0x7c, 0xa3,
	0x44, 0xf3, 0x21, 0x18, 0x8e, 0x65, 0x8f, 0x13, 0xdf, 0x84, 0x45, 0xf2, 0xc5, 0x47, 0xc9, 0x78,
	0x48, 0xa4, 0x4b, 0x4d, 0xca, 0xe3, 0x13, 0x3a, 0x31, 0x1d, 0x58, 0xb6, 0x2d, 0xe7, 0x5b, 0xc1,
	0xa3, 0x21, 0x68, 0x05, 0xe6, 0x09, 0x94, 0x7b, 0x31, 0xa7, 0xc4, 0x86, 0x3f, 0xc9, 0xcd, 0x99,
	0x49, 0x49, 0xdc, 0x82, 0x65, 0xc7, 0xb2, 0x8b, 0xa4, 0x27, 0x7a, 0xf2, 0x86, 0x8a, 0xed, 0xb9,
	0x0c, 0x30, 0x56, 0xc8, 0x22, 0xfa, 0x1a, 0xcc, 0x75, 0xb0, 0x73, 0x80, 0x71, 0x06, 0xcc, 0x24,
	0x63, 0x03, 0x96, 0x55, 0xa9, 0xa2, 0x27, 0x5d, 0x8c, 0x7c, 0x57, 0xf2, 0x0e, 0x56, 0xcb, 0xe4,
	0xd2, 0xa5, 0xec, 0xfc, 0x69, 0xe4, 0xb7, 0x78, 0x07, 0xcd, 0xd7, 0xb0, 0x3a, 0xa0, 0x7f, 0x86,
	0xac, 0x87, 0xf4, 0x67, 0x68, 0xe0, 0x12, 0x94, 0xb3, 0x70, 0x97, 0x9a, 0x65, 0xee, 0x1b, 0xf7,
	0xc1, 0x88, 0xb0, 0xef, 0xea, 0x17, 0x89, 0xcc, 0xd7, 0xd1, 0x96, 0xe9, 0xf9, 0xe5, 0x08, 0xfb,
	0x54, 0x1a, 0x74, 0xde, 0xf0, 0xcd, 0x3b, 0xf4, 0x52, 0xbf, 0xe3, 0xde, 0xe1, 0x1e, 0xb9, 0x35,
	0x91, 0x52, 0x69, 0x39, 0x96, 0x7d, 0x92, 0xd6, 0xa7, 0x70, 0x73, 0xe0, 0x67, 0x1d, 0x31, 0x52,
	0xea, 0x27, 0x41, 0x1e, 0x90, 0xf9, 0x3d, 0xd1, 0xc3, 0x29, 0x5a, 0x4a, 0x4e, 0xbb, 0x14, 0x41,
	0xa5, 0x59, 0x4e, 0xbb, 0xe6, 0x23, 0x4a, 0x48, 0x3d, 0x16, 0xcc, 0xf7, 0x12, 0x26, 0xcf, 0x0a,
	0xbf, 0x47, 0xbd, 0xf6, 0xb2, 0xeb, 0x33, 0x39, 0xc0, 0x89, 0xa4, 0x08, 0x9d, 0xc9, 0xfc, 0xbb,
	0x47, 0x3d, 0x75, 0x2a, 0xd5, 0x0d, 0xdd, 0x1e, 0x01, 0x8b, 0xda, 0xb8, 0x27, 0x7c, 0xd4, 0x5a,
	0x06, 0xfc, 0xaf, 0x23, 0x7c, 0xcc, 0xaa, 0x91, 0x7e, 0x2b, 0x4d, 0x55, 0xef, 0xa7, 0xd0, 0x7c,
	0x02, 0x6b, 0x83, 0x8c, 0x6a, 0x75, 0x7f, 0x1c, 0x35, 0x1e, 0xeb, 0x80, 0xa5, 0x3c, 0xc2, 0xb2,
	0x4d, 0x41, 0xec, 0x62, 0xd8, 0x55, 0xe5, 0x94, 0x68, 0x0a, 0x0d, 0x5f, 0x85, 0x05, 0xaa, 0x15,
	0x75, 0x9e, 0x59, 0xae, 0xa8, 0x12, 0x51, 0xb2, 0xd9, 0x83, 0xff, 0x3b, 0x96, 0x7d, 0x0c, 0xf3,
	0x11, 0x5c, 0xf6, 0x02, 0x16, 0x86, 0x18, 0xb5, 0x31, 0x43, 0x66, 0x75, 0x9b, 0x1f, 0x13, 0xc6,
	0xd8, 0x86, 0x95, 0x80, 0x27, 0x52, 0xc4, 0x47, 0xee, 0x38, 0x40, 0xf7, 0xde, 0xd5, 0xec, 0xb1,
	0x5d, 0xc0, 0x99, 0xeb, 0x70, 0xc9, 0xb6, 0x9c, 0x46, 0xd4, 0xe3, 0x72, 0x72, 0x94, 0x4a, 0xc3,
	0xb1, 0xec, 0x69, 0x1a, 0x16, 0xac, 0x3b, 0x96, 0xbd, 0xc3, 0x78, 0xd8, 0x62, 0x71, 0x1b, 0xe5,
	0xbe, 0x90, 0x3b, 0x22, 0x8d, 0xfc, 0x69, 0x98, 0x6d, 0xb8, 0x33, 0x8e, 0x69, 0x44, 0x7b, 0x47,
	0x34, 0xa4, 0xa6, 0xe1, 0x74, 0xdd, 0x17, 0x70, 0xcf, 0xbb, 0x18, 0x4d, 0x83, 0x6c, 0xc1, 0xad,
	0x63, 0x90, 0x28, 0xe4, 0x11, 0x4e, 0x03, 0x3d, 0x00, 0xb3, 0x00, 0x6a, 0x44, 0x3f, 0x8a, 0x34,
	0x56, 0xed, 0x7c, 0x36, 0xef, 0x28, 0xcb, 0xd3, 0x20, 0xb7, 0xe1, 0x4a, 0xfe, 0x02, 0x1e, 0x87,
	0xe1, 0xe4, 0x7a, 0xbf, 0x0d, 0x57, 0xf2, 0x77, 0xf0, 0x5e, 0xa5, 0x5d, 0xb8, 0x4a, 0x3b, 0xc9,
	0x43, 0xde, 0x2b, 0xc4, 0xf6, 0x01, 0xcc, 0xea, 0x6d, 0xa8, 0x8b, 0x4e, 0x0b, 0x6a, 0x49, 0x04,
	0xac, 0x87, 0x6e, 0x84, 0xfd, 0xac, 0x5f, 0xe7, 0x95, 0xbc, 0x8f, 0x7d, 0xf3, 0x2b, 0x9a, 0xb1,
	0xd9, 0x76, 0xd3, 0x4c, 0xc3, 0xfd, 0x76, 0x13, 0x16, 0x39, 0x1d, 0xe9, 0xcd, 0xa5, 0xed, 0x03,
	0xcf, 0xb5, 0x8a, 0xe8, 0x56, 0x3e, 0xb9, 0x4f, 0x39, 0xdf, 0x3f, 0xa7, 0x14, 0xea, 0x79, 0xc3,
	0x12, 0xe9, 0x48, 0x16, 0xcb, 0xbc, 0x66, 0xf3, 0x29, 0x1f, 0x63, 0x92, 0x86, 0x72, 0x30, 0xe5,
	0xb5, 0x64, 0xf6, 0xc1, 0xca, 0xb2, 0xff, 0x8a, 0xcb, 0x40, 0x8f, 0x10, 0xca, 0xff, 0xbe, 0x90,
	0x4f, 0x23, 0x91, 0xb6, 0x83, 0x49, 0x6c, 0x13, 0xba, 0x3a, 0x62, 0xd9, 0x7e, 0x58, 0x68, 0xd2,
	0x6f, 0xe3, 0x43, 0x00, 0xda, 0xa6, 0xee, 0xcf, 0x21, 0x6b, 0x53, 0x43, 0x2d, 0x34, 0x17, 0xe8,
	0x64, 0x27, 0x64, 0x6d, 0xf3, 0x57, 0xd8, 0x3e, 0x66, 0x38, 0x1f, 0x01, 0xe7, 0x6d, 0xbc, 0x0b,
	0xf7, 0x8f, 0x19, 0xdf, 0x17, 0xd4, 0x48, 0xe7, 0x64, 0x31, 0x81, 0xcd, 0x09, 0x16, 0x65, 0xd6,
	0xbd, 0xe7, 0x64, 0xf4, 0x08, 0x1e, 0x1c, 0x33, 0xda, 0x48, 0x54, 0x96, 0xeb, 0xa9, 0x3c, 0xdf,
	0x78, 0x7f, 0x83, 0x2f, 0x4e, 0x34, 0xad, 0x4f, 0xcf, 0xc9, 0x81, 0x2d, 0x58, 0xb5, 0x2d, 0xe7,
	0x45, 0xca, 0xbd, 0xc3, 0x17, 0x29, 0xc6, 0x47, 0xaa, 0xa9, 0xea, 0x2c, 0xe1, 0xde, 0xa0, 0xbf,
	0x67, 0xb8, 0x9f, 0x8c, 0x5c, 0x89, 0x95, 0x68, 0xbe, 0xa1, 0xc5, 0xfd, 0x5e, 0xd0, 0x35, 0x98,
	0x3b, 0x50, 0x52, 0x52, 0x9d, 0xa5, 0x0e, 0xce, 0x24, 0xe3, 0x2e, 0x5c, 0x8c, 0x84, 0x74, 0xf1,
	0x2d, 0x4f, 0xa4, 0xab, 0x68, 0xe7, 0x72, 0xda, 0xc5, 0x48, 0xc8, 0xa7, 0xea, 0xbc, 0xe1, 0x27,
	0xe6, 0x23, 0x1a, 0xfa, 0x7a, 0x57, 0xe9, 0x0c, 0x08, 0x1f, 0xf3, 0xb6, 0xd5, 0x36, 0xae, 0x43,
	0x45, 0x87, 0x95, 0x5f, 0x11, 0xe7, 0x49, 0xa6, 0x0b, 0xf4, 0x0d, 0xc7, 0xb2, 0xb3, 0x1e, 0x8d,
	0x85, 0xe8, 0x66, 0x3b, 0xf7, 0xbf, 0xba, 0xc7, 0xed, 0xd0, 0xde, 0x57, 0xf3, 0xa8, 0x89, 0x9e,
	0x88, 0x33, 0xde, 0x4f, 0xd4, 0xe4, 0x50, 0x22, 0x45, 0xb5, 0x68, 0x55, 0xf5, 0x17, 0xcc, 0xa6,
	0xfe, 0x6a, 0x19, 0xd1, 0x6c, 0x66, 0x7a, 0xe6, 0x63, 0xba, 0xf8, 0xaa, 0xdc, 0xb5, 0x58, 0x78,
	0x98, 0x87, 0xd5, 0x17, 0xb1, 0x9f, 0x8c, 0x84, 0x45, 0x72, 0x83, 0x5e, 0xae, 0xc4, 0xb7, 0x72,
	0xf0, 0x72, 0xd5, 0x6f, 0x45, 0xa1, 0x56, 0xfb, 0xbf, 0xa1, 0x78, 0xa3, 0x6f, 0x07, 0xc8, 0x3a,
	0xaf, 0x02, 0x31, 0x64, 0x59, 0x81, 0xf9, 0x00, 0x63, 0xe1, 0xe6, 0xf5, 0x35, 0xa7, 0x44, 0xfd,
	0x01, 0x90, 0xd3, 0x97, 0x27, 0xd3, 0xcf, 0x8c, 0xd0, 0xff, 0x40, 0x97, 0x16, 0x45, 0xbf, 0xab,
	0x2f, 0x09, 0x43, 0x13, 0x5f, 0xc2, 0xbc, 0xce, 0x84, 0xae, 0xaf, 0x45, 0xeb, 0x56, 0x21, 0x65,
	0x74, 0x95, 0xb7, 0x03, 0x56, 0xc8, 0xdd, 0x00, 0x51, 0x5f, 0xff, 0xe3, 0xdd, 0x5a, 0xe9, 0xcf,
	0x77, 0x6b, 0xa5, 0xbf, 0xde, 0xad, 0x95, 0x7e, 0xff, 0x7b, 0xed, 0xc2, 0x6e, 0xe9, 0xf5, 0xd2,
	0xe8, 0xa7, 0xc1, 0xc1, 0x1c, 0x91, 0x6d, 0xfd, 0x13, 0x00, 0x00, 0xff, 0xff, 0x54, 0x8d, 0x6b,
	0x63, 0xc3, 0x0e, 0x00, 0x00,
}
