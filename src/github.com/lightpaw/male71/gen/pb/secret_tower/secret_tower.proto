
syntax = "proto3";

package proto;
option go_package = "secret_tower";
option optimize_for = SPEED;
import "github.com/lightpaw/male7/pb/shared_proto/tower.proto";


message S2CUnlockSecretTowerProto {

    int32 secret_tower_id = 1; // 解锁的密室id<=该密室id的密室全部都解锁了，收到该消息之后，客户端本地缓存该数据

}

message S2CRequestTeamCountProto {

    repeated int32 secret_tower_id = 1 [packed = false]; // 密室id

    repeated int32 team_count = 2 [packed = false]; // 队伍数量，跟密室id一一对应

}

message C2SRequestTeamListProto {

    int32 secret_tower_id = 1; // 密室id

}

message S2CRequestTeamListProto {

    int32 secret_tower_id = 1; // 密室id

    repeated bytes team_list = 2; // 队伍列表, []shared_proto.SecretTeamShowProto

}

message C2SCreateTeamProto {

    int32 secret_tower_id = 1; // 密室id

    bool is_guild = 3; // 帮派密室(true)/普通密室(false)

}

message S2CCreateTeamProto {

    bytes team_detail = 1; // 队伍详细信息, shared_proto.SecretTeamDetailProto，收到消息后，客户端缓存10s，如有需要，可以再来请求一次 此处同request_team_detail

}

message C2SJoinTeamProto {

    int32 team_id = 1; // 队伍id，这个有值，优先这个

    int32 secret_tower_id = 3; // 密室id, 0表示不限

}

message S2CJoinTeamProto {

    bytes team_detail = 1; // 队伍详细信息, shared_proto.SecretTeamDetailProto, 收到消息后，客户端缓存10s，如有需要，可以再来请求一次 此处同request_team_detail

}

message S2COtherJoinJoinTeamProto {

    bytes member = 1; // 队伍详细信息, shared_proto.SecretTeamMemberProto

    int32 protect_end_time = 2; // 新的保护结束unix时间戳

}

message S2COtherLeaveLeaveTeamProto {

    bytes id = 1; // 离开的人的id

    bytes new_team_leader_id = 2; // 新的队长id，跟此前队长id相同表示队长没变

}

message C2SKickMemberProto {

    bytes id = 1; // 要踢出的人的id

}

message S2CKickMemberProto {

    bytes id = 1; // 离开的人的id

}

message S2COtherBeenKickKickMemberProto {

    bytes id = 1; // 离开的人的id

}

message C2SMoveMemberProto {

    bytes id = 1; // 要移动的成员

    bool up = 2; // true(上移)/false(下移)

}

message S2CBroadcsatMoveMemberProto {

    bytes id = 1; // 要移动的成员

    bool up = 2; // true(上移)/false(下移)

}

message C2SUpdateMemberPosProto {

    repeated bytes id = 1; // 新成员列表

}

message S2CUpdateMemberPosProto {

    repeated bytes id = 1; // 新成员列表

}

message C2SChangeModeProto {

    int32 mode = 1; // 模式类型

}

message S2CChangeModeProto {

    int32 mode = 1; // 模式类型

}

message S2COtherChangedChangeModeProto {

    bytes id = 1; // 谁修改了自己的模式

    int32 mode = 2; // 模式类型

}

message S2CHelpTimesChangeProto {

    int32 new_times = 1; // 新的协助次数

}

message S2CTimesChangeProto {

    int32 challenge_times = 2; // 当前挑战次数

    int32 history_challenge_times = 3; // 历史挑战次数

}

message C2SInviteProto {

    bytes id = 1; // 邀请的玩家id

}

message S2CInviteProto {

    bytes id = 1; // 邀请的玩家id

}

message S2CFailTargetNotFoundInviteProto {

    bytes id = 1; // 邀请的玩家id，玩家没找到

}

message S2CFailTargetNotInMyGuildInviteProto {

    bytes id = 1; // 邀请的玩家id，目标玩家不在本盟

}

message S2CFailTargetNotOpenInviteProto {

    bytes id = 1; // 邀请的玩家id，目标玩家没有开启该密室

}

message S2CFailTargetNotOnlineInviteProto {

    bytes id = 1; // 邀请的玩家id，目标玩家没有在线

}

message S2CFailTargetInYourTeamInviteProto {

    bytes id = 1; // 邀请的玩家id，目标玩家在队伍中了

}

message S2CFailTargetNoTimesInviteProto {

    bytes id = 1; // 邀请的玩家id，目标玩家没次数了

}

message C2SInviteAllProto {

    repeated bytes id = 1; // 邀请的玩家id

}

message S2CInviteAllProto {

    repeated bytes id = 1; // 邀请的玩家id

}

message S2CReceiveInviteProto {

    int32 count = 1; // 邀请的数量，客户端根据邀请数量自己决定是否显示图标

    bool have_new = 2; // 是否有新的(新的的定义是，从我上次看到这个邀请列表到现在有没有新的邀请)

}

message S2CRequestInviteListProto {

    repeated bytes invite_list = 1; // 邀请列表, []shared_proto.SecretTeamShowProto

}

message S2CRequestTeamDetailProto {

    bytes team_detail = 1; // 队伍详细信息, shared_proto.SecretTeamDetailProto

}

message S2CBroadcastStartChallengeProto {

    bytes result = 1; // 结果 shared_proto.SecretChallengeResultProto

}

message S2CFailWithMemberTimesNotEnoughStartChallengeProto {

    bytes id = 1; // 玩家id

    string name = 2; // 玩家名字

    string guild_flag = 3; // 玩家帮旗

}

message S2CFailWithMemberHelpTimesNotEnoughStartChallengeProto {

    bytes id = 1; // 玩家id

    string name = 2; // 玩家名字

    string guild_flag = 3; // 玩家帮旗

}

message S2CFailWithMemberNoGuildStartChallengeProto {

    bytes id = 1; // 玩家id

    string name = 2; // 玩家名字

    string guild_flag = 3; // 玩家帮旗

}

message S2CFailWithMemberNotMyGuildStartChallengeProto {

    bytes id = 1; // 玩家id

    string name = 2; // 玩家名字

    string guild_flag = 3; // 玩家帮旗

}

message S2CFailWithMemberIsHelpButNoGuildStartChallengeProto {

    bytes id = 1; // 玩家id

    string name = 2; // 玩家名字

    string guild_flag = 3; // 玩家帮旗

}

message S2CFailWithMemberIsHelpButNoGuildMemberStartChallengeProto {

    bytes id = 1; // 玩家id

    string name = 2; // 玩家名字

    string guild_flag = 3; // 玩家帮旗

}

message C2SQuickQueryTeamBasicProto {

    repeated int32 ids = 1 [packed = false]; // 队伍的id

}

message S2CQuickQueryTeamBasicProto {

    repeated bytes basics = 5; // 队伍基本信息, []shared_proto.SecretTeamShowProto

    repeated int32 not_exist_ids = 6 [packed = false]; // 不存在了的队伍id

}

message S2CChangeGuildModeBroadcastProto {

    int32 guild_id = 1; // guild_id != 0 表示联盟模式，0表示随便组队模式

}

message S2CMemberTroopChangedProto {

    bytes member = 1; // 队伍成员详细信息, shared_proto.SecretTeamMemberProto

    int32 protect_end_time = 2; // 新的保护结束unix时间戳

}

message S2CListRecordProto {

    repeated SecretRecordProto record = 6; // 密室记录

}

message C2STeamTalkProto {

    int32 words_id = 1; // 说的话id，SecretTowerWordsDataProto.id

    string text = 2; // 当自定义内容时候,这里存入输入的内容,words_id就为0

}

message S2CTeamTalkProto {

    int32 words_id = 1; // 说的话id，SecretTowerWordsDataProto.id

    string text = 2; // 当words_id为0时候取这里内容

}

message S2CTeamWhoTalkProto {

    bytes hero_id = 1; // 谁说的话

    int32 words_id = 2; // 说的话 id, SecretTowerWordsDataProto.id

    string text = 3; // 当words_id=0的时候,就取这里的内容显示

}

message S2CTeamHistoryTalkProto {

    repeated SecretTowerChatRecordProto records = 1; // 聊天记录

}

