// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/gen/pb/client_config/client_config.proto
// DO NOT EDIT!

/*
	Package client_config is a generated protocol buffer package.

	It is generated from these files:
		github.com/lightpaw/male7/gen/pb/client_config/client_config.proto

	It has these top-level messages:
		C2SConfigProto
		S2CConfigProto
		C2SSetClientDataProto
		C2SSetClientKeyProto
		S2CSetClientKeyProto
*/
package client_config

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type C2SConfigProto struct {
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (m *C2SConfigProto) Reset()                    { *m = C2SConfigProto{} }
func (m *C2SConfigProto) String() string            { return proto.CompactTextString(m) }
func (*C2SConfigProto) ProtoMessage()               {}
func (*C2SConfigProto) Descriptor() ([]byte, []int) { return fileDescriptorClientConfig, []int{0} }

func (m *C2SConfigProto) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type S2CConfigProto struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *S2CConfigProto) Reset()                    { *m = S2CConfigProto{} }
func (m *S2CConfigProto) String() string            { return proto.CompactTextString(m) }
func (*S2CConfigProto) ProtoMessage()               {}
func (*S2CConfigProto) Descriptor() ([]byte, []int) { return fileDescriptorClientConfig, []int{1} }

func (m *S2CConfigProto) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type C2SSetClientDataProto struct {
	Index     int32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	ToSetBool bool  `protobuf:"varint,3,opt,name=toSetBool,proto3" json:"toSetBool,omitempty"`
}

func (m *C2SSetClientDataProto) Reset()         { *m = C2SSetClientDataProto{} }
func (m *C2SSetClientDataProto) String() string { return proto.CompactTextString(m) }
func (*C2SSetClientDataProto) ProtoMessage()    {}
func (*C2SSetClientDataProto) Descriptor() ([]byte, []int) {
	return fileDescriptorClientConfig, []int{2}
}

func (m *C2SSetClientDataProto) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *C2SSetClientDataProto) GetToSetBool() bool {
	if m != nil {
		return m.ToSetBool
	}
	return false
}

type C2SSetClientKeyProto struct {
	KeyType  int32 `protobuf:"varint,1,opt,name=key_type,json=keyType,proto3" json:"key_type,omitempty"`
	KeyValue int32 `protobuf:"varint,2,opt,name=key_value,json=keyValue,proto3" json:"key_value,omitempty"`
}

func (m *C2SSetClientKeyProto) Reset()                    { *m = C2SSetClientKeyProto{} }
func (m *C2SSetClientKeyProto) String() string            { return proto.CompactTextString(m) }
func (*C2SSetClientKeyProto) ProtoMessage()               {}
func (*C2SSetClientKeyProto) Descriptor() ([]byte, []int) { return fileDescriptorClientConfig, []int{3} }

func (m *C2SSetClientKeyProto) GetKeyType() int32 {
	if m != nil {
		return m.KeyType
	}
	return 0
}

func (m *C2SSetClientKeyProto) GetKeyValue() int32 {
	if m != nil {
		return m.KeyValue
	}
	return 0
}

type S2CSetClientKeyProto struct {
	KeyType  int32 `protobuf:"varint,1,opt,name=key_type,json=keyType,proto3" json:"key_type,omitempty"`
	KeyValue int32 `protobuf:"varint,2,opt,name=key_value,json=keyValue,proto3" json:"key_value,omitempty"`
}

func (m *S2CSetClientKeyProto) Reset()                    { *m = S2CSetClientKeyProto{} }
func (m *S2CSetClientKeyProto) String() string            { return proto.CompactTextString(m) }
func (*S2CSetClientKeyProto) ProtoMessage()               {}
func (*S2CSetClientKeyProto) Descriptor() ([]byte, []int) { return fileDescriptorClientConfig, []int{4} }

func (m *S2CSetClientKeyProto) GetKeyType() int32 {
	if m != nil {
		return m.KeyType
	}
	return 0
}

func (m *S2CSetClientKeyProto) GetKeyValue() int32 {
	if m != nil {
		return m.KeyValue
	}
	return 0
}

func init() {
	proto.RegisterType((*C2SConfigProto)(nil), "proto.C2SConfigProto")
	proto.RegisterType((*S2CConfigProto)(nil), "proto.S2CConfigProto")
	proto.RegisterType((*C2SSetClientDataProto)(nil), "proto.C2SSetClientDataProto")
	proto.RegisterType((*C2SSetClientKeyProto)(nil), "proto.C2SSetClientKeyProto")
	proto.RegisterType((*S2CSetClientKeyProto)(nil), "proto.S2CSetClientKeyProto")
}
func (m *C2SConfigProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SConfigProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClientConfig(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	return i, nil
}

func (m *S2CConfigProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CConfigProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintClientConfig(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *C2SSetClientDataProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SSetClientDataProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintClientConfig(dAtA, i, uint64(m.Index))
	}
	if m.ToSetBool {
		dAtA[i] = 0x18
		i++
		if m.ToSetBool {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *C2SSetClientKeyProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SSetClientKeyProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintClientConfig(dAtA, i, uint64(m.KeyType))
	}
	if m.KeyValue != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintClientConfig(dAtA, i, uint64(m.KeyValue))
	}
	return i, nil
}

func (m *S2CSetClientKeyProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSetClientKeyProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintClientConfig(dAtA, i, uint64(m.KeyType))
	}
	if m.KeyValue != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintClientConfig(dAtA, i, uint64(m.KeyValue))
	}
	return i, nil
}

func encodeFixed64ClientConfig(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32ClientConfig(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintClientConfig(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *C2SConfigProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovClientConfig(uint64(l))
	}
	return n
}

func (m *S2CConfigProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovClientConfig(uint64(l))
	}
	return n
}

func (m *C2SSetClientDataProto) Size() (n int) {
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovClientConfig(uint64(m.Index))
	}
	if m.ToSetBool {
		n += 2
	}
	return n
}

func (m *C2SSetClientKeyProto) Size() (n int) {
	var l int
	_ = l
	if m.KeyType != 0 {
		n += 1 + sovClientConfig(uint64(m.KeyType))
	}
	if m.KeyValue != 0 {
		n += 1 + sovClientConfig(uint64(m.KeyValue))
	}
	return n
}

func (m *S2CSetClientKeyProto) Size() (n int) {
	var l int
	_ = l
	if m.KeyType != 0 {
		n += 1 + sovClientConfig(uint64(m.KeyType))
	}
	if m.KeyValue != 0 {
		n += 1 + sovClientConfig(uint64(m.KeyValue))
	}
	return n
}

func sovClientConfig(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozClientConfig(x uint64) (n int) {
	return sovClientConfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *C2SConfigProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SConfigProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SConfigProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClientConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CConfigProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CConfigProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CConfigProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthClientConfig
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClientConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SSetClientDataProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SSetClientDataProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SSetClientDataProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToSetBool", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ToSetBool = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipClientConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SSetClientKeyProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SSetClientKeyProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SSetClientKeyProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyType", wireType)
			}
			m.KeyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyValue", wireType)
			}
			m.KeyValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyValue |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClientConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSetClientKeyProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSetClientKeyProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSetClientKeyProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyType", wireType)
			}
			m.KeyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyValue", wireType)
			}
			m.KeyValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyValue |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClientConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthClientConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipClientConfig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowClientConfig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClientConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClientConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthClientConfig
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowClientConfig
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipClientConfig(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthClientConfig = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowClientConfig   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/gen/pb/client_config/client_config.proto", fileDescriptorClientConfig)
}

var fileDescriptorClientConfig = []byte{
	// 274 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x72, 0x4a, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0xcf, 0xc9, 0x4c, 0xcf, 0x28, 0x29, 0x48, 0x2c, 0xd7,
	0xcf, 0x4d, 0xcc, 0x49, 0x35, 0xd7, 0x4f, 0x4f, 0xcd, 0xd3, 0x2f, 0x48, 0xd2, 0x4f, 0xce, 0xc9,
	0x4c, 0xcd, 0x2b, 0x89, 0x4f, 0xce, 0xcf, 0x4b, 0xcb, 0x4c, 0x47, 0xe5, 0xe9, 0x15, 0x14, 0xe5,
	0x97, 0xe4, 0x0b, 0xb1, 0x82, 0x29, 0x25, 0x15, 0x2e, 0x3e, 0x67, 0xa3, 0x60, 0x67, 0xb0, 0x4c,
	0x00, 0x58, 0x42, 0x88, 0x8b, 0xa5, 0x20, 0xb1, 0x24, 0x43, 0x82, 0x51, 0x81, 0x51, 0x83, 0x33,
	0x08, 0xcc, 0x06, 0xa9, 0x0a, 0x36, 0x72, 0x46, 0x53, 0x95, 0x92, 0x58, 0x92, 0x08, 0x56, 0xc5,
	0x13, 0x04, 0x66, 0x2b, 0x79, 0x73, 0x89, 0x3a, 0x1b, 0x05, 0x07, 0xa7, 0x96, 0x38, 0x83, 0xed,
	0x73, 0x49, 0x2c, 0x49, 0x84, 0x28, 0x16, 0xe1, 0x62, 0xcd, 0xcc, 0x4b, 0x49, 0xad, 0x00, 0xab,
	0x66, 0x0d, 0x82, 0x70, 0x84, 0x64, 0xb8, 0x38, 0x4b, 0xf2, 0x83, 0x53, 0x4b, 0x9c, 0xf2, 0xf3,
	0x73, 0x24, 0x98, 0x15, 0x18, 0x35, 0x38, 0x82, 0x10, 0x02, 0x4a, 0x7e, 0x5c, 0x22, 0xc8, 0x86,
	0x79, 0xa7, 0x56, 0x42, 0xcc, 0x92, 0xe4, 0xe2, 0xc8, 0x4e, 0xad, 0x8c, 0x2f, 0xa9, 0x2c, 0x48,
	0x85, 0x1a, 0xc7, 0x9e, 0x9d, 0x5a, 0x19, 0x52, 0x59, 0x90, 0x2a, 0x24, 0xcd, 0xc5, 0x09, 0x92,
	0x2a, 0x4b, 0xcc, 0x29, 0x4d, 0x95, 0x60, 0x02, 0xcb, 0x81, 0xd4, 0x86, 0x81, 0xf8, 0x20, 0xf3,
	0x82, 0x8d, 0x9c, 0xa9, 0x66, 0x9e, 0x93, 0xe2, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31,
	0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe3, 0xb1, 0x1c, 0x83, 0x07, 0x63, 0x14, 0x2f, 0x4a, 0x40, 0x27,
	0xb1, 0x81, 0x83, 0xd8, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x79, 0x1e, 0x13, 0x02, 0xaf, 0x01,
	0x00, 0x00,
}
