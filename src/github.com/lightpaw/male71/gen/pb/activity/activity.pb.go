// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/gen/pb/activity/activity.proto
// DO NOT EDIT!

/*
	Package activity is a generated protocol buffer package.

	It is generated from these files:
		github.com/lightpaw/male7/gen/pb/activity/activity.proto

	It has these top-level messages:
		S2CNoticeActivityShowProto
		C2SCollectCollectionProto
		S2CCollectCollectionProto
		S2CNoticeCollectionProto
		S2CNoticeCollectionCountsProto
		S2CNoticeTaskListModeProto
		S2CNoticeTaskListModeProgressProto
*/
package activity

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import proto20 "github.com/lightpaw/male7/pb/shared_proto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type S2CNoticeActivityShowProto struct {
	Show []*proto20.ActiviyShowProto `protobuf:"bytes,2,rep,name=show" json:"show,omitempty"`
}

func (m *S2CNoticeActivityShowProto) Reset()         { *m = S2CNoticeActivityShowProto{} }
func (m *S2CNoticeActivityShowProto) String() string { return proto.CompactTextString(m) }
func (*S2CNoticeActivityShowProto) ProtoMessage()    {}
func (*S2CNoticeActivityShowProto) Descriptor() ([]byte, []int) {
	return fileDescriptorActivity, []int{0}
}

func (m *S2CNoticeActivityShowProto) GetShow() []*proto20.ActiviyShowProto {
	if m != nil {
		return m.Show
	}
	return nil
}

type C2SCollectCollectionProto struct {
	Id         int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ExchangeId int32 `protobuf:"varint,2,opt,name=exchange_id,json=exchangeId,proto3" json:"exchange_id,omitempty"`
}

func (m *C2SCollectCollectionProto) Reset()         { *m = C2SCollectCollectionProto{} }
func (m *C2SCollectCollectionProto) String() string { return proto.CompactTextString(m) }
func (*C2SCollectCollectionProto) ProtoMessage()    {}
func (*C2SCollectCollectionProto) Descriptor() ([]byte, []int) {
	return fileDescriptorActivity, []int{1}
}

func (m *C2SCollectCollectionProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *C2SCollectCollectionProto) GetExchangeId() int32 {
	if m != nil {
		return m.ExchangeId
	}
	return 0
}

type S2CCollectCollectionProto struct {
	Id         int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ExchangeId int32 `protobuf:"varint,2,opt,name=exchange_id,json=exchangeId,proto3" json:"exchange_id,omitempty"`
}

func (m *S2CCollectCollectionProto) Reset()         { *m = S2CCollectCollectionProto{} }
func (m *S2CCollectCollectionProto) String() string { return proto.CompactTextString(m) }
func (*S2CCollectCollectionProto) ProtoMessage()    {}
func (*S2CCollectCollectionProto) Descriptor() ([]byte, []int) {
	return fileDescriptorActivity, []int{2}
}

func (m *S2CCollectCollectionProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *S2CCollectCollectionProto) GetExchangeId() int32 {
	if m != nil {
		return m.ExchangeId
	}
	return 0
}

type S2CNoticeCollectionProto struct {
	Activity []*proto20.ActivityCollectionProto `protobuf:"bytes,3,rep,name=activity" json:"activity,omitempty"`
}

func (m *S2CNoticeCollectionProto) Reset()                    { *m = S2CNoticeCollectionProto{} }
func (m *S2CNoticeCollectionProto) String() string            { return proto.CompactTextString(m) }
func (*S2CNoticeCollectionProto) ProtoMessage()               {}
func (*S2CNoticeCollectionProto) Descriptor() ([]byte, []int) { return fileDescriptorActivity, []int{3} }

func (m *S2CNoticeCollectionProto) GetActivity() []*proto20.ActivityCollectionProto {
	if m != nil {
		return m.Activity
	}
	return nil
}

type S2CNoticeCollectionCountsProto struct {
	Counts *proto20.HeroAllCollectionProto `protobuf:"bytes,3,opt,name=counts" json:"counts,omitempty"`
}

func (m *S2CNoticeCollectionCountsProto) Reset()         { *m = S2CNoticeCollectionCountsProto{} }
func (m *S2CNoticeCollectionCountsProto) String() string { return proto.CompactTextString(m) }
func (*S2CNoticeCollectionCountsProto) ProtoMessage()    {}
func (*S2CNoticeCollectionCountsProto) Descriptor() ([]byte, []int) {
	return fileDescriptorActivity, []int{4}
}

func (m *S2CNoticeCollectionCountsProto) GetCounts() *proto20.HeroAllCollectionProto {
	if m != nil {
		return m.Counts
	}
	return nil
}

type S2CNoticeTaskListModeProto struct {
	Activity []*proto20.ActivityTaskListModeProto `protobuf:"bytes,3,rep,name=activity" json:"activity,omitempty"`
}

func (m *S2CNoticeTaskListModeProto) Reset()         { *m = S2CNoticeTaskListModeProto{} }
func (m *S2CNoticeTaskListModeProto) String() string { return proto.CompactTextString(m) }
func (*S2CNoticeTaskListModeProto) ProtoMessage()    {}
func (*S2CNoticeTaskListModeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorActivity, []int{5}
}

func (m *S2CNoticeTaskListModeProto) GetActivity() []*proto20.ActivityTaskListModeProto {
	if m != nil {
		return m.Activity
	}
	return nil
}

type S2CNoticeTaskListModeProgressProto struct {
	Activity []*proto20.HeroActivityTaskListModeProto `protobuf:"bytes,3,rep,name=activity" json:"activity,omitempty"`
}

func (m *S2CNoticeTaskListModeProgressProto) Reset()         { *m = S2CNoticeTaskListModeProgressProto{} }
func (m *S2CNoticeTaskListModeProgressProto) String() string { return proto.CompactTextString(m) }
func (*S2CNoticeTaskListModeProgressProto) ProtoMessage()    {}
func (*S2CNoticeTaskListModeProgressProto) Descriptor() ([]byte, []int) {
	return fileDescriptorActivity, []int{6}
}

func (m *S2CNoticeTaskListModeProgressProto) GetActivity() []*proto20.HeroActivityTaskListModeProto {
	if m != nil {
		return m.Activity
	}
	return nil
}

func init() {
	proto.RegisterType((*S2CNoticeActivityShowProto)(nil), "proto.S2CNoticeActivityShowProto")
	proto.RegisterType((*C2SCollectCollectionProto)(nil), "proto.C2SCollectCollectionProto")
	proto.RegisterType((*S2CCollectCollectionProto)(nil), "proto.S2CCollectCollectionProto")
	proto.RegisterType((*S2CNoticeCollectionProto)(nil), "proto.S2CNoticeCollectionProto")
	proto.RegisterType((*S2CNoticeCollectionCountsProto)(nil), "proto.S2CNoticeCollectionCountsProto")
	proto.RegisterType((*S2CNoticeTaskListModeProto)(nil), "proto.S2CNoticeTaskListModeProto")
	proto.RegisterType((*S2CNoticeTaskListModeProgressProto)(nil), "proto.S2CNoticeTaskListModeProgressProto")
}
func (m *S2CNoticeActivityShowProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CNoticeActivityShowProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Show) > 0 {
		for _, msg := range m.Show {
			dAtA[i] = 0x12
			i++
			i = encodeVarintActivity(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *C2SCollectCollectionProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCollectCollectionProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActivity(dAtA, i, uint64(m.Id))
	}
	if m.ExchangeId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActivity(dAtA, i, uint64(m.ExchangeId))
	}
	return i, nil
}

func (m *S2CCollectCollectionProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCollectCollectionProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintActivity(dAtA, i, uint64(m.Id))
	}
	if m.ExchangeId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintActivity(dAtA, i, uint64(m.ExchangeId))
	}
	return i, nil
}

func (m *S2CNoticeCollectionProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CNoticeCollectionProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Activity) > 0 {
		for _, msg := range m.Activity {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintActivity(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *S2CNoticeCollectionCountsProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CNoticeCollectionCountsProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Counts != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintActivity(dAtA, i, uint64(m.Counts.Size()))
		n1, err := m.Counts.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *S2CNoticeTaskListModeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CNoticeTaskListModeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Activity) > 0 {
		for _, msg := range m.Activity {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintActivity(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *S2CNoticeTaskListModeProgressProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CNoticeTaskListModeProgressProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Activity) > 0 {
		for _, msg := range m.Activity {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintActivity(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Activity(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Activity(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintActivity(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *S2CNoticeActivityShowProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Show) > 0 {
		for _, e := range m.Show {
			l = e.Size()
			n += 1 + l + sovActivity(uint64(l))
		}
	}
	return n
}

func (m *C2SCollectCollectionProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovActivity(uint64(m.Id))
	}
	if m.ExchangeId != 0 {
		n += 1 + sovActivity(uint64(m.ExchangeId))
	}
	return n
}

func (m *S2CCollectCollectionProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovActivity(uint64(m.Id))
	}
	if m.ExchangeId != 0 {
		n += 1 + sovActivity(uint64(m.ExchangeId))
	}
	return n
}

func (m *S2CNoticeCollectionProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Activity) > 0 {
		for _, e := range m.Activity {
			l = e.Size()
			n += 1 + l + sovActivity(uint64(l))
		}
	}
	return n
}

func (m *S2CNoticeCollectionCountsProto) Size() (n int) {
	var l int
	_ = l
	if m.Counts != nil {
		l = m.Counts.Size()
		n += 1 + l + sovActivity(uint64(l))
	}
	return n
}

func (m *S2CNoticeTaskListModeProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Activity) > 0 {
		for _, e := range m.Activity {
			l = e.Size()
			n += 1 + l + sovActivity(uint64(l))
		}
	}
	return n
}

func (m *S2CNoticeTaskListModeProgressProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Activity) > 0 {
		for _, e := range m.Activity {
			l = e.Size()
			n += 1 + l + sovActivity(uint64(l))
		}
	}
	return n
}

func sovActivity(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozActivity(x uint64) (n int) {
	return sovActivity(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *S2CNoticeActivityShowProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CNoticeActivityShowProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CNoticeActivityShowProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Show", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActivity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Show = append(m.Show, &proto20.ActiviyShowProto{})
			if err := m.Show[len(m.Show)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SCollectCollectionProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCollectCollectionProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCollectCollectionProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeId", wireType)
			}
			m.ExchangeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExchangeId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCollectCollectionProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCollectCollectionProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCollectCollectionProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeId", wireType)
			}
			m.ExchangeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExchangeId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CNoticeCollectionProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CNoticeCollectionProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CNoticeCollectionProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Activity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActivity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Activity = append(m.Activity, &proto20.ActivityCollectionProto{})
			if err := m.Activity[len(m.Activity)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CNoticeCollectionCountsProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CNoticeCollectionCountsProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CNoticeCollectionCountsProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActivity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Counts == nil {
				m.Counts = &proto20.HeroAllCollectionProto{}
			}
			if err := m.Counts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CNoticeTaskListModeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CNoticeTaskListModeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CNoticeTaskListModeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Activity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActivity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Activity = append(m.Activity, &proto20.ActivityTaskListModeProto{})
			if err := m.Activity[len(m.Activity)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CNoticeTaskListModeProgressProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CNoticeTaskListModeProgressProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CNoticeTaskListModeProgressProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Activity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActivity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Activity = append(m.Activity, &proto20.HeroActivityTaskListModeProto{})
			if err := m.Activity[len(m.Activity)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipActivity(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowActivity
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActivity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthActivity
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowActivity
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipActivity(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthActivity = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowActivity   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/gen/pb/activity/activity.proto", fileDescriptorActivity)
}

var fileDescriptorActivity = []byte{
	// 359 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x91, 0xcd, 0x4a, 0xfb, 0x40,
	0x14, 0xc5, 0xff, 0x93, 0xfe, 0x5b, 0xe4, 0x16, 0x5c, 0x74, 0x63, 0x2c, 0x1a, 0x43, 0x70, 0x51,
	0x10, 0x1a, 0x88, 0x88, 0x22, 0x2e, 0xac, 0xd9, 0xb4, 0x50, 0x45, 0x1a, 0x51, 0xe8, 0xa6, 0xe4,
	0x63, 0x4c, 0x06, 0xa7, 0x99, 0x90, 0x99, 0x5a, 0xfb, 0x26, 0x3e, 0x92, 0x4b, 0x1f, 0x41, 0xea,
	0x8b, 0x88, 0x93, 0x34, 0xd6, 0xd4, 0x8f, 0x8d, 0xab, 0x9b, 0xcc, 0x3d, 0xf7, 0x77, 0xcf, 0x99,
	0x81, 0xa3, 0x90, 0x88, 0x68, 0xe2, 0xb5, 0x7d, 0x36, 0x36, 0x29, 0x09, 0x23, 0x91, 0xb8, 0x53,
	0x73, 0xec, 0x52, 0x7c, 0x68, 0x86, 0x38, 0x36, 0x13, 0xcf, 0x74, 0x7d, 0x41, 0xee, 0x89, 0x98,
	0x15, 0x1f, 0xed, 0x24, 0x65, 0x82, 0x35, 0xaa, 0xb2, 0x34, 0x7f, 0x00, 0x24, 0x9e, 0xc9, 0x23,
	0x37, 0xc5, 0xc1, 0x48, 0x4a, 0x4b, 0x00, 0xa3, 0x07, 0x4d, 0xc7, 0xb2, 0x2f, 0x98, 0x20, 0x3e,
	0xee, 0xe4, 0x2d, 0x27, 0x62, 0xd3, 0x4b, 0x89, 0xdf, 0x83, 0xff, 0x3c, 0x62, 0x53, 0x55, 0xd1,
	0x2b, 0xad, 0xba, 0xb5, 0x91, 0xcd, 0xb4, 0x33, 0xdd, 0x87, 0x6c, 0x20, 0x45, 0x46, 0x1f, 0x36,
	0x6d, 0xcb, 0xb1, 0x19, 0xa5, 0xd8, 0x17, 0x79, 0x21, 0x2c, 0xce, 0x48, 0xeb, 0xa0, 0x90, 0x40,
	0x45, 0x3a, 0x6a, 0x55, 0x07, 0x0a, 0x09, 0x1a, 0x3b, 0x50, 0xc7, 0x0f, 0x7e, 0xe4, 0xc6, 0x21,
	0x1e, 0x91, 0x40, 0x55, 0x64, 0x03, 0x16, 0x47, 0xbd, 0xe0, 0x9d, 0xe6, 0x58, 0xf6, 0x5f, 0xd1,
	0xae, 0x41, 0x2d, 0x62, 0x96, 0x61, 0xc7, 0xb0, 0xb6, 0xb8, 0x14, 0xb5, 0x22, 0x83, 0x6a, 0x9f,
	0x82, 0x8a, 0x59, 0x69, 0x62, 0x50, 0xe8, 0x8d, 0x1b, 0xd0, 0xbe, 0xe0, 0xda, 0x6c, 0x12, 0x0b,
	0x9e, 0xd1, 0x0f, 0xa0, 0xe6, 0xcb, 0x5f, 0xb5, 0xa2, 0xa3, 0x56, 0xdd, 0xda, 0xce, 0xd9, 0x5d,
	0x9c, 0xb2, 0x0e, 0xa5, 0x65, 0x74, 0x2e, 0x36, 0x86, 0x4b, 0xef, 0x72, 0xe5, 0xf2, 0xbb, 0x3e,
	0xe1, 0xe2, 0x9c, 0x05, 0x38, 0x83, 0x9e, 0xac, 0x58, 0xd6, 0x4b, 0x96, 0x57, 0x66, 0x96, 0x4c,
	0xdf, 0x82, 0xf1, 0x1d, 0x3b, 0x4c, 0x31, 0xcf, 0x8d, 0x9f, 0xae, 0xec, 0xd8, 0x5d, 0xb6, 0xfe,
	0xfb, 0x9e, 0xb3, 0xad, 0xa7, 0xb9, 0x86, 0x9e, 0xe7, 0x1a, 0x7a, 0x99, 0x6b, 0xe8, 0xf1, 0x55,
	0xfb, 0xd7, 0x45, 0xc3, 0xa2, 0xeb, 0xd5, 0x24, 0x6c, 0xff, 0x2d, 0x00, 0x00, 0xff, 0xff, 0xf7,
	0xc1, 0x97, 0xca, 0xfd, 0x02, 0x00, 0x00,
}
