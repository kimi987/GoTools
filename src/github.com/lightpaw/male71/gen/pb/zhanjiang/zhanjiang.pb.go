// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/gen/pb/zhanjiang/zhanjiang.proto
// DO NOT EDIT!

/*
	Package zhanjiang is a generated protocol buffer package.

	It is generated from these files:
		github.com/lightpaw/male7/gen/pb/zhanjiang/zhanjiang.proto

	It has these top-level messages:
		C2SOpenProto
		S2COpenProto
		C2SUpdateCaptainProto
		S2CUpdateCaptainProto
		C2SChallengeProto
		S2CChallengeProto
		S2CPassProto
		S2CUpdateOpenTimesProto
*/
package zhanjiang

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type C2SOpenProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SOpenProto) Reset()                    { *m = C2SOpenProto{} }
func (m *C2SOpenProto) String() string            { return proto.CompactTextString(m) }
func (*C2SOpenProto) ProtoMessage()               {}
func (*C2SOpenProto) Descriptor() ([]byte, []int) { return fileDescriptorZhanjiang, []int{0} }

func (m *C2SOpenProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type S2COpenProto struct {
	Id        int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CaptainId int32 `protobuf:"varint,2,opt,name=captain_id,json=captainId,proto3" json:"captain_id,omitempty"`
}

func (m *S2COpenProto) Reset()                    { *m = S2COpenProto{} }
func (m *S2COpenProto) String() string            { return proto.CompactTextString(m) }
func (*S2COpenProto) ProtoMessage()               {}
func (*S2COpenProto) Descriptor() ([]byte, []int) { return fileDescriptorZhanjiang, []int{1} }

func (m *S2COpenProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *S2COpenProto) GetCaptainId() int32 {
	if m != nil {
		return m.CaptainId
	}
	return 0
}

type C2SUpdateCaptainProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SUpdateCaptainProto) Reset()                    { *m = C2SUpdateCaptainProto{} }
func (m *C2SUpdateCaptainProto) String() string            { return proto.CompactTextString(m) }
func (*C2SUpdateCaptainProto) ProtoMessage()               {}
func (*C2SUpdateCaptainProto) Descriptor() ([]byte, []int) { return fileDescriptorZhanjiang, []int{2} }

func (m *C2SUpdateCaptainProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type S2CUpdateCaptainProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *S2CUpdateCaptainProto) Reset()                    { *m = S2CUpdateCaptainProto{} }
func (m *S2CUpdateCaptainProto) String() string            { return proto.CompactTextString(m) }
func (*S2CUpdateCaptainProto) ProtoMessage()               {}
func (*S2CUpdateCaptainProto) Descriptor() ([]byte, []int) { return fileDescriptorZhanjiang, []int{3} }

func (m *S2CUpdateCaptainProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type C2SChallengeProto struct {
	PassCount int32 `protobuf:"varint,1,opt,name=pass_count,json=passCount,proto3" json:"pass_count,omitempty"`
}

func (m *C2SChallengeProto) Reset()                    { *m = C2SChallengeProto{} }
func (m *C2SChallengeProto) String() string            { return proto.CompactTextString(m) }
func (*C2SChallengeProto) ProtoMessage()               {}
func (*C2SChallengeProto) Descriptor() ([]byte, []int) { return fileDescriptorZhanjiang, []int{4} }

func (m *C2SChallengeProto) GetPassCount() int32 {
	if m != nil {
		return m.PassCount
	}
	return 0
}

type S2CChallengeProto struct {
	Pass            bool   `protobuf:"varint,1,opt,name=pass,proto3" json:"pass,omitempty"`
	Link            string `protobuf:"bytes,2,opt,name=link,proto3" json:"link,omitempty"`
	Share           []byte `protobuf:"bytes,3,opt,name=share,proto3" json:"share,omitempty"`
	ZhanJiangDataId int32  `protobuf:"varint,4,opt,name=zhan_jiang_data_id,json=zhanJiangDataId,proto3" json:"zhan_jiang_data_id,omitempty"`
}

func (m *S2CChallengeProto) Reset()                    { *m = S2CChallengeProto{} }
func (m *S2CChallengeProto) String() string            { return proto.CompactTextString(m) }
func (*S2CChallengeProto) ProtoMessage()               {}
func (*S2CChallengeProto) Descriptor() ([]byte, []int) { return fileDescriptorZhanjiang, []int{5} }

func (m *S2CChallengeProto) GetPass() bool {
	if m != nil {
		return m.Pass
	}
	return false
}

func (m *S2CChallengeProto) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *S2CChallengeProto) GetShare() []byte {
	if m != nil {
		return m.Share
	}
	return nil
}

func (m *S2CChallengeProto) GetZhanJiangDataId() int32 {
	if m != nil {
		return m.ZhanJiangDataId
	}
	return 0
}

type S2CPassProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *S2CPassProto) Reset()                    { *m = S2CPassProto{} }
func (m *S2CPassProto) String() string            { return proto.CompactTextString(m) }
func (*S2CPassProto) ProtoMessage()               {}
func (*S2CPassProto) Descriptor() ([]byte, []int) { return fileDescriptorZhanjiang, []int{6} }

func (m *S2CPassProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type S2CUpdateOpenTimesProto struct {
	OpenTimes int32 `protobuf:"varint,1,opt,name=open_times,json=openTimes,proto3" json:"open_times,omitempty"`
}

func (m *S2CUpdateOpenTimesProto) Reset()                    { *m = S2CUpdateOpenTimesProto{} }
func (m *S2CUpdateOpenTimesProto) String() string            { return proto.CompactTextString(m) }
func (*S2CUpdateOpenTimesProto) ProtoMessage()               {}
func (*S2CUpdateOpenTimesProto) Descriptor() ([]byte, []int) { return fileDescriptorZhanjiang, []int{7} }

func (m *S2CUpdateOpenTimesProto) GetOpenTimes() int32 {
	if m != nil {
		return m.OpenTimes
	}
	return 0
}

func init() {
	proto.RegisterType((*C2SOpenProto)(nil), "proto.C2SOpenProto")
	proto.RegisterType((*S2COpenProto)(nil), "proto.S2COpenProto")
	proto.RegisterType((*C2SUpdateCaptainProto)(nil), "proto.C2SUpdateCaptainProto")
	proto.RegisterType((*S2CUpdateCaptainProto)(nil), "proto.S2CUpdateCaptainProto")
	proto.RegisterType((*C2SChallengeProto)(nil), "proto.C2SChallengeProto")
	proto.RegisterType((*S2CChallengeProto)(nil), "proto.S2CChallengeProto")
	proto.RegisterType((*S2CPassProto)(nil), "proto.S2CPassProto")
	proto.RegisterType((*S2CUpdateOpenTimesProto)(nil), "proto.S2CUpdateOpenTimesProto")
}
func (m *C2SOpenProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SOpenProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintZhanjiang(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *S2COpenProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2COpenProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintZhanjiang(dAtA, i, uint64(m.Id))
	}
	if m.CaptainId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintZhanjiang(dAtA, i, uint64(m.CaptainId))
	}
	return i, nil
}

func (m *C2SUpdateCaptainProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SUpdateCaptainProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintZhanjiang(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *S2CUpdateCaptainProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateCaptainProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintZhanjiang(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *C2SChallengeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SChallengeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PassCount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintZhanjiang(dAtA, i, uint64(m.PassCount))
	}
	return i, nil
}

func (m *S2CChallengeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CChallengeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Pass {
		dAtA[i] = 0x8
		i++
		if m.Pass {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Link) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintZhanjiang(dAtA, i, uint64(len(m.Link)))
		i += copy(dAtA[i:], m.Link)
	}
	if len(m.Share) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintZhanjiang(dAtA, i, uint64(len(m.Share)))
		i += copy(dAtA[i:], m.Share)
	}
	if m.ZhanJiangDataId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintZhanjiang(dAtA, i, uint64(m.ZhanJiangDataId))
	}
	return i, nil
}

func (m *S2CPassProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CPassProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintZhanjiang(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *S2CUpdateOpenTimesProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateOpenTimesProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OpenTimes != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintZhanjiang(dAtA, i, uint64(m.OpenTimes))
	}
	return i, nil
}

func encodeFixed64Zhanjiang(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Zhanjiang(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintZhanjiang(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *C2SOpenProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovZhanjiang(uint64(m.Id))
	}
	return n
}

func (m *S2COpenProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovZhanjiang(uint64(m.Id))
	}
	if m.CaptainId != 0 {
		n += 1 + sovZhanjiang(uint64(m.CaptainId))
	}
	return n
}

func (m *C2SUpdateCaptainProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovZhanjiang(uint64(m.Id))
	}
	return n
}

func (m *S2CUpdateCaptainProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovZhanjiang(uint64(m.Id))
	}
	return n
}

func (m *C2SChallengeProto) Size() (n int) {
	var l int
	_ = l
	if m.PassCount != 0 {
		n += 1 + sovZhanjiang(uint64(m.PassCount))
	}
	return n
}

func (m *S2CChallengeProto) Size() (n int) {
	var l int
	_ = l
	if m.Pass {
		n += 2
	}
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovZhanjiang(uint64(l))
	}
	l = len(m.Share)
	if l > 0 {
		n += 1 + l + sovZhanjiang(uint64(l))
	}
	if m.ZhanJiangDataId != 0 {
		n += 1 + sovZhanjiang(uint64(m.ZhanJiangDataId))
	}
	return n
}

func (m *S2CPassProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovZhanjiang(uint64(m.Id))
	}
	return n
}

func (m *S2CUpdateOpenTimesProto) Size() (n int) {
	var l int
	_ = l
	if m.OpenTimes != 0 {
		n += 1 + sovZhanjiang(uint64(m.OpenTimes))
	}
	return n
}

func sovZhanjiang(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozZhanjiang(x uint64) (n int) {
	return sovZhanjiang(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *C2SOpenProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZhanjiang
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SOpenProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SOpenProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhanjiang
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZhanjiang(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZhanjiang
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2COpenProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZhanjiang
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2COpenProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2COpenProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhanjiang
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainId", wireType)
			}
			m.CaptainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhanjiang
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZhanjiang(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZhanjiang
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SUpdateCaptainProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZhanjiang
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SUpdateCaptainProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SUpdateCaptainProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhanjiang
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZhanjiang(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZhanjiang
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateCaptainProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZhanjiang
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateCaptainProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateCaptainProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhanjiang
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZhanjiang(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZhanjiang
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SChallengeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZhanjiang
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SChallengeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SChallengeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassCount", wireType)
			}
			m.PassCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhanjiang
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PassCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZhanjiang(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZhanjiang
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CChallengeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZhanjiang
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CChallengeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CChallengeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pass", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhanjiang
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Pass = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhanjiang
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZhanjiang
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Share", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhanjiang
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZhanjiang
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Share = append(m.Share[:0], dAtA[iNdEx:postIndex]...)
			if m.Share == nil {
				m.Share = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZhanJiangDataId", wireType)
			}
			m.ZhanJiangDataId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhanjiang
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ZhanJiangDataId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZhanjiang(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZhanjiang
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CPassProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZhanjiang
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CPassProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CPassProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhanjiang
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZhanjiang(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZhanjiang
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateOpenTimesProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZhanjiang
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateOpenTimesProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateOpenTimesProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenTimes", wireType)
			}
			m.OpenTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhanjiang
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpenTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZhanjiang(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZhanjiang
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipZhanjiang(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowZhanjiang
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZhanjiang
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZhanjiang
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthZhanjiang
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowZhanjiang
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipZhanjiang(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthZhanjiang = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowZhanjiang   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/gen/pb/zhanjiang/zhanjiang.proto", fileDescriptorZhanjiang)
}

var fileDescriptorZhanjiang = []byte{
	// 348 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xcf, 0x4a, 0xeb, 0x40,
	0x14, 0xc6, 0x6f, 0x7a, 0xdb, 0xcb, 0xcd, 0xa1, 0xdc, 0x4b, 0x83, 0xc5, 0x6e, 0x1a, 0x4a, 0x36,
	0x2d, 0x08, 0x0d, 0x8c, 0x0b, 0x45, 0x70, 0xe3, 0xb8, 0xb0, 0x6e, 0x2c, 0x19, 0xdd, 0xb8, 0x09,
	0xa7, 0x9d, 0x21, 0x19, 0x4d, 0x27, 0x43, 0x33, 0x45, 0x70, 0xe1, 0x73, 0xf8, 0x48, 0x2e, 0x7d,
	0x04, 0xa9, 0x2f, 0x22, 0x33, 0xfd, 0x23, 0x48, 0x05, 0x57, 0x39, 0xf9, 0x7d, 0xdf, 0x70, 0xf8,
	0xbe, 0x03, 0x27, 0x99, 0x34, 0xf9, 0x62, 0x32, 0x9c, 0x96, 0xb3, 0xb8, 0x90, 0x59, 0x6e, 0x34,
	0x3e, 0xc4, 0x33, 0x2c, 0xc4, 0x51, 0x9c, 0x09, 0x15, 0xeb, 0x49, 0xfc, 0x98, 0xa3, 0xba, 0x93,
	0xa8, 0xb2, 0xcf, 0x69, 0xa8, 0xe7, 0xa5, 0x29, 0x83, 0x86, 0xfb, 0x44, 0x21, 0x34, 0x29, 0x61,
	0x57, 0x5a, 0xa8, 0xb1, 0xc3, 0xff, 0xa0, 0x26, 0x79, 0xc7, 0xeb, 0x79, 0x83, 0x46, 0x52, 0x93,
	0x3c, 0x3a, 0x85, 0x26, 0x23, 0xf4, 0x5b, 0x3d, 0xe8, 0x02, 0x4c, 0x51, 0x1b, 0x94, 0x2a, 0x95,
	0xbc, 0x53, 0x73, 0xdc, 0x5f, 0x93, 0x11, 0x8f, 0xfa, 0xd0, 0xa6, 0x84, 0xdd, 0x68, 0x8e, 0x46,
	0xd0, 0x15, 0xdd, 0xbd, 0xa7, 0x0f, 0x6d, 0x46, 0xe8, 0x0f, 0x8c, 0x04, 0x5a, 0x94, 0x30, 0x9a,
	0x63, 0x51, 0x08, 0x95, 0x89, 0x95, 0xa9, 0x0b, 0xa0, 0xb1, 0xaa, 0xd2, 0x69, 0xb9, 0x50, 0x66,
	0x6d, 0xf6, 0x2d, 0xa1, 0x16, 0x44, 0x4f, 0xd0, 0x62, 0x84, 0x7e, 0x79, 0x13, 0x40, 0xdd, 0x3a,
	0x9c, 0xfb, 0x6f, 0xe2, 0x66, 0xcb, 0x0a, 0xa9, 0xee, 0x5d, 0x0e, 0x3f, 0x71, 0x73, 0xb0, 0x07,
	0x8d, 0x2a, 0xc7, 0xb9, 0xe8, 0xfc, 0xee, 0x79, 0x83, 0x66, 0xb2, 0xfa, 0x09, 0x0e, 0x20, 0xb0,
	0x8d, 0xa6, 0xae, 0xd2, 0x94, 0xa3, 0x41, 0x9b, 0xbf, 0xee, 0x36, 0xff, 0xb7, 0xca, 0xa5, 0x15,
	0xce, 0xd1, 0xe0, 0x88, 0xdb, 0x92, 0x19, 0xa1, 0x63, 0xac, 0xaa, 0xdd, 0x99, 0x8e, 0x61, 0x7f,
	0x1b, 0xde, 0x56, 0x7d, 0x2d, 0x67, 0xa2, 0xda, 0x26, 0x2b, 0xb5, 0x50, 0xa9, 0xb1, 0x68, 0x93,
	0xac, 0xdc, 0x78, 0xce, 0xba, 0x2f, 0xcb, 0xd0, 0x7b, 0x5d, 0x86, 0xde, 0xdb, 0x32, 0xf4, 0x9e,
	0xdf, 0xc3, 0x5f, 0x17, 0xde, 0xad, 0xbf, 0x3d, 0xf5, 0xe4, 0x8f, 0x3b, 0xf2, 0xe1, 0x47, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x88, 0xe6, 0x74, 0x10, 0x29, 0x02, 0x00, 0x00,
}
