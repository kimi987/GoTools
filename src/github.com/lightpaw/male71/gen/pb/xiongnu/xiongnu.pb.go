// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/gen/pb/xiongnu/xiongnu.proto
// DO NOT EDIT!

/*
	Package xiongnu is a generated protocol buffer package.

	It is generated from these files:
		github.com/lightpaw/male7/gen/pb/xiongnu/xiongnu.proto

	It has these top-level messages:
		C2SSetDefenderProto
		S2CSetDefenderProto
		S2CBroacastSetDefenderProto
		C2SStartProto
		S2CStartProto
		S2CBroadcastStartProto
		S2CInfoBroadcastProto
		S2CTroopInfoProto
		S2CEndBroadcastProto
		C2SGetXiongNuNpcBaseInfoProto
		S2CGetXiongNuNpcBaseInfoProto
		C2SGetDefenserFightAmountProto
		S2CGetDefenserFightAmountProto
		S2CGetXiongNuFightInfoProto
*/
package xiongnu

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type C2SSetDefenderProto struct {
	Id    []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ToSet bool   `protobuf:"varint,2,opt,name=to_set,json=toSet,proto3" json:"to_set,omitempty"`
}

func (m *C2SSetDefenderProto) Reset()                    { *m = C2SSetDefenderProto{} }
func (m *C2SSetDefenderProto) String() string            { return proto.CompactTextString(m) }
func (*C2SSetDefenderProto) ProtoMessage()               {}
func (*C2SSetDefenderProto) Descriptor() ([]byte, []int) { return fileDescriptorXiongnu, []int{0} }

func (m *C2SSetDefenderProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *C2SSetDefenderProto) GetToSet() bool {
	if m != nil {
		return m.ToSet
	}
	return false
}

type S2CSetDefenderProto struct {
	Id    []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ToSet bool   `protobuf:"varint,2,opt,name=to_set,json=toSet,proto3" json:"to_set,omitempty"`
}

func (m *S2CSetDefenderProto) Reset()                    { *m = S2CSetDefenderProto{} }
func (m *S2CSetDefenderProto) String() string            { return proto.CompactTextString(m) }
func (*S2CSetDefenderProto) ProtoMessage()               {}
func (*S2CSetDefenderProto) Descriptor() ([]byte, []int) { return fileDescriptorXiongnu, []int{1} }

func (m *S2CSetDefenderProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *S2CSetDefenderProto) GetToSet() bool {
	if m != nil {
		return m.ToSet
	}
	return false
}

type S2CBroacastSetDefenderProto struct {
	Id    []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ToSet bool   `protobuf:"varint,2,opt,name=to_set,json=toSet,proto3" json:"to_set,omitempty"`
}

func (m *S2CBroacastSetDefenderProto) Reset()         { *m = S2CBroacastSetDefenderProto{} }
func (m *S2CBroacastSetDefenderProto) String() string { return proto.CompactTextString(m) }
func (*S2CBroacastSetDefenderProto) ProtoMessage()    {}
func (*S2CBroacastSetDefenderProto) Descriptor() ([]byte, []int) {
	return fileDescriptorXiongnu, []int{2}
}

func (m *S2CBroacastSetDefenderProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *S2CBroacastSetDefenderProto) GetToSet() bool {
	if m != nil {
		return m.ToSet
	}
	return false
}

type C2SStartProto struct {
	Level int32 `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
}

func (m *C2SStartProto) Reset()                    { *m = C2SStartProto{} }
func (m *C2SStartProto) String() string            { return proto.CompactTextString(m) }
func (*C2SStartProto) ProtoMessage()               {}
func (*C2SStartProto) Descriptor() ([]byte, []int) { return fileDescriptorXiongnu, []int{3} }

func (m *C2SStartProto) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

type S2CStartProto struct {
	BaseId int32 `protobuf:"varint,1,opt,name=base_id,json=baseId,proto3" json:"base_id,omitempty"`
	BaseX  int32 `protobuf:"varint,2,opt,name=base_x,json=baseX,proto3" json:"base_x,omitempty"`
	BaseY  int32 `protobuf:"varint,3,opt,name=base_y,json=baseY,proto3" json:"base_y,omitempty"`
}

func (m *S2CStartProto) Reset()                    { *m = S2CStartProto{} }
func (m *S2CStartProto) String() string            { return proto.CompactTextString(m) }
func (*S2CStartProto) ProtoMessage()               {}
func (*S2CStartProto) Descriptor() ([]byte, []int) { return fileDescriptorXiongnu, []int{4} }

func (m *S2CStartProto) GetBaseId() int32 {
	if m != nil {
		return m.BaseId
	}
	return 0
}

func (m *S2CStartProto) GetBaseX() int32 {
	if m != nil {
		return m.BaseX
	}
	return 0
}

func (m *S2CStartProto) GetBaseY() int32 {
	if m != nil {
		return m.BaseY
	}
	return 0
}

type S2CBroadcastStartProto struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *S2CBroadcastStartProto) Reset()                    { *m = S2CBroadcastStartProto{} }
func (m *S2CBroadcastStartProto) String() string            { return proto.CompactTextString(m) }
func (*S2CBroadcastStartProto) ProtoMessage()               {}
func (*S2CBroadcastStartProto) Descriptor() ([]byte, []int) { return fileDescriptorXiongnu, []int{5} }

func (m *S2CBroadcastStartProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type S2CInfoBroadcastProto struct {
	Info []byte `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *S2CInfoBroadcastProto) Reset()                    { *m = S2CInfoBroadcastProto{} }
func (m *S2CInfoBroadcastProto) String() string            { return proto.CompactTextString(m) }
func (*S2CInfoBroadcastProto) ProtoMessage()               {}
func (*S2CInfoBroadcastProto) Descriptor() ([]byte, []int) { return fileDescriptorXiongnu, []int{6} }

func (m *S2CInfoBroadcastProto) GetInfo() []byte {
	if m != nil {
		return m.Info
	}
	return nil
}

type S2CTroopInfoProto struct {
	BaseTroops []byte `protobuf:"bytes,1,opt,name=baseTroops,proto3" json:"baseTroops,omitempty"`
	Morale     int32  `protobuf:"varint,2,opt,name=morale,proto3" json:"morale,omitempty"`
}

func (m *S2CTroopInfoProto) Reset()                    { *m = S2CTroopInfoProto{} }
func (m *S2CTroopInfoProto) String() string            { return proto.CompactTextString(m) }
func (*S2CTroopInfoProto) ProtoMessage()               {}
func (*S2CTroopInfoProto) Descriptor() ([]byte, []int) { return fileDescriptorXiongnu, []int{7} }

func (m *S2CTroopInfoProto) GetBaseTroops() []byte {
	if m != nil {
		return m.BaseTroops
	}
	return nil
}

func (m *S2CTroopInfoProto) GetMorale() int32 {
	if m != nil {
		return m.Morale
	}
	return 0
}

type S2CEndBroadcastProto struct {
	GuildId         int32  `protobuf:"varint,6,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	ResistXiongNu   []byte `protobuf:"bytes,7,opt,name=resist_xiong_nu,json=resistXiongNu,proto3" json:"resist_xiong_nu,omitempty"`
	UnlockNextLevel bool   `protobuf:"varint,4,opt,name=unlock_next_level,json=unlockNextLevel,proto3" json:"unlock_next_level,omitempty"`
	AddPrestige     int32  `protobuf:"varint,5,opt,name=add_prestige,json=addPrestige,proto3" json:"add_prestige,omitempty"`
}

func (m *S2CEndBroadcastProto) Reset()                    { *m = S2CEndBroadcastProto{} }
func (m *S2CEndBroadcastProto) String() string            { return proto.CompactTextString(m) }
func (*S2CEndBroadcastProto) ProtoMessage()               {}
func (*S2CEndBroadcastProto) Descriptor() ([]byte, []int) { return fileDescriptorXiongnu, []int{8} }

func (m *S2CEndBroadcastProto) GetGuildId() int32 {
	if m != nil {
		return m.GuildId
	}
	return 0
}

func (m *S2CEndBroadcastProto) GetResistXiongNu() []byte {
	if m != nil {
		return m.ResistXiongNu
	}
	return nil
}

func (m *S2CEndBroadcastProto) GetUnlockNextLevel() bool {
	if m != nil {
		return m.UnlockNextLevel
	}
	return false
}

func (m *S2CEndBroadcastProto) GetAddPrestige() int32 {
	if m != nil {
		return m.AddPrestige
	}
	return 0
}

type C2SGetXiongNuNpcBaseInfoProto struct {
	GuildId int32 `protobuf:"varint,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
}

func (m *C2SGetXiongNuNpcBaseInfoProto) Reset()         { *m = C2SGetXiongNuNpcBaseInfoProto{} }
func (m *C2SGetXiongNuNpcBaseInfoProto) String() string { return proto.CompactTextString(m) }
func (*C2SGetXiongNuNpcBaseInfoProto) ProtoMessage()    {}
func (*C2SGetXiongNuNpcBaseInfoProto) Descriptor() ([]byte, []int) {
	return fileDescriptorXiongnu, []int{9}
}

func (m *C2SGetXiongNuNpcBaseInfoProto) GetGuildId() int32 {
	if m != nil {
		return m.GuildId
	}
	return 0
}

type S2CGetXiongNuNpcBaseInfoProto struct {
	GuildId        int32  `protobuf:"varint,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	GuildName      string `protobuf:"bytes,2,opt,name=guild_name,json=guildName,proto3" json:"guild_name,omitempty"`
	GuildFlag      string `protobuf:"bytes,3,opt,name=guild_flag,json=guildFlag,proto3" json:"guild_flag,omitempty"`
	Morale         int32  `protobuf:"varint,4,opt,name=morale,proto3" json:"morale,omitempty"`
	StartTime      int32  `protobuf:"varint,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	FightingAmount int32  `protobuf:"varint,6,opt,name=fighting_amount,json=fightingAmount,proto3" json:"fighting_amount,omitempty"`
}

func (m *S2CGetXiongNuNpcBaseInfoProto) Reset()         { *m = S2CGetXiongNuNpcBaseInfoProto{} }
func (m *S2CGetXiongNuNpcBaseInfoProto) String() string { return proto.CompactTextString(m) }
func (*S2CGetXiongNuNpcBaseInfoProto) ProtoMessage()    {}
func (*S2CGetXiongNuNpcBaseInfoProto) Descriptor() ([]byte, []int) {
	return fileDescriptorXiongnu, []int{10}
}

func (m *S2CGetXiongNuNpcBaseInfoProto) GetGuildId() int32 {
	if m != nil {
		return m.GuildId
	}
	return 0
}

func (m *S2CGetXiongNuNpcBaseInfoProto) GetGuildName() string {
	if m != nil {
		return m.GuildName
	}
	return ""
}

func (m *S2CGetXiongNuNpcBaseInfoProto) GetGuildFlag() string {
	if m != nil {
		return m.GuildFlag
	}
	return ""
}

func (m *S2CGetXiongNuNpcBaseInfoProto) GetMorale() int32 {
	if m != nil {
		return m.Morale
	}
	return 0
}

func (m *S2CGetXiongNuNpcBaseInfoProto) GetStartTime() int32 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *S2CGetXiongNuNpcBaseInfoProto) GetFightingAmount() int32 {
	if m != nil {
		return m.FightingAmount
	}
	return 0
}

type C2SGetDefenserFightAmountProto struct {
	Version int32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *C2SGetDefenserFightAmountProto) Reset()         { *m = C2SGetDefenserFightAmountProto{} }
func (m *C2SGetDefenserFightAmountProto) String() string { return proto.CompactTextString(m) }
func (*C2SGetDefenserFightAmountProto) ProtoMessage()    {}
func (*C2SGetDefenserFightAmountProto) Descriptor() ([]byte, []int) {
	return fileDescriptorXiongnu, []int{11}
}

func (m *C2SGetDefenserFightAmountProto) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type S2CGetDefenserFightAmountProto struct {
	Version             int32    `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	DefenserId          [][]byte `protobuf:"bytes,2,rep,name=defenser_id,json=defenserId" json:"defenser_id,omitempty"`
	DefenserFightAmount []int32  `protobuf:"varint,3,rep,name=defenser_fight_amount,json=defenserFightAmount" json:"defenser_fight_amount,omitempty"`
	DefenserEnemyCount  []int32  `protobuf:"varint,4,rep,name=defenser_enemy_count,json=defenserEnemyCount" json:"defenser_enemy_count,omitempty"`
}

func (m *S2CGetDefenserFightAmountProto) Reset()         { *m = S2CGetDefenserFightAmountProto{} }
func (m *S2CGetDefenserFightAmountProto) String() string { return proto.CompactTextString(m) }
func (*S2CGetDefenserFightAmountProto) ProtoMessage()    {}
func (*S2CGetDefenserFightAmountProto) Descriptor() ([]byte, []int) {
	return fileDescriptorXiongnu, []int{12}
}

func (m *S2CGetDefenserFightAmountProto) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *S2CGetDefenserFightAmountProto) GetDefenserId() [][]byte {
	if m != nil {
		return m.DefenserId
	}
	return nil
}

func (m *S2CGetDefenserFightAmountProto) GetDefenserFightAmount() []int32 {
	if m != nil {
		return m.DefenserFightAmount
	}
	return nil
}

func (m *S2CGetDefenserFightAmountProto) GetDefenserEnemyCount() []int32 {
	if m != nil {
		return m.DefenserEnemyCount
	}
	return nil
}

type S2CGetXiongNuFightInfoProto struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *S2CGetXiongNuFightInfoProto) Reset()         { *m = S2CGetXiongNuFightInfoProto{} }
func (m *S2CGetXiongNuFightInfoProto) String() string { return proto.CompactTextString(m) }
func (*S2CGetXiongNuFightInfoProto) ProtoMessage()    {}
func (*S2CGetXiongNuFightInfoProto) Descriptor() ([]byte, []int) {
	return fileDescriptorXiongnu, []int{13}
}

func (m *S2CGetXiongNuFightInfoProto) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*C2SSetDefenderProto)(nil), "proto.C2SSetDefenderProto")
	proto.RegisterType((*S2CSetDefenderProto)(nil), "proto.S2CSetDefenderProto")
	proto.RegisterType((*S2CBroacastSetDefenderProto)(nil), "proto.S2CBroacastSetDefenderProto")
	proto.RegisterType((*C2SStartProto)(nil), "proto.C2SStartProto")
	proto.RegisterType((*S2CStartProto)(nil), "proto.S2CStartProto")
	proto.RegisterType((*S2CBroadcastStartProto)(nil), "proto.S2CBroadcastStartProto")
	proto.RegisterType((*S2CInfoBroadcastProto)(nil), "proto.S2CInfoBroadcastProto")
	proto.RegisterType((*S2CTroopInfoProto)(nil), "proto.S2CTroopInfoProto")
	proto.RegisterType((*S2CEndBroadcastProto)(nil), "proto.S2CEndBroadcastProto")
	proto.RegisterType((*C2SGetXiongNuNpcBaseInfoProto)(nil), "proto.C2SGetXiongNuNpcBaseInfoProto")
	proto.RegisterType((*S2CGetXiongNuNpcBaseInfoProto)(nil), "proto.S2CGetXiongNuNpcBaseInfoProto")
	proto.RegisterType((*C2SGetDefenserFightAmountProto)(nil), "proto.C2SGetDefenserFightAmountProto")
	proto.RegisterType((*S2CGetDefenserFightAmountProto)(nil), "proto.S2CGetDefenserFightAmountProto")
	proto.RegisterType((*S2CGetXiongNuFightInfoProto)(nil), "proto.S2CGetXiongNuFightInfoProto")
}
func (m *C2SSetDefenderProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SSetDefenderProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.ToSet {
		dAtA[i] = 0x10
		i++
		if m.ToSet {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CSetDefenderProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSetDefenderProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.ToSet {
		dAtA[i] = 0x10
		i++
		if m.ToSet {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CBroacastSetDefenderProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CBroacastSetDefenderProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.ToSet {
		dAtA[i] = 0x10
		i++
		if m.ToSet {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *C2SStartProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SStartProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Level != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(m.Level))
	}
	return i, nil
}

func (m *S2CStartProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CStartProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BaseId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(m.BaseId))
	}
	if m.BaseX != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(m.BaseX))
	}
	if m.BaseY != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(m.BaseY))
	}
	return i, nil
}

func (m *S2CBroadcastStartProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CBroadcastStartProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *S2CInfoBroadcastProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CInfoBroadcastProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Info) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(len(m.Info)))
		i += copy(dAtA[i:], m.Info)
	}
	return i, nil
}

func (m *S2CTroopInfoProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CTroopInfoProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BaseTroops) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(len(m.BaseTroops)))
		i += copy(dAtA[i:], m.BaseTroops)
	}
	if m.Morale != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(m.Morale))
	}
	return i, nil
}

func (m *S2CEndBroadcastProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CEndBroadcastProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UnlockNextLevel {
		dAtA[i] = 0x20
		i++
		if m.UnlockNextLevel {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.AddPrestige != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(m.AddPrestige))
	}
	if m.GuildId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(m.GuildId))
	}
	if len(m.ResistXiongNu) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(len(m.ResistXiongNu)))
		i += copy(dAtA[i:], m.ResistXiongNu)
	}
	return i, nil
}

func (m *C2SGetXiongNuNpcBaseInfoProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SGetXiongNuNpcBaseInfoProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GuildId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(m.GuildId))
	}
	return i, nil
}

func (m *S2CGetXiongNuNpcBaseInfoProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CGetXiongNuNpcBaseInfoProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GuildId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(m.GuildId))
	}
	if len(m.GuildName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(len(m.GuildName)))
		i += copy(dAtA[i:], m.GuildName)
	}
	if len(m.GuildFlag) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(len(m.GuildFlag)))
		i += copy(dAtA[i:], m.GuildFlag)
	}
	if m.Morale != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(m.Morale))
	}
	if m.StartTime != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(m.StartTime))
	}
	if m.FightingAmount != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(m.FightingAmount))
	}
	return i, nil
}

func (m *C2SGetDefenserFightAmountProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SGetDefenserFightAmountProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(m.Version))
	}
	return i, nil
}

func (m *S2CGetDefenserFightAmountProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CGetDefenserFightAmountProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(m.Version))
	}
	if len(m.DefenserId) > 0 {
		for _, b := range m.DefenserId {
			dAtA[i] = 0x12
			i++
			i = encodeVarintXiongnu(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.DefenserFightAmount) > 0 {
		for _, num := range m.DefenserFightAmount {
			dAtA[i] = 0x18
			i++
			i = encodeVarintXiongnu(dAtA, i, uint64(num))
		}
	}
	if len(m.DefenserEnemyCount) > 0 {
		for _, num := range m.DefenserEnemyCount {
			dAtA[i] = 0x20
			i++
			i = encodeVarintXiongnu(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *S2CGetXiongNuFightInfoProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CGetXiongNuFightInfoProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func encodeFixed64Xiongnu(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Xiongnu(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintXiongnu(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *C2SSetDefenderProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovXiongnu(uint64(l))
	}
	if m.ToSet {
		n += 2
	}
	return n
}

func (m *S2CSetDefenderProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovXiongnu(uint64(l))
	}
	if m.ToSet {
		n += 2
	}
	return n
}

func (m *S2CBroacastSetDefenderProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovXiongnu(uint64(l))
	}
	if m.ToSet {
		n += 2
	}
	return n
}

func (m *C2SStartProto) Size() (n int) {
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovXiongnu(uint64(m.Level))
	}
	return n
}

func (m *S2CStartProto) Size() (n int) {
	var l int
	_ = l
	if m.BaseId != 0 {
		n += 1 + sovXiongnu(uint64(m.BaseId))
	}
	if m.BaseX != 0 {
		n += 1 + sovXiongnu(uint64(m.BaseX))
	}
	if m.BaseY != 0 {
		n += 1 + sovXiongnu(uint64(m.BaseY))
	}
	return n
}

func (m *S2CBroadcastStartProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovXiongnu(uint64(l))
	}
	return n
}

func (m *S2CInfoBroadcastProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Info)
	if l > 0 {
		n += 1 + l + sovXiongnu(uint64(l))
	}
	return n
}

func (m *S2CTroopInfoProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.BaseTroops)
	if l > 0 {
		n += 1 + l + sovXiongnu(uint64(l))
	}
	if m.Morale != 0 {
		n += 1 + sovXiongnu(uint64(m.Morale))
	}
	return n
}

func (m *S2CEndBroadcastProto) Size() (n int) {
	var l int
	_ = l
	if m.UnlockNextLevel {
		n += 2
	}
	if m.AddPrestige != 0 {
		n += 1 + sovXiongnu(uint64(m.AddPrestige))
	}
	if m.GuildId != 0 {
		n += 1 + sovXiongnu(uint64(m.GuildId))
	}
	l = len(m.ResistXiongNu)
	if l > 0 {
		n += 1 + l + sovXiongnu(uint64(l))
	}
	return n
}

func (m *C2SGetXiongNuNpcBaseInfoProto) Size() (n int) {
	var l int
	_ = l
	if m.GuildId != 0 {
		n += 1 + sovXiongnu(uint64(m.GuildId))
	}
	return n
}

func (m *S2CGetXiongNuNpcBaseInfoProto) Size() (n int) {
	var l int
	_ = l
	if m.GuildId != 0 {
		n += 1 + sovXiongnu(uint64(m.GuildId))
	}
	l = len(m.GuildName)
	if l > 0 {
		n += 1 + l + sovXiongnu(uint64(l))
	}
	l = len(m.GuildFlag)
	if l > 0 {
		n += 1 + l + sovXiongnu(uint64(l))
	}
	if m.Morale != 0 {
		n += 1 + sovXiongnu(uint64(m.Morale))
	}
	if m.StartTime != 0 {
		n += 1 + sovXiongnu(uint64(m.StartTime))
	}
	if m.FightingAmount != 0 {
		n += 1 + sovXiongnu(uint64(m.FightingAmount))
	}
	return n
}

func (m *C2SGetDefenserFightAmountProto) Size() (n int) {
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovXiongnu(uint64(m.Version))
	}
	return n
}

func (m *S2CGetDefenserFightAmountProto) Size() (n int) {
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovXiongnu(uint64(m.Version))
	}
	if len(m.DefenserId) > 0 {
		for _, b := range m.DefenserId {
			l = len(b)
			n += 1 + l + sovXiongnu(uint64(l))
		}
	}
	if len(m.DefenserFightAmount) > 0 {
		for _, e := range m.DefenserFightAmount {
			n += 1 + sovXiongnu(uint64(e))
		}
	}
	if len(m.DefenserEnemyCount) > 0 {
		for _, e := range m.DefenserEnemyCount {
			n += 1 + sovXiongnu(uint64(e))
		}
	}
	return n
}

func (m *S2CGetXiongNuFightInfoProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovXiongnu(uint64(l))
	}
	return n
}

func sovXiongnu(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozXiongnu(x uint64) (n int) {
	return sovXiongnu(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *C2SSetDefenderProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXiongnu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SSetDefenderProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SSetDefenderProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthXiongnu
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToSet", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ToSet = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipXiongnu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXiongnu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSetDefenderProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXiongnu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSetDefenderProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSetDefenderProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthXiongnu
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToSet", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ToSet = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipXiongnu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXiongnu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CBroacastSetDefenderProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXiongnu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CBroacastSetDefenderProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CBroacastSetDefenderProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthXiongnu
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToSet", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ToSet = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipXiongnu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXiongnu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SStartProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXiongnu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SStartProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SStartProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXiongnu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXiongnu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CStartProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXiongnu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CStartProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CStartProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseId", wireType)
			}
			m.BaseId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaseId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseX", wireType)
			}
			m.BaseX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaseX |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseY", wireType)
			}
			m.BaseY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaseY |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXiongnu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXiongnu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CBroadcastStartProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXiongnu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CBroadcastStartProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CBroadcastStartProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthXiongnu
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXiongnu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXiongnu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CInfoBroadcastProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXiongnu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CInfoBroadcastProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CInfoBroadcastProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthXiongnu
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = append(m.Info[:0], dAtA[iNdEx:postIndex]...)
			if m.Info == nil {
				m.Info = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXiongnu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXiongnu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CTroopInfoProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXiongnu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CTroopInfoProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CTroopInfoProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseTroops", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthXiongnu
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseTroops = append(m.BaseTroops[:0], dAtA[iNdEx:postIndex]...)
			if m.BaseTroops == nil {
				m.BaseTroops = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Morale", wireType)
			}
			m.Morale = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Morale |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXiongnu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXiongnu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CEndBroadcastProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXiongnu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CEndBroadcastProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CEndBroadcastProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockNextLevel", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UnlockNextLevel = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddPrestige", wireType)
			}
			m.AddPrestige = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddPrestige |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildId", wireType)
			}
			m.GuildId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuildId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResistXiongNu", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthXiongnu
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResistXiongNu = append(m.ResistXiongNu[:0], dAtA[iNdEx:postIndex]...)
			if m.ResistXiongNu == nil {
				m.ResistXiongNu = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXiongnu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXiongnu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SGetXiongNuNpcBaseInfoProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXiongnu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SGetXiongNuNpcBaseInfoProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SGetXiongNuNpcBaseInfoProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildId", wireType)
			}
			m.GuildId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuildId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXiongnu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXiongnu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CGetXiongNuNpcBaseInfoProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXiongnu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CGetXiongNuNpcBaseInfoProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CGetXiongNuNpcBaseInfoProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildId", wireType)
			}
			m.GuildId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuildId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthXiongnu
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildFlag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthXiongnu
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildFlag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Morale", wireType)
			}
			m.Morale = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Morale |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FightingAmount", wireType)
			}
			m.FightingAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FightingAmount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXiongnu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXiongnu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SGetDefenserFightAmountProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXiongnu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SGetDefenserFightAmountProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SGetDefenserFightAmountProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXiongnu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXiongnu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CGetDefenserFightAmountProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXiongnu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CGetDefenserFightAmountProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CGetDefenserFightAmountProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefenserId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthXiongnu
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefenserId = append(m.DefenserId, make([]byte, postIndex-iNdEx))
			copy(m.DefenserId[len(m.DefenserId)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXiongnu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DefenserFightAmount = append(m.DefenserFightAmount, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXiongnu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthXiongnu
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXiongnu
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DefenserFightAmount = append(m.DefenserFightAmount, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DefenserFightAmount", wireType)
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXiongnu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DefenserEnemyCount = append(m.DefenserEnemyCount, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXiongnu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthXiongnu
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXiongnu
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DefenserEnemyCount = append(m.DefenserEnemyCount, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DefenserEnemyCount", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXiongnu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXiongnu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CGetXiongNuFightInfoProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXiongnu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CGetXiongNuFightInfoProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CGetXiongNuFightInfoProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthXiongnu
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXiongnu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXiongnu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipXiongnu(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowXiongnu
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthXiongnu
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowXiongnu
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipXiongnu(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthXiongnu = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowXiongnu   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/gen/pb/xiongnu/xiongnu.proto", fileDescriptorXiongnu)
}

var fileDescriptorXiongnu = []byte{
	// 664 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xdb, 0x6e, 0xd3, 0x4a,
	0x14, 0xad, 0x93, 0x38, 0x69, 0x77, 0x6f, 0xa7, 0xd3, 0xcb, 0xc9, 0x51, 0xd5, 0x9c, 0x1c, 0x4b,
	0x07, 0x2a, 0x40, 0x8d, 0x30, 0xa8, 0x48, 0x15, 0x2f, 0xc4, 0x6d, 0x21, 0x02, 0x45, 0x55, 0x5c,
	0xa1, 0xc2, 0x8b, 0x35, 0xc9, 0x4c, 0x5c, 0x0b, 0x7b, 0x26, 0xb2, 0xc7, 0x25, 0xfd, 0x13, 0x3e,
	0x81, 0x4f, 0x81, 0x37, 0x1e, 0x79, 0x44, 0xe5, 0x47, 0xd0, 0x6c, 0x5f, 0x12, 0xe0, 0x89, 0x3e,
	0xd9, 0x7b, 0xad, 0x59, 0xb3, 0x66, 0xaf, 0xb9, 0xc0, 0xa1, 0x1f, 0xa8, 0xcb, 0x74, 0x78, 0x30,
	0x92, 0x51, 0x27, 0x0c, 0xfc, 0x4b, 0x35, 0xa1, 0xef, 0x3b, 0x11, 0x0d, 0xf9, 0x93, 0x8e, 0xcf,
	0x45, 0x67, 0x32, 0xec, 0x4c, 0x03, 0x29, 0x7c, 0x91, 0x16, 0xdf, 0x83, 0x49, 0x2c, 0x95, 0x24,
	0x26, 0x7e, 0xac, 0xa7, 0xb0, 0xe9, 0xd8, 0xae, 0xcb, 0xd5, 0x31, 0x1f, 0x73, 0xc1, 0x78, 0x7c,
	0x86, 0xec, 0x1a, 0x54, 0x02, 0xd6, 0x34, 0xda, 0xc6, 0xfe, 0xca, 0xa0, 0x12, 0x30, 0xb2, 0x0d,
	0x75, 0x25, 0xbd, 0x84, 0xab, 0x66, 0xa5, 0x6d, 0xec, 0x2f, 0x0e, 0x4c, 0x25, 0x5d, 0xae, 0xb4,
	0xda, 0xb5, 0x9d, 0xdb, 0xaa, 0x8f, 0x61, 0xd7, 0xb5, 0x9d, 0x6e, 0x2c, 0xe9, 0x88, 0x26, 0xea,
	0xb6, 0xb3, 0xfc, 0x0f, 0xab, 0xba, 0x03, 0x45, 0x63, 0x95, 0xe9, 0xb6, 0xc0, 0x0c, 0xf9, 0x15,
	0x0f, 0x51, 0x6a, 0x0e, 0xb2, 0xc2, 0x7a, 0x0d, 0xab, 0x7a, 0xa9, 0xb3, 0x61, 0x7f, 0x43, 0x63,
	0x48, 0x13, 0xee, 0xe5, 0x1e, 0xe6, 0xa0, 0xae, 0xcb, 0x1e, 0xfa, 0x20, 0x31, 0x45, 0x1f, 0x73,
	0x60, 0xea, 0xea, 0xa2, 0x84, 0xaf, 0x9b, 0xd5, 0x19, 0xfc, 0xc6, 0x7a, 0x00, 0x3b, 0x79, 0x13,
	0x0c, 0xbb, 0x98, 0x19, 0x10, 0xa8, 0x09, 0x1a, 0x71, 0x9c, 0x7d, 0x69, 0x80, 0xff, 0xd6, 0x7d,
	0xd8, 0x76, 0x6d, 0xa7, 0x27, 0xc6, 0xb2, 0x54, 0x94, 0x83, 0x03, 0x31, 0x96, 0x79, 0xbb, 0xf8,
	0x6f, 0xbd, 0x84, 0x0d, 0xd7, 0x76, 0xce, 0x63, 0x29, 0x27, 0x5a, 0x91, 0x0d, 0x6c, 0x01, 0x68,
	0x63, 0x44, 0x93, 0x7c, 0xf8, 0x1c, 0x42, 0x76, 0xa0, 0x1e, 0xc9, 0x98, 0x86, 0x3c, 0x5f, 0x7d,
	0x5e, 0x59, 0x1f, 0x0d, 0xd8, 0x72, 0x6d, 0xe7, 0x44, 0xb0, 0x5f, 0x9c, 0xef, 0xc1, 0x46, 0x2a,
	0x42, 0x39, 0x7a, 0xe7, 0x09, 0x3e, 0x55, 0x5e, 0x16, 0x5d, 0x0d, 0x13, 0x5e, 0xcf, 0x88, 0x3e,
	0x9f, 0xaa, 0x57, 0x1a, 0x26, 0xff, 0xc1, 0x0a, 0x65, 0xcc, 0x9b, 0xc4, 0x3c, 0x51, 0x81, 0xcf,
	0x9b, 0x26, 0x5a, 0x2c, 0x53, 0xc6, 0xce, 0x72, 0x88, 0xfc, 0x03, 0x8b, 0x7e, 0x1a, 0x84, 0x4c,
	0xe7, 0x5a, 0x47, 0xba, 0x81, 0x75, 0x8f, 0x91, 0x3b, 0xb0, 0x1e, 0xf3, 0x24, 0x48, 0x94, 0x87,
	0x47, 0xd1, 0x13, 0x69, 0xb3, 0x81, 0xeb, 0x5f, 0xcd, 0xe0, 0x0b, 0x8d, 0xf6, 0x53, 0xeb, 0x08,
	0xf6, 0x1c, 0xdb, 0x7d, 0xce, 0x0b, 0xa0, 0x3f, 0x19, 0x75, 0xf5, 0xd6, 0x94, 0x19, 0xcc, 0x7b,
	0x18, 0x3f, 0x79, 0x58, 0x5f, 0x0d, 0xd8, 0x73, 0x6d, 0xe7, 0x56, 0x62, 0xb2, 0x07, 0x90, 0x51,
	0xb8, 0x6f, 0x15, 0xdc, 0xb7, 0x25, 0x44, 0xfa, 0x34, 0xe2, 0x33, 0x7a, 0x1c, 0x52, 0x1f, 0x4f,
	0x41, 0x41, 0x9f, 0x86, 0xd4, 0x9f, 0x4b, 0xbe, 0x36, 0x9f, 0xbc, 0x96, 0x25, 0xfa, 0x54, 0x78,
	0x2a, 0x88, 0x8a, 0xc8, 0x96, 0x10, 0x39, 0x0f, 0x22, 0x4e, 0xee, 0xc2, 0xfa, 0x58, 0xdf, 0xdb,
	0x40, 0xf8, 0x1e, 0x8d, 0x64, 0x2a, 0x54, 0x9e, 0xdb, 0x5a, 0x01, 0x3f, 0x43, 0xd4, 0x3a, 0x82,
	0x56, 0x16, 0x0b, 0x5e, 0x93, 0x84, 0xc7, 0xa7, 0x9a, 0xcf, 0xc8, 0xac, 0xb5, 0x26, 0x34, 0xae,
	0x78, 0x9c, 0x04, 0x52, 0x14, 0x9d, 0xe5, 0xa5, 0xf5, 0xd9, 0x80, 0x56, 0x16, 0xcb, 0x9f, 0x8b,
	0xc9, 0xbf, 0xb0, 0xcc, 0x72, 0x95, 0x0e, 0xad, 0xd2, 0xae, 0xea, 0x33, 0x57, 0x40, 0x3d, 0x46,
	0x0e, 0x61, 0xbb, 0x1c, 0x80, 0x8b, 0x2e, 0x1a, 0xa9, 0xb6, 0xab, 0xfb, 0x66, 0xb7, 0xf2, 0xd7,
	0xc2, 0x60, 0x93, 0xfd, 0xee, 0x4b, 0x1e, 0xc3, 0x56, 0xa9, 0xe3, 0x82, 0x47, 0xd7, 0xde, 0x08,
	0x65, 0xb5, 0x52, 0x46, 0x0a, 0xfe, 0x44, 0xd3, 0x0e, 0xe6, 0xf0, 0x10, 0x9f, 0x8d, 0xd9, 0x0e,
	0xe3, 0x8c, 0xb3, 0xfd, 0x25, 0x50, 0x63, 0x54, 0xd1, 0xe2, 0x26, 0xe9, 0xff, 0xee, 0xee, 0xa7,
	0x9b, 0x96, 0xf1, 0xe5, 0xa6, 0x65, 0x7c, 0xbb, 0x69, 0x19, 0x1f, 0xbe, 0xb7, 0x16, 0x5e, 0x18,
	0x6f, 0x1b, 0xf9, 0x7b, 0x38, 0xac, 0xe3, 0x4b, 0xf8, 0xe8, 0x47, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xb9, 0xc5, 0x3e, 0x78, 0x4a, 0x05, 0x00, 0x00,
}
