// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/gen/pb/promotion/promotion.proto
// DO NOT EDIT!

/*
	Package promotion is a generated protocol buffer package.

	It is generated from these files:
		github.com/lightpaw/male7/gen/pb/promotion/promotion.proto

	It has these top-level messages:
		C2SCollectLoginDayPrizeProto
		S2CCollectLoginDayPrizeProto
		C2SCollectLevelFundProto
		S2CCollectLevelFundProto
		C2SCollectDailySpProto
		S2CCollectDailySpProto
		C2SCollectFreeGiftProto
		S2CCollectFreeGiftProto
		S2CNoticeTimeLimitGiftsProto
		C2SBuyTimeLimitGiftProto
		S2CBuyTimeLimitGiftProto
		S2CNoticeEventLimitGiftProto
		C2SBuyEventLimitGiftProto
		S2CBuyEventLimitGiftProto
*/
package promotion

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import proto2 "github.com/lightpaw/male7/pb/shared_proto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type C2SCollectLoginDayPrizeProto struct {
	Day int32 `protobuf:"varint,1,opt,name=day,proto3" json:"day,omitempty"`
}

func (m *C2SCollectLoginDayPrizeProto) Reset()         { *m = C2SCollectLoginDayPrizeProto{} }
func (m *C2SCollectLoginDayPrizeProto) String() string { return proto.CompactTextString(m) }
func (*C2SCollectLoginDayPrizeProto) ProtoMessage()    {}
func (*C2SCollectLoginDayPrizeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorPromotion, []int{0}
}

func (m *C2SCollectLoginDayPrizeProto) GetDay() int32 {
	if m != nil {
		return m.Day
	}
	return 0
}

type S2CCollectLoginDayPrizeProto struct {
	Day int32 `protobuf:"varint,1,opt,name=day,proto3" json:"day,omitempty"`
}

func (m *S2CCollectLoginDayPrizeProto) Reset()         { *m = S2CCollectLoginDayPrizeProto{} }
func (m *S2CCollectLoginDayPrizeProto) String() string { return proto.CompactTextString(m) }
func (*S2CCollectLoginDayPrizeProto) ProtoMessage()    {}
func (*S2CCollectLoginDayPrizeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorPromotion, []int{1}
}

func (m *S2CCollectLoginDayPrizeProto) GetDay() int32 {
	if m != nil {
		return m.Day
	}
	return 0
}

type C2SCollectLevelFundProto struct {
	Level int32 `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
}

func (m *C2SCollectLevelFundProto) Reset()         { *m = C2SCollectLevelFundProto{} }
func (m *C2SCollectLevelFundProto) String() string { return proto.CompactTextString(m) }
func (*C2SCollectLevelFundProto) ProtoMessage()    {}
func (*C2SCollectLevelFundProto) Descriptor() ([]byte, []int) {
	return fileDescriptorPromotion, []int{2}
}

func (m *C2SCollectLevelFundProto) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

type S2CCollectLevelFundProto struct {
	Level int32 `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
}

func (m *S2CCollectLevelFundProto) Reset()         { *m = S2CCollectLevelFundProto{} }
func (m *S2CCollectLevelFundProto) String() string { return proto.CompactTextString(m) }
func (*S2CCollectLevelFundProto) ProtoMessage()    {}
func (*S2CCollectLevelFundProto) Descriptor() ([]byte, []int) {
	return fileDescriptorPromotion, []int{3}
}

func (m *S2CCollectLevelFundProto) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

type C2SCollectDailySpProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SCollectDailySpProto) Reset()                    { *m = C2SCollectDailySpProto{} }
func (m *C2SCollectDailySpProto) String() string            { return proto.CompactTextString(m) }
func (*C2SCollectDailySpProto) ProtoMessage()               {}
func (*C2SCollectDailySpProto) Descriptor() ([]byte, []int) { return fileDescriptorPromotion, []int{4} }

func (m *C2SCollectDailySpProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type S2CCollectDailySpProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Sp int32 `protobuf:"varint,2,opt,name=sp,proto3" json:"sp,omitempty"`
}

func (m *S2CCollectDailySpProto) Reset()                    { *m = S2CCollectDailySpProto{} }
func (m *S2CCollectDailySpProto) String() string            { return proto.CompactTextString(m) }
func (*S2CCollectDailySpProto) ProtoMessage()               {}
func (*S2CCollectDailySpProto) Descriptor() ([]byte, []int) { return fileDescriptorPromotion, []int{5} }

func (m *S2CCollectDailySpProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *S2CCollectDailySpProto) GetSp() int32 {
	if m != nil {
		return m.Sp
	}
	return 0
}

type C2SCollectFreeGiftProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SCollectFreeGiftProto) Reset()                    { *m = C2SCollectFreeGiftProto{} }
func (m *C2SCollectFreeGiftProto) String() string            { return proto.CompactTextString(m) }
func (*C2SCollectFreeGiftProto) ProtoMessage()               {}
func (*C2SCollectFreeGiftProto) Descriptor() ([]byte, []int) { return fileDescriptorPromotion, []int{6} }

func (m *C2SCollectFreeGiftProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type S2CCollectFreeGiftProto struct {
	Id    int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Prize []byte `protobuf:"bytes,2,opt,name=prize,proto3" json:"prize,omitempty"`
}

func (m *S2CCollectFreeGiftProto) Reset()                    { *m = S2CCollectFreeGiftProto{} }
func (m *S2CCollectFreeGiftProto) String() string            { return proto.CompactTextString(m) }
func (*S2CCollectFreeGiftProto) ProtoMessage()               {}
func (*S2CCollectFreeGiftProto) Descriptor() ([]byte, []int) { return fileDescriptorPromotion, []int{7} }

func (m *S2CCollectFreeGiftProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *S2CCollectFreeGiftProto) GetPrize() []byte {
	if m != nil {
		return m.Prize
	}
	return nil
}

type S2CNoticeTimeLimitGiftsProto struct {
	Gifts []*proto2.TimeLimitGiftProto `protobuf:"bytes,1,rep,name=gifts" json:"gifts,omitempty"`
}

func (m *S2CNoticeTimeLimitGiftsProto) Reset()         { *m = S2CNoticeTimeLimitGiftsProto{} }
func (m *S2CNoticeTimeLimitGiftsProto) String() string { return proto.CompactTextString(m) }
func (*S2CNoticeTimeLimitGiftsProto) ProtoMessage()    {}
func (*S2CNoticeTimeLimitGiftsProto) Descriptor() ([]byte, []int) {
	return fileDescriptorPromotion, []int{8}
}

func (m *S2CNoticeTimeLimitGiftsProto) GetGifts() []*proto2.TimeLimitGiftProto {
	if m != nil {
		return m.Gifts
	}
	return nil
}

type C2SBuyTimeLimitGiftProto struct {
	GrpId int32 `protobuf:"varint,3,opt,name=grp_id,json=grpId,proto3" json:"grp_id,omitempty"`
}

func (m *C2SBuyTimeLimitGiftProto) Reset()         { *m = C2SBuyTimeLimitGiftProto{} }
func (m *C2SBuyTimeLimitGiftProto) String() string { return proto.CompactTextString(m) }
func (*C2SBuyTimeLimitGiftProto) ProtoMessage()    {}
func (*C2SBuyTimeLimitGiftProto) Descriptor() ([]byte, []int) {
	return fileDescriptorPromotion, []int{9}
}

func (m *C2SBuyTimeLimitGiftProto) GetGrpId() int32 {
	if m != nil {
		return m.GrpId
	}
	return 0
}

type S2CBuyTimeLimitGiftProto struct {
	GrpId int32 `protobuf:"varint,5,opt,name=grp_id,json=grpId,proto3" json:"grp_id,omitempty"`
	Index int32 `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *S2CBuyTimeLimitGiftProto) Reset()         { *m = S2CBuyTimeLimitGiftProto{} }
func (m *S2CBuyTimeLimitGiftProto) String() string { return proto.CompactTextString(m) }
func (*S2CBuyTimeLimitGiftProto) ProtoMessage()    {}
func (*S2CBuyTimeLimitGiftProto) Descriptor() ([]byte, []int) {
	return fileDescriptorPromotion, []int{10}
}

func (m *S2CBuyTimeLimitGiftProto) GetGrpId() int32 {
	if m != nil {
		return m.GrpId
	}
	return 0
}

func (m *S2CBuyTimeLimitGiftProto) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

type S2CNoticeEventLimitGiftProto struct {
	Gift *proto2.EventLimitGiftProto `protobuf:"bytes,1,opt,name=gift" json:"gift,omitempty"`
}

func (m *S2CNoticeEventLimitGiftProto) Reset()         { *m = S2CNoticeEventLimitGiftProto{} }
func (m *S2CNoticeEventLimitGiftProto) String() string { return proto.CompactTextString(m) }
func (*S2CNoticeEventLimitGiftProto) ProtoMessage()    {}
func (*S2CNoticeEventLimitGiftProto) Descriptor() ([]byte, []int) {
	return fileDescriptorPromotion, []int{11}
}

func (m *S2CNoticeEventLimitGiftProto) GetGift() *proto2.EventLimitGiftProto {
	if m != nil {
		return m.Gift
	}
	return nil
}

type C2SBuyEventLimitGiftProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SBuyEventLimitGiftProto) Reset()         { *m = C2SBuyEventLimitGiftProto{} }
func (m *C2SBuyEventLimitGiftProto) String() string { return proto.CompactTextString(m) }
func (*C2SBuyEventLimitGiftProto) ProtoMessage()    {}
func (*C2SBuyEventLimitGiftProto) Descriptor() ([]byte, []int) {
	return fileDescriptorPromotion, []int{12}
}

func (m *C2SBuyEventLimitGiftProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type S2CBuyEventLimitGiftProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *S2CBuyEventLimitGiftProto) Reset()         { *m = S2CBuyEventLimitGiftProto{} }
func (m *S2CBuyEventLimitGiftProto) String() string { return proto.CompactTextString(m) }
func (*S2CBuyEventLimitGiftProto) ProtoMessage()    {}
func (*S2CBuyEventLimitGiftProto) Descriptor() ([]byte, []int) {
	return fileDescriptorPromotion, []int{13}
}

func (m *S2CBuyEventLimitGiftProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*C2SCollectLoginDayPrizeProto)(nil), "proto.C2SCollectLoginDayPrizeProto")
	proto.RegisterType((*S2CCollectLoginDayPrizeProto)(nil), "proto.S2CCollectLoginDayPrizeProto")
	proto.RegisterType((*C2SCollectLevelFundProto)(nil), "proto.C2SCollectLevelFundProto")
	proto.RegisterType((*S2CCollectLevelFundProto)(nil), "proto.S2CCollectLevelFundProto")
	proto.RegisterType((*C2SCollectDailySpProto)(nil), "proto.C2SCollectDailySpProto")
	proto.RegisterType((*S2CCollectDailySpProto)(nil), "proto.S2CCollectDailySpProto")
	proto.RegisterType((*C2SCollectFreeGiftProto)(nil), "proto.C2SCollectFreeGiftProto")
	proto.RegisterType((*S2CCollectFreeGiftProto)(nil), "proto.S2CCollectFreeGiftProto")
	proto.RegisterType((*S2CNoticeTimeLimitGiftsProto)(nil), "proto.S2CNoticeTimeLimitGiftsProto")
	proto.RegisterType((*C2SBuyTimeLimitGiftProto)(nil), "proto.C2SBuyTimeLimitGiftProto")
	proto.RegisterType((*S2CBuyTimeLimitGiftProto)(nil), "proto.S2CBuyTimeLimitGiftProto")
	proto.RegisterType((*S2CNoticeEventLimitGiftProto)(nil), "proto.S2CNoticeEventLimitGiftProto")
	proto.RegisterType((*C2SBuyEventLimitGiftProto)(nil), "proto.C2SBuyEventLimitGiftProto")
	proto.RegisterType((*S2CBuyEventLimitGiftProto)(nil), "proto.S2CBuyEventLimitGiftProto")
}
func (m *C2SCollectLoginDayPrizeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCollectLoginDayPrizeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Day != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.Day))
	}
	return i, nil
}

func (m *S2CCollectLoginDayPrizeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCollectLoginDayPrizeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Day != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.Day))
	}
	return i, nil
}

func (m *C2SCollectLevelFundProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCollectLevelFundProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Level != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.Level))
	}
	return i, nil
}

func (m *S2CCollectLevelFundProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCollectLevelFundProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Level != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.Level))
	}
	return i, nil
}

func (m *C2SCollectDailySpProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCollectDailySpProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *S2CCollectDailySpProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCollectDailySpProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.Id))
	}
	if m.Sp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.Sp))
	}
	return i, nil
}

func (m *C2SCollectFreeGiftProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCollectFreeGiftProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *S2CCollectFreeGiftProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCollectFreeGiftProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.Id))
	}
	if len(m.Prize) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(len(m.Prize)))
		i += copy(dAtA[i:], m.Prize)
	}
	return i, nil
}

func (m *S2CNoticeTimeLimitGiftsProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CNoticeTimeLimitGiftsProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Gifts) > 0 {
		for _, msg := range m.Gifts {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPromotion(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *C2SBuyTimeLimitGiftProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SBuyTimeLimitGiftProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GrpId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.GrpId))
	}
	return i, nil
}

func (m *S2CBuyTimeLimitGiftProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CBuyTimeLimitGiftProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.Index))
	}
	if m.GrpId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.GrpId))
	}
	return i, nil
}

func (m *S2CNoticeEventLimitGiftProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CNoticeEventLimitGiftProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Gift != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.Gift.Size()))
		n1, err := m.Gift.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *C2SBuyEventLimitGiftProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SBuyEventLimitGiftProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *S2CBuyEventLimitGiftProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CBuyEventLimitGiftProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPromotion(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func encodeFixed64Promotion(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Promotion(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintPromotion(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *C2SCollectLoginDayPrizeProto) Size() (n int) {
	var l int
	_ = l
	if m.Day != 0 {
		n += 1 + sovPromotion(uint64(m.Day))
	}
	return n
}

func (m *S2CCollectLoginDayPrizeProto) Size() (n int) {
	var l int
	_ = l
	if m.Day != 0 {
		n += 1 + sovPromotion(uint64(m.Day))
	}
	return n
}

func (m *C2SCollectLevelFundProto) Size() (n int) {
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovPromotion(uint64(m.Level))
	}
	return n
}

func (m *S2CCollectLevelFundProto) Size() (n int) {
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovPromotion(uint64(m.Level))
	}
	return n
}

func (m *C2SCollectDailySpProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPromotion(uint64(m.Id))
	}
	return n
}

func (m *S2CCollectDailySpProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPromotion(uint64(m.Id))
	}
	if m.Sp != 0 {
		n += 1 + sovPromotion(uint64(m.Sp))
	}
	return n
}

func (m *C2SCollectFreeGiftProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPromotion(uint64(m.Id))
	}
	return n
}

func (m *S2CCollectFreeGiftProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPromotion(uint64(m.Id))
	}
	l = len(m.Prize)
	if l > 0 {
		n += 1 + l + sovPromotion(uint64(l))
	}
	return n
}

func (m *S2CNoticeTimeLimitGiftsProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Gifts) > 0 {
		for _, e := range m.Gifts {
			l = e.Size()
			n += 1 + l + sovPromotion(uint64(l))
		}
	}
	return n
}

func (m *C2SBuyTimeLimitGiftProto) Size() (n int) {
	var l int
	_ = l
	if m.GrpId != 0 {
		n += 1 + sovPromotion(uint64(m.GrpId))
	}
	return n
}

func (m *S2CBuyTimeLimitGiftProto) Size() (n int) {
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovPromotion(uint64(m.Index))
	}
	if m.GrpId != 0 {
		n += 1 + sovPromotion(uint64(m.GrpId))
	}
	return n
}

func (m *S2CNoticeEventLimitGiftProto) Size() (n int) {
	var l int
	_ = l
	if m.Gift != nil {
		l = m.Gift.Size()
		n += 1 + l + sovPromotion(uint64(l))
	}
	return n
}

func (m *C2SBuyEventLimitGiftProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPromotion(uint64(m.Id))
	}
	return n
}

func (m *S2CBuyEventLimitGiftProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPromotion(uint64(m.Id))
	}
	return n
}

func sovPromotion(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPromotion(x uint64) (n int) {
	return sovPromotion(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *C2SCollectLoginDayPrizeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPromotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCollectLoginDayPrizeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCollectLoginDayPrizeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Day", wireType)
			}
			m.Day = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Day |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPromotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPromotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCollectLoginDayPrizeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPromotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCollectLoginDayPrizeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCollectLoginDayPrizeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Day", wireType)
			}
			m.Day = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Day |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPromotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPromotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SCollectLevelFundProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPromotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCollectLevelFundProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCollectLevelFundProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPromotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPromotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCollectLevelFundProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPromotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCollectLevelFundProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCollectLevelFundProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPromotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPromotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SCollectDailySpProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPromotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCollectDailySpProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCollectDailySpProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPromotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPromotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCollectDailySpProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPromotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCollectDailySpProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCollectDailySpProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sp", wireType)
			}
			m.Sp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPromotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPromotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SCollectFreeGiftProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPromotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCollectFreeGiftProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCollectFreeGiftProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPromotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPromotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCollectFreeGiftProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPromotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCollectFreeGiftProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCollectFreeGiftProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prize", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPromotion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prize = append(m.Prize[:0], dAtA[iNdEx:postIndex]...)
			if m.Prize == nil {
				m.Prize = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPromotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPromotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CNoticeTimeLimitGiftsProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPromotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CNoticeTimeLimitGiftsProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CNoticeTimeLimitGiftsProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gifts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPromotion
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gifts = append(m.Gifts, &proto2.TimeLimitGiftProto{})
			if err := m.Gifts[len(m.Gifts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPromotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPromotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SBuyTimeLimitGiftProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPromotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SBuyTimeLimitGiftProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SBuyTimeLimitGiftProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrpId", wireType)
			}
			m.GrpId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GrpId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPromotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPromotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CBuyTimeLimitGiftProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPromotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CBuyTimeLimitGiftProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CBuyTimeLimitGiftProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrpId", wireType)
			}
			m.GrpId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GrpId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPromotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPromotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CNoticeEventLimitGiftProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPromotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CNoticeEventLimitGiftProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CNoticeEventLimitGiftProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gift", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPromotion
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Gift == nil {
				m.Gift = &proto2.EventLimitGiftProto{}
			}
			if err := m.Gift.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPromotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPromotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SBuyEventLimitGiftProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPromotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SBuyEventLimitGiftProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SBuyEventLimitGiftProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPromotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPromotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CBuyEventLimitGiftProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPromotion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CBuyEventLimitGiftProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CBuyEventLimitGiftProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPromotion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPromotion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPromotion(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPromotion
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPromotion
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPromotion
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPromotion
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPromotion(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPromotion = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPromotion   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/gen/pb/promotion/promotion.proto", fileDescriptorPromotion)
}

var fileDescriptorPromotion = []byte{
	// 428 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xdf, 0x8a, 0xda, 0x40,
	0x14, 0xc6, 0x1b, 0x35, 0x42, 0xc7, 0x52, 0x8a, 0x58, 0x8d, 0xd2, 0x06, 0xc9, 0x95, 0x45, 0x48,
	0xda, 0xf4, 0xa2, 0x7f, 0x6e, 0x0a, 0x6a, 0xb5, 0x05, 0xb1, 0x12, 0x7b, 0xd5, 0x1b, 0x49, 0x9c,
	0x69, 0x1c, 0x48, 0x32, 0x43, 0x32, 0xba, 0x9b, 0x7d, 0x92, 0x7d, 0xa4, 0xbd, 0xdc, 0x47, 0x58,
	0xdc, 0x17, 0x59, 0x66, 0x46, 0x36, 0x59, 0x37, 0x2b, 0xee, 0x55, 0xe6, 0x84, 0xdf, 0xf7, 0x7d,
	0x73, 0xce, 0x61, 0xc0, 0x77, 0x1f, 0xb3, 0xf5, 0xc6, 0x33, 0x57, 0x24, 0xb4, 0x02, 0xec, 0xaf,
	0x19, 0x75, 0xcf, 0xac, 0xd0, 0x0d, 0xd0, 0x17, 0xcb, 0x47, 0x91, 0x45, 0x3d, 0x8b, 0xc6, 0x24,
	0x24, 0x0c, 0x93, 0x28, 0x3b, 0x99, 0x34, 0x26, 0x8c, 0xd4, 0x55, 0xf1, 0xe9, 0x7c, 0x7b, 0xda,
	0x82, 0x7a, 0x56, 0xb2, 0x76, 0x63, 0x04, 0x97, 0x02, 0x3d, 0x74, 0x30, 0x3e, 0x82, 0x77, 0x43,
	0x7b, 0x31, 0x24, 0x41, 0x80, 0x56, 0x6c, 0x4a, 0x7c, 0x1c, 0x8d, 0xdc, 0x74, 0x1e, 0xe3, 0x0b,
	0x34, 0x17, 0x09, 0x6f, 0x40, 0x19, 0xba, 0xa9, 0xa6, 0x74, 0x95, 0x9e, 0xea, 0xf0, 0x23, 0x57,
	0x2c, 0xec, 0xe1, 0xf3, 0x14, 0x5a, 0x2e, 0x03, 0x6d, 0x51, 0x30, 0xde, 0x44, 0x50, 0xd2, 0x0d,
	0xa0, 0x06, 0xfc, 0xcf, 0x9e, 0x97, 0x05, 0x57, 0xe4, 0x32, 0x4e, 0x51, 0xf4, 0x40, 0x33, 0xcb,
	0x18, 0xb9, 0x38, 0x48, 0x17, 0x54, 0xf2, 0xaf, 0x41, 0x09, 0xc3, 0x3d, 0x5c, 0xc2, 0xd0, 0xf8,
	0x0a, 0x9a, 0x99, 0xf7, 0x31, 0x92, 0xd7, 0x09, 0xd5, 0x4a, 0xb2, 0x4e, 0xa8, 0xf1, 0x01, 0xb4,
	0xb2, 0x8c, 0x71, 0x8c, 0xd0, 0x04, 0xff, 0x67, 0xc5, 0x21, 0x3f, 0x40, 0x2b, 0x0b, 0x39, 0x8a,
	0xf2, 0x7e, 0x28, 0x9f, 0x9e, 0x08, 0x7a, 0xe5, 0xc8, 0xc2, 0xf8, 0x23, 0xa6, 0x3c, 0x23, 0x0c,
	0xaf, 0xd0, 0x5f, 0x1c, 0xa2, 0x29, 0x0e, 0x31, 0xe3, 0x26, 0x89, 0x74, 0xb1, 0x80, 0xea, 0xf3,
	0x4a, 0x53, 0xba, 0xe5, 0x5e, 0xcd, 0x6e, 0xcb, 0x75, 0x9a, 0x0f, 0x50, 0x41, 0x3a, 0x92, 0x33,
	0x3e, 0x89, 0x25, 0x0c, 0x36, 0xe9, 0x63, 0xa4, 0xfe, 0x16, 0x54, 0xfd, 0x98, 0x2e, 0x31, 0xd4,
	0xca, 0x72, 0xa6, 0x7e, 0x4c, 0x7f, 0x43, 0x63, 0x22, 0xb6, 0x50, 0x2c, 0x69, 0x00, 0x15, 0x47,
	0x10, 0x9d, 0x6b, 0x15, 0xa9, 0x10, 0x45, 0xce, 0x48, 0xcd, 0x1b, 0xcd, 0x72, 0xcd, 0xfc, 0xdc,
	0xa2, 0x88, 0x1d, 0x98, 0x99, 0xa0, 0xc2, 0x2f, 0x29, 0x86, 0x52, 0xb3, 0x3b, 0xfb, 0x5e, 0x0a,
	0x48, 0x47, 0x70, 0x46, 0x1f, 0xb4, 0x65, 0x2f, 0x45, 0x66, 0x87, 0xab, 0xe8, 0x83, 0xb6, 0xec,
	0xe2, 0x04, 0x78, 0xf0, 0xfe, 0x6a, 0xa7, 0x2b, 0xd7, 0x3b, 0x5d, 0xb9, 0xd9, 0xe9, 0xca, 0xe5,
	0xad, 0xfe, 0xe2, 0x97, 0xf2, 0xef, 0xe5, 0xfd, 0x9b, 0xf1, 0xaa, 0xe2, 0x66, 0x9f, 0xef, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x4e, 0x11, 0x49, 0x8f, 0xb4, 0x03, 0x00, 0x00,
}
