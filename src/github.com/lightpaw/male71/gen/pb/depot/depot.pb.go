// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/gen/pb/depot/depot.proto
// DO NOT EDIT!

/*
	Package depot is a generated protocol buffer package.

	It is generated from these files:
		github.com/lightpaw/male7/gen/pb/depot/depot.proto

	It has these top-level messages:
		S2CUpdateGoodsProto
		S2CUpdateMultiGoodsProto
		C2SUseGoodsProto
		S2CUseGoodsProto
		C2SUseCdrGoodsProto
		S2CUseCdrGoodsProto
		C2SGoodsCombineProto
		C2SGoodsPartsCombineProto
		S2CGoodsPartsCombineProto
		S2CGoodsExpiredProto
		S2CGoodsExpireTimeRemoveProto
		S2CUpdateBaowuProto
		S2CUpdateMultiBaowuProto
		C2SUnlockBaowuProto
		S2CUnlockBaowuProto
		C2SCollectBaowuProto
		S2CCollectBaowuProto
		S2CAddBaowuLogProto
		S2CListBaowuLogProto
		C2SDecomposeBaowuProto
		S2CDecomposeBaowuProto
*/
package depot

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import proto1 "github.com/lightpaw/male7/pb/shared_proto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type S2CUpdateGoodsProto struct {
	Id    int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Count int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *S2CUpdateGoodsProto) Reset()                    { *m = S2CUpdateGoodsProto{} }
func (m *S2CUpdateGoodsProto) String() string            { return proto.CompactTextString(m) }
func (*S2CUpdateGoodsProto) ProtoMessage()               {}
func (*S2CUpdateGoodsProto) Descriptor() ([]byte, []int) { return fileDescriptorDepot, []int{0} }

func (m *S2CUpdateGoodsProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *S2CUpdateGoodsProto) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type S2CUpdateMultiGoodsProto struct {
	Id    []int32 `protobuf:"varint,1,rep,name=id" json:"id,omitempty"`
	Count []int32 `protobuf:"varint,2,rep,name=count" json:"count,omitempty"`
}

func (m *S2CUpdateMultiGoodsProto) Reset()                    { *m = S2CUpdateMultiGoodsProto{} }
func (m *S2CUpdateMultiGoodsProto) String() string            { return proto.CompactTextString(m) }
func (*S2CUpdateMultiGoodsProto) ProtoMessage()               {}
func (*S2CUpdateMultiGoodsProto) Descriptor() ([]byte, []int) { return fileDescriptorDepot, []int{1} }

func (m *S2CUpdateMultiGoodsProto) GetId() []int32 {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *S2CUpdateMultiGoodsProto) GetCount() []int32 {
	if m != nil {
		return m.Count
	}
	return nil
}

type C2SUseGoodsProto struct {
	Id    int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Count int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *C2SUseGoodsProto) Reset()                    { *m = C2SUseGoodsProto{} }
func (m *C2SUseGoodsProto) String() string            { return proto.CompactTextString(m) }
func (*C2SUseGoodsProto) ProtoMessage()               {}
func (*C2SUseGoodsProto) Descriptor() ([]byte, []int) { return fileDescriptorDepot, []int{2} }

func (m *C2SUseGoodsProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *C2SUseGoodsProto) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type S2CUseGoodsProto struct {
	Id    int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Count int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *S2CUseGoodsProto) Reset()                    { *m = S2CUseGoodsProto{} }
func (m *S2CUseGoodsProto) String() string            { return proto.CompactTextString(m) }
func (*S2CUseGoodsProto) ProtoMessage()               {}
func (*S2CUseGoodsProto) Descriptor() ([]byte, []int) { return fileDescriptorDepot, []int{3} }

func (m *S2CUseGoodsProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *S2CUseGoodsProto) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type C2SUseCdrGoodsProto struct {
	Id      int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Count   int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	CdrType int32 `protobuf:"varint,3,opt,name=cdr_type,json=cdrType,proto3" json:"cdr_type,omitempty"`
	Index   int32 `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *C2SUseCdrGoodsProto) Reset()                    { *m = C2SUseCdrGoodsProto{} }
func (m *C2SUseCdrGoodsProto) String() string            { return proto.CompactTextString(m) }
func (*C2SUseCdrGoodsProto) ProtoMessage()               {}
func (*C2SUseCdrGoodsProto) Descriptor() ([]byte, []int) { return fileDescriptorDepot, []int{4} }

func (m *C2SUseCdrGoodsProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *C2SUseCdrGoodsProto) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *C2SUseCdrGoodsProto) GetCdrType() int32 {
	if m != nil {
		return m.CdrType
	}
	return 0
}

func (m *C2SUseCdrGoodsProto) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

type S2CUseCdrGoodsProto struct {
	Id       int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Count    int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	CdrType  int32 `protobuf:"varint,3,opt,name=cdr_type,json=cdrType,proto3" json:"cdr_type,omitempty"`
	Index    int32 `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"`
	Cooldown int32 `protobuf:"varint,5,opt,name=cooldown,proto3" json:"cooldown,omitempty"`
}

func (m *S2CUseCdrGoodsProto) Reset()                    { *m = S2CUseCdrGoodsProto{} }
func (m *S2CUseCdrGoodsProto) String() string            { return proto.CompactTextString(m) }
func (*S2CUseCdrGoodsProto) ProtoMessage()               {}
func (*S2CUseCdrGoodsProto) Descriptor() ([]byte, []int) { return fileDescriptorDepot, []int{5} }

func (m *S2CUseCdrGoodsProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *S2CUseCdrGoodsProto) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *S2CUseCdrGoodsProto) GetCdrType() int32 {
	if m != nil {
		return m.CdrType
	}
	return 0
}

func (m *S2CUseCdrGoodsProto) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *S2CUseCdrGoodsProto) GetCooldown() int32 {
	if m != nil {
		return m.Cooldown
	}
	return 0
}

type C2SGoodsCombineProto struct {
	Id    int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Count int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *C2SGoodsCombineProto) Reset()                    { *m = C2SGoodsCombineProto{} }
func (m *C2SGoodsCombineProto) String() string            { return proto.CompactTextString(m) }
func (*C2SGoodsCombineProto) ProtoMessage()               {}
func (*C2SGoodsCombineProto) Descriptor() ([]byte, []int) { return fileDescriptorDepot, []int{6} }

func (m *C2SGoodsCombineProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *C2SGoodsCombineProto) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type C2SGoodsPartsCombineProto struct {
	Id          int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Count       int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	SelectIndex int32 `protobuf:"varint,3,opt,name=select_index,json=selectIndex,proto3" json:"select_index,omitempty"`
}

func (m *C2SGoodsPartsCombineProto) Reset()                    { *m = C2SGoodsPartsCombineProto{} }
func (m *C2SGoodsPartsCombineProto) String() string            { return proto.CompactTextString(m) }
func (*C2SGoodsPartsCombineProto) ProtoMessage()               {}
func (*C2SGoodsPartsCombineProto) Descriptor() ([]byte, []int) { return fileDescriptorDepot, []int{7} }

func (m *C2SGoodsPartsCombineProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *C2SGoodsPartsCombineProto) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *C2SGoodsPartsCombineProto) GetSelectIndex() int32 {
	if m != nil {
		return m.SelectIndex
	}
	return 0
}

type S2CGoodsPartsCombineProto struct {
	Id          int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Count       int32  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	SelectIndex int32  `protobuf:"varint,3,opt,name=select_index,json=selectIndex,proto3" json:"select_index,omitempty"`
	Prize       []byte `protobuf:"bytes,4,opt,name=prize,proto3" json:"prize,omitempty"`
}

func (m *S2CGoodsPartsCombineProto) Reset()                    { *m = S2CGoodsPartsCombineProto{} }
func (m *S2CGoodsPartsCombineProto) String() string            { return proto.CompactTextString(m) }
func (*S2CGoodsPartsCombineProto) ProtoMessage()               {}
func (*S2CGoodsPartsCombineProto) Descriptor() ([]byte, []int) { return fileDescriptorDepot, []int{8} }

func (m *S2CGoodsPartsCombineProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *S2CGoodsPartsCombineProto) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *S2CGoodsPartsCombineProto) GetSelectIndex() int32 {
	if m != nil {
		return m.SelectIndex
	}
	return 0
}

func (m *S2CGoodsPartsCombineProto) GetPrize() []byte {
	if m != nil {
		return m.Prize
	}
	return nil
}

type S2CGoodsExpiredProto struct {
	Id []int32 `protobuf:"varint,1,rep,name=id" json:"id,omitempty"`
}

func (m *S2CGoodsExpiredProto) Reset()                    { *m = S2CGoodsExpiredProto{} }
func (m *S2CGoodsExpiredProto) String() string            { return proto.CompactTextString(m) }
func (*S2CGoodsExpiredProto) ProtoMessage()               {}
func (*S2CGoodsExpiredProto) Descriptor() ([]byte, []int) { return fileDescriptorDepot, []int{9} }

func (m *S2CGoodsExpiredProto) GetId() []int32 {
	if m != nil {
		return m.Id
	}
	return nil
}

type S2CGoodsExpireTimeRemoveProto struct {
	Id []int32 `protobuf:"varint,1,rep,name=id" json:"id,omitempty"`
}

func (m *S2CGoodsExpireTimeRemoveProto) Reset()         { *m = S2CGoodsExpireTimeRemoveProto{} }
func (m *S2CGoodsExpireTimeRemoveProto) String() string { return proto.CompactTextString(m) }
func (*S2CGoodsExpireTimeRemoveProto) ProtoMessage()    {}
func (*S2CGoodsExpireTimeRemoveProto) Descriptor() ([]byte, []int) {
	return fileDescriptorDepot, []int{10}
}

func (m *S2CGoodsExpireTimeRemoveProto) GetId() []int32 {
	if m != nil {
		return m.Id
	}
	return nil
}

type S2CUpdateBaowuProto struct {
	Id    int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Count int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *S2CUpdateBaowuProto) Reset()                    { *m = S2CUpdateBaowuProto{} }
func (m *S2CUpdateBaowuProto) String() string            { return proto.CompactTextString(m) }
func (*S2CUpdateBaowuProto) ProtoMessage()               {}
func (*S2CUpdateBaowuProto) Descriptor() ([]byte, []int) { return fileDescriptorDepot, []int{11} }

func (m *S2CUpdateBaowuProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *S2CUpdateBaowuProto) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type S2CUpdateMultiBaowuProto struct {
	Id    []int32 `protobuf:"varint,1,rep,name=id" json:"id,omitempty"`
	Count []int32 `protobuf:"varint,2,rep,name=count" json:"count,omitempty"`
}

func (m *S2CUpdateMultiBaowuProto) Reset()                    { *m = S2CUpdateMultiBaowuProto{} }
func (m *S2CUpdateMultiBaowuProto) String() string            { return proto.CompactTextString(m) }
func (*S2CUpdateMultiBaowuProto) ProtoMessage()               {}
func (*S2CUpdateMultiBaowuProto) Descriptor() ([]byte, []int) { return fileDescriptorDepot, []int{12} }

func (m *S2CUpdateMultiBaowuProto) GetId() []int32 {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *S2CUpdateMultiBaowuProto) GetCount() []int32 {
	if m != nil {
		return m.Count
	}
	return nil
}

type C2SUnlockBaowuProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SUnlockBaowuProto) Reset()                    { *m = C2SUnlockBaowuProto{} }
func (m *C2SUnlockBaowuProto) String() string            { return proto.CompactTextString(m) }
func (*C2SUnlockBaowuProto) ProtoMessage()               {}
func (*C2SUnlockBaowuProto) Descriptor() ([]byte, []int) { return fileDescriptorDepot, []int{13} }

func (m *C2SUnlockBaowuProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type S2CUnlockBaowuProto struct {
	Id      int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	EndTime int32 `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (m *S2CUnlockBaowuProto) Reset()                    { *m = S2CUnlockBaowuProto{} }
func (m *S2CUnlockBaowuProto) String() string            { return proto.CompactTextString(m) }
func (*S2CUnlockBaowuProto) ProtoMessage()               {}
func (*S2CUnlockBaowuProto) Descriptor() ([]byte, []int) { return fileDescriptorDepot, []int{14} }

func (m *S2CUnlockBaowuProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *S2CUnlockBaowuProto) GetEndTime() int32 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

type C2SCollectBaowuProto struct {
	Miao bool `protobuf:"varint,1,opt,name=miao,proto3" json:"miao,omitempty"`
}

func (m *C2SCollectBaowuProto) Reset()                    { *m = C2SCollectBaowuProto{} }
func (m *C2SCollectBaowuProto) String() string            { return proto.CompactTextString(m) }
func (*C2SCollectBaowuProto) ProtoMessage()               {}
func (*C2SCollectBaowuProto) Descriptor() ([]byte, []int) { return fileDescriptorDepot, []int{15} }

func (m *C2SCollectBaowuProto) GetMiao() bool {
	if m != nil {
		return m.Miao
	}
	return false
}

type S2CCollectBaowuProto struct {
	Prize *proto1.PrizeProto `protobuf:"bytes,1,opt,name=prize" json:"prize,omitempty"`
}

func (m *S2CCollectBaowuProto) Reset()                    { *m = S2CCollectBaowuProto{} }
func (m *S2CCollectBaowuProto) String() string            { return proto.CompactTextString(m) }
func (*S2CCollectBaowuProto) ProtoMessage()               {}
func (*S2CCollectBaowuProto) Descriptor() ([]byte, []int) { return fileDescriptorDepot, []int{16} }

func (m *S2CCollectBaowuProto) GetPrize() *proto1.PrizeProto {
	if m != nil {
		return m.Prize
	}
	return nil
}

type S2CAddBaowuLogProto struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *S2CAddBaowuLogProto) Reset()                    { *m = S2CAddBaowuLogProto{} }
func (m *S2CAddBaowuLogProto) String() string            { return proto.CompactTextString(m) }
func (*S2CAddBaowuLogProto) ProtoMessage()               {}
func (*S2CAddBaowuLogProto) Descriptor() ([]byte, []int) { return fileDescriptorDepot, []int{17} }

func (m *S2CAddBaowuLogProto) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type S2CListBaowuLogProto struct {
	Datas [][]byte `protobuf:"bytes,1,rep,name=datas" json:"datas,omitempty"`
}

func (m *S2CListBaowuLogProto) Reset()                    { *m = S2CListBaowuLogProto{} }
func (m *S2CListBaowuLogProto) String() string            { return proto.CompactTextString(m) }
func (*S2CListBaowuLogProto) ProtoMessage()               {}
func (*S2CListBaowuLogProto) Descriptor() ([]byte, []int) { return fileDescriptorDepot, []int{18} }

func (m *S2CListBaowuLogProto) GetDatas() [][]byte {
	if m != nil {
		return m.Datas
	}
	return nil
}

type C2SDecomposeBaowuProto struct {
	BaowuId int32 `protobuf:"varint,1,opt,name=baowu_id,json=baowuId,proto3" json:"baowu_id,omitempty"`
	Count   int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *C2SDecomposeBaowuProto) Reset()                    { *m = C2SDecomposeBaowuProto{} }
func (m *C2SDecomposeBaowuProto) String() string            { return proto.CompactTextString(m) }
func (*C2SDecomposeBaowuProto) ProtoMessage()               {}
func (*C2SDecomposeBaowuProto) Descriptor() ([]byte, []int) { return fileDescriptorDepot, []int{19} }

func (m *C2SDecomposeBaowuProto) GetBaowuId() int32 {
	if m != nil {
		return m.BaowuId
	}
	return 0
}

func (m *C2SDecomposeBaowuProto) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type S2CDecomposeBaowuProto struct {
	BaowuId  int32 `protobuf:"varint,1,opt,name=baowu_id,json=baowuId,proto3" json:"baowu_id,omitempty"`
	NewCount int32 `protobuf:"varint,2,opt,name=new_count,json=newCount,proto3" json:"new_count,omitempty"`
}

func (m *S2CDecomposeBaowuProto) Reset()                    { *m = S2CDecomposeBaowuProto{} }
func (m *S2CDecomposeBaowuProto) String() string            { return proto.CompactTextString(m) }
func (*S2CDecomposeBaowuProto) ProtoMessage()               {}
func (*S2CDecomposeBaowuProto) Descriptor() ([]byte, []int) { return fileDescriptorDepot, []int{20} }

func (m *S2CDecomposeBaowuProto) GetBaowuId() int32 {
	if m != nil {
		return m.BaowuId
	}
	return 0
}

func (m *S2CDecomposeBaowuProto) GetNewCount() int32 {
	if m != nil {
		return m.NewCount
	}
	return 0
}

func init() {
	proto.RegisterType((*S2CUpdateGoodsProto)(nil), "proto.S2CUpdateGoodsProto")
	proto.RegisterType((*S2CUpdateMultiGoodsProto)(nil), "proto.S2CUpdateMultiGoodsProto")
	proto.RegisterType((*C2SUseGoodsProto)(nil), "proto.C2SUseGoodsProto")
	proto.RegisterType((*S2CUseGoodsProto)(nil), "proto.S2CUseGoodsProto")
	proto.RegisterType((*C2SUseCdrGoodsProto)(nil), "proto.C2SUseCdrGoodsProto")
	proto.RegisterType((*S2CUseCdrGoodsProto)(nil), "proto.S2CUseCdrGoodsProto")
	proto.RegisterType((*C2SGoodsCombineProto)(nil), "proto.C2SGoodsCombineProto")
	proto.RegisterType((*C2SGoodsPartsCombineProto)(nil), "proto.C2SGoodsPartsCombineProto")
	proto.RegisterType((*S2CGoodsPartsCombineProto)(nil), "proto.S2CGoodsPartsCombineProto")
	proto.RegisterType((*S2CGoodsExpiredProto)(nil), "proto.S2CGoodsExpiredProto")
	proto.RegisterType((*S2CGoodsExpireTimeRemoveProto)(nil), "proto.S2CGoodsExpireTimeRemoveProto")
	proto.RegisterType((*S2CUpdateBaowuProto)(nil), "proto.S2CUpdateBaowuProto")
	proto.RegisterType((*S2CUpdateMultiBaowuProto)(nil), "proto.S2CUpdateMultiBaowuProto")
	proto.RegisterType((*C2SUnlockBaowuProto)(nil), "proto.C2SUnlockBaowuProto")
	proto.RegisterType((*S2CUnlockBaowuProto)(nil), "proto.S2CUnlockBaowuProto")
	proto.RegisterType((*C2SCollectBaowuProto)(nil), "proto.C2SCollectBaowuProto")
	proto.RegisterType((*S2CCollectBaowuProto)(nil), "proto.S2CCollectBaowuProto")
	proto.RegisterType((*S2CAddBaowuLogProto)(nil), "proto.S2CAddBaowuLogProto")
	proto.RegisterType((*S2CListBaowuLogProto)(nil), "proto.S2CListBaowuLogProto")
	proto.RegisterType((*C2SDecomposeBaowuProto)(nil), "proto.C2SDecomposeBaowuProto")
	proto.RegisterType((*S2CDecomposeBaowuProto)(nil), "proto.S2CDecomposeBaowuProto")
}
func (m *S2CUpdateGoodsProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateGoodsProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDepot(dAtA, i, uint64(m.Id))
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDepot(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *S2CUpdateMultiGoodsProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateMultiGoodsProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		for _, num := range m.Id {
			dAtA[i] = 0x8
			i++
			i = encodeVarintDepot(dAtA, i, uint64(num))
		}
	}
	if len(m.Count) > 0 {
		for _, num := range m.Count {
			dAtA[i] = 0x10
			i++
			i = encodeVarintDepot(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *C2SUseGoodsProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SUseGoodsProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDepot(dAtA, i, uint64(m.Id))
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDepot(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *S2CUseGoodsProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUseGoodsProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDepot(dAtA, i, uint64(m.Id))
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDepot(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *C2SUseCdrGoodsProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SUseCdrGoodsProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDepot(dAtA, i, uint64(m.Id))
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDepot(dAtA, i, uint64(m.Count))
	}
	if m.CdrType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDepot(dAtA, i, uint64(m.CdrType))
	}
	if m.Index != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDepot(dAtA, i, uint64(m.Index))
	}
	return i, nil
}

func (m *S2CUseCdrGoodsProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUseCdrGoodsProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDepot(dAtA, i, uint64(m.Id))
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDepot(dAtA, i, uint64(m.Count))
	}
	if m.CdrType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDepot(dAtA, i, uint64(m.CdrType))
	}
	if m.Index != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDepot(dAtA, i, uint64(m.Index))
	}
	if m.Cooldown != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintDepot(dAtA, i, uint64(m.Cooldown))
	}
	return i, nil
}

func (m *C2SGoodsCombineProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SGoodsCombineProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDepot(dAtA, i, uint64(m.Id))
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDepot(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *C2SGoodsPartsCombineProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SGoodsPartsCombineProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDepot(dAtA, i, uint64(m.Id))
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDepot(dAtA, i, uint64(m.Count))
	}
	if m.SelectIndex != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDepot(dAtA, i, uint64(m.SelectIndex))
	}
	return i, nil
}

func (m *S2CGoodsPartsCombineProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CGoodsPartsCombineProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDepot(dAtA, i, uint64(m.Id))
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDepot(dAtA, i, uint64(m.Count))
	}
	if m.SelectIndex != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDepot(dAtA, i, uint64(m.SelectIndex))
	}
	if len(m.Prize) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDepot(dAtA, i, uint64(len(m.Prize)))
		i += copy(dAtA[i:], m.Prize)
	}
	return i, nil
}

func (m *S2CGoodsExpiredProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CGoodsExpiredProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		for _, num := range m.Id {
			dAtA[i] = 0x8
			i++
			i = encodeVarintDepot(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *S2CGoodsExpireTimeRemoveProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CGoodsExpireTimeRemoveProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		for _, num := range m.Id {
			dAtA[i] = 0x8
			i++
			i = encodeVarintDepot(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *S2CUpdateBaowuProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateBaowuProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDepot(dAtA, i, uint64(m.Id))
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDepot(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *S2CUpdateMultiBaowuProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateMultiBaowuProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		for _, num := range m.Id {
			dAtA[i] = 0x8
			i++
			i = encodeVarintDepot(dAtA, i, uint64(num))
		}
	}
	if len(m.Count) > 0 {
		for _, num := range m.Count {
			dAtA[i] = 0x10
			i++
			i = encodeVarintDepot(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *C2SUnlockBaowuProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SUnlockBaowuProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDepot(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *S2CUnlockBaowuProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUnlockBaowuProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDepot(dAtA, i, uint64(m.Id))
	}
	if m.EndTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDepot(dAtA, i, uint64(m.EndTime))
	}
	return i, nil
}

func (m *C2SCollectBaowuProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCollectBaowuProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Miao {
		dAtA[i] = 0x8
		i++
		if m.Miao {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CCollectBaowuProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCollectBaowuProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Prize != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDepot(dAtA, i, uint64(m.Prize.Size()))
		n1, err := m.Prize.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *S2CAddBaowuLogProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CAddBaowuLogProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDepot(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *S2CListBaowuLogProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CListBaowuLogProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, b := range m.Datas {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDepot(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *C2SDecomposeBaowuProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SDecomposeBaowuProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BaowuId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDepot(dAtA, i, uint64(m.BaowuId))
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDepot(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *S2CDecomposeBaowuProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CDecomposeBaowuProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BaowuId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDepot(dAtA, i, uint64(m.BaowuId))
	}
	if m.NewCount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDepot(dAtA, i, uint64(m.NewCount))
	}
	return i, nil
}

func encodeFixed64Depot(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Depot(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintDepot(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *S2CUpdateGoodsProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDepot(uint64(m.Id))
	}
	if m.Count != 0 {
		n += 1 + sovDepot(uint64(m.Count))
	}
	return n
}

func (m *S2CUpdateMultiGoodsProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Id) > 0 {
		for _, e := range m.Id {
			n += 1 + sovDepot(uint64(e))
		}
	}
	if len(m.Count) > 0 {
		for _, e := range m.Count {
			n += 1 + sovDepot(uint64(e))
		}
	}
	return n
}

func (m *C2SUseGoodsProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDepot(uint64(m.Id))
	}
	if m.Count != 0 {
		n += 1 + sovDepot(uint64(m.Count))
	}
	return n
}

func (m *S2CUseGoodsProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDepot(uint64(m.Id))
	}
	if m.Count != 0 {
		n += 1 + sovDepot(uint64(m.Count))
	}
	return n
}

func (m *C2SUseCdrGoodsProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDepot(uint64(m.Id))
	}
	if m.Count != 0 {
		n += 1 + sovDepot(uint64(m.Count))
	}
	if m.CdrType != 0 {
		n += 1 + sovDepot(uint64(m.CdrType))
	}
	if m.Index != 0 {
		n += 1 + sovDepot(uint64(m.Index))
	}
	return n
}

func (m *S2CUseCdrGoodsProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDepot(uint64(m.Id))
	}
	if m.Count != 0 {
		n += 1 + sovDepot(uint64(m.Count))
	}
	if m.CdrType != 0 {
		n += 1 + sovDepot(uint64(m.CdrType))
	}
	if m.Index != 0 {
		n += 1 + sovDepot(uint64(m.Index))
	}
	if m.Cooldown != 0 {
		n += 1 + sovDepot(uint64(m.Cooldown))
	}
	return n
}

func (m *C2SGoodsCombineProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDepot(uint64(m.Id))
	}
	if m.Count != 0 {
		n += 1 + sovDepot(uint64(m.Count))
	}
	return n
}

func (m *C2SGoodsPartsCombineProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDepot(uint64(m.Id))
	}
	if m.Count != 0 {
		n += 1 + sovDepot(uint64(m.Count))
	}
	if m.SelectIndex != 0 {
		n += 1 + sovDepot(uint64(m.SelectIndex))
	}
	return n
}

func (m *S2CGoodsPartsCombineProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDepot(uint64(m.Id))
	}
	if m.Count != 0 {
		n += 1 + sovDepot(uint64(m.Count))
	}
	if m.SelectIndex != 0 {
		n += 1 + sovDepot(uint64(m.SelectIndex))
	}
	l = len(m.Prize)
	if l > 0 {
		n += 1 + l + sovDepot(uint64(l))
	}
	return n
}

func (m *S2CGoodsExpiredProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Id) > 0 {
		for _, e := range m.Id {
			n += 1 + sovDepot(uint64(e))
		}
	}
	return n
}

func (m *S2CGoodsExpireTimeRemoveProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Id) > 0 {
		for _, e := range m.Id {
			n += 1 + sovDepot(uint64(e))
		}
	}
	return n
}

func (m *S2CUpdateBaowuProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDepot(uint64(m.Id))
	}
	if m.Count != 0 {
		n += 1 + sovDepot(uint64(m.Count))
	}
	return n
}

func (m *S2CUpdateMultiBaowuProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Id) > 0 {
		for _, e := range m.Id {
			n += 1 + sovDepot(uint64(e))
		}
	}
	if len(m.Count) > 0 {
		for _, e := range m.Count {
			n += 1 + sovDepot(uint64(e))
		}
	}
	return n
}

func (m *C2SUnlockBaowuProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDepot(uint64(m.Id))
	}
	return n
}

func (m *S2CUnlockBaowuProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDepot(uint64(m.Id))
	}
	if m.EndTime != 0 {
		n += 1 + sovDepot(uint64(m.EndTime))
	}
	return n
}

func (m *C2SCollectBaowuProto) Size() (n int) {
	var l int
	_ = l
	if m.Miao {
		n += 2
	}
	return n
}

func (m *S2CCollectBaowuProto) Size() (n int) {
	var l int
	_ = l
	if m.Prize != nil {
		l = m.Prize.Size()
		n += 1 + l + sovDepot(uint64(l))
	}
	return n
}

func (m *S2CAddBaowuLogProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovDepot(uint64(l))
	}
	return n
}

func (m *S2CListBaowuLogProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, b := range m.Datas {
			l = len(b)
			n += 1 + l + sovDepot(uint64(l))
		}
	}
	return n
}

func (m *C2SDecomposeBaowuProto) Size() (n int) {
	var l int
	_ = l
	if m.BaowuId != 0 {
		n += 1 + sovDepot(uint64(m.BaowuId))
	}
	if m.Count != 0 {
		n += 1 + sovDepot(uint64(m.Count))
	}
	return n
}

func (m *S2CDecomposeBaowuProto) Size() (n int) {
	var l int
	_ = l
	if m.BaowuId != 0 {
		n += 1 + sovDepot(uint64(m.BaowuId))
	}
	if m.NewCount != 0 {
		n += 1 + sovDepot(uint64(m.NewCount))
	}
	return n
}

func sovDepot(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDepot(x uint64) (n int) {
	return sovDepot(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *S2CUpdateGoodsProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDepot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateGoodsProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateGoodsProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDepot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDepot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateMultiGoodsProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDepot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateMultiGoodsProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateMultiGoodsProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDepot
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDepot
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDepot
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDepot
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDepot
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Count = append(m.Count, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDepot
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDepot
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDepot
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Count = append(m.Count, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDepot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDepot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SUseGoodsProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDepot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SUseGoodsProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SUseGoodsProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDepot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDepot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUseGoodsProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDepot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUseGoodsProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUseGoodsProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDepot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDepot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SUseCdrGoodsProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDepot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SUseCdrGoodsProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SUseCdrGoodsProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CdrType", wireType)
			}
			m.CdrType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CdrType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDepot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDepot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUseCdrGoodsProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDepot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUseCdrGoodsProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUseCdrGoodsProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CdrType", wireType)
			}
			m.CdrType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CdrType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cooldown", wireType)
			}
			m.Cooldown = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cooldown |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDepot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDepot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SGoodsCombineProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDepot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SGoodsCombineProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SGoodsCombineProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDepot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDepot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SGoodsPartsCombineProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDepot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SGoodsPartsCombineProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SGoodsPartsCombineProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectIndex", wireType)
			}
			m.SelectIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelectIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDepot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDepot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CGoodsPartsCombineProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDepot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CGoodsPartsCombineProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CGoodsPartsCombineProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectIndex", wireType)
			}
			m.SelectIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelectIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prize", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDepot
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prize = append(m.Prize[:0], dAtA[iNdEx:postIndex]...)
			if m.Prize == nil {
				m.Prize = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDepot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDepot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CGoodsExpiredProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDepot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CGoodsExpiredProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CGoodsExpiredProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDepot
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDepot
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDepot
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDepot
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDepot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDepot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CGoodsExpireTimeRemoveProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDepot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CGoodsExpireTimeRemoveProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CGoodsExpireTimeRemoveProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDepot
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDepot
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDepot
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDepot
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDepot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDepot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateBaowuProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDepot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateBaowuProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateBaowuProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDepot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDepot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateMultiBaowuProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDepot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateMultiBaowuProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateMultiBaowuProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDepot
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDepot
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDepot
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDepot
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDepot
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Count = append(m.Count, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDepot
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDepot
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDepot
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Count = append(m.Count, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDepot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDepot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SUnlockBaowuProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDepot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SUnlockBaowuProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SUnlockBaowuProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDepot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDepot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUnlockBaowuProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDepot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUnlockBaowuProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUnlockBaowuProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDepot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDepot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SCollectBaowuProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDepot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCollectBaowuProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCollectBaowuProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Miao", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Miao = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDepot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDepot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCollectBaowuProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDepot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCollectBaowuProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCollectBaowuProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDepot
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Prize == nil {
				m.Prize = &proto1.PrizeProto{}
			}
			if err := m.Prize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDepot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDepot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CAddBaowuLogProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDepot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CAddBaowuLogProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CAddBaowuLogProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDepot
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDepot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDepot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CListBaowuLogProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDepot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CListBaowuLogProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CListBaowuLogProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDepot
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datas = append(m.Datas, make([]byte, postIndex-iNdEx))
			copy(m.Datas[len(m.Datas)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDepot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDepot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SDecomposeBaowuProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDepot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SDecomposeBaowuProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SDecomposeBaowuProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaowuId", wireType)
			}
			m.BaowuId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaowuId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDepot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDepot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CDecomposeBaowuProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDepot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CDecomposeBaowuProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CDecomposeBaowuProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaowuId", wireType)
			}
			m.BaowuId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaowuId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewCount", wireType)
			}
			m.NewCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDepot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDepot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDepot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDepot(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDepot
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDepot
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDepot
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDepot
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDepot
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDepot(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDepot = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDepot   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/gen/pb/depot/depot.proto", fileDescriptorDepot)
}

var fileDescriptorDepot = []byte{
	// 579 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0x61, 0x6b, 0xd3, 0x40,
	0x18, 0x5e, 0xba, 0xc5, 0xd5, 0x5b, 0x91, 0x99, 0x95, 0x91, 0x4e, 0x2c, 0x1a, 0x10, 0xa7, 0x48,
	0x03, 0x99, 0xe0, 0x40, 0x41, 0x6d, 0x14, 0x57, 0x98, 0x50, 0x92, 0xed, 0x8b, 0x5f, 0x42, 0x92,
	0x7b, 0x69, 0x0f, 0x93, 0xdc, 0x91, 0x5c, 0xed, 0xb6, 0x5f, 0xe0, 0x4f, 0xf0, 0x27, 0xf9, 0xd1,
	0x9f, 0x20, 0xf5, 0x8f, 0xc8, 0xbd, 0xd7, 0xd6, 0x16, 0x29, 0xd2, 0x89, 0x7e, 0x69, 0xf3, 0xdc,
	0xbd, 0xcf, 0xf3, 0x3e, 0x7d, 0xee, 0xde, 0x86, 0x78, 0x03, 0x26, 0x87, 0xa3, 0xa4, 0x93, 0xf2,
	0xdc, 0xcd, 0xd8, 0x60, 0x28, 0x45, 0x3c, 0x76, 0xf3, 0x38, 0x83, 0x67, 0xee, 0x00, 0x0a, 0x57,
	0x24, 0x2e, 0x05, 0xc1, 0xa5, 0xfe, 0xec, 0x88, 0x92, 0x4b, 0x6e, 0x99, 0xf8, 0x75, 0xf0, 0x74,
	0x35, 0x55, 0x24, 0x6e, 0x35, 0x8c, 0x4b, 0xa0, 0x11, 0x96, 0xba, 0x49, 0x5c, 0x81, 0x26, 0x3b,
	0xcf, 0xc9, 0x5e, 0xe8, 0xf9, 0xe7, 0x82, 0xc6, 0x12, 0xde, 0x71, 0x4e, 0xab, 0x3e, 0x6a, 0xde,
	0x22, 0x35, 0x46, 0x6d, 0xe3, 0x9e, 0x71, 0x68, 0x06, 0x35, 0x46, 0xad, 0x26, 0x31, 0x53, 0x3e,
	0x2a, 0xa4, 0x5d, 0xc3, 0x25, 0x0d, 0x9c, 0x13, 0x62, 0xcf, 0xc9, 0xef, 0x47, 0x99, 0x64, 0x0b,
	0x0a, 0xd6, 0x54, 0x61, 0xf3, 0xd0, 0xec, 0xd6, 0x76, 0x37, 0x50, 0xc5, 0xfe, 0xa5, 0x32, 0x5b,
	0x9e, 0x2a, 0x1d, 0x93, 0x5d, 0xdf, 0x0b, 0xcf, 0xab, 0xf5, 0x3d, 0x1c, 0x93, 0x5d, 0xe5, 0xe1,
	0x1a, 0xcc, 0x8c, 0xec, 0xe9, 0x9e, 0x3e, 0x2d, 0xd7, 0x25, 0x5b, 0x2d, 0x52, 0x4f, 0x69, 0x19,
	0xc9, 0x4b, 0x01, 0xf6, 0x26, 0x6e, 0x6c, 0xa7, 0xb4, 0x3c, 0xbb, 0x14, 0xa0, 0x08, 0xac, 0xa0,
	0x70, 0x61, 0x6f, 0x69, 0x02, 0x02, 0xe7, 0xb3, 0xa1, 0x93, 0xfe, 0x3f, 0xed, 0xac, 0x03, 0x52,
	0x4f, 0x39, 0xcf, 0x28, 0x1f, 0x17, 0xb6, 0x89, 0x1b, 0x73, 0xec, 0xbc, 0x20, 0x4d, 0xdf, 0x0b,
	0xd1, 0x83, 0xcf, 0xf3, 0x84, 0x15, 0xb0, 0x4e, 0x6c, 0x94, 0xb4, 0x66, 0xec, 0x7e, 0x5c, 0xca,
	0x6b, 0x48, 0x58, 0xf7, 0x49, 0xa3, 0x82, 0x0c, 0x52, 0x19, 0x69, 0xe7, 0xfa, 0x17, 0xed, 0xe8,
	0xb5, 0x1e, 0xc6, 0x75, 0x45, 0x5a, 0xa1, 0xe7, 0xff, 0xe3, 0x2e, 0x8a, 0x28, 0x4a, 0x76, 0x05,
	0x98, 0x5d, 0x23, 0xd0, 0xc0, 0x79, 0x4c, 0x9a, 0xb3, 0xde, 0x6f, 0x2f, 0x04, 0x2b, 0x81, 0xae,
	0xbc, 0xd2, 0xce, 0x11, 0xb9, 0xbb, 0x5c, 0x7b, 0xc6, 0x72, 0x08, 0x20, 0xe7, 0x9f, 0x60, 0x35,
	0x69, 0x71, 0xe8, 0xba, 0x31, 0x1f, 0x8f, 0xfe, 0x6a, 0xe8, 0x16, 0x14, 0xd6, 0x1b, 0xba, 0x07,
	0x7a, 0x00, 0x8a, 0x8c, 0xa7, 0x1f, 0x57, 0xdb, 0x70, 0x5e, 0x69, 0xb7, 0x7f, 0x28, 0x53, 0x57,
	0x14, 0x0a, 0x1a, 0x49, 0x96, 0xc3, 0xd4, 0xf0, 0x36, 0x14, 0x54, 0xc5, 0xa1, 0x02, 0xf5, 0xbd,
	0xd0, 0xe7, 0x99, 0x4a, 0x7e, 0xc9, 0xee, 0x56, 0xce, 0x62, 0x8e, 0x22, 0xf5, 0x00, 0x9f, 0x9d,
	0x97, 0x18, 0xfe, 0xef, 0xb5, 0x0f, 0x67, 0x47, 0xa5, 0x8a, 0x77, 0xbc, 0xdb, 0xfa, 0xff, 0xab,
	0xd3, 0x57, 0x6b, 0x58, 0x31, 0x3b, 0xbd, 0x47, 0x68, 0xf7, 0x35, 0xa5, 0x48, 0x3e, 0xe5, 0x83,
	0x79, 0x2f, 0x1a, 0xcb, 0x18, 0xe9, 0x8d, 0x00, 0x9f, 0x9d, 0x27, 0xd8, 0xeb, 0x94, 0x55, 0x72,
	0xb9, 0xb6, 0x49, 0x4c, 0xb5, 0x5f, 0x61, 0x92, 0x8d, 0x40, 0x03, 0xa7, 0x47, 0xf6, 0x7d, 0x2f,
	0x7c, 0x03, 0x29, 0xcf, 0x05, 0xaf, 0x16, 0x0f, 0xae, 0x45, 0xea, 0x89, 0x42, 0xd1, 0x3c, 0x90,
	0x6d, 0xc4, 0xbd, 0x55, 0x67, 0xd8, 0x27, 0xfb, 0xa1, 0xe7, 0xaf, 0x29, 0x75, 0x87, 0xdc, 0x2c,
	0x60, 0x1c, 0x2d, 0xca, 0xd5, 0x0b, 0x18, 0xfb, 0x0a, 0x77, 0x5b, 0x5f, 0x27, 0x6d, 0xe3, 0xdb,
	0xa4, 0x6d, 0x7c, 0x9f, 0xb4, 0x8d, 0x2f, 0x3f, 0xda, 0x1b, 0x27, 0xc6, 0x07, 0x13, 0xdf, 0x12,
	0xc9, 0x0d, 0x4c, 0xea, 0xe8, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0x89, 0x79, 0x17, 0x48, 0x5c,
	0x06, 0x00, 0x00,
}
