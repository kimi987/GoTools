// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/gen/pb/shop/shop.proto
// DO NOT EDIT!

/*
	Package shop is a generated protocol buffer package.

	It is generated from these files:
		github.com/lightpaw/male7/gen/pb/shop/shop.proto

	It has these top-level messages:
		S2CUpdateDailyShopGoodsProto
		C2SBuyGoodsProto
		S2CBuyGoodsProto
		S2CMultiCritBroadcastProto
		S2CPushBlackMarketGoodsProto
		C2SBuyBlackMarketGoodsProto
		S2CBuyBlackMarketGoodsProto
		S2CUpdateVipShopGoodsProto
*/
package shop

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type S2CUpdateDailyShopGoodsProto struct {
	Id    int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Count int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *S2CUpdateDailyShopGoodsProto) Reset()                    { *m = S2CUpdateDailyShopGoodsProto{} }
func (m *S2CUpdateDailyShopGoodsProto) String() string            { return proto.CompactTextString(m) }
func (*S2CUpdateDailyShopGoodsProto) ProtoMessage()               {}
func (*S2CUpdateDailyShopGoodsProto) Descriptor() ([]byte, []int) { return fileDescriptorShop, []int{0} }

func (m *S2CUpdateDailyShopGoodsProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *S2CUpdateDailyShopGoodsProto) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type C2SBuyGoodsProto struct {
	Id    int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Count int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *C2SBuyGoodsProto) Reset()                    { *m = C2SBuyGoodsProto{} }
func (m *C2SBuyGoodsProto) String() string            { return proto.CompactTextString(m) }
func (*C2SBuyGoodsProto) ProtoMessage()               {}
func (*C2SBuyGoodsProto) Descriptor() ([]byte, []int) { return fileDescriptorShop, []int{1} }

func (m *C2SBuyGoodsProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *C2SBuyGoodsProto) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type S2CBuyGoodsProto struct {
	Id    int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Count int32  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Multi int32  `protobuf:"varint,3,opt,name=multi,proto3" json:"multi,omitempty"`
	Prize []byte `protobuf:"bytes,4,opt,name=prize,proto3" json:"prize,omitempty"`
}

func (m *S2CBuyGoodsProto) Reset()                    { *m = S2CBuyGoodsProto{} }
func (m *S2CBuyGoodsProto) String() string            { return proto.CompactTextString(m) }
func (*S2CBuyGoodsProto) ProtoMessage()               {}
func (*S2CBuyGoodsProto) Descriptor() ([]byte, []int) { return fileDescriptorShop, []int{2} }

func (m *S2CBuyGoodsProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *S2CBuyGoodsProto) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *S2CBuyGoodsProto) GetMulti() int32 {
	if m != nil {
		return m.Multi
	}
	return 0
}

func (m *S2CBuyGoodsProto) GetPrize() []byte {
	if m != nil {
		return m.Prize
	}
	return nil
}

type S2CMultiCritBroadcastProto struct {
	ShopType int32  `protobuf:"varint,3,opt,name=shop_type,json=shopType,proto3" json:"shop_type,omitempty"`
	Multi    int32  `protobuf:"varint,1,opt,name=multi,proto3" json:"multi,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Prize    []byte `protobuf:"bytes,4,opt,name=prize,proto3" json:"prize,omitempty"`
}

func (m *S2CMultiCritBroadcastProto) Reset()                    { *m = S2CMultiCritBroadcastProto{} }
func (m *S2CMultiCritBroadcastProto) String() string            { return proto.CompactTextString(m) }
func (*S2CMultiCritBroadcastProto) ProtoMessage()               {}
func (*S2CMultiCritBroadcastProto) Descriptor() ([]byte, []int) { return fileDescriptorShop, []int{3} }

func (m *S2CMultiCritBroadcastProto) GetShopType() int32 {
	if m != nil {
		return m.ShopType
	}
	return 0
}

func (m *S2CMultiCritBroadcastProto) GetMulti() int32 {
	if m != nil {
		return m.Multi
	}
	return 0
}

func (m *S2CMultiCritBroadcastProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *S2CMultiCritBroadcastProto) GetPrize() []byte {
	if m != nil {
		return m.Prize
	}
	return nil
}

type S2CPushBlackMarketGoodsProto struct {
	Refrash         bool    `protobuf:"varint,1,opt,name=refrash,proto3" json:"refrash,omitempty"`
	NextRefreshTime int32   `protobuf:"varint,2,opt,name=next_refresh_time,json=nextRefreshTime,proto3" json:"next_refresh_time,omitempty"`
	GoodsId         []int32 `protobuf:"varint,3,rep,name=goods_id,json=goodsId" json:"goods_id,omitempty"`
	Discount        []int32 `protobuf:"varint,4,rep,name=discount" json:"discount,omitempty"`
	Buy             []bool  `protobuf:"varint,5,rep,name=buy" json:"buy,omitempty"`
}

func (m *S2CPushBlackMarketGoodsProto) Reset()                    { *m = S2CPushBlackMarketGoodsProto{} }
func (m *S2CPushBlackMarketGoodsProto) String() string            { return proto.CompactTextString(m) }
func (*S2CPushBlackMarketGoodsProto) ProtoMessage()               {}
func (*S2CPushBlackMarketGoodsProto) Descriptor() ([]byte, []int) { return fileDescriptorShop, []int{4} }

func (m *S2CPushBlackMarketGoodsProto) GetRefrash() bool {
	if m != nil {
		return m.Refrash
	}
	return false
}

func (m *S2CPushBlackMarketGoodsProto) GetNextRefreshTime() int32 {
	if m != nil {
		return m.NextRefreshTime
	}
	return 0
}

func (m *S2CPushBlackMarketGoodsProto) GetGoodsId() []int32 {
	if m != nil {
		return m.GoodsId
	}
	return nil
}

func (m *S2CPushBlackMarketGoodsProto) GetDiscount() []int32 {
	if m != nil {
		return m.Discount
	}
	return nil
}

func (m *S2CPushBlackMarketGoodsProto) GetBuy() []bool {
	if m != nil {
		return m.Buy
	}
	return nil
}

type C2SBuyBlackMarketGoodsProto struct {
	Index int32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *C2SBuyBlackMarketGoodsProto) Reset()                    { *m = C2SBuyBlackMarketGoodsProto{} }
func (m *C2SBuyBlackMarketGoodsProto) String() string            { return proto.CompactTextString(m) }
func (*C2SBuyBlackMarketGoodsProto) ProtoMessage()               {}
func (*C2SBuyBlackMarketGoodsProto) Descriptor() ([]byte, []int) { return fileDescriptorShop, []int{5} }

func (m *C2SBuyBlackMarketGoodsProto) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

type S2CBuyBlackMarketGoodsProto struct {
	Index int32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *S2CBuyBlackMarketGoodsProto) Reset()                    { *m = S2CBuyBlackMarketGoodsProto{} }
func (m *S2CBuyBlackMarketGoodsProto) String() string            { return proto.CompactTextString(m) }
func (*S2CBuyBlackMarketGoodsProto) ProtoMessage()               {}
func (*S2CBuyBlackMarketGoodsProto) Descriptor() ([]byte, []int) { return fileDescriptorShop, []int{6} }

func (m *S2CBuyBlackMarketGoodsProto) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

type S2CUpdateVipShopGoodsProto struct {
	Id    int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Count int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *S2CUpdateVipShopGoodsProto) Reset()                    { *m = S2CUpdateVipShopGoodsProto{} }
func (m *S2CUpdateVipShopGoodsProto) String() string            { return proto.CompactTextString(m) }
func (*S2CUpdateVipShopGoodsProto) ProtoMessage()               {}
func (*S2CUpdateVipShopGoodsProto) Descriptor() ([]byte, []int) { return fileDescriptorShop, []int{7} }

func (m *S2CUpdateVipShopGoodsProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *S2CUpdateVipShopGoodsProto) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func init() {
	proto.RegisterType((*S2CUpdateDailyShopGoodsProto)(nil), "proto.S2CUpdateDailyShopGoodsProto")
	proto.RegisterType((*C2SBuyGoodsProto)(nil), "proto.C2SBuyGoodsProto")
	proto.RegisterType((*S2CBuyGoodsProto)(nil), "proto.S2CBuyGoodsProto")
	proto.RegisterType((*S2CMultiCritBroadcastProto)(nil), "proto.S2CMultiCritBroadcastProto")
	proto.RegisterType((*S2CPushBlackMarketGoodsProto)(nil), "proto.S2CPushBlackMarketGoodsProto")
	proto.RegisterType((*C2SBuyBlackMarketGoodsProto)(nil), "proto.C2SBuyBlackMarketGoodsProto")
	proto.RegisterType((*S2CBuyBlackMarketGoodsProto)(nil), "proto.S2CBuyBlackMarketGoodsProto")
	proto.RegisterType((*S2CUpdateVipShopGoodsProto)(nil), "proto.S2CUpdateVipShopGoodsProto")
}
func (m *S2CUpdateDailyShopGoodsProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateDailyShopGoodsProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintShop(dAtA, i, uint64(m.Id))
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintShop(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *C2SBuyGoodsProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SBuyGoodsProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintShop(dAtA, i, uint64(m.Id))
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintShop(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *S2CBuyGoodsProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CBuyGoodsProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintShop(dAtA, i, uint64(m.Id))
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintShop(dAtA, i, uint64(m.Count))
	}
	if m.Multi != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintShop(dAtA, i, uint64(m.Multi))
	}
	if len(m.Prize) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintShop(dAtA, i, uint64(len(m.Prize)))
		i += copy(dAtA[i:], m.Prize)
	}
	return i, nil
}

func (m *S2CMultiCritBroadcastProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CMultiCritBroadcastProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Multi != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintShop(dAtA, i, uint64(m.Multi))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintShop(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.ShopType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintShop(dAtA, i, uint64(m.ShopType))
	}
	if len(m.Prize) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintShop(dAtA, i, uint64(len(m.Prize)))
		i += copy(dAtA[i:], m.Prize)
	}
	return i, nil
}

func (m *S2CPushBlackMarketGoodsProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CPushBlackMarketGoodsProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Refrash {
		dAtA[i] = 0x8
		i++
		if m.Refrash {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.NextRefreshTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintShop(dAtA, i, uint64(m.NextRefreshTime))
	}
	if len(m.GoodsId) > 0 {
		for _, num := range m.GoodsId {
			dAtA[i] = 0x18
			i++
			i = encodeVarintShop(dAtA, i, uint64(num))
		}
	}
	if len(m.Discount) > 0 {
		for _, num := range m.Discount {
			dAtA[i] = 0x20
			i++
			i = encodeVarintShop(dAtA, i, uint64(num))
		}
	}
	if len(m.Buy) > 0 {
		for _, b := range m.Buy {
			dAtA[i] = 0x28
			i++
			if b {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i++
		}
	}
	return i, nil
}

func (m *C2SBuyBlackMarketGoodsProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SBuyBlackMarketGoodsProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintShop(dAtA, i, uint64(m.Index))
	}
	return i, nil
}

func (m *S2CBuyBlackMarketGoodsProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CBuyBlackMarketGoodsProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintShop(dAtA, i, uint64(m.Index))
	}
	return i, nil
}

func (m *S2CUpdateVipShopGoodsProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateVipShopGoodsProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintShop(dAtA, i, uint64(m.Id))
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintShop(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func encodeFixed64Shop(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Shop(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintShop(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *S2CUpdateDailyShopGoodsProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovShop(uint64(m.Id))
	}
	if m.Count != 0 {
		n += 1 + sovShop(uint64(m.Count))
	}
	return n
}

func (m *C2SBuyGoodsProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovShop(uint64(m.Id))
	}
	if m.Count != 0 {
		n += 1 + sovShop(uint64(m.Count))
	}
	return n
}

func (m *S2CBuyGoodsProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovShop(uint64(m.Id))
	}
	if m.Count != 0 {
		n += 1 + sovShop(uint64(m.Count))
	}
	if m.Multi != 0 {
		n += 1 + sovShop(uint64(m.Multi))
	}
	l = len(m.Prize)
	if l > 0 {
		n += 1 + l + sovShop(uint64(l))
	}
	return n
}

func (m *S2CMultiCritBroadcastProto) Size() (n int) {
	var l int
	_ = l
	if m.Multi != 0 {
		n += 1 + sovShop(uint64(m.Multi))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovShop(uint64(l))
	}
	if m.ShopType != 0 {
		n += 1 + sovShop(uint64(m.ShopType))
	}
	l = len(m.Prize)
	if l > 0 {
		n += 1 + l + sovShop(uint64(l))
	}
	return n
}

func (m *S2CPushBlackMarketGoodsProto) Size() (n int) {
	var l int
	_ = l
	if m.Refrash {
		n += 2
	}
	if m.NextRefreshTime != 0 {
		n += 1 + sovShop(uint64(m.NextRefreshTime))
	}
	if len(m.GoodsId) > 0 {
		for _, e := range m.GoodsId {
			n += 1 + sovShop(uint64(e))
		}
	}
	if len(m.Discount) > 0 {
		for _, e := range m.Discount {
			n += 1 + sovShop(uint64(e))
		}
	}
	if len(m.Buy) > 0 {
		n += 2 * len(m.Buy)
	}
	return n
}

func (m *C2SBuyBlackMarketGoodsProto) Size() (n int) {
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovShop(uint64(m.Index))
	}
	return n
}

func (m *S2CBuyBlackMarketGoodsProto) Size() (n int) {
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovShop(uint64(m.Index))
	}
	return n
}

func (m *S2CUpdateVipShopGoodsProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovShop(uint64(m.Id))
	}
	if m.Count != 0 {
		n += 1 + sovShop(uint64(m.Count))
	}
	return n
}

func sovShop(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozShop(x uint64) (n int) {
	return sovShop(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *S2CUpdateDailyShopGoodsProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateDailyShopGoodsProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateDailyShopGoodsProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SBuyGoodsProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SBuyGoodsProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SBuyGoodsProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CBuyGoodsProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CBuyGoodsProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CBuyGoodsProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Multi", wireType)
			}
			m.Multi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Multi |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prize", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShop
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prize = append(m.Prize[:0], dAtA[iNdEx:postIndex]...)
			if m.Prize == nil {
				m.Prize = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CMultiCritBroadcastProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CMultiCritBroadcastProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CMultiCritBroadcastProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Multi", wireType)
			}
			m.Multi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Multi |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShop
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopType", wireType)
			}
			m.ShopType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShopType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prize", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthShop
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prize = append(m.Prize[:0], dAtA[iNdEx:postIndex]...)
			if m.Prize == nil {
				m.Prize = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CPushBlackMarketGoodsProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CPushBlackMarketGoodsProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CPushBlackMarketGoodsProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Refrash", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Refrash = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextRefreshTime", wireType)
			}
			m.NextRefreshTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextRefreshTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowShop
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GoodsId = append(m.GoodsId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowShop
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthShop
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowShop
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GoodsId = append(m.GoodsId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowShop
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Discount = append(m.Discount, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowShop
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthShop
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowShop
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Discount = append(m.Discount, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Discount", wireType)
			}
		case 5:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowShop
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Buy = append(m.Buy, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowShop
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthShop
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowShop
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Buy = append(m.Buy, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Buy", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SBuyBlackMarketGoodsProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SBuyBlackMarketGoodsProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SBuyBlackMarketGoodsProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CBuyBlackMarketGoodsProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CBuyBlackMarketGoodsProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CBuyBlackMarketGoodsProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateVipShopGoodsProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateVipShopGoodsProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateVipShopGoodsProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipShop(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowShop
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShop
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShop
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthShop
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowShop
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipShop(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthShop = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowShop   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/gen/pb/shop/shop.proto", fileDescriptorShop)
}

var fileDescriptorShop = []byte{
	// 426 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xc1, 0x6e, 0xd4, 0x30,
	0x10, 0x86, 0xeb, 0xcd, 0x86, 0xa6, 0x23, 0x04, 0x8b, 0xb5, 0x07, 0x8b, 0x42, 0xb4, 0xda, 0xd3,
	0x8a, 0x43, 0x83, 0xb6, 0x07, 0x38, 0x27, 0x95, 0x80, 0x43, 0xa5, 0x2a, 0x29, 0x1c, 0xb8, 0x44,
	0x4e, 0x6c, 0x12, 0xab, 0x49, 0x6c, 0x25, 0x8e, 0x68, 0x78, 0x12, 0x5e, 0x85, 0x37, 0xe0, 0xc8,
	0x23, 0xa0, 0xe5, 0x45, 0x90, 0xed, 0x76, 0xd5, 0x03, 0x1c, 0xda, 0x4b, 0x92, 0xff, 0x1b, 0xcf,
	0xfc, 0xce, 0xcc, 0xc0, 0xeb, 0x4a, 0xe8, 0x7a, 0x2c, 0x4e, 0x4a, 0xd9, 0x46, 0x8d, 0xa8, 0x6a,
	0xad, 0xe8, 0xd7, 0xa8, 0xa5, 0x0d, 0x7f, 0x13, 0x55, 0xbc, 0x8b, 0x54, 0x11, 0x0d, 0xb5, 0x54,
	0xf6, 0x71, 0xa2, 0x7a, 0xa9, 0x25, 0xf6, 0xed, 0x6b, 0x7d, 0x06, 0x2f, 0xb2, 0x6d, 0xf2, 0x51,
	0x31, 0xaa, 0xf9, 0x19, 0x15, 0xcd, 0x94, 0xd5, 0x52, 0xbd, 0x93, 0x92, 0x0d, 0x17, 0xf6, 0xd8,
	0x13, 0x98, 0x09, 0x46, 0xd0, 0x0a, 0x6d, 0xfc, 0x74, 0x26, 0x18, 0x5e, 0x82, 0x5f, 0xca, 0xb1,
	0xd3, 0x64, 0x66, 0x91, 0x13, 0xeb, 0xb7, 0xb0, 0x48, 0xb6, 0x59, 0x3c, 0x4e, 0xf7, 0xce, 0x64,
	0xb0, 0xc8, 0xb6, 0xc9, 0x03, 0x32, 0x0d, 0x6d, 0xc7, 0x46, 0x0b, 0xe2, 0x39, 0x6a, 0x85, 0xa1,
	0xaa, 0x17, 0xdf, 0x38, 0x99, 0xaf, 0xd0, 0xe6, 0x71, 0xea, 0xc4, 0x7a, 0x82, 0xe7, 0xd9, 0x36,
	0x39, 0x37, 0x27, 0x92, 0x5e, 0xe8, 0xb8, 0x97, 0x94, 0x95, 0x74, 0xd0, 0xce, 0x6f, 0x5f, 0x09,
	0xdd, 0xad, 0x84, 0x61, 0xde, 0xd1, 0x96, 0x5b, 0xd3, 0xa3, 0xd4, 0x7e, 0xe3, 0x63, 0x38, 0x32,
	0x2d, 0xcc, 0xf5, 0xa4, 0xf8, 0x8d, 0x6f, 0x60, 0xc0, 0xe5, 0xa4, 0xf8, 0x7f, 0xac, 0x7f, 0x20,
	0xdb, 0xe1, 0x8b, 0x71, 0xa8, 0xe3, 0x86, 0x96, 0x57, 0xe7, 0xb4, 0xbf, 0xe2, 0xfa, 0xce, 0xdf,
	0x12, 0x38, 0xec, 0xf9, 0x97, 0x9e, 0x0e, 0xb5, 0xf5, 0x0f, 0xd2, 0x5b, 0x89, 0x5f, 0xc1, 0xb3,
	0x8e, 0x5f, 0xeb, 0xdc, 0x68, 0x3e, 0xd4, 0xb9, 0x16, 0x37, 0xd7, 0xf1, 0xd3, 0xa7, 0x26, 0x90,
	0x3a, 0x7e, 0x29, 0x5a, 0x8e, 0x5f, 0x42, 0x50, 0x99, 0x9a, 0xb9, 0x60, 0xc4, 0x5b, 0x79, 0x1b,
	0x3f, 0x9e, 0x2d, 0x0e, 0xd2, 0x43, 0xcb, 0x3e, 0x30, 0x1c, 0x42, 0xc0, 0xc4, 0xe0, 0xba, 0x38,
	0xdf, 0x87, 0xf7, 0x0c, 0x2f, 0xc1, 0x2b, 0xc6, 0x89, 0xf8, 0x2b, 0x6f, 0x13, 0xd8, 0x90, 0x91,
	0xeb, 0x53, 0x38, 0x76, 0x63, 0xfd, 0xf7, 0xcd, 0x97, 0xe0, 0x8b, 0x8e, 0xf1, 0xeb, 0xdb, 0xbe,
	0x59, 0x61, 0x92, 0xdc, 0x44, 0xef, 0x93, 0x14, 0xdb, 0x01, 0xb9, 0x35, 0xfc, 0x24, 0xd4, 0x43,
	0x96, 0x30, 0x26, 0x3f, 0x77, 0x21, 0xfa, 0xb5, 0x0b, 0xd1, 0xef, 0x5d, 0x88, 0xbe, 0xff, 0x09,
	0x0f, 0xde, 0xa3, 0xcf, 0x73, 0x33, 0x9d, 0xe2, 0x91, 0xdd, 0xf5, 0xd3, 0xbf, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x4f, 0x80, 0xb7, 0x6a, 0x26, 0x03, 0x00, 0x00,
}
