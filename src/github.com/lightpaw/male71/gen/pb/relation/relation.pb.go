// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/gen/pb/relation/relation.proto
// DO NOT EDIT!

/*
	Package relation is a generated protocol buffer package.

	It is generated from these files:
		github.com/lightpaw/male7/gen/pb/relation/relation.proto

	It has these top-level messages:
		C2SAddRelationProto
		S2CAddRelationProto
		S2CAddEnemyProto
		C2SRemoveEnemyProto
		S2CRemoveEnemyProto
		C2SRemoveRelationProto
		S2CRemoveRelationProto
		C2SListRelationProto
		S2CListRelationProto
		C2SNewListRelationProto
		S2CNewListRelationProto
		C2SRecommendHeroListProto
		S2CRecommendHeroListProto
		C2SSearchHerosProto
		S2CSearchHerosProto
		C2SSearchHeroByIdProto
		S2CSearchHeroByIdProto
		C2SSetImportantFriendProto
		S2CSetImportantFriendProto
		C2SCancelImportantFriendProto
		S2CCancelImportantFriendProto
*/
package relation

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import proto2 "github.com/lightpaw/male7/pb/shared_proto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type C2SAddRelationProto struct {
	Friend bool   `protobuf:"varint,1,opt,name=friend,proto3" json:"friend,omitempty"`
	Id     []byte `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SAddRelationProto) Reset()                    { *m = C2SAddRelationProto{} }
func (m *C2SAddRelationProto) String() string            { return proto.CompactTextString(m) }
func (*C2SAddRelationProto) ProtoMessage()               {}
func (*C2SAddRelationProto) Descriptor() ([]byte, []int) { return fileDescriptorRelation, []int{0} }

func (m *C2SAddRelationProto) GetFriend() bool {
	if m != nil {
		return m.Friend
	}
	return false
}

func (m *C2SAddRelationProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type S2CAddRelationProto struct {
	Friend     bool   `protobuf:"varint,1,opt,name=friend,proto3" json:"friend,omitempty"`
	Id         []byte `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Proto      []byte `protobuf:"bytes,3,opt,name=proto,proto3" json:"proto,omitempty"`
	CreateTime int32  `protobuf:"varint,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (m *S2CAddRelationProto) Reset()                    { *m = S2CAddRelationProto{} }
func (m *S2CAddRelationProto) String() string            { return proto.CompactTextString(m) }
func (*S2CAddRelationProto) ProtoMessage()               {}
func (*S2CAddRelationProto) Descriptor() ([]byte, []int) { return fileDescriptorRelation, []int{1} }

func (m *S2CAddRelationProto) GetFriend() bool {
	if m != nil {
		return m.Friend
	}
	return false
}

func (m *S2CAddRelationProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *S2CAddRelationProto) GetProto() []byte {
	if m != nil {
		return m.Proto
	}
	return nil
}

func (m *S2CAddRelationProto) GetCreateTime() int32 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

type S2CAddEnemyProto struct {
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *S2CAddEnemyProto) Reset()                    { *m = S2CAddEnemyProto{} }
func (m *S2CAddEnemyProto) String() string            { return proto.CompactTextString(m) }
func (*S2CAddEnemyProto) ProtoMessage()               {}
func (*S2CAddEnemyProto) Descriptor() ([]byte, []int) { return fileDescriptorRelation, []int{2} }

func (m *S2CAddEnemyProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type C2SRemoveEnemyProto struct {
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SRemoveEnemyProto) Reset()                    { *m = C2SRemoveEnemyProto{} }
func (m *C2SRemoveEnemyProto) String() string            { return proto.CompactTextString(m) }
func (*C2SRemoveEnemyProto) ProtoMessage()               {}
func (*C2SRemoveEnemyProto) Descriptor() ([]byte, []int) { return fileDescriptorRelation, []int{3} }

func (m *C2SRemoveEnemyProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type S2CRemoveEnemyProto struct {
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *S2CRemoveEnemyProto) Reset()                    { *m = S2CRemoveEnemyProto{} }
func (m *S2CRemoveEnemyProto) String() string            { return proto.CompactTextString(m) }
func (*S2CRemoveEnemyProto) ProtoMessage()               {}
func (*S2CRemoveEnemyProto) Descriptor() ([]byte, []int) { return fileDescriptorRelation, []int{4} }

func (m *S2CRemoveEnemyProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type C2SRemoveRelationProto struct {
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SRemoveRelationProto) Reset()                    { *m = C2SRemoveRelationProto{} }
func (m *C2SRemoveRelationProto) String() string            { return proto.CompactTextString(m) }
func (*C2SRemoveRelationProto) ProtoMessage()               {}
func (*C2SRemoveRelationProto) Descriptor() ([]byte, []int) { return fileDescriptorRelation, []int{5} }

func (m *C2SRemoveRelationProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type S2CRemoveRelationProto struct {
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Rt int32  `protobuf:"varint,2,opt,name=rt,proto3" json:"rt,omitempty"`
}

func (m *S2CRemoveRelationProto) Reset()                    { *m = S2CRemoveRelationProto{} }
func (m *S2CRemoveRelationProto) String() string            { return proto.CompactTextString(m) }
func (*S2CRemoveRelationProto) ProtoMessage()               {}
func (*S2CRemoveRelationProto) Descriptor() ([]byte, []int) { return fileDescriptorRelation, []int{6} }

func (m *S2CRemoveRelationProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *S2CRemoveRelationProto) GetRt() int32 {
	if m != nil {
		return m.Rt
	}
	return 0
}

type C2SListRelationProto struct {
	Version int32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *C2SListRelationProto) Reset()                    { *m = C2SListRelationProto{} }
func (m *C2SListRelationProto) String() string            { return proto.CompactTextString(m) }
func (*C2SListRelationProto) ProtoMessage()               {}
func (*C2SListRelationProto) Descriptor() ([]byte, []int) { return fileDescriptorRelation, []int{7} }

func (m *C2SListRelationProto) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type S2CListRelationProto struct {
	Version int32    `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Proto   [][]byte `protobuf:"bytes,2,rep,name=proto" json:"proto,omitempty"`
}

func (m *S2CListRelationProto) Reset()                    { *m = S2CListRelationProto{} }
func (m *S2CListRelationProto) String() string            { return proto.CompactTextString(m) }
func (*S2CListRelationProto) ProtoMessage()               {}
func (*S2CListRelationProto) Descriptor() ([]byte, []int) { return fileDescriptorRelation, []int{8} }

func (m *S2CListRelationProto) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *S2CListRelationProto) GetProto() [][]byte {
	if m != nil {
		return m.Proto
	}
	return nil
}

type C2SNewListRelationProto struct {
	Version int32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *C2SNewListRelationProto) Reset()                    { *m = C2SNewListRelationProto{} }
func (m *C2SNewListRelationProto) String() string            { return proto.CompactTextString(m) }
func (*C2SNewListRelationProto) ProtoMessage()               {}
func (*C2SNewListRelationProto) Descriptor() ([]byte, []int) { return fileDescriptorRelation, []int{9} }

func (m *C2SNewListRelationProto) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type S2CNewListRelationProto struct {
	Version int32    `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Proto   [][]byte `protobuf:"bytes,2,rep,name=proto" json:"proto,omitempty"`
}

func (m *S2CNewListRelationProto) Reset()                    { *m = S2CNewListRelationProto{} }
func (m *S2CNewListRelationProto) String() string            { return proto.CompactTextString(m) }
func (*S2CNewListRelationProto) ProtoMessage()               {}
func (*S2CNewListRelationProto) Descriptor() ([]byte, []int) { return fileDescriptorRelation, []int{10} }

func (m *S2CNewListRelationProto) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *S2CNewListRelationProto) GetProto() [][]byte {
	if m != nil {
		return m.Proto
	}
	return nil
}

type C2SRecommendHeroListProto struct {
	Page    int32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	NeedLoc bool  `protobuf:"varint,2,opt,name=need_loc,json=needLoc,proto3" json:"need_loc,omitempty"`
	Loc     int32 `protobuf:"varint,3,opt,name=loc,proto3" json:"loc,omitempty"`
}

func (m *C2SRecommendHeroListProto) Reset()         { *m = C2SRecommendHeroListProto{} }
func (m *C2SRecommendHeroListProto) String() string { return proto.CompactTextString(m) }
func (*C2SRecommendHeroListProto) ProtoMessage()    {}
func (*C2SRecommendHeroListProto) Descriptor() ([]byte, []int) {
	return fileDescriptorRelation, []int{11}
}

func (m *C2SRecommendHeroListProto) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *C2SRecommendHeroListProto) GetNeedLoc() bool {
	if m != nil {
		return m.NeedLoc
	}
	return false
}

func (m *C2SRecommendHeroListProto) GetLoc() int32 {
	if m != nil {
		return m.Loc
	}
	return 0
}

type S2CRecommendHeroListProto struct {
	Page  int32                            `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Heros []*proto2.HeroBasicSnapshotProto `protobuf:"bytes,2,rep,name=heros" json:"heros,omitempty"`
}

func (m *S2CRecommendHeroListProto) Reset()         { *m = S2CRecommendHeroListProto{} }
func (m *S2CRecommendHeroListProto) String() string { return proto.CompactTextString(m) }
func (*S2CRecommendHeroListProto) ProtoMessage()    {}
func (*S2CRecommendHeroListProto) Descriptor() ([]byte, []int) {
	return fileDescriptorRelation, []int{12}
}

func (m *S2CRecommendHeroListProto) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *S2CRecommendHeroListProto) GetHeros() []*proto2.HeroBasicSnapshotProto {
	if m != nil {
		return m.Heros
	}
	return nil
}

type C2SSearchHerosProto struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Page int32  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
}

func (m *C2SSearchHerosProto) Reset()                    { *m = C2SSearchHerosProto{} }
func (m *C2SSearchHerosProto) String() string            { return proto.CompactTextString(m) }
func (*C2SSearchHerosProto) ProtoMessage()               {}
func (*C2SSearchHerosProto) Descriptor() ([]byte, []int) { return fileDescriptorRelation, []int{13} }

func (m *C2SSearchHerosProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *C2SSearchHerosProto) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type S2CSearchHerosProto struct {
	Heros []*proto2.HeroBasicSnapshotProto `protobuf:"bytes,1,rep,name=heros" json:"heros,omitempty"`
}

func (m *S2CSearchHerosProto) Reset()                    { *m = S2CSearchHerosProto{} }
func (m *S2CSearchHerosProto) String() string            { return proto.CompactTextString(m) }
func (*S2CSearchHerosProto) ProtoMessage()               {}
func (*S2CSearchHerosProto) Descriptor() ([]byte, []int) { return fileDescriptorRelation, []int{14} }

func (m *S2CSearchHerosProto) GetHeros() []*proto2.HeroBasicSnapshotProto {
	if m != nil {
		return m.Heros
	}
	return nil
}

type C2SSearchHeroByIdProto struct {
	HeroId []byte `protobuf:"bytes,1,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
}

func (m *C2SSearchHeroByIdProto) Reset()                    { *m = C2SSearchHeroByIdProto{} }
func (m *C2SSearchHeroByIdProto) String() string            { return proto.CompactTextString(m) }
func (*C2SSearchHeroByIdProto) ProtoMessage()               {}
func (*C2SSearchHeroByIdProto) Descriptor() ([]byte, []int) { return fileDescriptorRelation, []int{15} }

func (m *C2SSearchHeroByIdProto) GetHeroId() []byte {
	if m != nil {
		return m.HeroId
	}
	return nil
}

type S2CSearchHeroByIdProto struct {
	Hero *proto2.HeroBasicSnapshotProto `protobuf:"bytes,1,opt,name=hero" json:"hero,omitempty"`
}

func (m *S2CSearchHeroByIdProto) Reset()                    { *m = S2CSearchHeroByIdProto{} }
func (m *S2CSearchHeroByIdProto) String() string            { return proto.CompactTextString(m) }
func (*S2CSearchHeroByIdProto) ProtoMessage()               {}
func (*S2CSearchHeroByIdProto) Descriptor() ([]byte, []int) { return fileDescriptorRelation, []int{16} }

func (m *S2CSearchHeroByIdProto) GetHero() *proto2.HeroBasicSnapshotProto {
	if m != nil {
		return m.Hero
	}
	return nil
}

type C2SSetImportantFriendProto struct {
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SSetImportantFriendProto) Reset()         { *m = C2SSetImportantFriendProto{} }
func (m *C2SSetImportantFriendProto) String() string { return proto.CompactTextString(m) }
func (*C2SSetImportantFriendProto) ProtoMessage()    {}
func (*C2SSetImportantFriendProto) Descriptor() ([]byte, []int) {
	return fileDescriptorRelation, []int{17}
}

func (m *C2SSetImportantFriendProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type S2CSetImportantFriendProto struct {
	Id      []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SetTime int32  `protobuf:"varint,2,opt,name=set_time,json=setTime,proto3" json:"set_time,omitempty"`
}

func (m *S2CSetImportantFriendProto) Reset()         { *m = S2CSetImportantFriendProto{} }
func (m *S2CSetImportantFriendProto) String() string { return proto.CompactTextString(m) }
func (*S2CSetImportantFriendProto) ProtoMessage()    {}
func (*S2CSetImportantFriendProto) Descriptor() ([]byte, []int) {
	return fileDescriptorRelation, []int{18}
}

func (m *S2CSetImportantFriendProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *S2CSetImportantFriendProto) GetSetTime() int32 {
	if m != nil {
		return m.SetTime
	}
	return 0
}

type C2SCancelImportantFriendProto struct {
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SCancelImportantFriendProto) Reset()         { *m = C2SCancelImportantFriendProto{} }
func (m *C2SCancelImportantFriendProto) String() string { return proto.CompactTextString(m) }
func (*C2SCancelImportantFriendProto) ProtoMessage()    {}
func (*C2SCancelImportantFriendProto) Descriptor() ([]byte, []int) {
	return fileDescriptorRelation, []int{19}
}

func (m *C2SCancelImportantFriendProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type S2CCancelImportantFriendProto struct {
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *S2CCancelImportantFriendProto) Reset()         { *m = S2CCancelImportantFriendProto{} }
func (m *S2CCancelImportantFriendProto) String() string { return proto.CompactTextString(m) }
func (*S2CCancelImportantFriendProto) ProtoMessage()    {}
func (*S2CCancelImportantFriendProto) Descriptor() ([]byte, []int) {
	return fileDescriptorRelation, []int{20}
}

func (m *S2CCancelImportantFriendProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func init() {
	proto.RegisterType((*C2SAddRelationProto)(nil), "proto.C2SAddRelationProto")
	proto.RegisterType((*S2CAddRelationProto)(nil), "proto.S2CAddRelationProto")
	proto.RegisterType((*S2CAddEnemyProto)(nil), "proto.S2CAddEnemyProto")
	proto.RegisterType((*C2SRemoveEnemyProto)(nil), "proto.C2SRemoveEnemyProto")
	proto.RegisterType((*S2CRemoveEnemyProto)(nil), "proto.S2CRemoveEnemyProto")
	proto.RegisterType((*C2SRemoveRelationProto)(nil), "proto.C2SRemoveRelationProto")
	proto.RegisterType((*S2CRemoveRelationProto)(nil), "proto.S2CRemoveRelationProto")
	proto.RegisterType((*C2SListRelationProto)(nil), "proto.C2SListRelationProto")
	proto.RegisterType((*S2CListRelationProto)(nil), "proto.S2CListRelationProto")
	proto.RegisterType((*C2SNewListRelationProto)(nil), "proto.C2SNewListRelationProto")
	proto.RegisterType((*S2CNewListRelationProto)(nil), "proto.S2CNewListRelationProto")
	proto.RegisterType((*C2SRecommendHeroListProto)(nil), "proto.C2SRecommendHeroListProto")
	proto.RegisterType((*S2CRecommendHeroListProto)(nil), "proto.S2CRecommendHeroListProto")
	proto.RegisterType((*C2SSearchHerosProto)(nil), "proto.C2SSearchHerosProto")
	proto.RegisterType((*S2CSearchHerosProto)(nil), "proto.S2CSearchHerosProto")
	proto.RegisterType((*C2SSearchHeroByIdProto)(nil), "proto.C2SSearchHeroByIdProto")
	proto.RegisterType((*S2CSearchHeroByIdProto)(nil), "proto.S2CSearchHeroByIdProto")
	proto.RegisterType((*C2SSetImportantFriendProto)(nil), "proto.C2SSetImportantFriendProto")
	proto.RegisterType((*S2CSetImportantFriendProto)(nil), "proto.S2CSetImportantFriendProto")
	proto.RegisterType((*C2SCancelImportantFriendProto)(nil), "proto.C2SCancelImportantFriendProto")
	proto.RegisterType((*S2CCancelImportantFriendProto)(nil), "proto.S2CCancelImportantFriendProto")
}
func (m *C2SAddRelationProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SAddRelationProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Friend {
		dAtA[i] = 0x8
		i++
		if m.Friend {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Id) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRelation(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *S2CAddRelationProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CAddRelationProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Friend {
		dAtA[i] = 0x8
		i++
		if m.Friend {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Id) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRelation(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Proto) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRelation(dAtA, i, uint64(len(m.Proto)))
		i += copy(dAtA[i:], m.Proto)
	}
	if m.CreateTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRelation(dAtA, i, uint64(m.CreateTime))
	}
	return i, nil
}

func (m *S2CAddEnemyProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CAddEnemyProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRelation(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *C2SRemoveEnemyProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SRemoveEnemyProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRelation(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *S2CRemoveEnemyProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CRemoveEnemyProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRelation(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *C2SRemoveRelationProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SRemoveRelationProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRelation(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *S2CRemoveRelationProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CRemoveRelationProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRelation(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Rt != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRelation(dAtA, i, uint64(m.Rt))
	}
	return i, nil
}

func (m *C2SListRelationProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SListRelationProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRelation(dAtA, i, uint64(m.Version))
	}
	return i, nil
}

func (m *S2CListRelationProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CListRelationProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRelation(dAtA, i, uint64(m.Version))
	}
	if len(m.Proto) > 0 {
		for _, b := range m.Proto {
			dAtA[i] = 0x12
			i++
			i = encodeVarintRelation(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *C2SNewListRelationProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SNewListRelationProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRelation(dAtA, i, uint64(m.Version))
	}
	return i, nil
}

func (m *S2CNewListRelationProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CNewListRelationProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRelation(dAtA, i, uint64(m.Version))
	}
	if len(m.Proto) > 0 {
		for _, b := range m.Proto {
			dAtA[i] = 0x12
			i++
			i = encodeVarintRelation(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *C2SRecommendHeroListProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SRecommendHeroListProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRelation(dAtA, i, uint64(m.Page))
	}
	if m.NeedLoc {
		dAtA[i] = 0x10
		i++
		if m.NeedLoc {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Loc != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRelation(dAtA, i, uint64(m.Loc))
	}
	return i, nil
}

func (m *S2CRecommendHeroListProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CRecommendHeroListProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRelation(dAtA, i, uint64(m.Page))
	}
	if len(m.Heros) > 0 {
		for _, msg := range m.Heros {
			dAtA[i] = 0x12
			i++
			i = encodeVarintRelation(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *C2SSearchHerosProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SSearchHerosProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRelation(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Page != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRelation(dAtA, i, uint64(m.Page))
	}
	return i, nil
}

func (m *S2CSearchHerosProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSearchHerosProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Heros) > 0 {
		for _, msg := range m.Heros {
			dAtA[i] = 0xa
			i++
			i = encodeVarintRelation(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *C2SSearchHeroByIdProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SSearchHeroByIdProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HeroId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRelation(dAtA, i, uint64(len(m.HeroId)))
		i += copy(dAtA[i:], m.HeroId)
	}
	return i, nil
}

func (m *S2CSearchHeroByIdProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSearchHeroByIdProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Hero != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRelation(dAtA, i, uint64(m.Hero.Size()))
		n1, err := m.Hero.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *C2SSetImportantFriendProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SSetImportantFriendProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRelation(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *S2CSetImportantFriendProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSetImportantFriendProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRelation(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.SetTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRelation(dAtA, i, uint64(m.SetTime))
	}
	return i, nil
}

func (m *C2SCancelImportantFriendProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCancelImportantFriendProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRelation(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *S2CCancelImportantFriendProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCancelImportantFriendProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRelation(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func encodeFixed64Relation(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Relation(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintRelation(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *C2SAddRelationProto) Size() (n int) {
	var l int
	_ = l
	if m.Friend {
		n += 2
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRelation(uint64(l))
	}
	return n
}

func (m *S2CAddRelationProto) Size() (n int) {
	var l int
	_ = l
	if m.Friend {
		n += 2
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRelation(uint64(l))
	}
	l = len(m.Proto)
	if l > 0 {
		n += 1 + l + sovRelation(uint64(l))
	}
	if m.CreateTime != 0 {
		n += 1 + sovRelation(uint64(m.CreateTime))
	}
	return n
}

func (m *S2CAddEnemyProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRelation(uint64(l))
	}
	return n
}

func (m *C2SRemoveEnemyProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRelation(uint64(l))
	}
	return n
}

func (m *S2CRemoveEnemyProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRelation(uint64(l))
	}
	return n
}

func (m *C2SRemoveRelationProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRelation(uint64(l))
	}
	return n
}

func (m *S2CRemoveRelationProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRelation(uint64(l))
	}
	if m.Rt != 0 {
		n += 1 + sovRelation(uint64(m.Rt))
	}
	return n
}

func (m *C2SListRelationProto) Size() (n int) {
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovRelation(uint64(m.Version))
	}
	return n
}

func (m *S2CListRelationProto) Size() (n int) {
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovRelation(uint64(m.Version))
	}
	if len(m.Proto) > 0 {
		for _, b := range m.Proto {
			l = len(b)
			n += 1 + l + sovRelation(uint64(l))
		}
	}
	return n
}

func (m *C2SNewListRelationProto) Size() (n int) {
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovRelation(uint64(m.Version))
	}
	return n
}

func (m *S2CNewListRelationProto) Size() (n int) {
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovRelation(uint64(m.Version))
	}
	if len(m.Proto) > 0 {
		for _, b := range m.Proto {
			l = len(b)
			n += 1 + l + sovRelation(uint64(l))
		}
	}
	return n
}

func (m *C2SRecommendHeroListProto) Size() (n int) {
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovRelation(uint64(m.Page))
	}
	if m.NeedLoc {
		n += 2
	}
	if m.Loc != 0 {
		n += 1 + sovRelation(uint64(m.Loc))
	}
	return n
}

func (m *S2CRecommendHeroListProto) Size() (n int) {
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovRelation(uint64(m.Page))
	}
	if len(m.Heros) > 0 {
		for _, e := range m.Heros {
			l = e.Size()
			n += 1 + l + sovRelation(uint64(l))
		}
	}
	return n
}

func (m *C2SSearchHerosProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRelation(uint64(l))
	}
	if m.Page != 0 {
		n += 1 + sovRelation(uint64(m.Page))
	}
	return n
}

func (m *S2CSearchHerosProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Heros) > 0 {
		for _, e := range m.Heros {
			l = e.Size()
			n += 1 + l + sovRelation(uint64(l))
		}
	}
	return n
}

func (m *C2SSearchHeroByIdProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.HeroId)
	if l > 0 {
		n += 1 + l + sovRelation(uint64(l))
	}
	return n
}

func (m *S2CSearchHeroByIdProto) Size() (n int) {
	var l int
	_ = l
	if m.Hero != nil {
		l = m.Hero.Size()
		n += 1 + l + sovRelation(uint64(l))
	}
	return n
}

func (m *C2SSetImportantFriendProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRelation(uint64(l))
	}
	return n
}

func (m *S2CSetImportantFriendProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRelation(uint64(l))
	}
	if m.SetTime != 0 {
		n += 1 + sovRelation(uint64(m.SetTime))
	}
	return n
}

func (m *C2SCancelImportantFriendProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRelation(uint64(l))
	}
	return n
}

func (m *S2CCancelImportantFriendProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRelation(uint64(l))
	}
	return n
}

func sovRelation(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRelation(x uint64) (n int) {
	return sovRelation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *C2SAddRelationProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SAddRelationProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SAddRelationProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Friend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Friend = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRelation
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRelation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CAddRelationProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CAddRelationProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CAddRelationProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Friend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Friend = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRelation
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proto", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRelation
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proto = append(m.Proto[:0], dAtA[iNdEx:postIndex]...)
			if m.Proto == nil {
				m.Proto = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRelation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRelation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CAddEnemyProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CAddEnemyProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CAddEnemyProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRelation
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRelation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SRemoveEnemyProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SRemoveEnemyProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SRemoveEnemyProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRelation
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRelation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CRemoveEnemyProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CRemoveEnemyProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CRemoveEnemyProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRelation
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRelation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SRemoveRelationProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SRemoveRelationProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SRemoveRelationProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRelation
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRelation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CRemoveRelationProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CRemoveRelationProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CRemoveRelationProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRelation
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rt", wireType)
			}
			m.Rt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rt |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRelation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRelation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SListRelationProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SListRelationProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SListRelationProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRelation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRelation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CListRelationProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CListRelationProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CListRelationProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proto", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRelation
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proto = append(m.Proto, make([]byte, postIndex-iNdEx))
			copy(m.Proto[len(m.Proto)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRelation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SNewListRelationProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SNewListRelationProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SNewListRelationProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRelation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRelation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CNewListRelationProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CNewListRelationProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CNewListRelationProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proto", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRelation
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proto = append(m.Proto, make([]byte, postIndex-iNdEx))
			copy(m.Proto[len(m.Proto)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRelation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SRecommendHeroListProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SRecommendHeroListProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SRecommendHeroListProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedLoc", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeedLoc = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Loc", wireType)
			}
			m.Loc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Loc |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRelation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRelation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CRecommendHeroListProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CRecommendHeroListProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CRecommendHeroListProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Heros", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Heros = append(m.Heros, &proto2.HeroBasicSnapshotProto{})
			if err := m.Heros[len(m.Heros)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRelation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SSearchHerosProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SSearchHerosProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SSearchHerosProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRelation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRelation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRelation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSearchHerosProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSearchHerosProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSearchHerosProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Heros", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Heros = append(m.Heros, &proto2.HeroBasicSnapshotProto{})
			if err := m.Heros[len(m.Heros)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRelation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SSearchHeroByIdProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SSearchHeroByIdProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SSearchHeroByIdProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRelation
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeroId = append(m.HeroId[:0], dAtA[iNdEx:postIndex]...)
			if m.HeroId == nil {
				m.HeroId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRelation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSearchHeroByIdProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSearchHeroByIdProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSearchHeroByIdProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hero", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRelation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hero == nil {
				m.Hero = &proto2.HeroBasicSnapshotProto{}
			}
			if err := m.Hero.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRelation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SSetImportantFriendProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SSetImportantFriendProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SSetImportantFriendProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRelation
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRelation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSetImportantFriendProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSetImportantFriendProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSetImportantFriendProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRelation
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetTime", wireType)
			}
			m.SetTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SetTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRelation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRelation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SCancelImportantFriendProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCancelImportantFriendProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCancelImportantFriendProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRelation
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRelation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCancelImportantFriendProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRelation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCancelImportantFriendProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCancelImportantFriendProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRelation
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRelation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRelation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRelation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRelation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRelation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRelation
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRelation
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRelation(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRelation = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRelation   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/gen/pb/relation/relation.proto", fileDescriptorRelation)
}

var fileDescriptorRelation = []byte{
	// 575 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xce, 0x2f, 0x53, 0x84, 0x2a, 0x37, 0xca, 0x9f, 0x48, 0x88, 0x2c, 0x21, 0xe5, 0x80,
	0x62, 0xea, 0x1c, 0xe8, 0x85, 0x03, 0xb1, 0x28, 0x0d, 0x54, 0x08, 0xd9, 0x9c, 0x10, 0x52, 0xb4,
	0xb1, 0x87, 0xd8, 0x52, 0xec, 0xb5, 0xd6, 0x4b, 0xab, 0xbe, 0x09, 0x8f, 0xc4, 0x91, 0x47, 0x40,
	0xe1, 0x45, 0x90, 0x67, 0x53, 0x47, 0x85, 0x92, 0x26, 0x3d, 0x79, 0x66, 0xf5, 0xfd, 0xcc, 0x8e,
	0x67, 0x16, 0x4e, 0x16, 0x91, 0x0c, 0xbf, 0xcd, 0x47, 0x3e, 0x8f, 0xad, 0x65, 0xb4, 0x08, 0x65,
	0xca, 0x2e, 0xad, 0x98, 0x2d, 0xf1, 0xa5, 0xb5, 0xc0, 0xc4, 0x4a, 0xe7, 0x96, 0xc0, 0x25, 0x93,
	0x11, 0x4f, 0x8a, 0x60, 0x94, 0x0a, 0x2e, 0xb9, 0x51, 0xa1, 0x4f, 0x77, 0x8b, 0x40, 0x3a, 0xb7,
	0xb2, 0x90, 0x09, 0x0c, 0x66, 0x04, 0xb5, 0xb2, 0x84, 0xa5, 0x59, 0xc8, 0xa5, 0x12, 0x30, 0x5f,
	0xc1, 0x91, 0x63, 0x7b, 0xaf, 0x83, 0xc0, 0x5d, 0x0b, 0x7f, 0x24, 0xdd, 0x26, 0x54, 0xbf, 0x8a,
	0x08, 0x93, 0xa0, 0xad, 0x0d, 0xb4, 0x61, 0xdd, 0x5d, 0x67, 0xc6, 0x63, 0xd0, 0xa3, 0xa0, 0xad,
	0x0f, 0xb4, 0xe1, 0x23, 0x57, 0x8f, 0x02, 0x53, 0xc2, 0x91, 0x67, 0x3b, 0xf7, 0xa5, 0x1b, 0x0d,
	0x50, 0x17, 0x68, 0x97, 0xe8, 0x48, 0x25, 0xc6, 0x53, 0x38, 0xf0, 0x05, 0x32, 0x89, 0x33, 0x19,
	0xc5, 0xd8, 0x2e, 0x0f, 0xb4, 0x61, 0xc5, 0x05, 0x75, 0xf4, 0x29, 0x8a, 0xd1, 0x34, 0xe1, 0x50,
	0xb9, 0xbe, 0x49, 0x30, 0xbe, 0x52, 0x96, 0x4a, 0x5a, 0x2b, 0x2a, 0x7b, 0x46, 0x17, 0x73, 0x31,
	0xe6, 0x17, 0xb8, 0x1d, 0xe6, 0xd9, 0xce, 0x9d, 0xb0, 0x21, 0x34, 0x0b, 0xb5, 0x9b, 0x57, 0xfd,
	0x1b, 0x79, 0x02, 0xcd, 0x42, 0x70, 0x2b, 0x32, 0xcf, 0x85, 0xa4, 0x66, 0x54, 0x5c, 0x5d, 0x48,
	0xf3, 0x05, 0x34, 0x1c, 0xdb, 0x3b, 0x8f, 0x32, 0x79, 0x93, 0xd7, 0x86, 0xda, 0x05, 0x8a, 0x2c,
	0xe2, 0x09, 0x91, 0x2b, 0xee, 0x75, 0x6a, 0x9e, 0x42, 0xc3, 0xb3, 0x9d, 0x3d, 0x18, 0x9b, 0x86,
	0xeb, 0x83, 0x52, 0xd1, 0x70, 0x73, 0x0c, 0x2d, 0xc7, 0xf6, 0x3e, 0xe0, 0xe5, 0x3e, 0xe6, 0x53,
	0x68, 0x79, 0xb6, 0xb3, 0x1f, 0xe9, 0x3f, 0xfe, 0x5f, 0xa0, 0x43, 0xdd, 0xf5, 0x79, 0x1c, 0x63,
	0x12, 0x9c, 0xa1, 0xe0, 0xb9, 0xa8, 0x12, 0x33, 0xa0, 0x9c, 0xb2, 0x05, 0xae, 0x95, 0x28, 0x36,
	0x3a, 0x50, 0x4f, 0x10, 0x83, 0xd9, 0x92, 0xfb, 0xd4, 0xc0, 0xba, 0x5b, 0xcb, 0xf3, 0x73, 0xee,
	0x1b, 0x87, 0x50, 0xca, 0x4f, 0x4b, 0x84, 0xce, 0x43, 0x33, 0x80, 0x0e, 0xfd, 0x91, 0x9d, 0xd5,
	0xc7, 0x50, 0x09, 0x51, 0xf0, 0x8c, 0x8a, 0x3c, 0xb0, 0x7b, 0x6a, 0x55, 0x46, 0x39, 0x71, 0xc2,
	0xb2, 0xc8, 0xf7, 0xd6, 0x2b, 0x44, 0x0a, 0xae, 0xc2, 0xae, 0x17, 0xc9, 0x43, 0x26, 0xfc, 0x30,
	0x47, 0x66, 0x85, 0x7e, 0xc2, 0x62, 0xa5, 0xff, 0xd0, 0xa5, 0xb8, 0xf0, 0xd4, 0x37, 0x9e, 0xe6,
	0x3b, 0x9a, 0xc3, 0x7f, 0xe8, 0x45, 0x29, 0xda, 0x1e, 0xa5, 0x1c, 0xd3, 0xb0, 0x6e, 0xb4, 0x26,
	0x57, 0xd3, 0x40, 0xc9, 0xb5, 0xa0, 0x96, 0x43, 0x66, 0xc5, 0x1c, 0x56, 0xf3, 0x74, 0x1a, 0x98,
	0xef, 0x69, 0x6a, 0x6f, 0xa3, 0x1c, 0x43, 0x39, 0xc7, 0x10, 0xfe, 0xce, 0x02, 0x08, 0x6a, 0x3e,
	0x87, 0x2e, 0xf9, 0xcb, 0x69, 0x9c, 0x72, 0x21, 0x59, 0x22, 0x4f, 0x69, 0xfd, 0x6f, 0x5f, 0x98,
	0xb7, 0xd0, 0x25, 0xeb, 0x9d, 0xd0, 0xf9, 0x9f, 0xcf, 0x50, 0xaa, 0x87, 0x41, 0xf5, 0xaf, 0x96,
	0xa1, 0xa4, 0x57, 0xc1, 0x82, 0x9e, 0x63, 0x7b, 0x0e, 0x4b, 0x7c, 0x5c, 0xee, 0xe4, 0x6c, 0x41,
	0xcf, 0xb3, 0x9d, 0xdd, 0x09, 0x93, 0x27, 0x3f, 0x56, 0x7d, 0xed, 0xe7, 0xaa, 0xaf, 0xfd, 0x5a,
	0xf5, 0xb5, 0xef, 0xbf, 0xfb, 0x0f, 0xce, 0xb4, 0xcf, 0xf5, 0xeb, 0x17, 0x79, 0x5e, 0xa5, 0xd6,
	0x8c, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0xc1, 0x05, 0x8c, 0x04, 0xce, 0x05, 0x00, 0x00,
}
