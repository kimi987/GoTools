// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/gen/pb/country/country.proto
// DO NOT EDIT!

/*
	Package country is a generated protocol buffer package.

	It is generated from these files:
		github.com/lightpaw/male7/gen/pb/country/country.proto

	It has these top-level messages:
		C2SRequestCountryPrestigeProto
		S2CRequestCountryPrestigeProto
		C2SRequestCountriesProto
		S2CRequestCountriesProto
		S2CCountriesUpdateNoticeProto
		C2SHeroChangeCountryProto
		S2CHeroChangeCountryProto
		C2SCountryDetailProto
		S2CCountryDetailProto
		C2SOfficialAppointProto
		S2COfficialAppointNoticeProto
		C2SOfficialDeposeProto
		S2CCountryHostChangedNoticeProto
		S2CCountryDestroyNoticeProto
		S2CKingChangedNoticeProto
		S2CCollectOfficialSalaryProto
		C2SChangeNameStartProto
		C2SChangeNameVoteProto
		S2CChangeNameVoteProto
		S2CHeroChangeNameVoteCountUpdateNoticeProto
		S2CChangeNameSuccNoticeProto
		C2SSearchToAppointHeroListProto
		S2CSearchToAppointHeroListProto
		S2CDefaultToAppointHeroListProto
*/
package country

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import proto1 "github.com/lightpaw/male7/pb/shared_proto"
import proto3 "github.com/lightpaw/male7/pb/shared_proto"
import proto10 "github.com/lightpaw/male7/pb/shared_proto"
import proto12 "github.com/lightpaw/male7/pb/shared_proto"
import proto2 "github.com/lightpaw/male7/pb/shared_proto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type C2SRequestCountryPrestigeProto struct {
	Vsn int32 `protobuf:"varint,1,opt,name=vsn,proto3" json:"vsn,omitempty"`
}

func (m *C2SRequestCountryPrestigeProto) Reset()         { *m = C2SRequestCountryPrestigeProto{} }
func (m *C2SRequestCountryPrestigeProto) String() string { return proto.CompactTextString(m) }
func (*C2SRequestCountryPrestigeProto) ProtoMessage()    {}
func (*C2SRequestCountryPrestigeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorCountry, []int{0}
}

func (m *C2SRequestCountryPrestigeProto) GetVsn() int32 {
	if m != nil {
		return m.Vsn
	}
	return 0
}

type S2CRequestCountryPrestigeProto struct {
	Vsn      int32   `protobuf:"varint,1,opt,name=vsn,proto3" json:"vsn,omitempty"`
	Ids      []int32 `protobuf:"varint,2,rep,name=ids" json:"ids,omitempty"`
	Prestige []int32 `protobuf:"varint,3,rep,name=prestige" json:"prestige,omitempty"`
}

func (m *S2CRequestCountryPrestigeProto) Reset()         { *m = S2CRequestCountryPrestigeProto{} }
func (m *S2CRequestCountryPrestigeProto) String() string { return proto.CompactTextString(m) }
func (*S2CRequestCountryPrestigeProto) ProtoMessage()    {}
func (*S2CRequestCountryPrestigeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorCountry, []int{1}
}

func (m *S2CRequestCountryPrestigeProto) GetVsn() int32 {
	if m != nil {
		return m.Vsn
	}
	return 0
}

func (m *S2CRequestCountryPrestigeProto) GetIds() []int32 {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *S2CRequestCountryPrestigeProto) GetPrestige() []int32 {
	if m != nil {
		return m.Prestige
	}
	return nil
}

type C2SRequestCountriesProto struct {
	Vsn int32 `protobuf:"varint,1,opt,name=vsn,proto3" json:"vsn,omitempty"`
}

func (m *C2SRequestCountriesProto) Reset()                    { *m = C2SRequestCountriesProto{} }
func (m *C2SRequestCountriesProto) String() string            { return proto.CompactTextString(m) }
func (*C2SRequestCountriesProto) ProtoMessage()               {}
func (*C2SRequestCountriesProto) Descriptor() ([]byte, []int) { return fileDescriptorCountry, []int{2} }

func (m *C2SRequestCountriesProto) GetVsn() int32 {
	if m != nil {
		return m.Vsn
	}
	return 0
}

type S2CRequestCountriesProto struct {
	Vsn       int32                  `protobuf:"varint,1,opt,name=vsn,proto3" json:"vsn,omitempty"`
	Countries *proto3.CountriesProto `protobuf:"bytes,2,opt,name=countries" json:"countries,omitempty"`
	McWar     *proto12.McWarProto    `protobuf:"bytes,3,opt,name=mc_war,json=mcWar" json:"mc_war,omitempty"`
	Mc        *proto10.MingcsProto   `protobuf:"bytes,4,opt,name=mc" json:"mc,omitempty"`
}

func (m *S2CRequestCountriesProto) Reset()                    { *m = S2CRequestCountriesProto{} }
func (m *S2CRequestCountriesProto) String() string            { return proto.CompactTextString(m) }
func (*S2CRequestCountriesProto) ProtoMessage()               {}
func (*S2CRequestCountriesProto) Descriptor() ([]byte, []int) { return fileDescriptorCountry, []int{3} }

func (m *S2CRequestCountriesProto) GetVsn() int32 {
	if m != nil {
		return m.Vsn
	}
	return 0
}

func (m *S2CRequestCountriesProto) GetCountries() *proto3.CountriesProto {
	if m != nil {
		return m.Countries
	}
	return nil
}

func (m *S2CRequestCountriesProto) GetMcWar() *proto12.McWarProto {
	if m != nil {
		return m.McWar
	}
	return nil
}

func (m *S2CRequestCountriesProto) GetMc() *proto10.MingcsProto {
	if m != nil {
		return m.Mc
	}
	return nil
}

type S2CCountriesUpdateNoticeProto struct {
	Countries *proto3.CountriesProto `protobuf:"bytes,1,opt,name=countries" json:"countries,omitempty"`
}

func (m *S2CCountriesUpdateNoticeProto) Reset()         { *m = S2CCountriesUpdateNoticeProto{} }
func (m *S2CCountriesUpdateNoticeProto) String() string { return proto.CompactTextString(m) }
func (*S2CCountriesUpdateNoticeProto) ProtoMessage()    {}
func (*S2CCountriesUpdateNoticeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorCountry, []int{4}
}

func (m *S2CCountriesUpdateNoticeProto) GetCountries() *proto3.CountriesProto {
	if m != nil {
		return m.Countries
	}
	return nil
}

type C2SHeroChangeCountryProto struct {
	NewCountry int32 `protobuf:"varint,1,opt,name=new_country,json=newCountry,proto3" json:"new_country,omitempty"`
	Buy        bool  `protobuf:"varint,2,opt,name=buy,proto3" json:"buy,omitempty"`
}

func (m *C2SHeroChangeCountryProto) Reset()                    { *m = C2SHeroChangeCountryProto{} }
func (m *C2SHeroChangeCountryProto) String() string            { return proto.CompactTextString(m) }
func (*C2SHeroChangeCountryProto) ProtoMessage()               {}
func (*C2SHeroChangeCountryProto) Descriptor() ([]byte, []int) { return fileDescriptorCountry, []int{5} }

func (m *C2SHeroChangeCountryProto) GetNewCountry() int32 {
	if m != nil {
		return m.NewCountry
	}
	return 0
}

func (m *C2SHeroChangeCountryProto) GetBuy() bool {
	if m != nil {
		return m.Buy
	}
	return false
}

type S2CHeroChangeCountryProto struct {
	NewCountry int32 `protobuf:"varint,1,opt,name=new_country,json=newCountry,proto3" json:"new_country,omitempty"`
	NewCd      int32 `protobuf:"varint,2,opt,name=new_cd,json=newCd,proto3" json:"new_cd,omitempty"`
	NormalCd   int32 `protobuf:"varint,3,opt,name=normal_cd,json=normalCd,proto3" json:"normal_cd,omitempty"`
}

func (m *S2CHeroChangeCountryProto) Reset()                    { *m = S2CHeroChangeCountryProto{} }
func (m *S2CHeroChangeCountryProto) String() string            { return proto.CompactTextString(m) }
func (*S2CHeroChangeCountryProto) ProtoMessage()               {}
func (*S2CHeroChangeCountryProto) Descriptor() ([]byte, []int) { return fileDescriptorCountry, []int{6} }

func (m *S2CHeroChangeCountryProto) GetNewCountry() int32 {
	if m != nil {
		return m.NewCountry
	}
	return 0
}

func (m *S2CHeroChangeCountryProto) GetNewCd() int32 {
	if m != nil {
		return m.NewCd
	}
	return 0
}

func (m *S2CHeroChangeCountryProto) GetNormalCd() int32 {
	if m != nil {
		return m.NormalCd
	}
	return 0
}

type C2SCountryDetailProto struct {
	CountryId int32 `protobuf:"varint,1,opt,name=country_id,json=countryId,proto3" json:"country_id,omitempty"`
}

func (m *C2SCountryDetailProto) Reset()                    { *m = C2SCountryDetailProto{} }
func (m *C2SCountryDetailProto) String() string            { return proto.CompactTextString(m) }
func (*C2SCountryDetailProto) ProtoMessage()               {}
func (*C2SCountryDetailProto) Descriptor() ([]byte, []int) { return fileDescriptorCountry, []int{7} }

func (m *C2SCountryDetailProto) GetCountryId() int32 {
	if m != nil {
		return m.CountryId
	}
	return 0
}

type S2CCountryDetailProto struct {
	Country *proto3.CountryDetailProto `protobuf:"bytes,1,opt,name=country" json:"country,omitempty"`
}

func (m *S2CCountryDetailProto) Reset()                    { *m = S2CCountryDetailProto{} }
func (m *S2CCountryDetailProto) String() string            { return proto.CompactTextString(m) }
func (*S2CCountryDetailProto) ProtoMessage()               {}
func (*S2CCountryDetailProto) Descriptor() ([]byte, []int) { return fileDescriptorCountry, []int{8} }

func (m *S2CCountryDetailProto) GetCountry() *proto3.CountryDetailProto {
	if m != nil {
		return m.Country
	}
	return nil
}

type C2SOfficialAppointProto struct {
	OfficialType proto1.CountryOfficialType `protobuf:"varint,2,opt,name=official_type,json=officialType,proto3,enum=proto.CountryOfficialType" json:"official_type,omitempty"`
	HeroId       []byte                     `protobuf:"bytes,3,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
	Pos          int32                      `protobuf:"varint,4,opt,name=pos,proto3" json:"pos,omitempty"`
}

func (m *C2SOfficialAppointProto) Reset()                    { *m = C2SOfficialAppointProto{} }
func (m *C2SOfficialAppointProto) String() string            { return proto.CompactTextString(m) }
func (*C2SOfficialAppointProto) ProtoMessage()               {}
func (*C2SOfficialAppointProto) Descriptor() ([]byte, []int) { return fileDescriptorCountry, []int{9} }

func (m *C2SOfficialAppointProto) GetOfficialType() proto1.CountryOfficialType {
	if m != nil {
		return m.OfficialType
	}
	return proto1.CountryOfficialType_COT_NO_OFFICIAL
}

func (m *C2SOfficialAppointProto) GetHeroId() []byte {
	if m != nil {
		return m.HeroId
	}
	return nil
}

func (m *C2SOfficialAppointProto) GetPos() int32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

type S2COfficialAppointNoticeProto struct {
	OfficialType int32 `protobuf:"varint,2,opt,name=official_type,json=officialType,proto3" json:"official_type,omitempty"`
}

func (m *S2COfficialAppointNoticeProto) Reset()         { *m = S2COfficialAppointNoticeProto{} }
func (m *S2COfficialAppointNoticeProto) String() string { return proto.CompactTextString(m) }
func (*S2COfficialAppointNoticeProto) ProtoMessage()    {}
func (*S2COfficialAppointNoticeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorCountry, []int{10}
}

func (m *S2COfficialAppointNoticeProto) GetOfficialType() int32 {
	if m != nil {
		return m.OfficialType
	}
	return 0
}

type C2SOfficialDeposeProto struct {
	HeroId []byte `protobuf:"bytes,3,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
}

func (m *C2SOfficialDeposeProto) Reset()                    { *m = C2SOfficialDeposeProto{} }
func (m *C2SOfficialDeposeProto) String() string            { return proto.CompactTextString(m) }
func (*C2SOfficialDeposeProto) ProtoMessage()               {}
func (*C2SOfficialDeposeProto) Descriptor() ([]byte, []int) { return fileDescriptorCountry, []int{11} }

func (m *C2SOfficialDeposeProto) GetHeroId() []byte {
	if m != nil {
		return m.HeroId
	}
	return nil
}

type S2CCountryHostChangedNoticeProto struct {
	CountryId int32 `protobuf:"varint,2,opt,name=country_id,json=countryId,proto3" json:"country_id,omitempty"`
}

func (m *S2CCountryHostChangedNoticeProto) Reset()         { *m = S2CCountryHostChangedNoticeProto{} }
func (m *S2CCountryHostChangedNoticeProto) String() string { return proto.CompactTextString(m) }
func (*S2CCountryHostChangedNoticeProto) ProtoMessage()    {}
func (*S2CCountryHostChangedNoticeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorCountry, []int{12}
}

func (m *S2CCountryHostChangedNoticeProto) GetCountryId() int32 {
	if m != nil {
		return m.CountryId
	}
	return 0
}

type S2CCountryDestroyNoticeProto struct {
	CountryId int32 `protobuf:"varint,1,opt,name=country_id,json=countryId,proto3" json:"country_id,omitempty"`
}

func (m *S2CCountryDestroyNoticeProto) Reset()         { *m = S2CCountryDestroyNoticeProto{} }
func (m *S2CCountryDestroyNoticeProto) String() string { return proto.CompactTextString(m) }
func (*S2CCountryDestroyNoticeProto) ProtoMessage()    {}
func (*S2CCountryDestroyNoticeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorCountry, []int{13}
}

func (m *S2CCountryDestroyNoticeProto) GetCountryId() int32 {
	if m != nil {
		return m.CountryId
	}
	return 0
}

type S2CKingChangedNoticeProto struct {
	CountryId int32 `protobuf:"varint,1,opt,name=country_id,json=countryId,proto3" json:"country_id,omitempty"`
}

func (m *S2CKingChangedNoticeProto) Reset()         { *m = S2CKingChangedNoticeProto{} }
func (m *S2CKingChangedNoticeProto) String() string { return proto.CompactTextString(m) }
func (*S2CKingChangedNoticeProto) ProtoMessage()    {}
func (*S2CKingChangedNoticeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorCountry, []int{14}
}

func (m *S2CKingChangedNoticeProto) GetCountryId() int32 {
	if m != nil {
		return m.CountryId
	}
	return 0
}

type S2CCollectOfficialSalaryProto struct {
	Salary *proto1.PrizeProto `protobuf:"bytes,1,opt,name=salary" json:"salary,omitempty"`
}

func (m *S2CCollectOfficialSalaryProto) Reset()         { *m = S2CCollectOfficialSalaryProto{} }
func (m *S2CCollectOfficialSalaryProto) String() string { return proto.CompactTextString(m) }
func (*S2CCollectOfficialSalaryProto) ProtoMessage()    {}
func (*S2CCollectOfficialSalaryProto) Descriptor() ([]byte, []int) {
	return fileDescriptorCountry, []int{15}
}

func (m *S2CCollectOfficialSalaryProto) GetSalary() *proto1.PrizeProto {
	if m != nil {
		return m.Salary
	}
	return nil
}

type C2SChangeNameStartProto struct {
	NewName string `protobuf:"bytes,1,opt,name=new_name,json=newName,proto3" json:"new_name,omitempty"`
}

func (m *C2SChangeNameStartProto) Reset()                    { *m = C2SChangeNameStartProto{} }
func (m *C2SChangeNameStartProto) String() string            { return proto.CompactTextString(m) }
func (*C2SChangeNameStartProto) ProtoMessage()               {}
func (*C2SChangeNameStartProto) Descriptor() ([]byte, []int) { return fileDescriptorCountry, []int{16} }

func (m *C2SChangeNameStartProto) GetNewName() string {
	if m != nil {
		return m.NewName
	}
	return ""
}

type C2SChangeNameVoteProto struct {
	Agree bool `protobuf:"varint,1,opt,name=agree,proto3" json:"agree,omitempty"`
}

func (m *C2SChangeNameVoteProto) Reset()                    { *m = C2SChangeNameVoteProto{} }
func (m *C2SChangeNameVoteProto) String() string            { return proto.CompactTextString(m) }
func (*C2SChangeNameVoteProto) ProtoMessage()               {}
func (*C2SChangeNameVoteProto) Descriptor() ([]byte, []int) { return fileDescriptorCountry, []int{17} }

func (m *C2SChangeNameVoteProto) GetAgree() bool {
	if m != nil {
		return m.Agree
	}
	return false
}

type S2CChangeNameVoteProto struct {
	Agree       bool  `protobuf:"varint,1,opt,name=agree,proto3" json:"agree,omitempty"`
	Count       int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	ReduceCount int32 `protobuf:"varint,3,opt,name=reduce_count,json=reduceCount,proto3" json:"reduce_count,omitempty"`
}

func (m *S2CChangeNameVoteProto) Reset()                    { *m = S2CChangeNameVoteProto{} }
func (m *S2CChangeNameVoteProto) String() string            { return proto.CompactTextString(m) }
func (*S2CChangeNameVoteProto) ProtoMessage()               {}
func (*S2CChangeNameVoteProto) Descriptor() ([]byte, []int) { return fileDescriptorCountry, []int{18} }

func (m *S2CChangeNameVoteProto) GetAgree() bool {
	if m != nil {
		return m.Agree
	}
	return false
}

func (m *S2CChangeNameVoteProto) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *S2CChangeNameVoteProto) GetReduceCount() int32 {
	if m != nil {
		return m.ReduceCount
	}
	return 0
}

type S2CHeroChangeNameVoteCountUpdateNoticeProto struct {
	NewCount int32 `protobuf:"varint,1,opt,name=new_count,json=newCount,proto3" json:"new_count,omitempty"`
}

func (m *S2CHeroChangeNameVoteCountUpdateNoticeProto) Reset() {
	*m = S2CHeroChangeNameVoteCountUpdateNoticeProto{}
}
func (m *S2CHeroChangeNameVoteCountUpdateNoticeProto) String() string {
	return proto.CompactTextString(m)
}
func (*S2CHeroChangeNameVoteCountUpdateNoticeProto) ProtoMessage() {}
func (*S2CHeroChangeNameVoteCountUpdateNoticeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorCountry, []int{19}
}

func (m *S2CHeroChangeNameVoteCountUpdateNoticeProto) GetNewCount() int32 {
	if m != nil {
		return m.NewCount
	}
	return 0
}

type S2CChangeNameSuccNoticeProto struct {
	Succ    bool   `protobuf:"varint,3,opt,name=succ,proto3" json:"succ,omitempty"`
	Country int32  `protobuf:"varint,1,opt,name=country,proto3" json:"country,omitempty"`
	NewName string `protobuf:"bytes,2,opt,name=new_name,json=newName,proto3" json:"new_name,omitempty"`
}

func (m *S2CChangeNameSuccNoticeProto) Reset()         { *m = S2CChangeNameSuccNoticeProto{} }
func (m *S2CChangeNameSuccNoticeProto) String() string { return proto.CompactTextString(m) }
func (*S2CChangeNameSuccNoticeProto) ProtoMessage()    {}
func (*S2CChangeNameSuccNoticeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorCountry, []int{20}
}

func (m *S2CChangeNameSuccNoticeProto) GetSucc() bool {
	if m != nil {
		return m.Succ
	}
	return false
}

func (m *S2CChangeNameSuccNoticeProto) GetCountry() int32 {
	if m != nil {
		return m.Country
	}
	return 0
}

func (m *S2CChangeNameSuccNoticeProto) GetNewName() string {
	if m != nil {
		return m.NewName
	}
	return ""
}

type C2SSearchToAppointHeroListProto struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *C2SSearchToAppointHeroListProto) Reset()         { *m = C2SSearchToAppointHeroListProto{} }
func (m *C2SSearchToAppointHeroListProto) String() string { return proto.CompactTextString(m) }
func (*C2SSearchToAppointHeroListProto) ProtoMessage()    {}
func (*C2SSearchToAppointHeroListProto) Descriptor() ([]byte, []int) {
	return fileDescriptorCountry, []int{21}
}

func (m *C2SSearchToAppointHeroListProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type S2CSearchToAppointHeroListProto struct {
	Heros []*proto2.HeroBasicSnapshotProto `protobuf:"bytes,1,rep,name=heros" json:"heros,omitempty"`
}

func (m *S2CSearchToAppointHeroListProto) Reset()         { *m = S2CSearchToAppointHeroListProto{} }
func (m *S2CSearchToAppointHeroListProto) String() string { return proto.CompactTextString(m) }
func (*S2CSearchToAppointHeroListProto) ProtoMessage()    {}
func (*S2CSearchToAppointHeroListProto) Descriptor() ([]byte, []int) {
	return fileDescriptorCountry, []int{22}
}

func (m *S2CSearchToAppointHeroListProto) GetHeros() []*proto2.HeroBasicSnapshotProto {
	if m != nil {
		return m.Heros
	}
	return nil
}

type S2CDefaultToAppointHeroListProto struct {
	Heros []*proto2.HeroBasicSnapshotProto `protobuf:"bytes,1,rep,name=heros" json:"heros,omitempty"`
}

func (m *S2CDefaultToAppointHeroListProto) Reset()         { *m = S2CDefaultToAppointHeroListProto{} }
func (m *S2CDefaultToAppointHeroListProto) String() string { return proto.CompactTextString(m) }
func (*S2CDefaultToAppointHeroListProto) ProtoMessage()    {}
func (*S2CDefaultToAppointHeroListProto) Descriptor() ([]byte, []int) {
	return fileDescriptorCountry, []int{23}
}

func (m *S2CDefaultToAppointHeroListProto) GetHeros() []*proto2.HeroBasicSnapshotProto {
	if m != nil {
		return m.Heros
	}
	return nil
}

func init() {
	proto.RegisterType((*C2SRequestCountryPrestigeProto)(nil), "proto.C2SRequestCountryPrestigeProto")
	proto.RegisterType((*S2CRequestCountryPrestigeProto)(nil), "proto.S2CRequestCountryPrestigeProto")
	proto.RegisterType((*C2SRequestCountriesProto)(nil), "proto.C2SRequestCountriesProto")
	proto.RegisterType((*S2CRequestCountriesProto)(nil), "proto.S2CRequestCountriesProto")
	proto.RegisterType((*S2CCountriesUpdateNoticeProto)(nil), "proto.S2CCountriesUpdateNoticeProto")
	proto.RegisterType((*C2SHeroChangeCountryProto)(nil), "proto.C2SHeroChangeCountryProto")
	proto.RegisterType((*S2CHeroChangeCountryProto)(nil), "proto.S2CHeroChangeCountryProto")
	proto.RegisterType((*C2SCountryDetailProto)(nil), "proto.C2SCountryDetailProto")
	proto.RegisterType((*S2CCountryDetailProto)(nil), "proto.S2CCountryDetailProto")
	proto.RegisterType((*C2SOfficialAppointProto)(nil), "proto.C2SOfficialAppointProto")
	proto.RegisterType((*S2COfficialAppointNoticeProto)(nil), "proto.S2COfficialAppointNoticeProto")
	proto.RegisterType((*C2SOfficialDeposeProto)(nil), "proto.C2SOfficialDeposeProto")
	proto.RegisterType((*S2CCountryHostChangedNoticeProto)(nil), "proto.S2CCountryHostChangedNoticeProto")
	proto.RegisterType((*S2CCountryDestroyNoticeProto)(nil), "proto.S2CCountryDestroyNoticeProto")
	proto.RegisterType((*S2CKingChangedNoticeProto)(nil), "proto.S2CKingChangedNoticeProto")
	proto.RegisterType((*S2CCollectOfficialSalaryProto)(nil), "proto.S2CCollectOfficialSalaryProto")
	proto.RegisterType((*C2SChangeNameStartProto)(nil), "proto.C2SChangeNameStartProto")
	proto.RegisterType((*C2SChangeNameVoteProto)(nil), "proto.C2SChangeNameVoteProto")
	proto.RegisterType((*S2CChangeNameVoteProto)(nil), "proto.S2CChangeNameVoteProto")
	proto.RegisterType((*S2CHeroChangeNameVoteCountUpdateNoticeProto)(nil), "proto.S2CHeroChangeNameVoteCountUpdateNoticeProto")
	proto.RegisterType((*S2CChangeNameSuccNoticeProto)(nil), "proto.S2CChangeNameSuccNoticeProto")
	proto.RegisterType((*C2SSearchToAppointHeroListProto)(nil), "proto.C2SSearchToAppointHeroListProto")
	proto.RegisterType((*S2CSearchToAppointHeroListProto)(nil), "proto.S2CSearchToAppointHeroListProto")
	proto.RegisterType((*S2CDefaultToAppointHeroListProto)(nil), "proto.S2CDefaultToAppointHeroListProto")
}
func (m *C2SRequestCountryPrestigeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SRequestCountryPrestigeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Vsn != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.Vsn))
	}
	return i, nil
}

func (m *S2CRequestCountryPrestigeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CRequestCountryPrestigeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Vsn != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.Vsn))
	}
	if len(m.Ids) > 0 {
		for _, num := range m.Ids {
			dAtA[i] = 0x10
			i++
			i = encodeVarintCountry(dAtA, i, uint64(num))
		}
	}
	if len(m.Prestige) > 0 {
		for _, num := range m.Prestige {
			dAtA[i] = 0x18
			i++
			i = encodeVarintCountry(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *C2SRequestCountriesProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SRequestCountriesProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Vsn != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.Vsn))
	}
	return i, nil
}

func (m *S2CRequestCountriesProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CRequestCountriesProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Vsn != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.Vsn))
	}
	if m.Countries != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.Countries.Size()))
		n1, err := m.Countries.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.McWar != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.McWar.Size()))
		n2, err := m.McWar.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Mc != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.Mc.Size()))
		n3, err := m.Mc.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *S2CCountriesUpdateNoticeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCountriesUpdateNoticeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Countries != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.Countries.Size()))
		n4, err := m.Countries.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *C2SHeroChangeCountryProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SHeroChangeCountryProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NewCountry != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.NewCountry))
	}
	if m.Buy {
		dAtA[i] = 0x10
		i++
		if m.Buy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CHeroChangeCountryProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CHeroChangeCountryProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NewCountry != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.NewCountry))
	}
	if m.NewCd != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.NewCd))
	}
	if m.NormalCd != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.NormalCd))
	}
	return i, nil
}

func (m *C2SCountryDetailProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCountryDetailProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CountryId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.CountryId))
	}
	return i, nil
}

func (m *S2CCountryDetailProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCountryDetailProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Country != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.Country.Size()))
		n5, err := m.Country.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *C2SOfficialAppointProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SOfficialAppointProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OfficialType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.OfficialType))
	}
	if len(m.HeroId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCountry(dAtA, i, uint64(len(m.HeroId)))
		i += copy(dAtA[i:], m.HeroId)
	}
	if m.Pos != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.Pos))
	}
	return i, nil
}

func (m *S2COfficialAppointNoticeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2COfficialAppointNoticeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OfficialType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.OfficialType))
	}
	return i, nil
}

func (m *C2SOfficialDeposeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SOfficialDeposeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HeroId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCountry(dAtA, i, uint64(len(m.HeroId)))
		i += copy(dAtA[i:], m.HeroId)
	}
	return i, nil
}

func (m *S2CCountryHostChangedNoticeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCountryHostChangedNoticeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CountryId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.CountryId))
	}
	return i, nil
}

func (m *S2CCountryDestroyNoticeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCountryDestroyNoticeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CountryId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.CountryId))
	}
	return i, nil
}

func (m *S2CKingChangedNoticeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CKingChangedNoticeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CountryId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.CountryId))
	}
	return i, nil
}

func (m *S2CCollectOfficialSalaryProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCollectOfficialSalaryProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Salary != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.Salary.Size()))
		n6, err := m.Salary.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *C2SChangeNameStartProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SChangeNameStartProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NewName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCountry(dAtA, i, uint64(len(m.NewName)))
		i += copy(dAtA[i:], m.NewName)
	}
	return i, nil
}

func (m *C2SChangeNameVoteProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SChangeNameVoteProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Agree {
		dAtA[i] = 0x8
		i++
		if m.Agree {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CChangeNameVoteProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CChangeNameVoteProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Agree {
		dAtA[i] = 0x8
		i++
		if m.Agree {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.Count))
	}
	if m.ReduceCount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.ReduceCount))
	}
	return i, nil
}

func (m *S2CHeroChangeNameVoteCountUpdateNoticeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CHeroChangeNameVoteCountUpdateNoticeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NewCount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.NewCount))
	}
	return i, nil
}

func (m *S2CChangeNameSuccNoticeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CChangeNameSuccNoticeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Country != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.Country))
	}
	if len(m.NewName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCountry(dAtA, i, uint64(len(m.NewName)))
		i += copy(dAtA[i:], m.NewName)
	}
	if m.Succ {
		dAtA[i] = 0x18
		i++
		if m.Succ {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *C2SSearchToAppointHeroListProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SSearchToAppointHeroListProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCountry(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *S2CSearchToAppointHeroListProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSearchToAppointHeroListProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Heros) > 0 {
		for _, msg := range m.Heros {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCountry(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *S2CDefaultToAppointHeroListProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CDefaultToAppointHeroListProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Heros) > 0 {
		for _, msg := range m.Heros {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCountry(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Country(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Country(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintCountry(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *C2SRequestCountryPrestigeProto) Size() (n int) {
	var l int
	_ = l
	if m.Vsn != 0 {
		n += 1 + sovCountry(uint64(m.Vsn))
	}
	return n
}

func (m *S2CRequestCountryPrestigeProto) Size() (n int) {
	var l int
	_ = l
	if m.Vsn != 0 {
		n += 1 + sovCountry(uint64(m.Vsn))
	}
	if len(m.Ids) > 0 {
		for _, e := range m.Ids {
			n += 1 + sovCountry(uint64(e))
		}
	}
	if len(m.Prestige) > 0 {
		for _, e := range m.Prestige {
			n += 1 + sovCountry(uint64(e))
		}
	}
	return n
}

func (m *C2SRequestCountriesProto) Size() (n int) {
	var l int
	_ = l
	if m.Vsn != 0 {
		n += 1 + sovCountry(uint64(m.Vsn))
	}
	return n
}

func (m *S2CRequestCountriesProto) Size() (n int) {
	var l int
	_ = l
	if m.Vsn != 0 {
		n += 1 + sovCountry(uint64(m.Vsn))
	}
	if m.Countries != nil {
		l = m.Countries.Size()
		n += 1 + l + sovCountry(uint64(l))
	}
	if m.McWar != nil {
		l = m.McWar.Size()
		n += 1 + l + sovCountry(uint64(l))
	}
	if m.Mc != nil {
		l = m.Mc.Size()
		n += 1 + l + sovCountry(uint64(l))
	}
	return n
}

func (m *S2CCountriesUpdateNoticeProto) Size() (n int) {
	var l int
	_ = l
	if m.Countries != nil {
		l = m.Countries.Size()
		n += 1 + l + sovCountry(uint64(l))
	}
	return n
}

func (m *C2SHeroChangeCountryProto) Size() (n int) {
	var l int
	_ = l
	if m.NewCountry != 0 {
		n += 1 + sovCountry(uint64(m.NewCountry))
	}
	if m.Buy {
		n += 2
	}
	return n
}

func (m *S2CHeroChangeCountryProto) Size() (n int) {
	var l int
	_ = l
	if m.NewCountry != 0 {
		n += 1 + sovCountry(uint64(m.NewCountry))
	}
	if m.NewCd != 0 {
		n += 1 + sovCountry(uint64(m.NewCd))
	}
	if m.NormalCd != 0 {
		n += 1 + sovCountry(uint64(m.NormalCd))
	}
	return n
}

func (m *C2SCountryDetailProto) Size() (n int) {
	var l int
	_ = l
	if m.CountryId != 0 {
		n += 1 + sovCountry(uint64(m.CountryId))
	}
	return n
}

func (m *S2CCountryDetailProto) Size() (n int) {
	var l int
	_ = l
	if m.Country != nil {
		l = m.Country.Size()
		n += 1 + l + sovCountry(uint64(l))
	}
	return n
}

func (m *C2SOfficialAppointProto) Size() (n int) {
	var l int
	_ = l
	if m.OfficialType != 0 {
		n += 1 + sovCountry(uint64(m.OfficialType))
	}
	l = len(m.HeroId)
	if l > 0 {
		n += 1 + l + sovCountry(uint64(l))
	}
	if m.Pos != 0 {
		n += 1 + sovCountry(uint64(m.Pos))
	}
	return n
}

func (m *S2COfficialAppointNoticeProto) Size() (n int) {
	var l int
	_ = l
	if m.OfficialType != 0 {
		n += 1 + sovCountry(uint64(m.OfficialType))
	}
	return n
}

func (m *C2SOfficialDeposeProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.HeroId)
	if l > 0 {
		n += 1 + l + sovCountry(uint64(l))
	}
	return n
}

func (m *S2CCountryHostChangedNoticeProto) Size() (n int) {
	var l int
	_ = l
	if m.CountryId != 0 {
		n += 1 + sovCountry(uint64(m.CountryId))
	}
	return n
}

func (m *S2CCountryDestroyNoticeProto) Size() (n int) {
	var l int
	_ = l
	if m.CountryId != 0 {
		n += 1 + sovCountry(uint64(m.CountryId))
	}
	return n
}

func (m *S2CKingChangedNoticeProto) Size() (n int) {
	var l int
	_ = l
	if m.CountryId != 0 {
		n += 1 + sovCountry(uint64(m.CountryId))
	}
	return n
}

func (m *S2CCollectOfficialSalaryProto) Size() (n int) {
	var l int
	_ = l
	if m.Salary != nil {
		l = m.Salary.Size()
		n += 1 + l + sovCountry(uint64(l))
	}
	return n
}

func (m *C2SChangeNameStartProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.NewName)
	if l > 0 {
		n += 1 + l + sovCountry(uint64(l))
	}
	return n
}

func (m *C2SChangeNameVoteProto) Size() (n int) {
	var l int
	_ = l
	if m.Agree {
		n += 2
	}
	return n
}

func (m *S2CChangeNameVoteProto) Size() (n int) {
	var l int
	_ = l
	if m.Agree {
		n += 2
	}
	if m.Count != 0 {
		n += 1 + sovCountry(uint64(m.Count))
	}
	if m.ReduceCount != 0 {
		n += 1 + sovCountry(uint64(m.ReduceCount))
	}
	return n
}

func (m *S2CHeroChangeNameVoteCountUpdateNoticeProto) Size() (n int) {
	var l int
	_ = l
	if m.NewCount != 0 {
		n += 1 + sovCountry(uint64(m.NewCount))
	}
	return n
}

func (m *S2CChangeNameSuccNoticeProto) Size() (n int) {
	var l int
	_ = l
	if m.Country != 0 {
		n += 1 + sovCountry(uint64(m.Country))
	}
	l = len(m.NewName)
	if l > 0 {
		n += 1 + l + sovCountry(uint64(l))
	}
	if m.Succ {
		n += 2
	}
	return n
}

func (m *C2SSearchToAppointHeroListProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCountry(uint64(l))
	}
	return n
}

func (m *S2CSearchToAppointHeroListProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Heros) > 0 {
		for _, e := range m.Heros {
			l = e.Size()
			n += 1 + l + sovCountry(uint64(l))
		}
	}
	return n
}

func (m *S2CDefaultToAppointHeroListProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Heros) > 0 {
		for _, e := range m.Heros {
			l = e.Size()
			n += 1 + l + sovCountry(uint64(l))
		}
	}
	return n
}

func sovCountry(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCountry(x uint64) (n int) {
	return sovCountry(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *C2SRequestCountryPrestigeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCountry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SRequestCountryPrestigeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SRequestCountryPrestigeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vsn", wireType)
			}
			m.Vsn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vsn |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCountry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCountry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CRequestCountryPrestigeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCountry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CRequestCountryPrestigeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CRequestCountryPrestigeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vsn", wireType)
			}
			m.Vsn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vsn |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCountry
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCountry
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCountry
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCountry
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCountry
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Prestige = append(m.Prestige, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCountry
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCountry
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCountry
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Prestige = append(m.Prestige, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Prestige", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCountry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCountry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SRequestCountriesProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCountry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SRequestCountriesProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SRequestCountriesProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vsn", wireType)
			}
			m.Vsn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vsn |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCountry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCountry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CRequestCountriesProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCountry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CRequestCountriesProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CRequestCountriesProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vsn", wireType)
			}
			m.Vsn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vsn |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Countries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCountry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Countries == nil {
				m.Countries = &proto3.CountriesProto{}
			}
			if err := m.Countries.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field McWar", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCountry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.McWar == nil {
				m.McWar = &proto12.McWarProto{}
			}
			if err := m.McWar.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCountry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mc == nil {
				m.Mc = &proto10.MingcsProto{}
			}
			if err := m.Mc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCountry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCountry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCountriesUpdateNoticeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCountry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCountriesUpdateNoticeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCountriesUpdateNoticeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Countries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCountry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Countries == nil {
				m.Countries = &proto3.CountriesProto{}
			}
			if err := m.Countries.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCountry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCountry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SHeroChangeCountryProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCountry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SHeroChangeCountryProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SHeroChangeCountryProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewCountry", wireType)
			}
			m.NewCountry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewCountry |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Buy = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCountry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCountry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CHeroChangeCountryProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCountry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CHeroChangeCountryProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CHeroChangeCountryProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewCountry", wireType)
			}
			m.NewCountry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewCountry |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewCd", wireType)
			}
			m.NewCd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewCd |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NormalCd", wireType)
			}
			m.NormalCd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NormalCd |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCountry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCountry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SCountryDetailProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCountry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCountryDetailProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCountryDetailProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryId", wireType)
			}
			m.CountryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountryId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCountry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCountry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCountryDetailProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCountry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCountryDetailProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCountryDetailProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCountry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Country == nil {
				m.Country = &proto3.CountryDetailProto{}
			}
			if err := m.Country.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCountry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCountry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SOfficialAppointProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCountry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SOfficialAppointProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SOfficialAppointProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfficialType", wireType)
			}
			m.OfficialType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OfficialType |= (proto1.CountryOfficialType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCountry
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeroId = append(m.HeroId[:0], dAtA[iNdEx:postIndex]...)
			if m.HeroId == nil {
				m.HeroId = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			m.Pos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCountry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCountry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2COfficialAppointNoticeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCountry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2COfficialAppointNoticeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2COfficialAppointNoticeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfficialType", wireType)
			}
			m.OfficialType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OfficialType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCountry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCountry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SOfficialDeposeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCountry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SOfficialDeposeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SOfficialDeposeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCountry
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeroId = append(m.HeroId[:0], dAtA[iNdEx:postIndex]...)
			if m.HeroId == nil {
				m.HeroId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCountry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCountry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCountryHostChangedNoticeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCountry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCountryHostChangedNoticeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCountryHostChangedNoticeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryId", wireType)
			}
			m.CountryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountryId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCountry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCountry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCountryDestroyNoticeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCountry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCountryDestroyNoticeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCountryDestroyNoticeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryId", wireType)
			}
			m.CountryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountryId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCountry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCountry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CKingChangedNoticeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCountry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CKingChangedNoticeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CKingChangedNoticeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryId", wireType)
			}
			m.CountryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountryId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCountry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCountry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCollectOfficialSalaryProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCountry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCollectOfficialSalaryProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCollectOfficialSalaryProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Salary", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCountry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Salary == nil {
				m.Salary = &proto1.PrizeProto{}
			}
			if err := m.Salary.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCountry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCountry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SChangeNameStartProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCountry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SChangeNameStartProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SChangeNameStartProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCountry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCountry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCountry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SChangeNameVoteProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCountry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SChangeNameVoteProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SChangeNameVoteProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agree", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Agree = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCountry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCountry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CChangeNameVoteProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCountry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CChangeNameVoteProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CChangeNameVoteProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agree", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Agree = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReduceCount", wireType)
			}
			m.ReduceCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReduceCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCountry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCountry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CHeroChangeNameVoteCountUpdateNoticeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCountry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CHeroChangeNameVoteCountUpdateNoticeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CHeroChangeNameVoteCountUpdateNoticeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewCount", wireType)
			}
			m.NewCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCountry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCountry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CChangeNameSuccNoticeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCountry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CChangeNameSuccNoticeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CChangeNameSuccNoticeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			m.Country = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Country |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCountry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Succ", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Succ = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCountry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCountry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SSearchToAppointHeroListProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCountry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SSearchToAppointHeroListProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SSearchToAppointHeroListProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCountry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCountry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCountry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSearchToAppointHeroListProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCountry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSearchToAppointHeroListProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSearchToAppointHeroListProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Heros", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCountry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Heros = append(m.Heros, &proto2.HeroBasicSnapshotProto{})
			if err := m.Heros[len(m.Heros)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCountry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCountry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CDefaultToAppointHeroListProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCountry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CDefaultToAppointHeroListProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CDefaultToAppointHeroListProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Heros", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCountry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Heros = append(m.Heros, &proto2.HeroBasicSnapshotProto{})
			if err := m.Heros[len(m.Heros)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCountry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCountry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCountry(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCountry
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCountry
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCountry
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCountry(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCountry = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCountry   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/gen/pb/country/country.proto", fileDescriptorCountry)
}

var fileDescriptorCountry = []byte{
	// 890 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0x5e, 0x27, 0x75, 0x9a, 0x9e, 0x14, 0xb4, 0x58, 0xdb, 0x5d, 0xb7, 0x4b, 0xd3, 0x32, 0xdc,
	0x04, 0x81, 0x1a, 0xe1, 0xee, 0x0f, 0x20, 0x21, 0xb4, 0x75, 0x2f, 0xba, 0xcb, 0x52, 0x2a, 0xbb,
	0xec, 0x4a, 0xdc, 0x44, 0x93, 0xf1, 0xd4, 0xb1, 0x64, 0x7b, 0x8c, 0x67, 0x42, 0x14, 0xee, 0x79,
	0x07, 0xde, 0x82, 0xd7, 0xe0, 0x92, 0x47, 0x40, 0xe5, 0x45, 0xd0, 0xfc, 0x38, 0xb5, 0x53, 0x02,
	0x29, 0xe2, 0x2a, 0x73, 0x66, 0xbe, 0xef, 0xfc, 0x7c, 0xe7, 0x1c, 0x07, 0x9e, 0xc5, 0x89, 0x98,
	0x4c, 0xc7, 0x47, 0x84, 0x65, 0xc3, 0x34, 0x89, 0x27, 0xa2, 0xc0, 0xb3, 0x61, 0x86, 0x53, 0xfa,
	0x7c, 0x18, 0xd3, 0x7c, 0x58, 0x8c, 0x87, 0x84, 0x4d, 0x73, 0x51, 0xce, 0xab, 0xdf, 0xa3, 0xa2,
	0x64, 0x82, 0x39, 0xb6, 0xfa, 0xd9, 0x7b, 0xb2, 0x9a, 0x5e, 0x8c, 0x87, 0x7c, 0x82, 0x4b, 0x1a,
	0x8d, 0x14, 0x74, 0x38, 0xc6, 0x9c, 0x6a, 0xf2, 0xde, 0xf3, 0xf5, 0x59, 0x8d, 0xa8, 0x7b, 0x4f,
	0xd7, 0x27, 0x66, 0x49, 0x1e, 0x13, 0x43, 0xfb, 0xfc, 0x8e, 0xb4, 0xd1, 0x0c, 0x97, 0x86, 0xfa,
	0xd9, 0xfa, 0x54, 0x9e, 0xe3, 0x82, 0x4f, 0x98, 0xd0, 0x4c, 0xe4, 0x41, 0xdf, 0xf7, 0xc2, 0x80,
	0xfe, 0x30, 0xa5, 0x5c, 0xf8, 0xba, 0x8c, 0x8b, 0x92, 0x72, 0x91, 0xc4, 0xf4, 0x42, 0x69, 0x78,
	0x1f, 0xda, 0x3f, 0xf2, 0xdc, 0xb5, 0x0e, 0xad, 0x81, 0x1d, 0xc8, 0x23, 0x9a, 0x40, 0x3f, 0xf4,
	0xfc, 0x3b, 0x71, 0x9c, 0x07, 0xd0, 0x4e, 0x22, 0xee, 0xb6, 0x0e, 0xdb, 0x03, 0xfb, 0xa4, 0x75,
	0xff, 0x5e, 0x20, 0x4d, 0xa7, 0x0f, 0xdd, 0xc2, 0x10, 0xdd, 0xf6, 0xe2, 0x69, 0x71, 0x87, 0x3e,
	0x01, 0x77, 0x39, 0xbb, 0x84, 0xf2, 0x55, 0x79, 0xfd, 0x6a, 0x81, 0xbb, 0x9c, 0xd8, 0x6a, 0xb8,
	0x73, 0x0c, 0x5b, 0xa4, 0xc2, 0xb8, 0xad, 0x43, 0x6b, 0xd0, 0xf3, 0x76, 0xb4, 0x2a, 0x47, 0x4d,
	0x6e, 0x70, 0x83, 0x73, 0x06, 0xd0, 0xc9, 0x94, 0xf2, 0x6e, 0x5b, 0x31, 0xde, 0x33, 0x8c, 0x6f,
	0xc8, 0x5b, 0x5c, 0x6a, 0xb4, 0x9d, 0xc9, 0xb3, 0x83, 0xa0, 0x95, 0x11, 0x77, 0x43, 0xa1, 0x9c,
	0x0a, 0x25, 0xfb, 0x66, 0x9c, 0xb6, 0x32, 0x82, 0x2e, 0x61, 0x3f, 0xf4, 0xfc, 0x45, 0xb4, 0xef,
	0x8a, 0x08, 0x0b, 0x7a, 0xce, 0x44, 0x42, 0x8c, 0x90, 0x8d, 0x1c, 0xad, 0xf5, 0x72, 0x44, 0xe7,
	0xb0, 0xeb, 0x7b, 0xe1, 0x19, 0x2d, 0x99, 0x3f, 0xc1, 0x79, 0x4c, 0x17, 0x2d, 0x92, 0x1e, 0x0f,
	0xa0, 0x97, 0xd3, 0xd9, 0xc8, 0x4c, 0xac, 0xd1, 0x03, 0x72, 0x3a, 0x33, 0x28, 0x29, 0xd4, 0x78,
	0x3a, 0x57, 0x82, 0x74, 0x03, 0x79, 0x44, 0x05, 0xec, 0x86, 0x9e, 0xff, 0x5f, 0xfd, 0xed, 0x40,
	0x47, 0x01, 0x22, 0xe5, 0xd2, 0x0e, 0x6c, 0xf9, 0x16, 0x39, 0x8f, 0x61, 0x2b, 0x67, 0x65, 0x86,
	0x53, 0xf9, 0xd2, 0x56, 0x2f, 0x5d, 0x7d, 0xe1, 0x47, 0xe8, 0x19, 0xec, 0xf8, 0x5e, 0x68, 0x3c,
	0x9c, 0x52, 0x81, 0x93, 0x54, 0x47, 0xdb, 0x07, 0x30, 0x91, 0x46, 0x49, 0x64, 0x82, 0x99, 0xca,
	0xe7, 0x2f, 0x23, 0xf4, 0x1a, 0x76, 0x16, 0x7a, 0x36, 0x78, 0xc7, 0xb0, 0x59, 0xcf, 0xb0, 0xe7,
	0xed, 0x36, 0x54, 0xac, 0x63, 0x83, 0x0a, 0x89, 0x7e, 0xb6, 0xe0, 0x91, 0xef, 0x85, 0xdf, 0x5e,
	0x5d, 0x25, 0x24, 0xc1, 0xe9, 0x8b, 0xa2, 0x60, 0x49, 0x2e, 0xb4, 0xc3, 0xaf, 0xe0, 0x1d, 0x66,
	0xee, 0x47, 0x62, 0x5e, 0x50, 0x55, 0xdc, 0xbb, 0xde, 0x5e, 0xd3, 0x6d, 0x45, 0xbd, 0x9c, 0x17,
	0x34, 0xd8, 0x66, 0x35, 0xcb, 0x79, 0x04, 0x9b, 0x13, 0x5a, 0x32, 0x59, 0x86, 0xac, 0x7e, 0x3b,
	0xe8, 0x48, 0xf3, 0x65, 0x24, 0xf5, 0x2f, 0x18, 0x57, 0x83, 0x63, 0x07, 0xf2, 0x88, 0x4e, 0xd5,
	0x94, 0x2c, 0xa5, 0x51, 0x9f, 0x92, 0x0f, 0xff, 0x2e, 0x19, 0xbb, 0x19, 0x10, 0x7d, 0x0a, 0x0f,
	0x6b, 0xc5, 0x9c, 0xd2, 0x82, 0x71, 0x43, 0x5f, 0x95, 0x0a, 0x7a, 0x01, 0x87, 0x37, 0x72, 0x9e,
	0x31, 0x2e, 0x74, 0xff, 0xa3, 0x7a, 0xec, 0x66, 0x47, 0x5a, 0xcb, 0x1d, 0xf9, 0x12, 0xde, 0xaf,
	0x77, 0x84, 0x8b, 0x92, 0xcd, 0x57, 0xd3, 0x6f, 0x35, 0xf4, 0x0b, 0x35, 0x7a, 0x5f, 0x27, 0x79,
	0xfc, 0xaf, 0xa1, 0x6f, 0x71, 0x5f, 0x99, 0xe5, 0x4a, 0x53, 0x4a, 0x44, 0x55, 0x77, 0x88, 0x53,
	0x5c, 0x8d, 0xee, 0x47, 0xd0, 0xe1, 0xca, 0x34, 0x33, 0x51, 0xed, 0xf2, 0x45, 0x99, 0xfc, 0xa4,
	0x43, 0x04, 0x06, 0x80, 0x9e, 0xa8, 0x49, 0xd0, 0x39, 0x9c, 0xe3, 0x8c, 0x86, 0x02, 0x97, 0x66,
	0x12, 0x76, 0xa1, 0x2b, 0xe7, 0x3b, 0xc7, 0x19, 0x55, 0x7e, 0xb6, 0x82, 0xcd, 0x9c, 0xce, 0x24,
	0x08, 0x1d, 0x29, 0xc9, 0x6f, 0x58, 0x6f, 0x98, 0x30, 0xa9, 0x3f, 0x00, 0x1b, 0xc7, 0x25, 0xd5,
	0x8c, 0x6e, 0xa0, 0x0d, 0x14, 0xc3, 0x43, 0x99, 0xf1, 0xba, 0x78, 0x79, 0xab, 0xca, 0xad, 0x36,
	0x4b, 0x19, 0xce, 0x07, 0xb0, 0x5d, 0xd2, 0x68, 0x4a, 0xa8, 0x5e, 0x4a, 0xb3, 0x5c, 0x3d, 0x7d,
	0xa7, 0x3a, 0x81, 0x5e, 0xc1, 0xc7, 0x8d, 0x8d, 0xae, 0x82, 0xa9, 0xd7, 0xdb, 0x5f, 0x21, 0xb9,
	0xab, 0xd5, 0x8e, 0x1b, 0x9d, 0xbb, 0xd5, 0x86, 0xa3, 0x58, 0x77, 0xf8, 0x46, 0x9a, 0x29, 0x21,
	0x75, 0xb2, 0xdb, 0x5c, 0x3d, 0x7b, 0xb1, 0x5f, 0x0d, 0xe5, 0x5a, 0x0d, 0xe5, 0x1c, 0x07, 0x36,
	0xf8, 0x94, 0x10, 0x95, 0x7b, 0x37, 0x50, 0x67, 0xf4, 0x14, 0x0e, 0x7c, 0x2f, 0x0c, 0x29, 0x2e,
	0xc9, 0xe4, 0x92, 0x99, 0x35, 0x90, 0x35, 0xbc, 0x4e, 0xb8, 0xe9, 0x85, 0x03, 0x1b, 0xb5, 0x3e,
	0xa8, 0x33, 0x7a, 0x03, 0x07, 0xa1, 0xe7, 0xff, 0x23, 0xed, 0x18, 0x6c, 0x39, 0xf1, 0xf2, 0x0b,
	0xdb, 0x1e, 0xf4, 0xbc, 0x7d, 0x33, 0x07, 0x12, 0x74, 0x82, 0x79, 0x42, 0x42, 0xf3, 0x9f, 0x69,
	0xbe, 0xef, 0x0a, 0x8b, 0xde, 0xaa, 0xe5, 0x38, 0xa5, 0x57, 0x78, 0x9a, 0x8a, 0xff, 0xd1, 0xf1,
	0xc9, 0xe3, 0xdf, 0xae, 0xfb, 0xd6, 0xef, 0xd7, 0x7d, 0xeb, 0x8f, 0xeb, 0xbe, 0xf5, 0xcb, 0x9f,
	0xfd, 0x7b, 0x67, 0xd6, 0xf7, 0x95, 0x66, 0xe3, 0x8e, 0xf2, 0x70, 0xfc, 0x57, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x4e, 0x6c, 0x88, 0xe0, 0x12, 0x09, 0x00, 0x00,
}
