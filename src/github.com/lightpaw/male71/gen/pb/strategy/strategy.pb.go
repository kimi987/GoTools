// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/gen/pb/strategy/strategy.proto
// DO NOT EDIT!

/*
	Package strategy is a generated protocol buffer package.

	It is generated from these files:
		github.com/lightpaw/male7/gen/pb/strategy/strategy.proto

	It has these top-level messages:
		C2SUseStratagemProto
		S2CUseStratagemProto
		S2CTrappedStratagemProto
		S2CUseStratagemFailProto
*/
package strategy

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import proto41 "github.com/lightpaw/male7/pb/shared_proto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type C2SUseStratagemProto struct {
	Id     int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Target []byte `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	DataId int32  `protobuf:"varint,3,opt,name=data_id,json=dataId,proto3" json:"data_id,omitempty"`
	PosX   int32  `protobuf:"varint,4,opt,name=pos_x,json=posX,proto3" json:"pos_x,omitempty"`
	PosY   int32  `protobuf:"varint,5,opt,name=pos_y,json=posY,proto3" json:"pos_y,omitempty"`
}

func (m *C2SUseStratagemProto) Reset()                    { *m = C2SUseStratagemProto{} }
func (m *C2SUseStratagemProto) String() string            { return proto.CompactTextString(m) }
func (*C2SUseStratagemProto) ProtoMessage()               {}
func (*C2SUseStratagemProto) Descriptor() ([]byte, []int) { return fileDescriptorStrategy, []int{0} }

func (m *C2SUseStratagemProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *C2SUseStratagemProto) GetTarget() []byte {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *C2SUseStratagemProto) GetDataId() int32 {
	if m != nil {
		return m.DataId
	}
	return 0
}

func (m *C2SUseStratagemProto) GetPosX() int32 {
	if m != nil {
		return m.PosX
	}
	return 0
}

func (m *C2SUseStratagemProto) GetPosY() int32 {
	if m != nil {
		return m.PosY
	}
	return 0
}

type S2CUseStratagemProto struct {
	Id              int32  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Name            string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	DailyUsedTimes  int32  `protobuf:"varint,3,opt,name=daily_used_times,json=dailyUsedTimes,proto3" json:"daily_used_times,omitempty"`
	NextUseableTime int32  `protobuf:"varint,4,opt,name=next_useable_time,json=nextUseableTime,proto3" json:"next_useable_time,omitempty"`
	TargetName      string `protobuf:"bytes,6,opt,name=target_name,json=targetName,proto3" json:"target_name,omitempty"`
}

func (m *S2CUseStratagemProto) Reset()                    { *m = S2CUseStratagemProto{} }
func (m *S2CUseStratagemProto) String() string            { return proto.CompactTextString(m) }
func (*S2CUseStratagemProto) ProtoMessage()               {}
func (*S2CUseStratagemProto) Descriptor() ([]byte, []int) { return fileDescriptorStrategy, []int{1} }

func (m *S2CUseStratagemProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *S2CUseStratagemProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *S2CUseStratagemProto) GetDailyUsedTimes() int32 {
	if m != nil {
		return m.DailyUsedTimes
	}
	return 0
}

func (m *S2CUseStratagemProto) GetNextUseableTime() int32 {
	if m != nil {
		return m.NextUseableTime
	}
	return 0
}

func (m *S2CUseStratagemProto) GetTargetName() string {
	if m != nil {
		return m.TargetName
	}
	return ""
}

type S2CTrappedStratagemProto struct {
	Stratagem *proto41.TrappedStratagemProto `protobuf:"bytes,1,opt,name=stratagem" json:"stratagem,omitempty"`
}

func (m *S2CTrappedStratagemProto) Reset()                    { *m = S2CTrappedStratagemProto{} }
func (m *S2CTrappedStratagemProto) String() string            { return proto.CompactTextString(m) }
func (*S2CTrappedStratagemProto) ProtoMessage()               {}
func (*S2CTrappedStratagemProto) Descriptor() ([]byte, []int) { return fileDescriptorStrategy, []int{2} }

func (m *S2CTrappedStratagemProto) GetStratagem() *proto41.TrappedStratagemProto {
	if m != nil {
		return m.Stratagem
	}
	return nil
}

type S2CUseStratagemFailProto struct {
	Id         int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	TargetName string `protobuf:"bytes,3,opt,name=target_name,json=targetName,proto3" json:"target_name,omitempty"`
}

func (m *S2CUseStratagemFailProto) Reset()                    { *m = S2CUseStratagemFailProto{} }
func (m *S2CUseStratagemFailProto) String() string            { return proto.CompactTextString(m) }
func (*S2CUseStratagemFailProto) ProtoMessage()               {}
func (*S2CUseStratagemFailProto) Descriptor() ([]byte, []int) { return fileDescriptorStrategy, []int{3} }

func (m *S2CUseStratagemFailProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *S2CUseStratagemFailProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *S2CUseStratagemFailProto) GetTargetName() string {
	if m != nil {
		return m.TargetName
	}
	return ""
}

func init() {
	proto.RegisterType((*C2SUseStratagemProto)(nil), "proto.C2SUseStratagemProto")
	proto.RegisterType((*S2CUseStratagemProto)(nil), "proto.S2CUseStratagemProto")
	proto.RegisterType((*S2CTrappedStratagemProto)(nil), "proto.S2CTrappedStratagemProto")
	proto.RegisterType((*S2CUseStratagemFailProto)(nil), "proto.S2CUseStratagemFailProto")
}
func (m *C2SUseStratagemProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SUseStratagemProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStrategy(dAtA, i, uint64(m.Id))
	}
	if len(m.Target) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStrategy(dAtA, i, uint64(len(m.Target)))
		i += copy(dAtA[i:], m.Target)
	}
	if m.DataId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStrategy(dAtA, i, uint64(m.DataId))
	}
	if m.PosX != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintStrategy(dAtA, i, uint64(m.PosX))
	}
	if m.PosY != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintStrategy(dAtA, i, uint64(m.PosY))
	}
	return i, nil
}

func (m *S2CUseStratagemProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUseStratagemProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStrategy(dAtA, i, uint64(m.Id))
	}
	if m.DailyUsedTimes != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStrategy(dAtA, i, uint64(m.DailyUsedTimes))
	}
	if m.NextUseableTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintStrategy(dAtA, i, uint64(m.NextUseableTime))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintStrategy(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.TargetName) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintStrategy(dAtA, i, uint64(len(m.TargetName)))
		i += copy(dAtA[i:], m.TargetName)
	}
	return i, nil
}

func (m *S2CTrappedStratagemProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CTrappedStratagemProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Stratagem != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStrategy(dAtA, i, uint64(m.Stratagem.Size()))
		n1, err := m.Stratagem.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *S2CUseStratagemFailProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUseStratagemFailProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStrategy(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStrategy(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.TargetName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintStrategy(dAtA, i, uint64(len(m.TargetName)))
		i += copy(dAtA[i:], m.TargetName)
	}
	return i, nil
}

func encodeFixed64Strategy(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Strategy(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintStrategy(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *C2SUseStratagemProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovStrategy(uint64(m.Id))
	}
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovStrategy(uint64(l))
	}
	if m.DataId != 0 {
		n += 1 + sovStrategy(uint64(m.DataId))
	}
	if m.PosX != 0 {
		n += 1 + sovStrategy(uint64(m.PosX))
	}
	if m.PosY != 0 {
		n += 1 + sovStrategy(uint64(m.PosY))
	}
	return n
}

func (m *S2CUseStratagemProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovStrategy(uint64(m.Id))
	}
	if m.DailyUsedTimes != 0 {
		n += 1 + sovStrategy(uint64(m.DailyUsedTimes))
	}
	if m.NextUseableTime != 0 {
		n += 1 + sovStrategy(uint64(m.NextUseableTime))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovStrategy(uint64(l))
	}
	l = len(m.TargetName)
	if l > 0 {
		n += 1 + l + sovStrategy(uint64(l))
	}
	return n
}

func (m *S2CTrappedStratagemProto) Size() (n int) {
	var l int
	_ = l
	if m.Stratagem != nil {
		l = m.Stratagem.Size()
		n += 1 + l + sovStrategy(uint64(l))
	}
	return n
}

func (m *S2CUseStratagemFailProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovStrategy(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovStrategy(uint64(l))
	}
	l = len(m.TargetName)
	if l > 0 {
		n += 1 + l + sovStrategy(uint64(l))
	}
	return n
}

func sovStrategy(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozStrategy(x uint64) (n int) {
	return sovStrategy(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *C2SUseStratagemProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStrategy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SUseStratagemProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SUseStratagemProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStrategy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStrategy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStrategy
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = append(m.Target[:0], dAtA[iNdEx:postIndex]...)
			if m.Target == nil {
				m.Target = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataId", wireType)
			}
			m.DataId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStrategy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosX", wireType)
			}
			m.PosX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStrategy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosX |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosY", wireType)
			}
			m.PosY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStrategy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosY |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStrategy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStrategy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUseStratagemProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStrategy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUseStratagemProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUseStratagemProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStrategy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DailyUsedTimes", wireType)
			}
			m.DailyUsedTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStrategy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DailyUsedTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextUseableTime", wireType)
			}
			m.NextUseableTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStrategy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextUseableTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStrategy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStrategy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStrategy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStrategy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStrategy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStrategy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CTrappedStratagemProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStrategy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CTrappedStratagemProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CTrappedStratagemProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stratagem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStrategy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStrategy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stratagem == nil {
				m.Stratagem = &proto41.TrappedStratagemProto{}
			}
			if err := m.Stratagem.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStrategy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStrategy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUseStratagemFailProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStrategy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUseStratagemFailProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUseStratagemFailProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStrategy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStrategy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStrategy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStrategy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStrategy
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStrategy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStrategy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStrategy(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStrategy
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStrategy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStrategy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthStrategy
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowStrategy
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipStrategy(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthStrategy = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStrategy   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/gen/pb/strategy/strategy.proto", fileDescriptorStrategy)
}

var fileDescriptorStrategy = []byte{
	// 385 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xd1, 0x4a, 0xe3, 0x40,
	0x14, 0x86, 0x77, 0xd2, 0x26, 0xbb, 0x9d, 0x2e, 0xdd, 0xdd, 0xd9, 0xb2, 0x1b, 0x96, 0x92, 0x2d,
	0xb9, 0x2a, 0x5e, 0x34, 0x10, 0x05, 0xc5, 0x4b, 0x0b, 0xa2, 0x37, 0x22, 0x49, 0x2b, 0xea, 0x4d,
	0x98, 0x38, 0x87, 0x64, 0x20, 0x69, 0x42, 0x66, 0x8a, 0xed, 0xa5, 0x6f, 0xe1, 0x6b, 0xf8, 0x16,
	0x5e, 0xfa, 0x08, 0x52, 0x5f, 0x44, 0x32, 0x69, 0xaa, 0x94, 0xf6, 0x2a, 0x73, 0xfe, 0xf3, 0x9f,
	0x3f, 0x5f, 0x4e, 0x06, 0x1f, 0x45, 0x5c, 0xc6, 0xb3, 0x70, 0x78, 0x97, 0xa5, 0x4e, 0xc2, 0xa3,
	0x58, 0xe6, 0xf4, 0xde, 0x49, 0x69, 0x02, 0x87, 0x4e, 0x04, 0x53, 0x27, 0x0f, 0x1d, 0x21, 0x0b,
	0x2a, 0x21, 0x5a, 0xac, 0x0f, 0xc3, 0xbc, 0xc8, 0x64, 0x46, 0x74, 0xf5, 0xf8, 0x77, 0xb0, 0x3b,
	0xa0, 0x1c, 0x8e, 0x69, 0x01, 0x2c, 0x50, 0x56, 0x27, 0x86, 0x22, 0xab, 0x86, 0xed, 0x07, 0x84,
	0xbb, 0x23, 0xd7, 0x9f, 0x08, 0xf0, 0xcb, 0x54, 0x1a, 0x41, 0x7a, 0xa9, 0x52, 0x3b, 0x58, 0xe3,
	0xcc, 0x44, 0x7d, 0x34, 0xd0, 0x3d, 0x8d, 0x33, 0xf2, 0x07, 0x1b, 0x92, 0x16, 0x11, 0x48, 0x53,
	0xeb, 0xa3, 0xc1, 0x77, 0x6f, 0x55, 0x91, 0xbf, 0xf8, 0x2b, 0xa3, 0x92, 0x06, 0x9c, 0x99, 0x0d,
	0x65, 0x36, 0xca, 0xf2, 0x9c, 0x91, 0xdf, 0x58, 0xcf, 0x33, 0x11, 0xcc, 0xcd, 0xa6, 0x92, 0x9b,
	0x79, 0x26, 0xae, 0x6b, 0x71, 0x61, 0xea, 0x6b, 0xf1, 0xc6, 0x7e, 0x42, 0xb8, 0xeb, 0xbb, 0xa3,
	0x5d, 0x0c, 0xda, 0x9a, 0x61, 0x80, 0x7f, 0x32, 0xca, 0x93, 0x45, 0x30, 0x13, 0xc0, 0x02, 0xc9,
	0x53, 0x10, 0xab, 0x97, 0x76, 0x94, 0x3e, 0x11, 0xc0, 0xc6, 0xa5, 0x4a, 0xf6, 0xf0, 0xaf, 0x29,
	0xcc, 0x65, 0x69, 0xa4, 0x61, 0x02, 0xca, 0xbb, 0x02, 0xf9, 0x51, 0x36, 0x26, 0x95, 0x5e, 0x9a,
	0x09, 0xc1, 0xcd, 0x29, 0x4d, 0x41, 0x21, 0xb5, 0x3c, 0x75, 0x26, 0xff, 0x71, 0xbb, 0xfa, 0xbe,
	0x40, 0xb5, 0x0c, 0xd5, 0xc2, 0x95, 0x74, 0x41, 0x53, 0xb0, 0xaf, 0xb0, 0xe9, 0xbb, 0xa3, 0x71,
	0x41, 0xf3, 0x1c, 0xd8, 0x06, 0xf6, 0x31, 0x6e, 0x89, 0x5a, 0x51, 0x1b, 0x6c, 0xbb, 0xbd, 0x6a,
	0xdd, 0xc3, 0xad, 0x03, 0xde, 0x87, 0xdd, 0x0e, 0x54, 0xee, 0xe7, 0x55, 0x9c, 0x52, 0x9e, 0x6c,
	0xff, 0x25, 0x35, 0xb8, 0xb6, 0x1b, 0xbc, 0xb1, 0x09, 0x7e, 0xd2, 0x7b, 0x5e, 0x5a, 0xe8, 0x65,
	0x69, 0xa1, 0xd7, 0xa5, 0x85, 0x1e, 0xdf, 0xac, 0x2f, 0x67, 0xe8, 0xf6, 0x5b, 0x7d, 0xa3, 0x42,
	0x43, 0x61, 0xee, 0xbf, 0x07, 0x00, 0x00, 0xff, 0xff, 0x44, 0xcc, 0xef, 0x0a, 0x8e, 0x02, 0x00,
	0x00,
}
