// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/gen/pb/hebi/hebi.proto
// DO NOT EDIT!

/*
	Package hebi is a generated protocol buffer package.

	It is generated from these files:
		github.com/lightpaw/male7/gen/pb/hebi/hebi.proto

	It has these top-level messages:
		C2SRoomListProto
		S2CRoomListProto
		S2CHeroRecordListProto
		C2SChangeCaptainProto
		S2CChangeCaptainProto
		S2CChangeRoomCaptainProto
		C2SCheckInRoomProto
		S2CCheckInRoomProto
		C2SCopySelfProto
		S2CCopySelfProto
		C2SJoinRoomProto
		S2CJoinRoomProto
		S2CSomeoneJoinedRoomProto
		C2SRobPosProto
		S2CRobPosProto
		S2CSomeoneRobbedMyPosProto
		C2SLeaveRoomProto
		S2CLeaveRoomProto
		C2SRobProto
		S2CRobProto
		S2CSomeoneRobbedMyPrizeProto
		S2CCompleteProto
		C2SViewShowPrizeProto
		S2CViewShowPrizeProto
*/
package hebi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import proto1 "github.com/lightpaw/male7/pb/shared_proto"
import proto6 "github.com/lightpaw/male7/pb/shared_proto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type C2SRoomListProto struct {
	V int32 `protobuf:"varint,1,opt,name=v,proto3" json:"v,omitempty"`
}

func (m *C2SRoomListProto) Reset()                    { *m = C2SRoomListProto{} }
func (m *C2SRoomListProto) String() string            { return proto.CompactTextString(m) }
func (*C2SRoomListProto) ProtoMessage()               {}
func (*C2SRoomListProto) Descriptor() ([]byte, []int) { return fileDescriptorHebi, []int{0} }

func (m *C2SRoomListProto) GetV() int32 {
	if m != nil {
		return m.V
	}
	return 0
}

type S2CRoomListProto struct {
	V    int32                 `protobuf:"varint,1,opt,name=v,proto3" json:"v,omitempty"`
	List *proto6.HebiInfoProto `protobuf:"bytes,2,opt,name=list" json:"list,omitempty"`
}

func (m *S2CRoomListProto) Reset()                    { *m = S2CRoomListProto{} }
func (m *S2CRoomListProto) String() string            { return proto.CompactTextString(m) }
func (*S2CRoomListProto) ProtoMessage()               {}
func (*S2CRoomListProto) Descriptor() ([]byte, []int) { return fileDescriptorHebi, []int{1} }

func (m *S2CRoomListProto) GetV() int32 {
	if m != nil {
		return m.V
	}
	return 0
}

func (m *S2CRoomListProto) GetList() *proto6.HebiInfoProto {
	if m != nil {
		return m.List
	}
	return nil
}

type S2CHeroRecordListProto struct {
	Records *proto6.HebiHeroRecordProto `protobuf:"bytes,1,opt,name=records" json:"records,omitempty"`
}

func (m *S2CHeroRecordListProto) Reset()                    { *m = S2CHeroRecordListProto{} }
func (m *S2CHeroRecordListProto) String() string            { return proto.CompactTextString(m) }
func (*S2CHeroRecordListProto) ProtoMessage()               {}
func (*S2CHeroRecordListProto) Descriptor() ([]byte, []int) { return fileDescriptorHebi, []int{2} }

func (m *S2CHeroRecordListProto) GetRecords() *proto6.HebiHeroRecordProto {
	if m != nil {
		return m.Records
	}
	return nil
}

type C2SChangeCaptainProto struct {
	CaptainId int32 `protobuf:"varint,1,opt,name=captain_id,json=captainId,proto3" json:"captain_id,omitempty"`
}

func (m *C2SChangeCaptainProto) Reset()                    { *m = C2SChangeCaptainProto{} }
func (m *C2SChangeCaptainProto) String() string            { return proto.CompactTextString(m) }
func (*C2SChangeCaptainProto) ProtoMessage()               {}
func (*C2SChangeCaptainProto) Descriptor() ([]byte, []int) { return fileDescriptorHebi, []int{3} }

func (m *C2SChangeCaptainProto) GetCaptainId() int32 {
	if m != nil {
		return m.CaptainId
	}
	return 0
}

type S2CChangeCaptainProto struct {
	CaptainId int32 `protobuf:"varint,1,opt,name=captain_id,json=captainId,proto3" json:"captain_id,omitempty"`
}

func (m *S2CChangeCaptainProto) Reset()                    { *m = S2CChangeCaptainProto{} }
func (m *S2CChangeCaptainProto) String() string            { return proto.CompactTextString(m) }
func (*S2CChangeCaptainProto) ProtoMessage()               {}
func (*S2CChangeCaptainProto) Descriptor() ([]byte, []int) { return fileDescriptorHebi, []int{4} }

func (m *S2CChangeCaptainProto) GetCaptainId() int32 {
	if m != nil {
		return m.CaptainId
	}
	return 0
}

type S2CChangeRoomCaptainProto struct {
	RoomId  int32                    `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	Cpatain *proto6.HebiCaptainProto `protobuf:"bytes,2,opt,name=cpatain" json:"cpatain,omitempty"`
}

func (m *S2CChangeRoomCaptainProto) Reset()                    { *m = S2CChangeRoomCaptainProto{} }
func (m *S2CChangeRoomCaptainProto) String() string            { return proto.CompactTextString(m) }
func (*S2CChangeRoomCaptainProto) ProtoMessage()               {}
func (*S2CChangeRoomCaptainProto) Descriptor() ([]byte, []int) { return fileDescriptorHebi, []int{5} }

func (m *S2CChangeRoomCaptainProto) GetRoomId() int32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *S2CChangeRoomCaptainProto) GetCpatain() *proto6.HebiCaptainProto {
	if m != nil {
		return m.Cpatain
	}
	return nil
}

type C2SCheckInRoomProto struct {
	RoomId  int32 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	GoodsId int32 `protobuf:"varint,2,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`
}

func (m *C2SCheckInRoomProto) Reset()                    { *m = C2SCheckInRoomProto{} }
func (m *C2SCheckInRoomProto) String() string            { return proto.CompactTextString(m) }
func (*C2SCheckInRoomProto) ProtoMessage()               {}
func (*C2SCheckInRoomProto) Descriptor() ([]byte, []int) { return fileDescriptorHebi, []int{6} }

func (m *C2SCheckInRoomProto) GetRoomId() int32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *C2SCheckInRoomProto) GetGoodsId() int32 {
	if m != nil {
		return m.GoodsId
	}
	return 0
}

type S2CCheckInRoomProto struct {
	RoomId  int32 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	GoodsId int32 `protobuf:"varint,2,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`
}

func (m *S2CCheckInRoomProto) Reset()                    { *m = S2CCheckInRoomProto{} }
func (m *S2CCheckInRoomProto) String() string            { return proto.CompactTextString(m) }
func (*S2CCheckInRoomProto) ProtoMessage()               {}
func (*S2CCheckInRoomProto) Descriptor() ([]byte, []int) { return fileDescriptorHebi, []int{7} }

func (m *S2CCheckInRoomProto) GetRoomId() int32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *S2CCheckInRoomProto) GetGoodsId() int32 {
	if m != nil {
		return m.GoodsId
	}
	return 0
}

type C2SCopySelfProto struct {
	RoomId  int32 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	GoodsId int32 `protobuf:"varint,2,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`
}

func (m *C2SCopySelfProto) Reset()                    { *m = C2SCopySelfProto{} }
func (m *C2SCopySelfProto) String() string            { return proto.CompactTextString(m) }
func (*C2SCopySelfProto) ProtoMessage()               {}
func (*C2SCopySelfProto) Descriptor() ([]byte, []int) { return fileDescriptorHebi, []int{8} }

func (m *C2SCopySelfProto) GetRoomId() int32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *C2SCopySelfProto) GetGoodsId() int32 {
	if m != nil {
		return m.GoodsId
	}
	return 0
}

type S2CCopySelfProto struct {
	RoomId int32 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
}

func (m *S2CCopySelfProto) Reset()                    { *m = S2CCopySelfProto{} }
func (m *S2CCopySelfProto) String() string            { return proto.CompactTextString(m) }
func (*S2CCopySelfProto) ProtoMessage()               {}
func (*S2CCopySelfProto) Descriptor() ([]byte, []int) { return fileDescriptorHebi, []int{9} }

func (m *S2CCopySelfProto) GetRoomId() int32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

type C2SJoinRoomProto struct {
	RoomId  int32 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	GoodsId int32 `protobuf:"varint,2,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`
}

func (m *C2SJoinRoomProto) Reset()                    { *m = C2SJoinRoomProto{} }
func (m *C2SJoinRoomProto) String() string            { return proto.CompactTextString(m) }
func (*C2SJoinRoomProto) ProtoMessage()               {}
func (*C2SJoinRoomProto) Descriptor() ([]byte, []int) { return fileDescriptorHebi, []int{10} }

func (m *C2SJoinRoomProto) GetRoomId() int32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *C2SJoinRoomProto) GetGoodsId() int32 {
	if m != nil {
		return m.GoodsId
	}
	return 0
}

type S2CJoinRoomProto struct {
	RoomId  int32 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	GoodsId int32 `protobuf:"varint,3,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`
	PrizeId int32 `protobuf:"varint,4,opt,name=prize_id,json=prizeId,proto3" json:"prize_id,omitempty"`
}

func (m *S2CJoinRoomProto) Reset()                    { *m = S2CJoinRoomProto{} }
func (m *S2CJoinRoomProto) String() string            { return proto.CompactTextString(m) }
func (*S2CJoinRoomProto) ProtoMessage()               {}
func (*S2CJoinRoomProto) Descriptor() ([]byte, []int) { return fileDescriptorHebi, []int{11} }

func (m *S2CJoinRoomProto) GetRoomId() int32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *S2CJoinRoomProto) GetGoodsId() int32 {
	if m != nil {
		return m.GoodsId
	}
	return 0
}

func (m *S2CJoinRoomProto) GetPrizeId() int32 {
	if m != nil {
		return m.PrizeId
	}
	return 0
}

type S2CSomeoneJoinedRoomProto struct {
	RoomId int32 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
}

func (m *S2CSomeoneJoinedRoomProto) Reset()                    { *m = S2CSomeoneJoinedRoomProto{} }
func (m *S2CSomeoneJoinedRoomProto) String() string            { return proto.CompactTextString(m) }
func (*S2CSomeoneJoinedRoomProto) ProtoMessage()               {}
func (*S2CSomeoneJoinedRoomProto) Descriptor() ([]byte, []int) { return fileDescriptorHebi, []int{12} }

func (m *S2CSomeoneJoinedRoomProto) GetRoomId() int32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

type C2SRobPosProto struct {
	RoomId int32 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
}

func (m *C2SRobPosProto) Reset()                    { *m = C2SRobPosProto{} }
func (m *C2SRobPosProto) String() string            { return proto.CompactTextString(m) }
func (*C2SRobPosProto) ProtoMessage()               {}
func (*C2SRobPosProto) Descriptor() ([]byte, []int) { return fileDescriptorHebi, []int{13} }

func (m *C2SRobPosProto) GetRoomId() int32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

type S2CRobPosProto struct {
	RoomId int32  `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	Succ   bool   `protobuf:"varint,2,opt,name=succ,proto3" json:"succ,omitempty"`
	Link   string `protobuf:"bytes,3,opt,name=link,proto3" json:"link,omitempty"`
}

func (m *S2CRobPosProto) Reset()                    { *m = S2CRobPosProto{} }
func (m *S2CRobPosProto) String() string            { return proto.CompactTextString(m) }
func (*S2CRobPosProto) ProtoMessage()               {}
func (*S2CRobPosProto) Descriptor() ([]byte, []int) { return fileDescriptorHebi, []int{14} }

func (m *S2CRobPosProto) GetRoomId() int32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *S2CRobPosProto) GetSucc() bool {
	if m != nil {
		return m.Succ
	}
	return false
}

func (m *S2CRobPosProto) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

type S2CSomeoneRobbedMyPosProto struct {
	RoomId int32 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
}

func (m *S2CSomeoneRobbedMyPosProto) Reset()                    { *m = S2CSomeoneRobbedMyPosProto{} }
func (m *S2CSomeoneRobbedMyPosProto) String() string            { return proto.CompactTextString(m) }
func (*S2CSomeoneRobbedMyPosProto) ProtoMessage()               {}
func (*S2CSomeoneRobbedMyPosProto) Descriptor() ([]byte, []int) { return fileDescriptorHebi, []int{15} }

func (m *S2CSomeoneRobbedMyPosProto) GetRoomId() int32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

type C2SLeaveRoomProto struct {
	RoomId int32 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
}

func (m *C2SLeaveRoomProto) Reset()                    { *m = C2SLeaveRoomProto{} }
func (m *C2SLeaveRoomProto) String() string            { return proto.CompactTextString(m) }
func (*C2SLeaveRoomProto) ProtoMessage()               {}
func (*C2SLeaveRoomProto) Descriptor() ([]byte, []int) { return fileDescriptorHebi, []int{16} }

func (m *C2SLeaveRoomProto) GetRoomId() int32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

type S2CLeaveRoomProto struct {
	RoomId int32 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
}

func (m *S2CLeaveRoomProto) Reset()                    { *m = S2CLeaveRoomProto{} }
func (m *S2CLeaveRoomProto) String() string            { return proto.CompactTextString(m) }
func (*S2CLeaveRoomProto) ProtoMessage()               {}
func (*S2CLeaveRoomProto) Descriptor() ([]byte, []int) { return fileDescriptorHebi, []int{17} }

func (m *S2CLeaveRoomProto) GetRoomId() int32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

type C2SRobProto struct {
	RoomId int32 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
}

func (m *C2SRobProto) Reset()                    { *m = C2SRobProto{} }
func (m *C2SRobProto) String() string            { return proto.CompactTextString(m) }
func (*C2SRobProto) ProtoMessage()               {}
func (*C2SRobProto) Descriptor() ([]byte, []int) { return fileDescriptorHebi, []int{18} }

func (m *C2SRobProto) GetRoomId() int32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

type S2CRobProto struct {
	RoomId     int32              `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	FirstSucc  bool               `protobuf:"varint,4,opt,name=first_succ,json=firstSucc,proto3" json:"first_succ,omitempty"`
	FirstLink  string             `protobuf:"bytes,5,opt,name=first_link,json=firstLink,proto3" json:"first_link,omitempty"`
	SecondSucc bool               `protobuf:"varint,6,opt,name=second_succ,json=secondSucc,proto3" json:"second_succ,omitempty"`
	SecondLink string             `protobuf:"bytes,7,opt,name=second_link,json=secondLink,proto3" json:"second_link,omitempty"`
	Prize      *proto1.PrizeProto `protobuf:"bytes,8,opt,name=prize" json:"prize,omitempty"`
}

func (m *S2CRobProto) Reset()                    { *m = S2CRobProto{} }
func (m *S2CRobProto) String() string            { return proto.CompactTextString(m) }
func (*S2CRobProto) ProtoMessage()               {}
func (*S2CRobProto) Descriptor() ([]byte, []int) { return fileDescriptorHebi, []int{19} }

func (m *S2CRobProto) GetRoomId() int32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *S2CRobProto) GetFirstSucc() bool {
	if m != nil {
		return m.FirstSucc
	}
	return false
}

func (m *S2CRobProto) GetFirstLink() string {
	if m != nil {
		return m.FirstLink
	}
	return ""
}

func (m *S2CRobProto) GetSecondSucc() bool {
	if m != nil {
		return m.SecondSucc
	}
	return false
}

func (m *S2CRobProto) GetSecondLink() string {
	if m != nil {
		return m.SecondLink
	}
	return ""
}

func (m *S2CRobProto) GetPrize() *proto1.PrizeProto {
	if m != nil {
		return m.Prize
	}
	return nil
}

type S2CSomeoneRobbedMyPrizeProto struct {
	RoomId int32 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
}

func (m *S2CSomeoneRobbedMyPrizeProto) Reset()         { *m = S2CSomeoneRobbedMyPrizeProto{} }
func (m *S2CSomeoneRobbedMyPrizeProto) String() string { return proto.CompactTextString(m) }
func (*S2CSomeoneRobbedMyPrizeProto) ProtoMessage()    {}
func (*S2CSomeoneRobbedMyPrizeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorHebi, []int{20}
}

func (m *S2CSomeoneRobbedMyPrizeProto) GetRoomId() int32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

type S2CCompleteProto struct {
	RoomId int32 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
}

func (m *S2CCompleteProto) Reset()                    { *m = S2CCompleteProto{} }
func (m *S2CCompleteProto) String() string            { return proto.CompactTextString(m) }
func (*S2CCompleteProto) ProtoMessage()               {}
func (*S2CCompleteProto) Descriptor() ([]byte, []int) { return fileDescriptorHebi, []int{21} }

func (m *S2CCompleteProto) GetRoomId() int32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

type C2SViewShowPrizeProto struct {
	HeroLevel int32 `protobuf:"varint,1,opt,name=hero_level,json=heroLevel,proto3" json:"hero_level,omitempty"`
	Goods     int32 `protobuf:"varint,2,opt,name=goods,proto3" json:"goods,omitempty"`
}

func (m *C2SViewShowPrizeProto) Reset()                    { *m = C2SViewShowPrizeProto{} }
func (m *C2SViewShowPrizeProto) String() string            { return proto.CompactTextString(m) }
func (*C2SViewShowPrizeProto) ProtoMessage()               {}
func (*C2SViewShowPrizeProto) Descriptor() ([]byte, []int) { return fileDescriptorHebi, []int{22} }

func (m *C2SViewShowPrizeProto) GetHeroLevel() int32 {
	if m != nil {
		return m.HeroLevel
	}
	return 0
}

func (m *C2SViewShowPrizeProto) GetGoods() int32 {
	if m != nil {
		return m.Goods
	}
	return 0
}

type S2CViewShowPrizeProto struct {
	Prize *proto1.PrizeProto `protobuf:"bytes,1,opt,name=prize" json:"prize,omitempty"`
}

func (m *S2CViewShowPrizeProto) Reset()                    { *m = S2CViewShowPrizeProto{} }
func (m *S2CViewShowPrizeProto) String() string            { return proto.CompactTextString(m) }
func (*S2CViewShowPrizeProto) ProtoMessage()               {}
func (*S2CViewShowPrizeProto) Descriptor() ([]byte, []int) { return fileDescriptorHebi, []int{23} }

func (m *S2CViewShowPrizeProto) GetPrize() *proto1.PrizeProto {
	if m != nil {
		return m.Prize
	}
	return nil
}

func init() {
	proto.RegisterType((*C2SRoomListProto)(nil), "proto.C2SRoomListProto")
	proto.RegisterType((*S2CRoomListProto)(nil), "proto.S2CRoomListProto")
	proto.RegisterType((*S2CHeroRecordListProto)(nil), "proto.S2CHeroRecordListProto")
	proto.RegisterType((*C2SChangeCaptainProto)(nil), "proto.C2SChangeCaptainProto")
	proto.RegisterType((*S2CChangeCaptainProto)(nil), "proto.S2CChangeCaptainProto")
	proto.RegisterType((*S2CChangeRoomCaptainProto)(nil), "proto.S2CChangeRoomCaptainProto")
	proto.RegisterType((*C2SCheckInRoomProto)(nil), "proto.C2SCheckInRoomProto")
	proto.RegisterType((*S2CCheckInRoomProto)(nil), "proto.S2CCheckInRoomProto")
	proto.RegisterType((*C2SCopySelfProto)(nil), "proto.C2SCopySelfProto")
	proto.RegisterType((*S2CCopySelfProto)(nil), "proto.S2CCopySelfProto")
	proto.RegisterType((*C2SJoinRoomProto)(nil), "proto.C2SJoinRoomProto")
	proto.RegisterType((*S2CJoinRoomProto)(nil), "proto.S2CJoinRoomProto")
	proto.RegisterType((*S2CSomeoneJoinedRoomProto)(nil), "proto.S2CSomeoneJoinedRoomProto")
	proto.RegisterType((*C2SRobPosProto)(nil), "proto.C2SRobPosProto")
	proto.RegisterType((*S2CRobPosProto)(nil), "proto.S2CRobPosProto")
	proto.RegisterType((*S2CSomeoneRobbedMyPosProto)(nil), "proto.S2CSomeoneRobbedMyPosProto")
	proto.RegisterType((*C2SLeaveRoomProto)(nil), "proto.C2SLeaveRoomProto")
	proto.RegisterType((*S2CLeaveRoomProto)(nil), "proto.S2CLeaveRoomProto")
	proto.RegisterType((*C2SRobProto)(nil), "proto.C2SRobProto")
	proto.RegisterType((*S2CRobProto)(nil), "proto.S2CRobProto")
	proto.RegisterType((*S2CSomeoneRobbedMyPrizeProto)(nil), "proto.S2CSomeoneRobbedMyPrizeProto")
	proto.RegisterType((*S2CCompleteProto)(nil), "proto.S2CCompleteProto")
	proto.RegisterType((*C2SViewShowPrizeProto)(nil), "proto.C2SViewShowPrizeProto")
	proto.RegisterType((*S2CViewShowPrizeProto)(nil), "proto.S2CViewShowPrizeProto")
}
func (m *C2SRoomListProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SRoomListProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.V != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.V))
	}
	return i, nil
}

func (m *S2CRoomListProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CRoomListProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.V != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.V))
	}
	if m.List != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.List.Size()))
		n1, err := m.List.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *S2CHeroRecordListProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CHeroRecordListProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Records != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.Records.Size()))
		n2, err := m.Records.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *C2SChangeCaptainProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SChangeCaptainProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CaptainId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.CaptainId))
	}
	return i, nil
}

func (m *S2CChangeCaptainProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CChangeCaptainProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CaptainId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.CaptainId))
	}
	return i, nil
}

func (m *S2CChangeRoomCaptainProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CChangeRoomCaptainProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoomId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.RoomId))
	}
	if m.Cpatain != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.Cpatain.Size()))
		n3, err := m.Cpatain.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *C2SCheckInRoomProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCheckInRoomProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoomId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.RoomId))
	}
	if m.GoodsId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.GoodsId))
	}
	return i, nil
}

func (m *S2CCheckInRoomProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCheckInRoomProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoomId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.RoomId))
	}
	if m.GoodsId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.GoodsId))
	}
	return i, nil
}

func (m *C2SCopySelfProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCopySelfProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoomId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.RoomId))
	}
	if m.GoodsId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.GoodsId))
	}
	return i, nil
}

func (m *S2CCopySelfProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCopySelfProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoomId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.RoomId))
	}
	return i, nil
}

func (m *C2SJoinRoomProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SJoinRoomProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoomId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.RoomId))
	}
	if m.GoodsId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.GoodsId))
	}
	return i, nil
}

func (m *S2CJoinRoomProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CJoinRoomProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoomId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.RoomId))
	}
	if m.GoodsId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.GoodsId))
	}
	if m.PrizeId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.PrizeId))
	}
	return i, nil
}

func (m *S2CSomeoneJoinedRoomProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSomeoneJoinedRoomProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoomId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.RoomId))
	}
	return i, nil
}

func (m *C2SRobPosProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SRobPosProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoomId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.RoomId))
	}
	return i, nil
}

func (m *S2CRobPosProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CRobPosProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoomId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.RoomId))
	}
	if m.Succ {
		dAtA[i] = 0x10
		i++
		if m.Succ {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Link) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintHebi(dAtA, i, uint64(len(m.Link)))
		i += copy(dAtA[i:], m.Link)
	}
	return i, nil
}

func (m *S2CSomeoneRobbedMyPosProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSomeoneRobbedMyPosProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoomId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.RoomId))
	}
	return i, nil
}

func (m *C2SLeaveRoomProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SLeaveRoomProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoomId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.RoomId))
	}
	return i, nil
}

func (m *S2CLeaveRoomProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CLeaveRoomProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoomId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.RoomId))
	}
	return i, nil
}

func (m *C2SRobProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SRobProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoomId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.RoomId))
	}
	return i, nil
}

func (m *S2CRobProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CRobProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoomId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.RoomId))
	}
	if m.FirstSucc {
		dAtA[i] = 0x20
		i++
		if m.FirstSucc {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.FirstLink) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintHebi(dAtA, i, uint64(len(m.FirstLink)))
		i += copy(dAtA[i:], m.FirstLink)
	}
	if m.SecondSucc {
		dAtA[i] = 0x30
		i++
		if m.SecondSucc {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.SecondLink) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintHebi(dAtA, i, uint64(len(m.SecondLink)))
		i += copy(dAtA[i:], m.SecondLink)
	}
	if m.Prize != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.Prize.Size()))
		n4, err := m.Prize.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *S2CSomeoneRobbedMyPrizeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSomeoneRobbedMyPrizeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoomId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.RoomId))
	}
	return i, nil
}

func (m *S2CCompleteProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCompleteProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoomId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.RoomId))
	}
	return i, nil
}

func (m *C2SViewShowPrizeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SViewShowPrizeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroLevel != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.HeroLevel))
	}
	if m.Goods != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.Goods))
	}
	return i, nil
}

func (m *S2CViewShowPrizeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CViewShowPrizeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Prize != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.Prize.Size()))
		n5, err := m.Prize.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func encodeFixed64Hebi(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Hebi(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintHebi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *C2SRoomListProto) Size() (n int) {
	var l int
	_ = l
	if m.V != 0 {
		n += 1 + sovHebi(uint64(m.V))
	}
	return n
}

func (m *S2CRoomListProto) Size() (n int) {
	var l int
	_ = l
	if m.V != 0 {
		n += 1 + sovHebi(uint64(m.V))
	}
	if m.List != nil {
		l = m.List.Size()
		n += 1 + l + sovHebi(uint64(l))
	}
	return n
}

func (m *S2CHeroRecordListProto) Size() (n int) {
	var l int
	_ = l
	if m.Records != nil {
		l = m.Records.Size()
		n += 1 + l + sovHebi(uint64(l))
	}
	return n
}

func (m *C2SChangeCaptainProto) Size() (n int) {
	var l int
	_ = l
	if m.CaptainId != 0 {
		n += 1 + sovHebi(uint64(m.CaptainId))
	}
	return n
}

func (m *S2CChangeCaptainProto) Size() (n int) {
	var l int
	_ = l
	if m.CaptainId != 0 {
		n += 1 + sovHebi(uint64(m.CaptainId))
	}
	return n
}

func (m *S2CChangeRoomCaptainProto) Size() (n int) {
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovHebi(uint64(m.RoomId))
	}
	if m.Cpatain != nil {
		l = m.Cpatain.Size()
		n += 1 + l + sovHebi(uint64(l))
	}
	return n
}

func (m *C2SCheckInRoomProto) Size() (n int) {
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovHebi(uint64(m.RoomId))
	}
	if m.GoodsId != 0 {
		n += 1 + sovHebi(uint64(m.GoodsId))
	}
	return n
}

func (m *S2CCheckInRoomProto) Size() (n int) {
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovHebi(uint64(m.RoomId))
	}
	if m.GoodsId != 0 {
		n += 1 + sovHebi(uint64(m.GoodsId))
	}
	return n
}

func (m *C2SCopySelfProto) Size() (n int) {
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovHebi(uint64(m.RoomId))
	}
	if m.GoodsId != 0 {
		n += 1 + sovHebi(uint64(m.GoodsId))
	}
	return n
}

func (m *S2CCopySelfProto) Size() (n int) {
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovHebi(uint64(m.RoomId))
	}
	return n
}

func (m *C2SJoinRoomProto) Size() (n int) {
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovHebi(uint64(m.RoomId))
	}
	if m.GoodsId != 0 {
		n += 1 + sovHebi(uint64(m.GoodsId))
	}
	return n
}

func (m *S2CJoinRoomProto) Size() (n int) {
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovHebi(uint64(m.RoomId))
	}
	if m.GoodsId != 0 {
		n += 1 + sovHebi(uint64(m.GoodsId))
	}
	if m.PrizeId != 0 {
		n += 1 + sovHebi(uint64(m.PrizeId))
	}
	return n
}

func (m *S2CSomeoneJoinedRoomProto) Size() (n int) {
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovHebi(uint64(m.RoomId))
	}
	return n
}

func (m *C2SRobPosProto) Size() (n int) {
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovHebi(uint64(m.RoomId))
	}
	return n
}

func (m *S2CRobPosProto) Size() (n int) {
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovHebi(uint64(m.RoomId))
	}
	if m.Succ {
		n += 2
	}
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovHebi(uint64(l))
	}
	return n
}

func (m *S2CSomeoneRobbedMyPosProto) Size() (n int) {
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovHebi(uint64(m.RoomId))
	}
	return n
}

func (m *C2SLeaveRoomProto) Size() (n int) {
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovHebi(uint64(m.RoomId))
	}
	return n
}

func (m *S2CLeaveRoomProto) Size() (n int) {
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovHebi(uint64(m.RoomId))
	}
	return n
}

func (m *C2SRobProto) Size() (n int) {
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovHebi(uint64(m.RoomId))
	}
	return n
}

func (m *S2CRobProto) Size() (n int) {
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovHebi(uint64(m.RoomId))
	}
	if m.FirstSucc {
		n += 2
	}
	l = len(m.FirstLink)
	if l > 0 {
		n += 1 + l + sovHebi(uint64(l))
	}
	if m.SecondSucc {
		n += 2
	}
	l = len(m.SecondLink)
	if l > 0 {
		n += 1 + l + sovHebi(uint64(l))
	}
	if m.Prize != nil {
		l = m.Prize.Size()
		n += 1 + l + sovHebi(uint64(l))
	}
	return n
}

func (m *S2CSomeoneRobbedMyPrizeProto) Size() (n int) {
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovHebi(uint64(m.RoomId))
	}
	return n
}

func (m *S2CCompleteProto) Size() (n int) {
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovHebi(uint64(m.RoomId))
	}
	return n
}

func (m *C2SViewShowPrizeProto) Size() (n int) {
	var l int
	_ = l
	if m.HeroLevel != 0 {
		n += 1 + sovHebi(uint64(m.HeroLevel))
	}
	if m.Goods != 0 {
		n += 1 + sovHebi(uint64(m.Goods))
	}
	return n
}

func (m *S2CViewShowPrizeProto) Size() (n int) {
	var l int
	_ = l
	if m.Prize != nil {
		l = m.Prize.Size()
		n += 1 + l + sovHebi(uint64(l))
	}
	return n
}

func sovHebi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozHebi(x uint64) (n int) {
	return sovHebi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *C2SRoomListProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHebi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SRoomListProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SRoomListProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field V", wireType)
			}
			m.V = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.V |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHebi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHebi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CRoomListProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHebi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CRoomListProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CRoomListProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field V", wireType)
			}
			m.V = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.V |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHebi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.List == nil {
				m.List = &proto6.HebiInfoProto{}
			}
			if err := m.List.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHebi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHebi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CHeroRecordListProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHebi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CHeroRecordListProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CHeroRecordListProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHebi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Records == nil {
				m.Records = &proto6.HebiHeroRecordProto{}
			}
			if err := m.Records.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHebi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHebi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SChangeCaptainProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHebi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SChangeCaptainProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SChangeCaptainProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainId", wireType)
			}
			m.CaptainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHebi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHebi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CChangeCaptainProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHebi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CChangeCaptainProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CChangeCaptainProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainId", wireType)
			}
			m.CaptainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHebi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHebi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CChangeRoomCaptainProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHebi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CChangeRoomCaptainProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CChangeRoomCaptainProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpatain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHebi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cpatain == nil {
				m.Cpatain = &proto6.HebiCaptainProto{}
			}
			if err := m.Cpatain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHebi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHebi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SCheckInRoomProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHebi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCheckInRoomProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCheckInRoomProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			m.GoodsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHebi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHebi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCheckInRoomProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHebi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCheckInRoomProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCheckInRoomProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			m.GoodsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHebi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHebi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SCopySelfProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHebi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCopySelfProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCopySelfProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			m.GoodsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHebi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHebi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCopySelfProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHebi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCopySelfProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCopySelfProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHebi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHebi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SJoinRoomProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHebi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SJoinRoomProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SJoinRoomProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			m.GoodsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHebi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHebi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CJoinRoomProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHebi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CJoinRoomProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CJoinRoomProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			m.GoodsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrizeId", wireType)
			}
			m.PrizeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrizeId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHebi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHebi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSomeoneJoinedRoomProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHebi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSomeoneJoinedRoomProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSomeoneJoinedRoomProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHebi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHebi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SRobPosProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHebi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SRobPosProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SRobPosProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHebi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHebi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CRobPosProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHebi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CRobPosProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CRobPosProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Succ", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Succ = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHebi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHebi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHebi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSomeoneRobbedMyPosProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHebi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSomeoneRobbedMyPosProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSomeoneRobbedMyPosProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHebi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHebi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SLeaveRoomProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHebi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SLeaveRoomProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SLeaveRoomProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHebi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHebi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CLeaveRoomProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHebi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CLeaveRoomProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CLeaveRoomProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHebi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHebi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SRobProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHebi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SRobProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SRobProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHebi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHebi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CRobProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHebi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CRobProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CRobProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstSucc", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FirstSucc = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHebi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecondSucc", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SecondSucc = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecondLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHebi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecondLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHebi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Prize == nil {
				m.Prize = &proto1.PrizeProto{}
			}
			if err := m.Prize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHebi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHebi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSomeoneRobbedMyPrizeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHebi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSomeoneRobbedMyPrizeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSomeoneRobbedMyPrizeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHebi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHebi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCompleteProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHebi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCompleteProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCompleteProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHebi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHebi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SViewShowPrizeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHebi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SViewShowPrizeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SViewShowPrizeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroLevel", wireType)
			}
			m.HeroLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goods", wireType)
			}
			m.Goods = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Goods |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHebi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHebi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CViewShowPrizeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHebi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CViewShowPrizeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CViewShowPrizeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHebi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Prize == nil {
				m.Prize = &proto1.PrizeProto{}
			}
			if err := m.Prize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHebi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHebi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHebi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHebi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthHebi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowHebi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipHebi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthHebi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHebi   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/gen/pb/hebi/hebi.proto", fileDescriptorHebi)
}

var fileDescriptorHebi = []byte{
	// 655 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xcd, 0x6e, 0xd3, 0x5c,
	0x10, 0xfd, 0xdc, 0x2f, 0x69, 0xda, 0x09, 0xaa, 0x5a, 0x53, 0x68, 0x5a, 0xd1, 0x50, 0x79, 0x01,
	0x45, 0x54, 0x31, 0x98, 0x42, 0xb7, 0x08, 0x4b, 0xa8, 0xae, 0x02, 0x2a, 0xb6, 0xc4, 0x82, 0x4d,
	0xe4, 0x9f, 0xa9, 0x7d, 0x55, 0xdb, 0xd7, 0xb2, 0xdd, 0x44, 0xe5, 0x49, 0x78, 0x24, 0x76, 0xf0,
	0x08, 0x28, 0xbc, 0x08, 0xba, 0x63, 0x27, 0x4e, 0xa5, 0x36, 0x4e, 0x0b, 0x9b, 0xc4, 0x77, 0xe6,
	0x9c, 0x33, 0x33, 0x27, 0x77, 0x1c, 0x78, 0xe1, 0xb3, 0x3c, 0xb8, 0x70, 0x7a, 0x2e, 0x8f, 0xd4,
	0x90, 0xf9, 0x41, 0x9e, 0xd8, 0x23, 0x35, 0xb2, 0x43, 0x3c, 0x52, 0x7d, 0x8c, 0xd5, 0xc4, 0x51,
	0x03, 0x74, 0x18, 0x7d, 0xf4, 0x92, 0x94, 0xe7, 0x5c, 0x6e, 0xd2, 0xd7, 0xce, 0xe1, 0xcd, 0xc4,
	0xc4, 0x51, 0xb3, 0xc0, 0x4e, 0xd1, 0x1b, 0x10, 0x54, 0x75, 0xec, 0x0c, 0x7b, 0xb7, 0x66, 0x55,
	0x25, 0x95, 0x3d, 0x58, 0xd7, 0x35, 0xcb, 0xe4, 0x3c, 0xea, 0xb3, 0x2c, 0x3f, 0xa5, 0x36, 0xee,
	0x81, 0x34, 0xec, 0x48, 0x7b, 0xd2, 0x7e, 0xd3, 0x94, 0x86, 0xca, 0x09, 0xac, 0x5b, 0x9a, 0x3e,
	0x07, 0x21, 0xef, 0x43, 0x23, 0x64, 0x59, 0xde, 0x59, 0xda, 0x93, 0xf6, 0xdb, 0xda, 0x66, 0xa1,
	0xdc, 0x3b, 0x46, 0x87, 0x19, 0xf1, 0x19, 0x27, 0x86, 0x49, 0x08, 0xe5, 0x23, 0x3c, 0xb4, 0x34,
	0xfd, 0x18, 0x53, 0x6e, 0xa2, 0xcb, 0x53, 0xaf, 0x52, 0x3c, 0x84, 0x56, 0x4a, 0xa1, 0x8c, 0x74,
	0xdb, 0xda, 0xce, 0x8c, 0x4c, 0x45, 0x28, 0xc4, 0x26, 0x50, 0xe5, 0x0d, 0x3c, 0xd0, 0x35, 0x4b,
	0x0f, 0xec, 0xd8, 0x47, 0xdd, 0x4e, 0x72, 0x9b, 0xc5, 0x85, 0xdc, 0x2e, 0x80, 0x5b, 0x9c, 0x07,
	0xcc, 0x2b, 0x3b, 0x5d, 0x2d, 0x23, 0x86, 0x27, 0x78, 0x96, 0xa6, 0xdf, 0x9e, 0xe7, 0xc3, 0xf6,
	0x94, 0x27, 0x1c, 0xb9, 0xc2, 0xdd, 0x82, 0x56, 0xca, 0x79, 0x54, 0x11, 0x97, 0xc5, 0xd1, 0xf0,
	0xe4, 0x97, 0xd0, 0x72, 0x13, 0x5b, 0x00, 0x4b, 0x8b, 0xb6, 0x66, 0x66, 0x9b, 0x95, 0x30, 0x27,
	0x38, 0xc5, 0x80, 0xfb, 0x34, 0x18, 0xba, 0xe7, 0x46, 0x2c, 0x2a, 0xd5, 0x94, 0xd8, 0x86, 0x15,
	0x9f, 0x73, 0x2f, 0x13, 0x99, 0x25, 0xca, 0xb4, 0xe8, 0x6c, 0x78, 0x42, 0x8a, 0x7a, 0xfe, 0x07,
	0x52, 0xef, 0xe9, 0xb2, 0xe8, 0x3c, 0xb9, 0xb4, 0x30, 0x3c, 0xbb, 0xbb, 0xce, 0x73, 0xba, 0x52,
	0x8b, 0xe9, 0x94, 0x45, 0x4f, 0x38, 0xfb, 0xcb, 0xe6, 0x6d, 0x2a, 0x7a, 0x07, 0x9d, 0xff, 0xaf,
	0xe8, 0x88, 0x54, 0x92, 0xb2, 0xaf, 0x28, 0x52, 0x8d, 0x22, 0x45, 0x67, 0xc3, 0x53, 0x0e, 0xe9,
	0x7a, 0x58, 0x3c, 0x42, 0x1e, 0xa3, 0xa8, 0x84, 0x5e, 0x7d, 0x2d, 0xe5, 0x19, 0xac, 0xd1, 0x0a,
	0x3a, 0xa7, 0x3c, 0xab, 0x81, 0x7e, 0x82, 0x35, 0xda, 0xc5, 0x7a, 0xa8, 0x2c, 0x43, 0x23, 0xbb,
	0x70, 0x5d, 0x72, 0x61, 0xc5, 0xa4, 0x67, 0x11, 0x0b, 0x59, 0x7c, 0x4e, 0x13, 0xad, 0x9a, 0xf4,
	0xac, 0xbc, 0x86, 0x9d, 0xaa, 0x67, 0x93, 0x3b, 0x0e, 0x7a, 0x1f, 0x2e, 0xeb, 0x3b, 0x39, 0x80,
	0x0d, 0x5d, 0xb3, 0xfa, 0x68, 0x0f, 0x71, 0x81, 0x11, 0x0f, 0x60, 0xc3, 0xd2, 0xf4, 0x45, 0xd1,
	0x4f, 0xa0, 0x5d, 0x1a, 0x32, 0x1f, 0xf7, 0x43, 0x82, 0x76, 0x69, 0xc7, 0x7c, 0x2f, 0x76, 0x01,
	0xce, 0x58, 0x9a, 0xe5, 0x03, 0x72, 0xa4, 0x41, 0x8e, 0xac, 0x52, 0xc4, 0x12, 0xb6, 0x4c, 0xd3,
	0x64, 0x4e, 0x93, 0xcc, 0x29, 0xd2, 0x7d, 0x16, 0x9f, 0xcb, 0x8f, 0xa1, 0x9d, 0xa1, 0xcb, 0x63,
	0xaf, 0xa0, 0x2f, 0x13, 0x1d, 0x8a, 0x10, 0xf1, 0x2b, 0x00, 0x09, 0xb4, 0x48, 0xa0, 0x04, 0x90,
	0xc2, 0x53, 0x68, 0xd2, 0x15, 0xe9, 0xac, 0xd0, 0xfa, 0x6f, 0x94, 0xeb, 0x7f, 0x2a, 0x62, 0xc5,
	0xe2, 0x17, 0x79, 0xe5, 0x08, 0x1e, 0x5d, 0xf3, 0x63, 0x4c, 0x61, 0x37, 0x5b, 0x31, 0xd9, 0xa8,
	0x28, 0x09, 0x31, 0xaf, 0x03, 0xf7, 0xe9, 0xad, 0xf9, 0x99, 0xe1, 0xc8, 0x0a, 0xf8, 0x68, 0x46,
	0x7e, 0x17, 0x20, 0xc0, 0x94, 0x0f, 0x42, 0x1c, 0x62, 0x38, 0x79, 0xfb, 0x89, 0x48, 0x5f, 0x04,
	0xe4, 0x4d, 0x68, 0xd2, 0x12, 0x94, 0x9b, 0x55, 0x1c, 0x94, 0xb7, 0xf4, 0x2e, 0xbd, 0x46, 0x6d,
	0x3a, 0xb5, 0x34, 0x7f, 0xea, 0x77, 0x9d, 0xef, 0xe3, 0xae, 0xf4, 0x73, 0xdc, 0x95, 0x7e, 0x8d,
	0xbb, 0xd2, 0xb7, 0xdf, 0xdd, 0xff, 0x8e, 0xa5, 0x2f, 0x0d, 0xf1, 0x1f, 0xe5, 0x2c, 0x13, 0xe5,
	0xd5, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc9, 0x37, 0xf1, 0xa0, 0x4b, 0x07, 0x00, 0x00,
}
