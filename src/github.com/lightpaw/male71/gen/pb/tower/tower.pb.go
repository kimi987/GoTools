// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/gen/pb/tower/tower.proto
// DO NOT EDIT!

/*
	Package tower is a generated protocol buffer package.

	It is generated from these files:
		github.com/lightpaw/male7/gen/pb/tower/tower.proto

	It has these top-level messages:
		C2SChallengeProto
		S2CChallengeProto
		S2CFailureChallengeProto
		S2CAutoChallengeProto
		C2SCollectBoxProto
		S2CCollectBoxProto
		C2SListPassReplayProto
		S2CListPassReplayProto
		S2CUpdateCurrentFloorProto
*/
package tower

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type C2SChallengeProto struct {
	Floor int32 `protobuf:"varint,1,opt,name=floor,proto3" json:"floor,omitempty"`
}

func (m *C2SChallengeProto) Reset()                    { *m = C2SChallengeProto{} }
func (m *C2SChallengeProto) String() string            { return proto.CompactTextString(m) }
func (*C2SChallengeProto) ProtoMessage()               {}
func (*C2SChallengeProto) Descriptor() ([]byte, []int) { return fileDescriptorTower, []int{0} }

func (m *C2SChallengeProto) GetFloor() int32 {
	if m != nil {
		return m.Floor
	}
	return 0
}

type S2CChallengeProto struct {
	Link           string `protobuf:"bytes,3,opt,name=link,proto3" json:"link,omitempty"`
	Share          []byte `protobuf:"bytes,7,opt,name=share,proto3" json:"share,omitempty"`
	FirstPassPrize []byte `protobuf:"bytes,4,opt,name=first_pass_prize,json=firstPassPrize,proto3" json:"first_pass_prize,omitempty"`
	Prize          []byte `protobuf:"bytes,5,opt,name=prize,proto3" json:"prize,omitempty"`
	AutoMaxFloor   int32  `protobuf:"varint,6,opt,name=auto_max_floor,json=autoMaxFloor,proto3" json:"auto_max_floor,omitempty"`
}

func (m *S2CChallengeProto) Reset()                    { *m = S2CChallengeProto{} }
func (m *S2CChallengeProto) String() string            { return proto.CompactTextString(m) }
func (*S2CChallengeProto) ProtoMessage()               {}
func (*S2CChallengeProto) Descriptor() ([]byte, []int) { return fileDescriptorTower, []int{1} }

func (m *S2CChallengeProto) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *S2CChallengeProto) GetShare() []byte {
	if m != nil {
		return m.Share
	}
	return nil
}

func (m *S2CChallengeProto) GetFirstPassPrize() []byte {
	if m != nil {
		return m.FirstPassPrize
	}
	return nil
}

func (m *S2CChallengeProto) GetPrize() []byte {
	if m != nil {
		return m.Prize
	}
	return nil
}

func (m *S2CChallengeProto) GetAutoMaxFloor() int32 {
	if m != nil {
		return m.AutoMaxFloor
	}
	return 0
}

type S2CFailureChallengeProto struct {
	ChallengeTimes         int32  `protobuf:"varint,1,opt,name=challenge_times,json=challengeTimes,proto3" json:"challenge_times,omitempty"`
	NextResetChallengeTime int32  `protobuf:"varint,4,opt,name=next_reset_challenge_time,json=nextResetChallengeTime,proto3" json:"next_reset_challenge_time,omitempty"`
	Link                   string `protobuf:"bytes,2,opt,name=link,proto3" json:"link,omitempty"`
	Share                  []byte `protobuf:"bytes,3,opt,name=share,proto3" json:"share,omitempty"`
}

func (m *S2CFailureChallengeProto) Reset()                    { *m = S2CFailureChallengeProto{} }
func (m *S2CFailureChallengeProto) String() string            { return proto.CompactTextString(m) }
func (*S2CFailureChallengeProto) ProtoMessage()               {}
func (*S2CFailureChallengeProto) Descriptor() ([]byte, []int) { return fileDescriptorTower, []int{2} }

func (m *S2CFailureChallengeProto) GetChallengeTimes() int32 {
	if m != nil {
		return m.ChallengeTimes
	}
	return 0
}

func (m *S2CFailureChallengeProto) GetNextResetChallengeTime() int32 {
	if m != nil {
		return m.NextResetChallengeTime
	}
	return 0
}

func (m *S2CFailureChallengeProto) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *S2CFailureChallengeProto) GetShare() []byte {
	if m != nil {
		return m.Share
	}
	return nil
}

type S2CAutoChallengeProto struct {
	Floor int32    `protobuf:"varint,1,opt,name=floor,proto3" json:"floor,omitempty"`
	Prize [][]byte `protobuf:"bytes,2,rep,name=prize" json:"prize,omitempty"`
}

func (m *S2CAutoChallengeProto) Reset()                    { *m = S2CAutoChallengeProto{} }
func (m *S2CAutoChallengeProto) String() string            { return proto.CompactTextString(m) }
func (*S2CAutoChallengeProto) ProtoMessage()               {}
func (*S2CAutoChallengeProto) Descriptor() ([]byte, []int) { return fileDescriptorTower, []int{3} }

func (m *S2CAutoChallengeProto) GetFloor() int32 {
	if m != nil {
		return m.Floor
	}
	return 0
}

func (m *S2CAutoChallengeProto) GetPrize() [][]byte {
	if m != nil {
		return m.Prize
	}
	return nil
}

type C2SCollectBoxProto struct {
	BoxFloor int32 `protobuf:"varint,1,opt,name=box_floor,json=boxFloor,proto3" json:"box_floor,omitempty"`
}

func (m *C2SCollectBoxProto) Reset()                    { *m = C2SCollectBoxProto{} }
func (m *C2SCollectBoxProto) String() string            { return proto.CompactTextString(m) }
func (*C2SCollectBoxProto) ProtoMessage()               {}
func (*C2SCollectBoxProto) Descriptor() ([]byte, []int) { return fileDescriptorTower, []int{4} }

func (m *C2SCollectBoxProto) GetBoxFloor() int32 {
	if m != nil {
		return m.BoxFloor
	}
	return 0
}

type S2CCollectBoxProto struct {
	BoxFloor int32 `protobuf:"varint,1,opt,name=box_floor,json=boxFloor,proto3" json:"box_floor,omitempty"`
}

func (m *S2CCollectBoxProto) Reset()                    { *m = S2CCollectBoxProto{} }
func (m *S2CCollectBoxProto) String() string            { return proto.CompactTextString(m) }
func (*S2CCollectBoxProto) ProtoMessage()               {}
func (*S2CCollectBoxProto) Descriptor() ([]byte, []int) { return fileDescriptorTower, []int{5} }

func (m *S2CCollectBoxProto) GetBoxFloor() int32 {
	if m != nil {
		return m.BoxFloor
	}
	return 0
}

type C2SListPassReplayProto struct {
	Floor int32 `protobuf:"varint,1,opt,name=floor,proto3" json:"floor,omitempty"`
}

func (m *C2SListPassReplayProto) Reset()                    { *m = C2SListPassReplayProto{} }
func (m *C2SListPassReplayProto) String() string            { return proto.CompactTextString(m) }
func (*C2SListPassReplayProto) ProtoMessage()               {}
func (*C2SListPassReplayProto) Descriptor() ([]byte, []int) { return fileDescriptorTower, []int{6} }

func (m *C2SListPassReplayProto) GetFloor() int32 {
	if m != nil {
		return m.Floor
	}
	return 0
}

type S2CListPassReplayProto struct {
	Floor int32  `protobuf:"varint,1,opt,name=floor,proto3" json:"floor,omitempty"`
	Data  []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *S2CListPassReplayProto) Reset()                    { *m = S2CListPassReplayProto{} }
func (m *S2CListPassReplayProto) String() string            { return proto.CompactTextString(m) }
func (*S2CListPassReplayProto) ProtoMessage()               {}
func (*S2CListPassReplayProto) Descriptor() ([]byte, []int) { return fileDescriptorTower, []int{7} }

func (m *S2CListPassReplayProto) GetFloor() int32 {
	if m != nil {
		return m.Floor
	}
	return 0
}

func (m *S2CListPassReplayProto) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type S2CUpdateCurrentFloorProto struct {
	Floor int32 `protobuf:"varint,1,opt,name=floor,proto3" json:"floor,omitempty"`
}

func (m *S2CUpdateCurrentFloorProto) Reset()                    { *m = S2CUpdateCurrentFloorProto{} }
func (m *S2CUpdateCurrentFloorProto) String() string            { return proto.CompactTextString(m) }
func (*S2CUpdateCurrentFloorProto) ProtoMessage()               {}
func (*S2CUpdateCurrentFloorProto) Descriptor() ([]byte, []int) { return fileDescriptorTower, []int{8} }

func (m *S2CUpdateCurrentFloorProto) GetFloor() int32 {
	if m != nil {
		return m.Floor
	}
	return 0
}

func init() {
	proto.RegisterType((*C2SChallengeProto)(nil), "proto.C2SChallengeProto")
	proto.RegisterType((*S2CChallengeProto)(nil), "proto.S2CChallengeProto")
	proto.RegisterType((*S2CFailureChallengeProto)(nil), "proto.S2CFailureChallengeProto")
	proto.RegisterType((*S2CAutoChallengeProto)(nil), "proto.S2CAutoChallengeProto")
	proto.RegisterType((*C2SCollectBoxProto)(nil), "proto.C2SCollectBoxProto")
	proto.RegisterType((*S2CCollectBoxProto)(nil), "proto.S2CCollectBoxProto")
	proto.RegisterType((*C2SListPassReplayProto)(nil), "proto.C2SListPassReplayProto")
	proto.RegisterType((*S2CListPassReplayProto)(nil), "proto.S2CListPassReplayProto")
	proto.RegisterType((*S2CUpdateCurrentFloorProto)(nil), "proto.S2CUpdateCurrentFloorProto")
}
func (m *C2SChallengeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SChallengeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Floor != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTower(dAtA, i, uint64(m.Floor))
	}
	return i, nil
}

func (m *S2CChallengeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CChallengeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Link) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTower(dAtA, i, uint64(len(m.Link)))
		i += copy(dAtA[i:], m.Link)
	}
	if len(m.FirstPassPrize) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTower(dAtA, i, uint64(len(m.FirstPassPrize)))
		i += copy(dAtA[i:], m.FirstPassPrize)
	}
	if len(m.Prize) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTower(dAtA, i, uint64(len(m.Prize)))
		i += copy(dAtA[i:], m.Prize)
	}
	if m.AutoMaxFloor != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTower(dAtA, i, uint64(m.AutoMaxFloor))
	}
	if len(m.Share) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTower(dAtA, i, uint64(len(m.Share)))
		i += copy(dAtA[i:], m.Share)
	}
	return i, nil
}

func (m *S2CFailureChallengeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CFailureChallengeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChallengeTimes != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTower(dAtA, i, uint64(m.ChallengeTimes))
	}
	if len(m.Link) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTower(dAtA, i, uint64(len(m.Link)))
		i += copy(dAtA[i:], m.Link)
	}
	if len(m.Share) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTower(dAtA, i, uint64(len(m.Share)))
		i += copy(dAtA[i:], m.Share)
	}
	if m.NextResetChallengeTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTower(dAtA, i, uint64(m.NextResetChallengeTime))
	}
	return i, nil
}

func (m *S2CAutoChallengeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CAutoChallengeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Floor != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTower(dAtA, i, uint64(m.Floor))
	}
	if len(m.Prize) > 0 {
		for _, b := range m.Prize {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTower(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *C2SCollectBoxProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCollectBoxProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BoxFloor != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTower(dAtA, i, uint64(m.BoxFloor))
	}
	return i, nil
}

func (m *S2CCollectBoxProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCollectBoxProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BoxFloor != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTower(dAtA, i, uint64(m.BoxFloor))
	}
	return i, nil
}

func (m *C2SListPassReplayProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SListPassReplayProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Floor != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTower(dAtA, i, uint64(m.Floor))
	}
	return i, nil
}

func (m *S2CListPassReplayProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CListPassReplayProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Floor != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTower(dAtA, i, uint64(m.Floor))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTower(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *S2CUpdateCurrentFloorProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateCurrentFloorProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Floor != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTower(dAtA, i, uint64(m.Floor))
	}
	return i, nil
}

func encodeFixed64Tower(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Tower(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintTower(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *C2SChallengeProto) Size() (n int) {
	var l int
	_ = l
	if m.Floor != 0 {
		n += 1 + sovTower(uint64(m.Floor))
	}
	return n
}

func (m *S2CChallengeProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovTower(uint64(l))
	}
	l = len(m.FirstPassPrize)
	if l > 0 {
		n += 1 + l + sovTower(uint64(l))
	}
	l = len(m.Prize)
	if l > 0 {
		n += 1 + l + sovTower(uint64(l))
	}
	if m.AutoMaxFloor != 0 {
		n += 1 + sovTower(uint64(m.AutoMaxFloor))
	}
	l = len(m.Share)
	if l > 0 {
		n += 1 + l + sovTower(uint64(l))
	}
	return n
}

func (m *S2CFailureChallengeProto) Size() (n int) {
	var l int
	_ = l
	if m.ChallengeTimes != 0 {
		n += 1 + sovTower(uint64(m.ChallengeTimes))
	}
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovTower(uint64(l))
	}
	l = len(m.Share)
	if l > 0 {
		n += 1 + l + sovTower(uint64(l))
	}
	if m.NextResetChallengeTime != 0 {
		n += 1 + sovTower(uint64(m.NextResetChallengeTime))
	}
	return n
}

func (m *S2CAutoChallengeProto) Size() (n int) {
	var l int
	_ = l
	if m.Floor != 0 {
		n += 1 + sovTower(uint64(m.Floor))
	}
	if len(m.Prize) > 0 {
		for _, b := range m.Prize {
			l = len(b)
			n += 1 + l + sovTower(uint64(l))
		}
	}
	return n
}

func (m *C2SCollectBoxProto) Size() (n int) {
	var l int
	_ = l
	if m.BoxFloor != 0 {
		n += 1 + sovTower(uint64(m.BoxFloor))
	}
	return n
}

func (m *S2CCollectBoxProto) Size() (n int) {
	var l int
	_ = l
	if m.BoxFloor != 0 {
		n += 1 + sovTower(uint64(m.BoxFloor))
	}
	return n
}

func (m *C2SListPassReplayProto) Size() (n int) {
	var l int
	_ = l
	if m.Floor != 0 {
		n += 1 + sovTower(uint64(m.Floor))
	}
	return n
}

func (m *S2CListPassReplayProto) Size() (n int) {
	var l int
	_ = l
	if m.Floor != 0 {
		n += 1 + sovTower(uint64(m.Floor))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTower(uint64(l))
	}
	return n
}

func (m *S2CUpdateCurrentFloorProto) Size() (n int) {
	var l int
	_ = l
	if m.Floor != 0 {
		n += 1 + sovTower(uint64(m.Floor))
	}
	return n
}

func sovTower(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTower(x uint64) (n int) {
	return sovTower(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *C2SChallengeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SChallengeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SChallengeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Floor", wireType)
			}
			m.Floor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Floor |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CChallengeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CChallengeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CChallengeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTower
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstPassPrize", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTower
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstPassPrize = append(m.FirstPassPrize[:0], dAtA[iNdEx:postIndex]...)
			if m.FirstPassPrize == nil {
				m.FirstPassPrize = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prize", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTower
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prize = append(m.Prize[:0], dAtA[iNdEx:postIndex]...)
			if m.Prize == nil {
				m.Prize = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoMaxFloor", wireType)
			}
			m.AutoMaxFloor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AutoMaxFloor |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Share", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTower
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Share = append(m.Share[:0], dAtA[iNdEx:postIndex]...)
			if m.Share == nil {
				m.Share = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CFailureChallengeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CFailureChallengeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CFailureChallengeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeTimes", wireType)
			}
			m.ChallengeTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTower
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Share", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTower
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Share = append(m.Share[:0], dAtA[iNdEx:postIndex]...)
			if m.Share == nil {
				m.Share = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextResetChallengeTime", wireType)
			}
			m.NextResetChallengeTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextResetChallengeTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CAutoChallengeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CAutoChallengeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CAutoChallengeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Floor", wireType)
			}
			m.Floor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Floor |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prize", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTower
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prize = append(m.Prize, make([]byte, postIndex-iNdEx))
			copy(m.Prize[len(m.Prize)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SCollectBoxProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCollectBoxProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCollectBoxProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxFloor", wireType)
			}
			m.BoxFloor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BoxFloor |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCollectBoxProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCollectBoxProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCollectBoxProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxFloor", wireType)
			}
			m.BoxFloor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BoxFloor |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SListPassReplayProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SListPassReplayProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SListPassReplayProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Floor", wireType)
			}
			m.Floor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Floor |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CListPassReplayProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CListPassReplayProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CListPassReplayProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Floor", wireType)
			}
			m.Floor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Floor |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTower
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateCurrentFloorProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateCurrentFloorProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateCurrentFloorProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Floor", wireType)
			}
			m.Floor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Floor |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTower(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTower
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTower
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTower
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTower
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTower
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTower(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTower = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTower   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/gen/pb/tower/tower.proto", fileDescriptorTower)
}

var fileDescriptorTower = []byte{
	// 437 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0xcd, 0x8e, 0xd3, 0x30,
	0x10, 0xc6, 0xdb, 0xcd, 0xc2, 0x8e, 0xaa, 0xc2, 0x46, 0x50, 0x65, 0x41, 0xaa, 0xaa, 0x08, 0x89,
	0x72, 0x69, 0x84, 0x39, 0x20, 0x8e, 0xd4, 0xd2, 0x8a, 0x03, 0x48, 0x55, 0x02, 0x17, 0x2e, 0x91,
	0xd3, 0x9d, 0x6d, 0x2d, 0xdc, 0x38, 0xb2, 0x1d, 0x6d, 0xe1, 0x49, 0xb8, 0x73, 0xe1, 0x51, 0x38,
	0xf2, 0x08, 0xa8, 0xbc, 0x08, 0xb2, 0xcd, 0x86, 0xb2, 0x87, 0x55, 0xb9, 0x24, 0x9e, 0x6f, 0x7e,
	0xbf, 0x6f, 0x06, 0xe8, 0x52, 0xd8, 0x55, 0x5b, 0x4d, 0x17, 0x6a, 0x9d, 0x49, 0xb1, 0x5c, 0xd9,
	0x86, 0x5f, 0x66, 0x6b, 0x2e, 0xf1, 0x45, 0xb6, 0xc4, 0x3a, 0x6b, 0xaa, 0xcc, 0xaa, 0x4b, 0xd4,
	0xe1, 0x3b, 0x6d, 0xb4, 0xb2, 0x2a, 0x8e, 0xfc, 0x2f, 0x7d, 0x0a, 0x27, 0x8c, 0x16, 0x6c, 0xc5,
	0xa5, 0xc4, 0x7a, 0x89, 0x73, 0xef, 0xbb, 0x0f, 0xd1, 0x85, 0x54, 0x4a, 0x27, 0x64, 0x4c, 0x26,
	0x51, 0x1e, 0x8c, 0xf4, 0x2b, 0x81, 0x93, 0x82, 0xb2, 0x6b, 0xb1, 0x31, 0x1c, 0x4a, 0x51, 0x7f,
	0x4c, 0x7a, 0x63, 0x32, 0x39, 0xce, 0xfd, 0x3b, 0x9e, 0xc0, 0xbd, 0x0b, 0xa1, 0x8d, 0x2d, 0x1b,
	0x6e, 0x4c, 0xd9, 0x68, 0xf1, 0x19, 0x93, 0xc3, 0x31, 0x99, 0xf4, 0xf3, 0x81, 0xc7, 0xe7, 0xdc,
	0x98, 0xb9, 0x43, 0x5d, 0xa7, 0xe0, 0x8e, 0xbc, 0x3b, 0x18, 0xf1, 0x63, 0x18, 0xf0, 0xd6, 0xaa,
	0x72, 0xcd, 0x37, 0x65, 0x18, 0xe4, 0xc8, 0x0f, 0xd2, 0x77, 0xe8, 0x5b, 0xbe, 0x39, 0x73, 0x98,
	0xcb, 0x35, 0x2b, 0xae, 0x31, 0xb9, 0x1d, 0x72, 0xbd, 0x91, 0x7e, 0x23, 0x90, 0x14, 0x94, 0x9d,
	0x71, 0x21, 0x5b, 0x8d, 0xd7, 0x86, 0x7d, 0x02, 0x77, 0x17, 0x57, 0x48, 0x69, 0xc5, 0x1a, 0xcd,
	0x1f, 0x8a, 0x83, 0x0e, 0x7e, 0xe7, 0xd0, 0x8e, 0xd5, 0xc1, 0x0e, 0xab, 0xae, 0x5f, 0x6f, 0xa7,
	0x5f, 0xfc, 0x12, 0x4e, 0x6b, 0xdc, 0xd8, 0x52, 0xa3, 0x41, 0x5b, 0xfe, 0x5b, 0xdd, 0x93, 0x8e,
	0xf2, 0xa1, 0x0b, 0xc8, 0x9d, 0x9f, 0xed, 0x76, 0x49, 0x19, 0x3c, 0x28, 0x28, 0x7b, 0xd5, 0x5a,
	0xb5, 0x8f, 0xfe, 0x7f, 0xb5, 0x3a, 0x18, 0xf7, 0x3a, 0xad, 0xd2, 0x67, 0x10, 0xbb, 0x05, 0x2a,
	0x29, 0x71, 0x61, 0x67, 0x6a, 0x13, 0x2a, 0x3c, 0x82, 0xe3, 0x4a, 0x5d, 0x89, 0x17, 0xaa, 0xdc,
	0xa9, 0x54, 0x10, 0xce, 0xa5, 0xb8, 0x3d, 0xfe, 0x4f, 0xca, 0x14, 0x86, 0x8c, 0x16, 0x6f, 0x44,
	0xd8, 0x5d, 0x8e, 0x8d, 0xe4, 0x9f, 0x6e, 0xba, 0x95, 0x19, 0x0c, 0x0b, 0xca, 0xf6, 0x8e, 0x77,
	0x7a, 0x9f, 0x73, 0xcb, 0xbd, 0xde, 0xfd, 0xdc, 0xbf, 0x53, 0x0a, 0x0f, 0x0b, 0xca, 0xde, 0x37,
	0xe7, 0xdc, 0x22, 0x6b, 0xb5, 0xc6, 0xda, 0xfa, 0x61, 0x6e, 0xa8, 0x33, 0x3b, 0xfd, 0xbe, 0x1d,
	0x91, 0x1f, 0xdb, 0x11, 0xf9, 0xb9, 0x1d, 0x91, 0x2f, 0xbf, 0x46, 0xb7, 0x5e, 0x93, 0x0f, 0x91,
	0x3f, 0xfb, 0xea, 0xc8, 0x1f, 0xfc, 0xf3, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf6, 0x83, 0xe7,
	0x0e, 0x2d, 0x03, 0x00, 0x00,
}
