// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/gen/pb/fishing/fishing.proto
// DO NOT EDIT!

/*
	Package fishing is a generated protocol buffer package.

	It is generated from these files:
		github.com/lightpaw/male7/gen/pb/fishing/fishing.proto

	It has these top-level messages:
		C2SFishingProto
		S2CFishingProto
		S2CFishingBroadcastProto
		S2CUpdateFishPointProto
		S2CFishPointExchangeProto
		C2SSetFishingCaptainProto
		S2CSetFishingCaptainProto
*/
package fishing

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type C2SFishingProto struct {
	Times    int32 `protobuf:"varint,1,opt,name=times,proto3" json:"times,omitempty"`
	FishType int32 `protobuf:"varint,2,opt,name=fish_type,json=fishType,proto3" json:"fish_type,omitempty"`
	UseGoods bool  `protobuf:"varint,3,opt,name=use_goods,json=useGoods,proto3" json:"use_goods,omitempty"`
}

func (m *C2SFishingProto) Reset()                    { *m = C2SFishingProto{} }
func (m *C2SFishingProto) String() string            { return proto.CompactTextString(m) }
func (*C2SFishingProto) ProtoMessage()               {}
func (*C2SFishingProto) Descriptor() ([]byte, []int) { return fileDescriptorFishing, []int{0} }

func (m *C2SFishingProto) GetTimes() int32 {
	if m != nil {
		return m.Times
	}
	return 0
}

func (m *C2SFishingProto) GetFishType() int32 {
	if m != nil {
		return m.FishType
	}
	return 0
}

func (m *C2SFishingProto) GetUseGoods() bool {
	if m != nil {
		return m.UseGoods
	}
	return false
}

type S2CFishingProto struct {
	FishingResult   [][]byte `protobuf:"bytes,5,rep,name=fishing_result,json=fishingResult" json:"fishing_result,omitempty"`
	HaveSoulToGoods []bool   `protobuf:"varint,6,rep,name=have_soul_to_goods,json=haveSoulToGoods" json:"have_soul_to_goods,omitempty"`
	ShowIndex       []int32  `protobuf:"varint,9,rep,name=show_index,json=showIndex" json:"show_index,omitempty"`
	Times           int32    `protobuf:"varint,8,opt,name=times,proto3" json:"times,omitempty"`
	FishType        int32    `protobuf:"varint,10,opt,name=fish_type,json=fishType,proto3" json:"fish_type,omitempty"`
	FishingTimes    int32    `protobuf:"varint,7,opt,name=fishing_times,json=fishingTimes,proto3" json:"fishing_times,omitempty"`
	NextTime        int32    `protobuf:"varint,11,opt,name=next_time,json=nextTime,proto3" json:"next_time,omitempty"`
}

func (m *S2CFishingProto) Reset()                    { *m = S2CFishingProto{} }
func (m *S2CFishingProto) String() string            { return proto.CompactTextString(m) }
func (*S2CFishingProto) ProtoMessage()               {}
func (*S2CFishingProto) Descriptor() ([]byte, []int) { return fileDescriptorFishing, []int{1} }

func (m *S2CFishingProto) GetFishingResult() [][]byte {
	if m != nil {
		return m.FishingResult
	}
	return nil
}

func (m *S2CFishingProto) GetHaveSoulToGoods() []bool {
	if m != nil {
		return m.HaveSoulToGoods
	}
	return nil
}

func (m *S2CFishingProto) GetShowIndex() []int32 {
	if m != nil {
		return m.ShowIndex
	}
	return nil
}

func (m *S2CFishingProto) GetTimes() int32 {
	if m != nil {
		return m.Times
	}
	return 0
}

func (m *S2CFishingProto) GetFishType() int32 {
	if m != nil {
		return m.FishType
	}
	return 0
}

func (m *S2CFishingProto) GetFishingTimes() int32 {
	if m != nil {
		return m.FishingTimes
	}
	return 0
}

func (m *S2CFishingProto) GetNextTime() int32 {
	if m != nil {
		return m.NextTime
	}
	return 0
}

type S2CFishingBroadcastProto struct {
	Id       []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Flagname string `protobuf:"bytes,3,opt,name=flagname,proto3" json:"flagname,omitempty"`
	Prize    []byte `protobuf:"bytes,7,opt,name=prize,proto3" json:"prize,omitempty"`
}

func (m *S2CFishingBroadcastProto) Reset()                    { *m = S2CFishingBroadcastProto{} }
func (m *S2CFishingBroadcastProto) String() string            { return proto.CompactTextString(m) }
func (*S2CFishingBroadcastProto) ProtoMessage()               {}
func (*S2CFishingBroadcastProto) Descriptor() ([]byte, []int) { return fileDescriptorFishing, []int{2} }

func (m *S2CFishingBroadcastProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *S2CFishingBroadcastProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *S2CFishingBroadcastProto) GetFlagname() string {
	if m != nil {
		return m.Flagname
	}
	return ""
}

func (m *S2CFishingBroadcastProto) GetPrize() []byte {
	if m != nil {
		return m.Prize
	}
	return nil
}

type S2CUpdateFishPointProto struct {
	Point int32 `protobuf:"varint,1,opt,name=point,proto3" json:"point,omitempty"`
}

func (m *S2CUpdateFishPointProto) Reset()                    { *m = S2CUpdateFishPointProto{} }
func (m *S2CUpdateFishPointProto) String() string            { return proto.CompactTextString(m) }
func (*S2CUpdateFishPointProto) ProtoMessage()               {}
func (*S2CUpdateFishPointProto) Descriptor() ([]byte, []int) { return fileDescriptorFishing, []int{3} }

func (m *S2CUpdateFishPointProto) GetPoint() int32 {
	if m != nil {
		return m.Point
	}
	return 0
}

type S2CFishPointExchangeProto struct {
	Prize         []byte `protobuf:"bytes,1,opt,name=prize,proto3" json:"prize,omitempty"`
	ExchangeIndex int32  `protobuf:"varint,2,opt,name=exchange_index,json=exchangeIndex,proto3" json:"exchange_index,omitempty"`
	Exist         bool   `protobuf:"varint,3,opt,name=exist,proto3" json:"exist,omitempty"`
}

func (m *S2CFishPointExchangeProto) Reset()                    { *m = S2CFishPointExchangeProto{} }
func (m *S2CFishPointExchangeProto) String() string            { return proto.CompactTextString(m) }
func (*S2CFishPointExchangeProto) ProtoMessage()               {}
func (*S2CFishPointExchangeProto) Descriptor() ([]byte, []int) { return fileDescriptorFishing, []int{4} }

func (m *S2CFishPointExchangeProto) GetPrize() []byte {
	if m != nil {
		return m.Prize
	}
	return nil
}

func (m *S2CFishPointExchangeProto) GetExchangeIndex() int32 {
	if m != nil {
		return m.ExchangeIndex
	}
	return 0
}

func (m *S2CFishPointExchangeProto) GetExist() bool {
	if m != nil {
		return m.Exist
	}
	return false
}

type C2SSetFishingCaptainProto struct {
	CaptainId int32 `protobuf:"varint,1,opt,name=captain_id,json=captainId,proto3" json:"captain_id,omitempty"`
}

func (m *C2SSetFishingCaptainProto) Reset()                    { *m = C2SSetFishingCaptainProto{} }
func (m *C2SSetFishingCaptainProto) String() string            { return proto.CompactTextString(m) }
func (*C2SSetFishingCaptainProto) ProtoMessage()               {}
func (*C2SSetFishingCaptainProto) Descriptor() ([]byte, []int) { return fileDescriptorFishing, []int{5} }

func (m *C2SSetFishingCaptainProto) GetCaptainId() int32 {
	if m != nil {
		return m.CaptainId
	}
	return 0
}

type S2CSetFishingCaptainProto struct {
	CaptainId int32 `protobuf:"varint,1,opt,name=captain_id,json=captainId,proto3" json:"captain_id,omitempty"`
}

func (m *S2CSetFishingCaptainProto) Reset()                    { *m = S2CSetFishingCaptainProto{} }
func (m *S2CSetFishingCaptainProto) String() string            { return proto.CompactTextString(m) }
func (*S2CSetFishingCaptainProto) ProtoMessage()               {}
func (*S2CSetFishingCaptainProto) Descriptor() ([]byte, []int) { return fileDescriptorFishing, []int{6} }

func (m *S2CSetFishingCaptainProto) GetCaptainId() int32 {
	if m != nil {
		return m.CaptainId
	}
	return 0
}

func init() {
	proto.RegisterType((*C2SFishingProto)(nil), "proto.C2SFishingProto")
	proto.RegisterType((*S2CFishingProto)(nil), "proto.S2CFishingProto")
	proto.RegisterType((*S2CFishingBroadcastProto)(nil), "proto.S2CFishingBroadcastProto")
	proto.RegisterType((*S2CUpdateFishPointProto)(nil), "proto.S2CUpdateFishPointProto")
	proto.RegisterType((*S2CFishPointExchangeProto)(nil), "proto.S2CFishPointExchangeProto")
	proto.RegisterType((*C2SSetFishingCaptainProto)(nil), "proto.C2SSetFishingCaptainProto")
	proto.RegisterType((*S2CSetFishingCaptainProto)(nil), "proto.S2CSetFishingCaptainProto")
}
func (m *C2SFishingProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SFishingProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Times != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFishing(dAtA, i, uint64(m.Times))
	}
	if m.FishType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFishing(dAtA, i, uint64(m.FishType))
	}
	if m.UseGoods {
		dAtA[i] = 0x18
		i++
		if m.UseGoods {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CFishingProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CFishingProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FishingResult) > 0 {
		for _, b := range m.FishingResult {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintFishing(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.HaveSoulToGoods) > 0 {
		for _, b := range m.HaveSoulToGoods {
			dAtA[i] = 0x30
			i++
			if b {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i++
		}
	}
	if m.FishingTimes != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintFishing(dAtA, i, uint64(m.FishingTimes))
	}
	if m.Times != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintFishing(dAtA, i, uint64(m.Times))
	}
	if len(m.ShowIndex) > 0 {
		for _, num := range m.ShowIndex {
			dAtA[i] = 0x48
			i++
			i = encodeVarintFishing(dAtA, i, uint64(num))
		}
	}
	if m.FishType != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintFishing(dAtA, i, uint64(m.FishType))
	}
	if m.NextTime != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintFishing(dAtA, i, uint64(m.NextTime))
	}
	return i, nil
}

func (m *S2CFishingBroadcastProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CFishingBroadcastProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFishing(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFishing(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Flagname) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFishing(dAtA, i, uint64(len(m.Flagname)))
		i += copy(dAtA[i:], m.Flagname)
	}
	if len(m.Prize) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintFishing(dAtA, i, uint64(len(m.Prize)))
		i += copy(dAtA[i:], m.Prize)
	}
	return i, nil
}

func (m *S2CUpdateFishPointProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateFishPointProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Point != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFishing(dAtA, i, uint64(m.Point))
	}
	return i, nil
}

func (m *S2CFishPointExchangeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CFishPointExchangeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Prize) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFishing(dAtA, i, uint64(len(m.Prize)))
		i += copy(dAtA[i:], m.Prize)
	}
	if m.ExchangeIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFishing(dAtA, i, uint64(m.ExchangeIndex))
	}
	if m.Exist {
		dAtA[i] = 0x18
		i++
		if m.Exist {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *C2SSetFishingCaptainProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SSetFishingCaptainProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CaptainId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFishing(dAtA, i, uint64(m.CaptainId))
	}
	return i, nil
}

func (m *S2CSetFishingCaptainProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSetFishingCaptainProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CaptainId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFishing(dAtA, i, uint64(m.CaptainId))
	}
	return i, nil
}

func encodeFixed64Fishing(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Fishing(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintFishing(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *C2SFishingProto) Size() (n int) {
	var l int
	_ = l
	if m.Times != 0 {
		n += 1 + sovFishing(uint64(m.Times))
	}
	if m.FishType != 0 {
		n += 1 + sovFishing(uint64(m.FishType))
	}
	if m.UseGoods {
		n += 2
	}
	return n
}

func (m *S2CFishingProto) Size() (n int) {
	var l int
	_ = l
	if len(m.FishingResult) > 0 {
		for _, b := range m.FishingResult {
			l = len(b)
			n += 1 + l + sovFishing(uint64(l))
		}
	}
	if len(m.HaveSoulToGoods) > 0 {
		n += 2 * len(m.HaveSoulToGoods)
	}
	if m.FishingTimes != 0 {
		n += 1 + sovFishing(uint64(m.FishingTimes))
	}
	if m.Times != 0 {
		n += 1 + sovFishing(uint64(m.Times))
	}
	if len(m.ShowIndex) > 0 {
		for _, e := range m.ShowIndex {
			n += 1 + sovFishing(uint64(e))
		}
	}
	if m.FishType != 0 {
		n += 1 + sovFishing(uint64(m.FishType))
	}
	if m.NextTime != 0 {
		n += 1 + sovFishing(uint64(m.NextTime))
	}
	return n
}

func (m *S2CFishingBroadcastProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovFishing(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFishing(uint64(l))
	}
	l = len(m.Flagname)
	if l > 0 {
		n += 1 + l + sovFishing(uint64(l))
	}
	l = len(m.Prize)
	if l > 0 {
		n += 1 + l + sovFishing(uint64(l))
	}
	return n
}

func (m *S2CUpdateFishPointProto) Size() (n int) {
	var l int
	_ = l
	if m.Point != 0 {
		n += 1 + sovFishing(uint64(m.Point))
	}
	return n
}

func (m *S2CFishPointExchangeProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Prize)
	if l > 0 {
		n += 1 + l + sovFishing(uint64(l))
	}
	if m.ExchangeIndex != 0 {
		n += 1 + sovFishing(uint64(m.ExchangeIndex))
	}
	if m.Exist {
		n += 2
	}
	return n
}

func (m *C2SSetFishingCaptainProto) Size() (n int) {
	var l int
	_ = l
	if m.CaptainId != 0 {
		n += 1 + sovFishing(uint64(m.CaptainId))
	}
	return n
}

func (m *S2CSetFishingCaptainProto) Size() (n int) {
	var l int
	_ = l
	if m.CaptainId != 0 {
		n += 1 + sovFishing(uint64(m.CaptainId))
	}
	return n
}

func sovFishing(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozFishing(x uint64) (n int) {
	return sovFishing(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *C2SFishingProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFishing
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SFishingProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SFishingProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Times", wireType)
			}
			m.Times = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFishing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Times |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FishType", wireType)
			}
			m.FishType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFishing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FishType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseGoods", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFishing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseGoods = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipFishing(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFishing
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CFishingProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFishing
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CFishingProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CFishingProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FishingResult", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFishing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFishing
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FishingResult = append(m.FishingResult, make([]byte, postIndex-iNdEx))
			copy(m.FishingResult[len(m.FishingResult)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFishing
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.HaveSoulToGoods = append(m.HaveSoulToGoods, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFishing
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFishing
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFishing
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.HaveSoulToGoods = append(m.HaveSoulToGoods, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field HaveSoulToGoods", wireType)
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FishingTimes", wireType)
			}
			m.FishingTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFishing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FishingTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Times", wireType)
			}
			m.Times = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFishing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Times |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFishing
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ShowIndex = append(m.ShowIndex, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFishing
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFishing
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFishing
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ShowIndex = append(m.ShowIndex, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowIndex", wireType)
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FishType", wireType)
			}
			m.FishType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFishing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FishType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextTime", wireType)
			}
			m.NextTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFishing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFishing(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFishing
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CFishingBroadcastProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFishing
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CFishingBroadcastProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CFishingBroadcastProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFishing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFishing
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFishing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFishing
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flagname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFishing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFishing
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Flagname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prize", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFishing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFishing
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prize = append(m.Prize[:0], dAtA[iNdEx:postIndex]...)
			if m.Prize == nil {
				m.Prize = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFishing(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFishing
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateFishPointProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFishing
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateFishPointProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateFishPointProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Point", wireType)
			}
			m.Point = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFishing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Point |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFishing(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFishing
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CFishPointExchangeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFishing
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CFishPointExchangeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CFishPointExchangeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prize", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFishing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFishing
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prize = append(m.Prize[:0], dAtA[iNdEx:postIndex]...)
			if m.Prize == nil {
				m.Prize = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeIndex", wireType)
			}
			m.ExchangeIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFishing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExchangeIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exist", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFishing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Exist = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipFishing(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFishing
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SSetFishingCaptainProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFishing
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SSetFishingCaptainProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SSetFishingCaptainProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainId", wireType)
			}
			m.CaptainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFishing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFishing(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFishing
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSetFishingCaptainProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFishing
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSetFishingCaptainProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSetFishingCaptainProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainId", wireType)
			}
			m.CaptainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFishing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFishing(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFishing
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFishing(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFishing
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFishing
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFishing
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthFishing
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFishing
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFishing(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFishing = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFishing   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/gen/pb/fishing/fishing.proto", fileDescriptorFishing)
}

var fileDescriptorFishing = []byte{
	// 487 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0x4f, 0x6f, 0xd3, 0x30,
	0x1c, 0x5d, 0x1a, 0xb2, 0x25, 0x3f, 0xba, 0x15, 0x45, 0x93, 0xc8, 0x98, 0xa8, 0x42, 0x10, 0x52,
	0x4e, 0x8b, 0x14, 0x24, 0x90, 0x38, 0x36, 0xe2, 0xcf, 0x6e, 0x53, 0x52, 0x2e, 0x5c, 0x22, 0xb7,
	0xf1, 0x12, 0x4b, 0xa9, 0x6d, 0xd5, 0x0e, 0xeb, 0xb8, 0xf1, 0x2d, 0xf8, 0x48, 0x1c, 0xf9, 0x08,
	0xa8, 0x7c, 0x11, 0xe4, 0x3f, 0xed, 0x36, 0x71, 0xe3, 0xe4, 0xbc, 0xf7, 0x6c, 0x3f, 0xbf, 0x67,
	0x07, 0xde, 0xb4, 0x44, 0x76, 0xc3, 0xe2, 0x62, 0xc9, 0x56, 0x59, 0x4f, 0xda, 0x4e, 0x72, 0x74,
	0x93, 0xad, 0x50, 0x8f, 0xdf, 0x66, 0x2d, 0xa6, 0x19, 0x5f, 0x64, 0xd7, 0x44, 0x74, 0x84, 0xb6,
	0xbb, 0xf1, 0x82, 0xaf, 0x99, 0x64, 0xa1, 0xa7, 0x87, 0x04, 0xc1, 0xa4, 0xc8, 0xab, 0x0f, 0x46,
	0xba, 0xd2, 0xca, 0x29, 0x78, 0x92, 0xac, 0xb0, 0x88, 0x9c, 0xd8, 0x49, 0xbd, 0xd2, 0x80, 0xf0,
	0x1c, 0x02, 0xb5, 0x41, 0x2d, 0x6f, 0x39, 0x8e, 0x46, 0x5a, 0xf1, 0x15, 0x31, 0xbf, 0xe5, 0x58,
	0x89, 0x83, 0xc0, 0x75, 0xcb, 0x58, 0x23, 0x22, 0x37, 0x76, 0x52, 0xbf, 0xf4, 0x07, 0x81, 0x3f,
	0x2a, 0x9c, 0x7c, 0x1f, 0xc1, 0xa4, 0xca, 0x8b, 0x07, 0x1e, 0xaf, 0xe0, 0xc4, 0x1e, 0xa7, 0x5e,
	0x63, 0x31, 0xf4, 0x32, 0xf2, 0x62, 0x37, 0x1d, 0x97, 0xc7, 0x96, 0x2d, 0x35, 0x19, 0x66, 0x10,
	0x76, 0xe8, 0x2b, 0xae, 0x05, 0x1b, 0xfa, 0x5a, 0x32, 0x6b, 0x70, 0x18, 0xbb, 0xa9, 0x3f, 0x1b,
	0x3d, 0x39, 0x28, 0x27, 0x4a, 0xad, 0xd8, 0xd0, 0xcf, 0x99, 0xf6, 0x0a, 0x5f, 0xc2, 0x6e, 0x87,
	0xda, 0x64, 0x38, 0xd2, 0x27, 0x1d, 0x5b, 0x72, 0xae, 0xa3, 0xec, 0x03, 0xfa, 0xf7, 0x03, 0xbe,
	0x00, 0x10, 0x1d, 0xbb, 0xa9, 0x09, 0x6d, 0xf0, 0x26, 0x0a, 0x62, 0x37, 0xf5, 0xb4, 0x47, 0xa0,
	0xd8, 0x4b, 0x45, 0x3e, 0xec, 0x00, 0xfe, 0xed, 0x80, 0xe2, 0x8d, 0xd4, 0xbe, 0xd1, 0x63, 0x23,
	0x2a, 0x42, 0x79, 0x26, 0x1c, 0xa2, 0xbb, 0x0a, 0x66, 0x6b, 0x86, 0x9a, 0x25, 0x12, 0xd2, 0x74,
	0x71, 0x02, 0x23, 0xd2, 0xe8, 0xb2, 0xc7, 0xe5, 0x88, 0x34, 0x61, 0x08, 0x8f, 0x28, 0x5a, 0x99,
	0x92, 0x83, 0x52, 0x7f, 0x87, 0xcf, 0xc0, 0xbf, 0xee, 0x51, 0xab, 0x79, 0x57, 0xf3, 0x7b, 0xac,
	0xe2, 0xf0, 0x35, 0xf9, 0x86, 0x75, 0xd6, 0x71, 0x69, 0x40, 0x92, 0xc1, 0xd3, 0x2a, 0x2f, 0x3e,
	0xf3, 0x06, 0x49, 0xac, 0x7c, 0xaf, 0x18, 0xa1, 0x72, 0x7f, 0xc1, 0x5c, 0xa1, 0xdd, 0x05, 0x6b,
	0x90, 0x50, 0x38, 0xb3, 0x47, 0xd4, 0x53, 0xdf, 0x6f, 0x96, 0x1d, 0xa2, 0x2d, 0xbe, 0x5b, 0xa2,
	0x3d, 0x9c, 0x7b, 0x1e, 0xea, 0x16, 0xb1, 0x9d, 0x66, 0x6b, 0x33, 0x0f, 0xe3, 0x78, 0xc7, 0x9a,
	0xda, 0x4e, 0xc1, 0xc3, 0x1b, 0x22, 0xa4, 0x7d, 0x19, 0x06, 0x24, 0xef, 0xe0, 0xac, 0xc8, 0xab,
	0x0a, 0x4b, 0xdb, 0x4a, 0x81, 0xb8, 0x44, 0x84, 0x1a, 0xbf, 0xe7, 0x00, 0x4b, 0x83, 0x6b, 0xdb,
	0x8d, 0x57, 0x06, 0x96, 0xb9, 0x6c, 0xd4, 0xda, 0x2a, 0x2f, 0xfe, 0x6b, 0xed, 0xec, 0xfc, 0xe7,
	0x76, 0xea, 0xfc, 0xda, 0x4e, 0x9d, 0xdf, 0xdb, 0xa9, 0xf3, 0xe3, 0xcf, 0xf4, 0xe0, 0x93, 0xf3,
	0xe5, 0xc8, 0xbe, 0x8f, 0xc5, 0xa1, 0xfe, 0x2b, 0x5e, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x00,
	0xcd, 0x31, 0x4e, 0x56, 0x03, 0x00, 0x00,
}
