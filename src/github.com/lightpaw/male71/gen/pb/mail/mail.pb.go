// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/gen/pb/mail/mail.proto
// DO NOT EDIT!

/*
	Package mail is a generated protocol buffer package.

	It is generated from these files:
		github.com/lightpaw/male7/gen/pb/mail/mail.proto

	It has these top-level messages:
		C2SListMailProto
		S2CListMailProto
		S2CReceiveMailProto
		C2SDeleteMailProto
		S2CDeleteMailProto
		C2SKeepMailProto
		S2CKeepMailProto
		C2SCollectMailPrizeProto
		S2CCollectMailPrizeProto
		C2SReadMailProto
		S2CReadMailProto
		S2CNotifyMailCountProto
		C2SReadMultiProto
		S2CReadMultiProto
		C2SDeleteMultiProto
		S2CDeleteMultiProto
		C2SGetMailProto
		S2CGetMailProto
*/
package mail

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type C2SListMailProto struct {
	Read      int32  `protobuf:"varint,11,opt,name=read,proto3" json:"read,omitempty"`
	Keep      int32  `protobuf:"varint,8,opt,name=keep,proto3" json:"keep,omitempty"`
	Report    int32  `protobuf:"varint,9,opt,name=report,proto3" json:"report,omitempty"`
	ReportTag int32  `protobuf:"varint,14,opt,name=report_tag,json=reportTag,proto3" json:"report_tag,omitempty"`
	HasPrize  int32  `protobuf:"varint,5,opt,name=has_prize,json=hasPrize,proto3" json:"has_prize,omitempty"`
	Collected int32  `protobuf:"varint,10,opt,name=collected,proto3" json:"collected,omitempty"`
	MinId     []byte `protobuf:"bytes,13,opt,name=min_id,json=minId,proto3" json:"min_id,omitempty"`
	Count     int32  `protobuf:"varint,7,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *C2SListMailProto) Reset()                    { *m = C2SListMailProto{} }
func (m *C2SListMailProto) String() string            { return proto.CompactTextString(m) }
func (*C2SListMailProto) ProtoMessage()               {}
func (*C2SListMailProto) Descriptor() ([]byte, []int) { return fileDescriptorMail, []int{0} }

func (m *C2SListMailProto) GetRead() int32 {
	if m != nil {
		return m.Read
	}
	return 0
}

func (m *C2SListMailProto) GetKeep() int32 {
	if m != nil {
		return m.Keep
	}
	return 0
}

func (m *C2SListMailProto) GetReport() int32 {
	if m != nil {
		return m.Report
	}
	return 0
}

func (m *C2SListMailProto) GetReportTag() int32 {
	if m != nil {
		return m.ReportTag
	}
	return 0
}

func (m *C2SListMailProto) GetHasPrize() int32 {
	if m != nil {
		return m.HasPrize
	}
	return 0
}

func (m *C2SListMailProto) GetCollected() int32 {
	if m != nil {
		return m.Collected
	}
	return 0
}

func (m *C2SListMailProto) GetMinId() []byte {
	if m != nil {
		return m.MinId
	}
	return nil
}

func (m *C2SListMailProto) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type S2CListMailProto struct {
	Read      int32    `protobuf:"varint,8,opt,name=read,proto3" json:"read,omitempty"`
	Keep      int32    `protobuf:"varint,5,opt,name=keep,proto3" json:"keep,omitempty"`
	Report    int32    `protobuf:"varint,6,opt,name=report,proto3" json:"report,omitempty"`
	ReportTag int32    `protobuf:"varint,9,opt,name=report_tag,json=reportTag,proto3" json:"report_tag,omitempty"`
	HasPrize  int32    `protobuf:"varint,3,opt,name=has_prize,json=hasPrize,proto3" json:"has_prize,omitempty"`
	Collected int32    `protobuf:"varint,7,opt,name=collected,proto3" json:"collected,omitempty"`
	Mail      [][]byte `protobuf:"bytes,1,rep,name=mail" json:"mail,omitempty"`
}

func (m *S2CListMailProto) Reset()                    { *m = S2CListMailProto{} }
func (m *S2CListMailProto) String() string            { return proto.CompactTextString(m) }
func (*S2CListMailProto) ProtoMessage()               {}
func (*S2CListMailProto) Descriptor() ([]byte, []int) { return fileDescriptorMail, []int{1} }

func (m *S2CListMailProto) GetRead() int32 {
	if m != nil {
		return m.Read
	}
	return 0
}

func (m *S2CListMailProto) GetKeep() int32 {
	if m != nil {
		return m.Keep
	}
	return 0
}

func (m *S2CListMailProto) GetReport() int32 {
	if m != nil {
		return m.Report
	}
	return 0
}

func (m *S2CListMailProto) GetReportTag() int32 {
	if m != nil {
		return m.ReportTag
	}
	return 0
}

func (m *S2CListMailProto) GetHasPrize() int32 {
	if m != nil {
		return m.HasPrize
	}
	return 0
}

func (m *S2CListMailProto) GetCollected() int32 {
	if m != nil {
		return m.Collected
	}
	return 0
}

func (m *S2CListMailProto) GetMail() [][]byte {
	if m != nil {
		return m.Mail
	}
	return nil
}

type S2CReceiveMailProto struct {
	Mail []byte `protobuf:"bytes,1,opt,name=mail,proto3" json:"mail,omitempty"`
}

func (m *S2CReceiveMailProto) Reset()                    { *m = S2CReceiveMailProto{} }
func (m *S2CReceiveMailProto) String() string            { return proto.CompactTextString(m) }
func (*S2CReceiveMailProto) ProtoMessage()               {}
func (*S2CReceiveMailProto) Descriptor() ([]byte, []int) { return fileDescriptorMail, []int{2} }

func (m *S2CReceiveMailProto) GetMail() []byte {
	if m != nil {
		return m.Mail
	}
	return nil
}

type C2SDeleteMailProto struct {
	Id []byte `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SDeleteMailProto) Reset()                    { *m = C2SDeleteMailProto{} }
func (m *C2SDeleteMailProto) String() string            { return proto.CompactTextString(m) }
func (*C2SDeleteMailProto) ProtoMessage()               {}
func (*C2SDeleteMailProto) Descriptor() ([]byte, []int) { return fileDescriptorMail, []int{3} }

func (m *C2SDeleteMailProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type S2CDeleteMailProto struct {
	Id []byte `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *S2CDeleteMailProto) Reset()                    { *m = S2CDeleteMailProto{} }
func (m *S2CDeleteMailProto) String() string            { return proto.CompactTextString(m) }
func (*S2CDeleteMailProto) ProtoMessage()               {}
func (*S2CDeleteMailProto) Descriptor() ([]byte, []int) { return fileDescriptorMail, []int{4} }

func (m *S2CDeleteMailProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type C2SKeepMailProto struct {
	Id   []byte `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	Keep bool   `protobuf:"varint,2,opt,name=keep,proto3" json:"keep,omitempty"`
}

func (m *C2SKeepMailProto) Reset()                    { *m = C2SKeepMailProto{} }
func (m *C2SKeepMailProto) String() string            { return proto.CompactTextString(m) }
func (*C2SKeepMailProto) ProtoMessage()               {}
func (*C2SKeepMailProto) Descriptor() ([]byte, []int) { return fileDescriptorMail, []int{5} }

func (m *C2SKeepMailProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *C2SKeepMailProto) GetKeep() bool {
	if m != nil {
		return m.Keep
	}
	return false
}

type S2CKeepMailProto struct {
	Id   []byte `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	Keep bool   `protobuf:"varint,2,opt,name=keep,proto3" json:"keep,omitempty"`
}

func (m *S2CKeepMailProto) Reset()                    { *m = S2CKeepMailProto{} }
func (m *S2CKeepMailProto) String() string            { return proto.CompactTextString(m) }
func (*S2CKeepMailProto) ProtoMessage()               {}
func (*S2CKeepMailProto) Descriptor() ([]byte, []int) { return fileDescriptorMail, []int{6} }

func (m *S2CKeepMailProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *S2CKeepMailProto) GetKeep() bool {
	if m != nil {
		return m.Keep
	}
	return false
}

type C2SCollectMailPrizeProto struct {
	Id []byte `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SCollectMailPrizeProto) Reset()                    { *m = C2SCollectMailPrizeProto{} }
func (m *C2SCollectMailPrizeProto) String() string            { return proto.CompactTextString(m) }
func (*C2SCollectMailPrizeProto) ProtoMessage()               {}
func (*C2SCollectMailPrizeProto) Descriptor() ([]byte, []int) { return fileDescriptorMail, []int{7} }

func (m *C2SCollectMailPrizeProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type S2CCollectMailPrizeProto struct {
	Id []byte `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *S2CCollectMailPrizeProto) Reset()                    { *m = S2CCollectMailPrizeProto{} }
func (m *S2CCollectMailPrizeProto) String() string            { return proto.CompactTextString(m) }
func (*S2CCollectMailPrizeProto) ProtoMessage()               {}
func (*S2CCollectMailPrizeProto) Descriptor() ([]byte, []int) { return fileDescriptorMail, []int{8} }

func (m *S2CCollectMailPrizeProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type C2SReadMailProto struct {
	Id []byte `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SReadMailProto) Reset()                    { *m = C2SReadMailProto{} }
func (m *C2SReadMailProto) String() string            { return proto.CompactTextString(m) }
func (*C2SReadMailProto) ProtoMessage()               {}
func (*C2SReadMailProto) Descriptor() ([]byte, []int) { return fileDescriptorMail, []int{9} }

func (m *C2SReadMailProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type S2CReadMailProto struct {
	Id []byte `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *S2CReadMailProto) Reset()                    { *m = S2CReadMailProto{} }
func (m *S2CReadMailProto) String() string            { return proto.CompactTextString(m) }
func (*S2CReadMailProto) ProtoMessage()               {}
func (*S2CReadMailProto) Descriptor() ([]byte, []int) { return fileDescriptorMail, []int{10} }

func (m *S2CReadMailProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type S2CNotifyMailCountProto struct {
	HasPrizeNotCollectedCount int32 `protobuf:"varint,1,opt,name=has_prize_not_collected_count,json=hasPrizeNotCollectedCount,proto3" json:"has_prize_not_collected_count,omitempty"`
	HasReportNotReadedCount   int32 `protobuf:"varint,2,opt,name=has_report_not_readed_count,json=hasReportNotReadedCount,proto3" json:"has_report_not_readed_count,omitempty"`
	HasYwReportNotReadedCount int32 `protobuf:"varint,4,opt,name=has_yw_report_not_readed_count,json=hasYwReportNotReadedCount,proto3" json:"has_yw_report_not_readed_count,omitempty"`
	HasBzReportNotReadedCount int32 `protobuf:"varint,5,opt,name=has_bz_report_not_readed_count,json=hasBzReportNotReadedCount,proto3" json:"has_bz_report_not_readed_count,omitempty"`
	NoReportNotReadedCount    int32 `protobuf:"varint,3,opt,name=no_report_not_readed_count,json=noReportNotReadedCount,proto3" json:"no_report_not_readed_count,omitempty"`
}

func (m *S2CNotifyMailCountProto) Reset()                    { *m = S2CNotifyMailCountProto{} }
func (m *S2CNotifyMailCountProto) String() string            { return proto.CompactTextString(m) }
func (*S2CNotifyMailCountProto) ProtoMessage()               {}
func (*S2CNotifyMailCountProto) Descriptor() ([]byte, []int) { return fileDescriptorMail, []int{11} }

func (m *S2CNotifyMailCountProto) GetHasPrizeNotCollectedCount() int32 {
	if m != nil {
		return m.HasPrizeNotCollectedCount
	}
	return 0
}

func (m *S2CNotifyMailCountProto) GetHasReportNotReadedCount() int32 {
	if m != nil {
		return m.HasReportNotReadedCount
	}
	return 0
}

func (m *S2CNotifyMailCountProto) GetHasYwReportNotReadedCount() int32 {
	if m != nil {
		return m.HasYwReportNotReadedCount
	}
	return 0
}

func (m *S2CNotifyMailCountProto) GetHasBzReportNotReadedCount() int32 {
	if m != nil {
		return m.HasBzReportNotReadedCount
	}
	return 0
}

func (m *S2CNotifyMailCountProto) GetNoReportNotReadedCount() int32 {
	if m != nil {
		return m.NoReportNotReadedCount
	}
	return 0
}

type C2SReadMultiProto struct {
	Ids    [][]byte `protobuf:"bytes,5,rep,name=ids" json:"ids,omitempty"`
	Report bool     `protobuf:"varint,3,opt,name=report,proto3" json:"report,omitempty"`
}

func (m *C2SReadMultiProto) Reset()                    { *m = C2SReadMultiProto{} }
func (m *C2SReadMultiProto) String() string            { return proto.CompactTextString(m) }
func (*C2SReadMultiProto) ProtoMessage()               {}
func (*C2SReadMultiProto) Descriptor() ([]byte, []int) { return fileDescriptorMail, []int{12} }

func (m *C2SReadMultiProto) GetIds() [][]byte {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *C2SReadMultiProto) GetReport() bool {
	if m != nil {
		return m.Report
	}
	return false
}

type S2CReadMultiProto struct {
	Ids    [][]byte `protobuf:"bytes,6,rep,name=ids" json:"ids,omitempty"`
	Report bool     `protobuf:"varint,4,opt,name=report,proto3" json:"report,omitempty"`
	Prize  []byte   `protobuf:"bytes,2,opt,name=prize,proto3" json:"prize,omitempty"`
}

func (m *S2CReadMultiProto) Reset()                    { *m = S2CReadMultiProto{} }
func (m *S2CReadMultiProto) String() string            { return proto.CompactTextString(m) }
func (*S2CReadMultiProto) ProtoMessage()               {}
func (*S2CReadMultiProto) Descriptor() ([]byte, []int) { return fileDescriptorMail, []int{13} }

func (m *S2CReadMultiProto) GetIds() [][]byte {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *S2CReadMultiProto) GetReport() bool {
	if m != nil {
		return m.Report
	}
	return false
}

func (m *S2CReadMultiProto) GetPrize() []byte {
	if m != nil {
		return m.Prize
	}
	return nil
}

type C2SDeleteMultiProto struct {
	Ids    [][]byte `protobuf:"bytes,5,rep,name=ids" json:"ids,omitempty"`
	Report bool     `protobuf:"varint,3,opt,name=report,proto3" json:"report,omitempty"`
}

func (m *C2SDeleteMultiProto) Reset()                    { *m = C2SDeleteMultiProto{} }
func (m *C2SDeleteMultiProto) String() string            { return proto.CompactTextString(m) }
func (*C2SDeleteMultiProto) ProtoMessage()               {}
func (*C2SDeleteMultiProto) Descriptor() ([]byte, []int) { return fileDescriptorMail, []int{14} }

func (m *C2SDeleteMultiProto) GetIds() [][]byte {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *C2SDeleteMultiProto) GetReport() bool {
	if m != nil {
		return m.Report
	}
	return false
}

type S2CDeleteMultiProto struct {
	Ids    [][]byte `protobuf:"bytes,5,rep,name=ids" json:"ids,omitempty"`
	Report bool     `protobuf:"varint,3,opt,name=report,proto3" json:"report,omitempty"`
}

func (m *S2CDeleteMultiProto) Reset()                    { *m = S2CDeleteMultiProto{} }
func (m *S2CDeleteMultiProto) String() string            { return proto.CompactTextString(m) }
func (*S2CDeleteMultiProto) ProtoMessage()               {}
func (*S2CDeleteMultiProto) Descriptor() ([]byte, []int) { return fileDescriptorMail, []int{15} }

func (m *S2CDeleteMultiProto) GetIds() [][]byte {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *S2CDeleteMultiProto) GetReport() bool {
	if m != nil {
		return m.Report
	}
	return false
}

type C2SGetMailProto struct {
	Bid []byte `protobuf:"bytes,1,opt,name=bid,proto3" json:"bid,omitempty"`
}

func (m *C2SGetMailProto) Reset()                    { *m = C2SGetMailProto{} }
func (m *C2SGetMailProto) String() string            { return proto.CompactTextString(m) }
func (*C2SGetMailProto) ProtoMessage()               {}
func (*C2SGetMailProto) Descriptor() ([]byte, []int) { return fileDescriptorMail, []int{16} }

func (m *C2SGetMailProto) GetBid() []byte {
	if m != nil {
		return m.Bid
	}
	return nil
}

type S2CGetMailProto struct {
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *S2CGetMailProto) Reset()                    { *m = S2CGetMailProto{} }
func (m *S2CGetMailProto) String() string            { return proto.CompactTextString(m) }
func (*S2CGetMailProto) ProtoMessage()               {}
func (*S2CGetMailProto) Descriptor() ([]byte, []int) { return fileDescriptorMail, []int{17} }

func (m *S2CGetMailProto) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*C2SListMailProto)(nil), "proto.C2SListMailProto")
	proto.RegisterType((*S2CListMailProto)(nil), "proto.S2CListMailProto")
	proto.RegisterType((*S2CReceiveMailProto)(nil), "proto.S2CReceiveMailProto")
	proto.RegisterType((*C2SDeleteMailProto)(nil), "proto.C2SDeleteMailProto")
	proto.RegisterType((*S2CDeleteMailProto)(nil), "proto.S2CDeleteMailProto")
	proto.RegisterType((*C2SKeepMailProto)(nil), "proto.C2SKeepMailProto")
	proto.RegisterType((*S2CKeepMailProto)(nil), "proto.S2CKeepMailProto")
	proto.RegisterType((*C2SCollectMailPrizeProto)(nil), "proto.C2SCollectMailPrizeProto")
	proto.RegisterType((*S2CCollectMailPrizeProto)(nil), "proto.S2CCollectMailPrizeProto")
	proto.RegisterType((*C2SReadMailProto)(nil), "proto.C2SReadMailProto")
	proto.RegisterType((*S2CReadMailProto)(nil), "proto.S2CReadMailProto")
	proto.RegisterType((*S2CNotifyMailCountProto)(nil), "proto.S2CNotifyMailCountProto")
	proto.RegisterType((*C2SReadMultiProto)(nil), "proto.C2SReadMultiProto")
	proto.RegisterType((*S2CReadMultiProto)(nil), "proto.S2CReadMultiProto")
	proto.RegisterType((*C2SDeleteMultiProto)(nil), "proto.C2SDeleteMultiProto")
	proto.RegisterType((*S2CDeleteMultiProto)(nil), "proto.S2CDeleteMultiProto")
	proto.RegisterType((*C2SGetMailProto)(nil), "proto.C2SGetMailProto")
	proto.RegisterType((*S2CGetMailProto)(nil), "proto.S2CGetMailProto")
}
func (m *C2SListMailProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SListMailProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HasPrize != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMail(dAtA, i, uint64(m.HasPrize))
	}
	if m.Count != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintMail(dAtA, i, uint64(m.Count))
	}
	if m.Keep != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintMail(dAtA, i, uint64(m.Keep))
	}
	if m.Report != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintMail(dAtA, i, uint64(m.Report))
	}
	if m.Collected != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintMail(dAtA, i, uint64(m.Collected))
	}
	if m.Read != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintMail(dAtA, i, uint64(m.Read))
	}
	if len(m.MinId) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintMail(dAtA, i, uint64(len(m.MinId)))
		i += copy(dAtA[i:], m.MinId)
	}
	if m.ReportTag != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintMail(dAtA, i, uint64(m.ReportTag))
	}
	return i, nil
}

func (m *S2CListMailProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CListMailProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Mail) > 0 {
		for _, b := range m.Mail {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMail(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.HasPrize != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMail(dAtA, i, uint64(m.HasPrize))
	}
	if m.Keep != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMail(dAtA, i, uint64(m.Keep))
	}
	if m.Report != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintMail(dAtA, i, uint64(m.Report))
	}
	if m.Collected != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintMail(dAtA, i, uint64(m.Collected))
	}
	if m.Read != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintMail(dAtA, i, uint64(m.Read))
	}
	if m.ReportTag != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintMail(dAtA, i, uint64(m.ReportTag))
	}
	return i, nil
}

func (m *S2CReceiveMailProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CReceiveMailProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Mail) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMail(dAtA, i, uint64(len(m.Mail)))
		i += copy(dAtA[i:], m.Mail)
	}
	return i, nil
}

func (m *C2SDeleteMailProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SDeleteMailProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMail(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *S2CDeleteMailProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CDeleteMailProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMail(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *C2SKeepMailProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SKeepMailProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Keep {
		dAtA[i] = 0x10
		i++
		if m.Keep {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Id) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMail(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *S2CKeepMailProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CKeepMailProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Keep {
		dAtA[i] = 0x10
		i++
		if m.Keep {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Id) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMail(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *C2SCollectMailPrizeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCollectMailPrizeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMail(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *S2CCollectMailPrizeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCollectMailPrizeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMail(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *C2SReadMailProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SReadMailProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMail(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *S2CReadMailProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CReadMailProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMail(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *S2CNotifyMailCountProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CNotifyMailCountProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HasPrizeNotCollectedCount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMail(dAtA, i, uint64(m.HasPrizeNotCollectedCount))
	}
	if m.HasReportNotReadedCount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMail(dAtA, i, uint64(m.HasReportNotReadedCount))
	}
	if m.NoReportNotReadedCount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMail(dAtA, i, uint64(m.NoReportNotReadedCount))
	}
	if m.HasYwReportNotReadedCount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMail(dAtA, i, uint64(m.HasYwReportNotReadedCount))
	}
	if m.HasBzReportNotReadedCount != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMail(dAtA, i, uint64(m.HasBzReportNotReadedCount))
	}
	return i, nil
}

func (m *C2SReadMultiProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SReadMultiProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Report {
		dAtA[i] = 0x18
		i++
		if m.Report {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Ids) > 0 {
		for _, b := range m.Ids {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintMail(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *S2CReadMultiProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CReadMultiProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Prize) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMail(dAtA, i, uint64(len(m.Prize)))
		i += copy(dAtA[i:], m.Prize)
	}
	if m.Report {
		dAtA[i] = 0x20
		i++
		if m.Report {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Ids) > 0 {
		for _, b := range m.Ids {
			dAtA[i] = 0x32
			i++
			i = encodeVarintMail(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *C2SDeleteMultiProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SDeleteMultiProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Report {
		dAtA[i] = 0x18
		i++
		if m.Report {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Ids) > 0 {
		for _, b := range m.Ids {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintMail(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *S2CDeleteMultiProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CDeleteMultiProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Report {
		dAtA[i] = 0x18
		i++
		if m.Report {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Ids) > 0 {
		for _, b := range m.Ids {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintMail(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *C2SGetMailProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SGetMailProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Bid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMail(dAtA, i, uint64(len(m.Bid)))
		i += copy(dAtA[i:], m.Bid)
	}
	return i, nil
}

func (m *S2CGetMailProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CGetMailProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMail(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func encodeFixed64Mail(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Mail(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintMail(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *C2SListMailProto) Size() (n int) {
	var l int
	_ = l
	if m.HasPrize != 0 {
		n += 1 + sovMail(uint64(m.HasPrize))
	}
	if m.Count != 0 {
		n += 1 + sovMail(uint64(m.Count))
	}
	if m.Keep != 0 {
		n += 1 + sovMail(uint64(m.Keep))
	}
	if m.Report != 0 {
		n += 1 + sovMail(uint64(m.Report))
	}
	if m.Collected != 0 {
		n += 1 + sovMail(uint64(m.Collected))
	}
	if m.Read != 0 {
		n += 1 + sovMail(uint64(m.Read))
	}
	l = len(m.MinId)
	if l > 0 {
		n += 1 + l + sovMail(uint64(l))
	}
	if m.ReportTag != 0 {
		n += 1 + sovMail(uint64(m.ReportTag))
	}
	return n
}

func (m *S2CListMailProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Mail) > 0 {
		for _, b := range m.Mail {
			l = len(b)
			n += 1 + l + sovMail(uint64(l))
		}
	}
	if m.HasPrize != 0 {
		n += 1 + sovMail(uint64(m.HasPrize))
	}
	if m.Keep != 0 {
		n += 1 + sovMail(uint64(m.Keep))
	}
	if m.Report != 0 {
		n += 1 + sovMail(uint64(m.Report))
	}
	if m.Collected != 0 {
		n += 1 + sovMail(uint64(m.Collected))
	}
	if m.Read != 0 {
		n += 1 + sovMail(uint64(m.Read))
	}
	if m.ReportTag != 0 {
		n += 1 + sovMail(uint64(m.ReportTag))
	}
	return n
}

func (m *S2CReceiveMailProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Mail)
	if l > 0 {
		n += 1 + l + sovMail(uint64(l))
	}
	return n
}

func (m *C2SDeleteMailProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMail(uint64(l))
	}
	return n
}

func (m *S2CDeleteMailProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMail(uint64(l))
	}
	return n
}

func (m *C2SKeepMailProto) Size() (n int) {
	var l int
	_ = l
	if m.Keep {
		n += 2
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMail(uint64(l))
	}
	return n
}

func (m *S2CKeepMailProto) Size() (n int) {
	var l int
	_ = l
	if m.Keep {
		n += 2
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMail(uint64(l))
	}
	return n
}

func (m *C2SCollectMailPrizeProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMail(uint64(l))
	}
	return n
}

func (m *S2CCollectMailPrizeProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMail(uint64(l))
	}
	return n
}

func (m *C2SReadMailProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMail(uint64(l))
	}
	return n
}

func (m *S2CReadMailProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMail(uint64(l))
	}
	return n
}

func (m *S2CNotifyMailCountProto) Size() (n int) {
	var l int
	_ = l
	if m.HasPrizeNotCollectedCount != 0 {
		n += 1 + sovMail(uint64(m.HasPrizeNotCollectedCount))
	}
	if m.HasReportNotReadedCount != 0 {
		n += 1 + sovMail(uint64(m.HasReportNotReadedCount))
	}
	if m.NoReportNotReadedCount != 0 {
		n += 1 + sovMail(uint64(m.NoReportNotReadedCount))
	}
	if m.HasYwReportNotReadedCount != 0 {
		n += 1 + sovMail(uint64(m.HasYwReportNotReadedCount))
	}
	if m.HasBzReportNotReadedCount != 0 {
		n += 1 + sovMail(uint64(m.HasBzReportNotReadedCount))
	}
	return n
}

func (m *C2SReadMultiProto) Size() (n int) {
	var l int
	_ = l
	if m.Report {
		n += 2
	}
	if len(m.Ids) > 0 {
		for _, b := range m.Ids {
			l = len(b)
			n += 1 + l + sovMail(uint64(l))
		}
	}
	return n
}

func (m *S2CReadMultiProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Prize)
	if l > 0 {
		n += 1 + l + sovMail(uint64(l))
	}
	if m.Report {
		n += 2
	}
	if len(m.Ids) > 0 {
		for _, b := range m.Ids {
			l = len(b)
			n += 1 + l + sovMail(uint64(l))
		}
	}
	return n
}

func (m *C2SDeleteMultiProto) Size() (n int) {
	var l int
	_ = l
	if m.Report {
		n += 2
	}
	if len(m.Ids) > 0 {
		for _, b := range m.Ids {
			l = len(b)
			n += 1 + l + sovMail(uint64(l))
		}
	}
	return n
}

func (m *S2CDeleteMultiProto) Size() (n int) {
	var l int
	_ = l
	if m.Report {
		n += 2
	}
	if len(m.Ids) > 0 {
		for _, b := range m.Ids {
			l = len(b)
			n += 1 + l + sovMail(uint64(l))
		}
	}
	return n
}

func (m *C2SGetMailProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Bid)
	if l > 0 {
		n += 1 + l + sovMail(uint64(l))
	}
	return n
}

func (m *S2CGetMailProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovMail(uint64(l))
	}
	return n
}

func sovMail(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMail(x uint64) (n int) {
	return sovMail(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *C2SListMailProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SListMailProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SListMailProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasPrize", wireType)
			}
			m.HasPrize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HasPrize |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keep", wireType)
			}
			m.Keep = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Keep |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Report", wireType)
			}
			m.Report = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Report |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collected", wireType)
			}
			m.Collected = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Collected |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Read", wireType)
			}
			m.Read = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Read |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinId = append(m.MinId[:0], dAtA[iNdEx:postIndex]...)
			if m.MinId == nil {
				m.MinId = []byte{}
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportTag", wireType)
			}
			m.ReportTag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReportTag |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CListMailProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CListMailProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CListMailProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mail", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mail = append(m.Mail, make([]byte, postIndex-iNdEx))
			copy(m.Mail[len(m.Mail)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasPrize", wireType)
			}
			m.HasPrize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HasPrize |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keep", wireType)
			}
			m.Keep = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Keep |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Report", wireType)
			}
			m.Report = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Report |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collected", wireType)
			}
			m.Collected = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Collected |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Read", wireType)
			}
			m.Read = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Read |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportTag", wireType)
			}
			m.ReportTag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReportTag |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CReceiveMailProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CReceiveMailProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CReceiveMailProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mail", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mail = append(m.Mail[:0], dAtA[iNdEx:postIndex]...)
			if m.Mail == nil {
				m.Mail = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SDeleteMailProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SDeleteMailProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SDeleteMailProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CDeleteMailProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CDeleteMailProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CDeleteMailProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SKeepMailProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SKeepMailProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SKeepMailProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keep", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Keep = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CKeepMailProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CKeepMailProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CKeepMailProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keep", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Keep = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SCollectMailPrizeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCollectMailPrizeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCollectMailPrizeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCollectMailPrizeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCollectMailPrizeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCollectMailPrizeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SReadMailProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SReadMailProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SReadMailProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CReadMailProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CReadMailProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CReadMailProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CNotifyMailCountProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CNotifyMailCountProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CNotifyMailCountProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasPrizeNotCollectedCount", wireType)
			}
			m.HasPrizeNotCollectedCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HasPrizeNotCollectedCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasReportNotReadedCount", wireType)
			}
			m.HasReportNotReadedCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HasReportNotReadedCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoReportNotReadedCount", wireType)
			}
			m.NoReportNotReadedCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NoReportNotReadedCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasYwReportNotReadedCount", wireType)
			}
			m.HasYwReportNotReadedCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HasYwReportNotReadedCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasBzReportNotReadedCount", wireType)
			}
			m.HasBzReportNotReadedCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HasBzReportNotReadedCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SReadMultiProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SReadMultiProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SReadMultiProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Report", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Report = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ids = append(m.Ids, make([]byte, postIndex-iNdEx))
			copy(m.Ids[len(m.Ids)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CReadMultiProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CReadMultiProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CReadMultiProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prize", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prize = append(m.Prize[:0], dAtA[iNdEx:postIndex]...)
			if m.Prize == nil {
				m.Prize = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Report", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Report = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ids = append(m.Ids, make([]byte, postIndex-iNdEx))
			copy(m.Ids[len(m.Ids)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SDeleteMultiProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SDeleteMultiProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SDeleteMultiProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Report", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Report = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ids = append(m.Ids, make([]byte, postIndex-iNdEx))
			copy(m.Ids[len(m.Ids)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CDeleteMultiProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CDeleteMultiProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CDeleteMultiProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Report", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Report = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ids = append(m.Ids, make([]byte, postIndex-iNdEx))
			copy(m.Ids[len(m.Ids)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SGetMailProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SGetMailProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SGetMailProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bid", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bid = append(m.Bid[:0], dAtA[iNdEx:postIndex]...)
			if m.Bid == nil {
				m.Bid = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CGetMailProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CGetMailProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CGetMailProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMail(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMail
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMail
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMail
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMail
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMail
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMail(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMail = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMail   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/gen/pb/mail/mail.proto", fileDescriptorMail)
}

var fileDescriptorMail = []byte{
	// 644 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0xcd, 0x6e, 0x13, 0x3d,
	0x14, 0xfd, 0x26, 0xc9, 0xa4, 0xc9, 0xfd, 0x4a, 0x9b, 0x4e, 0x4b, 0x6b, 0x28, 0x8d, 0xa2, 0x01,
	0xa4, 0xd0, 0x45, 0x83, 0x06, 0x09, 0x24, 0x04, 0x2a, 0xd4, 0x48, 0x80, 0x80, 0xaa, 0x1a, 0xb3,
	0x81, 0x4d, 0xe4, 0x64, 0x4c, 0x62, 0x31, 0x19, 0x8f, 0x12, 0x97, 0xaa, 0x79, 0x12, 0x1e, 0x87,
	0x25, 0x4b, 0xb6, 0x88, 0x0d, 0x2a, 0x2f, 0x82, 0x7c, 0x9d, 0xc9, 0x4f, 0x95, 0x94, 0xbf, 0x4d,
	0x72, 0x6d, 0x9f, 0x73, 0xec, 0x73, 0x7d, 0xaf, 0x07, 0x6e, 0x77, 0xa4, 0xee, 0x1e, 0xb7, 0xf6,
	0xda, 0xaa, 0xd7, 0x88, 0x65, 0xa7, 0xab, 0x53, 0x7e, 0xd2, 0xe8, 0xf1, 0x58, 0xdc, 0x6b, 0x74,
	0x44, 0xd2, 0x48, 0x5b, 0x8d, 0x1e, 0x97, 0x31, 0xfe, 0xec, 0xa5, 0x7d, 0xa5, 0x95, 0xe7, 0xe2,
	0x9f, 0xff, 0xd5, 0x81, 0x0a, 0x0d, 0xd8, 0x4b, 0x39, 0xd0, 0xaf, 0xb8, 0x8c, 0x8f, 0x70, 0x6d,
	0x1b, 0xca, 0x5d, 0x3e, 0x68, 0xa6, 0x7d, 0x39, 0x14, 0xc4, 0xad, 0x39, 0x75, 0x37, 0x2c, 0x75,
	0xf9, 0xe0, 0xc8, 0x8c, 0xbd, 0x0d, 0x70, 0xdb, 0xea, 0x38, 0xd1, 0x64, 0x09, 0x17, 0xec, 0xc0,
	0xf3, 0xa0, 0xf0, 0x5e, 0x88, 0x94, 0x94, 0x70, 0x12, 0x63, 0x6f, 0x13, 0x8a, 0x7d, 0x91, 0xaa,
	0xbe, 0x26, 0x65, 0x9c, 0x1d, 0x8d, 0xbc, 0x6b, 0x50, 0x6e, 0xab, 0x38, 0x16, 0x6d, 0x2d, 0x22,
	0x02, 0xb8, 0x34, 0x99, 0x30, 0x4a, 0x7d, 0xc1, 0x23, 0xf2, 0xbf, 0x55, 0x32, 0xb1, 0x77, 0x19,
	0x8a, 0x3d, 0x99, 0x34, 0x65, 0x44, 0x2e, 0xd5, 0x9c, 0xfa, 0x72, 0xe8, 0xf6, 0x64, 0xf2, 0x3c,
	0xf2, 0x76, 0x00, 0xac, 0x64, 0x53, 0xf3, 0x0e, 0x59, 0xb1, 0x4a, 0x76, 0xe6, 0x35, 0xef, 0xf8,
	0x9f, 0x1c, 0xa8, 0xb0, 0x80, 0xce, 0x7a, 0xf3, 0xa0, 0x60, 0xb2, 0x40, 0x9c, 0x5a, 0xbe, 0xbe,
	0x1c, 0x62, 0x3c, 0xeb, 0x37, 0x7f, 0xce, 0x6f, 0xe6, 0xcc, 0x9d, 0xeb, 0xac, 0xb8, 0xd8, 0xd9,
	0xd2, 0x22, 0x67, 0xa5, 0x29, 0x67, 0xb3, 0x16, 0xca, 0xe7, 0x2d, 0xdc, 0x82, 0x75, 0x16, 0xd0,
	0x50, 0xb4, 0x85, 0xfc, 0x20, 0xe6, 0x99, 0x70, 0x32, 0x13, 0xfe, 0x0d, 0xf0, 0x68, 0xc0, 0x9e,
	0x88, 0x58, 0xe8, 0x29, 0xe4, 0x0a, 0xe4, 0x64, 0x84, 0x9e, 0x96, 0xc3, 0x9c, 0x8c, 0x0c, 0x8a,
	0x05, 0xf4, 0x57, 0xa8, 0xbb, 0x58, 0x14, 0x2f, 0x84, 0x48, 0x67, 0xf6, 0xc4, 0x3c, 0xe4, 0x6a,
	0x4e, 0xbd, 0x34, 0xca, 0x83, 0xe5, 0x15, 0xa6, 0x79, 0x2c, 0xa0, 0x7f, 0xce, 0xdb, 0x05, 0x42,
	0x03, 0x46, 0x6d, 0xa6, 0x2c, 0x55, 0x0e, 0xc5, 0xfc, 0xb3, 0xed, 0x02, 0x61, 0x01, 0xfd, 0x3d,
	0xac, 0x8f, 0x3e, 0x42, 0xc1, 0xa3, 0xc5, 0x5e, 0x7d, 0x3c, 0xf3, 0xc5, 0x98, 0x6f, 0x39, 0xd8,
	0x62, 0x01, 0x3d, 0x54, 0x5a, 0xbe, 0x3b, 0x35, 0x30, 0x6a, 0x8a, 0xde, 0x62, 0x1f, 0xc1, 0xce,
	0xb8, 0x78, 0x9a, 0x89, 0xd2, 0xcd, 0xf1, 0x85, 0x37, 0x6d, 0x9f, 0x38, 0x78, 0xa9, 0x57, 0xb2,
	0x82, 0x3a, 0x54, 0x9a, 0x66, 0x08, 0x94, 0xf1, 0x1e, 0xc0, 0xb6, 0x51, 0x18, 0xd5, 0x81, 0x91,
	0x30, 0xa5, 0x31, 0xe6, 0xe7, 0x90, 0xbf, 0xd5, 0xe5, 0x83, 0x10, 0x11, 0x87, 0x4a, 0x87, 0xb8,
	0x6e, 0xd9, 0xf7, 0xe1, 0x6a, 0xa2, 0x16, 0x92, 0x6d, 0x35, 0x6f, 0x26, 0x6a, 0x2e, 0xf7, 0x31,
	0x54, 0xcd, 0xce, 0xa7, 0x27, 0x0b, 0xf9, 0x85, 0xf1, 0xe1, 0xdf, 0x9c, 0x5c, 0x24, 0xd1, 0x1a,
	0x2e, 0x94, 0x70, 0xc7, 0x12, 0x07, 0xc3, 0x79, 0x12, 0xfe, 0x43, 0x58, 0xcb, 0x6e, 0xe9, 0x38,
	0xd6, 0xd2, 0xa6, 0x75, 0xd2, 0x62, 0x79, 0x2c, 0x9c, 0xac, 0xc5, 0x2a, 0x90, 0x97, 0xd1, 0x80,
	0xb8, 0xd8, 0xbe, 0x26, 0xf4, 0x19, 0xac, 0x65, 0x17, 0x38, 0xa1, 0x6f, 0x80, 0x6b, 0xdb, 0x39,
	0x67, 0x1f, 0x0c, 0x1c, 0x4c, 0x89, 0x16, 0xe6, 0x89, 0x16, 0x27, 0xa2, 0xfb, 0xb0, 0x3e, 0xe9,
	0xa6, 0xbf, 0x39, 0xd5, 0x3e, 0x76, 0xee, 0x3f, 0x08, 0x5c, 0x87, 0x55, 0x1a, 0xb0, 0xa7, 0x62,
	0xea, 0xed, 0xaa, 0x40, 0xbe, 0x25, 0xa3, 0x51, 0xd7, 0x9b, 0xd0, 0xbf, 0x09, 0xab, 0x2c, 0xa0,
	0x33, 0x20, 0x0f, 0x0a, 0x11, 0xd7, 0x7c, 0x64, 0x1c, 0xe3, 0x03, 0xf2, 0xf9, 0xac, 0xea, 0x7c,
	0x39, 0xab, 0x3a, 0xdf, 0xcf, 0xaa, 0xce, 0xc7, 0x1f, 0xd5, 0xff, 0x9e, 0x39, 0x6f, 0xf1, 0xd5,
	0x68, 0x15, 0xf1, 0x33, 0x70, 0xe7, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0x70, 0xcd, 0xfd, 0x00,
	0x41, 0x06, 0x00, 0x00,
}
