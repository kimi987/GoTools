// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/gen/pb/guild/guild.proto
// DO NOT EDIT!

/*
	Package guild is a generated protocol buffer package.

	It is generated from these files:
		github.com/lightpaw/male7/gen/pb/guild/guild.proto

	It has these top-level messages:
		S2CListGuildProto
		C2SSearchGuildProto
		S2CSearchGuildProto
		C2SCreateGuildProto
		S2CCreateGuildProto
		C2SSelfGuildProto
		S2CSelfGuildProto
		S2CLeaveGuildForOtherProto
		C2SKickOtherProto
		S2CKickOtherProto
		C2SUpdateTextProto
		S2CUpdateTextProto
		C2SUpdateInternalTextProto
		S2CUpdateInternalTextProto
		C2SUpdateClassNamesProto
		S2CUpdateClassNamesProto
		C2SUpdateClassTitleProto
		C2SUpdateFlagTypeProto
		S2CUpdateFlagTypeProto
		C2SUpdateMemberClassLevelProto
		S2CUpdateMemberClassLevelProto
		S2CUpdateSelfClassLevelProto
		C2SUpdateJoinConditionProto
		S2CUpdateJoinConditionProto
		C2SUpdateGuildNameProto
		S2CUpdateGuildNameProto
		S2CUpdateGuildNameBroadcastProto
		C2SUpdateGuildLabelProto
		S2CUpdateGuildLabelProto
		S2CUpdateContributionCoinProto
		C2SDonateProto
		S2CDonateProto
		C2SReduceUpgradeLevelCdProto
		C2SImpeachLeaderVoteProto
		S2CImpeachLeaderVoteProto
		C2SListGuildByIdsProto
		S2CListGuildByIdsProto
		C2SUserRequestJoinProto
		S2CUserRequestJoinProto
		S2CUserRemoveJoinRequestProto
		C2SUserCancelJoinRequestProto
		S2CUserCancelJoinRequestProto
		S2CAddGuildMemberProto
		S2CUserJoinedProto
		C2SGuildReplyJoinRequestProto
		S2CGuildReplyJoinRequestProto
		C2SGuildInvateOtherProto
		S2CGuildInvateOtherProto
		C2SGuildCancelInvateOtherProto
		S2CGuildCancelInvateOtherProto
		S2CUserAddBeenInvateGuildProto
		S2CUserRemoveBeenInvateGuildProto
		C2SUserReplyInvateRequestProto
		S2CUserReplyInvateRequestProto
		S2CListInviteMeGuildProto
		C2SUpdateFriendGuildProto
		S2CUpdateFriendGuildProto
		C2SUpdateEnemyGuildProto
		S2CUpdateEnemyGuildProto
		C2SUpdateGuildPrestigeProto
		S2CUpdateGuildPrestigeProto
		C2SPlaceGuildStatueProto
		S2CGuildStatueProto
		S2CUpdateSeekHelpProto
		S2CUpdateHelpMemberTimesProto
		C2SSeekHelpProto
		S2CSeekHelpProto
		S2CAddGuildSeekHelpProto
		C2SHelpGuildMemberProto
		S2CHelpGuildMemberProto
		S2CHelpAllGuildMemberProto
		S2CAddGuildSeekHelpHeroIdsProto
		S2CRemoveGuildSeekHelpProto
		S2CListGuildSeekHelpProto
		S2CListGuildEventPrizeProto
		S2CAddGuildEventPrizeProto
		S2CRemoveGuildEventPrizeProto
		C2SCollectGuildEventPrizeProto
		S2CCollectGuildEventPrizeProto
		S2CUpdateFullBigBoxProto
		S2CUpdateHeroJoinGuildTimeProto
		C2SUpgradeTechnologyProto
		S2CUpgradeTechnologyProto
		C2SReduceTechnologyCdProto
		C2SListGuildLogsProto
		S2CListGuildLogsProto
		S2CAddGuildLogProto
		S2CRequestRecommendGuildProto
		S2CPushTechHelpableProto
		S2CHelpTechProto
		S2CRecommendInviteHerosProto
		C2SSearchNoGuildHerosProto
		S2CSearchNoGuildHerosProto
		S2CViewMcWarRecordProto
		C2SUpdateGuildMarkProto
		S2CUpdateGuildMarkProto
		S2CViewYinliangRecordProto
		C2SSendYinliangToOtherGuildProto
		S2CSendYinliangToOtherGuildProto
		C2SSendYinliangToMemberProto
		S2CSendYinliangToMemberProto
		S2CPaySalaryProto
		C2SSetSalaryProto
		S2CSetSalaryProto
		S2CUpdateHeroGuildProto
		S2CViewSendYinliangToGuildProto
		S2CUpdateHufuProto
		C2SConveneProto
		S2CConveneProto
		S2CCollectDailyGuildRankPrizeProto
		S2CViewDailyGuildRankProto
		S2CViewLastGuildRankProto
		C2SAddRecommendMcBuildProto
		S2CAddRecommendMcBuildProto
		C2SViewTaskProgressProto
		S2CViewTaskProgressProto
		S2CNoticeTaskStageUpdateProto
		C2SCollectTaskPrizeProto
		S2CCollectTaskPrizeProto
		C2SGuildChangeCountryProto
		S2CGuildChangeCountryProto
		S2CShowWorkshopNotExistProto
*/
package guild

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import proto1 "github.com/lightpaw/male7/pb/shared_proto"
import proto8 "github.com/lightpaw/male7/pb/shared_proto"
import proto41 "github.com/lightpaw/male7/pb/shared_proto"
import proto43 "github.com/lightpaw/male7/pb/shared_proto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type S2CListGuildProto struct {
	GuildList []*proto8.GuildSnapshotProto `protobuf:"bytes,2,rep,name=guild_list,json=guildList" json:"guild_list,omitempty"`
}

func (m *S2CListGuildProto) Reset()                    { *m = S2CListGuildProto{} }
func (m *S2CListGuildProto) String() string            { return proto.CompactTextString(m) }
func (*S2CListGuildProto) ProtoMessage()               {}
func (*S2CListGuildProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{0} }

func (m *S2CListGuildProto) GetGuildList() []*proto8.GuildSnapshotProto {
	if m != nil {
		return m.GuildList
	}
	return nil
}

type C2SSearchGuildProto struct {
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Num           int32  `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
	ShowSelfGuild bool   `protobuf:"varint,3,opt,name=show_self_guild,json=showSelfGuild,proto3" json:"show_self_guild,omitempty"`
}

func (m *C2SSearchGuildProto) Reset()                    { *m = C2SSearchGuildProto{} }
func (m *C2SSearchGuildProto) String() string            { return proto.CompactTextString(m) }
func (*C2SSearchGuildProto) ProtoMessage()               {}
func (*C2SSearchGuildProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{1} }

func (m *C2SSearchGuildProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *C2SSearchGuildProto) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *C2SSearchGuildProto) GetShowSelfGuild() bool {
	if m != nil {
		return m.ShowSelfGuild
	}
	return false
}

type S2CSearchGuildProto struct {
	Proto        [][]byte                         `protobuf:"bytes,1,rep,name=proto" json:"proto,omitempty"`
	GuildList    []*proto8.GuildSnapshotProto     `protobuf:"bytes,2,rep,name=guild_list,json=guildList" json:"guild_list,omitempty"`
	YinliangList []*proto8.GuildYinliangSendProto `protobuf:"bytes,4,rep,name=yinliang_list,json=yinliangList" json:"yinliang_list,omitempty"`
}

func (m *S2CSearchGuildProto) Reset()                    { *m = S2CSearchGuildProto{} }
func (m *S2CSearchGuildProto) String() string            { return proto.CompactTextString(m) }
func (*S2CSearchGuildProto) ProtoMessage()               {}
func (*S2CSearchGuildProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{2} }

func (m *S2CSearchGuildProto) GetProto() [][]byte {
	if m != nil {
		return m.Proto
	}
	return nil
}

func (m *S2CSearchGuildProto) GetGuildList() []*proto8.GuildSnapshotProto {
	if m != nil {
		return m.GuildList
	}
	return nil
}

func (m *S2CSearchGuildProto) GetYinliangList() []*proto8.GuildYinliangSendProto {
	if m != nil {
		return m.YinliangList
	}
	return nil
}

type C2SCreateGuildProto struct {
	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	FlagName string `protobuf:"bytes,2,opt,name=flag_name,json=flagName,proto3" json:"flag_name,omitempty"`
	Country  int32  `protobuf:"varint,3,opt,name=country,proto3" json:"country,omitempty"`
}

func (m *C2SCreateGuildProto) Reset()                    { *m = C2SCreateGuildProto{} }
func (m *C2SCreateGuildProto) String() string            { return proto.CompactTextString(m) }
func (*C2SCreateGuildProto) ProtoMessage()               {}
func (*C2SCreateGuildProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{3} }

func (m *C2SCreateGuildProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *C2SCreateGuildProto) GetFlagName() string {
	if m != nil {
		return m.FlagName
	}
	return ""
}

func (m *C2SCreateGuildProto) GetCountry() int32 {
	if m != nil {
		return m.Country
	}
	return 0
}

type S2CCreateGuildProto struct {
	Proto []byte `protobuf:"bytes,1,opt,name=proto,proto3" json:"proto,omitempty"`
}

func (m *S2CCreateGuildProto) Reset()                    { *m = S2CCreateGuildProto{} }
func (m *S2CCreateGuildProto) String() string            { return proto.CompactTextString(m) }
func (*S2CCreateGuildProto) ProtoMessage()               {}
func (*S2CCreateGuildProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{4} }

func (m *S2CCreateGuildProto) GetProto() []byte {
	if m != nil {
		return m.Proto
	}
	return nil
}

type C2SSelfGuildProto struct {
	Version int32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	GuildId int32 `protobuf:"varint,2,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
}

func (m *C2SSelfGuildProto) Reset()                    { *m = C2SSelfGuildProto{} }
func (m *C2SSelfGuildProto) String() string            { return proto.CompactTextString(m) }
func (*C2SSelfGuildProto) ProtoMessage()               {}
func (*C2SSelfGuildProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{5} }

func (m *C2SSelfGuildProto) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *C2SSelfGuildProto) GetGuildId() int32 {
	if m != nil {
		return m.GuildId
	}
	return 0
}

type S2CSelfGuildProto struct {
	Varsion int32  `protobuf:"varint,2,opt,name=varsion,proto3" json:"varsion,omitempty"`
	Proto   []byte `protobuf:"bytes,1,opt,name=proto,proto3" json:"proto,omitempty"`
}

func (m *S2CSelfGuildProto) Reset()                    { *m = S2CSelfGuildProto{} }
func (m *S2CSelfGuildProto) String() string            { return proto.CompactTextString(m) }
func (*S2CSelfGuildProto) ProtoMessage()               {}
func (*S2CSelfGuildProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{6} }

func (m *S2CSelfGuildProto) GetVarsion() int32 {
	if m != nil {
		return m.Varsion
	}
	return 0
}

func (m *S2CSelfGuildProto) GetProto() []byte {
	if m != nil {
		return m.Proto
	}
	return nil
}

type S2CLeaveGuildForOtherProto struct {
	Id   []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Head string `protobuf:"bytes,3,opt,name=head,proto3" json:"head,omitempty"`
}

func (m *S2CLeaveGuildForOtherProto) Reset()                    { *m = S2CLeaveGuildForOtherProto{} }
func (m *S2CLeaveGuildForOtherProto) String() string            { return proto.CompactTextString(m) }
func (*S2CLeaveGuildForOtherProto) ProtoMessage()               {}
func (*S2CLeaveGuildForOtherProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{7} }

func (m *S2CLeaveGuildForOtherProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *S2CLeaveGuildForOtherProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *S2CLeaveGuildForOtherProto) GetHead() string {
	if m != nil {
		return m.Head
	}
	return ""
}

type C2SKickOtherProto struct {
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SKickOtherProto) Reset()                    { *m = C2SKickOtherProto{} }
func (m *C2SKickOtherProto) String() string            { return proto.CompactTextString(m) }
func (*C2SKickOtherProto) ProtoMessage()               {}
func (*C2SKickOtherProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{8} }

func (m *C2SKickOtherProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type S2CKickOtherProto struct {
	Id   []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *S2CKickOtherProto) Reset()                    { *m = S2CKickOtherProto{} }
func (m *S2CKickOtherProto) String() string            { return proto.CompactTextString(m) }
func (*S2CKickOtherProto) ProtoMessage()               {}
func (*S2CKickOtherProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{9} }

func (m *S2CKickOtherProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *S2CKickOtherProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type C2SUpdateTextProto struct {
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (m *C2SUpdateTextProto) Reset()                    { *m = C2SUpdateTextProto{} }
func (m *C2SUpdateTextProto) String() string            { return proto.CompactTextString(m) }
func (*C2SUpdateTextProto) ProtoMessage()               {}
func (*C2SUpdateTextProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{10} }

func (m *C2SUpdateTextProto) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type S2CUpdateTextProto struct {
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (m *S2CUpdateTextProto) Reset()                    { *m = S2CUpdateTextProto{} }
func (m *S2CUpdateTextProto) String() string            { return proto.CompactTextString(m) }
func (*S2CUpdateTextProto) ProtoMessage()               {}
func (*S2CUpdateTextProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{11} }

func (m *S2CUpdateTextProto) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type C2SUpdateInternalTextProto struct {
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (m *C2SUpdateInternalTextProto) Reset()                    { *m = C2SUpdateInternalTextProto{} }
func (m *C2SUpdateInternalTextProto) String() string            { return proto.CompactTextString(m) }
func (*C2SUpdateInternalTextProto) ProtoMessage()               {}
func (*C2SUpdateInternalTextProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{12} }

func (m *C2SUpdateInternalTextProto) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type S2CUpdateInternalTextProto struct {
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (m *S2CUpdateInternalTextProto) Reset()                    { *m = S2CUpdateInternalTextProto{} }
func (m *S2CUpdateInternalTextProto) String() string            { return proto.CompactTextString(m) }
func (*S2CUpdateInternalTextProto) ProtoMessage()               {}
func (*S2CUpdateInternalTextProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{13} }

func (m *S2CUpdateInternalTextProto) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type C2SUpdateClassNamesProto struct {
	Name []string `protobuf:"bytes,1,rep,name=name" json:"name,omitempty"`
}

func (m *C2SUpdateClassNamesProto) Reset()                    { *m = C2SUpdateClassNamesProto{} }
func (m *C2SUpdateClassNamesProto) String() string            { return proto.CompactTextString(m) }
func (*C2SUpdateClassNamesProto) ProtoMessage()               {}
func (*C2SUpdateClassNamesProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{14} }

func (m *C2SUpdateClassNamesProto) GetName() []string {
	if m != nil {
		return m.Name
	}
	return nil
}

type S2CUpdateClassNamesProto struct {
	Name []string `protobuf:"bytes,1,rep,name=name" json:"name,omitempty"`
}

func (m *S2CUpdateClassNamesProto) Reset()                    { *m = S2CUpdateClassNamesProto{} }
func (m *S2CUpdateClassNamesProto) String() string            { return proto.CompactTextString(m) }
func (*S2CUpdateClassNamesProto) ProtoMessage()               {}
func (*S2CUpdateClassNamesProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{15} }

func (m *S2CUpdateClassNamesProto) GetName() []string {
	if m != nil {
		return m.Name
	}
	return nil
}

type C2SUpdateClassTitleProto struct {
	Proto []byte `protobuf:"bytes,4,opt,name=proto,proto3" json:"proto,omitempty"`
}

func (m *C2SUpdateClassTitleProto) Reset()                    { *m = C2SUpdateClassTitleProto{} }
func (m *C2SUpdateClassTitleProto) String() string            { return proto.CompactTextString(m) }
func (*C2SUpdateClassTitleProto) ProtoMessage()               {}
func (*C2SUpdateClassTitleProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{16} }

func (m *C2SUpdateClassTitleProto) GetProto() []byte {
	if m != nil {
		return m.Proto
	}
	return nil
}

type C2SUpdateFlagTypeProto struct {
	FlagType int32 `protobuf:"varint,1,opt,name=flag_type,json=flagType,proto3" json:"flag_type,omitempty"`
}

func (m *C2SUpdateFlagTypeProto) Reset()                    { *m = C2SUpdateFlagTypeProto{} }
func (m *C2SUpdateFlagTypeProto) String() string            { return proto.CompactTextString(m) }
func (*C2SUpdateFlagTypeProto) ProtoMessage()               {}
func (*C2SUpdateFlagTypeProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{17} }

func (m *C2SUpdateFlagTypeProto) GetFlagType() int32 {
	if m != nil {
		return m.FlagType
	}
	return 0
}

type S2CUpdateFlagTypeProto struct {
	FlagType int32 `protobuf:"varint,1,opt,name=flag_type,json=flagType,proto3" json:"flag_type,omitempty"`
}

func (m *S2CUpdateFlagTypeProto) Reset()                    { *m = S2CUpdateFlagTypeProto{} }
func (m *S2CUpdateFlagTypeProto) String() string            { return proto.CompactTextString(m) }
func (*S2CUpdateFlagTypeProto) ProtoMessage()               {}
func (*S2CUpdateFlagTypeProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{18} }

func (m *S2CUpdateFlagTypeProto) GetFlagType() int32 {
	if m != nil {
		return m.FlagType
	}
	return 0
}

type C2SUpdateMemberClassLevelProto struct {
	Id         []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ClassLevel int32  `protobuf:"varint,2,opt,name=class_level,json=classLevel,proto3" json:"class_level,omitempty"`
}

func (m *C2SUpdateMemberClassLevelProto) Reset()         { *m = C2SUpdateMemberClassLevelProto{} }
func (m *C2SUpdateMemberClassLevelProto) String() string { return proto.CompactTextString(m) }
func (*C2SUpdateMemberClassLevelProto) ProtoMessage()    {}
func (*C2SUpdateMemberClassLevelProto) Descriptor() ([]byte, []int) {
	return fileDescriptorGuild, []int{19}
}

func (m *C2SUpdateMemberClassLevelProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *C2SUpdateMemberClassLevelProto) GetClassLevel() int32 {
	if m != nil {
		return m.ClassLevel
	}
	return 0
}

type S2CUpdateMemberClassLevelProto struct {
	Id         []byte `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	ClassLevel int32  `protobuf:"varint,4,opt,name=class_level,json=classLevel,proto3" json:"class_level,omitempty"`
}

func (m *S2CUpdateMemberClassLevelProto) Reset()         { *m = S2CUpdateMemberClassLevelProto{} }
func (m *S2CUpdateMemberClassLevelProto) String() string { return proto.CompactTextString(m) }
func (*S2CUpdateMemberClassLevelProto) ProtoMessage()    {}
func (*S2CUpdateMemberClassLevelProto) Descriptor() ([]byte, []int) {
	return fileDescriptorGuild, []int{20}
}

func (m *S2CUpdateMemberClassLevelProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *S2CUpdateMemberClassLevelProto) GetClassLevel() int32 {
	if m != nil {
		return m.ClassLevel
	}
	return 0
}

type S2CUpdateSelfClassLevelProto struct {
	ClassLevel int32 `protobuf:"varint,1,opt,name=class_level,json=classLevel,proto3" json:"class_level,omitempty"`
}

func (m *S2CUpdateSelfClassLevelProto) Reset()         { *m = S2CUpdateSelfClassLevelProto{} }
func (m *S2CUpdateSelfClassLevelProto) String() string { return proto.CompactTextString(m) }
func (*S2CUpdateSelfClassLevelProto) ProtoMessage()    {}
func (*S2CUpdateSelfClassLevelProto) Descriptor() ([]byte, []int) {
	return fileDescriptorGuild, []int{21}
}

func (m *S2CUpdateSelfClassLevelProto) GetClassLevel() int32 {
	if m != nil {
		return m.ClassLevel
	}
	return 0
}

type C2SUpdateJoinConditionProto struct {
	RejectAutoJoin        bool  `protobuf:"varint,1,opt,name=reject_auto_join,json=rejectAutoJoin,proto3" json:"reject_auto_join,omitempty"`
	RequiredHeroLevel     int32 `protobuf:"varint,2,opt,name=required_hero_level,json=requiredHeroLevel,proto3" json:"required_hero_level,omitempty"`
	RequiredJunXianLevel  int32 `protobuf:"varint,3,opt,name=required_jun_xian_level,json=requiredJunXianLevel,proto3" json:"required_jun_xian_level,omitempty"`
	RequiredTowerMaxFloor int32 `protobuf:"varint,4,opt,name=required_tower_max_floor,json=requiredTowerMaxFloor,proto3" json:"required_tower_max_floor,omitempty"`
}

func (m *C2SUpdateJoinConditionProto) Reset()         { *m = C2SUpdateJoinConditionProto{} }
func (m *C2SUpdateJoinConditionProto) String() string { return proto.CompactTextString(m) }
func (*C2SUpdateJoinConditionProto) ProtoMessage()    {}
func (*C2SUpdateJoinConditionProto) Descriptor() ([]byte, []int) {
	return fileDescriptorGuild, []int{22}
}

func (m *C2SUpdateJoinConditionProto) GetRejectAutoJoin() bool {
	if m != nil {
		return m.RejectAutoJoin
	}
	return false
}

func (m *C2SUpdateJoinConditionProto) GetRequiredHeroLevel() int32 {
	if m != nil {
		return m.RequiredHeroLevel
	}
	return 0
}

func (m *C2SUpdateJoinConditionProto) GetRequiredJunXianLevel() int32 {
	if m != nil {
		return m.RequiredJunXianLevel
	}
	return 0
}

func (m *C2SUpdateJoinConditionProto) GetRequiredTowerMaxFloor() int32 {
	if m != nil {
		return m.RequiredTowerMaxFloor
	}
	return 0
}

type S2CUpdateJoinConditionProto struct {
	RejectAutoJoin        bool  `protobuf:"varint,1,opt,name=reject_auto_join,json=rejectAutoJoin,proto3" json:"reject_auto_join,omitempty"`
	RequiredHeroLevel     int32 `protobuf:"varint,2,opt,name=required_hero_level,json=requiredHeroLevel,proto3" json:"required_hero_level,omitempty"`
	RequiredJunXianLevel  int32 `protobuf:"varint,3,opt,name=required_jun_xian_level,json=requiredJunXianLevel,proto3" json:"required_jun_xian_level,omitempty"`
	RequiredTowerMaxFloor int32 `protobuf:"varint,4,opt,name=required_tower_max_floor,json=requiredTowerMaxFloor,proto3" json:"required_tower_max_floor,omitempty"`
}

func (m *S2CUpdateJoinConditionProto) Reset()         { *m = S2CUpdateJoinConditionProto{} }
func (m *S2CUpdateJoinConditionProto) String() string { return proto.CompactTextString(m) }
func (*S2CUpdateJoinConditionProto) ProtoMessage()    {}
func (*S2CUpdateJoinConditionProto) Descriptor() ([]byte, []int) {
	return fileDescriptorGuild, []int{23}
}

func (m *S2CUpdateJoinConditionProto) GetRejectAutoJoin() bool {
	if m != nil {
		return m.RejectAutoJoin
	}
	return false
}

func (m *S2CUpdateJoinConditionProto) GetRequiredHeroLevel() int32 {
	if m != nil {
		return m.RequiredHeroLevel
	}
	return 0
}

func (m *S2CUpdateJoinConditionProto) GetRequiredJunXianLevel() int32 {
	if m != nil {
		return m.RequiredJunXianLevel
	}
	return 0
}

func (m *S2CUpdateJoinConditionProto) GetRequiredTowerMaxFloor() int32 {
	if m != nil {
		return m.RequiredTowerMaxFloor
	}
	return 0
}

type C2SUpdateGuildNameProto struct {
	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	FlagName string `protobuf:"bytes,2,opt,name=flag_name,json=flagName,proto3" json:"flag_name,omitempty"`
}

func (m *C2SUpdateGuildNameProto) Reset()                    { *m = C2SUpdateGuildNameProto{} }
func (m *C2SUpdateGuildNameProto) String() string            { return proto.CompactTextString(m) }
func (*C2SUpdateGuildNameProto) ProtoMessage()               {}
func (*C2SUpdateGuildNameProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{24} }

func (m *C2SUpdateGuildNameProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *C2SUpdateGuildNameProto) GetFlagName() string {
	if m != nil {
		return m.FlagName
	}
	return ""
}

type S2CUpdateGuildNameProto struct {
	NextCanChangeTime int32 `protobuf:"varint,1,opt,name=next_can_change_time,json=nextCanChangeTime,proto3" json:"next_can_change_time,omitempty"`
}

func (m *S2CUpdateGuildNameProto) Reset()                    { *m = S2CUpdateGuildNameProto{} }
func (m *S2CUpdateGuildNameProto) String() string            { return proto.CompactTextString(m) }
func (*S2CUpdateGuildNameProto) ProtoMessage()               {}
func (*S2CUpdateGuildNameProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{25} }

func (m *S2CUpdateGuildNameProto) GetNextCanChangeTime() int32 {
	if m != nil {
		return m.NextCanChangeTime
	}
	return 0
}

type S2CUpdateGuildNameBroadcastProto struct {
	Id       int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	FlagName string `protobuf:"bytes,3,opt,name=flag_name,json=flagName,proto3" json:"flag_name,omitempty"`
}

func (m *S2CUpdateGuildNameBroadcastProto) Reset()         { *m = S2CUpdateGuildNameBroadcastProto{} }
func (m *S2CUpdateGuildNameBroadcastProto) String() string { return proto.CompactTextString(m) }
func (*S2CUpdateGuildNameBroadcastProto) ProtoMessage()    {}
func (*S2CUpdateGuildNameBroadcastProto) Descriptor() ([]byte, []int) {
	return fileDescriptorGuild, []int{26}
}

func (m *S2CUpdateGuildNameBroadcastProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *S2CUpdateGuildNameBroadcastProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *S2CUpdateGuildNameBroadcastProto) GetFlagName() string {
	if m != nil {
		return m.FlagName
	}
	return ""
}

type C2SUpdateGuildLabelProto struct {
	Label []string `protobuf:"bytes,1,rep,name=label" json:"label,omitempty"`
}

func (m *C2SUpdateGuildLabelProto) Reset()                    { *m = C2SUpdateGuildLabelProto{} }
func (m *C2SUpdateGuildLabelProto) String() string            { return proto.CompactTextString(m) }
func (*C2SUpdateGuildLabelProto) ProtoMessage()               {}
func (*C2SUpdateGuildLabelProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{27} }

func (m *C2SUpdateGuildLabelProto) GetLabel() []string {
	if m != nil {
		return m.Label
	}
	return nil
}

type S2CUpdateGuildLabelProto struct {
	Label []string `protobuf:"bytes,1,rep,name=label" json:"label,omitempty"`
}

func (m *S2CUpdateGuildLabelProto) Reset()                    { *m = S2CUpdateGuildLabelProto{} }
func (m *S2CUpdateGuildLabelProto) String() string            { return proto.CompactTextString(m) }
func (*S2CUpdateGuildLabelProto) ProtoMessage()               {}
func (*S2CUpdateGuildLabelProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{28} }

func (m *S2CUpdateGuildLabelProto) GetLabel() []string {
	if m != nil {
		return m.Label
	}
	return nil
}

type S2CUpdateContributionCoinProto struct {
	Coin int32 `protobuf:"varint,1,opt,name=coin,proto3" json:"coin,omitempty"`
}

func (m *S2CUpdateContributionCoinProto) Reset()         { *m = S2CUpdateContributionCoinProto{} }
func (m *S2CUpdateContributionCoinProto) String() string { return proto.CompactTextString(m) }
func (*S2CUpdateContributionCoinProto) ProtoMessage()    {}
func (*S2CUpdateContributionCoinProto) Descriptor() ([]byte, []int) {
	return fileDescriptorGuild, []int{29}
}

func (m *S2CUpdateContributionCoinProto) GetCoin() int32 {
	if m != nil {
		return m.Coin
	}
	return 0
}

type C2SDonateProto struct {
	Sequence int32 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (m *C2SDonateProto) Reset()                    { *m = C2SDonateProto{} }
func (m *C2SDonateProto) String() string            { return proto.CompactTextString(m) }
func (*C2SDonateProto) ProtoMessage()               {}
func (*C2SDonateProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{30} }

func (m *C2SDonateProto) GetSequence() int32 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

type S2CDonateProto struct {
	Sequence                int32 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Times                   int32 `protobuf:"varint,2,opt,name=times,proto3" json:"times,omitempty"`
	DonateId                int32 `protobuf:"varint,12,opt,name=donate_id,json=donateId,proto3" json:"donate_id,omitempty"`
	BuildingAmount          int32 `protobuf:"varint,3,opt,name=building_amount,json=buildingAmount,proto3" json:"building_amount,omitempty"`
	ContributionAmount      int32 `protobuf:"varint,4,opt,name=contribution_amount,json=contributionAmount,proto3" json:"contribution_amount,omitempty"`
	ContributionTotalAmount int32 `protobuf:"varint,5,opt,name=contribution_total_amount,json=contributionTotalAmount,proto3" json:"contribution_total_amount,omitempty"`
	ContributionAmount7     int32 `protobuf:"varint,6,opt,name=contribution_amount7,json=contributionAmount7,proto3" json:"contribution_amount7,omitempty"`
	DonationAmount          int32 `protobuf:"varint,7,opt,name=donation_amount,json=donationAmount,proto3" json:"donation_amount,omitempty"`
	DonationTotalAmount     int32 `protobuf:"varint,8,opt,name=donation_total_amount,json=donationTotalAmount,proto3" json:"donation_total_amount,omitempty"`
	DonationAmount7         int32 `protobuf:"varint,9,opt,name=donation_amount7,json=donationAmount7,proto3" json:"donation_amount7,omitempty"`
	DonationTotalYuanbao    int32 `protobuf:"varint,11,opt,name=donation_total_yuanbao,json=donationTotalYuanbao,proto3" json:"donation_total_yuanbao,omitempty"`
}

func (m *S2CDonateProto) Reset()                    { *m = S2CDonateProto{} }
func (m *S2CDonateProto) String() string            { return proto.CompactTextString(m) }
func (*S2CDonateProto) ProtoMessage()               {}
func (*S2CDonateProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{31} }

func (m *S2CDonateProto) GetSequence() int32 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *S2CDonateProto) GetTimes() int32 {
	if m != nil {
		return m.Times
	}
	return 0
}

func (m *S2CDonateProto) GetDonateId() int32 {
	if m != nil {
		return m.DonateId
	}
	return 0
}

func (m *S2CDonateProto) GetBuildingAmount() int32 {
	if m != nil {
		return m.BuildingAmount
	}
	return 0
}

func (m *S2CDonateProto) GetContributionAmount() int32 {
	if m != nil {
		return m.ContributionAmount
	}
	return 0
}

func (m *S2CDonateProto) GetContributionTotalAmount() int32 {
	if m != nil {
		return m.ContributionTotalAmount
	}
	return 0
}

func (m *S2CDonateProto) GetContributionAmount7() int32 {
	if m != nil {
		return m.ContributionAmount7
	}
	return 0
}

func (m *S2CDonateProto) GetDonationAmount() int32 {
	if m != nil {
		return m.DonationAmount
	}
	return 0
}

func (m *S2CDonateProto) GetDonationTotalAmount() int32 {
	if m != nil {
		return m.DonationTotalAmount
	}
	return 0
}

func (m *S2CDonateProto) GetDonationAmount7() int32 {
	if m != nil {
		return m.DonationAmount7
	}
	return 0
}

func (m *S2CDonateProto) GetDonationTotalYuanbao() int32 {
	if m != nil {
		return m.DonationTotalYuanbao
	}
	return 0
}

type C2SReduceUpgradeLevelCdProto struct {
	Times int32 `protobuf:"varint,1,opt,name=times,proto3" json:"times,omitempty"`
}

func (m *C2SReduceUpgradeLevelCdProto) Reset()         { *m = C2SReduceUpgradeLevelCdProto{} }
func (m *C2SReduceUpgradeLevelCdProto) String() string { return proto.CompactTextString(m) }
func (*C2SReduceUpgradeLevelCdProto) ProtoMessage()    {}
func (*C2SReduceUpgradeLevelCdProto) Descriptor() ([]byte, []int) {
	return fileDescriptorGuild, []int{32}
}

func (m *C2SReduceUpgradeLevelCdProto) GetTimes() int32 {
	if m != nil {
		return m.Times
	}
	return 0
}

type C2SImpeachLeaderVoteProto struct {
	Target []byte `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
}

func (m *C2SImpeachLeaderVoteProto) Reset()                    { *m = C2SImpeachLeaderVoteProto{} }
func (m *C2SImpeachLeaderVoteProto) String() string            { return proto.CompactTextString(m) }
func (*C2SImpeachLeaderVoteProto) ProtoMessage()               {}
func (*C2SImpeachLeaderVoteProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{33} }

func (m *C2SImpeachLeaderVoteProto) GetTarget() []byte {
	if m != nil {
		return m.Target
	}
	return nil
}

type S2CImpeachLeaderVoteProto struct {
	ImpeachEnd bool   `protobuf:"varint,1,opt,name=impeach_end,json=impeachEnd,proto3" json:"impeach_end,omitempty"`
	Impeach    []byte `protobuf:"bytes,2,opt,name=impeach,proto3" json:"impeach,omitempty"`
}

func (m *S2CImpeachLeaderVoteProto) Reset()                    { *m = S2CImpeachLeaderVoteProto{} }
func (m *S2CImpeachLeaderVoteProto) String() string            { return proto.CompactTextString(m) }
func (*S2CImpeachLeaderVoteProto) ProtoMessage()               {}
func (*S2CImpeachLeaderVoteProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{34} }

func (m *S2CImpeachLeaderVoteProto) GetImpeachEnd() bool {
	if m != nil {
		return m.ImpeachEnd
	}
	return false
}

func (m *S2CImpeachLeaderVoteProto) GetImpeach() []byte {
	if m != nil {
		return m.Impeach
	}
	return nil
}

type C2SListGuildByIdsProto struct {
	Ids []int32 `protobuf:"varint,1,rep,name=ids" json:"ids,omitempty"`
}

func (m *C2SListGuildByIdsProto) Reset()                    { *m = C2SListGuildByIdsProto{} }
func (m *C2SListGuildByIdsProto) String() string            { return proto.CompactTextString(m) }
func (*C2SListGuildByIdsProto) ProtoMessage()               {}
func (*C2SListGuildByIdsProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{35} }

func (m *C2SListGuildByIdsProto) GetIds() []int32 {
	if m != nil {
		return m.Ids
	}
	return nil
}

type S2CListGuildByIdsProto struct {
	Guilds [][]byte `protobuf:"bytes,1,rep,name=guilds" json:"guilds,omitempty"`
}

func (m *S2CListGuildByIdsProto) Reset()                    { *m = S2CListGuildByIdsProto{} }
func (m *S2CListGuildByIdsProto) String() string            { return proto.CompactTextString(m) }
func (*S2CListGuildByIdsProto) ProtoMessage()               {}
func (*S2CListGuildByIdsProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{36} }

func (m *S2CListGuildByIdsProto) GetGuilds() [][]byte {
	if m != nil {
		return m.Guilds
	}
	return nil
}

type C2SUserRequestJoinProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SUserRequestJoinProto) Reset()                    { *m = C2SUserRequestJoinProto{} }
func (m *C2SUserRequestJoinProto) String() string            { return proto.CompactTextString(m) }
func (*C2SUserRequestJoinProto) ProtoMessage()               {}
func (*C2SUserRequestJoinProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{37} }

func (m *C2SUserRequestJoinProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type S2CUserRequestJoinProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *S2CUserRequestJoinProto) Reset()                    { *m = S2CUserRequestJoinProto{} }
func (m *S2CUserRequestJoinProto) String() string            { return proto.CompactTextString(m) }
func (*S2CUserRequestJoinProto) ProtoMessage()               {}
func (*S2CUserRequestJoinProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{38} }

func (m *S2CUserRequestJoinProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type S2CUserRemoveJoinRequestProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *S2CUserRemoveJoinRequestProto) Reset()         { *m = S2CUserRemoveJoinRequestProto{} }
func (m *S2CUserRemoveJoinRequestProto) String() string { return proto.CompactTextString(m) }
func (*S2CUserRemoveJoinRequestProto) ProtoMessage()    {}
func (*S2CUserRemoveJoinRequestProto) Descriptor() ([]byte, []int) {
	return fileDescriptorGuild, []int{39}
}

func (m *S2CUserRemoveJoinRequestProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type C2SUserCancelJoinRequestProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SUserCancelJoinRequestProto) Reset()         { *m = C2SUserCancelJoinRequestProto{} }
func (m *C2SUserCancelJoinRequestProto) String() string { return proto.CompactTextString(m) }
func (*C2SUserCancelJoinRequestProto) ProtoMessage()    {}
func (*C2SUserCancelJoinRequestProto) Descriptor() ([]byte, []int) {
	return fileDescriptorGuild, []int{40}
}

func (m *C2SUserCancelJoinRequestProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type S2CUserCancelJoinRequestProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *S2CUserCancelJoinRequestProto) Reset()         { *m = S2CUserCancelJoinRequestProto{} }
func (m *S2CUserCancelJoinRequestProto) String() string { return proto.CompactTextString(m) }
func (*S2CUserCancelJoinRequestProto) ProtoMessage()    {}
func (*S2CUserCancelJoinRequestProto) Descriptor() ([]byte, []int) {
	return fileDescriptorGuild, []int{41}
}

func (m *S2CUserCancelJoinRequestProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type S2CAddGuildMemberProto struct {
	Id   []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Head string `protobuf:"bytes,3,opt,name=head,proto3" json:"head,omitempty"`
}

func (m *S2CAddGuildMemberProto) Reset()                    { *m = S2CAddGuildMemberProto{} }
func (m *S2CAddGuildMemberProto) String() string            { return proto.CompactTextString(m) }
func (*S2CAddGuildMemberProto) ProtoMessage()               {}
func (*S2CAddGuildMemberProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{42} }

func (m *S2CAddGuildMemberProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *S2CAddGuildMemberProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *S2CAddGuildMemberProto) GetHead() string {
	if m != nil {
		return m.Head
	}
	return ""
}

type S2CUserJoinedProto struct {
	Id       int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	FlagName string `protobuf:"bytes,3,opt,name=flag_name,json=flagName,proto3" json:"flag_name,omitempty"`
	Country  int32  `protobuf:"varint,4,opt,name=country,proto3" json:"country,omitempty"`
}

func (m *S2CUserJoinedProto) Reset()                    { *m = S2CUserJoinedProto{} }
func (m *S2CUserJoinedProto) String() string            { return proto.CompactTextString(m) }
func (*S2CUserJoinedProto) ProtoMessage()               {}
func (*S2CUserJoinedProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{43} }

func (m *S2CUserJoinedProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *S2CUserJoinedProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *S2CUserJoinedProto) GetFlagName() string {
	if m != nil {
		return m.FlagName
	}
	return ""
}

func (m *S2CUserJoinedProto) GetCountry() int32 {
	if m != nil {
		return m.Country
	}
	return 0
}

type C2SGuildReplyJoinRequestProto struct {
	Id    []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Agree bool   `protobuf:"varint,2,opt,name=agree,proto3" json:"agree,omitempty"`
}

func (m *C2SGuildReplyJoinRequestProto) Reset()         { *m = C2SGuildReplyJoinRequestProto{} }
func (m *C2SGuildReplyJoinRequestProto) String() string { return proto.CompactTextString(m) }
func (*C2SGuildReplyJoinRequestProto) ProtoMessage()    {}
func (*C2SGuildReplyJoinRequestProto) Descriptor() ([]byte, []int) {
	return fileDescriptorGuild, []int{44}
}

func (m *C2SGuildReplyJoinRequestProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *C2SGuildReplyJoinRequestProto) GetAgree() bool {
	if m != nil {
		return m.Agree
	}
	return false
}

type S2CGuildReplyJoinRequestProto struct {
	Id    []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Agree bool   `protobuf:"varint,2,opt,name=agree,proto3" json:"agree,omitempty"`
}

func (m *S2CGuildReplyJoinRequestProto) Reset()         { *m = S2CGuildReplyJoinRequestProto{} }
func (m *S2CGuildReplyJoinRequestProto) String() string { return proto.CompactTextString(m) }
func (*S2CGuildReplyJoinRequestProto) ProtoMessage()    {}
func (*S2CGuildReplyJoinRequestProto) Descriptor() ([]byte, []int) {
	return fileDescriptorGuild, []int{45}
}

func (m *S2CGuildReplyJoinRequestProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *S2CGuildReplyJoinRequestProto) GetAgree() bool {
	if m != nil {
		return m.Agree
	}
	return false
}

type C2SGuildInvateOtherProto struct {
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SGuildInvateOtherProto) Reset()                    { *m = C2SGuildInvateOtherProto{} }
func (m *C2SGuildInvateOtherProto) String() string            { return proto.CompactTextString(m) }
func (*C2SGuildInvateOtherProto) ProtoMessage()               {}
func (*C2SGuildInvateOtherProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{46} }

func (m *C2SGuildInvateOtherProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type S2CGuildInvateOtherProto struct {
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *S2CGuildInvateOtherProto) Reset()                    { *m = S2CGuildInvateOtherProto{} }
func (m *S2CGuildInvateOtherProto) String() string            { return proto.CompactTextString(m) }
func (*S2CGuildInvateOtherProto) ProtoMessage()               {}
func (*S2CGuildInvateOtherProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{47} }

func (m *S2CGuildInvateOtherProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type C2SGuildCancelInvateOtherProto struct {
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SGuildCancelInvateOtherProto) Reset()         { *m = C2SGuildCancelInvateOtherProto{} }
func (m *C2SGuildCancelInvateOtherProto) String() string { return proto.CompactTextString(m) }
func (*C2SGuildCancelInvateOtherProto) ProtoMessage()    {}
func (*C2SGuildCancelInvateOtherProto) Descriptor() ([]byte, []int) {
	return fileDescriptorGuild, []int{48}
}

func (m *C2SGuildCancelInvateOtherProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type S2CGuildCancelInvateOtherProto struct {
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *S2CGuildCancelInvateOtherProto) Reset()         { *m = S2CGuildCancelInvateOtherProto{} }
func (m *S2CGuildCancelInvateOtherProto) String() string { return proto.CompactTextString(m) }
func (*S2CGuildCancelInvateOtherProto) ProtoMessage()    {}
func (*S2CGuildCancelInvateOtherProto) Descriptor() ([]byte, []int) {
	return fileDescriptorGuild, []int{49}
}

func (m *S2CGuildCancelInvateOtherProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type S2CUserAddBeenInvateGuildProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *S2CUserAddBeenInvateGuildProto) Reset()         { *m = S2CUserAddBeenInvateGuildProto{} }
func (m *S2CUserAddBeenInvateGuildProto) String() string { return proto.CompactTextString(m) }
func (*S2CUserAddBeenInvateGuildProto) ProtoMessage()    {}
func (*S2CUserAddBeenInvateGuildProto) Descriptor() ([]byte, []int) {
	return fileDescriptorGuild, []int{50}
}

func (m *S2CUserAddBeenInvateGuildProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type S2CUserRemoveBeenInvateGuildProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *S2CUserRemoveBeenInvateGuildProto) Reset()         { *m = S2CUserRemoveBeenInvateGuildProto{} }
func (m *S2CUserRemoveBeenInvateGuildProto) String() string { return proto.CompactTextString(m) }
func (*S2CUserRemoveBeenInvateGuildProto) ProtoMessage()    {}
func (*S2CUserRemoveBeenInvateGuildProto) Descriptor() ([]byte, []int) {
	return fileDescriptorGuild, []int{51}
}

func (m *S2CUserRemoveBeenInvateGuildProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type C2SUserReplyInvateRequestProto struct {
	Id    int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Agree bool  `protobuf:"varint,2,opt,name=agree,proto3" json:"agree,omitempty"`
}

func (m *C2SUserReplyInvateRequestProto) Reset()         { *m = C2SUserReplyInvateRequestProto{} }
func (m *C2SUserReplyInvateRequestProto) String() string { return proto.CompactTextString(m) }
func (*C2SUserReplyInvateRequestProto) ProtoMessage()    {}
func (*C2SUserReplyInvateRequestProto) Descriptor() ([]byte, []int) {
	return fileDescriptorGuild, []int{52}
}

func (m *C2SUserReplyInvateRequestProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *C2SUserReplyInvateRequestProto) GetAgree() bool {
	if m != nil {
		return m.Agree
	}
	return false
}

type S2CUserReplyInvateRequestProto struct {
	Id    int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Agree bool  `protobuf:"varint,2,opt,name=agree,proto3" json:"agree,omitempty"`
}

func (m *S2CUserReplyInvateRequestProto) Reset()         { *m = S2CUserReplyInvateRequestProto{} }
func (m *S2CUserReplyInvateRequestProto) String() string { return proto.CompactTextString(m) }
func (*S2CUserReplyInvateRequestProto) ProtoMessage()    {}
func (*S2CUserReplyInvateRequestProto) Descriptor() ([]byte, []int) {
	return fileDescriptorGuild, []int{53}
}

func (m *S2CUserReplyInvateRequestProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *S2CUserReplyInvateRequestProto) GetAgree() bool {
	if m != nil {
		return m.Agree
	}
	return false
}

type S2CListInviteMeGuildProto struct {
	GuildList []*proto8.GuildSnapshotProto `protobuf:"bytes,1,rep,name=guild_list,json=guildList" json:"guild_list,omitempty"`
}

func (m *S2CListInviteMeGuildProto) Reset()                    { *m = S2CListInviteMeGuildProto{} }
func (m *S2CListInviteMeGuildProto) String() string            { return proto.CompactTextString(m) }
func (*S2CListInviteMeGuildProto) ProtoMessage()               {}
func (*S2CListInviteMeGuildProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{54} }

func (m *S2CListInviteMeGuildProto) GetGuildList() []*proto8.GuildSnapshotProto {
	if m != nil {
		return m.GuildList
	}
	return nil
}

type C2SUpdateFriendGuildProto struct {
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (m *C2SUpdateFriendGuildProto) Reset()                    { *m = C2SUpdateFriendGuildProto{} }
func (m *C2SUpdateFriendGuildProto) String() string            { return proto.CompactTextString(m) }
func (*C2SUpdateFriendGuildProto) ProtoMessage()               {}
func (*C2SUpdateFriendGuildProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{55} }

func (m *C2SUpdateFriendGuildProto) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type S2CUpdateFriendGuildProto struct {
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (m *S2CUpdateFriendGuildProto) Reset()                    { *m = S2CUpdateFriendGuildProto{} }
func (m *S2CUpdateFriendGuildProto) String() string            { return proto.CompactTextString(m) }
func (*S2CUpdateFriendGuildProto) ProtoMessage()               {}
func (*S2CUpdateFriendGuildProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{56} }

func (m *S2CUpdateFriendGuildProto) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type C2SUpdateEnemyGuildProto struct {
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (m *C2SUpdateEnemyGuildProto) Reset()                    { *m = C2SUpdateEnemyGuildProto{} }
func (m *C2SUpdateEnemyGuildProto) String() string            { return proto.CompactTextString(m) }
func (*C2SUpdateEnemyGuildProto) ProtoMessage()               {}
func (*C2SUpdateEnemyGuildProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{57} }

func (m *C2SUpdateEnemyGuildProto) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type S2CUpdateEnemyGuildProto struct {
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (m *S2CUpdateEnemyGuildProto) Reset()                    { *m = S2CUpdateEnemyGuildProto{} }
func (m *S2CUpdateEnemyGuildProto) String() string            { return proto.CompactTextString(m) }
func (*S2CUpdateEnemyGuildProto) ProtoMessage()               {}
func (*S2CUpdateEnemyGuildProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{58} }

func (m *S2CUpdateEnemyGuildProto) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type C2SUpdateGuildPrestigeProto struct {
	Target int32 `protobuf:"varint,1,opt,name=target,proto3" json:"target,omitempty"`
}

func (m *C2SUpdateGuildPrestigeProto) Reset()         { *m = C2SUpdateGuildPrestigeProto{} }
func (m *C2SUpdateGuildPrestigeProto) String() string { return proto.CompactTextString(m) }
func (*C2SUpdateGuildPrestigeProto) ProtoMessage()    {}
func (*C2SUpdateGuildPrestigeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorGuild, []int{59}
}

func (m *C2SUpdateGuildPrestigeProto) GetTarget() int32 {
	if m != nil {
		return m.Target
	}
	return 0
}

type S2CUpdateGuildPrestigeProto struct {
	OldTarget int32 `protobuf:"varint,2,opt,name=old_target,json=oldTarget,proto3" json:"old_target,omitempty"`
	Target    int32 `protobuf:"varint,1,opt,name=target,proto3" json:"target,omitempty"`
}

func (m *S2CUpdateGuildPrestigeProto) Reset()         { *m = S2CUpdateGuildPrestigeProto{} }
func (m *S2CUpdateGuildPrestigeProto) String() string { return proto.CompactTextString(m) }
func (*S2CUpdateGuildPrestigeProto) ProtoMessage()    {}
func (*S2CUpdateGuildPrestigeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorGuild, []int{60}
}

func (m *S2CUpdateGuildPrestigeProto) GetOldTarget() int32 {
	if m != nil {
		return m.OldTarget
	}
	return 0
}

func (m *S2CUpdateGuildPrestigeProto) GetTarget() int32 {
	if m != nil {
		return m.Target
	}
	return 0
}

type C2SPlaceGuildStatueProto struct {
	RealmId int32 `protobuf:"varint,1,opt,name=realm_id,json=realmId,proto3" json:"realm_id,omitempty"`
}

func (m *C2SPlaceGuildStatueProto) Reset()                    { *m = C2SPlaceGuildStatueProto{} }
func (m *C2SPlaceGuildStatueProto) String() string            { return proto.CompactTextString(m) }
func (*C2SPlaceGuildStatueProto) ProtoMessage()               {}
func (*C2SPlaceGuildStatueProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{61} }

func (m *C2SPlaceGuildStatueProto) GetRealmId() int32 {
	if m != nil {
		return m.RealmId
	}
	return 0
}

type S2CGuildStatueProto struct {
	RealmId int32 `protobuf:"varint,1,opt,name=realm_id,json=realmId,proto3" json:"realm_id,omitempty"`
}

func (m *S2CGuildStatueProto) Reset()                    { *m = S2CGuildStatueProto{} }
func (m *S2CGuildStatueProto) String() string            { return proto.CompactTextString(m) }
func (*S2CGuildStatueProto) ProtoMessage()               {}
func (*S2CGuildStatueProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{62} }

func (m *S2CGuildStatueProto) GetRealmId() int32 {
	if m != nil {
		return m.RealmId
	}
	return 0
}

type S2CUpdateSeekHelpProto struct {
	HelpType  int32 `protobuf:"varint,1,opt,name=help_type,json=helpType,proto3" json:"help_type,omitempty"`
	WorkerPos int32 `protobuf:"varint,2,opt,name=worker_pos,json=workerPos,proto3" json:"worker_pos,omitempty"`
	Enable    bool  `protobuf:"varint,3,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (m *S2CUpdateSeekHelpProto) Reset()                    { *m = S2CUpdateSeekHelpProto{} }
func (m *S2CUpdateSeekHelpProto) String() string            { return proto.CompactTextString(m) }
func (*S2CUpdateSeekHelpProto) ProtoMessage()               {}
func (*S2CUpdateSeekHelpProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{63} }

func (m *S2CUpdateSeekHelpProto) GetHelpType() int32 {
	if m != nil {
		return m.HelpType
	}
	return 0
}

func (m *S2CUpdateSeekHelpProto) GetWorkerPos() int32 {
	if m != nil {
		return m.WorkerPos
	}
	return 0
}

func (m *S2CUpdateSeekHelpProto) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

type S2CUpdateHelpMemberTimesProto struct {
	DailyHelpMemberTimes int32 `protobuf:"varint,1,opt,name=daily_help_member_times,json=dailyHelpMemberTimes,proto3" json:"daily_help_member_times,omitempty"`
}

func (m *S2CUpdateHelpMemberTimesProto) Reset()         { *m = S2CUpdateHelpMemberTimesProto{} }
func (m *S2CUpdateHelpMemberTimesProto) String() string { return proto.CompactTextString(m) }
func (*S2CUpdateHelpMemberTimesProto) ProtoMessage()    {}
func (*S2CUpdateHelpMemberTimesProto) Descriptor() ([]byte, []int) {
	return fileDescriptorGuild, []int{64}
}

func (m *S2CUpdateHelpMemberTimesProto) GetDailyHelpMemberTimes() int32 {
	if m != nil {
		return m.DailyHelpMemberTimes
	}
	return 0
}

type C2SSeekHelpProto struct {
	HelpType  int32 `protobuf:"varint,1,opt,name=help_type,json=helpType,proto3" json:"help_type,omitempty"`
	WorkerPos int32 `protobuf:"varint,2,opt,name=worker_pos,json=workerPos,proto3" json:"worker_pos,omitempty"`
}

func (m *C2SSeekHelpProto) Reset()                    { *m = C2SSeekHelpProto{} }
func (m *C2SSeekHelpProto) String() string            { return proto.CompactTextString(m) }
func (*C2SSeekHelpProto) ProtoMessage()               {}
func (*C2SSeekHelpProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{65} }

func (m *C2SSeekHelpProto) GetHelpType() int32 {
	if m != nil {
		return m.HelpType
	}
	return 0
}

func (m *C2SSeekHelpProto) GetWorkerPos() int32 {
	if m != nil {
		return m.WorkerPos
	}
	return 0
}

type S2CSeekHelpProto struct {
	HelpType  int32 `protobuf:"varint,1,opt,name=help_type,json=helpType,proto3" json:"help_type,omitempty"`
	WorkerPos int32 `protobuf:"varint,2,opt,name=worker_pos,json=workerPos,proto3" json:"worker_pos,omitempty"`
}

func (m *S2CSeekHelpProto) Reset()                    { *m = S2CSeekHelpProto{} }
func (m *S2CSeekHelpProto) String() string            { return proto.CompactTextString(m) }
func (*S2CSeekHelpProto) ProtoMessage()               {}
func (*S2CSeekHelpProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{66} }

func (m *S2CSeekHelpProto) GetHelpType() int32 {
	if m != nil {
		return m.HelpType
	}
	return 0
}

func (m *S2CSeekHelpProto) GetWorkerPos() int32 {
	if m != nil {
		return m.WorkerPos
	}
	return 0
}

type S2CAddGuildSeekHelpProto struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *S2CAddGuildSeekHelpProto) Reset()                    { *m = S2CAddGuildSeekHelpProto{} }
func (m *S2CAddGuildSeekHelpProto) String() string            { return proto.CompactTextString(m) }
func (*S2CAddGuildSeekHelpProto) ProtoMessage()               {}
func (*S2CAddGuildSeekHelpProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{67} }

func (m *S2CAddGuildSeekHelpProto) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type C2SHelpGuildMemberProto struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SHelpGuildMemberProto) Reset()                    { *m = C2SHelpGuildMemberProto{} }
func (m *C2SHelpGuildMemberProto) String() string            { return proto.CompactTextString(m) }
func (*C2SHelpGuildMemberProto) ProtoMessage()               {}
func (*C2SHelpGuildMemberProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{68} }

func (m *C2SHelpGuildMemberProto) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type S2CHelpGuildMemberProto struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *S2CHelpGuildMemberProto) Reset()                    { *m = S2CHelpGuildMemberProto{} }
func (m *S2CHelpGuildMemberProto) String() string            { return proto.CompactTextString(m) }
func (*S2CHelpGuildMemberProto) ProtoMessage()               {}
func (*S2CHelpGuildMemberProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{69} }

func (m *S2CHelpGuildMemberProto) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type S2CHelpAllGuildMemberProto struct {
	Ids []string `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
}

func (m *S2CHelpAllGuildMemberProto) Reset()                    { *m = S2CHelpAllGuildMemberProto{} }
func (m *S2CHelpAllGuildMemberProto) String() string            { return proto.CompactTextString(m) }
func (*S2CHelpAllGuildMemberProto) ProtoMessage()               {}
func (*S2CHelpAllGuildMemberProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{70} }

func (m *S2CHelpAllGuildMemberProto) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

type S2CAddGuildSeekHelpHeroIdsProto struct {
	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	HelpHeroId []byte `protobuf:"bytes,2,opt,name=help_hero_id,json=helpHeroId,proto3" json:"help_hero_id,omitempty"`
}

func (m *S2CAddGuildSeekHelpHeroIdsProto) Reset()         { *m = S2CAddGuildSeekHelpHeroIdsProto{} }
func (m *S2CAddGuildSeekHelpHeroIdsProto) String() string { return proto.CompactTextString(m) }
func (*S2CAddGuildSeekHelpHeroIdsProto) ProtoMessage()    {}
func (*S2CAddGuildSeekHelpHeroIdsProto) Descriptor() ([]byte, []int) {
	return fileDescriptorGuild, []int{71}
}

func (m *S2CAddGuildSeekHelpHeroIdsProto) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *S2CAddGuildSeekHelpHeroIdsProto) GetHelpHeroId() []byte {
	if m != nil {
		return m.HelpHeroId
	}
	return nil
}

type S2CRemoveGuildSeekHelpProto struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *S2CRemoveGuildSeekHelpProto) Reset()         { *m = S2CRemoveGuildSeekHelpProto{} }
func (m *S2CRemoveGuildSeekHelpProto) String() string { return proto.CompactTextString(m) }
func (*S2CRemoveGuildSeekHelpProto) ProtoMessage()    {}
func (*S2CRemoveGuildSeekHelpProto) Descriptor() ([]byte, []int) {
	return fileDescriptorGuild, []int{72}
}

func (m *S2CRemoveGuildSeekHelpProto) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type S2CListGuildSeekHelpProto struct {
	Data [][]byte `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
}

func (m *S2CListGuildSeekHelpProto) Reset()                    { *m = S2CListGuildSeekHelpProto{} }
func (m *S2CListGuildSeekHelpProto) String() string            { return proto.CompactTextString(m) }
func (*S2CListGuildSeekHelpProto) ProtoMessage()               {}
func (*S2CListGuildSeekHelpProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{73} }

func (m *S2CListGuildSeekHelpProto) GetData() [][]byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type S2CListGuildEventPrizeProto struct {
	Id         []int32  `protobuf:"varint,1,rep,name=id" json:"id,omitempty"`
	DataId     []int32  `protobuf:"varint,2,rep,name=data_id,json=dataId" json:"data_id,omitempty"`
	ExpireTime []int32  `protobuf:"varint,3,rep,name=expire_time,json=expireTime" json:"expire_time,omitempty"`
	HeroId     [][]byte `protobuf:"bytes,4,rep,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	HeroName   []string `protobuf:"bytes,5,rep,name=hero_name,json=heroName" json:"hero_name,omitempty"`
}

func (m *S2CListGuildEventPrizeProto) Reset()         { *m = S2CListGuildEventPrizeProto{} }
func (m *S2CListGuildEventPrizeProto) String() string { return proto.CompactTextString(m) }
func (*S2CListGuildEventPrizeProto) ProtoMessage()    {}
func (*S2CListGuildEventPrizeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorGuild, []int{74}
}

func (m *S2CListGuildEventPrizeProto) GetId() []int32 {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *S2CListGuildEventPrizeProto) GetDataId() []int32 {
	if m != nil {
		return m.DataId
	}
	return nil
}

func (m *S2CListGuildEventPrizeProto) GetExpireTime() []int32 {
	if m != nil {
		return m.ExpireTime
	}
	return nil
}

func (m *S2CListGuildEventPrizeProto) GetHeroId() [][]byte {
	if m != nil {
		return m.HeroId
	}
	return nil
}

func (m *S2CListGuildEventPrizeProto) GetHeroName() []string {
	if m != nil {
		return m.HeroName
	}
	return nil
}

type S2CAddGuildEventPrizeProto struct {
	Id         int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DataId     int32  `protobuf:"varint,2,opt,name=data_id,json=dataId,proto3" json:"data_id,omitempty"`
	ExpireTime int32  `protobuf:"varint,3,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	HeroId     []byte `protobuf:"bytes,4,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
	HeroName   string `protobuf:"bytes,5,opt,name=hero_name,json=heroName,proto3" json:"hero_name,omitempty"`
}

func (m *S2CAddGuildEventPrizeProto) Reset()                    { *m = S2CAddGuildEventPrizeProto{} }
func (m *S2CAddGuildEventPrizeProto) String() string            { return proto.CompactTextString(m) }
func (*S2CAddGuildEventPrizeProto) ProtoMessage()               {}
func (*S2CAddGuildEventPrizeProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{75} }

func (m *S2CAddGuildEventPrizeProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *S2CAddGuildEventPrizeProto) GetDataId() int32 {
	if m != nil {
		return m.DataId
	}
	return 0
}

func (m *S2CAddGuildEventPrizeProto) GetExpireTime() int32 {
	if m != nil {
		return m.ExpireTime
	}
	return 0
}

func (m *S2CAddGuildEventPrizeProto) GetHeroId() []byte {
	if m != nil {
		return m.HeroId
	}
	return nil
}

func (m *S2CAddGuildEventPrizeProto) GetHeroName() string {
	if m != nil {
		return m.HeroName
	}
	return ""
}

type S2CRemoveGuildEventPrizeProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *S2CRemoveGuildEventPrizeProto) Reset()         { *m = S2CRemoveGuildEventPrizeProto{} }
func (m *S2CRemoveGuildEventPrizeProto) String() string { return proto.CompactTextString(m) }
func (*S2CRemoveGuildEventPrizeProto) ProtoMessage()    {}
func (*S2CRemoveGuildEventPrizeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorGuild, []int{76}
}

func (m *S2CRemoveGuildEventPrizeProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type C2SCollectGuildEventPrizeProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SCollectGuildEventPrizeProto) Reset()         { *m = C2SCollectGuildEventPrizeProto{} }
func (m *C2SCollectGuildEventPrizeProto) String() string { return proto.CompactTextString(m) }
func (*C2SCollectGuildEventPrizeProto) ProtoMessage()    {}
func (*C2SCollectGuildEventPrizeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorGuild, []int{77}
}

func (m *C2SCollectGuildEventPrizeProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type S2CCollectGuildEventPrizeProto struct {
	Id        int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NewEnergy int32  `protobuf:"varint,2,opt,name=new_energy,json=newEnergy,proto3" json:"new_energy,omitempty"`
	AddEnergy int32  `protobuf:"varint,4,opt,name=add_energy,json=addEnergy,proto3" json:"add_energy,omitempty"`
	Prize     []byte `protobuf:"bytes,3,opt,name=prize,proto3" json:"prize,omitempty"`
}

func (m *S2CCollectGuildEventPrizeProto) Reset()         { *m = S2CCollectGuildEventPrizeProto{} }
func (m *S2CCollectGuildEventPrizeProto) String() string { return proto.CompactTextString(m) }
func (*S2CCollectGuildEventPrizeProto) ProtoMessage()    {}
func (*S2CCollectGuildEventPrizeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorGuild, []int{78}
}

func (m *S2CCollectGuildEventPrizeProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *S2CCollectGuildEventPrizeProto) GetNewEnergy() int32 {
	if m != nil {
		return m.NewEnergy
	}
	return 0
}

func (m *S2CCollectGuildEventPrizeProto) GetAddEnergy() int32 {
	if m != nil {
		return m.AddEnergy
	}
	return 0
}

func (m *S2CCollectGuildEventPrizeProto) GetPrize() []byte {
	if m != nil {
		return m.Prize
	}
	return nil
}

type S2CUpdateFullBigBoxProto struct {
	BoxId       int32 `protobuf:"varint,4,opt,name=box_id,json=boxId,proto3" json:"box_id,omitempty"`
	Collectable bool  `protobuf:"varint,5,opt,name=collectable,proto3" json:"collectable,omitempty"`
	Energy      int32 `protobuf:"varint,3,opt,name=energy,proto3" json:"energy,omitempty"`
}

func (m *S2CUpdateFullBigBoxProto) Reset()                    { *m = S2CUpdateFullBigBoxProto{} }
func (m *S2CUpdateFullBigBoxProto) String() string            { return proto.CompactTextString(m) }
func (*S2CUpdateFullBigBoxProto) ProtoMessage()               {}
func (*S2CUpdateFullBigBoxProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{79} }

func (m *S2CUpdateFullBigBoxProto) GetBoxId() int32 {
	if m != nil {
		return m.BoxId
	}
	return 0
}

func (m *S2CUpdateFullBigBoxProto) GetCollectable() bool {
	if m != nil {
		return m.Collectable
	}
	return false
}

func (m *S2CUpdateFullBigBoxProto) GetEnergy() int32 {
	if m != nil {
		return m.Energy
	}
	return 0
}

type S2CUpdateHeroJoinGuildTimeProto struct {
	JoinGuildTime int32 `protobuf:"varint,1,opt,name=join_guild_time,json=joinGuildTime,proto3" json:"join_guild_time,omitempty"`
}

func (m *S2CUpdateHeroJoinGuildTimeProto) Reset()         { *m = S2CUpdateHeroJoinGuildTimeProto{} }
func (m *S2CUpdateHeroJoinGuildTimeProto) String() string { return proto.CompactTextString(m) }
func (*S2CUpdateHeroJoinGuildTimeProto) ProtoMessage()    {}
func (*S2CUpdateHeroJoinGuildTimeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorGuild, []int{80}
}

func (m *S2CUpdateHeroJoinGuildTimeProto) GetJoinGuildTime() int32 {
	if m != nil {
		return m.JoinGuildTime
	}
	return 0
}

type C2SUpgradeTechnologyProto struct {
	Group int32 `protobuf:"varint,1,opt,name=group,proto3" json:"group,omitempty"`
}

func (m *C2SUpgradeTechnologyProto) Reset()                    { *m = C2SUpgradeTechnologyProto{} }
func (m *C2SUpgradeTechnologyProto) String() string            { return proto.CompactTextString(m) }
func (*C2SUpgradeTechnologyProto) ProtoMessage()               {}
func (*C2SUpgradeTechnologyProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{81} }

func (m *C2SUpgradeTechnologyProto) GetGroup() int32 {
	if m != nil {
		return m.Group
	}
	return 0
}

type S2CUpgradeTechnologyProto struct {
	Group   int32 `protobuf:"varint,1,opt,name=group,proto3" json:"group,omitempty"`
	EndTime int32 `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (m *S2CUpgradeTechnologyProto) Reset()                    { *m = S2CUpgradeTechnologyProto{} }
func (m *S2CUpgradeTechnologyProto) String() string            { return proto.CompactTextString(m) }
func (*S2CUpgradeTechnologyProto) ProtoMessage()               {}
func (*S2CUpgradeTechnologyProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{82} }

func (m *S2CUpgradeTechnologyProto) GetGroup() int32 {
	if m != nil {
		return m.Group
	}
	return 0
}

func (m *S2CUpgradeTechnologyProto) GetEndTime() int32 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

type C2SReduceTechnologyCdProto struct {
	Times int32 `protobuf:"varint,1,opt,name=times,proto3" json:"times,omitempty"`
}

func (m *C2SReduceTechnologyCdProto) Reset()                    { *m = C2SReduceTechnologyCdProto{} }
func (m *C2SReduceTechnologyCdProto) String() string            { return proto.CompactTextString(m) }
func (*C2SReduceTechnologyCdProto) ProtoMessage()               {}
func (*C2SReduceTechnologyCdProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{83} }

func (m *C2SReduceTechnologyCdProto) GetTimes() int32 {
	if m != nil {
		return m.Times
	}
	return 0
}

type C2SListGuildLogsProto struct {
	LogType int32 `protobuf:"varint,1,opt,name=log_type,json=logType,proto3" json:"log_type,omitempty"`
	MinId   int32 `protobuf:"varint,2,opt,name=min_id,json=minId,proto3" json:"min_id,omitempty"`
	Count   int32 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *C2SListGuildLogsProto) Reset()                    { *m = C2SListGuildLogsProto{} }
func (m *C2SListGuildLogsProto) String() string            { return proto.CompactTextString(m) }
func (*C2SListGuildLogsProto) ProtoMessage()               {}
func (*C2SListGuildLogsProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{84} }

func (m *C2SListGuildLogsProto) GetLogType() int32 {
	if m != nil {
		return m.LogType
	}
	return 0
}

func (m *C2SListGuildLogsProto) GetMinId() int32 {
	if m != nil {
		return m.MinId
	}
	return 0
}

func (m *C2SListGuildLogsProto) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type S2CListGuildLogsProto struct {
	Data [][]byte `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
}

func (m *S2CListGuildLogsProto) Reset()                    { *m = S2CListGuildLogsProto{} }
func (m *S2CListGuildLogsProto) String() string            { return proto.CompactTextString(m) }
func (*S2CListGuildLogsProto) ProtoMessage()               {}
func (*S2CListGuildLogsProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{85} }

func (m *S2CListGuildLogsProto) GetData() [][]byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type S2CAddGuildLogProto struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *S2CAddGuildLogProto) Reset()                    { *m = S2CAddGuildLogProto{} }
func (m *S2CAddGuildLogProto) String() string            { return proto.CompactTextString(m) }
func (*S2CAddGuildLogProto) ProtoMessage()               {}
func (*S2CAddGuildLogProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{86} }

func (m *S2CAddGuildLogProto) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type S2CRequestRecommendGuildProto struct {
	Has                 bool   `protobuf:"varint,1,opt,name=has,proto3" json:"has,omitempty"`
	NextNotifyGuildTime int32  `protobuf:"varint,2,opt,name=next_notify_guild_time,json=nextNotifyGuildTime,proto3" json:"next_notify_guild_time,omitempty"`
	Id                  int32  `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	Name                string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Flag                string `protobuf:"bytes,5,opt,name=flag,proto3" json:"flag,omitempty"`
	Country             int32  `protobuf:"varint,6,opt,name=country,proto3" json:"country,omitempty"`
}

func (m *S2CRequestRecommendGuildProto) Reset()         { *m = S2CRequestRecommendGuildProto{} }
func (m *S2CRequestRecommendGuildProto) String() string { return proto.CompactTextString(m) }
func (*S2CRequestRecommendGuildProto) ProtoMessage()    {}
func (*S2CRequestRecommendGuildProto) Descriptor() ([]byte, []int) {
	return fileDescriptorGuild, []int{87}
}

func (m *S2CRequestRecommendGuildProto) GetHas() bool {
	if m != nil {
		return m.Has
	}
	return false
}

func (m *S2CRequestRecommendGuildProto) GetNextNotifyGuildTime() int32 {
	if m != nil {
		return m.NextNotifyGuildTime
	}
	return 0
}

func (m *S2CRequestRecommendGuildProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *S2CRequestRecommendGuildProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *S2CRequestRecommendGuildProto) GetFlag() string {
	if m != nil {
		return m.Flag
	}
	return ""
}

func (m *S2CRequestRecommendGuildProto) GetCountry() int32 {
	if m != nil {
		return m.Country
	}
	return 0
}

type S2CPushTechHelpableProto struct {
	Helpable bool `protobuf:"varint,1,opt,name=helpable,proto3" json:"helpable,omitempty"`
}

func (m *S2CPushTechHelpableProto) Reset()                    { *m = S2CPushTechHelpableProto{} }
func (m *S2CPushTechHelpableProto) String() string            { return proto.CompactTextString(m) }
func (*S2CPushTechHelpableProto) ProtoMessage()               {}
func (*S2CPushTechHelpableProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{88} }

func (m *S2CPushTechHelpableProto) GetHelpable() bool {
	if m != nil {
		return m.Helpable
	}
	return false
}

type S2CHelpTechProto struct {
	Tech int32 `protobuf:"varint,1,opt,name=tech,proto3" json:"tech,omitempty"`
}

func (m *S2CHelpTechProto) Reset()                    { *m = S2CHelpTechProto{} }
func (m *S2CHelpTechProto) String() string            { return proto.CompactTextString(m) }
func (*S2CHelpTechProto) ProtoMessage()               {}
func (*S2CHelpTechProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{89} }

func (m *S2CHelpTechProto) GetTech() int32 {
	if m != nil {
		return m.Tech
	}
	return 0
}

type S2CRecommendInviteHerosProto struct {
	Heros []byte `protobuf:"bytes,1,opt,name=heros,proto3" json:"heros,omitempty"`
}

func (m *S2CRecommendInviteHerosProto) Reset()         { *m = S2CRecommendInviteHerosProto{} }
func (m *S2CRecommendInviteHerosProto) String() string { return proto.CompactTextString(m) }
func (*S2CRecommendInviteHerosProto) ProtoMessage()    {}
func (*S2CRecommendInviteHerosProto) Descriptor() ([]byte, []int) {
	return fileDescriptorGuild, []int{90}
}

func (m *S2CRecommendInviteHerosProto) GetHeros() []byte {
	if m != nil {
		return m.Heros
	}
	return nil
}

type C2SSearchNoGuildHerosProto struct {
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Page int32  `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
}

func (m *C2SSearchNoGuildHerosProto) Reset()                    { *m = C2SSearchNoGuildHerosProto{} }
func (m *C2SSearchNoGuildHerosProto) String() string            { return proto.CompactTextString(m) }
func (*C2SSearchNoGuildHerosProto) ProtoMessage()               {}
func (*C2SSearchNoGuildHerosProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{91} }

func (m *C2SSearchNoGuildHerosProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *C2SSearchNoGuildHerosProto) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type S2CSearchNoGuildHerosProto struct {
	Heros []byte `protobuf:"bytes,1,opt,name=heros,proto3" json:"heros,omitempty"`
}

func (m *S2CSearchNoGuildHerosProto) Reset()                    { *m = S2CSearchNoGuildHerosProto{} }
func (m *S2CSearchNoGuildHerosProto) String() string            { return proto.CompactTextString(m) }
func (*S2CSearchNoGuildHerosProto) ProtoMessage()               {}
func (*S2CSearchNoGuildHerosProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{92} }

func (m *S2CSearchNoGuildHerosProto) GetHeros() []byte {
	if m != nil {
		return m.Heros
	}
	return nil
}

type S2CViewMcWarRecordProto struct {
	Record  *proto8.McWarAllRecordProto           `protobuf:"bytes,1,opt,name=record" json:"record,omitempty"`
	Record2 *proto8.McWarAllRecordWithJoinedProto `protobuf:"bytes,2,opt,name=record2" json:"record2,omitempty"`
}

func (m *S2CViewMcWarRecordProto) Reset()                    { *m = S2CViewMcWarRecordProto{} }
func (m *S2CViewMcWarRecordProto) String() string            { return proto.CompactTextString(m) }
func (*S2CViewMcWarRecordProto) ProtoMessage()               {}
func (*S2CViewMcWarRecordProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{93} }

func (m *S2CViewMcWarRecordProto) GetRecord() *proto8.McWarAllRecordProto {
	if m != nil {
		return m.Record
	}
	return nil
}

func (m *S2CViewMcWarRecordProto) GetRecord2() *proto8.McWarAllRecordWithJoinedProto {
	if m != nil {
		return m.Record2
	}
	return nil
}

type C2SUpdateGuildMarkProto struct {
	Index int32  `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	PosX  int32  `protobuf:"varint,3,opt,name=pos_x,json=posX,proto3" json:"pos_x,omitempty"`
	PosY  int32  `protobuf:"varint,4,opt,name=pos_y,json=posY,proto3" json:"pos_y,omitempty"`
	Msg   string `protobuf:"bytes,5,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *C2SUpdateGuildMarkProto) Reset()                    { *m = C2SUpdateGuildMarkProto{} }
func (m *C2SUpdateGuildMarkProto) String() string            { return proto.CompactTextString(m) }
func (*C2SUpdateGuildMarkProto) ProtoMessage()               {}
func (*C2SUpdateGuildMarkProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{94} }

func (m *C2SUpdateGuildMarkProto) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *C2SUpdateGuildMarkProto) GetPosX() int32 {
	if m != nil {
		return m.PosX
	}
	return 0
}

func (m *C2SUpdateGuildMarkProto) GetPosY() int32 {
	if m != nil {
		return m.PosY
	}
	return 0
}

func (m *C2SUpdateGuildMarkProto) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type S2CUpdateGuildMarkProto struct {
	Mark *proto8.GuildMarkProto `protobuf:"bytes,1,opt,name=mark" json:"mark,omitempty"`
}

func (m *S2CUpdateGuildMarkProto) Reset()                    { *m = S2CUpdateGuildMarkProto{} }
func (m *S2CUpdateGuildMarkProto) String() string            { return proto.CompactTextString(m) }
func (*S2CUpdateGuildMarkProto) ProtoMessage()               {}
func (*S2CUpdateGuildMarkProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{95} }

func (m *S2CUpdateGuildMarkProto) GetMark() *proto8.GuildMarkProto {
	if m != nil {
		return m.Mark
	}
	return nil
}

type S2CViewYinliangRecordProto struct {
	Record *proto8.GuildAllYinliangRecordProto `protobuf:"bytes,1,opt,name=record" json:"record,omitempty"`
}

func (m *S2CViewYinliangRecordProto) Reset()                    { *m = S2CViewYinliangRecordProto{} }
func (m *S2CViewYinliangRecordProto) String() string            { return proto.CompactTextString(m) }
func (*S2CViewYinliangRecordProto) ProtoMessage()               {}
func (*S2CViewYinliangRecordProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{96} }

func (m *S2CViewYinliangRecordProto) GetRecord() *proto8.GuildAllYinliangRecordProto {
	if m != nil {
		return m.Record
	}
	return nil
}

type C2SSendYinliangToOtherGuildProto struct {
	Gid    int32 `protobuf:"varint,1,opt,name=gid,proto3" json:"gid,omitempty"`
	Amount int32 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *C2SSendYinliangToOtherGuildProto) Reset()         { *m = C2SSendYinliangToOtherGuildProto{} }
func (m *C2SSendYinliangToOtherGuildProto) String() string { return proto.CompactTextString(m) }
func (*C2SSendYinliangToOtherGuildProto) ProtoMessage()    {}
func (*C2SSendYinliangToOtherGuildProto) Descriptor() ([]byte, []int) {
	return fileDescriptorGuild, []int{97}
}

func (m *C2SSendYinliangToOtherGuildProto) GetGid() int32 {
	if m != nil {
		return m.Gid
	}
	return 0
}

func (m *C2SSendYinliangToOtherGuildProto) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type S2CSendYinliangToOtherGuildProto struct {
	Gid    int32 `protobuf:"varint,1,opt,name=gid,proto3" json:"gid,omitempty"`
	Amount int32 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *S2CSendYinliangToOtherGuildProto) Reset()         { *m = S2CSendYinliangToOtherGuildProto{} }
func (m *S2CSendYinliangToOtherGuildProto) String() string { return proto.CompactTextString(m) }
func (*S2CSendYinliangToOtherGuildProto) ProtoMessage()    {}
func (*S2CSendYinliangToOtherGuildProto) Descriptor() ([]byte, []int) {
	return fileDescriptorGuild, []int{98}
}

func (m *S2CSendYinliangToOtherGuildProto) GetGid() int32 {
	if m != nil {
		return m.Gid
	}
	return 0
}

func (m *S2CSendYinliangToOtherGuildProto) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type C2SSendYinliangToMemberProto struct {
	MemId  []byte `protobuf:"bytes,1,opt,name=mem_id,json=memId,proto3" json:"mem_id,omitempty"`
	Amount int32  `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *C2SSendYinliangToMemberProto) Reset()         { *m = C2SSendYinliangToMemberProto{} }
func (m *C2SSendYinliangToMemberProto) String() string { return proto.CompactTextString(m) }
func (*C2SSendYinliangToMemberProto) ProtoMessage()    {}
func (*C2SSendYinliangToMemberProto) Descriptor() ([]byte, []int) {
	return fileDescriptorGuild, []int{99}
}

func (m *C2SSendYinliangToMemberProto) GetMemId() []byte {
	if m != nil {
		return m.MemId
	}
	return nil
}

func (m *C2SSendYinliangToMemberProto) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type S2CSendYinliangToMemberProto struct {
	MemId  []byte `protobuf:"bytes,1,opt,name=mem_id,json=memId,proto3" json:"mem_id,omitempty"`
	Amount int32  `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *S2CSendYinliangToMemberProto) Reset()         { *m = S2CSendYinliangToMemberProto{} }
func (m *S2CSendYinliangToMemberProto) String() string { return proto.CompactTextString(m) }
func (*S2CSendYinliangToMemberProto) ProtoMessage()    {}
func (*S2CSendYinliangToMemberProto) Descriptor() ([]byte, []int) {
	return fileDescriptorGuild, []int{100}
}

func (m *S2CSendYinliangToMemberProto) GetMemId() []byte {
	if m != nil {
		return m.MemId
	}
	return nil
}

func (m *S2CSendYinliangToMemberProto) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type S2CPaySalaryProto struct {
	Amount int32 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *S2CPaySalaryProto) Reset()                    { *m = S2CPaySalaryProto{} }
func (m *S2CPaySalaryProto) String() string            { return proto.CompactTextString(m) }
func (*S2CPaySalaryProto) ProtoMessage()               {}
func (*S2CPaySalaryProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{101} }

func (m *S2CPaySalaryProto) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type C2SSetSalaryProto struct {
	MemId  []byte `protobuf:"bytes,1,opt,name=mem_id,json=memId,proto3" json:"mem_id,omitempty"`
	Salary int32  `protobuf:"varint,2,opt,name=salary,proto3" json:"salary,omitempty"`
}

func (m *C2SSetSalaryProto) Reset()                    { *m = C2SSetSalaryProto{} }
func (m *C2SSetSalaryProto) String() string            { return proto.CompactTextString(m) }
func (*C2SSetSalaryProto) ProtoMessage()               {}
func (*C2SSetSalaryProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{102} }

func (m *C2SSetSalaryProto) GetMemId() []byte {
	if m != nil {
		return m.MemId
	}
	return nil
}

func (m *C2SSetSalaryProto) GetSalary() int32 {
	if m != nil {
		return m.Salary
	}
	return 0
}

type S2CSetSalaryProto struct {
	MemId  []byte `protobuf:"bytes,1,opt,name=mem_id,json=memId,proto3" json:"mem_id,omitempty"`
	Salary int32  `protobuf:"varint,2,opt,name=salary,proto3" json:"salary,omitempty"`
}

func (m *S2CSetSalaryProto) Reset()                    { *m = S2CSetSalaryProto{} }
func (m *S2CSetSalaryProto) String() string            { return proto.CompactTextString(m) }
func (*S2CSetSalaryProto) ProtoMessage()               {}
func (*S2CSetSalaryProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{103} }

func (m *S2CSetSalaryProto) GetMemId() []byte {
	if m != nil {
		return m.MemId
	}
	return nil
}

func (m *S2CSetSalaryProto) GetSalary() int32 {
	if m != nil {
		return m.Salary
	}
	return 0
}

type S2CUpdateHeroGuildProto struct {
	UpdateType int32                   `protobuf:"varint,2,opt,name=update_type,json=updateType,proto3" json:"update_type,omitempty"`
	Data       *proto41.HeroGuildProto `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *S2CUpdateHeroGuildProto) Reset()                    { *m = S2CUpdateHeroGuildProto{} }
func (m *S2CUpdateHeroGuildProto) String() string            { return proto.CompactTextString(m) }
func (*S2CUpdateHeroGuildProto) ProtoMessage()               {}
func (*S2CUpdateHeroGuildProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{104} }

func (m *S2CUpdateHeroGuildProto) GetUpdateType() int32 {
	if m != nil {
		return m.UpdateType
	}
	return 0
}

func (m *S2CUpdateHeroGuildProto) GetData() *proto41.HeroGuildProto {
	if m != nil {
		return m.Data
	}
	return nil
}

type S2CViewSendYinliangToGuildProto struct {
	Guilds *proto8.GuildAllYinliangSendToGuildProto `protobuf:"bytes,1,opt,name=guilds" json:"guilds,omitempty"`
}

func (m *S2CViewSendYinliangToGuildProto) Reset()         { *m = S2CViewSendYinliangToGuildProto{} }
func (m *S2CViewSendYinliangToGuildProto) String() string { return proto.CompactTextString(m) }
func (*S2CViewSendYinliangToGuildProto) ProtoMessage()    {}
func (*S2CViewSendYinliangToGuildProto) Descriptor() ([]byte, []int) {
	return fileDescriptorGuild, []int{105}
}

func (m *S2CViewSendYinliangToGuildProto) GetGuilds() *proto8.GuildAllYinliangSendToGuildProto {
	if m != nil {
		return m.Guilds
	}
	return nil
}

type S2CUpdateHufuProto struct {
	Hufu int32 `protobuf:"varint,1,opt,name=hufu,proto3" json:"hufu,omitempty"`
}

func (m *S2CUpdateHufuProto) Reset()                    { *m = S2CUpdateHufuProto{} }
func (m *S2CUpdateHufuProto) String() string            { return proto.CompactTextString(m) }
func (*S2CUpdateHufuProto) ProtoMessage()               {}
func (*S2CUpdateHufuProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{106} }

func (m *S2CUpdateHufuProto) GetHufu() int32 {
	if m != nil {
		return m.Hufu
	}
	return 0
}

type C2SConveneProto struct {
	Target []byte `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
}

func (m *C2SConveneProto) Reset()                    { *m = C2SConveneProto{} }
func (m *C2SConveneProto) String() string            { return proto.CompactTextString(m) }
func (*C2SConveneProto) ProtoMessage()               {}
func (*C2SConveneProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{107} }

func (m *C2SConveneProto) GetTarget() []byte {
	if m != nil {
		return m.Target
	}
	return nil
}

type S2CConveneProto struct {
	Target []byte `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
}

func (m *S2CConveneProto) Reset()                    { *m = S2CConveneProto{} }
func (m *S2CConveneProto) String() string            { return proto.CompactTextString(m) }
func (*S2CConveneProto) ProtoMessage()               {}
func (*S2CConveneProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{108} }

func (m *S2CConveneProto) GetTarget() []byte {
	if m != nil {
		return m.Target
	}
	return nil
}

type S2CCollectDailyGuildRankPrizeProto struct {
	Prize []byte `protobuf:"bytes,1,opt,name=prize,proto3" json:"prize,omitempty"`
}

func (m *S2CCollectDailyGuildRankPrizeProto) Reset()         { *m = S2CCollectDailyGuildRankPrizeProto{} }
func (m *S2CCollectDailyGuildRankPrizeProto) String() string { return proto.CompactTextString(m) }
func (*S2CCollectDailyGuildRankPrizeProto) ProtoMessage()    {}
func (*S2CCollectDailyGuildRankPrizeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorGuild, []int{109}
}

func (m *S2CCollectDailyGuildRankPrizeProto) GetPrize() []byte {
	if m != nil {
		return m.Prize
	}
	return nil
}

type S2CViewDailyGuildRankProto struct {
	Rank *proto43.RankProto `protobuf:"bytes,2,opt,name=rank" json:"rank,omitempty"`
}

func (m *S2CViewDailyGuildRankProto) Reset()         { *m = S2CViewDailyGuildRankProto{} }
func (m *S2CViewDailyGuildRankProto) String() string { return proto.CompactTextString(m) }
func (*S2CViewDailyGuildRankProto) ProtoMessage()    {}
func (*S2CViewDailyGuildRankProto) Descriptor() ([]byte, []int) {
	return fileDescriptorGuild, []int{110}
}

func (m *S2CViewDailyGuildRankProto) GetRank() *proto43.RankProto {
	if m != nil {
		return m.Rank
	}
	return nil
}

type S2CViewLastGuildRankProto struct {
	Rank int32 `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`
}

func (m *S2CViewLastGuildRankProto) Reset()                    { *m = S2CViewLastGuildRankProto{} }
func (m *S2CViewLastGuildRankProto) String() string            { return proto.CompactTextString(m) }
func (*S2CViewLastGuildRankProto) ProtoMessage()               {}
func (*S2CViewLastGuildRankProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{111} }

func (m *S2CViewLastGuildRankProto) GetRank() int32 {
	if m != nil {
		return m.Rank
	}
	return 0
}

type C2SAddRecommendMcBuildProto struct {
	McId int32 `protobuf:"varint,1,opt,name=mc_id,json=mcId,proto3" json:"mc_id,omitempty"`
}

func (m *C2SAddRecommendMcBuildProto) Reset()         { *m = C2SAddRecommendMcBuildProto{} }
func (m *C2SAddRecommendMcBuildProto) String() string { return proto.CompactTextString(m) }
func (*C2SAddRecommendMcBuildProto) ProtoMessage()    {}
func (*C2SAddRecommendMcBuildProto) Descriptor() ([]byte, []int) {
	return fileDescriptorGuild, []int{112}
}

func (m *C2SAddRecommendMcBuildProto) GetMcId() int32 {
	if m != nil {
		return m.McId
	}
	return 0
}

type S2CAddRecommendMcBuildProto struct {
	NewMcIds []int32 `protobuf:"varint,1,rep,name=new_mc_ids,json=newMcIds" json:"new_mc_ids,omitempty"`
}

func (m *S2CAddRecommendMcBuildProto) Reset()         { *m = S2CAddRecommendMcBuildProto{} }
func (m *S2CAddRecommendMcBuildProto) String() string { return proto.CompactTextString(m) }
func (*S2CAddRecommendMcBuildProto) ProtoMessage()    {}
func (*S2CAddRecommendMcBuildProto) Descriptor() ([]byte, []int) {
	return fileDescriptorGuild, []int{113}
}

func (m *S2CAddRecommendMcBuildProto) GetNewMcIds() []int32 {
	if m != nil {
		return m.NewMcIds
	}
	return nil
}

type C2SViewTaskProgressProto struct {
	Version int32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *C2SViewTaskProgressProto) Reset()                    { *m = C2SViewTaskProgressProto{} }
func (m *C2SViewTaskProgressProto) String() string            { return proto.CompactTextString(m) }
func (*C2SViewTaskProgressProto) ProtoMessage()               {}
func (*C2SViewTaskProgressProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{114} }

func (m *C2SViewTaskProgressProto) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type S2CViewTaskProgressProto struct {
	Version  int32               `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Progress []*proto1.Int32Pair `protobuf:"bytes,2,rep,name=progress" json:"progress,omitempty"`
}

func (m *S2CViewTaskProgressProto) Reset()                    { *m = S2CViewTaskProgressProto{} }
func (m *S2CViewTaskProgressProto) String() string            { return proto.CompactTextString(m) }
func (*S2CViewTaskProgressProto) ProtoMessage()               {}
func (*S2CViewTaskProgressProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{115} }

func (m *S2CViewTaskProgressProto) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *S2CViewTaskProgressProto) GetProgress() []*proto1.Int32Pair {
	if m != nil {
		return m.Progress
	}
	return nil
}

type S2CNoticeTaskStageUpdateProto struct {
	TaskId int32 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Stage  int32 `protobuf:"varint,2,opt,name=stage,proto3" json:"stage,omitempty"`
}

func (m *S2CNoticeTaskStageUpdateProto) Reset()         { *m = S2CNoticeTaskStageUpdateProto{} }
func (m *S2CNoticeTaskStageUpdateProto) String() string { return proto.CompactTextString(m) }
func (*S2CNoticeTaskStageUpdateProto) ProtoMessage()    {}
func (*S2CNoticeTaskStageUpdateProto) Descriptor() ([]byte, []int) {
	return fileDescriptorGuild, []int{116}
}

func (m *S2CNoticeTaskStageUpdateProto) GetTaskId() int32 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *S2CNoticeTaskStageUpdateProto) GetStage() int32 {
	if m != nil {
		return m.Stage
	}
	return 0
}

type C2SCollectTaskPrizeProto struct {
	TaskId int32 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Stage  int32 `protobuf:"varint,2,opt,name=stage,proto3" json:"stage,omitempty"`
}

func (m *C2SCollectTaskPrizeProto) Reset()                    { *m = C2SCollectTaskPrizeProto{} }
func (m *C2SCollectTaskPrizeProto) String() string            { return proto.CompactTextString(m) }
func (*C2SCollectTaskPrizeProto) ProtoMessage()               {}
func (*C2SCollectTaskPrizeProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{117} }

func (m *C2SCollectTaskPrizeProto) GetTaskId() int32 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *C2SCollectTaskPrizeProto) GetStage() int32 {
	if m != nil {
		return m.Stage
	}
	return 0
}

type S2CCollectTaskPrizeProto struct {
	TaskId int32 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Stage  int32 `protobuf:"varint,2,opt,name=stage,proto3" json:"stage,omitempty"`
}

func (m *S2CCollectTaskPrizeProto) Reset()                    { *m = S2CCollectTaskPrizeProto{} }
func (m *S2CCollectTaskPrizeProto) String() string            { return proto.CompactTextString(m) }
func (*S2CCollectTaskPrizeProto) ProtoMessage()               {}
func (*S2CCollectTaskPrizeProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{118} }

func (m *S2CCollectTaskPrizeProto) GetTaskId() int32 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *S2CCollectTaskPrizeProto) GetStage() int32 {
	if m != nil {
		return m.Stage
	}
	return 0
}

type C2SGuildChangeCountryProto struct {
	Country int32 `protobuf:"varint,1,opt,name=country,proto3" json:"country,omitempty"`
}

func (m *C2SGuildChangeCountryProto) Reset()         { *m = C2SGuildChangeCountryProto{} }
func (m *C2SGuildChangeCountryProto) String() string { return proto.CompactTextString(m) }
func (*C2SGuildChangeCountryProto) ProtoMessage()    {}
func (*C2SGuildChangeCountryProto) Descriptor() ([]byte, []int) {
	return fileDescriptorGuild, []int{119}
}

func (m *C2SGuildChangeCountryProto) GetCountry() int32 {
	if m != nil {
		return m.Country
	}
	return 0
}

type S2CGuildChangeCountryProto struct {
	Country int32 `protobuf:"varint,1,opt,name=country,proto3" json:"country,omitempty"`
}

func (m *S2CGuildChangeCountryProto) Reset()         { *m = S2CGuildChangeCountryProto{} }
func (m *S2CGuildChangeCountryProto) String() string { return proto.CompactTextString(m) }
func (*S2CGuildChangeCountryProto) ProtoMessage()    {}
func (*S2CGuildChangeCountryProto) Descriptor() ([]byte, []int) {
	return fileDescriptorGuild, []int{120}
}

func (m *S2CGuildChangeCountryProto) GetCountry() int32 {
	if m != nil {
		return m.Country
	}
	return 0
}

type S2CShowWorkshopNotExistProto struct {
	Show bool `protobuf:"varint,1,opt,name=show,proto3" json:"show,omitempty"`
}

func (m *S2CShowWorkshopNotExistProto) Reset()         { *m = S2CShowWorkshopNotExistProto{} }
func (m *S2CShowWorkshopNotExistProto) String() string { return proto.CompactTextString(m) }
func (*S2CShowWorkshopNotExistProto) ProtoMessage()    {}
func (*S2CShowWorkshopNotExistProto) Descriptor() ([]byte, []int) {
	return fileDescriptorGuild, []int{121}
}

func (m *S2CShowWorkshopNotExistProto) GetShow() bool {
	if m != nil {
		return m.Show
	}
	return false
}

func init() {
	proto.RegisterType((*S2CListGuildProto)(nil), "proto.S2CListGuildProto")
	proto.RegisterType((*C2SSearchGuildProto)(nil), "proto.C2SSearchGuildProto")
	proto.RegisterType((*S2CSearchGuildProto)(nil), "proto.S2CSearchGuildProto")
	proto.RegisterType((*C2SCreateGuildProto)(nil), "proto.C2SCreateGuildProto")
	proto.RegisterType((*S2CCreateGuildProto)(nil), "proto.S2CCreateGuildProto")
	proto.RegisterType((*C2SSelfGuildProto)(nil), "proto.C2SSelfGuildProto")
	proto.RegisterType((*S2CSelfGuildProto)(nil), "proto.S2CSelfGuildProto")
	proto.RegisterType((*S2CLeaveGuildForOtherProto)(nil), "proto.S2CLeaveGuildForOtherProto")
	proto.RegisterType((*C2SKickOtherProto)(nil), "proto.C2SKickOtherProto")
	proto.RegisterType((*S2CKickOtherProto)(nil), "proto.S2CKickOtherProto")
	proto.RegisterType((*C2SUpdateTextProto)(nil), "proto.C2SUpdateTextProto")
	proto.RegisterType((*S2CUpdateTextProto)(nil), "proto.S2CUpdateTextProto")
	proto.RegisterType((*C2SUpdateInternalTextProto)(nil), "proto.C2SUpdateInternalTextProto")
	proto.RegisterType((*S2CUpdateInternalTextProto)(nil), "proto.S2CUpdateInternalTextProto")
	proto.RegisterType((*C2SUpdateClassNamesProto)(nil), "proto.C2SUpdateClassNamesProto")
	proto.RegisterType((*S2CUpdateClassNamesProto)(nil), "proto.S2CUpdateClassNamesProto")
	proto.RegisterType((*C2SUpdateClassTitleProto)(nil), "proto.C2SUpdateClassTitleProto")
	proto.RegisterType((*C2SUpdateFlagTypeProto)(nil), "proto.C2SUpdateFlagTypeProto")
	proto.RegisterType((*S2CUpdateFlagTypeProto)(nil), "proto.S2CUpdateFlagTypeProto")
	proto.RegisterType((*C2SUpdateMemberClassLevelProto)(nil), "proto.C2SUpdateMemberClassLevelProto")
	proto.RegisterType((*S2CUpdateMemberClassLevelProto)(nil), "proto.S2CUpdateMemberClassLevelProto")
	proto.RegisterType((*S2CUpdateSelfClassLevelProto)(nil), "proto.S2CUpdateSelfClassLevelProto")
	proto.RegisterType((*C2SUpdateJoinConditionProto)(nil), "proto.C2SUpdateJoinConditionProto")
	proto.RegisterType((*S2CUpdateJoinConditionProto)(nil), "proto.S2CUpdateJoinConditionProto")
	proto.RegisterType((*C2SUpdateGuildNameProto)(nil), "proto.C2SUpdateGuildNameProto")
	proto.RegisterType((*S2CUpdateGuildNameProto)(nil), "proto.S2CUpdateGuildNameProto")
	proto.RegisterType((*S2CUpdateGuildNameBroadcastProto)(nil), "proto.S2CUpdateGuildNameBroadcastProto")
	proto.RegisterType((*C2SUpdateGuildLabelProto)(nil), "proto.C2SUpdateGuildLabelProto")
	proto.RegisterType((*S2CUpdateGuildLabelProto)(nil), "proto.S2CUpdateGuildLabelProto")
	proto.RegisterType((*S2CUpdateContributionCoinProto)(nil), "proto.S2CUpdateContributionCoinProto")
	proto.RegisterType((*C2SDonateProto)(nil), "proto.C2SDonateProto")
	proto.RegisterType((*S2CDonateProto)(nil), "proto.S2CDonateProto")
	proto.RegisterType((*C2SReduceUpgradeLevelCdProto)(nil), "proto.C2SReduceUpgradeLevelCdProto")
	proto.RegisterType((*C2SImpeachLeaderVoteProto)(nil), "proto.C2SImpeachLeaderVoteProto")
	proto.RegisterType((*S2CImpeachLeaderVoteProto)(nil), "proto.S2CImpeachLeaderVoteProto")
	proto.RegisterType((*C2SListGuildByIdsProto)(nil), "proto.C2SListGuildByIdsProto")
	proto.RegisterType((*S2CListGuildByIdsProto)(nil), "proto.S2CListGuildByIdsProto")
	proto.RegisterType((*C2SUserRequestJoinProto)(nil), "proto.C2SUserRequestJoinProto")
	proto.RegisterType((*S2CUserRequestJoinProto)(nil), "proto.S2CUserRequestJoinProto")
	proto.RegisterType((*S2CUserRemoveJoinRequestProto)(nil), "proto.S2CUserRemoveJoinRequestProto")
	proto.RegisterType((*C2SUserCancelJoinRequestProto)(nil), "proto.C2SUserCancelJoinRequestProto")
	proto.RegisterType((*S2CUserCancelJoinRequestProto)(nil), "proto.S2CUserCancelJoinRequestProto")
	proto.RegisterType((*S2CAddGuildMemberProto)(nil), "proto.S2CAddGuildMemberProto")
	proto.RegisterType((*S2CUserJoinedProto)(nil), "proto.S2CUserJoinedProto")
	proto.RegisterType((*C2SGuildReplyJoinRequestProto)(nil), "proto.C2SGuildReplyJoinRequestProto")
	proto.RegisterType((*S2CGuildReplyJoinRequestProto)(nil), "proto.S2CGuildReplyJoinRequestProto")
	proto.RegisterType((*C2SGuildInvateOtherProto)(nil), "proto.C2SGuildInvateOtherProto")
	proto.RegisterType((*S2CGuildInvateOtherProto)(nil), "proto.S2CGuildInvateOtherProto")
	proto.RegisterType((*C2SGuildCancelInvateOtherProto)(nil), "proto.C2SGuildCancelInvateOtherProto")
	proto.RegisterType((*S2CGuildCancelInvateOtherProto)(nil), "proto.S2CGuildCancelInvateOtherProto")
	proto.RegisterType((*S2CUserAddBeenInvateGuildProto)(nil), "proto.S2CUserAddBeenInvateGuildProto")
	proto.RegisterType((*S2CUserRemoveBeenInvateGuildProto)(nil), "proto.S2CUserRemoveBeenInvateGuildProto")
	proto.RegisterType((*C2SUserReplyInvateRequestProto)(nil), "proto.C2SUserReplyInvateRequestProto")
	proto.RegisterType((*S2CUserReplyInvateRequestProto)(nil), "proto.S2CUserReplyInvateRequestProto")
	proto.RegisterType((*S2CListInviteMeGuildProto)(nil), "proto.S2CListInviteMeGuildProto")
	proto.RegisterType((*C2SUpdateFriendGuildProto)(nil), "proto.C2SUpdateFriendGuildProto")
	proto.RegisterType((*S2CUpdateFriendGuildProto)(nil), "proto.S2CUpdateFriendGuildProto")
	proto.RegisterType((*C2SUpdateEnemyGuildProto)(nil), "proto.C2SUpdateEnemyGuildProto")
	proto.RegisterType((*S2CUpdateEnemyGuildProto)(nil), "proto.S2CUpdateEnemyGuildProto")
	proto.RegisterType((*C2SUpdateGuildPrestigeProto)(nil), "proto.C2SUpdateGuildPrestigeProto")
	proto.RegisterType((*S2CUpdateGuildPrestigeProto)(nil), "proto.S2CUpdateGuildPrestigeProto")
	proto.RegisterType((*C2SPlaceGuildStatueProto)(nil), "proto.C2SPlaceGuildStatueProto")
	proto.RegisterType((*S2CGuildStatueProto)(nil), "proto.S2CGuildStatueProto")
	proto.RegisterType((*S2CUpdateSeekHelpProto)(nil), "proto.S2CUpdateSeekHelpProto")
	proto.RegisterType((*S2CUpdateHelpMemberTimesProto)(nil), "proto.S2CUpdateHelpMemberTimesProto")
	proto.RegisterType((*C2SSeekHelpProto)(nil), "proto.C2SSeekHelpProto")
	proto.RegisterType((*S2CSeekHelpProto)(nil), "proto.S2CSeekHelpProto")
	proto.RegisterType((*S2CAddGuildSeekHelpProto)(nil), "proto.S2CAddGuildSeekHelpProto")
	proto.RegisterType((*C2SHelpGuildMemberProto)(nil), "proto.C2SHelpGuildMemberProto")
	proto.RegisterType((*S2CHelpGuildMemberProto)(nil), "proto.S2CHelpGuildMemberProto")
	proto.RegisterType((*S2CHelpAllGuildMemberProto)(nil), "proto.S2CHelpAllGuildMemberProto")
	proto.RegisterType((*S2CAddGuildSeekHelpHeroIdsProto)(nil), "proto.S2CAddGuildSeekHelpHeroIdsProto")
	proto.RegisterType((*S2CRemoveGuildSeekHelpProto)(nil), "proto.S2CRemoveGuildSeekHelpProto")
	proto.RegisterType((*S2CListGuildSeekHelpProto)(nil), "proto.S2CListGuildSeekHelpProto")
	proto.RegisterType((*S2CListGuildEventPrizeProto)(nil), "proto.S2CListGuildEventPrizeProto")
	proto.RegisterType((*S2CAddGuildEventPrizeProto)(nil), "proto.S2CAddGuildEventPrizeProto")
	proto.RegisterType((*S2CRemoveGuildEventPrizeProto)(nil), "proto.S2CRemoveGuildEventPrizeProto")
	proto.RegisterType((*C2SCollectGuildEventPrizeProto)(nil), "proto.C2SCollectGuildEventPrizeProto")
	proto.RegisterType((*S2CCollectGuildEventPrizeProto)(nil), "proto.S2CCollectGuildEventPrizeProto")
	proto.RegisterType((*S2CUpdateFullBigBoxProto)(nil), "proto.S2CUpdateFullBigBoxProto")
	proto.RegisterType((*S2CUpdateHeroJoinGuildTimeProto)(nil), "proto.S2CUpdateHeroJoinGuildTimeProto")
	proto.RegisterType((*C2SUpgradeTechnologyProto)(nil), "proto.C2SUpgradeTechnologyProto")
	proto.RegisterType((*S2CUpgradeTechnologyProto)(nil), "proto.S2CUpgradeTechnologyProto")
	proto.RegisterType((*C2SReduceTechnologyCdProto)(nil), "proto.C2SReduceTechnologyCdProto")
	proto.RegisterType((*C2SListGuildLogsProto)(nil), "proto.C2SListGuildLogsProto")
	proto.RegisterType((*S2CListGuildLogsProto)(nil), "proto.S2CListGuildLogsProto")
	proto.RegisterType((*S2CAddGuildLogProto)(nil), "proto.S2CAddGuildLogProto")
	proto.RegisterType((*S2CRequestRecommendGuildProto)(nil), "proto.S2CRequestRecommendGuildProto")
	proto.RegisterType((*S2CPushTechHelpableProto)(nil), "proto.S2CPushTechHelpableProto")
	proto.RegisterType((*S2CHelpTechProto)(nil), "proto.S2CHelpTechProto")
	proto.RegisterType((*S2CRecommendInviteHerosProto)(nil), "proto.S2CRecommendInviteHerosProto")
	proto.RegisterType((*C2SSearchNoGuildHerosProto)(nil), "proto.C2SSearchNoGuildHerosProto")
	proto.RegisterType((*S2CSearchNoGuildHerosProto)(nil), "proto.S2CSearchNoGuildHerosProto")
	proto.RegisterType((*S2CViewMcWarRecordProto)(nil), "proto.S2CViewMcWarRecordProto")
	proto.RegisterType((*C2SUpdateGuildMarkProto)(nil), "proto.C2SUpdateGuildMarkProto")
	proto.RegisterType((*S2CUpdateGuildMarkProto)(nil), "proto.S2CUpdateGuildMarkProto")
	proto.RegisterType((*S2CViewYinliangRecordProto)(nil), "proto.S2CViewYinliangRecordProto")
	proto.RegisterType((*C2SSendYinliangToOtherGuildProto)(nil), "proto.C2SSendYinliangToOtherGuildProto")
	proto.RegisterType((*S2CSendYinliangToOtherGuildProto)(nil), "proto.S2CSendYinliangToOtherGuildProto")
	proto.RegisterType((*C2SSendYinliangToMemberProto)(nil), "proto.C2SSendYinliangToMemberProto")
	proto.RegisterType((*S2CSendYinliangToMemberProto)(nil), "proto.S2CSendYinliangToMemberProto")
	proto.RegisterType((*S2CPaySalaryProto)(nil), "proto.S2CPaySalaryProto")
	proto.RegisterType((*C2SSetSalaryProto)(nil), "proto.C2SSetSalaryProto")
	proto.RegisterType((*S2CSetSalaryProto)(nil), "proto.S2CSetSalaryProto")
	proto.RegisterType((*S2CUpdateHeroGuildProto)(nil), "proto.S2CUpdateHeroGuildProto")
	proto.RegisterType((*S2CViewSendYinliangToGuildProto)(nil), "proto.S2CViewSendYinliangToGuildProto")
	proto.RegisterType((*S2CUpdateHufuProto)(nil), "proto.S2CUpdateHufuProto")
	proto.RegisterType((*C2SConveneProto)(nil), "proto.C2SConveneProto")
	proto.RegisterType((*S2CConveneProto)(nil), "proto.S2CConveneProto")
	proto.RegisterType((*S2CCollectDailyGuildRankPrizeProto)(nil), "proto.S2CCollectDailyGuildRankPrizeProto")
	proto.RegisterType((*S2CViewDailyGuildRankProto)(nil), "proto.S2CViewDailyGuildRankProto")
	proto.RegisterType((*S2CViewLastGuildRankProto)(nil), "proto.S2CViewLastGuildRankProto")
	proto.RegisterType((*C2SAddRecommendMcBuildProto)(nil), "proto.C2SAddRecommendMcBuildProto")
	proto.RegisterType((*S2CAddRecommendMcBuildProto)(nil), "proto.S2CAddRecommendMcBuildProto")
	proto.RegisterType((*C2SViewTaskProgressProto)(nil), "proto.C2SViewTaskProgressProto")
	proto.RegisterType((*S2CViewTaskProgressProto)(nil), "proto.S2CViewTaskProgressProto")
	proto.RegisterType((*S2CNoticeTaskStageUpdateProto)(nil), "proto.S2CNoticeTaskStageUpdateProto")
	proto.RegisterType((*C2SCollectTaskPrizeProto)(nil), "proto.C2SCollectTaskPrizeProto")
	proto.RegisterType((*S2CCollectTaskPrizeProto)(nil), "proto.S2CCollectTaskPrizeProto")
	proto.RegisterType((*C2SGuildChangeCountryProto)(nil), "proto.C2SGuildChangeCountryProto")
	proto.RegisterType((*S2CGuildChangeCountryProto)(nil), "proto.S2CGuildChangeCountryProto")
	proto.RegisterType((*S2CShowWorkshopNotExistProto)(nil), "proto.S2CShowWorkshopNotExistProto")
}
func (m *S2CListGuildProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CListGuildProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GuildList) > 0 {
		for _, msg := range m.GuildList {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGuild(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *C2SSearchGuildProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SSearchGuildProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Num != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Num))
	}
	if m.ShowSelfGuild {
		dAtA[i] = 0x18
		i++
		if m.ShowSelfGuild {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CSearchGuildProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSearchGuildProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Proto) > 0 {
		for _, b := range m.Proto {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGuild(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.GuildList) > 0 {
		for _, msg := range m.GuildList {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGuild(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.YinliangList) > 0 {
		for _, msg := range m.YinliangList {
			dAtA[i] = 0x22
			i++
			i = encodeVarintGuild(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *C2SCreateGuildProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCreateGuildProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.FlagName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.FlagName)))
		i += copy(dAtA[i:], m.FlagName)
	}
	if m.Country != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Country))
	}
	return i, nil
}

func (m *S2CCreateGuildProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCreateGuildProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Proto) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Proto)))
		i += copy(dAtA[i:], m.Proto)
	}
	return i, nil
}

func (m *C2SSelfGuildProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SSelfGuildProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Version))
	}
	if m.GuildId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.GuildId))
	}
	return i, nil
}

func (m *S2CSelfGuildProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSelfGuildProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Proto) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Proto)))
		i += copy(dAtA[i:], m.Proto)
	}
	if m.Varsion != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Varsion))
	}
	return i, nil
}

func (m *S2CLeaveGuildForOtherProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CLeaveGuildForOtherProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Head) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Head)))
		i += copy(dAtA[i:], m.Head)
	}
	return i, nil
}

func (m *C2SKickOtherProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SKickOtherProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *S2CKickOtherProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CKickOtherProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *C2SUpdateTextProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SUpdateTextProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Text) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	return i, nil
}

func (m *S2CUpdateTextProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateTextProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Text) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	return i, nil
}

func (m *C2SUpdateInternalTextProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SUpdateInternalTextProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Text) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	return i, nil
}

func (m *S2CUpdateInternalTextProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateInternalTextProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Text) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	return i, nil
}

func (m *C2SUpdateClassNamesProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SUpdateClassNamesProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		for _, s := range m.Name {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *S2CUpdateClassNamesProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateClassNamesProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		for _, s := range m.Name {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *C2SUpdateClassTitleProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SUpdateClassTitleProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Proto) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Proto)))
		i += copy(dAtA[i:], m.Proto)
	}
	return i, nil
}

func (m *C2SUpdateFlagTypeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SUpdateFlagTypeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FlagType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.FlagType))
	}
	return i, nil
}

func (m *S2CUpdateFlagTypeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateFlagTypeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FlagType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.FlagType))
	}
	return i, nil
}

func (m *C2SUpdateMemberClassLevelProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SUpdateMemberClassLevelProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.ClassLevel != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.ClassLevel))
	}
	return i, nil
}

func (m *S2CUpdateMemberClassLevelProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateMemberClassLevelProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.ClassLevel != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.ClassLevel))
	}
	return i, nil
}

func (m *S2CUpdateSelfClassLevelProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateSelfClassLevelProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ClassLevel != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.ClassLevel))
	}
	return i, nil
}

func (m *C2SUpdateJoinConditionProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SUpdateJoinConditionProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RejectAutoJoin {
		dAtA[i] = 0x8
		i++
		if m.RejectAutoJoin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.RequiredHeroLevel != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.RequiredHeroLevel))
	}
	if m.RequiredJunXianLevel != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.RequiredJunXianLevel))
	}
	if m.RequiredTowerMaxFloor != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.RequiredTowerMaxFloor))
	}
	return i, nil
}

func (m *S2CUpdateJoinConditionProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateJoinConditionProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RejectAutoJoin {
		dAtA[i] = 0x8
		i++
		if m.RejectAutoJoin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.RequiredHeroLevel != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.RequiredHeroLevel))
	}
	if m.RequiredJunXianLevel != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.RequiredJunXianLevel))
	}
	if m.RequiredTowerMaxFloor != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.RequiredTowerMaxFloor))
	}
	return i, nil
}

func (m *C2SUpdateGuildNameProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SUpdateGuildNameProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.FlagName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.FlagName)))
		i += copy(dAtA[i:], m.FlagName)
	}
	return i, nil
}

func (m *S2CUpdateGuildNameProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateGuildNameProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NextCanChangeTime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.NextCanChangeTime))
	}
	return i, nil
}

func (m *S2CUpdateGuildNameBroadcastProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateGuildNameBroadcastProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.FlagName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.FlagName)))
		i += copy(dAtA[i:], m.FlagName)
	}
	return i, nil
}

func (m *C2SUpdateGuildLabelProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SUpdateGuildLabelProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Label) > 0 {
		for _, s := range m.Label {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *S2CUpdateGuildLabelProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateGuildLabelProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Label) > 0 {
		for _, s := range m.Label {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *S2CUpdateContributionCoinProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateContributionCoinProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Coin != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Coin))
	}
	return i, nil
}

func (m *C2SDonateProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SDonateProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sequence != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Sequence))
	}
	return i, nil
}

func (m *S2CDonateProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CDonateProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sequence != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Sequence))
	}
	if m.Times != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Times))
	}
	if m.BuildingAmount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.BuildingAmount))
	}
	if m.ContributionAmount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.ContributionAmount))
	}
	if m.ContributionTotalAmount != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.ContributionTotalAmount))
	}
	if m.ContributionAmount7 != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.ContributionAmount7))
	}
	if m.DonationAmount != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.DonationAmount))
	}
	if m.DonationTotalAmount != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.DonationTotalAmount))
	}
	if m.DonationAmount7 != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.DonationAmount7))
	}
	if m.DonationTotalYuanbao != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.DonationTotalYuanbao))
	}
	if m.DonateId != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.DonateId))
	}
	return i, nil
}

func (m *C2SReduceUpgradeLevelCdProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SReduceUpgradeLevelCdProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Times != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Times))
	}
	return i, nil
}

func (m *C2SImpeachLeaderVoteProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SImpeachLeaderVoteProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Target) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Target)))
		i += copy(dAtA[i:], m.Target)
	}
	return i, nil
}

func (m *S2CImpeachLeaderVoteProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CImpeachLeaderVoteProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ImpeachEnd {
		dAtA[i] = 0x8
		i++
		if m.ImpeachEnd {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Impeach) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Impeach)))
		i += copy(dAtA[i:], m.Impeach)
	}
	return i, nil
}

func (m *C2SListGuildByIdsProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SListGuildByIdsProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, num := range m.Ids {
			dAtA[i] = 0x8
			i++
			i = encodeVarintGuild(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *S2CListGuildByIdsProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CListGuildByIdsProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Guilds) > 0 {
		for _, b := range m.Guilds {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGuild(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *C2SUserRequestJoinProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SUserRequestJoinProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *S2CUserRequestJoinProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUserRequestJoinProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *S2CUserRemoveJoinRequestProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUserRemoveJoinRequestProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *C2SUserCancelJoinRequestProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SUserCancelJoinRequestProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *S2CUserCancelJoinRequestProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUserCancelJoinRequestProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *S2CAddGuildMemberProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CAddGuildMemberProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Head) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Head)))
		i += copy(dAtA[i:], m.Head)
	}
	return i, nil
}

func (m *S2CUserJoinedProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUserJoinedProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.FlagName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.FlagName)))
		i += copy(dAtA[i:], m.FlagName)
	}
	if m.Country != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Country))
	}
	return i, nil
}

func (m *C2SGuildReplyJoinRequestProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SGuildReplyJoinRequestProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Agree {
		dAtA[i] = 0x10
		i++
		if m.Agree {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CGuildReplyJoinRequestProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CGuildReplyJoinRequestProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Agree {
		dAtA[i] = 0x10
		i++
		if m.Agree {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *C2SGuildInvateOtherProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SGuildInvateOtherProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *S2CGuildInvateOtherProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CGuildInvateOtherProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *C2SGuildCancelInvateOtherProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SGuildCancelInvateOtherProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *S2CGuildCancelInvateOtherProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CGuildCancelInvateOtherProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *S2CUserAddBeenInvateGuildProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUserAddBeenInvateGuildProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *S2CUserRemoveBeenInvateGuildProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUserRemoveBeenInvateGuildProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *C2SUserReplyInvateRequestProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SUserReplyInvateRequestProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Id))
	}
	if m.Agree {
		dAtA[i] = 0x10
		i++
		if m.Agree {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CUserReplyInvateRequestProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUserReplyInvateRequestProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Id))
	}
	if m.Agree {
		dAtA[i] = 0x10
		i++
		if m.Agree {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CListInviteMeGuildProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CListInviteMeGuildProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GuildList) > 0 {
		for _, msg := range m.GuildList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGuild(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *C2SUpdateFriendGuildProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SUpdateFriendGuildProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Text) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	return i, nil
}

func (m *S2CUpdateFriendGuildProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateFriendGuildProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Text) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	return i, nil
}

func (m *C2SUpdateEnemyGuildProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SUpdateEnemyGuildProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Text) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	return i, nil
}

func (m *S2CUpdateEnemyGuildProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateEnemyGuildProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Text) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	return i, nil
}

func (m *C2SUpdateGuildPrestigeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SUpdateGuildPrestigeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Target != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Target))
	}
	return i, nil
}

func (m *S2CUpdateGuildPrestigeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateGuildPrestigeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Target != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Target))
	}
	if m.OldTarget != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.OldTarget))
	}
	return i, nil
}

func (m *C2SPlaceGuildStatueProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SPlaceGuildStatueProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RealmId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.RealmId))
	}
	return i, nil
}

func (m *S2CGuildStatueProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CGuildStatueProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RealmId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.RealmId))
	}
	return i, nil
}

func (m *S2CUpdateSeekHelpProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateSeekHelpProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HelpType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.HelpType))
	}
	if m.WorkerPos != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.WorkerPos))
	}
	if m.Enable {
		dAtA[i] = 0x18
		i++
		if m.Enable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CUpdateHelpMemberTimesProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateHelpMemberTimesProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DailyHelpMemberTimes != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.DailyHelpMemberTimes))
	}
	return i, nil
}

func (m *C2SSeekHelpProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SSeekHelpProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HelpType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.HelpType))
	}
	if m.WorkerPos != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.WorkerPos))
	}
	return i, nil
}

func (m *S2CSeekHelpProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSeekHelpProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HelpType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.HelpType))
	}
	if m.WorkerPos != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.WorkerPos))
	}
	return i, nil
}

func (m *S2CAddGuildSeekHelpProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CAddGuildSeekHelpProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *C2SHelpGuildMemberProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SHelpGuildMemberProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *S2CHelpGuildMemberProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CHelpGuildMemberProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *S2CHelpAllGuildMemberProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CHelpAllGuildMemberProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, s := range m.Ids {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *S2CAddGuildSeekHelpHeroIdsProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CAddGuildSeekHelpHeroIdsProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.HelpHeroId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.HelpHeroId)))
		i += copy(dAtA[i:], m.HelpHeroId)
	}
	return i, nil
}

func (m *S2CRemoveGuildSeekHelpProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CRemoveGuildSeekHelpProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *S2CListGuildSeekHelpProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CListGuildSeekHelpProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, b := range m.Data {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGuild(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *S2CListGuildEventPrizeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CListGuildEventPrizeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		for _, num := range m.Id {
			dAtA[i] = 0x8
			i++
			i = encodeVarintGuild(dAtA, i, uint64(num))
		}
	}
	if len(m.DataId) > 0 {
		for _, num := range m.DataId {
			dAtA[i] = 0x10
			i++
			i = encodeVarintGuild(dAtA, i, uint64(num))
		}
	}
	if len(m.ExpireTime) > 0 {
		for _, num := range m.ExpireTime {
			dAtA[i] = 0x18
			i++
			i = encodeVarintGuild(dAtA, i, uint64(num))
		}
	}
	if len(m.HeroId) > 0 {
		for _, b := range m.HeroId {
			dAtA[i] = 0x22
			i++
			i = encodeVarintGuild(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.HeroName) > 0 {
		for _, s := range m.HeroName {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *S2CAddGuildEventPrizeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CAddGuildEventPrizeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Id))
	}
	if m.DataId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.DataId))
	}
	if m.ExpireTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.ExpireTime))
	}
	if len(m.HeroId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.HeroId)))
		i += copy(dAtA[i:], m.HeroId)
	}
	if len(m.HeroName) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.HeroName)))
		i += copy(dAtA[i:], m.HeroName)
	}
	return i, nil
}

func (m *S2CRemoveGuildEventPrizeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CRemoveGuildEventPrizeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *C2SCollectGuildEventPrizeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCollectGuildEventPrizeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *S2CCollectGuildEventPrizeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCollectGuildEventPrizeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Id))
	}
	if m.NewEnergy != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.NewEnergy))
	}
	if len(m.Prize) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Prize)))
		i += copy(dAtA[i:], m.Prize)
	}
	if m.AddEnergy != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.AddEnergy))
	}
	return i, nil
}

func (m *S2CUpdateFullBigBoxProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateFullBigBoxProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Energy != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Energy))
	}
	if m.BoxId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.BoxId))
	}
	if m.Collectable {
		dAtA[i] = 0x28
		i++
		if m.Collectable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CUpdateHeroJoinGuildTimeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateHeroJoinGuildTimeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.JoinGuildTime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.JoinGuildTime))
	}
	return i, nil
}

func (m *C2SUpgradeTechnologyProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SUpgradeTechnologyProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Group != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Group))
	}
	return i, nil
}

func (m *S2CUpgradeTechnologyProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpgradeTechnologyProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Group != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Group))
	}
	if m.EndTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.EndTime))
	}
	return i, nil
}

func (m *C2SReduceTechnologyCdProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SReduceTechnologyCdProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Times != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Times))
	}
	return i, nil
}

func (m *C2SListGuildLogsProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SListGuildLogsProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LogType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.LogType))
	}
	if m.MinId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.MinId))
	}
	if m.Count != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *S2CListGuildLogsProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CListGuildLogsProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, b := range m.Data {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGuild(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *S2CAddGuildLogProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CAddGuildLogProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *S2CRequestRecommendGuildProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CRequestRecommendGuildProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Has {
		dAtA[i] = 0x8
		i++
		if m.Has {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.NextNotifyGuildTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.NextNotifyGuildTime))
	}
	if m.Id != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Flag) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Flag)))
		i += copy(dAtA[i:], m.Flag)
	}
	if m.Country != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Country))
	}
	return i, nil
}

func (m *S2CPushTechHelpableProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CPushTechHelpableProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Helpable {
		dAtA[i] = 0x8
		i++
		if m.Helpable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CHelpTechProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CHelpTechProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Tech != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Tech))
	}
	return i, nil
}

func (m *S2CRecommendInviteHerosProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CRecommendInviteHerosProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Heros) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Heros)))
		i += copy(dAtA[i:], m.Heros)
	}
	return i, nil
}

func (m *C2SSearchNoGuildHerosProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SSearchNoGuildHerosProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Page != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Page))
	}
	return i, nil
}

func (m *S2CSearchNoGuildHerosProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSearchNoGuildHerosProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Heros) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Heros)))
		i += copy(dAtA[i:], m.Heros)
	}
	return i, nil
}

func (m *S2CViewMcWarRecordProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CViewMcWarRecordProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Record != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Record.Size()))
		n1, err := m.Record.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Record2 != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Record2.Size()))
		n2, err := m.Record2.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *C2SUpdateGuildMarkProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SUpdateGuildMarkProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Index))
	}
	if m.PosX != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.PosX))
	}
	if m.PosY != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.PosY))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	return i, nil
}

func (m *S2CUpdateGuildMarkProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateGuildMarkProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mark != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Mark.Size()))
		n3, err := m.Mark.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *S2CViewYinliangRecordProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CViewYinliangRecordProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Record != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Record.Size()))
		n4, err := m.Record.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *C2SSendYinliangToOtherGuildProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SSendYinliangToOtherGuildProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Gid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Gid))
	}
	if m.Amount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Amount))
	}
	return i, nil
}

func (m *S2CSendYinliangToOtherGuildProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSendYinliangToOtherGuildProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Gid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Gid))
	}
	if m.Amount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Amount))
	}
	return i, nil
}

func (m *C2SSendYinliangToMemberProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SSendYinliangToMemberProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MemId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.MemId)))
		i += copy(dAtA[i:], m.MemId)
	}
	if m.Amount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Amount))
	}
	return i, nil
}

func (m *S2CSendYinliangToMemberProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSendYinliangToMemberProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MemId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.MemId)))
		i += copy(dAtA[i:], m.MemId)
	}
	if m.Amount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Amount))
	}
	return i, nil
}

func (m *S2CPaySalaryProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CPaySalaryProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Amount))
	}
	return i, nil
}

func (m *C2SSetSalaryProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SSetSalaryProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MemId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.MemId)))
		i += copy(dAtA[i:], m.MemId)
	}
	if m.Salary != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Salary))
	}
	return i, nil
}

func (m *S2CSetSalaryProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSetSalaryProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MemId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.MemId)))
		i += copy(dAtA[i:], m.MemId)
	}
	if m.Salary != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Salary))
	}
	return i, nil
}

func (m *S2CUpdateHeroGuildProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateHeroGuildProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Data.Size()))
		n5, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.UpdateType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.UpdateType))
	}
	return i, nil
}

func (m *S2CViewSendYinliangToGuildProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CViewSendYinliangToGuildProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Guilds != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Guilds.Size()))
		n6, err := m.Guilds.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *S2CUpdateHufuProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateHufuProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Hufu != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Hufu))
	}
	return i, nil
}

func (m *C2SConveneProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SConveneProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Target) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Target)))
		i += copy(dAtA[i:], m.Target)
	}
	return i, nil
}

func (m *S2CConveneProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CConveneProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Target) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Target)))
		i += copy(dAtA[i:], m.Target)
	}
	return i, nil
}

func (m *S2CCollectDailyGuildRankPrizeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCollectDailyGuildRankPrizeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Prize) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Prize)))
		i += copy(dAtA[i:], m.Prize)
	}
	return i, nil
}

func (m *S2CViewDailyGuildRankProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CViewDailyGuildRankProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rank != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Rank.Size()))
		n7, err := m.Rank.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *S2CViewLastGuildRankProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CViewLastGuildRankProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rank != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Rank))
	}
	return i, nil
}

func (m *C2SAddRecommendMcBuildProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SAddRecommendMcBuildProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.McId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.McId))
	}
	return i, nil
}

func (m *S2CAddRecommendMcBuildProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CAddRecommendMcBuildProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NewMcIds) > 0 {
		for _, num := range m.NewMcIds {
			dAtA[i] = 0x8
			i++
			i = encodeVarintGuild(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *C2SViewTaskProgressProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SViewTaskProgressProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Version))
	}
	return i, nil
}

func (m *S2CViewTaskProgressProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CViewTaskProgressProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Version))
	}
	if len(m.Progress) > 0 {
		for _, msg := range m.Progress {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGuild(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *S2CNoticeTaskStageUpdateProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CNoticeTaskStageUpdateProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TaskId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.TaskId))
	}
	if m.Stage != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Stage))
	}
	return i, nil
}

func (m *C2SCollectTaskPrizeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCollectTaskPrizeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TaskId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.TaskId))
	}
	if m.Stage != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Stage))
	}
	return i, nil
}

func (m *S2CCollectTaskPrizeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCollectTaskPrizeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TaskId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.TaskId))
	}
	if m.Stage != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Stage))
	}
	return i, nil
}

func (m *C2SGuildChangeCountryProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SGuildChangeCountryProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Country != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Country))
	}
	return i, nil
}

func (m *S2CGuildChangeCountryProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CGuildChangeCountryProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Country != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Country))
	}
	return i, nil
}

func (m *S2CShowWorkshopNotExistProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CShowWorkshopNotExistProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Show {
		dAtA[i] = 0x8
		i++
		if m.Show {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeFixed64Guild(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Guild(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintGuild(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *S2CListGuildProto) Size() (n int) {
	var l int
	_ = l
	if len(m.GuildList) > 0 {
		for _, e := range m.GuildList {
			l = e.Size()
			n += 1 + l + sovGuild(uint64(l))
		}
	}
	return n
}

func (m *C2SSearchGuildProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.Num != 0 {
		n += 1 + sovGuild(uint64(m.Num))
	}
	if m.ShowSelfGuild {
		n += 2
	}
	return n
}

func (m *S2CSearchGuildProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Proto) > 0 {
		for _, b := range m.Proto {
			l = len(b)
			n += 1 + l + sovGuild(uint64(l))
		}
	}
	if len(m.GuildList) > 0 {
		for _, e := range m.GuildList {
			l = e.Size()
			n += 1 + l + sovGuild(uint64(l))
		}
	}
	if len(m.YinliangList) > 0 {
		for _, e := range m.YinliangList {
			l = e.Size()
			n += 1 + l + sovGuild(uint64(l))
		}
	}
	return n
}

func (m *C2SCreateGuildProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	l = len(m.FlagName)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.Country != 0 {
		n += 1 + sovGuild(uint64(m.Country))
	}
	return n
}

func (m *S2CCreateGuildProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Proto)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *C2SSelfGuildProto) Size() (n int) {
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovGuild(uint64(m.Version))
	}
	if m.GuildId != 0 {
		n += 1 + sovGuild(uint64(m.GuildId))
	}
	return n
}

func (m *S2CSelfGuildProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Proto)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.Varsion != 0 {
		n += 1 + sovGuild(uint64(m.Varsion))
	}
	return n
}

func (m *S2CLeaveGuildForOtherProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	l = len(m.Head)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *C2SKickOtherProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *S2CKickOtherProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *C2SUpdateTextProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *S2CUpdateTextProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *C2SUpdateInternalTextProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *S2CUpdateInternalTextProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *C2SUpdateClassNamesProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Name) > 0 {
		for _, s := range m.Name {
			l = len(s)
			n += 1 + l + sovGuild(uint64(l))
		}
	}
	return n
}

func (m *S2CUpdateClassNamesProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Name) > 0 {
		for _, s := range m.Name {
			l = len(s)
			n += 1 + l + sovGuild(uint64(l))
		}
	}
	return n
}

func (m *C2SUpdateClassTitleProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Proto)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *C2SUpdateFlagTypeProto) Size() (n int) {
	var l int
	_ = l
	if m.FlagType != 0 {
		n += 1 + sovGuild(uint64(m.FlagType))
	}
	return n
}

func (m *S2CUpdateFlagTypeProto) Size() (n int) {
	var l int
	_ = l
	if m.FlagType != 0 {
		n += 1 + sovGuild(uint64(m.FlagType))
	}
	return n
}

func (m *C2SUpdateMemberClassLevelProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.ClassLevel != 0 {
		n += 1 + sovGuild(uint64(m.ClassLevel))
	}
	return n
}

func (m *S2CUpdateMemberClassLevelProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.ClassLevel != 0 {
		n += 1 + sovGuild(uint64(m.ClassLevel))
	}
	return n
}

func (m *S2CUpdateSelfClassLevelProto) Size() (n int) {
	var l int
	_ = l
	if m.ClassLevel != 0 {
		n += 1 + sovGuild(uint64(m.ClassLevel))
	}
	return n
}

func (m *C2SUpdateJoinConditionProto) Size() (n int) {
	var l int
	_ = l
	if m.RejectAutoJoin {
		n += 2
	}
	if m.RequiredHeroLevel != 0 {
		n += 1 + sovGuild(uint64(m.RequiredHeroLevel))
	}
	if m.RequiredJunXianLevel != 0 {
		n += 1 + sovGuild(uint64(m.RequiredJunXianLevel))
	}
	if m.RequiredTowerMaxFloor != 0 {
		n += 1 + sovGuild(uint64(m.RequiredTowerMaxFloor))
	}
	return n
}

func (m *S2CUpdateJoinConditionProto) Size() (n int) {
	var l int
	_ = l
	if m.RejectAutoJoin {
		n += 2
	}
	if m.RequiredHeroLevel != 0 {
		n += 1 + sovGuild(uint64(m.RequiredHeroLevel))
	}
	if m.RequiredJunXianLevel != 0 {
		n += 1 + sovGuild(uint64(m.RequiredJunXianLevel))
	}
	if m.RequiredTowerMaxFloor != 0 {
		n += 1 + sovGuild(uint64(m.RequiredTowerMaxFloor))
	}
	return n
}

func (m *C2SUpdateGuildNameProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	l = len(m.FlagName)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *S2CUpdateGuildNameProto) Size() (n int) {
	var l int
	_ = l
	if m.NextCanChangeTime != 0 {
		n += 1 + sovGuild(uint64(m.NextCanChangeTime))
	}
	return n
}

func (m *S2CUpdateGuildNameBroadcastProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGuild(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	l = len(m.FlagName)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *C2SUpdateGuildLabelProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Label) > 0 {
		for _, s := range m.Label {
			l = len(s)
			n += 1 + l + sovGuild(uint64(l))
		}
	}
	return n
}

func (m *S2CUpdateGuildLabelProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Label) > 0 {
		for _, s := range m.Label {
			l = len(s)
			n += 1 + l + sovGuild(uint64(l))
		}
	}
	return n
}

func (m *S2CUpdateContributionCoinProto) Size() (n int) {
	var l int
	_ = l
	if m.Coin != 0 {
		n += 1 + sovGuild(uint64(m.Coin))
	}
	return n
}

func (m *C2SDonateProto) Size() (n int) {
	var l int
	_ = l
	if m.Sequence != 0 {
		n += 1 + sovGuild(uint64(m.Sequence))
	}
	return n
}

func (m *S2CDonateProto) Size() (n int) {
	var l int
	_ = l
	if m.Sequence != 0 {
		n += 1 + sovGuild(uint64(m.Sequence))
	}
	if m.Times != 0 {
		n += 1 + sovGuild(uint64(m.Times))
	}
	if m.BuildingAmount != 0 {
		n += 1 + sovGuild(uint64(m.BuildingAmount))
	}
	if m.ContributionAmount != 0 {
		n += 1 + sovGuild(uint64(m.ContributionAmount))
	}
	if m.ContributionTotalAmount != 0 {
		n += 1 + sovGuild(uint64(m.ContributionTotalAmount))
	}
	if m.ContributionAmount7 != 0 {
		n += 1 + sovGuild(uint64(m.ContributionAmount7))
	}
	if m.DonationAmount != 0 {
		n += 1 + sovGuild(uint64(m.DonationAmount))
	}
	if m.DonationTotalAmount != 0 {
		n += 1 + sovGuild(uint64(m.DonationTotalAmount))
	}
	if m.DonationAmount7 != 0 {
		n += 1 + sovGuild(uint64(m.DonationAmount7))
	}
	if m.DonationTotalYuanbao != 0 {
		n += 1 + sovGuild(uint64(m.DonationTotalYuanbao))
	}
	if m.DonateId != 0 {
		n += 1 + sovGuild(uint64(m.DonateId))
	}
	return n
}

func (m *C2SReduceUpgradeLevelCdProto) Size() (n int) {
	var l int
	_ = l
	if m.Times != 0 {
		n += 1 + sovGuild(uint64(m.Times))
	}
	return n
}

func (m *C2SImpeachLeaderVoteProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *S2CImpeachLeaderVoteProto) Size() (n int) {
	var l int
	_ = l
	if m.ImpeachEnd {
		n += 2
	}
	l = len(m.Impeach)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *C2SListGuildByIdsProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, e := range m.Ids {
			n += 1 + sovGuild(uint64(e))
		}
	}
	return n
}

func (m *S2CListGuildByIdsProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Guilds) > 0 {
		for _, b := range m.Guilds {
			l = len(b)
			n += 1 + l + sovGuild(uint64(l))
		}
	}
	return n
}

func (m *C2SUserRequestJoinProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGuild(uint64(m.Id))
	}
	return n
}

func (m *S2CUserRequestJoinProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGuild(uint64(m.Id))
	}
	return n
}

func (m *S2CUserRemoveJoinRequestProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGuild(uint64(m.Id))
	}
	return n
}

func (m *C2SUserCancelJoinRequestProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGuild(uint64(m.Id))
	}
	return n
}

func (m *S2CUserCancelJoinRequestProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGuild(uint64(m.Id))
	}
	return n
}

func (m *S2CAddGuildMemberProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	l = len(m.Head)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *S2CUserJoinedProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGuild(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	l = len(m.FlagName)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.Country != 0 {
		n += 1 + sovGuild(uint64(m.Country))
	}
	return n
}

func (m *C2SGuildReplyJoinRequestProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.Agree {
		n += 2
	}
	return n
}

func (m *S2CGuildReplyJoinRequestProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.Agree {
		n += 2
	}
	return n
}

func (m *C2SGuildInvateOtherProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *S2CGuildInvateOtherProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *C2SGuildCancelInvateOtherProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *S2CGuildCancelInvateOtherProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *S2CUserAddBeenInvateGuildProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGuild(uint64(m.Id))
	}
	return n
}

func (m *S2CUserRemoveBeenInvateGuildProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGuild(uint64(m.Id))
	}
	return n
}

func (m *C2SUserReplyInvateRequestProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGuild(uint64(m.Id))
	}
	if m.Agree {
		n += 2
	}
	return n
}

func (m *S2CUserReplyInvateRequestProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGuild(uint64(m.Id))
	}
	if m.Agree {
		n += 2
	}
	return n
}

func (m *S2CListInviteMeGuildProto) Size() (n int) {
	var l int
	_ = l
	if len(m.GuildList) > 0 {
		for _, e := range m.GuildList {
			l = e.Size()
			n += 1 + l + sovGuild(uint64(l))
		}
	}
	return n
}

func (m *C2SUpdateFriendGuildProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *S2CUpdateFriendGuildProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *C2SUpdateEnemyGuildProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *S2CUpdateEnemyGuildProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *C2SUpdateGuildPrestigeProto) Size() (n int) {
	var l int
	_ = l
	if m.Target != 0 {
		n += 1 + sovGuild(uint64(m.Target))
	}
	return n
}

func (m *S2CUpdateGuildPrestigeProto) Size() (n int) {
	var l int
	_ = l
	if m.Target != 0 {
		n += 1 + sovGuild(uint64(m.Target))
	}
	if m.OldTarget != 0 {
		n += 1 + sovGuild(uint64(m.OldTarget))
	}
	return n
}

func (m *C2SPlaceGuildStatueProto) Size() (n int) {
	var l int
	_ = l
	if m.RealmId != 0 {
		n += 1 + sovGuild(uint64(m.RealmId))
	}
	return n
}

func (m *S2CGuildStatueProto) Size() (n int) {
	var l int
	_ = l
	if m.RealmId != 0 {
		n += 1 + sovGuild(uint64(m.RealmId))
	}
	return n
}

func (m *S2CUpdateSeekHelpProto) Size() (n int) {
	var l int
	_ = l
	if m.HelpType != 0 {
		n += 1 + sovGuild(uint64(m.HelpType))
	}
	if m.WorkerPos != 0 {
		n += 1 + sovGuild(uint64(m.WorkerPos))
	}
	if m.Enable {
		n += 2
	}
	return n
}

func (m *S2CUpdateHelpMemberTimesProto) Size() (n int) {
	var l int
	_ = l
	if m.DailyHelpMemberTimes != 0 {
		n += 1 + sovGuild(uint64(m.DailyHelpMemberTimes))
	}
	return n
}

func (m *C2SSeekHelpProto) Size() (n int) {
	var l int
	_ = l
	if m.HelpType != 0 {
		n += 1 + sovGuild(uint64(m.HelpType))
	}
	if m.WorkerPos != 0 {
		n += 1 + sovGuild(uint64(m.WorkerPos))
	}
	return n
}

func (m *S2CSeekHelpProto) Size() (n int) {
	var l int
	_ = l
	if m.HelpType != 0 {
		n += 1 + sovGuild(uint64(m.HelpType))
	}
	if m.WorkerPos != 0 {
		n += 1 + sovGuild(uint64(m.WorkerPos))
	}
	return n
}

func (m *S2CAddGuildSeekHelpProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *C2SHelpGuildMemberProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *S2CHelpGuildMemberProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *S2CHelpAllGuildMemberProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, s := range m.Ids {
			l = len(s)
			n += 1 + l + sovGuild(uint64(l))
		}
	}
	return n
}

func (m *S2CAddGuildSeekHelpHeroIdsProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	l = len(m.HelpHeroId)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *S2CRemoveGuildSeekHelpProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *S2CListGuildSeekHelpProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, b := range m.Data {
			l = len(b)
			n += 1 + l + sovGuild(uint64(l))
		}
	}
	return n
}

func (m *S2CListGuildEventPrizeProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Id) > 0 {
		for _, e := range m.Id {
			n += 1 + sovGuild(uint64(e))
		}
	}
	if len(m.DataId) > 0 {
		for _, e := range m.DataId {
			n += 1 + sovGuild(uint64(e))
		}
	}
	if len(m.ExpireTime) > 0 {
		for _, e := range m.ExpireTime {
			n += 1 + sovGuild(uint64(e))
		}
	}
	if len(m.HeroId) > 0 {
		for _, b := range m.HeroId {
			l = len(b)
			n += 1 + l + sovGuild(uint64(l))
		}
	}
	if len(m.HeroName) > 0 {
		for _, s := range m.HeroName {
			l = len(s)
			n += 1 + l + sovGuild(uint64(l))
		}
	}
	return n
}

func (m *S2CAddGuildEventPrizeProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGuild(uint64(m.Id))
	}
	if m.DataId != 0 {
		n += 1 + sovGuild(uint64(m.DataId))
	}
	if m.ExpireTime != 0 {
		n += 1 + sovGuild(uint64(m.ExpireTime))
	}
	l = len(m.HeroId)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	l = len(m.HeroName)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *S2CRemoveGuildEventPrizeProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGuild(uint64(m.Id))
	}
	return n
}

func (m *C2SCollectGuildEventPrizeProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGuild(uint64(m.Id))
	}
	return n
}

func (m *S2CCollectGuildEventPrizeProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGuild(uint64(m.Id))
	}
	if m.NewEnergy != 0 {
		n += 1 + sovGuild(uint64(m.NewEnergy))
	}
	l = len(m.Prize)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.AddEnergy != 0 {
		n += 1 + sovGuild(uint64(m.AddEnergy))
	}
	return n
}

func (m *S2CUpdateFullBigBoxProto) Size() (n int) {
	var l int
	_ = l
	if m.Energy != 0 {
		n += 1 + sovGuild(uint64(m.Energy))
	}
	if m.BoxId != 0 {
		n += 1 + sovGuild(uint64(m.BoxId))
	}
	if m.Collectable {
		n += 2
	}
	return n
}

func (m *S2CUpdateHeroJoinGuildTimeProto) Size() (n int) {
	var l int
	_ = l
	if m.JoinGuildTime != 0 {
		n += 1 + sovGuild(uint64(m.JoinGuildTime))
	}
	return n
}

func (m *C2SUpgradeTechnologyProto) Size() (n int) {
	var l int
	_ = l
	if m.Group != 0 {
		n += 1 + sovGuild(uint64(m.Group))
	}
	return n
}

func (m *S2CUpgradeTechnologyProto) Size() (n int) {
	var l int
	_ = l
	if m.Group != 0 {
		n += 1 + sovGuild(uint64(m.Group))
	}
	if m.EndTime != 0 {
		n += 1 + sovGuild(uint64(m.EndTime))
	}
	return n
}

func (m *C2SReduceTechnologyCdProto) Size() (n int) {
	var l int
	_ = l
	if m.Times != 0 {
		n += 1 + sovGuild(uint64(m.Times))
	}
	return n
}

func (m *C2SListGuildLogsProto) Size() (n int) {
	var l int
	_ = l
	if m.LogType != 0 {
		n += 1 + sovGuild(uint64(m.LogType))
	}
	if m.MinId != 0 {
		n += 1 + sovGuild(uint64(m.MinId))
	}
	if m.Count != 0 {
		n += 1 + sovGuild(uint64(m.Count))
	}
	return n
}

func (m *S2CListGuildLogsProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, b := range m.Data {
			l = len(b)
			n += 1 + l + sovGuild(uint64(l))
		}
	}
	return n
}

func (m *S2CAddGuildLogProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *S2CRequestRecommendGuildProto) Size() (n int) {
	var l int
	_ = l
	if m.Has {
		n += 2
	}
	if m.NextNotifyGuildTime != 0 {
		n += 1 + sovGuild(uint64(m.NextNotifyGuildTime))
	}
	if m.Id != 0 {
		n += 1 + sovGuild(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	l = len(m.Flag)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.Country != 0 {
		n += 1 + sovGuild(uint64(m.Country))
	}
	return n
}

func (m *S2CPushTechHelpableProto) Size() (n int) {
	var l int
	_ = l
	if m.Helpable {
		n += 2
	}
	return n
}

func (m *S2CHelpTechProto) Size() (n int) {
	var l int
	_ = l
	if m.Tech != 0 {
		n += 1 + sovGuild(uint64(m.Tech))
	}
	return n
}

func (m *S2CRecommendInviteHerosProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Heros)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *C2SSearchNoGuildHerosProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.Page != 0 {
		n += 1 + sovGuild(uint64(m.Page))
	}
	return n
}

func (m *S2CSearchNoGuildHerosProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Heros)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *S2CViewMcWarRecordProto) Size() (n int) {
	var l int
	_ = l
	if m.Record != nil {
		l = m.Record.Size()
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.Record2 != nil {
		l = m.Record2.Size()
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *C2SUpdateGuildMarkProto) Size() (n int) {
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovGuild(uint64(m.Index))
	}
	if m.PosX != 0 {
		n += 1 + sovGuild(uint64(m.PosX))
	}
	if m.PosY != 0 {
		n += 1 + sovGuild(uint64(m.PosY))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *S2CUpdateGuildMarkProto) Size() (n int) {
	var l int
	_ = l
	if m.Mark != nil {
		l = m.Mark.Size()
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *S2CViewYinliangRecordProto) Size() (n int) {
	var l int
	_ = l
	if m.Record != nil {
		l = m.Record.Size()
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *C2SSendYinliangToOtherGuildProto) Size() (n int) {
	var l int
	_ = l
	if m.Gid != 0 {
		n += 1 + sovGuild(uint64(m.Gid))
	}
	if m.Amount != 0 {
		n += 1 + sovGuild(uint64(m.Amount))
	}
	return n
}

func (m *S2CSendYinliangToOtherGuildProto) Size() (n int) {
	var l int
	_ = l
	if m.Gid != 0 {
		n += 1 + sovGuild(uint64(m.Gid))
	}
	if m.Amount != 0 {
		n += 1 + sovGuild(uint64(m.Amount))
	}
	return n
}

func (m *C2SSendYinliangToMemberProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.MemId)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovGuild(uint64(m.Amount))
	}
	return n
}

func (m *S2CSendYinliangToMemberProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.MemId)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovGuild(uint64(m.Amount))
	}
	return n
}

func (m *S2CPaySalaryProto) Size() (n int) {
	var l int
	_ = l
	if m.Amount != 0 {
		n += 1 + sovGuild(uint64(m.Amount))
	}
	return n
}

func (m *C2SSetSalaryProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.MemId)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.Salary != 0 {
		n += 1 + sovGuild(uint64(m.Salary))
	}
	return n
}

func (m *S2CSetSalaryProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.MemId)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.Salary != 0 {
		n += 1 + sovGuild(uint64(m.Salary))
	}
	return n
}

func (m *S2CUpdateHeroGuildProto) Size() (n int) {
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.UpdateType != 0 {
		n += 1 + sovGuild(uint64(m.UpdateType))
	}
	return n
}

func (m *S2CViewSendYinliangToGuildProto) Size() (n int) {
	var l int
	_ = l
	if m.Guilds != nil {
		l = m.Guilds.Size()
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *S2CUpdateHufuProto) Size() (n int) {
	var l int
	_ = l
	if m.Hufu != 0 {
		n += 1 + sovGuild(uint64(m.Hufu))
	}
	return n
}

func (m *C2SConveneProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *S2CConveneProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *S2CCollectDailyGuildRankPrizeProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Prize)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *S2CViewDailyGuildRankProto) Size() (n int) {
	var l int
	_ = l
	if m.Rank != nil {
		l = m.Rank.Size()
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *S2CViewLastGuildRankProto) Size() (n int) {
	var l int
	_ = l
	if m.Rank != 0 {
		n += 1 + sovGuild(uint64(m.Rank))
	}
	return n
}

func (m *C2SAddRecommendMcBuildProto) Size() (n int) {
	var l int
	_ = l
	if m.McId != 0 {
		n += 1 + sovGuild(uint64(m.McId))
	}
	return n
}

func (m *S2CAddRecommendMcBuildProto) Size() (n int) {
	var l int
	_ = l
	if len(m.NewMcIds) > 0 {
		for _, e := range m.NewMcIds {
			n += 1 + sovGuild(uint64(e))
		}
	}
	return n
}

func (m *C2SViewTaskProgressProto) Size() (n int) {
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovGuild(uint64(m.Version))
	}
	return n
}

func (m *S2CViewTaskProgressProto) Size() (n int) {
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovGuild(uint64(m.Version))
	}
	if len(m.Progress) > 0 {
		for _, e := range m.Progress {
			l = e.Size()
			n += 1 + l + sovGuild(uint64(l))
		}
	}
	return n
}

func (m *S2CNoticeTaskStageUpdateProto) Size() (n int) {
	var l int
	_ = l
	if m.TaskId != 0 {
		n += 1 + sovGuild(uint64(m.TaskId))
	}
	if m.Stage != 0 {
		n += 1 + sovGuild(uint64(m.Stage))
	}
	return n
}

func (m *C2SCollectTaskPrizeProto) Size() (n int) {
	var l int
	_ = l
	if m.TaskId != 0 {
		n += 1 + sovGuild(uint64(m.TaskId))
	}
	if m.Stage != 0 {
		n += 1 + sovGuild(uint64(m.Stage))
	}
	return n
}

func (m *S2CCollectTaskPrizeProto) Size() (n int) {
	var l int
	_ = l
	if m.TaskId != 0 {
		n += 1 + sovGuild(uint64(m.TaskId))
	}
	if m.Stage != 0 {
		n += 1 + sovGuild(uint64(m.Stage))
	}
	return n
}

func (m *C2SGuildChangeCountryProto) Size() (n int) {
	var l int
	_ = l
	if m.Country != 0 {
		n += 1 + sovGuild(uint64(m.Country))
	}
	return n
}

func (m *S2CGuildChangeCountryProto) Size() (n int) {
	var l int
	_ = l
	if m.Country != 0 {
		n += 1 + sovGuild(uint64(m.Country))
	}
	return n
}

func (m *S2CShowWorkshopNotExistProto) Size() (n int) {
	var l int
	_ = l
	if m.Show {
		n += 2
	}
	return n
}

func sovGuild(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGuild(x uint64) (n int) {
	return sovGuild(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *S2CListGuildProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CListGuildProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CListGuildProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildList = append(m.GuildList, &proto8.GuildSnapshotProto{})
			if err := m.GuildList[len(m.GuildList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SSearchGuildProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SSearchGuildProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SSearchGuildProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowSelfGuild", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowSelfGuild = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSearchGuildProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSearchGuildProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSearchGuildProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proto", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proto = append(m.Proto, make([]byte, postIndex-iNdEx))
			copy(m.Proto[len(m.Proto)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildList = append(m.GuildList, &proto8.GuildSnapshotProto{})
			if err := m.GuildList[len(m.GuildList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field YinliangList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.YinliangList = append(m.YinliangList, &proto8.GuildYinliangSendProto{})
			if err := m.YinliangList[len(m.YinliangList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SCreateGuildProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCreateGuildProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCreateGuildProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlagName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FlagName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			m.Country = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Country |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCreateGuildProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCreateGuildProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCreateGuildProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proto", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proto = append(m.Proto[:0], dAtA[iNdEx:postIndex]...)
			if m.Proto == nil {
				m.Proto = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SSelfGuildProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SSelfGuildProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SSelfGuildProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildId", wireType)
			}
			m.GuildId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuildId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSelfGuildProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSelfGuildProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSelfGuildProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proto", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proto = append(m.Proto[:0], dAtA[iNdEx:postIndex]...)
			if m.Proto == nil {
				m.Proto = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Varsion", wireType)
			}
			m.Varsion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Varsion |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CLeaveGuildForOtherProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CLeaveGuildForOtherProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CLeaveGuildForOtherProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Head = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SKickOtherProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SKickOtherProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SKickOtherProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CKickOtherProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CKickOtherProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CKickOtherProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SUpdateTextProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SUpdateTextProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SUpdateTextProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateTextProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateTextProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateTextProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SUpdateInternalTextProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SUpdateInternalTextProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SUpdateInternalTextProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateInternalTextProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateInternalTextProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateInternalTextProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SUpdateClassNamesProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SUpdateClassNamesProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SUpdateClassNamesProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = append(m.Name, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateClassNamesProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateClassNamesProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateClassNamesProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = append(m.Name, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SUpdateClassTitleProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SUpdateClassTitleProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SUpdateClassTitleProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proto", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proto = append(m.Proto[:0], dAtA[iNdEx:postIndex]...)
			if m.Proto == nil {
				m.Proto = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SUpdateFlagTypeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SUpdateFlagTypeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SUpdateFlagTypeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlagType", wireType)
			}
			m.FlagType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlagType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateFlagTypeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateFlagTypeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateFlagTypeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlagType", wireType)
			}
			m.FlagType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlagType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SUpdateMemberClassLevelProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SUpdateMemberClassLevelProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SUpdateMemberClassLevelProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassLevel", wireType)
			}
			m.ClassLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClassLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateMemberClassLevelProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateMemberClassLevelProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateMemberClassLevelProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassLevel", wireType)
			}
			m.ClassLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClassLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateSelfClassLevelProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateSelfClassLevelProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateSelfClassLevelProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassLevel", wireType)
			}
			m.ClassLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClassLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SUpdateJoinConditionProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SUpdateJoinConditionProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SUpdateJoinConditionProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejectAutoJoin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RejectAutoJoin = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredHeroLevel", wireType)
			}
			m.RequiredHeroLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequiredHeroLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredJunXianLevel", wireType)
			}
			m.RequiredJunXianLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequiredJunXianLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredTowerMaxFloor", wireType)
			}
			m.RequiredTowerMaxFloor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequiredTowerMaxFloor |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateJoinConditionProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateJoinConditionProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateJoinConditionProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejectAutoJoin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RejectAutoJoin = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredHeroLevel", wireType)
			}
			m.RequiredHeroLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequiredHeroLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredJunXianLevel", wireType)
			}
			m.RequiredJunXianLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequiredJunXianLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredTowerMaxFloor", wireType)
			}
			m.RequiredTowerMaxFloor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequiredTowerMaxFloor |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SUpdateGuildNameProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SUpdateGuildNameProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SUpdateGuildNameProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlagName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FlagName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateGuildNameProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateGuildNameProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateGuildNameProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextCanChangeTime", wireType)
			}
			m.NextCanChangeTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextCanChangeTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateGuildNameBroadcastProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateGuildNameBroadcastProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateGuildNameBroadcastProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlagName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FlagName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SUpdateGuildLabelProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SUpdateGuildLabelProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SUpdateGuildLabelProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = append(m.Label, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateGuildLabelProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateGuildLabelProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateGuildLabelProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = append(m.Label, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateContributionCoinProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateContributionCoinProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateContributionCoinProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SDonateProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SDonateProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SDonateProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CDonateProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CDonateProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CDonateProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Times", wireType)
			}
			m.Times = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Times |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildingAmount", wireType)
			}
			m.BuildingAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuildingAmount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContributionAmount", wireType)
			}
			m.ContributionAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContributionAmount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContributionTotalAmount", wireType)
			}
			m.ContributionTotalAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContributionTotalAmount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContributionAmount7", wireType)
			}
			m.ContributionAmount7 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContributionAmount7 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DonationAmount", wireType)
			}
			m.DonationAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DonationAmount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DonationTotalAmount", wireType)
			}
			m.DonationTotalAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DonationTotalAmount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DonationAmount7", wireType)
			}
			m.DonationAmount7 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DonationAmount7 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DonationTotalYuanbao", wireType)
			}
			m.DonationTotalYuanbao = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DonationTotalYuanbao |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DonateId", wireType)
			}
			m.DonateId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DonateId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SReduceUpgradeLevelCdProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SReduceUpgradeLevelCdProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SReduceUpgradeLevelCdProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Times", wireType)
			}
			m.Times = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Times |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SImpeachLeaderVoteProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SImpeachLeaderVoteProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SImpeachLeaderVoteProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = append(m.Target[:0], dAtA[iNdEx:postIndex]...)
			if m.Target == nil {
				m.Target = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CImpeachLeaderVoteProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CImpeachLeaderVoteProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CImpeachLeaderVoteProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImpeachEnd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ImpeachEnd = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Impeach", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Impeach = append(m.Impeach[:0], dAtA[iNdEx:postIndex]...)
			if m.Impeach == nil {
				m.Impeach = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SListGuildByIdsProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SListGuildByIdsProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SListGuildByIdsProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGuild
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CListGuildByIdsProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CListGuildByIdsProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CListGuildByIdsProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Guilds", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Guilds = append(m.Guilds, make([]byte, postIndex-iNdEx))
			copy(m.Guilds[len(m.Guilds)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SUserRequestJoinProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SUserRequestJoinProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SUserRequestJoinProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUserRequestJoinProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUserRequestJoinProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUserRequestJoinProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUserRemoveJoinRequestProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUserRemoveJoinRequestProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUserRemoveJoinRequestProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SUserCancelJoinRequestProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SUserCancelJoinRequestProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SUserCancelJoinRequestProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUserCancelJoinRequestProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUserCancelJoinRequestProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUserCancelJoinRequestProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CAddGuildMemberProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CAddGuildMemberProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CAddGuildMemberProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Head = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUserJoinedProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUserJoinedProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUserJoinedProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlagName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FlagName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			m.Country = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Country |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SGuildReplyJoinRequestProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SGuildReplyJoinRequestProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SGuildReplyJoinRequestProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agree", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Agree = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CGuildReplyJoinRequestProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CGuildReplyJoinRequestProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CGuildReplyJoinRequestProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agree", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Agree = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SGuildInvateOtherProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SGuildInvateOtherProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SGuildInvateOtherProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CGuildInvateOtherProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CGuildInvateOtherProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CGuildInvateOtherProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SGuildCancelInvateOtherProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SGuildCancelInvateOtherProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SGuildCancelInvateOtherProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CGuildCancelInvateOtherProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CGuildCancelInvateOtherProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CGuildCancelInvateOtherProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUserAddBeenInvateGuildProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUserAddBeenInvateGuildProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUserAddBeenInvateGuildProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUserRemoveBeenInvateGuildProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUserRemoveBeenInvateGuildProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUserRemoveBeenInvateGuildProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SUserReplyInvateRequestProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SUserReplyInvateRequestProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SUserReplyInvateRequestProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agree", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Agree = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUserReplyInvateRequestProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUserReplyInvateRequestProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUserReplyInvateRequestProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agree", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Agree = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CListInviteMeGuildProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CListInviteMeGuildProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CListInviteMeGuildProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildList = append(m.GuildList, &proto8.GuildSnapshotProto{})
			if err := m.GuildList[len(m.GuildList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SUpdateFriendGuildProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SUpdateFriendGuildProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SUpdateFriendGuildProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateFriendGuildProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateFriendGuildProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateFriendGuildProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SUpdateEnemyGuildProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SUpdateEnemyGuildProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SUpdateEnemyGuildProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateEnemyGuildProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateEnemyGuildProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateEnemyGuildProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SUpdateGuildPrestigeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SUpdateGuildPrestigeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SUpdateGuildPrestigeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			m.Target = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Target |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateGuildPrestigeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateGuildPrestigeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateGuildPrestigeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			m.Target = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Target |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldTarget", wireType)
			}
			m.OldTarget = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OldTarget |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SPlaceGuildStatueProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SPlaceGuildStatueProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SPlaceGuildStatueProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealmId", wireType)
			}
			m.RealmId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RealmId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CGuildStatueProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CGuildStatueProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CGuildStatueProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealmId", wireType)
			}
			m.RealmId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RealmId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateSeekHelpProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateSeekHelpProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateSeekHelpProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HelpType", wireType)
			}
			m.HelpType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HelpType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerPos", wireType)
			}
			m.WorkerPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkerPos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateHelpMemberTimesProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateHelpMemberTimesProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateHelpMemberTimesProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DailyHelpMemberTimes", wireType)
			}
			m.DailyHelpMemberTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DailyHelpMemberTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SSeekHelpProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SSeekHelpProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SSeekHelpProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HelpType", wireType)
			}
			m.HelpType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HelpType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerPos", wireType)
			}
			m.WorkerPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkerPos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSeekHelpProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSeekHelpProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSeekHelpProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HelpType", wireType)
			}
			m.HelpType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HelpType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerPos", wireType)
			}
			m.WorkerPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkerPos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CAddGuildSeekHelpProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CAddGuildSeekHelpProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CAddGuildSeekHelpProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SHelpGuildMemberProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SHelpGuildMemberProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SHelpGuildMemberProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CHelpGuildMemberProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CHelpGuildMemberProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CHelpGuildMemberProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CHelpAllGuildMemberProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CHelpAllGuildMemberProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CHelpAllGuildMemberProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ids = append(m.Ids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CAddGuildSeekHelpHeroIdsProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CAddGuildSeekHelpHeroIdsProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CAddGuildSeekHelpHeroIdsProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HelpHeroId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HelpHeroId = append(m.HelpHeroId[:0], dAtA[iNdEx:postIndex]...)
			if m.HelpHeroId == nil {
				m.HelpHeroId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CRemoveGuildSeekHelpProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CRemoveGuildSeekHelpProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CRemoveGuildSeekHelpProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CListGuildSeekHelpProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CListGuildSeekHelpProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CListGuildSeekHelpProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, make([]byte, postIndex-iNdEx))
			copy(m.Data[len(m.Data)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CListGuildEventPrizeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CListGuildEventPrizeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CListGuildEventPrizeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGuild
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DataId = append(m.DataId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGuild
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DataId = append(m.DataId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DataId", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ExpireTime = append(m.ExpireTime, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGuild
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ExpireTime = append(m.ExpireTime, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireTime", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeroId = append(m.HeroId, make([]byte, postIndex-iNdEx))
			copy(m.HeroId[len(m.HeroId)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeroName = append(m.HeroName, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CAddGuildEventPrizeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CAddGuildEventPrizeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CAddGuildEventPrizeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataId", wireType)
			}
			m.DataId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireTime", wireType)
			}
			m.ExpireTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeroId = append(m.HeroId[:0], dAtA[iNdEx:postIndex]...)
			if m.HeroId == nil {
				m.HeroId = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeroName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CRemoveGuildEventPrizeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CRemoveGuildEventPrizeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CRemoveGuildEventPrizeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SCollectGuildEventPrizeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCollectGuildEventPrizeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCollectGuildEventPrizeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCollectGuildEventPrizeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCollectGuildEventPrizeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCollectGuildEventPrizeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewEnergy", wireType)
			}
			m.NewEnergy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewEnergy |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prize", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prize = append(m.Prize[:0], dAtA[iNdEx:postIndex]...)
			if m.Prize == nil {
				m.Prize = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddEnergy", wireType)
			}
			m.AddEnergy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddEnergy |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateFullBigBoxProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateFullBigBoxProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateFullBigBoxProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Energy", wireType)
			}
			m.Energy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Energy |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxId", wireType)
			}
			m.BoxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BoxId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collectable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Collectable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateHeroJoinGuildTimeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateHeroJoinGuildTimeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateHeroJoinGuildTimeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinGuildTime", wireType)
			}
			m.JoinGuildTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JoinGuildTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SUpgradeTechnologyProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SUpgradeTechnologyProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SUpgradeTechnologyProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			m.Group = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Group |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpgradeTechnologyProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpgradeTechnologyProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpgradeTechnologyProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			m.Group = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Group |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SReduceTechnologyCdProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SReduceTechnologyCdProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SReduceTechnologyCdProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Times", wireType)
			}
			m.Times = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Times |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SListGuildLogsProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SListGuildLogsProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SListGuildLogsProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogType", wireType)
			}
			m.LogType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinId", wireType)
			}
			m.MinId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CListGuildLogsProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CListGuildLogsProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CListGuildLogsProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, make([]byte, postIndex-iNdEx))
			copy(m.Data[len(m.Data)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CAddGuildLogProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CAddGuildLogProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CAddGuildLogProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CRequestRecommendGuildProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CRequestRecommendGuildProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CRequestRecommendGuildProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Has", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Has = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextNotifyGuildTime", wireType)
			}
			m.NextNotifyGuildTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextNotifyGuildTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Flag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			m.Country = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Country |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CPushTechHelpableProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CPushTechHelpableProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CPushTechHelpableProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Helpable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Helpable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CHelpTechProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CHelpTechProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CHelpTechProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tech", wireType)
			}
			m.Tech = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tech |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CRecommendInviteHerosProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CRecommendInviteHerosProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CRecommendInviteHerosProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Heros", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Heros = append(m.Heros[:0], dAtA[iNdEx:postIndex]...)
			if m.Heros == nil {
				m.Heros = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SSearchNoGuildHerosProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SSearchNoGuildHerosProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SSearchNoGuildHerosProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSearchNoGuildHerosProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSearchNoGuildHerosProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSearchNoGuildHerosProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Heros", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Heros = append(m.Heros[:0], dAtA[iNdEx:postIndex]...)
			if m.Heros == nil {
				m.Heros = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CViewMcWarRecordProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CViewMcWarRecordProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CViewMcWarRecordProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Record == nil {
				m.Record = &proto8.McWarAllRecordProto{}
			}
			if err := m.Record.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Record2 == nil {
				m.Record2 = &proto8.McWarAllRecordWithJoinedProto{}
			}
			if err := m.Record2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SUpdateGuildMarkProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SUpdateGuildMarkProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SUpdateGuildMarkProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosX", wireType)
			}
			m.PosX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosX |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosY", wireType)
			}
			m.PosY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosY |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateGuildMarkProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateGuildMarkProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateGuildMarkProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mark", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mark == nil {
				m.Mark = &proto8.GuildMarkProto{}
			}
			if err := m.Mark.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CViewYinliangRecordProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CViewYinliangRecordProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CViewYinliangRecordProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Record == nil {
				m.Record = &proto8.GuildAllYinliangRecordProto{}
			}
			if err := m.Record.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SSendYinliangToOtherGuildProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SSendYinliangToOtherGuildProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SSendYinliangToOtherGuildProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gid", wireType)
			}
			m.Gid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSendYinliangToOtherGuildProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSendYinliangToOtherGuildProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSendYinliangToOtherGuildProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gid", wireType)
			}
			m.Gid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SSendYinliangToMemberProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SSendYinliangToMemberProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SSendYinliangToMemberProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemId = append(m.MemId[:0], dAtA[iNdEx:postIndex]...)
			if m.MemId == nil {
				m.MemId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSendYinliangToMemberProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSendYinliangToMemberProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSendYinliangToMemberProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemId = append(m.MemId[:0], dAtA[iNdEx:postIndex]...)
			if m.MemId == nil {
				m.MemId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CPaySalaryProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CPaySalaryProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CPaySalaryProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SSetSalaryProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SSetSalaryProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SSetSalaryProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemId = append(m.MemId[:0], dAtA[iNdEx:postIndex]...)
			if m.MemId == nil {
				m.MemId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Salary", wireType)
			}
			m.Salary = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Salary |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSetSalaryProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSetSalaryProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSetSalaryProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemId = append(m.MemId[:0], dAtA[iNdEx:postIndex]...)
			if m.MemId == nil {
				m.MemId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Salary", wireType)
			}
			m.Salary = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Salary |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateHeroGuildProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateHeroGuildProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateHeroGuildProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &proto41.HeroGuildProto{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateType", wireType)
			}
			m.UpdateType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CViewSendYinliangToGuildProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CViewSendYinliangToGuildProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CViewSendYinliangToGuildProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Guilds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Guilds == nil {
				m.Guilds = &proto8.GuildAllYinliangSendToGuildProto{}
			}
			if err := m.Guilds.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateHufuProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateHufuProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateHufuProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hufu", wireType)
			}
			m.Hufu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hufu |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SConveneProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SConveneProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SConveneProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = append(m.Target[:0], dAtA[iNdEx:postIndex]...)
			if m.Target == nil {
				m.Target = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CConveneProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CConveneProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CConveneProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = append(m.Target[:0], dAtA[iNdEx:postIndex]...)
			if m.Target == nil {
				m.Target = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCollectDailyGuildRankPrizeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCollectDailyGuildRankPrizeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCollectDailyGuildRankPrizeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prize", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prize = append(m.Prize[:0], dAtA[iNdEx:postIndex]...)
			if m.Prize == nil {
				m.Prize = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CViewDailyGuildRankProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CViewDailyGuildRankProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CViewDailyGuildRankProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rank == nil {
				m.Rank = &proto43.RankProto{}
			}
			if err := m.Rank.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CViewLastGuildRankProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CViewLastGuildRankProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CViewLastGuildRankProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SAddRecommendMcBuildProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SAddRecommendMcBuildProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SAddRecommendMcBuildProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field McId", wireType)
			}
			m.McId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.McId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CAddRecommendMcBuildProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CAddRecommendMcBuildProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CAddRecommendMcBuildProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NewMcIds = append(m.NewMcIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGuild
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NewMcIds = append(m.NewMcIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NewMcIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SViewTaskProgressProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SViewTaskProgressProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SViewTaskProgressProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CViewTaskProgressProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CViewTaskProgressProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CViewTaskProgressProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Progress = append(m.Progress, &proto1.Int32Pair{})
			if err := m.Progress[len(m.Progress)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CNoticeTaskStageUpdateProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CNoticeTaskStageUpdateProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CNoticeTaskStageUpdateProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stage", wireType)
			}
			m.Stage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stage |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SCollectTaskPrizeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCollectTaskPrizeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCollectTaskPrizeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stage", wireType)
			}
			m.Stage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stage |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCollectTaskPrizeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCollectTaskPrizeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCollectTaskPrizeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stage", wireType)
			}
			m.Stage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stage |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SGuildChangeCountryProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SGuildChangeCountryProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SGuildChangeCountryProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			m.Country = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Country |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CGuildChangeCountryProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CGuildChangeCountryProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CGuildChangeCountryProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			m.Country = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Country |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CShowWorkshopNotExistProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CShowWorkshopNotExistProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CShowWorkshopNotExistProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Show", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Show = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGuild(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGuild
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGuild(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGuild = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGuild   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/gen/pb/guild/guild.proto", fileDescriptorGuild)
}

var fileDescriptorGuild = []byte{
	// 2870 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x5a, 0xcd, 0x72, 0x1b, 0xc7,
	0xf1, 0x37, 0x08, 0x80, 0x1f, 0x43, 0x5a, 0xa2, 0x96, 0x94, 0x08, 0xd2, 0xb6, 0xc4, 0xff, 0xda,
	0x65, 0x93, 0xb6, 0xff, 0x84, 0x0c, 0x49, 0x66, 0xca, 0x87, 0xb8, 0x48, 0x48, 0x8a, 0xa0, 0x90,
	0x0a, 0xb3, 0xa0, 0x65, 0x3b, 0x17, 0x64, 0xb0, 0x3b, 0x04, 0x56, 0x5c, 0xcc, 0xc0, 0xbb, 0x0b,
	0x12, 0xf0, 0x39, 0xd7, 0xdc, 0x73, 0xc8, 0x0b, 0xf8, 0x0d, 0xf2, 0x08, 0x39, 0xe6, 0x11, 0x52,
	0x4e, 0x55, 0xf2, 0x1a, 0xa9, 0xee, 0xf9, 0xc0, 0x60, 0x09, 0x90, 0xa0, 0xa9, 0x53, 0x2e, 0xd2,
	0xce, 0x4c, 0xff, 0xba, 0x7b, 0x7a, 0x7a, 0xfa, 0x63, 0x40, 0x52, 0x69, 0x85, 0x69, 0xbb, 0xd7,
	0xdc, 0xf1, 0x45, 0xa7, 0x1c, 0x85, 0xad, 0x76, 0xda, 0xa5, 0xe7, 0xe5, 0x0e, 0x8d, 0xd8, 0x6e,
	0xb9, 0xc5, 0x78, 0xb9, 0xdb, 0x2c, 0xb7, 0x7a, 0x61, 0x14, 0xc8, 0x7f, 0x77, 0xba, 0xb1, 0x48,
	0x85, 0x53, 0xc4, 0xff, 0x36, 0x1e, 0x4f, 0x86, 0x76, 0x9b, 0xe5, 0xa4, 0x4d, 0x63, 0x16, 0x34,
	0x90, 0xb4, 0xdc, 0xa4, 0x09, 0x93, 0xe0, 0x8d, 0x27, 0xd3, 0xa3, 0x2c, 0x99, 0xd7, 0x11, 0xd6,
	0x66, 0xb1, 0xb8, 0x3e, 0x2a, 0xa6, 0xfc, 0x54, 0xa2, 0xdc, 0x43, 0x72, 0xa7, 0x5e, 0xa9, 0x1e,
	0x84, 0x49, 0xfa, 0x1b, 0xd0, 0xe0, 0x08, 0x37, 0xfd, 0x2b, 0x42, 0x50, 0x9f, 0x46, 0x14, 0x26,
	0x69, 0x69, 0x66, 0x33, 0xbf, 0xb5, 0x58, 0x59, 0x97, 0x80, 0x1d, 0x24, 0xab, 0x73, 0xda, 0x4d,
	0xda, 0x22, 0x45, 0x72, 0x6f, 0x01, 0x89, 0x81, 0x87, 0xeb, 0x93, 0x95, 0x6a, 0xa5, 0x5e, 0x67,
	0x34, 0xf6, 0xdb, 0x16, 0x43, 0x87, 0x14, 0x38, 0xed, 0xb0, 0x52, 0x6e, 0x33, 0xb7, 0xb5, 0xe0,
	0xe1, 0xb7, 0xb3, 0x4c, 0xf2, 0xbc, 0xd7, 0x29, 0xcd, 0x6c, 0xe6, 0xb6, 0x8a, 0x1e, 0x7c, 0x3a,
	0x1f, 0x93, 0xdb, 0x49, 0x5b, 0x9c, 0x37, 0x12, 0x16, 0x9d, 0x34, 0x90, 0x67, 0x29, 0xbf, 0x99,
	0xdb, 0x9a, 0xf7, 0xde, 0x85, 0xe9, 0x3a, 0x8b, 0x4e, 0x90, 0xa5, 0xfb, 0x53, 0x8e, 0xac, 0xd4,
	0x2b, 0xd5, 0x0b, 0x52, 0x56, 0x89, 0x3c, 0xad, 0x52, 0x6e, 0x33, 0xbf, 0xb5, 0xe4, 0xc9, 0xc1,
	0x2f, 0xdf, 0x8c, 0xb3, 0x4f, 0xde, 0x1d, 0x84, 0x3c, 0x0a, 0x29, 0x6f, 0x49, 0x70, 0x01, 0xc1,
	0x1f, 0xd8, 0xe0, 0xef, 0x15, 0x41, 0x9d, 0x71, 0xa9, 0x85, 0xb7, 0xa4, 0x31, 0x68, 0x90, 0x3f,
	0xa2, 0x41, 0xaa, 0x31, 0xa3, 0x29, 0xbb, 0xc2, 0x20, 0xef, 0x91, 0x85, 0x93, 0x88, 0xb6, 0x1a,
	0xb8, 0x30, 0x83, 0x0b, 0xf3, 0x30, 0xf1, 0x0a, 0x16, 0x4b, 0x64, 0xce, 0x17, 0x3d, 0x9e, 0xc6,
	0x03, 0xb4, 0x49, 0xd1, 0xd3, 0x43, 0xf7, 0x33, 0x34, 0xc6, 0x05, 0x09, 0x96, 0x31, 0x72, 0xc6,
	0x18, 0xee, 0x0b, 0x72, 0x07, 0xcf, 0x47, 0x99, 0x52, 0x92, 0x96, 0xc8, 0xdc, 0x19, 0x8b, 0x93,
	0x50, 0x70, 0x24, 0x2e, 0x7a, 0x7a, 0xe8, 0xac, 0x93, 0x79, 0x69, 0xbb, 0x30, 0x50, 0x07, 0x35,
	0x87, 0xe3, 0x5a, 0xe0, 0x56, 0xd1, 0x71, 0x32, 0x9c, 0xc6, 0x0a, 0x45, 0xfe, 0x54, 0xf2, 0x57,
	0x4c, 0xd4, 0xd0, 0x3d, 0x26, 0x1b, 0xe0, 0x7d, 0x8c, 0x9e, 0x49, 0xd5, 0x9f, 0x8b, 0xf8, 0x77,
	0x69, 0x9b, 0xc5, 0x92, 0xdb, 0x2d, 0x32, 0x13, 0x06, 0x8a, 0xd5, 0x4c, 0x18, 0x18, 0xa3, 0xcd,
	0x58, 0x46, 0x73, 0x48, 0xa1, 0xcd, 0xa8, 0x74, 0x94, 0x05, 0x0f, 0xbf, 0xdd, 0x0f, 0x71, 0x93,
	0xbf, 0x0d, 0xfd, 0xd3, 0xc9, 0xcc, 0xdc, 0x5d, 0xd4, 0xff, 0x72, 0xa2, 0x71, 0x12, 0xdd, 0x2d,
	0xe2, 0x54, 0x2b, 0xf5, 0x6f, 0xba, 0x01, 0x4d, 0xd9, 0x31, 0xeb, 0xa7, 0xe6, 0x40, 0x53, 0xd6,
	0x4f, 0xf5, 0x81, 0xc2, 0x37, 0x50, 0xd6, 0x2b, 0xd5, 0x69, 0x28, 0x1f, 0x92, 0x0d, 0xc3, 0xb3,
	0xc6, 0x53, 0x16, 0x73, 0x1a, 0x5d, 0x89, 0x30, 0xbc, 0xa7, 0x43, 0xec, 0x90, 0x92, 0x91, 0x51,
	0x8d, 0x68, 0x92, 0x80, 0x5f, 0x25, 0x59, 0x77, 0xcc, 0x9b, 0x7d, 0xee, 0x90, 0x92, 0x91, 0x30,
	0x0d, 0xfd, 0xc3, 0x2c, 0xff, 0xe3, 0x30, 0x8d, 0x58, 0xc6, 0x2f, 0x0a, 0xb6, 0x33, 0x3e, 0x21,
	0xf7, 0x0c, 0xe2, 0x79, 0x44, 0x5b, 0xc7, 0x83, 0xae, 0xa2, 0xd7, 0x57, 0x21, 0x1d, 0x74, 0x99,
	0xf2, 0x49, 0xbc, 0x0a, 0x40, 0x01, 0x30, 0xa3, 0xd8, 0x35, 0x60, 0xbf, 0x27, 0xf7, 0x8d, 0xb4,
	0x43, 0xd6, 0x69, 0xb2, 0x18, 0xb5, 0x3c, 0x60, 0x67, 0x2c, 0x1a, 0x7f, 0xfa, 0x0f, 0xc8, 0xa2,
	0x0f, 0x24, 0x8d, 0x08, 0x68, 0x94, 0xef, 0x12, 0xdf, 0xa0, 0x80, 0xa5, 0xd1, 0xe4, 0x32, 0x96,
	0xf9, 0x49, 0x2c, 0x0b, 0x17, 0x58, 0x7e, 0x4d, 0xde, 0x37, 0x2c, 0xe1, 0x72, 0x65, 0x19, 0x66,
	0x18, 0xe4, 0x2e, 0x30, 0xf8, 0x4f, 0x8e, 0xbc, 0x67, 0xf6, 0xf9, 0x52, 0x84, 0xbc, 0x2a, 0x78,
	0x10, 0xa6, 0xa1, 0xe0, 0x92, 0xc1, 0x16, 0x59, 0x8e, 0xd9, 0x1b, 0xe6, 0xa7, 0x0d, 0xda, 0x4b,
	0x45, 0xe3, 0x8d, 0x08, 0xe5, 0xad, 0x9f, 0xf7, 0x6e, 0xc9, 0xf9, 0xbd, 0x5e, 0x2a, 0x00, 0xe7,
	0xec, 0x90, 0x95, 0x98, 0xfd, 0xd0, 0x0b, 0x21, 0x6f, 0x40, 0x9e, 0x19, 0x31, 0xc3, 0x1d, 0xbd,
	0xf4, 0x82, 0xc5, 0x02, 0x25, 0x3b, 0x4f, 0xc8, 0x9a, 0xa1, 0x7f, 0xd3, 0xe3, 0x8d, 0x7e, 0x48,
	0xb9, 0xc2, 0xc8, 0x90, 0xb5, 0xaa, 0x97, 0x5f, 0xf6, 0xf8, 0x77, 0x21, 0xe5, 0x12, 0xb6, 0x4b,
	0x4a, 0x06, 0x96, 0x8a, 0x73, 0x16, 0x37, 0x3a, 0xb4, 0xdf, 0x38, 0x89, 0x84, 0x88, 0x95, 0x7d,
	0xee, 0xea, 0xf5, 0x63, 0x58, 0x3e, 0xa4, 0xfd, 0xe7, 0xb0, 0x88, 0x3b, 0x35, 0xb6, 0xfa, 0x9f,
	0xde, 0xe9, 0x4b, 0xb2, 0x66, 0x8e, 0x14, 0xe3, 0x24, 0x5c, 0xc5, 0x5f, 0x96, 0x48, 0x80, 0x97,
	0x31, 0x5a, 0x86, 0x57, 0x99, 0xac, 0x72, 0xd6, 0x4f, 0x1b, 0x3e, 0xe5, 0x0d, 0xbf, 0x4d, 0x79,
	0x8b, 0x35, 0xd2, 0xb0, 0xa3, 0x6f, 0xd2, 0x1d, 0x58, 0xab, 0x52, 0x5e, 0xc5, 0x95, 0xe3, 0xb0,
	0xc3, 0x5c, 0x9f, 0x6c, 0x5e, 0xe4, 0xb5, 0x1f, 0x0b, 0x1a, 0xf8, 0x34, 0x49, 0xb3, 0x97, 0xaa,
	0x38, 0x31, 0x88, 0x8f, 0x28, 0x9c, 0xcf, 0x28, 0x6c, 0xc7, 0x15, 0x14, 0x72, 0x40, 0x9b, 0xfa,
	0x36, 0xac, 0x92, 0x62, 0x04, 0x23, 0x15, 0x88, 0xe4, 0x00, 0x10, 0xa3, 0x6a, 0x5d, 0x89, 0x78,
	0x6c, 0x5d, 0xe4, 0xaa, 0xe0, 0x69, 0x1c, 0x36, 0x7b, 0xe0, 0x48, 0x55, 0x11, 0x72, 0x63, 0x67,
	0x5f, 0x3b, 0x50, 0xd1, 0xc3, 0x6f, 0xf7, 0x73, 0x72, 0xab, 0x5a, 0xa9, 0x3f, 0x15, 0x9c, 0xa6,
	0xca, 0x82, 0x1b, 0x64, 0x3e, 0x61, 0x3f, 0xf4, 0x18, 0xf7, 0x4d, 0xfc, 0xd1, 0x63, 0xf7, 0xdf,
	0x79, 0x72, 0xab, 0x5e, 0xa9, 0x4e, 0x49, 0x0e, 0x8a, 0x82, 0xf1, 0x13, 0xe5, 0x85, 0x72, 0xe0,
	0x7c, 0x42, 0x6e, 0x37, 0x61, 0x47, 0x21, 0x6f, 0x35, 0x68, 0x07, 0x2a, 0x00, 0xe5, 0x71, 0xb7,
	0xf4, 0xf4, 0x1e, 0xce, 0x3a, 0x65, 0xb2, 0xe2, 0x5b, 0x1b, 0xd1, 0xc4, 0xd2, 0xcd, 0x1c, 0x7b,
	0x49, 0x01, 0xbe, 0x22, 0xeb, 0x23, 0x80, 0x54, 0xa4, 0x34, 0xd2, 0xb0, 0x22, 0xc2, 0xd6, 0x6c,
	0x82, 0x63, 0x58, 0x57, 0xd8, 0x2f, 0xc8, 0xea, 0x18, 0x61, 0xbb, 0xa5, 0x59, 0x84, 0xad, 0x5c,
	0x94, 0xb6, 0x0b, 0x1b, 0x09, 0xc0, 0x12, 0x96, 0x6e, 0x73, 0x72, 0x23, 0x7a, 0x5a, 0xf1, 0xae,
	0x90, 0xbb, 0x86, 0x70, 0x44, 0xa7, 0x79, 0xc9, 0x5c, 0x2f, 0xda, 0xfa, 0x6c, 0x93, 0xe5, 0x0c,
	0xf3, 0xdd, 0xd2, 0x02, 0x92, 0xdf, 0x1e, 0xe5, 0xbe, 0xeb, 0x3c, 0x26, 0xf7, 0x32, 0xec, 0x07,
	0x3d, 0xca, 0x9b, 0x54, 0x94, 0x16, 0xe5, 0x4d, 0x1e, 0xe1, 0xff, 0xbd, 0x5c, 0x03, 0x87, 0xc5,
	0x79, 0x06, 0x85, 0xd1, 0x92, 0x3c, 0x39, 0x39, 0x51, 0x0b, 0xdc, 0xc7, 0xe4, 0xfd, 0x6a, 0xa5,
	0xee, 0xb1, 0xa0, 0xe7, 0xb3, 0x6f, 0xba, 0xad, 0x98, 0x06, 0x0c, 0xef, 0x7f, 0x75, 0x58, 0x24,
	0xc9, 0x93, 0xcd, 0x59, 0x27, 0xeb, 0x3e, 0x22, 0xeb, 0xd5, 0x4a, 0xbd, 0xd6, 0xe9, 0x32, 0xea,
	0xb7, 0x0f, 0x18, 0x0d, 0x58, 0xfc, 0x5a, 0x68, 0x47, 0xb9, 0x47, 0x66, 0x53, 0x1a, 0xb7, 0x58,
	0xaa, 0xb2, 0x93, 0x1a, 0xb9, 0xaf, 0xc9, 0x7a, 0xbd, 0x52, 0x9d, 0x00, 0x7a, 0x40, 0x16, 0x43,
	0xb9, 0xd2, 0x60, 0x3c, 0x50, 0xa1, 0x8f, 0xa8, 0xa9, 0x67, 0x3c, 0x80, 0xba, 0x4c, 0x8d, 0xd0,
	0xc9, 0x96, 0x3c, 0x3d, 0x74, 0x77, 0x30, 0x33, 0x9b, 0xae, 0x60, 0x7f, 0x50, 0x0b, 0x12, 0xad,
	0x7c, 0x3e, 0x0c, 0x12, 0xbc, 0x3d, 0xc5, 0xfd, 0x99, 0xe5, 0x77, 0x3c, 0x18, 0xba, 0x0f, 0x31,
	0x25, 0x8f, 0xa3, 0xbf, 0x47, 0x66, 0xb1, 0x62, 0x4c, 0x54, 0x51, 0xae, 0x46, 0xee, 0xb6, 0x0c,
	0x69, 0x09, 0x8b, 0x3d, 0xf0, 0xf8, 0x24, 0x7d, 0x69, 0xae, 0x5a, 0x26, 0x62, 0x00, 0x29, 0x5c,
	0xce, 0x69, 0x48, 0xcb, 0xe4, 0x03, 0x43, 0xda, 0x11, 0x67, 0x98, 0x15, 0x14, 0x68, 0x22, 0x40,
	0xa9, 0x51, 0xa5, 0xdc, 0x67, 0xd1, 0x34, 0x00, 0x25, 0x61, 0x4a, 0xc0, 0x11, 0x9a, 0x66, 0x2f,
	0x08, 0xd0, 0x32, 0xb2, 0x4a, 0xb8, 0x59, 0x79, 0x2b, 0x64, 0x59, 0x99, 0xb0, 0x18, 0x84, 0xb3,
	0xe0, 0xed, 0xc4, 0x59, 0xbb, 0xc3, 0x28, 0x8c, 0x76, 0x18, 0xcf, 0xd0, 0x48, 0xa8, 0xbf, 0xc7,
	0xba, 0xd1, 0xe0, 0x92, 0x3d, 0xcb, 0x9d, 0xac, 0x92, 0x22, 0x6d, 0xc5, 0x4c, 0x0a, 0x9f, 0xf7,
	0xe4, 0x00, 0xd8, 0xd4, 0x2b, 0xd5, 0x1b, 0xb3, 0xf9, 0x14, 0xf3, 0x01, 0xb2, 0xa9, 0xf1, 0x33,
	0x9a, 0xb2, 0x4b, 0x8a, 0xfc, 0x4f, 0x31, 0x13, 0x4c, 0x47, 0xfb, 0x10, 0xeb, 0x43, 0xa4, 0x95,
	0x47, 0x3b, 0x0d, 0x42, 0x73, 0xbf, 0x16, 0x02, 0x8e, 0x6e, 0x2f, 0x08, 0xf6, 0x19, 0xe3, 0x12,
	0x61, 0x75, 0x50, 0x59, 0xf7, 0x79, 0x44, 0xfe, 0x6f, 0xc4, 0xa3, 0xa7, 0x02, 0x3d, 0x97, 0xa5,
	0x2e, 0x82, 0xba, 0xd1, 0x40, 0xd2, 0x5f, 0xe6, 0xa5, 0x13, 0x4c, 0xfd, 0xdc, 0xa8, 0x7b, 0x33,
	0x3e, 0xdf, 0x60, 0x98, 0x82, 0xf0, 0x50, 0xe3, 0x67, 0x21, 0xd4, 0xca, 0x13, 0x1f, 0x1b, 0x72,
	0xd7, 0x78, 0x6c, 0x28, 0x63, 0xc8, 0x54, 0x8d, 0x40, 0x1c, 0x32, 0x1e, 0x8c, 0x76, 0xd8, 0x17,
	0x5a, 0xa0, 0x32, 0xea, 0x71, 0x0d, 0x80, 0xdd, 0x33, 0x3d, 0xe3, 0xac, 0x33, 0xb8, 0x9a, 0xde,
	0x08, 0x98, 0x86, 0xfe, 0x89, 0x55, 0xab, 0x2b, 0x52, 0x96, 0xa4, 0x61, 0x6b, 0x6c, 0xd8, 0x2f,
	0x9a, 0xb0, 0x7f, 0x6c, 0x15, 0xbe, 0xd3, 0xc3, 0x9c, 0x0f, 0x08, 0x11, 0x51, 0xd0, 0x50, 0x6b,
	0xb2, 0xae, 0x58, 0x10, 0x51, 0x70, 0x2c, 0xb9, 0x3e, 0xc1, 0xcd, 0x1e, 0x45, 0xd4, 0x97, 0x4c,
	0xeb, 0x29, 0x4d, 0x7b, 0x8a, 0xe5, 0x3a, 0x99, 0x8f, 0x19, 0x8d, 0x3a, 0x0d, 0x73, 0xda, 0x73,
	0x38, 0xae, 0x81, 0x4f, 0xaf, 0xe8, 0x5b, 0x30, 0x25, 0x22, 0xb2, 0x1a, 0xb8, 0x3a, 0x63, 0xa7,
	0x2f, 0x58, 0xd4, 0x35, 0x0d, 0x5c, 0x9b, 0x45, 0xdd, 0x91, 0x06, 0x0e, 0x26, 0xa0, 0x81, 0x03,
	0xf5, 0xcf, 0x45, 0x7c, 0xca, 0xe2, 0x46, 0x57, 0xe8, 0xb2, 0x68, 0x41, 0xce, 0x1c, 0x89, 0x04,
	0x76, 0xcd, 0x38, 0x6d, 0x46, 0x4c, 0x3d, 0x1a, 0xa9, 0x91, 0xfb, 0x5a, 0x46, 0x6c, 0x94, 0x06,
	0x92, 0x64, 0x08, 0x86, 0xfa, 0x55, 0xa5, 0xa8, 0x27, 0x64, 0x2d, 0xa0, 0x61, 0x34, 0x68, 0xa0,
	0xe8, 0x0e, 0x2e, 0x37, 0xec, 0x0c, 0xbd, 0x8a, 0xcb, 0x19, 0xac, 0xfb, 0x8a, 0x2c, 0xe3, 0x53,
	0xca, 0x5b, 0xd2, 0x1f, 0xf8, 0xe1, 0x83, 0xca, 0xdb, 0xe2, 0x27, 0x7d, 0x51, 0x27, 0x9e, 0x51,
	0xbe, 0x0e, 0x29, 0x04, 0x34, 0xa5, 0x2a, 0x32, 0xe1, 0xb7, 0xca, 0xc8, 0x40, 0x73, 0x49, 0xa6,
	0x5a, 0xb0, 0x32, 0xf2, 0x54, 0xa4, 0x3b, 0xf8, 0x4e, 0x01, 0xa4, 0x7b, 0x51, 0x74, 0x81, 0x7a,
	0x79, 0x58, 0x4d, 0x2c, 0xc8, 0x4a, 0xa2, 0x4e, 0x1e, 0x8c, 0xd1, 0x1a, 0x5a, 0x2f, 0x53, 0x52,
	0x64, 0x44, 0x38, 0x9b, 0x64, 0x09, 0x8d, 0x84, 0x9d, 0x9b, 0x7a, 0xa8, 0x5a, 0xf2, 0x48, 0xdb,
	0xe0, 0xdc, 0xff, 0xc7, 0xfb, 0x22, 0x03, 0xe8, 0x18, 0x6b, 0x64, 0x75, 0x2e, 0x9b, 0x70, 0x75,
	0xa9, 0xe9, 0xf2, 0xc6, 0x74, 0x3f, 0xc9, 0x4e, 0xd4, 0x20, 0x9e, 0x9d, 0x31, 0x9e, 0x1e, 0xc5,
	0xe1, 0x8f, 0xa6, 0x49, 0x93, 0x02, 0x74, 0xcd, 0x04, 0x5a, 0xbf, 0x47, 0xe6, 0x00, 0x2b, 0x15,
	0xd6, 0x0b, 0xb3, 0x30, 0x55, 0x0b, 0x9c, 0x0f, 0xc9, 0x22, 0xeb, 0x77, 0xc3, 0x58, 0x35, 0x60,
	0x79, 0x43, 0x40, 0xe4, 0x34, 0x78, 0xa0, 0xb3, 0x46, 0xe6, 0xf4, 0x96, 0x0b, 0xb2, 0xb6, 0x6a,
	0xe3, 0x76, 0xa5, 0xd7, 0xc4, 0x42, 0xa6, 0xf9, 0x22, 0xda, 0x76, 0x1e, 0x26, 0xb0, 0x9d, 0xfa,
	0x6b, 0x0e, 0x4f, 0x44, 0x5b, 0x38, 0xab, 0x6a, 0x36, 0xa0, 0xaf, 0xd9, 0x6a, 0x62, 0x30, 0x51,
	0x2a, 0x3e, 0xc8, 0xaa, 0x88, 0x0f, 0x11, 0x93, 0xd4, 0xcb, 0x4d, 0x56, 0x2f, 0x37, 0xa2, 0x9e,
	0xac, 0xaf, 0xac, 0xa3, 0xba, 0x42, 0x41, 0x95, 0xb6, 0xab, 0x22, 0x8a, 0x98, 0x9f, 0x4e, 0x85,
	0xf8, 0x53, 0x0e, 0xd3, 0xda, 0x35, 0x20, 0x70, 0xd5, 0x38, 0x3b, 0x6f, 0x30, 0xce, 0xe2, 0xd6,
	0x40, 0x5f, 0x35, 0xce, 0xce, 0x9f, 0xe1, 0x84, 0x7c, 0xde, 0x0a, 0x7f, 0x64, 0xea, 0xa1, 0x47,
	0x0e, 0x00, 0x44, 0x83, 0x40, 0x83, 0x64, 0x4d, 0xb5, 0x40, 0x83, 0x40, 0x82, 0xdc, 0x53, 0x2b,
	0x57, 0x3c, 0xef, 0x45, 0xd1, 0x7e, 0xd8, 0xda, 0x17, 0x7d, 0x13, 0xc1, 0x15, 0x4c, 0xda, 0x55,
	0x8d, 0x9c, 0xbb, 0x64, 0xb6, 0x29, 0xfa, 0xda, 0xa4, 0x45, 0xaf, 0xd8, 0x14, 0xfd, 0x1a, 0xdc,
	0x80, 0x45, 0x5f, 0xee, 0x06, 0xe3, 0x5f, 0x11, 0xe3, 0x9f, 0x3d, 0xe5, 0xd6, 0xf0, 0x5a, 0xe9,
	0x20, 0x18, 0xe3, 0xb3, 0x07, 0xee, 0x1c, 0x8e, 0x4a, 0xca, 0xfc, 0x98, 0xdc, 0x7e, 0x23, 0x42,
	0x2e, 0x1f, 0xde, 0xed, 0xc6, 0xff, 0xdd, 0x37, 0x36, 0xb1, 0xfb, 0x85, 0xca, 0xba, 0xd8, 0xd8,
	0x1c, 0x33, 0xbf, 0xcd, 0x45, 0x24, 0x5a, 0x03, 0xd3, 0xdb, 0xb4, 0x62, 0xd1, 0xeb, 0xea, 0xde,
	0x06, 0x07, 0xee, 0x81, 0xca, 0xbb, 0xd3, 0x43, 0x20, 0x7d, 0x30, 0xae, 0xd4, 0x50, 0x8f, 0xc6,
	0x8c, 0x4b, 0x05, 0x2a, 0xf8, 0x58, 0x2a, 0xfb, 0xab, 0x21, 0xb3, 0xcb, 0xbb, 0xab, 0x06, 0xb9,
	0x6b, 0x37, 0x34, 0x07, 0xa2, 0x95, 0x98, 0x34, 0x15, 0x89, 0x91, 0x17, 0xc3, 0xb9, 0x48, 0xe0,
	0x83, 0x21, 0x18, 0xbb, 0x13, 0xf2, 0xa1, 0xe7, 0x17, 0x3b, 0x21, 0xaf, 0x61, 0x89, 0xe3, 0x5b,
	0x8d, 0xb7, 0x1c, 0xb8, 0x9f, 0x91, 0xbb, 0x76, 0x04, 0x18, 0x0a, 0x18, 0x17, 0x2f, 0xb6, 0x31,
	0x65, 0xea, 0x2b, 0x78, 0x20, 0x5a, 0x93, 0xa3, 0xf2, 0xdf, 0x72, 0xea, 0x42, 0x60, 0xd1, 0xe5,
	0x31, 0x5f, 0x74, 0x3a, 0xa3, 0x75, 0xcb, 0x32, 0xc9, 0xb7, 0x69, 0xa2, 0xda, 0x3b, 0xf8, 0x74,
	0x1e, 0x91, 0x7b, 0xf8, 0x8e, 0xc3, 0x45, 0x1a, 0x9e, 0x0c, 0xec, 0x03, 0x95, 0x1b, 0x59, 0x81,
	0xd5, 0x57, 0xb8, 0x68, 0x8e, 0xd5, 0x7a, 0xa9, 0x1c, 0xed, 0x1f, 0x0a, 0xa3, 0xdd, 0x08, 0xb4,
	0x0b, 0xea, 0xd2, 0xe2, 0xb7, 0xdd, 0x36, 0xcc, 0x8e, 0xb6, 0x0d, 0x5f, 0xa2, 0x83, 0x1f, 0xf5,
	0x92, 0x36, 0x9c, 0x12, 0x44, 0x50, 0x70, 0x45, 0xf3, 0xf2, 0xd1, 0x56, 0x13, 0x4a, 0x73, 0x33,
	0x76, 0x3f, 0xc6, 0x44, 0x08, 0xf4, 0x80, 0xb3, 0x8a, 0x27, 0xbf, 0xad, 0x9f, 0x5f, 0xe0, 0x1b,
	0xfa, 0x6c, 0xb4, 0x8c, 0x32, 0x89, 0x2c, 0x2d, 0xc1, 0xb9, 0x4d, 0xab, 0x5a, 0x84, 0xb0, 0x92,
	0xe8, 0x1f, 0x23, 0x70, 0xe0, 0x3e, 0x45, 0xef, 0x91, 0xbf, 0x1d, 0xbd, 0x12, 0xb8, 0x7f, 0x0b,
	0xa3, 0x77, 0x9d, 0x1f, 0xdd, 0x75, 0x97, 0xb6, 0x98, 0xba, 0x72, 0xf8, 0x0d, 0x3e, 0x68, 0x7e,
	0x81, 0xba, 0xc8, 0x65, 0xbc, 0xe4, 0x3f, 0xe7, 0x30, 0x6d, 0xbe, 0x0e, 0xd9, 0xf9, 0xa1, 0xff,
	0x2d, 0x8d, 0x41, 0xf3, 0x58, 0x1d, 0x62, 0x85, 0xcc, 0xc6, 0x38, 0x44, 0xc8, 0x62, 0x65, 0x43,
	0x15, 0xc0, 0x48, 0xb8, 0x17, 0x45, 0x16, 0xad, 0xa7, 0x28, 0x9d, 0x5f, 0x93, 0x39, 0xf9, 0x55,
	0xc1, 0x73, 0x5d, 0xac, 0x7c, 0x34, 0x16, 0xf4, 0x6d, 0x98, 0xb6, 0xad, 0x46, 0xd1, 0xd3, 0x20,
	0xf7, 0x34, 0xfb, 0xaa, 0x78, 0x48, 0xe3, 0x53, 0xb3, 0x81, 0x90, 0x07, 0xac, 0xaf, 0x3d, 0x1f,
	0x07, 0xce, 0x0a, 0x29, 0x76, 0x45, 0xd2, 0xe8, 0x2b, 0x2f, 0x29, 0x74, 0x45, 0xf2, 0x9d, 0x9e,
	0x1c, 0x18, 0xf3, 0x88, 0xe4, 0x7b, 0xf0, 0xc9, 0x4e, 0xa2, 0xfd, 0x04, 0x3e, 0xdd, 0xa7, 0xd9,
	0x67, 0xc7, 0xa1, 0xb0, 0x6d, 0x52, 0xe8, 0xd0, 0xf8, 0x54, 0xed, 0xfc, 0xae, 0x5d, 0xfa, 0x1b,
	0x22, 0x0f, 0x49, 0xdc, 0xef, 0xd0, 0xec, 0x60, 0x41, 0xfd, 0xbb, 0x9b, 0x6d, 0xc4, 0xaf, 0x32,
	0x46, 0x74, 0x6d, 0x56, 0x7b, 0x51, 0x34, 0x06, 0xa3, 0x8d, 0xe9, 0x1e, 0x90, 0x4d, 0x74, 0x0b,
	0x6e, 0x7e, 0xd1, 0x3b, 0x16, 0xd8, 0xc8, 0x8d, 0xde, 0xb4, 0x96, 0x49, 0x0b, 0xf0, 0x09, 0x71,
	0x5a, 0xbd, 0x46, 0xa9, 0xe4, 0x28, 0x47, 0xc0, 0x0d, 0xdd, 0xe3, 0xed, 0x70, 0x3b, 0xc4, 0x07,
	0xa5, 0x51, 0x6e, 0x76, 0x15, 0x05, 0x81, 0x8a, 0x99, 0x42, 0x7b, 0xc9, 0x2b, 0x76, 0x58, 0xa7,
	0x76, 0x29, 0xbb, 0x0b, 0xca, 0xdd, 0x80, 0xdd, 0x67, 0xf8, 0x43, 0xda, 0x11, 0x1d, 0xd4, 0x69,
	0x44, 0xe3, 0x81, 0x49, 0x60, 0x8a, 0x38, 0x37, 0x42, 0xbc, 0xaf, 0x7e, 0x7f, 0x4c, 0x6d, 0xe2,
	0xc9, 0x02, 0x13, 0xa4, 0xd2, 0x02, 0xe5, 0x08, 0x78, 0xa0, 0xfe, 0x37, 0xe1, 0xc1, 0x2c, 0x77,
	0x84, 0x8b, 0x6b, 0x9d, 0xcb, 0xb6, 0x15, 0x85, 0x87, 0xee, 0x38, 0x4a, 0x24, 0x83, 0x33, 0xd4,
	0x40, 0x3d, 0x64, 0x21, 0xf3, 0x87, 0xfa, 0x81, 0x48, 0x4e, 0xe1, 0x6f, 0x4e, 0x4d, 0x4c, 0xbb,
	0xe0, 0xaf, 0xa3, 0xe6, 0xb6, 0xc4, 0x7d, 0x6d, 0x3d, 0x90, 0x81, 0xc0, 0x4f, 0x26, 0x38, 0x2d,
	0x30, 0xb0, 0x81, 0xe6, 0x25, 0xcd, 0xfe, 0x95, 0xf1, 0x45, 0xef, 0xa4, 0x67, 0x02, 0x59, 0xbb,
	0x77, 0xd2, 0xd3, 0x01, 0x13, 0xbe, 0xdd, 0x6d, 0x72, 0x1b, 0x4b, 0x25, 0x7e, 0xc6, 0xf8, 0x15,
	0x0f, 0x8b, 0xdb, 0xe4, 0x36, 0x96, 0x48, 0x53, 0x90, 0x7e, 0x45, 0xdc, 0x61, 0x35, 0xf5, 0x14,
	0x3a, 0x25, 0xf9, 0xc4, 0x43, 0xf9, 0xa9, 0x55, 0x51, 0x99, 0x12, 0x29, 0x67, 0x95, 0x48, 0xee,
	0xbe, 0xb9, 0xcf, 0x59, 0x20, 0x60, 0x3e, 0x22, 0x85, 0x98, 0xf2, 0x53, 0x15, 0xdd, 0x96, 0x95,
	0x61, 0xcc, 0xba, 0x87, 0xab, 0xaa, 0x5a, 0x07, 0x1e, 0x07, 0x54, 0x65, 0xdf, 0x21, 0x0b, 0x47,
	0xb1, 0x50, 0x66, 0x40, 0x40, 0x05, 0x9b, 0xee, 0xbd, 0x20, 0x30, 0xa9, 0xe3, 0xd0, 0xdf, 0x1f,
	0x1e, 0xc8, 0x0a, 0x29, 0x76, 0xfc, 0x61, 0xd7, 0x5a, 0xe8, 0xf8, 0xb5, 0xc0, 0xfd, 0x1a, 0x0b,
	0xfc, 0x89, 0x98, 0x4d, 0x59, 0x1f, 0x22, 0xce, 0x7e, 0x1c, 0x9d, 0xe7, 0x10, 0xeb, 0x6b, 0x41,
	0xe2, 0x3e, 0xc6, 0xe6, 0x1a, 0xb4, 0x3c, 0xa6, 0x09, 0x28, 0xd7, 0x8a, 0x59, 0x92, 0x5c, 0xf1,
	0xfb, 0xbb, 0xdb, 0xc4, 0x14, 0x7a, 0x4d, 0x94, 0xf3, 0x39, 0x99, 0xef, 0x2a, 0x52, 0xf5, 0xf7,
	0x0e, 0xda, 0x76, 0x35, 0x9e, 0x3e, 0xaa, 0x1c, 0xd1, 0x30, 0xf6, 0x0c, 0x85, 0xfb, 0x0a, 0x0b,
	0x0c, 0x28, 0x07, 0x7c, 0x06, 0x52, 0xea, 0x29, 0x6d, 0x31, 0xe9, 0x4e, 0x52, 0xd0, 0x1a, 0x99,
	0x4b, 0x69, 0x72, 0x3a, 0x34, 0xc9, 0x2c, 0x0c, 0x65, 0x25, 0x94, 0x00, 0xb1, 0xce, 0x12, 0x38,
	0x70, 0x6b, 0xb8, 0x53, 0xe5, 0x0f, 0x52, 0x6d, 0xe3, 0x05, 0xd7, 0x67, 0x35, 0x74, 0xad, 0x9b,
	0xb1, 0xfa, 0x12, 0xd3, 0xbe, 0x7c, 0xab, 0xc3, 0x1f, 0xb0, 0xaa, 0xb2, 0x4a, 0x31, 0xb6, 0xd4,
	0x45, 0x4c, 0x2e, 0x5b, 0xc4, 0x6c, 0x98, 0x37, 0xbe, 0xeb, 0xe0, 0x2a, 0x32, 0xc8, 0xb6, 0xc5,
	0xf9, 0xb7, 0x22, 0x3e, 0x4d, 0xda, 0xa2, 0xfb, 0x4a, 0xa4, 0xcf, 0xfa, 0x61, 0x32, 0xfc, 0x85,
	0x3e, 0x69, 0x8b, 0x73, 0x55, 0xfc, 0xe0, 0xf7, 0xfe, 0xfa, 0xdf, 0x7f, 0xbe, 0x9f, 0xfb, 0xc7,
	0xcf, 0xf7, 0x73, 0xff, 0xfc, 0xf9, 0x7e, 0xee, 0x2f, 0xff, 0xba, 0xff, 0xce, 0x8b, 0xdc, 0x1f,
	0x8a, 0x78, 0xcb, 0x9b, 0xb3, 0x78, 0x7e, 0x8f, 0xfe, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xc7, 0xee,
	0x75, 0x1b, 0xc3, 0x24, 0x00, 0x00,
}
