// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/gen/pb/mingc/mingc.proto
// DO NOT EDIT!

/*
	Package mingc is a generated protocol buffer package.

	It is generated from these files:
		github.com/lightpaw/male7/gen/pb/mingc/mingc.proto

	It has these top-level messages:
		C2SMingcListProto
		S2CMingcListProto
		C2SViewMingcProto
		S2CViewMingcProto
		C2SMcBuildProto
		S2CMcBuildProto
		C2SMcBuildLogProto
		S2CMcBuildLogProto
		C2SMingcHostGuildProto
		S2CMingcHostGuildProto
*/
package mingc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import proto8 "github.com/lightpaw/male7/pb/shared_proto"
import proto9 "github.com/lightpaw/male7/pb/shared_proto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type C2SMingcListProto struct {
	Ver int32 `protobuf:"varint,2,opt,name=ver,proto3" json:"ver,omitempty"`
}

func (m *C2SMingcListProto) Reset()                    { *m = C2SMingcListProto{} }
func (m *C2SMingcListProto) String() string            { return proto.CompactTextString(m) }
func (*C2SMingcListProto) ProtoMessage()               {}
func (*C2SMingcListProto) Descriptor() ([]byte, []int) { return fileDescriptorMingc, []int{0} }

func (m *C2SMingcListProto) GetVer() int32 {
	if m != nil {
		return m.Ver
	}
	return 0
}

type S2CMingcListProto struct {
	Ver    int32               `protobuf:"varint,3,opt,name=ver,proto3" json:"ver,omitempty"`
	Mingcs *proto9.MingcsProto `protobuf:"bytes,2,opt,name=mingcs" json:"mingcs,omitempty"`
}

func (m *S2CMingcListProto) Reset()                    { *m = S2CMingcListProto{} }
func (m *S2CMingcListProto) String() string            { return proto.CompactTextString(m) }
func (*S2CMingcListProto) ProtoMessage()               {}
func (*S2CMingcListProto) Descriptor() ([]byte, []int) { return fileDescriptorMingc, []int{1} }

func (m *S2CMingcListProto) GetVer() int32 {
	if m != nil {
		return m.Ver
	}
	return 0
}

func (m *S2CMingcListProto) GetMingcs() *proto9.MingcsProto {
	if m != nil {
		return m.Mingcs
	}
	return nil
}

type C2SViewMingcProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SViewMingcProto) Reset()                    { *m = C2SViewMingcProto{} }
func (m *C2SViewMingcProto) String() string            { return proto.CompactTextString(m) }
func (*C2SViewMingcProto) ProtoMessage()               {}
func (*C2SViewMingcProto) Descriptor() ([]byte, []int) { return fileDescriptorMingc, []int{2} }

func (m *C2SViewMingcProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type S2CViewMingcProto struct {
	Mingc *proto9.MingcProto `protobuf:"bytes,1,opt,name=mingc" json:"mingc,omitempty"`
}

func (m *S2CViewMingcProto) Reset()                    { *m = S2CViewMingcProto{} }
func (m *S2CViewMingcProto) String() string            { return proto.CompactTextString(m) }
func (*S2CViewMingcProto) ProtoMessage()               {}
func (*S2CViewMingcProto) Descriptor() ([]byte, []int) { return fileDescriptorMingc, []int{3} }

func (m *S2CViewMingcProto) GetMingc() *proto9.MingcProto {
	if m != nil {
		return m.Mingc
	}
	return nil
}

type C2SMcBuildProto struct {
	McId int32 `protobuf:"varint,1,opt,name=mc_id,json=mcId,proto3" json:"mc_id,omitempty"`
}

func (m *C2SMcBuildProto) Reset()                    { *m = C2SMcBuildProto{} }
func (m *C2SMcBuildProto) String() string            { return proto.CompactTextString(m) }
func (*C2SMcBuildProto) ProtoMessage()               {}
func (*C2SMcBuildProto) Descriptor() ([]byte, []int) { return fileDescriptorMingc, []int{4} }

func (m *C2SMcBuildProto) GetMcId() int32 {
	if m != nil {
		return m.McId
	}
	return 0
}

type S2CMcBuildProto struct {
	McId                 int32 `protobuf:"varint,1,opt,name=mc_id,json=mcId,proto3" json:"mc_id,omitempty"`
	NewLevel             int32 `protobuf:"varint,3,opt,name=new_level,json=newLevel,proto3" json:"new_level,omitempty"`
	NewSupport           int32 `protobuf:"varint,4,opt,name=new_support,json=newSupport,proto3" json:"new_support,omitempty"`
	NewDailyAddedSupport int32 `protobuf:"varint,7,opt,name=new_daily_added_support,json=newDailyAddedSupport,proto3" json:"new_daily_added_support,omitempty"`
	NextTime             int32 `protobuf:"varint,5,opt,name=next_time,json=nextTime,proto3" json:"next_time,omitempty"`
}

func (m *S2CMcBuildProto) Reset()                    { *m = S2CMcBuildProto{} }
func (m *S2CMcBuildProto) String() string            { return proto.CompactTextString(m) }
func (*S2CMcBuildProto) ProtoMessage()               {}
func (*S2CMcBuildProto) Descriptor() ([]byte, []int) { return fileDescriptorMingc, []int{5} }

func (m *S2CMcBuildProto) GetMcId() int32 {
	if m != nil {
		return m.McId
	}
	return 0
}

func (m *S2CMcBuildProto) GetNewLevel() int32 {
	if m != nil {
		return m.NewLevel
	}
	return 0
}

func (m *S2CMcBuildProto) GetNewSupport() int32 {
	if m != nil {
		return m.NewSupport
	}
	return 0
}

func (m *S2CMcBuildProto) GetNewDailyAddedSupport() int32 {
	if m != nil {
		return m.NewDailyAddedSupport
	}
	return 0
}

func (m *S2CMcBuildProto) GetNextTime() int32 {
	if m != nil {
		return m.NextTime
	}
	return 0
}

type C2SMcBuildLogProto struct {
	McId int32 `protobuf:"varint,1,opt,name=mc_id,json=mcId,proto3" json:"mc_id,omitempty"`
}

func (m *C2SMcBuildLogProto) Reset()                    { *m = C2SMcBuildLogProto{} }
func (m *C2SMcBuildLogProto) String() string            { return proto.CompactTextString(m) }
func (*C2SMcBuildLogProto) ProtoMessage()               {}
func (*C2SMcBuildLogProto) Descriptor() ([]byte, []int) { return fileDescriptorMingc, []int{6} }

func (m *C2SMcBuildLogProto) GetMcId() int32 {
	if m != nil {
		return m.McId
	}
	return 0
}

type S2CMcBuildLogProto struct {
	Logs *proto9.GuildMcBuildProto `protobuf:"bytes,1,opt,name=logs" json:"logs,omitempty"`
}

func (m *S2CMcBuildLogProto) Reset()                    { *m = S2CMcBuildLogProto{} }
func (m *S2CMcBuildLogProto) String() string            { return proto.CompactTextString(m) }
func (*S2CMcBuildLogProto) ProtoMessage()               {}
func (*S2CMcBuildLogProto) Descriptor() ([]byte, []int) { return fileDescriptorMingc, []int{7} }

func (m *S2CMcBuildLogProto) GetLogs() *proto9.GuildMcBuildProto {
	if m != nil {
		return m.Logs
	}
	return nil
}

type C2SMingcHostGuildProto struct {
	McId int32 `protobuf:"varint,1,opt,name=mc_id,json=mcId,proto3" json:"mc_id,omitempty"`
}

func (m *C2SMingcHostGuildProto) Reset()                    { *m = C2SMingcHostGuildProto{} }
func (m *C2SMingcHostGuildProto) String() string            { return proto.CompactTextString(m) }
func (*C2SMingcHostGuildProto) ProtoMessage()               {}
func (*C2SMingcHostGuildProto) Descriptor() ([]byte, []int) { return fileDescriptorMingc, []int{8} }

func (m *C2SMingcHostGuildProto) GetMcId() int32 {
	if m != nil {
		return m.McId
	}
	return 0
}

type S2CMingcHostGuildProto struct {
	Guild *proto8.GuildSnapshotProto `protobuf:"bytes,1,opt,name=guild" json:"guild,omitempty"`
}

func (m *S2CMingcHostGuildProto) Reset()                    { *m = S2CMingcHostGuildProto{} }
func (m *S2CMingcHostGuildProto) String() string            { return proto.CompactTextString(m) }
func (*S2CMingcHostGuildProto) ProtoMessage()               {}
func (*S2CMingcHostGuildProto) Descriptor() ([]byte, []int) { return fileDescriptorMingc, []int{9} }

func (m *S2CMingcHostGuildProto) GetGuild() *proto8.GuildSnapshotProto {
	if m != nil {
		return m.Guild
	}
	return nil
}

func init() {
	proto.RegisterType((*C2SMingcListProto)(nil), "proto.C2SMingcListProto")
	proto.RegisterType((*S2CMingcListProto)(nil), "proto.S2CMingcListProto")
	proto.RegisterType((*C2SViewMingcProto)(nil), "proto.C2SViewMingcProto")
	proto.RegisterType((*S2CViewMingcProto)(nil), "proto.S2CViewMingcProto")
	proto.RegisterType((*C2SMcBuildProto)(nil), "proto.C2SMcBuildProto")
	proto.RegisterType((*S2CMcBuildProto)(nil), "proto.S2CMcBuildProto")
	proto.RegisterType((*C2SMcBuildLogProto)(nil), "proto.C2SMcBuildLogProto")
	proto.RegisterType((*S2CMcBuildLogProto)(nil), "proto.S2CMcBuildLogProto")
	proto.RegisterType((*C2SMingcHostGuildProto)(nil), "proto.C2SMingcHostGuildProto")
	proto.RegisterType((*S2CMingcHostGuildProto)(nil), "proto.S2CMingcHostGuildProto")
}
func (m *C2SMingcListProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SMingcListProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ver != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMingc(dAtA, i, uint64(m.Ver))
	}
	return i, nil
}

func (m *S2CMingcListProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CMingcListProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mingcs != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMingc(dAtA, i, uint64(m.Mingcs.Size()))
		n1, err := m.Mingcs.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Ver != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMingc(dAtA, i, uint64(m.Ver))
	}
	return i, nil
}

func (m *C2SViewMingcProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SViewMingcProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMingc(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *S2CViewMingcProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CViewMingcProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mingc != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMingc(dAtA, i, uint64(m.Mingc.Size()))
		n2, err := m.Mingc.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *C2SMcBuildProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SMcBuildProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.McId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMingc(dAtA, i, uint64(m.McId))
	}
	return i, nil
}

func (m *S2CMcBuildProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CMcBuildProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.McId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMingc(dAtA, i, uint64(m.McId))
	}
	if m.NewLevel != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMingc(dAtA, i, uint64(m.NewLevel))
	}
	if m.NewSupport != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMingc(dAtA, i, uint64(m.NewSupport))
	}
	if m.NextTime != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMingc(dAtA, i, uint64(m.NextTime))
	}
	if m.NewDailyAddedSupport != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintMingc(dAtA, i, uint64(m.NewDailyAddedSupport))
	}
	return i, nil
}

func (m *C2SMcBuildLogProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SMcBuildLogProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.McId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMingc(dAtA, i, uint64(m.McId))
	}
	return i, nil
}

func (m *S2CMcBuildLogProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CMcBuildLogProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Logs != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMingc(dAtA, i, uint64(m.Logs.Size()))
		n3, err := m.Logs.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *C2SMingcHostGuildProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SMingcHostGuildProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.McId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMingc(dAtA, i, uint64(m.McId))
	}
	return i, nil
}

func (m *S2CMingcHostGuildProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CMingcHostGuildProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Guild != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMingc(dAtA, i, uint64(m.Guild.Size()))
		n4, err := m.Guild.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func encodeFixed64Mingc(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Mingc(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintMingc(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *C2SMingcListProto) Size() (n int) {
	var l int
	_ = l
	if m.Ver != 0 {
		n += 1 + sovMingc(uint64(m.Ver))
	}
	return n
}

func (m *S2CMingcListProto) Size() (n int) {
	var l int
	_ = l
	if m.Mingcs != nil {
		l = m.Mingcs.Size()
		n += 1 + l + sovMingc(uint64(l))
	}
	if m.Ver != 0 {
		n += 1 + sovMingc(uint64(m.Ver))
	}
	return n
}

func (m *C2SViewMingcProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMingc(uint64(m.Id))
	}
	return n
}

func (m *S2CViewMingcProto) Size() (n int) {
	var l int
	_ = l
	if m.Mingc != nil {
		l = m.Mingc.Size()
		n += 1 + l + sovMingc(uint64(l))
	}
	return n
}

func (m *C2SMcBuildProto) Size() (n int) {
	var l int
	_ = l
	if m.McId != 0 {
		n += 1 + sovMingc(uint64(m.McId))
	}
	return n
}

func (m *S2CMcBuildProto) Size() (n int) {
	var l int
	_ = l
	if m.McId != 0 {
		n += 1 + sovMingc(uint64(m.McId))
	}
	if m.NewLevel != 0 {
		n += 1 + sovMingc(uint64(m.NewLevel))
	}
	if m.NewSupport != 0 {
		n += 1 + sovMingc(uint64(m.NewSupport))
	}
	if m.NextTime != 0 {
		n += 1 + sovMingc(uint64(m.NextTime))
	}
	if m.NewDailyAddedSupport != 0 {
		n += 1 + sovMingc(uint64(m.NewDailyAddedSupport))
	}
	return n
}

func (m *C2SMcBuildLogProto) Size() (n int) {
	var l int
	_ = l
	if m.McId != 0 {
		n += 1 + sovMingc(uint64(m.McId))
	}
	return n
}

func (m *S2CMcBuildLogProto) Size() (n int) {
	var l int
	_ = l
	if m.Logs != nil {
		l = m.Logs.Size()
		n += 1 + l + sovMingc(uint64(l))
	}
	return n
}

func (m *C2SMingcHostGuildProto) Size() (n int) {
	var l int
	_ = l
	if m.McId != 0 {
		n += 1 + sovMingc(uint64(m.McId))
	}
	return n
}

func (m *S2CMingcHostGuildProto) Size() (n int) {
	var l int
	_ = l
	if m.Guild != nil {
		l = m.Guild.Size()
		n += 1 + l + sovMingc(uint64(l))
	}
	return n
}

func sovMingc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMingc(x uint64) (n int) {
	return sovMingc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *C2SMingcListProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SMingcListProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SMingcListProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ver", wireType)
			}
			m.Ver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ver |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMingc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CMingcListProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CMingcListProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CMingcListProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mingcs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMingc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mingcs == nil {
				m.Mingcs = &proto9.MingcsProto{}
			}
			if err := m.Mingcs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ver", wireType)
			}
			m.Ver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ver |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMingc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SViewMingcProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SViewMingcProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SViewMingcProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMingc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CViewMingcProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CViewMingcProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CViewMingcProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mingc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMingc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mingc == nil {
				m.Mingc = &proto9.MingcProto{}
			}
			if err := m.Mingc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMingc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SMcBuildProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SMcBuildProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SMcBuildProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field McId", wireType)
			}
			m.McId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.McId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMingc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CMcBuildProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CMcBuildProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CMcBuildProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field McId", wireType)
			}
			m.McId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.McId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewLevel", wireType)
			}
			m.NewLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewSupport", wireType)
			}
			m.NewSupport = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewSupport |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextTime", wireType)
			}
			m.NextTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewDailyAddedSupport", wireType)
			}
			m.NewDailyAddedSupport = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewDailyAddedSupport |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMingc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SMcBuildLogProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SMcBuildLogProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SMcBuildLogProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field McId", wireType)
			}
			m.McId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.McId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMingc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CMcBuildLogProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CMcBuildLogProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CMcBuildLogProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMingc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Logs == nil {
				m.Logs = &proto9.GuildMcBuildProto{}
			}
			if err := m.Logs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMingc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SMingcHostGuildProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SMingcHostGuildProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SMingcHostGuildProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field McId", wireType)
			}
			m.McId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.McId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMingc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CMingcHostGuildProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CMingcHostGuildProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CMingcHostGuildProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Guild", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMingc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Guild == nil {
				m.Guild = &proto8.GuildSnapshotProto{}
			}
			if err := m.Guild.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMingc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMingc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMingc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMingc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMingc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMingc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMingc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMingc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMingc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMingc   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/gen/pb/mingc/mingc.proto", fileDescriptorMingc)
}

var fileDescriptorMingc = []byte{
	// 450 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xdf, 0x8a, 0xd3, 0x40,
	0x14, 0xc6, 0x4d, 0xb7, 0x59, 0xf5, 0x14, 0x5c, 0x1b, 0x65, 0xcd, 0x2a, 0x54, 0x89, 0xf8, 0x17,
	0xed, 0x40, 0x64, 0xf1, 0xc6, 0x1b, 0xbb, 0xc2, 0xee, 0x42, 0x05, 0x6d, 0xc4, 0x0b, 0x6f, 0x42,
	0x92, 0x19, 0x92, 0x81, 0x24, 0x13, 0x32, 0xd3, 0xcd, 0xfa, 0x26, 0x3e, 0x8a, 0x8f, 0xe0, 0xa5,
	0x8f, 0x20, 0xf5, 0x45, 0x64, 0xce, 0x24, 0x6d, 0x28, 0x68, 0xf1, 0xa6, 0x4d, 0xe6, 0xfc, 0xbe,
	0xef, 0xcb, 0x39, 0x73, 0xc0, 0x4f, 0xb9, 0xca, 0x96, 0xf1, 0x34, 0x11, 0x05, 0xc9, 0x79, 0x9a,
	0xa9, 0x2a, 0x6a, 0x48, 0x11, 0xe5, 0xec, 0x35, 0x49, 0x59, 0x49, 0xaa, 0x98, 0x14, 0xbc, 0x4c,
	0x13, 0xf3, 0x3b, 0xad, 0x6a, 0xa1, 0x84, 0x63, 0xe3, 0xdf, 0xdd, 0xe3, 0xbf, 0x4b, 0xab, 0x98,
	0xc8, 0x2c, 0xaa, 0x19, 0x0d, 0x11, 0x25, 0xe9, 0x92, 0xe7, 0x74, 0xfa, 0xdf, 0xb2, 0x5e, 0xa8,
	0xf7, 0x08, 0xc6, 0x27, 0x7e, 0xf0, 0x5e, 0x9f, 0xcc, 0xb9, 0x54, 0x1f, 0xf0, 0x4b, 0x6e, 0xc2,
	0xde, 0x05, 0xab, 0xdd, 0xc1, 0x03, 0xeb, 0xa9, 0xbd, 0xd0, 0x8f, 0xde, 0x47, 0x18, 0x07, 0xfe,
	0xc9, 0x16, 0xf6, 0x1c, 0xf6, 0xd1, 0x4a, 0x22, 0x39, 0xf2, 0x1d, 0xe3, 0x39, 0x45, 0x4c, 0x22,
	0xb3, 0x68, 0x89, 0xce, 0x72, 0x6f, 0x63, 0xf9, 0x10, 0x93, 0x3f, 0x73, 0xd6, 0x20, 0x6f, 0x2c,
	0x6f, 0xc0, 0x80, 0x53, 0xd7, 0x42, 0x6a, 0xc0, 0xa9, 0xf7, 0x06, 0x73, 0xb7, 0xa0, 0x27, 0x60,
	0xa3, 0x2b, 0x72, 0x23, 0x7f, 0xdc, 0x8f, 0x35, 0xa9, 0xa6, 0xee, 0x3d, 0x86, 0x03, 0xdd, 0x5c,
	0x32, 0xd3, 0x73, 0x32, 0xda, 0x5b, 0x60, 0x17, 0x49, 0xb8, 0xce, 0x18, 0x16, 0xc9, 0x39, 0xf5,
	0xbe, 0x5b, 0x70, 0xa0, 0xdb, 0xdb, 0x05, 0x3a, 0xf7, 0xe0, 0x7a, 0xc9, 0x9a, 0x30, 0x67, 0x17,
	0x2c, 0x6f, 0x7b, 0xb9, 0x56, 0xb2, 0x66, 0xae, 0xdf, 0x9d, 0xfb, 0x30, 0xd2, 0x45, 0xb9, 0xac,
	0x2a, 0x51, 0x2b, 0x77, 0x88, 0x65, 0x28, 0x59, 0x13, 0x98, 0x13, 0xa3, 0xbe, 0x54, 0xa1, 0xe2,
	0x05, 0x73, 0xed, 0x4e, 0x7d, 0xa9, 0x3e, 0xf1, 0x82, 0x39, 0xc7, 0x70, 0x47, 0xab, 0x69, 0xc4,
	0xf3, 0xaf, 0x61, 0x44, 0x29, 0xa3, 0x6b, 0xa7, 0xab, 0x88, 0xde, 0x2e, 0x59, 0xf3, 0x4e, 0x57,
	0xdf, 0xea, 0x62, 0xeb, 0xe9, 0x3d, 0x03, 0x67, 0xd3, 0xe2, 0x5c, 0xa4, 0xff, 0xe8, 0x72, 0x06,
	0xce, 0xa6, 0xc9, 0x35, 0xfa, 0x02, 0x86, 0xb9, 0x48, 0x65, 0x3b, 0x4b, 0xb7, 0x9d, 0xe5, 0xa9,
	0x66, 0xfa, 0xf3, 0x58, 0x20, 0xe5, 0xbd, 0x84, 0xc3, 0x6e, 0x5d, 0xce, 0x84, 0x54, 0xa7, 0x3b,
	0x06, 0x7b, 0x0e, 0x87, 0xdd, 0xda, 0x6c, 0xe1, 0x04, 0x6c, 0xdc, 0xde, 0x36, 0xf7, 0xa8, 0x9f,
	0x1b, 0x94, 0x51, 0x25, 0x33, 0xa1, 0xda, 0xbb, 0x44, 0x6e, 0x76, 0xf4, 0x63, 0x35, 0xb1, 0x7e,
	0xae, 0x26, 0xd6, 0xaf, 0xd5, 0xc4, 0xfa, 0xf6, 0x7b, 0x72, 0xe5, 0xcc, 0xfa, 0x62, 0xae, 0x39,
	0xde, 0x47, 0xed, 0xab, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xc3, 0xd0, 0x4b, 0x7d, 0x75, 0x03,
	0x00, 0x00,
}
