// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/gen/pb/red_packet/red_packet.proto
// DO NOT EDIT!

/*
	Package red_packet is a generated protocol buffer package.

	It is generated from these files:
		github.com/lightpaw/male7/gen/pb/red_packet/red_packet.proto

	It has these top-level messages:
		C2SBuyProto
		S2CBuyProto
		C2SCreateProto
		S2CCreateProto
		C2SGrabProto
		S2CGrabProto
		S2CAllGrabbedNoticeProto
*/
package red_packet

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import proto3 "github.com/lightpaw/male7/pb/shared_proto"
import proto4 "github.com/lightpaw/male7/pb/shared_proto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type C2SBuyProto struct {
	DataId int32 `protobuf:"varint,1,opt,name=data_id,json=dataId,proto3" json:"data_id,omitempty"`
}

func (m *C2SBuyProto) Reset()                    { *m = C2SBuyProto{} }
func (m *C2SBuyProto) String() string            { return proto.CompactTextString(m) }
func (*C2SBuyProto) ProtoMessage()               {}
func (*C2SBuyProto) Descriptor() ([]byte, []int) { return fileDescriptorRedPacket, []int{0} }

func (m *C2SBuyProto) GetDataId() int32 {
	if m != nil {
		return m.DataId
	}
	return 0
}

type S2CBuyProto struct {
	DataId   int32 `protobuf:"varint,1,opt,name=data_id,json=dataId,proto3" json:"data_id,omitempty"`
	NewCount int32 `protobuf:"varint,2,opt,name=new_count,json=newCount,proto3" json:"new_count,omitempty"`
}

func (m *S2CBuyProto) Reset()                    { *m = S2CBuyProto{} }
func (m *S2CBuyProto) String() string            { return proto.CompactTextString(m) }
func (*S2CBuyProto) ProtoMessage()               {}
func (*S2CBuyProto) Descriptor() ([]byte, []int) { return fileDescriptorRedPacket, []int{1} }

func (m *S2CBuyProto) GetDataId() int32 {
	if m != nil {
		return m.DataId
	}
	return 0
}

func (m *S2CBuyProto) GetNewCount() int32 {
	if m != nil {
		return m.NewCount
	}
	return 0
}

type C2SCreateProto struct {
	DataId   int32           `protobuf:"varint,1,opt,name=data_id,json=dataId,proto3" json:"data_id,omitempty"`
	ChatType proto3.ChatType `protobuf:"varint,2,opt,name=chat_type,json=chatType,proto3,enum=proto.ChatType" json:"chat_type,omitempty"`
	Count    int32           `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Text     string          `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
}

func (m *C2SCreateProto) Reset()                    { *m = C2SCreateProto{} }
func (m *C2SCreateProto) String() string            { return proto.CompactTextString(m) }
func (*C2SCreateProto) ProtoMessage()               {}
func (*C2SCreateProto) Descriptor() ([]byte, []int) { return fileDescriptorRedPacket, []int{2} }

func (m *C2SCreateProto) GetDataId() int32 {
	if m != nil {
		return m.DataId
	}
	return 0
}

func (m *C2SCreateProto) GetChatType() proto3.ChatType {
	if m != nil {
		return m.ChatType
	}
	return proto3.ChatType_ChatWorld
}

func (m *C2SCreateProto) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *C2SCreateProto) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type S2CCreateProto struct {
	DataId int32 `protobuf:"varint,1,opt,name=data_id,json=dataId,proto3" json:"data_id,omitempty"`
}

func (m *S2CCreateProto) Reset()                    { *m = S2CCreateProto{} }
func (m *S2CCreateProto) String() string            { return proto.CompactTextString(m) }
func (*S2CCreateProto) ProtoMessage()               {}
func (*S2CCreateProto) Descriptor() ([]byte, []int) { return fileDescriptorRedPacket, []int{3} }

func (m *S2CCreateProto) GetDataId() int32 {
	if m != nil {
		return m.DataId
	}
	return 0
}

type C2SGrabProto struct {
	Id []byte `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SGrabProto) Reset()                    { *m = C2SGrabProto{} }
func (m *C2SGrabProto) String() string            { return proto.CompactTextString(m) }
func (*C2SGrabProto) ProtoMessage()               {}
func (*C2SGrabProto) Descriptor() ([]byte, []int) { return fileDescriptorRedPacket, []int{4} }

func (m *C2SGrabProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type S2CGrabProto struct {
	RedPacket *proto4.RedPacketProto `protobuf:"bytes,1,opt,name=red_packet,json=redPacket" json:"red_packet,omitempty"`
	GrabMoney int32                  `protobuf:"varint,2,opt,name=grab_money,json=grabMoney,proto3" json:"grab_money,omitempty"`
}

func (m *S2CGrabProto) Reset()                    { *m = S2CGrabProto{} }
func (m *S2CGrabProto) String() string            { return proto.CompactTextString(m) }
func (*S2CGrabProto) ProtoMessage()               {}
func (*S2CGrabProto) Descriptor() ([]byte, []int) { return fileDescriptorRedPacket, []int{5} }

func (m *S2CGrabProto) GetRedPacket() *proto4.RedPacketProto {
	if m != nil {
		return m.RedPacket
	}
	return nil
}

func (m *S2CGrabProto) GetGrabMoney() int32 {
	if m != nil {
		return m.GrabMoney
	}
	return 0
}

type S2CAllGrabbedNoticeProto struct {
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *S2CAllGrabbedNoticeProto) Reset()         { *m = S2CAllGrabbedNoticeProto{} }
func (m *S2CAllGrabbedNoticeProto) String() string { return proto.CompactTextString(m) }
func (*S2CAllGrabbedNoticeProto) ProtoMessage()    {}
func (*S2CAllGrabbedNoticeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorRedPacket, []int{6}
}

func (m *S2CAllGrabbedNoticeProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func init() {
	proto.RegisterType((*C2SBuyProto)(nil), "proto.C2SBuyProto")
	proto.RegisterType((*S2CBuyProto)(nil), "proto.S2CBuyProto")
	proto.RegisterType((*C2SCreateProto)(nil), "proto.C2SCreateProto")
	proto.RegisterType((*S2CCreateProto)(nil), "proto.S2CCreateProto")
	proto.RegisterType((*C2SGrabProto)(nil), "proto.C2SGrabProto")
	proto.RegisterType((*S2CGrabProto)(nil), "proto.S2CGrabProto")
	proto.RegisterType((*S2CAllGrabbedNoticeProto)(nil), "proto.S2CAllGrabbedNoticeProto")
}
func (m *C2SBuyProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SBuyProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DataId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRedPacket(dAtA, i, uint64(m.DataId))
	}
	return i, nil
}

func (m *S2CBuyProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CBuyProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DataId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRedPacket(dAtA, i, uint64(m.DataId))
	}
	if m.NewCount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRedPacket(dAtA, i, uint64(m.NewCount))
	}
	return i, nil
}

func (m *C2SCreateProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCreateProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DataId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRedPacket(dAtA, i, uint64(m.DataId))
	}
	if m.ChatType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRedPacket(dAtA, i, uint64(m.ChatType))
	}
	if m.Count != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRedPacket(dAtA, i, uint64(m.Count))
	}
	if len(m.Text) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRedPacket(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	return i, nil
}

func (m *S2CCreateProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCreateProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DataId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRedPacket(dAtA, i, uint64(m.DataId))
	}
	return i, nil
}

func (m *C2SGrabProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SGrabProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRedPacket(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *S2CGrabProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CGrabProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RedPacket != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRedPacket(dAtA, i, uint64(m.RedPacket.Size()))
		n1, err := m.RedPacket.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.GrabMoney != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRedPacket(dAtA, i, uint64(m.GrabMoney))
	}
	return i, nil
}

func (m *S2CAllGrabbedNoticeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CAllGrabbedNoticeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRedPacket(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func encodeFixed64RedPacket(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32RedPacket(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintRedPacket(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *C2SBuyProto) Size() (n int) {
	var l int
	_ = l
	if m.DataId != 0 {
		n += 1 + sovRedPacket(uint64(m.DataId))
	}
	return n
}

func (m *S2CBuyProto) Size() (n int) {
	var l int
	_ = l
	if m.DataId != 0 {
		n += 1 + sovRedPacket(uint64(m.DataId))
	}
	if m.NewCount != 0 {
		n += 1 + sovRedPacket(uint64(m.NewCount))
	}
	return n
}

func (m *C2SCreateProto) Size() (n int) {
	var l int
	_ = l
	if m.DataId != 0 {
		n += 1 + sovRedPacket(uint64(m.DataId))
	}
	if m.ChatType != 0 {
		n += 1 + sovRedPacket(uint64(m.ChatType))
	}
	if m.Count != 0 {
		n += 1 + sovRedPacket(uint64(m.Count))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovRedPacket(uint64(l))
	}
	return n
}

func (m *S2CCreateProto) Size() (n int) {
	var l int
	_ = l
	if m.DataId != 0 {
		n += 1 + sovRedPacket(uint64(m.DataId))
	}
	return n
}

func (m *C2SGrabProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRedPacket(uint64(l))
	}
	return n
}

func (m *S2CGrabProto) Size() (n int) {
	var l int
	_ = l
	if m.RedPacket != nil {
		l = m.RedPacket.Size()
		n += 1 + l + sovRedPacket(uint64(l))
	}
	if m.GrabMoney != 0 {
		n += 1 + sovRedPacket(uint64(m.GrabMoney))
	}
	return n
}

func (m *S2CAllGrabbedNoticeProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRedPacket(uint64(l))
	}
	return n
}

func sovRedPacket(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRedPacket(x uint64) (n int) {
	return sovRedPacket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *C2SBuyProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRedPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SBuyProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SBuyProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataId", wireType)
			}
			m.DataId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRedPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRedPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CBuyProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRedPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CBuyProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CBuyProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataId", wireType)
			}
			m.DataId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewCount", wireType)
			}
			m.NewCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRedPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRedPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SCreateProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRedPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCreateProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCreateProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataId", wireType)
			}
			m.DataId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatType", wireType)
			}
			m.ChatType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatType |= (proto3.ChatType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRedPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRedPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRedPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCreateProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRedPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCreateProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCreateProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataId", wireType)
			}
			m.DataId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRedPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRedPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SGrabProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRedPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SGrabProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SGrabProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRedPacket
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRedPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRedPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CGrabProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRedPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CGrabProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CGrabProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedPacket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRedPacket
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RedPacket == nil {
				m.RedPacket = &proto4.RedPacketProto{}
			}
			if err := m.RedPacket.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrabMoney", wireType)
			}
			m.GrabMoney = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GrabMoney |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRedPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRedPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CAllGrabbedNoticeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRedPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CAllGrabbedNoticeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CAllGrabbedNoticeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRedPacket
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRedPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRedPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRedPacket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRedPacket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRedPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRedPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRedPacket
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRedPacket
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRedPacket(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRedPacket = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRedPacket   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/gen/pb/red_packet/red_packet.proto", fileDescriptorRedPacket)
}

var fileDescriptorRedPacket = []byte{
	// 384 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0xc1, 0x4a, 0xeb, 0x40,
	0x14, 0x86, 0xef, 0xf4, 0xb6, 0xbd, 0xcd, 0x69, 0xc9, 0x85, 0x70, 0x2f, 0x86, 0x8a, 0xa1, 0x64,
	0x21, 0x55, 0xa4, 0x81, 0xb1, 0x20, 0x88, 0x1b, 0x3b, 0x0b, 0x75, 0xa1, 0x94, 0xc4, 0x95, 0x9b,
	0x30, 0xc9, 0x0c, 0x49, 0x30, 0x4d, 0x42, 0x9c, 0x52, 0xb3, 0xf4, 0x2d, 0x7c, 0x24, 0x97, 0x3e,
	0x82, 0xd4, 0x17, 0x91, 0x4c, 0x52, 0x5a, 0x04, 0x69, 0x57, 0x39, 0xff, 0x99, 0xff, 0xfc, 0xe7,
	0xcb, 0x81, 0x8b, 0x20, 0x12, 0xe1, 0xdc, 0x1b, 0xf9, 0xe9, 0xcc, 0x8a, 0xa3, 0x20, 0x14, 0x19,
	0x5d, 0x58, 0x33, 0x1a, 0xf3, 0x33, 0x2b, 0xe0, 0x89, 0x95, 0x79, 0x56, 0xce, 0x99, 0x9b, 0x51,
	0xff, 0x91, 0x8b, 0x8d, 0x72, 0x94, 0xe5, 0xa9, 0x48, 0xb5, 0x96, 0xfc, 0xf4, 0xc7, 0x3f, 0x87,
	0x64, 0x9e, 0xf5, 0x14, 0x52, 0x39, 0x58, 0x5a, 0x2d, 0x3f, 0xa4, 0xf5, 0x70, 0xff, 0x7c, 0xf7,
	0xa9, 0xef, 0x8b, 0xcd, 0x43, 0xe8, 0x12, 0xec, 0x4c, 0xe6, 0xc5, 0x54, 0x72, 0xec, 0xc1, 0x1f,
	0x46, 0x05, 0x75, 0x23, 0xa6, 0xa3, 0x01, 0x1a, 0xb6, 0xec, 0x76, 0x29, 0x6f, 0x98, 0x49, 0xa0,
	0xeb, 0x60, 0xb2, 0xd5, 0xa7, 0xed, 0x83, 0x92, 0xf0, 0x85, 0xeb, 0xa7, 0xf3, 0x44, 0xe8, 0x0d,
	0xf9, 0xd4, 0x49, 0xf8, 0x82, 0x94, 0xda, 0x7c, 0x41, 0xa0, 0x12, 0xec, 0x90, 0x9c, 0x53, 0xc1,
	0xb7, 0x04, 0x9d, 0x80, 0x52, 0xfe, 0xa2, 0x2b, 0x8a, 0x8c, 0xcb, 0x20, 0x15, 0xff, 0xad, 0x98,
	0x47, 0x24, 0xa4, 0xe2, 0xbe, 0xc8, 0xb8, 0xdd, 0xf1, 0xeb, 0x4a, 0xfb, 0x07, 0xad, 0x6a, 0xe5,
	0x6f, 0x19, 0x52, 0x09, 0x4d, 0x83, 0xa6, 0xe0, 0xcf, 0x42, 0x6f, 0x0e, 0xd0, 0x50, 0xb1, 0x65,
	0x6d, 0x1e, 0x81, 0xea, 0x60, 0xb2, 0x0b, 0x82, 0x69, 0x40, 0x8f, 0x60, 0xe7, 0x2a, 0xa7, 0x5e,
	0x65, 0x54, 0xa1, 0x11, 0x31, 0xc9, 0xd2, 0xb3, 0x1b, 0x11, 0x33, 0x7d, 0xe8, 0x39, 0x98, 0xac,
	0xdf, 0xc7, 0x00, 0xeb, 0xfb, 0xca, 0xac, 0x2e, 0xfe, 0x5f, 0x33, 0xdb, 0x9c, 0x4d, 0x65, 0x5f,
	0x5a, 0x6d, 0x25, 0x5f, 0x69, 0xed, 0x00, 0x20, 0xc8, 0xa9, 0xe7, 0xce, 0xd2, 0x84, 0x17, 0xf5,
	0xc9, 0x94, 0xb2, 0x73, 0x5b, 0x36, 0xcc, 0x63, 0xd0, 0x1d, 0x4c, 0x2e, 0xe3, 0xb8, 0xdc, 0xe3,
	0x71, 0x76, 0x97, 0x8a, 0xc8, 0xe7, 0x9b, 0x40, 0x68, 0x05, 0x34, 0x31, 0xde, 0x96, 0x06, 0x7a,
	0x5f, 0x1a, 0xe8, 0x63, 0x69, 0xa0, 0xd7, 0x4f, 0xe3, 0xd7, 0x35, 0x7a, 0xd8, 0x40, 0xf2, 0xda,
	0x92, 0xe5, 0xf4, 0x2b, 0x00, 0x00, 0xff, 0xff, 0xb7, 0x9e, 0xc3, 0x49, 0xac, 0x02, 0x00, 0x00,
}
