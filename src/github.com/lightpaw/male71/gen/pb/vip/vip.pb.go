// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/gen/pb/vip/vip.proto
// DO NOT EDIT!

/*
	Package vip is a generated protocol buffer package.

	It is generated from these files:
		github.com/lightpaw/male7/gen/pb/vip/vip.proto

	It has these top-level messages:
		S2CVipLevelUpgradeNoticeProto
		S2CVipAddExpNoticeProto
		S2CVipDailyLoginNoticeProto
		C2SVipCollectDailyPrizeProto
		S2CVipCollectDailyPrizeProto
		C2SVipCollectLevelPrizeProto
		S2CVipCollectLevelPrizeProto
		C2SVipBuyDungeonTimesProto
		S2CVipBuyDungeonTimesProto
*/
package vip

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type S2CVipLevelUpgradeNoticeProto struct {
	VipLevel int32 `protobuf:"varint,1,opt,name=vip_level,json=vipLevel,proto3" json:"vip_level,omitempty"`
	VipExp   int32 `protobuf:"varint,2,opt,name=vip_exp,json=vipExp,proto3" json:"vip_exp,omitempty"`
}

func (m *S2CVipLevelUpgradeNoticeProto) Reset()                    { *m = S2CVipLevelUpgradeNoticeProto{} }
func (m *S2CVipLevelUpgradeNoticeProto) String() string            { return proto.CompactTextString(m) }
func (*S2CVipLevelUpgradeNoticeProto) ProtoMessage()               {}
func (*S2CVipLevelUpgradeNoticeProto) Descriptor() ([]byte, []int) { return fileDescriptorVip, []int{0} }

func (m *S2CVipLevelUpgradeNoticeProto) GetVipLevel() int32 {
	if m != nil {
		return m.VipLevel
	}
	return 0
}

func (m *S2CVipLevelUpgradeNoticeProto) GetVipExp() int32 {
	if m != nil {
		return m.VipExp
	}
	return 0
}

type S2CVipAddExpNoticeProto struct {
	VipExp int32 `protobuf:"varint,1,opt,name=vip_exp,json=vipExp,proto3" json:"vip_exp,omitempty"`
}

func (m *S2CVipAddExpNoticeProto) Reset()                    { *m = S2CVipAddExpNoticeProto{} }
func (m *S2CVipAddExpNoticeProto) String() string            { return proto.CompactTextString(m) }
func (*S2CVipAddExpNoticeProto) ProtoMessage()               {}
func (*S2CVipAddExpNoticeProto) Descriptor() ([]byte, []int) { return fileDescriptorVip, []int{1} }

func (m *S2CVipAddExpNoticeProto) GetVipExp() int32 {
	if m != nil {
		return m.VipExp
	}
	return 0
}

type S2CVipDailyLoginNoticeProto struct {
	VipLevel     int32 `protobuf:"varint,1,opt,name=vip_level,json=vipLevel,proto3" json:"vip_level,omitempty"`
	VipExp       int32 `protobuf:"varint,2,opt,name=vip_exp,json=vipExp,proto3" json:"vip_exp,omitempty"`
	ContinueDays int32 `protobuf:"varint,3,opt,name=continue_days,json=continueDays,proto3" json:"continue_days,omitempty"`
	TomorrowExp  int32 `protobuf:"varint,4,opt,name=tomorrow_exp,json=tomorrowExp,proto3" json:"tomorrow_exp,omitempty"`
}

func (m *S2CVipDailyLoginNoticeProto) Reset()                    { *m = S2CVipDailyLoginNoticeProto{} }
func (m *S2CVipDailyLoginNoticeProto) String() string            { return proto.CompactTextString(m) }
func (*S2CVipDailyLoginNoticeProto) ProtoMessage()               {}
func (*S2CVipDailyLoginNoticeProto) Descriptor() ([]byte, []int) { return fileDescriptorVip, []int{2} }

func (m *S2CVipDailyLoginNoticeProto) GetVipLevel() int32 {
	if m != nil {
		return m.VipLevel
	}
	return 0
}

func (m *S2CVipDailyLoginNoticeProto) GetVipExp() int32 {
	if m != nil {
		return m.VipExp
	}
	return 0
}

func (m *S2CVipDailyLoginNoticeProto) GetContinueDays() int32 {
	if m != nil {
		return m.ContinueDays
	}
	return 0
}

func (m *S2CVipDailyLoginNoticeProto) GetTomorrowExp() int32 {
	if m != nil {
		return m.TomorrowExp
	}
	return 0
}

type C2SVipCollectDailyPrizeProto struct {
	VipLevel int32 `protobuf:"varint,1,opt,name=vip_level,json=vipLevel,proto3" json:"vip_level,omitempty"`
}

func (m *C2SVipCollectDailyPrizeProto) Reset()                    { *m = C2SVipCollectDailyPrizeProto{} }
func (m *C2SVipCollectDailyPrizeProto) String() string            { return proto.CompactTextString(m) }
func (*C2SVipCollectDailyPrizeProto) ProtoMessage()               {}
func (*C2SVipCollectDailyPrizeProto) Descriptor() ([]byte, []int) { return fileDescriptorVip, []int{3} }

func (m *C2SVipCollectDailyPrizeProto) GetVipLevel() int32 {
	if m != nil {
		return m.VipLevel
	}
	return 0
}

type S2CVipCollectDailyPrizeProto struct {
	VipLevel int32 `protobuf:"varint,2,opt,name=vip_level,json=vipLevel,proto3" json:"vip_level,omitempty"`
}

func (m *S2CVipCollectDailyPrizeProto) Reset()                    { *m = S2CVipCollectDailyPrizeProto{} }
func (m *S2CVipCollectDailyPrizeProto) String() string            { return proto.CompactTextString(m) }
func (*S2CVipCollectDailyPrizeProto) ProtoMessage()               {}
func (*S2CVipCollectDailyPrizeProto) Descriptor() ([]byte, []int) { return fileDescriptorVip, []int{4} }

func (m *S2CVipCollectDailyPrizeProto) GetVipLevel() int32 {
	if m != nil {
		return m.VipLevel
	}
	return 0
}

type C2SVipCollectLevelPrizeProto struct {
	VipLevel int32 `protobuf:"varint,1,opt,name=vip_level,json=vipLevel,proto3" json:"vip_level,omitempty"`
}

func (m *C2SVipCollectLevelPrizeProto) Reset()                    { *m = C2SVipCollectLevelPrizeProto{} }
func (m *C2SVipCollectLevelPrizeProto) String() string            { return proto.CompactTextString(m) }
func (*C2SVipCollectLevelPrizeProto) ProtoMessage()               {}
func (*C2SVipCollectLevelPrizeProto) Descriptor() ([]byte, []int) { return fileDescriptorVip, []int{5} }

func (m *C2SVipCollectLevelPrizeProto) GetVipLevel() int32 {
	if m != nil {
		return m.VipLevel
	}
	return 0
}

type S2CVipCollectLevelPrizeProto struct {
	VipLevel int32 `protobuf:"varint,1,opt,name=vip_level,json=vipLevel,proto3" json:"vip_level,omitempty"`
}

func (m *S2CVipCollectLevelPrizeProto) Reset()                    { *m = S2CVipCollectLevelPrizeProto{} }
func (m *S2CVipCollectLevelPrizeProto) String() string            { return proto.CompactTextString(m) }
func (*S2CVipCollectLevelPrizeProto) ProtoMessage()               {}
func (*S2CVipCollectLevelPrizeProto) Descriptor() ([]byte, []int) { return fileDescriptorVip, []int{6} }

func (m *S2CVipCollectLevelPrizeProto) GetVipLevel() int32 {
	if m != nil {
		return m.VipLevel
	}
	return 0
}

type C2SVipBuyDungeonTimesProto struct {
	DungeonId int32 `protobuf:"varint,1,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
}

func (m *C2SVipBuyDungeonTimesProto) Reset()                    { *m = C2SVipBuyDungeonTimesProto{} }
func (m *C2SVipBuyDungeonTimesProto) String() string            { return proto.CompactTextString(m) }
func (*C2SVipBuyDungeonTimesProto) ProtoMessage()               {}
func (*C2SVipBuyDungeonTimesProto) Descriptor() ([]byte, []int) { return fileDescriptorVip, []int{7} }

func (m *C2SVipBuyDungeonTimesProto) GetDungeonId() int32 {
	if m != nil {
		return m.DungeonId
	}
	return 0
}

type S2CVipBuyDungeonTimesProto struct {
	DungeonId int32 `protobuf:"varint,3,opt,name=dungeon_id,json=dungeonId,proto3" json:"dungeon_id,omitempty"`
	NewTimes  int32 `protobuf:"varint,2,opt,name=new_times,json=newTimes,proto3" json:"new_times,omitempty"`
}

func (m *S2CVipBuyDungeonTimesProto) Reset()                    { *m = S2CVipBuyDungeonTimesProto{} }
func (m *S2CVipBuyDungeonTimesProto) String() string            { return proto.CompactTextString(m) }
func (*S2CVipBuyDungeonTimesProto) ProtoMessage()               {}
func (*S2CVipBuyDungeonTimesProto) Descriptor() ([]byte, []int) { return fileDescriptorVip, []int{8} }

func (m *S2CVipBuyDungeonTimesProto) GetDungeonId() int32 {
	if m != nil {
		return m.DungeonId
	}
	return 0
}

func (m *S2CVipBuyDungeonTimesProto) GetNewTimes() int32 {
	if m != nil {
		return m.NewTimes
	}
	return 0
}

func init() {
	proto.RegisterType((*S2CVipLevelUpgradeNoticeProto)(nil), "proto.S2CVipLevelUpgradeNoticeProto")
	proto.RegisterType((*S2CVipAddExpNoticeProto)(nil), "proto.S2CVipAddExpNoticeProto")
	proto.RegisterType((*S2CVipDailyLoginNoticeProto)(nil), "proto.S2CVipDailyLoginNoticeProto")
	proto.RegisterType((*C2SVipCollectDailyPrizeProto)(nil), "proto.C2SVipCollectDailyPrizeProto")
	proto.RegisterType((*S2CVipCollectDailyPrizeProto)(nil), "proto.S2CVipCollectDailyPrizeProto")
	proto.RegisterType((*C2SVipCollectLevelPrizeProto)(nil), "proto.C2SVipCollectLevelPrizeProto")
	proto.RegisterType((*S2CVipCollectLevelPrizeProto)(nil), "proto.S2CVipCollectLevelPrizeProto")
	proto.RegisterType((*C2SVipBuyDungeonTimesProto)(nil), "proto.C2SVipBuyDungeonTimesProto")
	proto.RegisterType((*S2CVipBuyDungeonTimesProto)(nil), "proto.S2CVipBuyDungeonTimesProto")
}
func (m *S2CVipLevelUpgradeNoticeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CVipLevelUpgradeNoticeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.VipLevel != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.VipLevel))
	}
	if m.VipExp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.VipExp))
	}
	return i, nil
}

func (m *S2CVipAddExpNoticeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CVipAddExpNoticeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.VipExp != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.VipExp))
	}
	return i, nil
}

func (m *S2CVipDailyLoginNoticeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CVipDailyLoginNoticeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.VipLevel != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.VipLevel))
	}
	if m.VipExp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.VipExp))
	}
	if m.ContinueDays != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.ContinueDays))
	}
	if m.TomorrowExp != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.TomorrowExp))
	}
	return i, nil
}

func (m *C2SVipCollectDailyPrizeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SVipCollectDailyPrizeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.VipLevel != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.VipLevel))
	}
	return i, nil
}

func (m *S2CVipCollectDailyPrizeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CVipCollectDailyPrizeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.VipLevel != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.VipLevel))
	}
	return i, nil
}

func (m *C2SVipCollectLevelPrizeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SVipCollectLevelPrizeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.VipLevel != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.VipLevel))
	}
	return i, nil
}

func (m *S2CVipCollectLevelPrizeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CVipCollectLevelPrizeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.VipLevel != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.VipLevel))
	}
	return i, nil
}

func (m *C2SVipBuyDungeonTimesProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SVipBuyDungeonTimesProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DungeonId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.DungeonId))
	}
	return i, nil
}

func (m *S2CVipBuyDungeonTimesProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CVipBuyDungeonTimesProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NewTimes != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.NewTimes))
	}
	if m.DungeonId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.DungeonId))
	}
	return i, nil
}

func encodeFixed64Vip(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Vip(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintVip(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *S2CVipLevelUpgradeNoticeProto) Size() (n int) {
	var l int
	_ = l
	if m.VipLevel != 0 {
		n += 1 + sovVip(uint64(m.VipLevel))
	}
	if m.VipExp != 0 {
		n += 1 + sovVip(uint64(m.VipExp))
	}
	return n
}

func (m *S2CVipAddExpNoticeProto) Size() (n int) {
	var l int
	_ = l
	if m.VipExp != 0 {
		n += 1 + sovVip(uint64(m.VipExp))
	}
	return n
}

func (m *S2CVipDailyLoginNoticeProto) Size() (n int) {
	var l int
	_ = l
	if m.VipLevel != 0 {
		n += 1 + sovVip(uint64(m.VipLevel))
	}
	if m.VipExp != 0 {
		n += 1 + sovVip(uint64(m.VipExp))
	}
	if m.ContinueDays != 0 {
		n += 1 + sovVip(uint64(m.ContinueDays))
	}
	if m.TomorrowExp != 0 {
		n += 1 + sovVip(uint64(m.TomorrowExp))
	}
	return n
}

func (m *C2SVipCollectDailyPrizeProto) Size() (n int) {
	var l int
	_ = l
	if m.VipLevel != 0 {
		n += 1 + sovVip(uint64(m.VipLevel))
	}
	return n
}

func (m *S2CVipCollectDailyPrizeProto) Size() (n int) {
	var l int
	_ = l
	if m.VipLevel != 0 {
		n += 1 + sovVip(uint64(m.VipLevel))
	}
	return n
}

func (m *C2SVipCollectLevelPrizeProto) Size() (n int) {
	var l int
	_ = l
	if m.VipLevel != 0 {
		n += 1 + sovVip(uint64(m.VipLevel))
	}
	return n
}

func (m *S2CVipCollectLevelPrizeProto) Size() (n int) {
	var l int
	_ = l
	if m.VipLevel != 0 {
		n += 1 + sovVip(uint64(m.VipLevel))
	}
	return n
}

func (m *C2SVipBuyDungeonTimesProto) Size() (n int) {
	var l int
	_ = l
	if m.DungeonId != 0 {
		n += 1 + sovVip(uint64(m.DungeonId))
	}
	return n
}

func (m *S2CVipBuyDungeonTimesProto) Size() (n int) {
	var l int
	_ = l
	if m.NewTimes != 0 {
		n += 1 + sovVip(uint64(m.NewTimes))
	}
	if m.DungeonId != 0 {
		n += 1 + sovVip(uint64(m.DungeonId))
	}
	return n
}

func sovVip(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozVip(x uint64) (n int) {
	return sovVip(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *S2CVipLevelUpgradeNoticeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CVipLevelUpgradeNoticeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CVipLevelUpgradeNoticeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipLevel", wireType)
			}
			m.VipLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipExp", wireType)
			}
			m.VipExp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipExp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CVipAddExpNoticeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CVipAddExpNoticeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CVipAddExpNoticeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipExp", wireType)
			}
			m.VipExp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipExp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CVipDailyLoginNoticeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CVipDailyLoginNoticeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CVipDailyLoginNoticeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipLevel", wireType)
			}
			m.VipLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipExp", wireType)
			}
			m.VipExp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipExp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContinueDays", wireType)
			}
			m.ContinueDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContinueDays |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TomorrowExp", wireType)
			}
			m.TomorrowExp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TomorrowExp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SVipCollectDailyPrizeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SVipCollectDailyPrizeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SVipCollectDailyPrizeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipLevel", wireType)
			}
			m.VipLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CVipCollectDailyPrizeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CVipCollectDailyPrizeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CVipCollectDailyPrizeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipLevel", wireType)
			}
			m.VipLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SVipCollectLevelPrizeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SVipCollectLevelPrizeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SVipCollectLevelPrizeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipLevel", wireType)
			}
			m.VipLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CVipCollectLevelPrizeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CVipCollectLevelPrizeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CVipCollectLevelPrizeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipLevel", wireType)
			}
			m.VipLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SVipBuyDungeonTimesProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SVipBuyDungeonTimesProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SVipBuyDungeonTimesProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DungeonId", wireType)
			}
			m.DungeonId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DungeonId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CVipBuyDungeonTimesProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CVipBuyDungeonTimesProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CVipBuyDungeonTimesProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewTimes", wireType)
			}
			m.NewTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DungeonId", wireType)
			}
			m.DungeonId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DungeonId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVip(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVip
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVip
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVip
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthVip
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowVip
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipVip(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthVip = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVip   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("github.com/lightpaw/male7/gen/pb/vip/vip.proto", fileDescriptorVip) }

var fileDescriptorVip = []byte{
	// 370 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x92, 0xcf, 0x4e, 0xea, 0x40,
	0x14, 0xc6, 0xef, 0xc0, 0x85, 0x7b, 0x99, 0xcb, 0xdd, 0x74, 0x03, 0x01, 0x69, 0x14, 0x37, 0xae,
	0x68, 0x82, 0x0b, 0x17, 0xae, 0xe4, 0x4f, 0xa2, 0x09, 0x31, 0x44, 0x84, 0x18, 0x37, 0x4d, 0x69,
	0x27, 0xe5, 0x24, 0xd3, 0x99, 0x49, 0x99, 0xb6, 0xd4, 0x27, 0x31, 0xf1, 0x85, 0x5c, 0xfa, 0x08,
	0x06, 0x5f, 0xc4, 0x74, 0x06, 0x12, 0x40, 0x17, 0xa8, 0x8b, 0xa6, 0xc9, 0x77, 0xce, 0xef, 0xfb,
	0xbe, 0x93, 0x0c, 0x6e, 0xf9, 0x20, 0x67, 0xd1, 0xb4, 0xe5, 0xf2, 0xc0, 0xa2, 0xe0, 0xcf, 0xa4,
	0x70, 0x12, 0x2b, 0x70, 0x28, 0x39, 0xb3, 0x7c, 0xc2, 0x2c, 0x31, 0xb5, 0x62, 0x10, 0xd9, 0xd7,
	0x12, 0x21, 0x97, 0xdc, 0x28, 0xa8, 0x5f, 0x73, 0x8c, 0x1b, 0xa3, 0x76, 0x77, 0x02, 0x62, 0x40,
	0x62, 0x42, 0xc7, 0xc2, 0x0f, 0x1d, 0x8f, 0x5c, 0x73, 0x09, 0x2e, 0x19, 0xaa, 0xbd, 0x3a, 0x2e,
	0xc5, 0x20, 0x6c, 0x9a, 0x8d, 0xab, 0xe8, 0x10, 0x9d, 0x14, 0x6e, 0xfe, 0xc6, 0xab, 0x75, 0xa3,
	0x82, 0xff, 0x64, 0x43, 0xb2, 0x10, 0xd5, 0x9c, 0x1a, 0x15, 0x63, 0x10, 0xfd, 0x85, 0x68, 0xb6,
	0x71, 0x45, 0xdb, 0x5e, 0x78, 0x5e, 0x7f, 0x21, 0x36, 0x0d, 0x37, 0x18, 0xb4, 0xc5, 0x3c, 0x21,
	0x5c, 0xd7, 0x50, 0xcf, 0x01, 0x9a, 0x0e, 0xb8, 0x0f, 0xec, 0xc7, 0x4d, 0x8c, 0x63, 0xfc, 0xdf,
	0xe5, 0x4c, 0x02, 0x8b, 0x88, 0xed, 0x39, 0xe9, 0xbc, 0x9a, 0x57, 0xe3, 0xf2, 0x5a, 0xec, 0x39,
	0xe9, 0xdc, 0x38, 0xc2, 0x65, 0xc9, 0x03, 0x1e, 0x86, 0x3c, 0x51, 0x16, 0xbf, 0xd5, 0xce, 0xbf,
	0xb5, 0x96, 0xb5, 0x3b, 0xc7, 0x07, 0xdd, 0xf6, 0x68, 0x02, 0xa2, 0xcb, 0x29, 0x25, 0xae, 0x54,
	0x1d, 0x87, 0x21, 0x3c, 0xec, 0xd1, 0x2e, 0x83, 0xf5, 0x65, 0xfb, 0xc0, 0xb9, 0x8f, 0xf0, 0x56,
	0xb2, 0x52, 0xbf, 0x9b, 0xfc, 0x45, 0xb8, 0xa6, 0x93, 0x3b, 0x51, 0xda, 0x8b, 0x98, 0x4f, 0x38,
	0xbb, 0x85, 0x80, 0xcc, 0x35, 0xda, 0xc0, 0xd8, 0xd3, 0xa2, 0x0d, 0xde, 0x8a, 0x2d, 0xad, 0x94,
	0x2b, 0xaf, 0x79, 0x87, 0x6b, 0x3a, 0xf9, 0x53, 0xb8, 0x8e, 0x4b, 0x8c, 0x24, 0xb6, 0xcc, 0x94,
	0xf5, 0xc5, 0x8c, 0x24, 0x6a, 0x63, 0xc7, 0x39, 0xbf, 0xe3, 0xdc, 0xa9, 0x3c, 0x2f, 0x4d, 0xf4,
	0xb2, 0x34, 0xd1, 0xeb, 0xd2, 0x44, 0x8f, 0x6f, 0xe6, 0xaf, 0x4b, 0x74, 0x9f, 0x8f, 0x41, 0x4c,
	0x8b, 0xea, 0x4d, 0x9f, 0xbe, 0x07, 0x00, 0x00, 0xff, 0xff, 0x9f, 0x3d, 0xb6, 0x12, 0x0c, 0x03,
	0x00, 0x00,
}
