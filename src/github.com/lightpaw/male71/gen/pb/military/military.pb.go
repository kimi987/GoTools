// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/gen/pb/military/military.proto
// DO NOT EDIT!

/*
	Package military is a generated protocol buffer package.

	It is generated from these files:
		github.com/lightpaw/male7/gen/pb/military/military.proto

	It has these top-level messages:
		S2CUpdateSoldierCapcityProto
		C2SRecruitSoldierProto
		S2CRecruitSoldierProto
		C2SRecruitSoldierV2Proto
		S2CRecruitSoldierV2Proto
		S2CAutoRecoverSoldierProto
		S2CRecruitSoldierTimesChangedProto
		S2CAddWoundedSoldierProto
		C2SHealWoundedSoldierProto
		S2CHealWoundedSoldierProto
		C2SCaptainChangeSoldierProto
		S2CCaptainChangeSoldierProto
		C2SCaptainFullSoldierProto
		S2CCaptainFullSoldierProto
		S2CUpdateFreeSoldierProto
		S2CForceAddSoldierProto
		S2CCaptainChangeDataProto
		C2SFightProto
		S2CFightProto
		S2CMultiFightProto
		C2SFightxProto
		S2CFightxProto
		S2CUpgradeSoldierLevelProto
		S2CRecruitCaptainV2Proto
		S2CRandomCaptainHeadProto
		C2SRecruitCaptainSeekerProto
		S2CRecruitCaptainSeekerProto
		C2SSetDefenseTroopProto
		S2CSetDefenseTroopProto
		S2CSetDenfeseTroopDefeatedMailProto
		C2SClearDefenseTroopDefeatedMailProto
		S2CClearDefenseTroopDefeatedMailProto
		C2SSetDefenserAutoFullSoldierProto
		S2CSetDefenserAutoFullSoldierProto
		C2SUseCopyDefenserGoodsProto
		S2CUseCopyDefenserGoodsProto
		S2CUpdateCopyDefenserProto
		C2SSellSeekCaptainProto
		S2CSellSeekCaptainProto
		C2SSetMultiCaptainIndexProto
		S2CSetMultiCaptainIndexProto
		C2SSetPveCaptainProto
		S2CSetPveCaptainProto
		C2SFireCaptainProto
		S2CFireCaptainProto
		C2SCaptainRefinedProto
		S2CCaptainRefinedProto
		C2SCaptainEnhanceProto
		S2CCaptainEnhanceProto
		S2CCaptainRefinedUpgradeProto
		S2CUpdateAbilityExpProto
		S2CUpdateCaptainExpProto
		S2CUpdateCaptainLevelProto
		S2CCaptainLevelupProto
		S2CUpdateCaptainStatProto
		C2SChangeCaptainNameProto
		S2CChangeCaptainNameProto
		C2SChangeCaptainRaceProto
		S2CChangeCaptainRaceProto
		C2SCaptainRebirthPreviewProto
		S2CCaptainRebirthPreviewProto
		S2CCaptainRebirthCdStartProto
		C2SCaptainRebirthProto
		S2CCaptainRebirthProto
		C2SCaptainProgressProto
		S2CCaptainProgressProto
		C2SCaptainRebirthMiaoCdProto
		S2CCaptainRebirthMiaoCdProto
		S2CCollectCaptainTrainingExpProto
		S2CCaptainTrainExpProto
		S2CUpdateTrainingProto
		S2CCaptainCanCollectExpProto
		C2SUseTrainingExpGoodsProto
		S2CUseTrainingExpGoodsProto
		C2SUseLevelExpGoodsProto
		S2CUseLevelExpGoodsProto
		C2SUseLevelExpGoods2Proto
		S2CUseLevelExpGoods2Proto
		C2SAutoUseGoodsUntilCaptainLevelupProto
		S2CAutoUseGoodsUntilCaptainLevelupProto
		S2CGetMaxRecruitSoldierProto
		S2CGetMaxHealSoldierProto
		S2CJiuGuanConsultProto
		S2CJiuGuanConsultBroadcastProto
		S2CJiuGuanTimesChangedProto
		C2SJiuGuanRefreshProto
		S2CJiuGuanRefreshProto
		C2SUnlockCaptainRestraintSpellProto
		S2CUnlockCaptainRestraintSpellProto
		S2CNewTroopsProto
		C2SGetCaptainStatDetailsProto
		S2CGetCaptainStatDetailsProto
		C2SCaptainStatDetailsProto
		S2CCaptainStatDetailsProto
		S2CUpdateTroopFightAmountProto
		C2SUpdateCaptainOfficialProto
		S2CUpdateCaptainOfficialProto
		C2SSetCaptainOfficialProto
		S2CSetCaptainOfficialProto
		C2SLeaveCaptainOfficialProto
		S2CLeaveCaptainOfficialProto
		S2CAddGongxunProto
		C2SUseGongXunGoodsProto
		S2CUseGongXunGoodsProto
		C2SUseGongxunGoodsProto
		S2CUseGongxunGoodsProto
		C2SCloseFightGuideProto
		S2CCloseFightGuideProto
		C2SViewOtherHeroCaptainProto
		S2CViewOtherHeroCaptainProto
		C2SCaptainBornProto
		S2CCaptainBornProto
		C2SCaptainUpstarProto
		S2CCaptainUpstarProto
		C2SCaptainExchangeProto
		S2CCaptainExchangeProto
		C2SActivateCaptainFriendshipProto
		S2CActivateCaptainFriendshipProto
		S2CShowPrizeCaptainProto
		C2SNoticeOfficialHasViewedProto
		S2CNoticeOfficialHasViewedProto
*/
package military

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type S2CUpdateSoldierCapcityProto struct {
	SoldierCapcity         int32 `protobuf:"varint,1,opt,name=soldier_capcity,json=soldierCapcity,proto3" json:"soldier_capcity,omitempty"`
	WoundedSoldierCapcity  int32 `protobuf:"varint,2,opt,name=wounded_soldier_capcity,json=woundedSoldierCapcity,proto3" json:"wounded_soldier_capcity,omitempty"`
	NewSoldierCapcity      int32 `protobuf:"varint,3,opt,name=new_soldier_capcity,json=newSoldierCapcity,proto3" json:"new_soldier_capcity,omitempty"`
	NewSoldierOutput       int32 `protobuf:"varint,4,opt,name=new_soldier_output,json=newSoldierOutput,proto3" json:"new_soldier_output,omitempty"`
	NewRecruitSoldierCount int32 `protobuf:"varint,5,opt,name=new_recruit_soldier_count,json=newRecruitSoldierCount,proto3" json:"new_recruit_soldier_count,omitempty"`
}

func (m *S2CUpdateSoldierCapcityProto) Reset()         { *m = S2CUpdateSoldierCapcityProto{} }
func (m *S2CUpdateSoldierCapcityProto) String() string { return proto.CompactTextString(m) }
func (*S2CUpdateSoldierCapcityProto) ProtoMessage()    {}
func (*S2CUpdateSoldierCapcityProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{0}
}

func (m *S2CUpdateSoldierCapcityProto) GetSoldierCapcity() int32 {
	if m != nil {
		return m.SoldierCapcity
	}
	return 0
}

func (m *S2CUpdateSoldierCapcityProto) GetWoundedSoldierCapcity() int32 {
	if m != nil {
		return m.WoundedSoldierCapcity
	}
	return 0
}

func (m *S2CUpdateSoldierCapcityProto) GetNewSoldierCapcity() int32 {
	if m != nil {
		return m.NewSoldierCapcity
	}
	return 0
}

func (m *S2CUpdateSoldierCapcityProto) GetNewSoldierOutput() int32 {
	if m != nil {
		return m.NewSoldierOutput
	}
	return 0
}

func (m *S2CUpdateSoldierCapcityProto) GetNewRecruitSoldierCount() int32 {
	if m != nil {
		return m.NewRecruitSoldierCount
	}
	return 0
}

type C2SRecruitSoldierProto struct {
	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *C2SRecruitSoldierProto) Reset()                    { *m = C2SRecruitSoldierProto{} }
func (m *C2SRecruitSoldierProto) String() string            { return proto.CompactTextString(m) }
func (*C2SRecruitSoldierProto) ProtoMessage()               {}
func (*C2SRecruitSoldierProto) Descriptor() ([]byte, []int) { return fileDescriptorMilitary, []int{1} }

func (m *C2SRecruitSoldierProto) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type S2CRecruitSoldierProto struct {
	NewSoldier  int32 `protobuf:"varint,2,opt,name=new_soldier,json=newSoldier,proto3" json:"new_soldier,omitempty"`
	FreeSoldier int32 `protobuf:"varint,3,opt,name=free_soldier,json=freeSoldier,proto3" json:"free_soldier,omitempty"`
}

func (m *S2CRecruitSoldierProto) Reset()                    { *m = S2CRecruitSoldierProto{} }
func (m *S2CRecruitSoldierProto) String() string            { return proto.CompactTextString(m) }
func (*S2CRecruitSoldierProto) ProtoMessage()               {}
func (*S2CRecruitSoldierProto) Descriptor() ([]byte, []int) { return fileDescriptorMilitary, []int{2} }

func (m *S2CRecruitSoldierProto) GetNewSoldier() int32 {
	if m != nil {
		return m.NewSoldier
	}
	return 0
}

func (m *S2CRecruitSoldierProto) GetFreeSoldier() int32 {
	if m != nil {
		return m.FreeSoldier
	}
	return 0
}

type C2SRecruitSoldierV2Proto struct {
	All bool `protobuf:"varint,1,opt,name=all,proto3" json:"all,omitempty"`
}

func (m *C2SRecruitSoldierV2Proto) Reset()                    { *m = C2SRecruitSoldierV2Proto{} }
func (m *C2SRecruitSoldierV2Proto) String() string            { return proto.CompactTextString(m) }
func (*C2SRecruitSoldierV2Proto) ProtoMessage()               {}
func (*C2SRecruitSoldierV2Proto) Descriptor() ([]byte, []int) { return fileDescriptorMilitary, []int{3} }

func (m *C2SRecruitSoldierV2Proto) GetAll() bool {
	if m != nil {
		return m.All
	}
	return false
}

type S2CRecruitSoldierV2Proto struct {
	AddSoldier int32 `protobuf:"varint,2,opt,name=add_soldier,json=addSoldier,proto3" json:"add_soldier,omitempty"`
}

func (m *S2CRecruitSoldierV2Proto) Reset()                    { *m = S2CRecruitSoldierV2Proto{} }
func (m *S2CRecruitSoldierV2Proto) String() string            { return proto.CompactTextString(m) }
func (*S2CRecruitSoldierV2Proto) ProtoMessage()               {}
func (*S2CRecruitSoldierV2Proto) Descriptor() ([]byte, []int) { return fileDescriptorMilitary, []int{4} }

func (m *S2CRecruitSoldierV2Proto) GetAddSoldier() int32 {
	if m != nil {
		return m.AddSoldier
	}
	return 0
}

type S2CAutoRecoverSoldierProto struct {
	FreeSoldier         int32   `protobuf:"varint,1,opt,name=free_soldier,json=freeSoldier,proto3" json:"free_soldier,omitempty"`
	CaptainId           []int32 `protobuf:"varint,2,rep,name=captain_id,json=captainId" json:"captain_id,omitempty"`
	CaptainSoldierCount []int32 `protobuf:"varint,3,rep,name=captain_soldier_count,json=captainSoldierCount" json:"captain_soldier_count,omitempty"`
}

func (m *S2CAutoRecoverSoldierProto) Reset()         { *m = S2CAutoRecoverSoldierProto{} }
func (m *S2CAutoRecoverSoldierProto) String() string { return proto.CompactTextString(m) }
func (*S2CAutoRecoverSoldierProto) ProtoMessage()    {}
func (*S2CAutoRecoverSoldierProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{5}
}

func (m *S2CAutoRecoverSoldierProto) GetFreeSoldier() int32 {
	if m != nil {
		return m.FreeSoldier
	}
	return 0
}

func (m *S2CAutoRecoverSoldierProto) GetCaptainId() []int32 {
	if m != nil {
		return m.CaptainId
	}
	return nil
}

func (m *S2CAutoRecoverSoldierProto) GetCaptainSoldierCount() []int32 {
	if m != nil {
		return m.CaptainSoldierCount
	}
	return nil
}

type S2CRecruitSoldierTimesChangedProto struct {
	StartRecoveryTime int32 `protobuf:"varint,1,opt,name=start_recovery_time,json=startRecoveryTime,proto3" json:"start_recovery_time,omitempty"`
}

func (m *S2CRecruitSoldierTimesChangedProto) Reset()         { *m = S2CRecruitSoldierTimesChangedProto{} }
func (m *S2CRecruitSoldierTimesChangedProto) String() string { return proto.CompactTextString(m) }
func (*S2CRecruitSoldierTimesChangedProto) ProtoMessage()    {}
func (*S2CRecruitSoldierTimesChangedProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{6}
}

func (m *S2CRecruitSoldierTimesChangedProto) GetStartRecoveryTime() int32 {
	if m != nil {
		return m.StartRecoveryTime
	}
	return 0
}

type S2CAddWoundedSoldierProto struct {
	ToAdd int32 `protobuf:"varint,1,opt,name=toAdd,proto3" json:"toAdd,omitempty"`
	Total int32 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (m *S2CAddWoundedSoldierProto) Reset()         { *m = S2CAddWoundedSoldierProto{} }
func (m *S2CAddWoundedSoldierProto) String() string { return proto.CompactTextString(m) }
func (*S2CAddWoundedSoldierProto) ProtoMessage()    {}
func (*S2CAddWoundedSoldierProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{7}
}

func (m *S2CAddWoundedSoldierProto) GetToAdd() int32 {
	if m != nil {
		return m.ToAdd
	}
	return 0
}

func (m *S2CAddWoundedSoldierProto) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

type C2SHealWoundedSoldierProto struct {
	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *C2SHealWoundedSoldierProto) Reset()         { *m = C2SHealWoundedSoldierProto{} }
func (m *C2SHealWoundedSoldierProto) String() string { return proto.CompactTextString(m) }
func (*C2SHealWoundedSoldierProto) ProtoMessage()    {}
func (*C2SHealWoundedSoldierProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{8}
}

func (m *C2SHealWoundedSoldierProto) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type S2CHealWoundedSoldierProto struct {
	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *S2CHealWoundedSoldierProto) Reset()         { *m = S2CHealWoundedSoldierProto{} }
func (m *S2CHealWoundedSoldierProto) String() string { return proto.CompactTextString(m) }
func (*S2CHealWoundedSoldierProto) ProtoMessage()    {}
func (*S2CHealWoundedSoldierProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{9}
}

func (m *S2CHealWoundedSoldierProto) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type C2SCaptainChangeSoldierProto struct {
	Id    int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Count int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *C2SCaptainChangeSoldierProto) Reset()         { *m = C2SCaptainChangeSoldierProto{} }
func (m *C2SCaptainChangeSoldierProto) String() string { return proto.CompactTextString(m) }
func (*C2SCaptainChangeSoldierProto) ProtoMessage()    {}
func (*C2SCaptainChangeSoldierProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{10}
}

func (m *C2SCaptainChangeSoldierProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *C2SCaptainChangeSoldierProto) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type S2CCaptainChangeSoldierProto struct {
	Id          int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Soldier     int32 `protobuf:"varint,2,opt,name=soldier,proto3" json:"soldier,omitempty"`
	FightAmount int32 `protobuf:"varint,3,opt,name=fight_amount,json=fightAmount,proto3" json:"fight_amount,omitempty"`
	FreeSoldier int32 `protobuf:"varint,4,opt,name=free_soldier,json=freeSoldier,proto3" json:"free_soldier,omitempty"`
}

func (m *S2CCaptainChangeSoldierProto) Reset()         { *m = S2CCaptainChangeSoldierProto{} }
func (m *S2CCaptainChangeSoldierProto) String() string { return proto.CompactTextString(m) }
func (*S2CCaptainChangeSoldierProto) ProtoMessage()    {}
func (*S2CCaptainChangeSoldierProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{11}
}

func (m *S2CCaptainChangeSoldierProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *S2CCaptainChangeSoldierProto) GetSoldier() int32 {
	if m != nil {
		return m.Soldier
	}
	return 0
}

func (m *S2CCaptainChangeSoldierProto) GetFightAmount() int32 {
	if m != nil {
		return m.FightAmount
	}
	return 0
}

func (m *S2CCaptainChangeSoldierProto) GetFreeSoldier() int32 {
	if m != nil {
		return m.FreeSoldier
	}
	return 0
}

type C2SCaptainFullSoldierProto struct {
	Id []int32 `protobuf:"varint,1,rep,name=id" json:"id,omitempty"`
}

func (m *C2SCaptainFullSoldierProto) Reset()         { *m = C2SCaptainFullSoldierProto{} }
func (m *C2SCaptainFullSoldierProto) String() string { return proto.CompactTextString(m) }
func (*C2SCaptainFullSoldierProto) ProtoMessage()    {}
func (*C2SCaptainFullSoldierProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{12}
}

func (m *C2SCaptainFullSoldierProto) GetId() []int32 {
	if m != nil {
		return m.Id
	}
	return nil
}

type S2CCaptainFullSoldierProto struct {
	Id          []int32 `protobuf:"varint,1,rep,name=id" json:"id,omitempty"`
	Soldier     []int32 `protobuf:"varint,2,rep,name=soldier" json:"soldier,omitempty"`
	FightAmount []int32 `protobuf:"varint,3,rep,name=fight_amount,json=fightAmount" json:"fight_amount,omitempty"`
	FreeSoldier int32   `protobuf:"varint,4,opt,name=free_soldier,json=freeSoldier,proto3" json:"free_soldier,omitempty"`
}

func (m *S2CCaptainFullSoldierProto) Reset()         { *m = S2CCaptainFullSoldierProto{} }
func (m *S2CCaptainFullSoldierProto) String() string { return proto.CompactTextString(m) }
func (*S2CCaptainFullSoldierProto) ProtoMessage()    {}
func (*S2CCaptainFullSoldierProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{13}
}

func (m *S2CCaptainFullSoldierProto) GetId() []int32 {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *S2CCaptainFullSoldierProto) GetSoldier() []int32 {
	if m != nil {
		return m.Soldier
	}
	return nil
}

func (m *S2CCaptainFullSoldierProto) GetFightAmount() []int32 {
	if m != nil {
		return m.FightAmount
	}
	return nil
}

func (m *S2CCaptainFullSoldierProto) GetFreeSoldier() int32 {
	if m != nil {
		return m.FreeSoldier
	}
	return 0
}

type S2CUpdateFreeSoldierProto struct {
	StartTime int32 `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	Capcity   int32 `protobuf:"varint,3,opt,name=capcity,proto3" json:"capcity,omitempty"`
	Output    int32 `protobuf:"varint,4,opt,name=output,proto3" json:"output,omitempty"`
	Overflow  int32 `protobuf:"varint,5,opt,name=overflow,proto3" json:"overflow,omitempty"`
}

func (m *S2CUpdateFreeSoldierProto) Reset()         { *m = S2CUpdateFreeSoldierProto{} }
func (m *S2CUpdateFreeSoldierProto) String() string { return proto.CompactTextString(m) }
func (*S2CUpdateFreeSoldierProto) ProtoMessage()    {}
func (*S2CUpdateFreeSoldierProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{14}
}

func (m *S2CUpdateFreeSoldierProto) GetStartTime() int32 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *S2CUpdateFreeSoldierProto) GetCapcity() int32 {
	if m != nil {
		return m.Capcity
	}
	return 0
}

func (m *S2CUpdateFreeSoldierProto) GetOutput() int32 {
	if m != nil {
		return m.Output
	}
	return 0
}

func (m *S2CUpdateFreeSoldierProto) GetOverflow() int32 {
	if m != nil {
		return m.Overflow
	}
	return 0
}

type S2CForceAddSoldierProto struct {
	Times int32 `protobuf:"varint,1,opt,name=times,proto3" json:"times,omitempty"`
}

func (m *S2CForceAddSoldierProto) Reset()                    { *m = S2CForceAddSoldierProto{} }
func (m *S2CForceAddSoldierProto) String() string            { return proto.CompactTextString(m) }
func (*S2CForceAddSoldierProto) ProtoMessage()               {}
func (*S2CForceAddSoldierProto) Descriptor() ([]byte, []int) { return fileDescriptorMilitary, []int{15} }

func (m *S2CForceAddSoldierProto) GetTimes() int32 {
	if m != nil {
		return m.Times
	}
	return 0
}

type S2CCaptainChangeDataProto struct {
	Id          int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Soldier     int32 `protobuf:"varint,2,opt,name=soldier,proto3" json:"soldier,omitempty"`
	MaxSoldier  int32 `protobuf:"varint,3,opt,name=max_soldier,json=maxSoldier,proto3" json:"max_soldier,omitempty"`
	FightAmount int32 `protobuf:"varint,4,opt,name=fight_amount,json=fightAmount,proto3" json:"fight_amount,omitempty"`
}

func (m *S2CCaptainChangeDataProto) Reset()         { *m = S2CCaptainChangeDataProto{} }
func (m *S2CCaptainChangeDataProto) String() string { return proto.CompactTextString(m) }
func (*S2CCaptainChangeDataProto) ProtoMessage()    {}
func (*S2CCaptainChangeDataProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{16}
}

func (m *S2CCaptainChangeDataProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *S2CCaptainChangeDataProto) GetSoldier() int32 {
	if m != nil {
		return m.Soldier
	}
	return 0
}

func (m *S2CCaptainChangeDataProto) GetMaxSoldier() int32 {
	if m != nil {
		return m.MaxSoldier
	}
	return 0
}

func (m *S2CCaptainChangeDataProto) GetFightAmount() int32 {
	if m != nil {
		return m.FightAmount
	}
	return 0
}

type C2SFightProto struct {
	Wall bool `protobuf:"varint,1,opt,name=wall,proto3" json:"wall,omitempty"`
}

func (m *C2SFightProto) Reset()                    { *m = C2SFightProto{} }
func (m *C2SFightProto) String() string            { return proto.CompactTextString(m) }
func (*C2SFightProto) ProtoMessage()               {}
func (*C2SFightProto) Descriptor() ([]byte, []int) { return fileDescriptorMilitary, []int{17} }

func (m *C2SFightProto) GetWall() bool {
	if m != nil {
		return m.Wall
	}
	return false
}

type S2CFightProto struct {
	Replay []byte `protobuf:"bytes,1,opt,name=replay,proto3" json:"replay,omitempty"`
}

func (m *S2CFightProto) Reset()                    { *m = S2CFightProto{} }
func (m *S2CFightProto) String() string            { return proto.CompactTextString(m) }
func (*S2CFightProto) ProtoMessage()               {}
func (*S2CFightProto) Descriptor() ([]byte, []int) { return fileDescriptorMilitary, []int{18} }

func (m *S2CFightProto) GetReplay() []byte {
	if m != nil {
		return m.Replay
	}
	return nil
}

type S2CMultiFightProto struct {
	Replay []byte `protobuf:"bytes,1,opt,name=replay,proto3" json:"replay,omitempty"`
}

func (m *S2CMultiFightProto) Reset()                    { *m = S2CMultiFightProto{} }
func (m *S2CMultiFightProto) String() string            { return proto.CompactTextString(m) }
func (*S2CMultiFightProto) ProtoMessage()               {}
func (*S2CMultiFightProto) Descriptor() ([]byte, []int) { return fileDescriptorMilitary, []int{19} }

func (m *S2CMultiFightProto) GetReplay() []byte {
	if m != nil {
		return m.Replay
	}
	return nil
}

type C2SFightxProto struct {
	Attacker []int32 `protobuf:"varint,2,rep,name=attacker" json:"attacker,omitempty"`
	Defenser []int32 `protobuf:"varint,3,rep,name=defenser" json:"defenser,omitempty"`
	Wall     bool    `protobuf:"varint,1,opt,name=wall,proto3" json:"wall,omitempty"`
}

func (m *C2SFightxProto) Reset()                    { *m = C2SFightxProto{} }
func (m *C2SFightxProto) String() string            { return proto.CompactTextString(m) }
func (*C2SFightxProto) ProtoMessage()               {}
func (*C2SFightxProto) Descriptor() ([]byte, []int) { return fileDescriptorMilitary, []int{20} }

func (m *C2SFightxProto) GetAttacker() []int32 {
	if m != nil {
		return m.Attacker
	}
	return nil
}

func (m *C2SFightxProto) GetDefenser() []int32 {
	if m != nil {
		return m.Defenser
	}
	return nil
}

func (m *C2SFightxProto) GetWall() bool {
	if m != nil {
		return m.Wall
	}
	return false
}

type S2CFightxProto struct {
	Replay []byte `protobuf:"bytes,1,opt,name=replay,proto3" json:"replay,omitempty"`
}

func (m *S2CFightxProto) Reset()                    { *m = S2CFightxProto{} }
func (m *S2CFightxProto) String() string            { return proto.CompactTextString(m) }
func (*S2CFightxProto) ProtoMessage()               {}
func (*S2CFightxProto) Descriptor() ([]byte, []int) { return fileDescriptorMilitary, []int{21} }

func (m *S2CFightxProto) GetReplay() []byte {
	if m != nil {
		return m.Replay
	}
	return nil
}

type S2CUpgradeSoldierLevelProto struct {
	Level int32 `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
}

func (m *S2CUpgradeSoldierLevelProto) Reset()         { *m = S2CUpgradeSoldierLevelProto{} }
func (m *S2CUpgradeSoldierLevelProto) String() string { return proto.CompactTextString(m) }
func (*S2CUpgradeSoldierLevelProto) ProtoMessage()    {}
func (*S2CUpgradeSoldierLevelProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{22}
}

func (m *S2CUpgradeSoldierLevelProto) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

type S2CRecruitCaptainV2Proto struct {
	Captain      []byte `protobuf:"bytes,1,opt,name=captain,proto3" json:"captain,omitempty"`
	CaptainIndex int32  `protobuf:"varint,2,opt,name=captain_index,json=captainIndex,proto3" json:"captain_index,omitempty"`
}

func (m *S2CRecruitCaptainV2Proto) Reset()         { *m = S2CRecruitCaptainV2Proto{} }
func (m *S2CRecruitCaptainV2Proto) String() string { return proto.CompactTextString(m) }
func (*S2CRecruitCaptainV2Proto) ProtoMessage()    {}
func (*S2CRecruitCaptainV2Proto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{23}
}

func (m *S2CRecruitCaptainV2Proto) GetCaptain() []byte {
	if m != nil {
		return m.Captain
	}
	return nil
}

func (m *S2CRecruitCaptainV2Proto) GetCaptainIndex() int32 {
	if m != nil {
		return m.CaptainIndex
	}
	return 0
}

type S2CRandomCaptainHeadProto struct {
	Head []string `protobuf:"bytes,2,rep,name=head" json:"head,omitempty"`
}

func (m *S2CRandomCaptainHeadProto) Reset()         { *m = S2CRandomCaptainHeadProto{} }
func (m *S2CRandomCaptainHeadProto) String() string { return proto.CompactTextString(m) }
func (*S2CRandomCaptainHeadProto) ProtoMessage()    {}
func (*S2CRandomCaptainHeadProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{24}
}

func (m *S2CRandomCaptainHeadProto) GetHead() []string {
	if m != nil {
		return m.Head
	}
	return nil
}

type C2SRecruitCaptainSeekerProto struct {
	Index int32  `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Head  string `protobuf:"bytes,2,opt,name=head,proto3" json:"head,omitempty"`
}

func (m *C2SRecruitCaptainSeekerProto) Reset()         { *m = C2SRecruitCaptainSeekerProto{} }
func (m *C2SRecruitCaptainSeekerProto) String() string { return proto.CompactTextString(m) }
func (*C2SRecruitCaptainSeekerProto) ProtoMessage()    {}
func (*C2SRecruitCaptainSeekerProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{25}
}

func (m *C2SRecruitCaptainSeekerProto) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *C2SRecruitCaptainSeekerProto) GetHead() string {
	if m != nil {
		return m.Head
	}
	return ""
}

type S2CRecruitCaptainSeekerProto struct {
	Index        int32  `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Captain      []byte `protobuf:"bytes,2,opt,name=captain,proto3" json:"captain,omitempty"`
	CaptainIndex int32  `protobuf:"varint,3,opt,name=captain_index,json=captainIndex,proto3" json:"captain_index,omitempty"`
}

func (m *S2CRecruitCaptainSeekerProto) Reset()         { *m = S2CRecruitCaptainSeekerProto{} }
func (m *S2CRecruitCaptainSeekerProto) String() string { return proto.CompactTextString(m) }
func (*S2CRecruitCaptainSeekerProto) ProtoMessage()    {}
func (*S2CRecruitCaptainSeekerProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{26}
}

func (m *S2CRecruitCaptainSeekerProto) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *S2CRecruitCaptainSeekerProto) GetCaptain() []byte {
	if m != nil {
		return m.Captain
	}
	return nil
}

func (m *S2CRecruitCaptainSeekerProto) GetCaptainIndex() int32 {
	if m != nil {
		return m.CaptainIndex
	}
	return 0
}

type C2SSetDefenseTroopProto struct {
	IsTent     bool  `protobuf:"varint,1,opt,name=is_tent,json=isTent,proto3" json:"is_tent,omitempty"`
	TroopIndex int32 `protobuf:"varint,2,opt,name=troop_index,json=troopIndex,proto3" json:"troop_index,omitempty"`
}

func (m *C2SSetDefenseTroopProto) Reset()                    { *m = C2SSetDefenseTroopProto{} }
func (m *C2SSetDefenseTroopProto) String() string            { return proto.CompactTextString(m) }
func (*C2SSetDefenseTroopProto) ProtoMessage()               {}
func (*C2SSetDefenseTroopProto) Descriptor() ([]byte, []int) { return fileDescriptorMilitary, []int{27} }

func (m *C2SSetDefenseTroopProto) GetIsTent() bool {
	if m != nil {
		return m.IsTent
	}
	return false
}

func (m *C2SSetDefenseTroopProto) GetTroopIndex() int32 {
	if m != nil {
		return m.TroopIndex
	}
	return 0
}

type S2CSetDefenseTroopProto struct {
	IsTent     bool  `protobuf:"varint,1,opt,name=is_tent,json=isTent,proto3" json:"is_tent,omitempty"`
	TroopIndex int32 `protobuf:"varint,2,opt,name=troop_index,json=troopIndex,proto3" json:"troop_index,omitempty"`
}

func (m *S2CSetDefenseTroopProto) Reset()                    { *m = S2CSetDefenseTroopProto{} }
func (m *S2CSetDefenseTroopProto) String() string            { return proto.CompactTextString(m) }
func (*S2CSetDefenseTroopProto) ProtoMessage()               {}
func (*S2CSetDefenseTroopProto) Descriptor() ([]byte, []int) { return fileDescriptorMilitary, []int{28} }

func (m *S2CSetDefenseTroopProto) GetIsTent() bool {
	if m != nil {
		return m.IsTent
	}
	return false
}

func (m *S2CSetDefenseTroopProto) GetTroopIndex() int32 {
	if m != nil {
		return m.TroopIndex
	}
	return 0
}

type S2CSetDenfeseTroopDefeatedMailProto struct {
	Mail   []byte `protobuf:"bytes,1,opt,name=mail,proto3" json:"mail,omitempty"`
	IsTent bool   `protobuf:"varint,2,opt,name=is_tent,json=isTent,proto3" json:"is_tent,omitempty"`
}

func (m *S2CSetDenfeseTroopDefeatedMailProto) Reset()         { *m = S2CSetDenfeseTroopDefeatedMailProto{} }
func (m *S2CSetDenfeseTroopDefeatedMailProto) String() string { return proto.CompactTextString(m) }
func (*S2CSetDenfeseTroopDefeatedMailProto) ProtoMessage()    {}
func (*S2CSetDenfeseTroopDefeatedMailProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{29}
}

func (m *S2CSetDenfeseTroopDefeatedMailProto) GetMail() []byte {
	if m != nil {
		return m.Mail
	}
	return nil
}

func (m *S2CSetDenfeseTroopDefeatedMailProto) GetIsTent() bool {
	if m != nil {
		return m.IsTent
	}
	return false
}

type C2SClearDefenseTroopDefeatedMailProto struct {
	IsTent bool `protobuf:"varint,1,opt,name=is_tent,json=isTent,proto3" json:"is_tent,omitempty"`
}

func (m *C2SClearDefenseTroopDefeatedMailProto) Reset()         { *m = C2SClearDefenseTroopDefeatedMailProto{} }
func (m *C2SClearDefenseTroopDefeatedMailProto) String() string { return proto.CompactTextString(m) }
func (*C2SClearDefenseTroopDefeatedMailProto) ProtoMessage()    {}
func (*C2SClearDefenseTroopDefeatedMailProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{30}
}

func (m *C2SClearDefenseTroopDefeatedMailProto) GetIsTent() bool {
	if m != nil {
		return m.IsTent
	}
	return false
}

type S2CClearDefenseTroopDefeatedMailProto struct {
	IsTent bool `protobuf:"varint,1,opt,name=is_tent,json=isTent,proto3" json:"is_tent,omitempty"`
}

func (m *S2CClearDefenseTroopDefeatedMailProto) Reset()         { *m = S2CClearDefenseTroopDefeatedMailProto{} }
func (m *S2CClearDefenseTroopDefeatedMailProto) String() string { return proto.CompactTextString(m) }
func (*S2CClearDefenseTroopDefeatedMailProto) ProtoMessage()    {}
func (*S2CClearDefenseTroopDefeatedMailProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{31}
}

func (m *S2CClearDefenseTroopDefeatedMailProto) GetIsTent() bool {
	if m != nil {
		return m.IsTent
	}
	return false
}

type C2SSetDefenserAutoFullSoldierProto struct {
	Dont bool `protobuf:"varint,1,opt,name=dont,proto3" json:"dont,omitempty"`
}

func (m *C2SSetDefenserAutoFullSoldierProto) Reset()         { *m = C2SSetDefenserAutoFullSoldierProto{} }
func (m *C2SSetDefenserAutoFullSoldierProto) String() string { return proto.CompactTextString(m) }
func (*C2SSetDefenserAutoFullSoldierProto) ProtoMessage()    {}
func (*C2SSetDefenserAutoFullSoldierProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{32}
}

func (m *C2SSetDefenserAutoFullSoldierProto) GetDont() bool {
	if m != nil {
		return m.Dont
	}
	return false
}

type S2CSetDefenserAutoFullSoldierProto struct {
	Dont bool `protobuf:"varint,1,opt,name=dont,proto3" json:"dont,omitempty"`
}

func (m *S2CSetDefenserAutoFullSoldierProto) Reset()         { *m = S2CSetDefenserAutoFullSoldierProto{} }
func (m *S2CSetDefenserAutoFullSoldierProto) String() string { return proto.CompactTextString(m) }
func (*S2CSetDefenserAutoFullSoldierProto) ProtoMessage()    {}
func (*S2CSetDefenserAutoFullSoldierProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{33}
}

func (m *S2CSetDefenserAutoFullSoldierProto) GetDont() bool {
	if m != nil {
		return m.Dont
	}
	return false
}

type C2SUseCopyDefenserGoodsProto struct {
	Goods      int32 `protobuf:"varint,1,opt,name=goods,proto3" json:"goods,omitempty"`
	AutoBuy    bool  `protobuf:"varint,2,opt,name=auto_buy,json=autoBuy,proto3" json:"auto_buy,omitempty"`
	TroopIndex int32 `protobuf:"varint,3,opt,name=troop_index,json=troopIndex,proto3" json:"troop_index,omitempty"`
}

func (m *C2SUseCopyDefenserGoodsProto) Reset()         { *m = C2SUseCopyDefenserGoodsProto{} }
func (m *C2SUseCopyDefenserGoodsProto) String() string { return proto.CompactTextString(m) }
func (*C2SUseCopyDefenserGoodsProto) ProtoMessage()    {}
func (*C2SUseCopyDefenserGoodsProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{34}
}

func (m *C2SUseCopyDefenserGoodsProto) GetGoods() int32 {
	if m != nil {
		return m.Goods
	}
	return 0
}

func (m *C2SUseCopyDefenserGoodsProto) GetAutoBuy() bool {
	if m != nil {
		return m.AutoBuy
	}
	return false
}

func (m *C2SUseCopyDefenserGoodsProto) GetTroopIndex() int32 {
	if m != nil {
		return m.TroopIndex
	}
	return 0
}

type S2CUseCopyDefenserGoodsProto struct {
	TroopIndex int32 `protobuf:"varint,1,opt,name=troop_index,json=troopIndex,proto3" json:"troop_index,omitempty"`
	EndTime    int32 `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (m *S2CUseCopyDefenserGoodsProto) Reset()         { *m = S2CUseCopyDefenserGoodsProto{} }
func (m *S2CUseCopyDefenserGoodsProto) String() string { return proto.CompactTextString(m) }
func (*S2CUseCopyDefenserGoodsProto) ProtoMessage()    {}
func (*S2CUseCopyDefenserGoodsProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{35}
}

func (m *S2CUseCopyDefenserGoodsProto) GetTroopIndex() int32 {
	if m != nil {
		return m.TroopIndex
	}
	return 0
}

func (m *S2CUseCopyDefenserGoodsProto) GetEndTime() int32 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

type S2CUpdateCopyDefenserProto struct {
	Soldier      int32 `protobuf:"varint,1,opt,name=soldier,proto3" json:"soldier,omitempty"`
	TotalSoldier int32 `protobuf:"varint,2,opt,name=total_soldier,json=totalSoldier,proto3" json:"total_soldier,omitempty"`
	FightAmount  int32 `protobuf:"varint,3,opt,name=fight_amount,json=fightAmount,proto3" json:"fight_amount,omitempty"`
}

func (m *S2CUpdateCopyDefenserProto) Reset()         { *m = S2CUpdateCopyDefenserProto{} }
func (m *S2CUpdateCopyDefenserProto) String() string { return proto.CompactTextString(m) }
func (*S2CUpdateCopyDefenserProto) ProtoMessage()    {}
func (*S2CUpdateCopyDefenserProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{36}
}

func (m *S2CUpdateCopyDefenserProto) GetSoldier() int32 {
	if m != nil {
		return m.Soldier
	}
	return 0
}

func (m *S2CUpdateCopyDefenserProto) GetTotalSoldier() int32 {
	if m != nil {
		return m.TotalSoldier
	}
	return 0
}

func (m *S2CUpdateCopyDefenserProto) GetFightAmount() int32 {
	if m != nil {
		return m.FightAmount
	}
	return 0
}

type C2SSellSeekCaptainProto struct {
	Index int32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *C2SSellSeekCaptainProto) Reset()                    { *m = C2SSellSeekCaptainProto{} }
func (m *C2SSellSeekCaptainProto) String() string            { return proto.CompactTextString(m) }
func (*C2SSellSeekCaptainProto) ProtoMessage()               {}
func (*C2SSellSeekCaptainProto) Descriptor() ([]byte, []int) { return fileDescriptorMilitary, []int{37} }

func (m *C2SSellSeekCaptainProto) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

type S2CSellSeekCaptainProto struct {
	Index int32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *S2CSellSeekCaptainProto) Reset()                    { *m = S2CSellSeekCaptainProto{} }
func (m *S2CSellSeekCaptainProto) String() string            { return proto.CompactTextString(m) }
func (*S2CSellSeekCaptainProto) ProtoMessage()               {}
func (*S2CSellSeekCaptainProto) Descriptor() ([]byte, []int) { return fileDescriptorMilitary, []int{38} }

func (m *S2CSellSeekCaptainProto) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

type C2SSetMultiCaptainIndexProto struct {
	Index  int32   `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Id     []int32 `protobuf:"varint,2,rep,name=id" json:"id,omitempty"`
	XIndex []int32 `protobuf:"varint,3,rep,name=x_index,json=xIndex" json:"x_index,omitempty"`
}

func (m *C2SSetMultiCaptainIndexProto) Reset()         { *m = C2SSetMultiCaptainIndexProto{} }
func (m *C2SSetMultiCaptainIndexProto) String() string { return proto.CompactTextString(m) }
func (*C2SSetMultiCaptainIndexProto) ProtoMessage()    {}
func (*C2SSetMultiCaptainIndexProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{39}
}

func (m *C2SSetMultiCaptainIndexProto) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *C2SSetMultiCaptainIndexProto) GetId() []int32 {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *C2SSetMultiCaptainIndexProto) GetXIndex() []int32 {
	if m != nil {
		return m.XIndex
	}
	return nil
}

type S2CSetMultiCaptainIndexProto struct {
	Index  int32   `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Id     []int32 `protobuf:"varint,2,rep,name=id" json:"id,omitempty"`
	XIndex []int32 `protobuf:"varint,3,rep,name=x_index,json=xIndex" json:"x_index,omitempty"`
}

func (m *S2CSetMultiCaptainIndexProto) Reset()         { *m = S2CSetMultiCaptainIndexProto{} }
func (m *S2CSetMultiCaptainIndexProto) String() string { return proto.CompactTextString(m) }
func (*S2CSetMultiCaptainIndexProto) ProtoMessage()    {}
func (*S2CSetMultiCaptainIndexProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{40}
}

func (m *S2CSetMultiCaptainIndexProto) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *S2CSetMultiCaptainIndexProto) GetId() []int32 {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *S2CSetMultiCaptainIndexProto) GetXIndex() []int32 {
	if m != nil {
		return m.XIndex
	}
	return nil
}

type C2SSetPveCaptainProto struct {
	PveType int32   `protobuf:"varint,1,opt,name=pve_type,json=pveType,proto3" json:"pve_type,omitempty"`
	Id      []int32 `protobuf:"varint,2,rep,name=id" json:"id,omitempty"`
	XIndex  []int32 `protobuf:"varint,3,rep,name=x_index,json=xIndex" json:"x_index,omitempty"`
}

func (m *C2SSetPveCaptainProto) Reset()                    { *m = C2SSetPveCaptainProto{} }
func (m *C2SSetPveCaptainProto) String() string            { return proto.CompactTextString(m) }
func (*C2SSetPveCaptainProto) ProtoMessage()               {}
func (*C2SSetPveCaptainProto) Descriptor() ([]byte, []int) { return fileDescriptorMilitary, []int{41} }

func (m *C2SSetPveCaptainProto) GetPveType() int32 {
	if m != nil {
		return m.PveType
	}
	return 0
}

func (m *C2SSetPveCaptainProto) GetId() []int32 {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *C2SSetPveCaptainProto) GetXIndex() []int32 {
	if m != nil {
		return m.XIndex
	}
	return nil
}

type S2CSetPveCaptainProto struct {
	Troop []byte `protobuf:"bytes,1,opt,name=troop,proto3" json:"troop,omitempty"`
}

func (m *S2CSetPveCaptainProto) Reset()                    { *m = S2CSetPveCaptainProto{} }
func (m *S2CSetPveCaptainProto) String() string            { return proto.CompactTextString(m) }
func (*S2CSetPveCaptainProto) ProtoMessage()               {}
func (*S2CSetPveCaptainProto) Descriptor() ([]byte, []int) { return fileDescriptorMilitary, []int{42} }

func (m *S2CSetPveCaptainProto) GetTroop() []byte {
	if m != nil {
		return m.Troop
	}
	return nil
}

type C2SFireCaptainProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SFireCaptainProto) Reset()                    { *m = C2SFireCaptainProto{} }
func (m *C2SFireCaptainProto) String() string            { return proto.CompactTextString(m) }
func (*C2SFireCaptainProto) ProtoMessage()               {}
func (*C2SFireCaptainProto) Descriptor() ([]byte, []int) { return fileDescriptorMilitary, []int{43} }

func (m *C2SFireCaptainProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type S2CFireCaptainProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *S2CFireCaptainProto) Reset()                    { *m = S2CFireCaptainProto{} }
func (m *S2CFireCaptainProto) String() string            { return proto.CompactTextString(m) }
func (*S2CFireCaptainProto) ProtoMessage()               {}
func (*S2CFireCaptainProto) Descriptor() ([]byte, []int) { return fileDescriptorMilitary, []int{44} }

func (m *S2CFireCaptainProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type C2SCaptainRefinedProto struct {
	Captain int32   `protobuf:"varint,1,opt,name=captain,proto3" json:"captain,omitempty"`
	GoodsId []int32 `protobuf:"varint,2,rep,name=goods_id,json=goodsId" json:"goods_id,omitempty"`
	Count   []int32 `protobuf:"varint,3,rep,name=count" json:"count,omitempty"`
}

func (m *C2SCaptainRefinedProto) Reset()                    { *m = C2SCaptainRefinedProto{} }
func (m *C2SCaptainRefinedProto) String() string            { return proto.CompactTextString(m) }
func (*C2SCaptainRefinedProto) ProtoMessage()               {}
func (*C2SCaptainRefinedProto) Descriptor() ([]byte, []int) { return fileDescriptorMilitary, []int{45} }

func (m *C2SCaptainRefinedProto) GetCaptain() int32 {
	if m != nil {
		return m.Captain
	}
	return 0
}

func (m *C2SCaptainRefinedProto) GetGoodsId() []int32 {
	if m != nil {
		return m.GoodsId
	}
	return nil
}

func (m *C2SCaptainRefinedProto) GetCount() []int32 {
	if m != nil {
		return m.Count
	}
	return nil
}

type S2CCaptainRefinedProto struct {
	Captain int32 `protobuf:"varint,1,opt,name=captain,proto3" json:"captain,omitempty"`
	Exp     int32 `protobuf:"varint,2,opt,name=exp,proto3" json:"exp,omitempty"`
}

func (m *S2CCaptainRefinedProto) Reset()                    { *m = S2CCaptainRefinedProto{} }
func (m *S2CCaptainRefinedProto) String() string            { return proto.CompactTextString(m) }
func (*S2CCaptainRefinedProto) ProtoMessage()               {}
func (*S2CCaptainRefinedProto) Descriptor() ([]byte, []int) { return fileDescriptorMilitary, []int{46} }

func (m *S2CCaptainRefinedProto) GetCaptain() int32 {
	if m != nil {
		return m.Captain
	}
	return 0
}

func (m *S2CCaptainRefinedProto) GetExp() int32 {
	if m != nil {
		return m.Exp
	}
	return 0
}

type C2SCaptainEnhanceProto struct {
	Captain int32   `protobuf:"varint,1,opt,name=captain,proto3" json:"captain,omitempty"`
	GoodsId []int32 `protobuf:"varint,2,rep,name=goods_id,json=goodsId" json:"goods_id,omitempty"`
	Count   []int32 `protobuf:"varint,3,rep,name=count" json:"count,omitempty"`
}

func (m *C2SCaptainEnhanceProto) Reset()                    { *m = C2SCaptainEnhanceProto{} }
func (m *C2SCaptainEnhanceProto) String() string            { return proto.CompactTextString(m) }
func (*C2SCaptainEnhanceProto) ProtoMessage()               {}
func (*C2SCaptainEnhanceProto) Descriptor() ([]byte, []int) { return fileDescriptorMilitary, []int{47} }

func (m *C2SCaptainEnhanceProto) GetCaptain() int32 {
	if m != nil {
		return m.Captain
	}
	return 0
}

func (m *C2SCaptainEnhanceProto) GetGoodsId() []int32 {
	if m != nil {
		return m.GoodsId
	}
	return nil
}

func (m *C2SCaptainEnhanceProto) GetCount() []int32 {
	if m != nil {
		return m.Count
	}
	return nil
}

type S2CCaptainEnhanceProto struct {
	Captain    int32 `protobuf:"varint,1,opt,name=captain,proto3" json:"captain,omitempty"`
	Ability    int32 `protobuf:"varint,2,opt,name=ability,proto3" json:"ability,omitempty"`
	AbilityExp int32 `protobuf:"varint,3,opt,name=ability_exp,json=abilityExp,proto3" json:"ability_exp,omitempty"`
	Quality    int32 `protobuf:"varint,4,opt,name=quality,proto3" json:"quality,omitempty"`
}

func (m *S2CCaptainEnhanceProto) Reset()                    { *m = S2CCaptainEnhanceProto{} }
func (m *S2CCaptainEnhanceProto) String() string            { return proto.CompactTextString(m) }
func (*S2CCaptainEnhanceProto) ProtoMessage()               {}
func (*S2CCaptainEnhanceProto) Descriptor() ([]byte, []int) { return fileDescriptorMilitary, []int{48} }

func (m *S2CCaptainEnhanceProto) GetCaptain() int32 {
	if m != nil {
		return m.Captain
	}
	return 0
}

func (m *S2CCaptainEnhanceProto) GetAbility() int32 {
	if m != nil {
		return m.Ability
	}
	return 0
}

func (m *S2CCaptainEnhanceProto) GetAbilityExp() int32 {
	if m != nil {
		return m.AbilityExp
	}
	return 0
}

func (m *S2CCaptainEnhanceProto) GetQuality() int32 {
	if m != nil {
		return m.Quality
	}
	return 0
}

type S2CCaptainRefinedUpgradeProto struct {
	Captain int32  `protobuf:"varint,1,opt,name=captain,proto3" json:"captain,omitempty"`
	Exp     int32  `protobuf:"varint,2,opt,name=exp,proto3" json:"exp,omitempty"`
	Ability int32  `protobuf:"varint,3,opt,name=ability,proto3" json:"ability,omitempty"`
	Name    []byte `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Quality int32  `protobuf:"varint,5,opt,name=quality,proto3" json:"quality,omitempty"`
}

func (m *S2CCaptainRefinedUpgradeProto) Reset()         { *m = S2CCaptainRefinedUpgradeProto{} }
func (m *S2CCaptainRefinedUpgradeProto) String() string { return proto.CompactTextString(m) }
func (*S2CCaptainRefinedUpgradeProto) ProtoMessage()    {}
func (*S2CCaptainRefinedUpgradeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{49}
}

func (m *S2CCaptainRefinedUpgradeProto) GetCaptain() int32 {
	if m != nil {
		return m.Captain
	}
	return 0
}

func (m *S2CCaptainRefinedUpgradeProto) GetExp() int32 {
	if m != nil {
		return m.Exp
	}
	return 0
}

func (m *S2CCaptainRefinedUpgradeProto) GetAbility() int32 {
	if m != nil {
		return m.Ability
	}
	return 0
}

func (m *S2CCaptainRefinedUpgradeProto) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *S2CCaptainRefinedUpgradeProto) GetQuality() int32 {
	if m != nil {
		return m.Quality
	}
	return 0
}

type S2CUpdateAbilityExpProto struct {
	Captain int32 `protobuf:"varint,1,opt,name=captain,proto3" json:"captain,omitempty"`
	Exp     int32 `protobuf:"varint,2,opt,name=exp,proto3" json:"exp,omitempty"`
}

func (m *S2CUpdateAbilityExpProto) Reset()         { *m = S2CUpdateAbilityExpProto{} }
func (m *S2CUpdateAbilityExpProto) String() string { return proto.CompactTextString(m) }
func (*S2CUpdateAbilityExpProto) ProtoMessage()    {}
func (*S2CUpdateAbilityExpProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{50}
}

func (m *S2CUpdateAbilityExpProto) GetCaptain() int32 {
	if m != nil {
		return m.Captain
	}
	return 0
}

func (m *S2CUpdateAbilityExpProto) GetExp() int32 {
	if m != nil {
		return m.Exp
	}
	return 0
}

type S2CUpdateCaptainExpProto struct {
	Captain int32 `protobuf:"varint,1,opt,name=captain,proto3" json:"captain,omitempty"`
	Exp     int32 `protobuf:"varint,2,opt,name=exp,proto3" json:"exp,omitempty"`
}

func (m *S2CUpdateCaptainExpProto) Reset()         { *m = S2CUpdateCaptainExpProto{} }
func (m *S2CUpdateCaptainExpProto) String() string { return proto.CompactTextString(m) }
func (*S2CUpdateCaptainExpProto) ProtoMessage()    {}
func (*S2CUpdateCaptainExpProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{51}
}

func (m *S2CUpdateCaptainExpProto) GetCaptain() int32 {
	if m != nil {
		return m.Captain
	}
	return 0
}

func (m *S2CUpdateCaptainExpProto) GetExp() int32 {
	if m != nil {
		return m.Exp
	}
	return 0
}

type S2CUpdateCaptainLevelProto struct {
	Captain        int32  `protobuf:"varint,1,opt,name=captain,proto3" json:"captain,omitempty"`
	Exp            int32  `protobuf:"varint,2,opt,name=exp,proto3" json:"exp,omitempty"`
	Level          int32  `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	Name           []byte `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	SoldierCapcity int32  `protobuf:"varint,5,opt,name=soldier_capcity,json=soldierCapcity,proto3" json:"soldier_capcity,omitempty"`
}

func (m *S2CUpdateCaptainLevelProto) Reset()         { *m = S2CUpdateCaptainLevelProto{} }
func (m *S2CUpdateCaptainLevelProto) String() string { return proto.CompactTextString(m) }
func (*S2CUpdateCaptainLevelProto) ProtoMessage()    {}
func (*S2CUpdateCaptainLevelProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{52}
}

func (m *S2CUpdateCaptainLevelProto) GetCaptain() int32 {
	if m != nil {
		return m.Captain
	}
	return 0
}

func (m *S2CUpdateCaptainLevelProto) GetExp() int32 {
	if m != nil {
		return m.Exp
	}
	return 0
}

func (m *S2CUpdateCaptainLevelProto) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *S2CUpdateCaptainLevelProto) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *S2CUpdateCaptainLevelProto) GetSoldierCapcity() int32 {
	if m != nil {
		return m.SoldierCapcity
	}
	return 0
}

type S2CCaptainLevelupProto struct {
	Captain        int32 `protobuf:"varint,1,opt,name=captain,proto3" json:"captain,omitempty"`
	Exp            int32 `protobuf:"varint,2,opt,name=exp,proto3" json:"exp,omitempty"`
	Level          int32 `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	SoldierCapcity int32 `protobuf:"varint,4,opt,name=soldier_capcity,json=soldierCapcity,proto3" json:"soldier_capcity,omitempty"`
}

func (m *S2CCaptainLevelupProto) Reset()                    { *m = S2CCaptainLevelupProto{} }
func (m *S2CCaptainLevelupProto) String() string            { return proto.CompactTextString(m) }
func (*S2CCaptainLevelupProto) ProtoMessage()               {}
func (*S2CCaptainLevelupProto) Descriptor() ([]byte, []int) { return fileDescriptorMilitary, []int{53} }

func (m *S2CCaptainLevelupProto) GetCaptain() int32 {
	if m != nil {
		return m.Captain
	}
	return 0
}

func (m *S2CCaptainLevelupProto) GetExp() int32 {
	if m != nil {
		return m.Exp
	}
	return 0
}

func (m *S2CCaptainLevelupProto) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *S2CCaptainLevelupProto) GetSoldierCapcity() int32 {
	if m != nil {
		return m.SoldierCapcity
	}
	return 0
}

type S2CUpdateCaptainStatProto struct {
	Captain         int32  `protobuf:"varint,1,opt,name=captain,proto3" json:"captain,omitempty"`
	TotalStat       []byte `protobuf:"bytes,2,opt,name=total_stat,json=totalStat,proto3" json:"total_stat,omitempty"`
	FightAmount     int32  `protobuf:"varint,3,opt,name=fight_amount,json=fightAmount,proto3" json:"fight_amount,omitempty"`
	FullFightAmount int32  `protobuf:"varint,4,opt,name=full_fight_amount,json=fullFightAmount,proto3" json:"full_fight_amount,omitempty"`
}

func (m *S2CUpdateCaptainStatProto) Reset()         { *m = S2CUpdateCaptainStatProto{} }
func (m *S2CUpdateCaptainStatProto) String() string { return proto.CompactTextString(m) }
func (*S2CUpdateCaptainStatProto) ProtoMessage()    {}
func (*S2CUpdateCaptainStatProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{54}
}

func (m *S2CUpdateCaptainStatProto) GetCaptain() int32 {
	if m != nil {
		return m.Captain
	}
	return 0
}

func (m *S2CUpdateCaptainStatProto) GetTotalStat() []byte {
	if m != nil {
		return m.TotalStat
	}
	return nil
}

func (m *S2CUpdateCaptainStatProto) GetFightAmount() int32 {
	if m != nil {
		return m.FightAmount
	}
	return 0
}

func (m *S2CUpdateCaptainStatProto) GetFullFightAmount() int32 {
	if m != nil {
		return m.FullFightAmount
	}
	return 0
}

type C2SChangeCaptainNameProto struct {
	Id   int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *C2SChangeCaptainNameProto) Reset()         { *m = C2SChangeCaptainNameProto{} }
func (m *C2SChangeCaptainNameProto) String() string { return proto.CompactTextString(m) }
func (*C2SChangeCaptainNameProto) ProtoMessage()    {}
func (*C2SChangeCaptainNameProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{55}
}

func (m *C2SChangeCaptainNameProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *C2SChangeCaptainNameProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type S2CChangeCaptainNameProto struct {
	Id   int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *S2CChangeCaptainNameProto) Reset()         { *m = S2CChangeCaptainNameProto{} }
func (m *S2CChangeCaptainNameProto) String() string { return proto.CompactTextString(m) }
func (*S2CChangeCaptainNameProto) ProtoMessage()    {}
func (*S2CChangeCaptainNameProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{56}
}

func (m *S2CChangeCaptainNameProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *S2CChangeCaptainNameProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type C2SChangeCaptainRaceProto struct {
	Id    int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Race  int32 `protobuf:"varint,2,opt,name=race,proto3" json:"race,omitempty"`
	Money bool  `protobuf:"varint,4,opt,name=money,proto3" json:"money,omitempty"`
}

func (m *C2SChangeCaptainRaceProto) Reset()         { *m = C2SChangeCaptainRaceProto{} }
func (m *C2SChangeCaptainRaceProto) String() string { return proto.CompactTextString(m) }
func (*C2SChangeCaptainRaceProto) ProtoMessage()    {}
func (*C2SChangeCaptainRaceProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{57}
}

func (m *C2SChangeCaptainRaceProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *C2SChangeCaptainRaceProto) GetRace() int32 {
	if m != nil {
		return m.Race
	}
	return 0
}

func (m *C2SChangeCaptainRaceProto) GetMoney() bool {
	if m != nil {
		return m.Money
	}
	return false
}

type S2CChangeCaptainRaceProto struct {
	Id       int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Race     int32  `protobuf:"varint,2,opt,name=race,proto3" json:"race,omitempty"`
	Cooldown int32  `protobuf:"varint,3,opt,name=cooldown,proto3" json:"cooldown,omitempty"`
	Name     []byte `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *S2CChangeCaptainRaceProto) Reset()         { *m = S2CChangeCaptainRaceProto{} }
func (m *S2CChangeCaptainRaceProto) String() string { return proto.CompactTextString(m) }
func (*S2CChangeCaptainRaceProto) ProtoMessage()    {}
func (*S2CChangeCaptainRaceProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{58}
}

func (m *S2CChangeCaptainRaceProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *S2CChangeCaptainRaceProto) GetRace() int32 {
	if m != nil {
		return m.Race
	}
	return 0
}

func (m *S2CChangeCaptainRaceProto) GetCooldown() int32 {
	if m != nil {
		return m.Cooldown
	}
	return 0
}

func (m *S2CChangeCaptainRaceProto) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

type C2SCaptainRebirthPreviewProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SCaptainRebirthPreviewProto) Reset()         { *m = C2SCaptainRebirthPreviewProto{} }
func (m *C2SCaptainRebirthPreviewProto) String() string { return proto.CompactTextString(m) }
func (*C2SCaptainRebirthPreviewProto) ProtoMessage()    {}
func (*C2SCaptainRebirthPreviewProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{59}
}

func (m *C2SCaptainRebirthPreviewProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type S2CCaptainRebirthPreviewProto struct {
	Id             int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           []byte `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
	RebirthLevel   int32  `protobuf:"varint,2,opt,name=rebirth_level,json=rebirthLevel,proto3" json:"rebirth_level,omitempty"`
	Quality        int32  `protobuf:"varint,3,opt,name=quality,proto3" json:"quality,omitempty"`
	Ability        int32  `protobuf:"varint,4,opt,name=ability,proto3" json:"ability,omitempty"`
	AbilityLimit   int32  `protobuf:"varint,5,opt,name=ability_limit,json=abilityLimit,proto3" json:"ability_limit,omitempty"`
	TotalStat      int32  `protobuf:"varint,6,opt,name=total_stat,json=totalStat,proto3" json:"total_stat,omitempty"`
	SoldierCapcity int32  `protobuf:"varint,9,opt,name=soldier_capcity,json=soldierCapcity,proto3" json:"soldier_capcity,omitempty"`
	AddStat        []byte `protobuf:"bytes,10,opt,name=add_stat,json=addStat,proto3" json:"add_stat,omitempty"`
}

func (m *S2CCaptainRebirthPreviewProto) Reset()         { *m = S2CCaptainRebirthPreviewProto{} }
func (m *S2CCaptainRebirthPreviewProto) String() string { return proto.CompactTextString(m) }
func (*S2CCaptainRebirthPreviewProto) ProtoMessage()    {}
func (*S2CCaptainRebirthPreviewProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{60}
}

func (m *S2CCaptainRebirthPreviewProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *S2CCaptainRebirthPreviewProto) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *S2CCaptainRebirthPreviewProto) GetRebirthLevel() int32 {
	if m != nil {
		return m.RebirthLevel
	}
	return 0
}

func (m *S2CCaptainRebirthPreviewProto) GetQuality() int32 {
	if m != nil {
		return m.Quality
	}
	return 0
}

func (m *S2CCaptainRebirthPreviewProto) GetAbility() int32 {
	if m != nil {
		return m.Ability
	}
	return 0
}

func (m *S2CCaptainRebirthPreviewProto) GetAbilityLimit() int32 {
	if m != nil {
		return m.AbilityLimit
	}
	return 0
}

func (m *S2CCaptainRebirthPreviewProto) GetTotalStat() int32 {
	if m != nil {
		return m.TotalStat
	}
	return 0
}

func (m *S2CCaptainRebirthPreviewProto) GetSoldierCapcity() int32 {
	if m != nil {
		return m.SoldierCapcity
	}
	return 0
}

func (m *S2CCaptainRebirthPreviewProto) GetAddStat() []byte {
	if m != nil {
		return m.AddStat
	}
	return nil
}

type S2CCaptainRebirthCdStartProto struct {
	Id        int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CdEndtime int32 `protobuf:"varint,2,opt,name=cd_endtime,json=cdEndtime,proto3" json:"cd_endtime,omitempty"`
}

func (m *S2CCaptainRebirthCdStartProto) Reset()         { *m = S2CCaptainRebirthCdStartProto{} }
func (m *S2CCaptainRebirthCdStartProto) String() string { return proto.CompactTextString(m) }
func (*S2CCaptainRebirthCdStartProto) ProtoMessage()    {}
func (*S2CCaptainRebirthCdStartProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{61}
}

func (m *S2CCaptainRebirthCdStartProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *S2CCaptainRebirthCdStartProto) GetCdEndtime() int32 {
	if m != nil {
		return m.CdEndtime
	}
	return 0
}

type C2SCaptainRebirthProto struct {
	Id   int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Miao bool  `protobuf:"varint,2,opt,name=miao,proto3" json:"miao,omitempty"`
}

func (m *C2SCaptainRebirthProto) Reset()                    { *m = C2SCaptainRebirthProto{} }
func (m *C2SCaptainRebirthProto) String() string            { return proto.CompactTextString(m) }
func (*C2SCaptainRebirthProto) ProtoMessage()               {}
func (*C2SCaptainRebirthProto) Descriptor() ([]byte, []int) { return fileDescriptorMilitary, []int{62} }

func (m *C2SCaptainRebirthProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *C2SCaptainRebirthProto) GetMiao() bool {
	if m != nil {
		return m.Miao
	}
	return false
}

type S2CCaptainRebirthProto struct {
	Id              int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name            []byte `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
	RebirthLevel    int32  `protobuf:"varint,2,opt,name=rebirth_level,json=rebirthLevel,proto3" json:"rebirth_level,omitempty"`
	RebirthExp      int32  `protobuf:"varint,3,opt,name=rebirth_exp,json=rebirthExp,proto3" json:"rebirth_exp,omitempty"`
	Quality         int32  `protobuf:"varint,4,opt,name=quality,proto3" json:"quality,omitempty"`
	Ability         int32  `protobuf:"varint,5,opt,name=ability,proto3" json:"ability,omitempty"`
	AbilityExp      int32  `protobuf:"varint,6,opt,name=ability_exp,json=abilityExp,proto3" json:"ability_exp,omitempty"`
	AbilityLimit    int32  `protobuf:"varint,7,opt,name=ability_limit,json=abilityLimit,proto3" json:"ability_limit,omitempty"`
	Soldier         int32  `protobuf:"varint,8,opt,name=soldier,proto3" json:"soldier,omitempty"`
	SoldierCapcity  int32  `protobuf:"varint,9,opt,name=soldier_capcity,json=soldierCapcity,proto3" json:"soldier_capcity,omitempty"`
	TotalStat       []byte `protobuf:"bytes,10,opt,name=total_stat,json=totalStat,proto3" json:"total_stat,omitempty"`
	FightAmount     int32  `protobuf:"varint,11,opt,name=fight_amount,json=fightAmount,proto3" json:"fight_amount,omitempty"`
	FullFightAmount int32  `protobuf:"varint,12,opt,name=full_fight_amount,json=fullFightAmount,proto3" json:"full_fight_amount,omitempty"`
}

func (m *S2CCaptainRebirthProto) Reset()                    { *m = S2CCaptainRebirthProto{} }
func (m *S2CCaptainRebirthProto) String() string            { return proto.CompactTextString(m) }
func (*S2CCaptainRebirthProto) ProtoMessage()               {}
func (*S2CCaptainRebirthProto) Descriptor() ([]byte, []int) { return fileDescriptorMilitary, []int{63} }

func (m *S2CCaptainRebirthProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *S2CCaptainRebirthProto) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *S2CCaptainRebirthProto) GetRebirthLevel() int32 {
	if m != nil {
		return m.RebirthLevel
	}
	return 0
}

func (m *S2CCaptainRebirthProto) GetRebirthExp() int32 {
	if m != nil {
		return m.RebirthExp
	}
	return 0
}

func (m *S2CCaptainRebirthProto) GetQuality() int32 {
	if m != nil {
		return m.Quality
	}
	return 0
}

func (m *S2CCaptainRebirthProto) GetAbility() int32 {
	if m != nil {
		return m.Ability
	}
	return 0
}

func (m *S2CCaptainRebirthProto) GetAbilityExp() int32 {
	if m != nil {
		return m.AbilityExp
	}
	return 0
}

func (m *S2CCaptainRebirthProto) GetAbilityLimit() int32 {
	if m != nil {
		return m.AbilityLimit
	}
	return 0
}

func (m *S2CCaptainRebirthProto) GetSoldier() int32 {
	if m != nil {
		return m.Soldier
	}
	return 0
}

func (m *S2CCaptainRebirthProto) GetSoldierCapcity() int32 {
	if m != nil {
		return m.SoldierCapcity
	}
	return 0
}

func (m *S2CCaptainRebirthProto) GetTotalStat() []byte {
	if m != nil {
		return m.TotalStat
	}
	return nil
}

func (m *S2CCaptainRebirthProto) GetFightAmount() int32 {
	if m != nil {
		return m.FightAmount
	}
	return 0
}

func (m *S2CCaptainRebirthProto) GetFullFightAmount() int32 {
	if m != nil {
		return m.FullFightAmount
	}
	return 0
}

type C2SCaptainProgressProto struct {
	Id   int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Miao bool  `protobuf:"varint,2,opt,name=miao,proto3" json:"miao,omitempty"`
}

func (m *C2SCaptainProgressProto) Reset()                    { *m = C2SCaptainProgressProto{} }
func (m *C2SCaptainProgressProto) String() string            { return proto.CompactTextString(m) }
func (*C2SCaptainProgressProto) ProtoMessage()               {}
func (*C2SCaptainProgressProto) Descriptor() ([]byte, []int) { return fileDescriptorMilitary, []int{64} }

func (m *C2SCaptainProgressProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *C2SCaptainProgressProto) GetMiao() bool {
	if m != nil {
		return m.Miao
	}
	return false
}

type S2CCaptainProgressProto struct {
	Id              int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RebirthLevel    int32  `protobuf:"varint,2,opt,name=rebirth_level,json=rebirthLevel,proto3" json:"rebirth_level,omitempty"`
	RebirthExp      int32  `protobuf:"varint,3,opt,name=rebirth_exp,json=rebirthExp,proto3" json:"rebirth_exp,omitempty"`
	Quality         int32  `protobuf:"varint,4,opt,name=quality,proto3" json:"quality,omitempty"`
	Ability         int32  `protobuf:"varint,5,opt,name=ability,proto3" json:"ability,omitempty"`
	AbilityExp      int32  `protobuf:"varint,6,opt,name=ability_exp,json=abilityExp,proto3" json:"ability_exp,omitempty"`
	AbilityLimit    int32  `protobuf:"varint,7,opt,name=ability_limit,json=abilityLimit,proto3" json:"ability_limit,omitempty"`
	Soldier         int32  `protobuf:"varint,8,opt,name=soldier,proto3" json:"soldier,omitempty"`
	SoldierCapcity  int32  `protobuf:"varint,9,opt,name=soldier_capcity,json=soldierCapcity,proto3" json:"soldier_capcity,omitempty"`
	TotalStat       []byte `protobuf:"bytes,10,opt,name=total_stat,json=totalStat,proto3" json:"total_stat,omitempty"`
	FightAmount     int32  `protobuf:"varint,11,opt,name=fight_amount,json=fightAmount,proto3" json:"fight_amount,omitempty"`
	FullFightAmount int32  `protobuf:"varint,12,opt,name=full_fight_amount,json=fullFightAmount,proto3" json:"full_fight_amount,omitempty"`
}

func (m *S2CCaptainProgressProto) Reset()                    { *m = S2CCaptainProgressProto{} }
func (m *S2CCaptainProgressProto) String() string            { return proto.CompactTextString(m) }
func (*S2CCaptainProgressProto) ProtoMessage()               {}
func (*S2CCaptainProgressProto) Descriptor() ([]byte, []int) { return fileDescriptorMilitary, []int{65} }

func (m *S2CCaptainProgressProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *S2CCaptainProgressProto) GetRebirthLevel() int32 {
	if m != nil {
		return m.RebirthLevel
	}
	return 0
}

func (m *S2CCaptainProgressProto) GetRebirthExp() int32 {
	if m != nil {
		return m.RebirthExp
	}
	return 0
}

func (m *S2CCaptainProgressProto) GetQuality() int32 {
	if m != nil {
		return m.Quality
	}
	return 0
}

func (m *S2CCaptainProgressProto) GetAbility() int32 {
	if m != nil {
		return m.Ability
	}
	return 0
}

func (m *S2CCaptainProgressProto) GetAbilityExp() int32 {
	if m != nil {
		return m.AbilityExp
	}
	return 0
}

func (m *S2CCaptainProgressProto) GetAbilityLimit() int32 {
	if m != nil {
		return m.AbilityLimit
	}
	return 0
}

func (m *S2CCaptainProgressProto) GetSoldier() int32 {
	if m != nil {
		return m.Soldier
	}
	return 0
}

func (m *S2CCaptainProgressProto) GetSoldierCapcity() int32 {
	if m != nil {
		return m.SoldierCapcity
	}
	return 0
}

func (m *S2CCaptainProgressProto) GetTotalStat() []byte {
	if m != nil {
		return m.TotalStat
	}
	return nil
}

func (m *S2CCaptainProgressProto) GetFightAmount() int32 {
	if m != nil {
		return m.FightAmount
	}
	return 0
}

func (m *S2CCaptainProgressProto) GetFullFightAmount() int32 {
	if m != nil {
		return m.FullFightAmount
	}
	return 0
}

type C2SCaptainRebirthMiaoCdProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SCaptainRebirthMiaoCdProto) Reset()         { *m = C2SCaptainRebirthMiaoCdProto{} }
func (m *C2SCaptainRebirthMiaoCdProto) String() string { return proto.CompactTextString(m) }
func (*C2SCaptainRebirthMiaoCdProto) ProtoMessage()    {}
func (*C2SCaptainRebirthMiaoCdProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{66}
}

func (m *C2SCaptainRebirthMiaoCdProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type S2CCaptainRebirthMiaoCdProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *S2CCaptainRebirthMiaoCdProto) Reset()         { *m = S2CCaptainRebirthMiaoCdProto{} }
func (m *S2CCaptainRebirthMiaoCdProto) String() string { return proto.CompactTextString(m) }
func (*S2CCaptainRebirthMiaoCdProto) ProtoMessage()    {}
func (*S2CCaptainRebirthMiaoCdProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{67}
}

func (m *S2CCaptainRebirthMiaoCdProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type S2CCollectCaptainTrainingExpProto struct {
	Time int32 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
}

func (m *S2CCollectCaptainTrainingExpProto) Reset()         { *m = S2CCollectCaptainTrainingExpProto{} }
func (m *S2CCollectCaptainTrainingExpProto) String() string { return proto.CompactTextString(m) }
func (*S2CCollectCaptainTrainingExpProto) ProtoMessage()    {}
func (*S2CCollectCaptainTrainingExpProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{68}
}

func (m *S2CCollectCaptainTrainingExpProto) GetTime() int32 {
	if m != nil {
		return m.Time
	}
	return 0
}

type S2CCaptainTrainExpProto struct {
	Time int32 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
}

func (m *S2CCaptainTrainExpProto) Reset()                    { *m = S2CCaptainTrainExpProto{} }
func (m *S2CCaptainTrainExpProto) String() string            { return proto.CompactTextString(m) }
func (*S2CCaptainTrainExpProto) ProtoMessage()               {}
func (*S2CCaptainTrainExpProto) Descriptor() ([]byte, []int) { return fileDescriptorMilitary, []int{69} }

func (m *S2CCaptainTrainExpProto) GetTime() int32 {
	if m != nil {
		return m.Time
	}
	return 0
}

type S2CUpdateTrainingProto struct {
	Gst        int32 `protobuf:"varint,4,opt,name=gst,proto3" json:"gst,omitempty"`
	Cst        int32 `protobuf:"varint,5,opt,name=cst,proto3" json:"cst,omitempty"`
	ExpPerHour int32 `protobuf:"varint,6,opt,name=exp_per_hour,json=expPerHour,proto3" json:"exp_per_hour,omitempty"`
	Coef       int32 `protobuf:"varint,7,opt,name=coef,proto3" json:"coef,omitempty"`
}

func (m *S2CUpdateTrainingProto) Reset()                    { *m = S2CUpdateTrainingProto{} }
func (m *S2CUpdateTrainingProto) String() string            { return proto.CompactTextString(m) }
func (*S2CUpdateTrainingProto) ProtoMessage()               {}
func (*S2CUpdateTrainingProto) Descriptor() ([]byte, []int) { return fileDescriptorMilitary, []int{70} }

func (m *S2CUpdateTrainingProto) GetGst() int32 {
	if m != nil {
		return m.Gst
	}
	return 0
}

func (m *S2CUpdateTrainingProto) GetCst() int32 {
	if m != nil {
		return m.Cst
	}
	return 0
}

func (m *S2CUpdateTrainingProto) GetExpPerHour() int32 {
	if m != nil {
		return m.ExpPerHour
	}
	return 0
}

func (m *S2CUpdateTrainingProto) GetCoef() int32 {
	if m != nil {
		return m.Coef
	}
	return 0
}

type S2CCaptainCanCollectExpProto struct {
	Exp         int32   `protobuf:"varint,1,opt,name=exp,proto3" json:"exp,omitempty"`
	BuffCoef    []int32 `protobuf:"varint,2,rep,name=buff_coef,json=buffCoef" json:"buff_coef,omitempty"`
	MaxDuration int32   `protobuf:"varint,3,opt,name=max_duration,json=maxDuration,proto3" json:"max_duration,omitempty"`
}

func (m *S2CCaptainCanCollectExpProto) Reset()         { *m = S2CCaptainCanCollectExpProto{} }
func (m *S2CCaptainCanCollectExpProto) String() string { return proto.CompactTextString(m) }
func (*S2CCaptainCanCollectExpProto) ProtoMessage()    {}
func (*S2CCaptainCanCollectExpProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{71}
}

func (m *S2CCaptainCanCollectExpProto) GetExp() int32 {
	if m != nil {
		return m.Exp
	}
	return 0
}

func (m *S2CCaptainCanCollectExpProto) GetBuffCoef() []int32 {
	if m != nil {
		return m.BuffCoef
	}
	return nil
}

func (m *S2CCaptainCanCollectExpProto) GetMaxDuration() int32 {
	if m != nil {
		return m.MaxDuration
	}
	return 0
}

type C2SUseTrainingExpGoodsProto struct {
	CaptainId int32 `protobuf:"varint,1,opt,name=captain_id,json=captainId,proto3" json:"captain_id,omitempty"`
	GoodsId   int32 `protobuf:"varint,2,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`
	Count     int32 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *C2SUseTrainingExpGoodsProto) Reset()         { *m = C2SUseTrainingExpGoodsProto{} }
func (m *C2SUseTrainingExpGoodsProto) String() string { return proto.CompactTextString(m) }
func (*C2SUseTrainingExpGoodsProto) ProtoMessage()    {}
func (*C2SUseTrainingExpGoodsProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{72}
}

func (m *C2SUseTrainingExpGoodsProto) GetCaptainId() int32 {
	if m != nil {
		return m.CaptainId
	}
	return 0
}

func (m *C2SUseTrainingExpGoodsProto) GetGoodsId() int32 {
	if m != nil {
		return m.GoodsId
	}
	return 0
}

func (m *C2SUseTrainingExpGoodsProto) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type S2CUseTrainingExpGoodsProto struct {
	CaptainId int32 `protobuf:"varint,1,opt,name=captain_id,json=captainId,proto3" json:"captain_id,omitempty"`
	GoodsId   int32 `protobuf:"varint,2,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`
	Count     int32 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	Upgrade   bool  `protobuf:"varint,3,opt,name=upgrade,proto3" json:"upgrade,omitempty"`
}

func (m *S2CUseTrainingExpGoodsProto) Reset()         { *m = S2CUseTrainingExpGoodsProto{} }
func (m *S2CUseTrainingExpGoodsProto) String() string { return proto.CompactTextString(m) }
func (*S2CUseTrainingExpGoodsProto) ProtoMessage()    {}
func (*S2CUseTrainingExpGoodsProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{73}
}

func (m *S2CUseTrainingExpGoodsProto) GetCaptainId() int32 {
	if m != nil {
		return m.CaptainId
	}
	return 0
}

func (m *S2CUseTrainingExpGoodsProto) GetGoodsId() int32 {
	if m != nil {
		return m.GoodsId
	}
	return 0
}

func (m *S2CUseTrainingExpGoodsProto) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *S2CUseTrainingExpGoodsProto) GetUpgrade() bool {
	if m != nil {
		return m.Upgrade
	}
	return false
}

type C2SUseLevelExpGoodsProto struct {
	CaptainId int32 `protobuf:"varint,1,opt,name=captain_id,json=captainId,proto3" json:"captain_id,omitempty"`
	GoodsId   int32 `protobuf:"varint,2,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`
	Count     int32 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *C2SUseLevelExpGoodsProto) Reset()         { *m = C2SUseLevelExpGoodsProto{} }
func (m *C2SUseLevelExpGoodsProto) String() string { return proto.CompactTextString(m) }
func (*C2SUseLevelExpGoodsProto) ProtoMessage()    {}
func (*C2SUseLevelExpGoodsProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{74}
}

func (m *C2SUseLevelExpGoodsProto) GetCaptainId() int32 {
	if m != nil {
		return m.CaptainId
	}
	return 0
}

func (m *C2SUseLevelExpGoodsProto) GetGoodsId() int32 {
	if m != nil {
		return m.GoodsId
	}
	return 0
}

func (m *C2SUseLevelExpGoodsProto) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type S2CUseLevelExpGoodsProto struct {
	CaptainId int32 `protobuf:"varint,1,opt,name=captain_id,json=captainId,proto3" json:"captain_id,omitempty"`
	GoodsId   int32 `protobuf:"varint,2,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`
	Count     int32 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Upgrade   bool  `protobuf:"varint,4,opt,name=upgrade,proto3" json:"upgrade,omitempty"`
}

func (m *S2CUseLevelExpGoodsProto) Reset()         { *m = S2CUseLevelExpGoodsProto{} }
func (m *S2CUseLevelExpGoodsProto) String() string { return proto.CompactTextString(m) }
func (*S2CUseLevelExpGoodsProto) ProtoMessage()    {}
func (*S2CUseLevelExpGoodsProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{75}
}

func (m *S2CUseLevelExpGoodsProto) GetCaptainId() int32 {
	if m != nil {
		return m.CaptainId
	}
	return 0
}

func (m *S2CUseLevelExpGoodsProto) GetGoodsId() int32 {
	if m != nil {
		return m.GoodsId
	}
	return 0
}

func (m *S2CUseLevelExpGoodsProto) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *S2CUseLevelExpGoodsProto) GetUpgrade() bool {
	if m != nil {
		return m.Upgrade
	}
	return false
}

type C2SUseLevelExpGoods2Proto struct {
	Captain int32 `protobuf:"varint,1,opt,name=captain,proto3" json:"captain,omitempty"`
	GoodsId int32 `protobuf:"varint,4,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`
}

func (m *C2SUseLevelExpGoods2Proto) Reset()         { *m = C2SUseLevelExpGoods2Proto{} }
func (m *C2SUseLevelExpGoods2Proto) String() string { return proto.CompactTextString(m) }
func (*C2SUseLevelExpGoods2Proto) ProtoMessage()    {}
func (*C2SUseLevelExpGoods2Proto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{76}
}

func (m *C2SUseLevelExpGoods2Proto) GetCaptain() int32 {
	if m != nil {
		return m.Captain
	}
	return 0
}

func (m *C2SUseLevelExpGoods2Proto) GetGoodsId() int32 {
	if m != nil {
		return m.GoodsId
	}
	return 0
}

type S2CUseLevelExpGoods2Proto struct {
	Captain int32 `protobuf:"varint,1,opt,name=captain,proto3" json:"captain,omitempty"`
	Level   int32 `protobuf:"varint,5,opt,name=level,proto3" json:"level,omitempty"`
	Exp     int32 `protobuf:"varint,6,opt,name=exp,proto3" json:"exp,omitempty"`
	Upgrade bool  `protobuf:"varint,4,opt,name=upgrade,proto3" json:"upgrade,omitempty"`
}

func (m *S2CUseLevelExpGoods2Proto) Reset()         { *m = S2CUseLevelExpGoods2Proto{} }
func (m *S2CUseLevelExpGoods2Proto) String() string { return proto.CompactTextString(m) }
func (*S2CUseLevelExpGoods2Proto) ProtoMessage()    {}
func (*S2CUseLevelExpGoods2Proto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{77}
}

func (m *S2CUseLevelExpGoods2Proto) GetCaptain() int32 {
	if m != nil {
		return m.Captain
	}
	return 0
}

func (m *S2CUseLevelExpGoods2Proto) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *S2CUseLevelExpGoods2Proto) GetExp() int32 {
	if m != nil {
		return m.Exp
	}
	return 0
}

func (m *S2CUseLevelExpGoods2Proto) GetUpgrade() bool {
	if m != nil {
		return m.Upgrade
	}
	return false
}

type C2SAutoUseGoodsUntilCaptainLevelupProto struct {
	Captain int32 `protobuf:"varint,1,opt,name=captain,proto3" json:"captain,omitempty"`
}

func (m *C2SAutoUseGoodsUntilCaptainLevelupProto) Reset() {
	*m = C2SAutoUseGoodsUntilCaptainLevelupProto{}
}
func (m *C2SAutoUseGoodsUntilCaptainLevelupProto) String() string { return proto.CompactTextString(m) }
func (*C2SAutoUseGoodsUntilCaptainLevelupProto) ProtoMessage()    {}
func (*C2SAutoUseGoodsUntilCaptainLevelupProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{78}
}

func (m *C2SAutoUseGoodsUntilCaptainLevelupProto) GetCaptain() int32 {
	if m != nil {
		return m.Captain
	}
	return 0
}

type S2CAutoUseGoodsUntilCaptainLevelupProto struct {
	Captain int32 `protobuf:"varint,1,opt,name=captain,proto3" json:"captain,omitempty"`
	Level   int32 `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	Exp     int32 `protobuf:"varint,3,opt,name=exp,proto3" json:"exp,omitempty"`
	Upgrade bool  `protobuf:"varint,4,opt,name=upgrade,proto3" json:"upgrade,omitempty"`
}

func (m *S2CAutoUseGoodsUntilCaptainLevelupProto) Reset() {
	*m = S2CAutoUseGoodsUntilCaptainLevelupProto{}
}
func (m *S2CAutoUseGoodsUntilCaptainLevelupProto) String() string { return proto.CompactTextString(m) }
func (*S2CAutoUseGoodsUntilCaptainLevelupProto) ProtoMessage()    {}
func (*S2CAutoUseGoodsUntilCaptainLevelupProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{79}
}

func (m *S2CAutoUseGoodsUntilCaptainLevelupProto) GetCaptain() int32 {
	if m != nil {
		return m.Captain
	}
	return 0
}

func (m *S2CAutoUseGoodsUntilCaptainLevelupProto) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *S2CAutoUseGoodsUntilCaptainLevelupProto) GetExp() int32 {
	if m != nil {
		return m.Exp
	}
	return 0
}

func (m *S2CAutoUseGoodsUntilCaptainLevelupProto) GetUpgrade() bool {
	if m != nil {
		return m.Upgrade
	}
	return false
}

type S2CGetMaxRecruitSoldierProto struct {
	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *S2CGetMaxRecruitSoldierProto) Reset()         { *m = S2CGetMaxRecruitSoldierProto{} }
func (m *S2CGetMaxRecruitSoldierProto) String() string { return proto.CompactTextString(m) }
func (*S2CGetMaxRecruitSoldierProto) ProtoMessage()    {}
func (*S2CGetMaxRecruitSoldierProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{80}
}

func (m *S2CGetMaxRecruitSoldierProto) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type S2CGetMaxHealSoldierProto struct {
	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *S2CGetMaxHealSoldierProto) Reset()         { *m = S2CGetMaxHealSoldierProto{} }
func (m *S2CGetMaxHealSoldierProto) String() string { return proto.CompactTextString(m) }
func (*S2CGetMaxHealSoldierProto) ProtoMessage()    {}
func (*S2CGetMaxHealSoldierProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{81}
}

func (m *S2CGetMaxHealSoldierProto) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type S2CJiuGuanConsultProto struct {
	Prize             []byte `protobuf:"bytes,1,opt,name=prize,proto3" json:"prize,omitempty"`
	CritMulti         int32  `protobuf:"varint,2,opt,name=crit_multi,json=critMulti,proto3" json:"crit_multi,omitempty"`
	CritMultiImgIndex int32  `protobuf:"varint,3,opt,name=crit_multi_img_index,json=critMultiImgIndex,proto3" json:"crit_multi_img_index,omitempty"`
	OriginalIndex     int32  `protobuf:"varint,5,opt,name=original_index,json=originalIndex,proto3" json:"original_index,omitempty"`
	TutorIndex        int32  `protobuf:"varint,4,opt,name=tutor_index,json=tutorIndex,proto3" json:"tutor_index,omitempty"`
}

func (m *S2CJiuGuanConsultProto) Reset()                    { *m = S2CJiuGuanConsultProto{} }
func (m *S2CJiuGuanConsultProto) String() string            { return proto.CompactTextString(m) }
func (*S2CJiuGuanConsultProto) ProtoMessage()               {}
func (*S2CJiuGuanConsultProto) Descriptor() ([]byte, []int) { return fileDescriptorMilitary, []int{82} }

func (m *S2CJiuGuanConsultProto) GetPrize() []byte {
	if m != nil {
		return m.Prize
	}
	return nil
}

func (m *S2CJiuGuanConsultProto) GetCritMulti() int32 {
	if m != nil {
		return m.CritMulti
	}
	return 0
}

func (m *S2CJiuGuanConsultProto) GetCritMultiImgIndex() int32 {
	if m != nil {
		return m.CritMultiImgIndex
	}
	return 0
}

func (m *S2CJiuGuanConsultProto) GetOriginalIndex() int32 {
	if m != nil {
		return m.OriginalIndex
	}
	return 0
}

func (m *S2CJiuGuanConsultProto) GetTutorIndex() int32 {
	if m != nil {
		return m.TutorIndex
	}
	return 0
}

type S2CJiuGuanConsultBroadcastProto struct {
	Level     int32  `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	CritMulti int32  `protobuf:"varint,2,opt,name=crit_multi,json=critMulti,proto3" json:"crit_multi,omitempty"`
	HeroName  string `protobuf:"bytes,3,opt,name=hero_name,json=heroName,proto3" json:"hero_name,omitempty"`
}

func (m *S2CJiuGuanConsultBroadcastProto) Reset()         { *m = S2CJiuGuanConsultBroadcastProto{} }
func (m *S2CJiuGuanConsultBroadcastProto) String() string { return proto.CompactTextString(m) }
func (*S2CJiuGuanConsultBroadcastProto) ProtoMessage()    {}
func (*S2CJiuGuanConsultBroadcastProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{83}
}

func (m *S2CJiuGuanConsultBroadcastProto) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *S2CJiuGuanConsultBroadcastProto) GetCritMulti() int32 {
	if m != nil {
		return m.CritMulti
	}
	return 0
}

func (m *S2CJiuGuanConsultBroadcastProto) GetHeroName() string {
	if m != nil {
		return m.HeroName
	}
	return ""
}

type S2CJiuGuanTimesChangedProto struct {
	Times    int32 `protobuf:"varint,2,opt,name=times,proto3" json:"times,omitempty"`
	NextTime int32 `protobuf:"varint,3,opt,name=next_time,json=nextTime,proto3" json:"next_time,omitempty"`
}

func (m *S2CJiuGuanTimesChangedProto) Reset()         { *m = S2CJiuGuanTimesChangedProto{} }
func (m *S2CJiuGuanTimesChangedProto) String() string { return proto.CompactTextString(m) }
func (*S2CJiuGuanTimesChangedProto) ProtoMessage()    {}
func (*S2CJiuGuanTimesChangedProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{84}
}

func (m *S2CJiuGuanTimesChangedProto) GetTimes() int32 {
	if m != nil {
		return m.Times
	}
	return 0
}

func (m *S2CJiuGuanTimesChangedProto) GetNextTime() int32 {
	if m != nil {
		return m.NextTime
	}
	return 0
}

type C2SJiuGuanRefreshProto struct {
	AutoMax bool `protobuf:"varint,1,opt,name=auto_max,json=autoMax,proto3" json:"auto_max,omitempty"`
}

func (m *C2SJiuGuanRefreshProto) Reset()                    { *m = C2SJiuGuanRefreshProto{} }
func (m *C2SJiuGuanRefreshProto) String() string            { return proto.CompactTextString(m) }
func (*C2SJiuGuanRefreshProto) ProtoMessage()               {}
func (*C2SJiuGuanRefreshProto) Descriptor() ([]byte, []int) { return fileDescriptorMilitary, []int{85} }

func (m *C2SJiuGuanRefreshProto) GetAutoMax() bool {
	if m != nil {
		return m.AutoMax
	}
	return false
}

type S2CJiuGuanRefreshProto struct {
	TutorIndex   int32 `protobuf:"varint,1,opt,name=tutor_index,json=tutorIndex,proto3" json:"tutor_index,omitempty"`
	RefreshTimes int32 `protobuf:"varint,2,opt,name=refresh_times,json=refreshTimes,proto3" json:"refresh_times,omitempty"`
	AutoMax      bool  `protobuf:"varint,3,opt,name=auto_max,json=autoMax,proto3" json:"auto_max,omitempty"`
}

func (m *S2CJiuGuanRefreshProto) Reset()                    { *m = S2CJiuGuanRefreshProto{} }
func (m *S2CJiuGuanRefreshProto) String() string            { return proto.CompactTextString(m) }
func (*S2CJiuGuanRefreshProto) ProtoMessage()               {}
func (*S2CJiuGuanRefreshProto) Descriptor() ([]byte, []int) { return fileDescriptorMilitary, []int{86} }

func (m *S2CJiuGuanRefreshProto) GetTutorIndex() int32 {
	if m != nil {
		return m.TutorIndex
	}
	return 0
}

func (m *S2CJiuGuanRefreshProto) GetRefreshTimes() int32 {
	if m != nil {
		return m.RefreshTimes
	}
	return 0
}

func (m *S2CJiuGuanRefreshProto) GetAutoMax() bool {
	if m != nil {
		return m.AutoMax
	}
	return false
}

type C2SUnlockCaptainRestraintSpellProto struct {
	Captain int32 `protobuf:"varint,1,opt,name=captain,proto3" json:"captain,omitempty"`
}

func (m *C2SUnlockCaptainRestraintSpellProto) Reset()         { *m = C2SUnlockCaptainRestraintSpellProto{} }
func (m *C2SUnlockCaptainRestraintSpellProto) String() string { return proto.CompactTextString(m) }
func (*C2SUnlockCaptainRestraintSpellProto) ProtoMessage()    {}
func (*C2SUnlockCaptainRestraintSpellProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{87}
}

func (m *C2SUnlockCaptainRestraintSpellProto) GetCaptain() int32 {
	if m != nil {
		return m.Captain
	}
	return 0
}

type S2CUnlockCaptainRestraintSpellProto struct {
	Captain int32 `protobuf:"varint,1,opt,name=captain,proto3" json:"captain,omitempty"`
}

func (m *S2CUnlockCaptainRestraintSpellProto) Reset()         { *m = S2CUnlockCaptainRestraintSpellProto{} }
func (m *S2CUnlockCaptainRestraintSpellProto) String() string { return proto.CompactTextString(m) }
func (*S2CUnlockCaptainRestraintSpellProto) ProtoMessage()    {}
func (*S2CUnlockCaptainRestraintSpellProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{88}
}

func (m *S2CUnlockCaptainRestraintSpellProto) GetCaptain() int32 {
	if m != nil {
		return m.Captain
	}
	return 0
}

type S2CNewTroopsProto struct {
	Troop []byte `protobuf:"bytes,1,opt,name=troop,proto3" json:"troop,omitempty"`
}

func (m *S2CNewTroopsProto) Reset()                    { *m = S2CNewTroopsProto{} }
func (m *S2CNewTroopsProto) String() string            { return proto.CompactTextString(m) }
func (*S2CNewTroopsProto) ProtoMessage()               {}
func (*S2CNewTroopsProto) Descriptor() ([]byte, []int) { return fileDescriptorMilitary, []int{89} }

func (m *S2CNewTroopsProto) GetTroop() []byte {
	if m != nil {
		return m.Troop
	}
	return nil
}

type C2SGetCaptainStatDetailsProto struct {
	Captain int32 `protobuf:"varint,1,opt,name=captain,proto3" json:"captain,omitempty"`
}

func (m *C2SGetCaptainStatDetailsProto) Reset()         { *m = C2SGetCaptainStatDetailsProto{} }
func (m *C2SGetCaptainStatDetailsProto) String() string { return proto.CompactTextString(m) }
func (*C2SGetCaptainStatDetailsProto) ProtoMessage()    {}
func (*C2SGetCaptainStatDetailsProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{90}
}

func (m *C2SGetCaptainStatDetailsProto) GetCaptain() int32 {
	if m != nil {
		return m.Captain
	}
	return 0
}

type S2CGetCaptainStatDetailsProto struct {
	Captain int32  `protobuf:"varint,1,opt,name=captain,proto3" json:"captain,omitempty"`
	Stats   []byte `protobuf:"bytes,2,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (m *S2CGetCaptainStatDetailsProto) Reset()         { *m = S2CGetCaptainStatDetailsProto{} }
func (m *S2CGetCaptainStatDetailsProto) String() string { return proto.CompactTextString(m) }
func (*S2CGetCaptainStatDetailsProto) ProtoMessage()    {}
func (*S2CGetCaptainStatDetailsProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{91}
}

func (m *S2CGetCaptainStatDetailsProto) GetCaptain() int32 {
	if m != nil {
		return m.Captain
	}
	return 0
}

func (m *S2CGetCaptainStatDetailsProto) GetStats() []byte {
	if m != nil {
		return m.Stats
	}
	return nil
}

type C2SCaptainStatDetailsProto struct {
	Captain int32 `protobuf:"varint,1,opt,name=captain,proto3" json:"captain,omitempty"`
}

func (m *C2SCaptainStatDetailsProto) Reset()         { *m = C2SCaptainStatDetailsProto{} }
func (m *C2SCaptainStatDetailsProto) String() string { return proto.CompactTextString(m) }
func (*C2SCaptainStatDetailsProto) ProtoMessage()    {}
func (*C2SCaptainStatDetailsProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{92}
}

func (m *C2SCaptainStatDetailsProto) GetCaptain() int32 {
	if m != nil {
		return m.Captain
	}
	return 0
}

type S2CCaptainStatDetailsProto struct {
	Captain int32  `protobuf:"varint,1,opt,name=captain,proto3" json:"captain,omitempty"`
	Stats   []byte `protobuf:"bytes,2,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (m *S2CCaptainStatDetailsProto) Reset()         { *m = S2CCaptainStatDetailsProto{} }
func (m *S2CCaptainStatDetailsProto) String() string { return proto.CompactTextString(m) }
func (*S2CCaptainStatDetailsProto) ProtoMessage()    {}
func (*S2CCaptainStatDetailsProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{93}
}

func (m *S2CCaptainStatDetailsProto) GetCaptain() int32 {
	if m != nil {
		return m.Captain
	}
	return 0
}

func (m *S2CCaptainStatDetailsProto) GetStats() []byte {
	if m != nil {
		return m.Stats
	}
	return nil
}

type S2CUpdateTroopFightAmountProto struct {
	TroopIndex []int32 `protobuf:"varint,1,rep,name=troop_index,json=troopIndex" json:"troop_index,omitempty"`
	StartValue []int32 `protobuf:"varint,6,rep,name=start_value,json=startValue" json:"start_value,omitempty"`
	EndValue   []int32 `protobuf:"varint,7,rep,name=end_value,json=endValue" json:"end_value,omitempty"`
}

func (m *S2CUpdateTroopFightAmountProto) Reset()         { *m = S2CUpdateTroopFightAmountProto{} }
func (m *S2CUpdateTroopFightAmountProto) String() string { return proto.CompactTextString(m) }
func (*S2CUpdateTroopFightAmountProto) ProtoMessage()    {}
func (*S2CUpdateTroopFightAmountProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{94}
}

func (m *S2CUpdateTroopFightAmountProto) GetTroopIndex() []int32 {
	if m != nil {
		return m.TroopIndex
	}
	return nil
}

func (m *S2CUpdateTroopFightAmountProto) GetStartValue() []int32 {
	if m != nil {
		return m.StartValue
	}
	return nil
}

func (m *S2CUpdateTroopFightAmountProto) GetEndValue() []int32 {
	if m != nil {
		return m.EndValue
	}
	return nil
}

type C2SUpdateCaptainOfficialProto struct {
	Captain  int32 `protobuf:"varint,3,opt,name=captain,proto3" json:"captain,omitempty"`
	Official int32 `protobuf:"varint,4,opt,name=official,proto3" json:"official,omitempty"`
}

func (m *C2SUpdateCaptainOfficialProto) Reset()         { *m = C2SUpdateCaptainOfficialProto{} }
func (m *C2SUpdateCaptainOfficialProto) String() string { return proto.CompactTextString(m) }
func (*C2SUpdateCaptainOfficialProto) ProtoMessage()    {}
func (*C2SUpdateCaptainOfficialProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{95}
}

func (m *C2SUpdateCaptainOfficialProto) GetCaptain() int32 {
	if m != nil {
		return m.Captain
	}
	return 0
}

func (m *C2SUpdateCaptainOfficialProto) GetOfficial() int32 {
	if m != nil {
		return m.Official
	}
	return 0
}

type S2CUpdateCaptainOfficialProto struct {
	Captain  int32 `protobuf:"varint,3,opt,name=captain,proto3" json:"captain,omitempty"`
	Official int32 `protobuf:"varint,4,opt,name=official,proto3" json:"official,omitempty"`
}

func (m *S2CUpdateCaptainOfficialProto) Reset()         { *m = S2CUpdateCaptainOfficialProto{} }
func (m *S2CUpdateCaptainOfficialProto) String() string { return proto.CompactTextString(m) }
func (*S2CUpdateCaptainOfficialProto) ProtoMessage()    {}
func (*S2CUpdateCaptainOfficialProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{96}
}

func (m *S2CUpdateCaptainOfficialProto) GetCaptain() int32 {
	if m != nil {
		return m.Captain
	}
	return 0
}

func (m *S2CUpdateCaptainOfficialProto) GetOfficial() int32 {
	if m != nil {
		return m.Official
	}
	return 0
}

type C2SSetCaptainOfficialProto struct {
	Captain     []int32 `protobuf:"varint,3,rep,name=captain" json:"captain,omitempty"`
	Official    []int32 `protobuf:"varint,4,rep,name=official" json:"official,omitempty"`
	OfficialIdx []int32 `protobuf:"varint,5,rep,name=official_idx,json=officialIdx" json:"official_idx,omitempty"`
}

func (m *C2SSetCaptainOfficialProto) Reset()         { *m = C2SSetCaptainOfficialProto{} }
func (m *C2SSetCaptainOfficialProto) String() string { return proto.CompactTextString(m) }
func (*C2SSetCaptainOfficialProto) ProtoMessage()    {}
func (*C2SSetCaptainOfficialProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{97}
}

func (m *C2SSetCaptainOfficialProto) GetCaptain() []int32 {
	if m != nil {
		return m.Captain
	}
	return nil
}

func (m *C2SSetCaptainOfficialProto) GetOfficial() []int32 {
	if m != nil {
		return m.Official
	}
	return nil
}

func (m *C2SSetCaptainOfficialProto) GetOfficialIdx() []int32 {
	if m != nil {
		return m.OfficialIdx
	}
	return nil
}

type S2CSetCaptainOfficialProto struct {
	Captain     []int32 `protobuf:"varint,3,rep,name=captain" json:"captain,omitempty"`
	Official    []int32 `protobuf:"varint,4,rep,name=official" json:"official,omitempty"`
	OfficialIdx []int32 `protobuf:"varint,5,rep,name=official_idx,json=officialIdx" json:"official_idx,omitempty"`
}

func (m *S2CSetCaptainOfficialProto) Reset()         { *m = S2CSetCaptainOfficialProto{} }
func (m *S2CSetCaptainOfficialProto) String() string { return proto.CompactTextString(m) }
func (*S2CSetCaptainOfficialProto) ProtoMessage()    {}
func (*S2CSetCaptainOfficialProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{98}
}

func (m *S2CSetCaptainOfficialProto) GetCaptain() []int32 {
	if m != nil {
		return m.Captain
	}
	return nil
}

func (m *S2CSetCaptainOfficialProto) GetOfficial() []int32 {
	if m != nil {
		return m.Official
	}
	return nil
}

func (m *S2CSetCaptainOfficialProto) GetOfficialIdx() []int32 {
	if m != nil {
		return m.OfficialIdx
	}
	return nil
}

type C2SLeaveCaptainOfficialProto struct {
	Captain int32 `protobuf:"varint,1,opt,name=captain,proto3" json:"captain,omitempty"`
}

func (m *C2SLeaveCaptainOfficialProto) Reset()         { *m = C2SLeaveCaptainOfficialProto{} }
func (m *C2SLeaveCaptainOfficialProto) String() string { return proto.CompactTextString(m) }
func (*C2SLeaveCaptainOfficialProto) ProtoMessage()    {}
func (*C2SLeaveCaptainOfficialProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{99}
}

func (m *C2SLeaveCaptainOfficialProto) GetCaptain() int32 {
	if m != nil {
		return m.Captain
	}
	return 0
}

type S2CLeaveCaptainOfficialProto struct {
	Captain int32 `protobuf:"varint,1,opt,name=captain,proto3" json:"captain,omitempty"`
}

func (m *S2CLeaveCaptainOfficialProto) Reset()         { *m = S2CLeaveCaptainOfficialProto{} }
func (m *S2CLeaveCaptainOfficialProto) String() string { return proto.CompactTextString(m) }
func (*S2CLeaveCaptainOfficialProto) ProtoMessage()    {}
func (*S2CLeaveCaptainOfficialProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{100}
}

func (m *S2CLeaveCaptainOfficialProto) GetCaptain() int32 {
	if m != nil {
		return m.Captain
	}
	return 0
}

type S2CAddGongxunProto struct {
	Captain    int32 `protobuf:"varint,1,opt,name=captain,proto3" json:"captain,omitempty"`
	NewGongxun int32 `protobuf:"varint,2,opt,name=new_gongxun,json=newGongxun,proto3" json:"new_gongxun,omitempty"`
}

func (m *S2CAddGongxunProto) Reset()                    { *m = S2CAddGongxunProto{} }
func (m *S2CAddGongxunProto) String() string            { return proto.CompactTextString(m) }
func (*S2CAddGongxunProto) ProtoMessage()               {}
func (*S2CAddGongxunProto) Descriptor() ([]byte, []int) { return fileDescriptorMilitary, []int{101} }

func (m *S2CAddGongxunProto) GetCaptain() int32 {
	if m != nil {
		return m.Captain
	}
	return 0
}

func (m *S2CAddGongxunProto) GetNewGongxun() int32 {
	if m != nil {
		return m.NewGongxun
	}
	return 0
}

type C2SUseGongXunGoodsProto struct {
	Captain int32   `protobuf:"varint,1,opt,name=captain,proto3" json:"captain,omitempty"`
	GoodsId []int32 `protobuf:"varint,2,rep,name=goods_id,json=goodsId" json:"goods_id,omitempty"`
	Count   []int32 `protobuf:"varint,3,rep,name=count" json:"count,omitempty"`
}

func (m *C2SUseGongXunGoodsProto) Reset()         { *m = C2SUseGongXunGoodsProto{} }
func (m *C2SUseGongXunGoodsProto) String() string { return proto.CompactTextString(m) }
func (*C2SUseGongXunGoodsProto) ProtoMessage()    {}
func (*C2SUseGongXunGoodsProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{102}
}

func (m *C2SUseGongXunGoodsProto) GetCaptain() int32 {
	if m != nil {
		return m.Captain
	}
	return 0
}

func (m *C2SUseGongXunGoodsProto) GetGoodsId() []int32 {
	if m != nil {
		return m.GoodsId
	}
	return nil
}

func (m *C2SUseGongXunGoodsProto) GetCount() []int32 {
	if m != nil {
		return m.Count
	}
	return nil
}

type S2CUseGongXunGoodsProto struct {
	Captain    int32 `protobuf:"varint,1,opt,name=captain,proto3" json:"captain,omitempty"`
	NewGongxun int32 `protobuf:"varint,2,opt,name=new_gongxun,json=newGongxun,proto3" json:"new_gongxun,omitempty"`
}

func (m *S2CUseGongXunGoodsProto) Reset()         { *m = S2CUseGongXunGoodsProto{} }
func (m *S2CUseGongXunGoodsProto) String() string { return proto.CompactTextString(m) }
func (*S2CUseGongXunGoodsProto) ProtoMessage()    {}
func (*S2CUseGongXunGoodsProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{103}
}

func (m *S2CUseGongXunGoodsProto) GetCaptain() int32 {
	if m != nil {
		return m.Captain
	}
	return 0
}

func (m *S2CUseGongXunGoodsProto) GetNewGongxun() int32 {
	if m != nil {
		return m.NewGongxun
	}
	return 0
}

type C2SUseGongxunGoodsProto struct {
	Captain int32   `protobuf:"varint,1,opt,name=captain,proto3" json:"captain,omitempty"`
	GoodsId []int32 `protobuf:"varint,2,rep,name=goods_id,json=goodsId" json:"goods_id,omitempty"`
	Count   []int32 `protobuf:"varint,3,rep,name=count" json:"count,omitempty"`
}

func (m *C2SUseGongxunGoodsProto) Reset()         { *m = C2SUseGongxunGoodsProto{} }
func (m *C2SUseGongxunGoodsProto) String() string { return proto.CompactTextString(m) }
func (*C2SUseGongxunGoodsProto) ProtoMessage()    {}
func (*C2SUseGongxunGoodsProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{104}
}

func (m *C2SUseGongxunGoodsProto) GetCaptain() int32 {
	if m != nil {
		return m.Captain
	}
	return 0
}

func (m *C2SUseGongxunGoodsProto) GetGoodsId() []int32 {
	if m != nil {
		return m.GoodsId
	}
	return nil
}

func (m *C2SUseGongxunGoodsProto) GetCount() []int32 {
	if m != nil {
		return m.Count
	}
	return nil
}

type S2CUseGongxunGoodsProto struct {
	Captain    int32 `protobuf:"varint,1,opt,name=captain,proto3" json:"captain,omitempty"`
	NewGongxun int32 `protobuf:"varint,2,opt,name=new_gongxun,json=newGongxun,proto3" json:"new_gongxun,omitempty"`
}

func (m *S2CUseGongxunGoodsProto) Reset()         { *m = S2CUseGongxunGoodsProto{} }
func (m *S2CUseGongxunGoodsProto) String() string { return proto.CompactTextString(m) }
func (*S2CUseGongxunGoodsProto) ProtoMessage()    {}
func (*S2CUseGongxunGoodsProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{105}
}

func (m *S2CUseGongxunGoodsProto) GetCaptain() int32 {
	if m != nil {
		return m.Captain
	}
	return 0
}

func (m *S2CUseGongxunGoodsProto) GetNewGongxun() int32 {
	if m != nil {
		return m.NewGongxun
	}
	return 0
}

type C2SCloseFightGuideProto struct {
	Close bool `protobuf:"varint,1,opt,name=close,proto3" json:"close,omitempty"`
}

func (m *C2SCloseFightGuideProto) Reset()         { *m = C2SCloseFightGuideProto{} }
func (m *C2SCloseFightGuideProto) String() string { return proto.CompactTextString(m) }
func (*C2SCloseFightGuideProto) ProtoMessage()    {}
func (*C2SCloseFightGuideProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{106}
}

func (m *C2SCloseFightGuideProto) GetClose() bool {
	if m != nil {
		return m.Close
	}
	return false
}

type S2CCloseFightGuideProto struct {
	Close bool `protobuf:"varint,1,opt,name=close,proto3" json:"close,omitempty"`
}

func (m *S2CCloseFightGuideProto) Reset()         { *m = S2CCloseFightGuideProto{} }
func (m *S2CCloseFightGuideProto) String() string { return proto.CompactTextString(m) }
func (*S2CCloseFightGuideProto) ProtoMessage()    {}
func (*S2CCloseFightGuideProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{107}
}

func (m *S2CCloseFightGuideProto) GetClose() bool {
	if m != nil {
		return m.Close
	}
	return false
}

type C2SViewOtherHeroCaptainProto struct {
	HeroId    []byte `protobuf:"bytes,1,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
	CaptainId int32  `protobuf:"varint,2,opt,name=captain_id,json=captainId,proto3" json:"captain_id,omitempty"`
}

func (m *C2SViewOtherHeroCaptainProto) Reset()         { *m = C2SViewOtherHeroCaptainProto{} }
func (m *C2SViewOtherHeroCaptainProto) String() string { return proto.CompactTextString(m) }
func (*C2SViewOtherHeroCaptainProto) ProtoMessage()    {}
func (*C2SViewOtherHeroCaptainProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{108}
}

func (m *C2SViewOtherHeroCaptainProto) GetHeroId() []byte {
	if m != nil {
		return m.HeroId
	}
	return nil
}

func (m *C2SViewOtherHeroCaptainProto) GetCaptainId() int32 {
	if m != nil {
		return m.CaptainId
	}
	return 0
}

type S2CViewOtherHeroCaptainProto struct {
	HeroId   []byte `protobuf:"bytes,2,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
	HeroName string `protobuf:"bytes,3,opt,name=hero_name,json=heroName,proto3" json:"hero_name,omitempty"`
	Captain  []byte `protobuf:"bytes,4,opt,name=captain,proto3" json:"captain,omitempty"`
}

func (m *S2CViewOtherHeroCaptainProto) Reset()         { *m = S2CViewOtherHeroCaptainProto{} }
func (m *S2CViewOtherHeroCaptainProto) String() string { return proto.CompactTextString(m) }
func (*S2CViewOtherHeroCaptainProto) ProtoMessage()    {}
func (*S2CViewOtherHeroCaptainProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{109}
}

func (m *S2CViewOtherHeroCaptainProto) GetHeroId() []byte {
	if m != nil {
		return m.HeroId
	}
	return nil
}

func (m *S2CViewOtherHeroCaptainProto) GetHeroName() string {
	if m != nil {
		return m.HeroName
	}
	return ""
}

func (m *S2CViewOtherHeroCaptainProto) GetCaptain() []byte {
	if m != nil {
		return m.Captain
	}
	return nil
}

type C2SCaptainBornProto struct {
	CaptainId int32 `protobuf:"varint,1,opt,name=captain_id,json=captainId,proto3" json:"captain_id,omitempty"`
}

func (m *C2SCaptainBornProto) Reset()                    { *m = C2SCaptainBornProto{} }
func (m *C2SCaptainBornProto) String() string            { return proto.CompactTextString(m) }
func (*C2SCaptainBornProto) ProtoMessage()               {}
func (*C2SCaptainBornProto) Descriptor() ([]byte, []int) { return fileDescriptorMilitary, []int{110} }

func (m *C2SCaptainBornProto) GetCaptainId() int32 {
	if m != nil {
		return m.CaptainId
	}
	return 0
}

type S2CCaptainBornProto struct {
	Captain []byte `protobuf:"bytes,1,opt,name=captain,proto3" json:"captain,omitempty"`
}

func (m *S2CCaptainBornProto) Reset()                    { *m = S2CCaptainBornProto{} }
func (m *S2CCaptainBornProto) String() string            { return proto.CompactTextString(m) }
func (*S2CCaptainBornProto) ProtoMessage()               {}
func (*S2CCaptainBornProto) Descriptor() ([]byte, []int) { return fileDescriptorMilitary, []int{111} }

func (m *S2CCaptainBornProto) GetCaptain() []byte {
	if m != nil {
		return m.Captain
	}
	return nil
}

type C2SCaptainUpstarProto struct {
	CaptainId int32 `protobuf:"varint,1,opt,name=captain_id,json=captainId,proto3" json:"captain_id,omitempty"`
}

func (m *C2SCaptainUpstarProto) Reset()                    { *m = C2SCaptainUpstarProto{} }
func (m *C2SCaptainUpstarProto) String() string            { return proto.CompactTextString(m) }
func (*C2SCaptainUpstarProto) ProtoMessage()               {}
func (*C2SCaptainUpstarProto) Descriptor() ([]byte, []int) { return fileDescriptorMilitary, []int{112} }

func (m *C2SCaptainUpstarProto) GetCaptainId() int32 {
	if m != nil {
		return m.CaptainId
	}
	return 0
}

type S2CCaptainUpstarProto struct {
	CaptainId int32 `protobuf:"varint,3,opt,name=captain_id,json=captainId,proto3" json:"captain_id,omitempty"`
	Star      int32 `protobuf:"varint,2,opt,name=star,proto3" json:"star,omitempty"`
}

func (m *S2CCaptainUpstarProto) Reset()                    { *m = S2CCaptainUpstarProto{} }
func (m *S2CCaptainUpstarProto) String() string            { return proto.CompactTextString(m) }
func (*S2CCaptainUpstarProto) ProtoMessage()               {}
func (*S2CCaptainUpstarProto) Descriptor() ([]byte, []int) { return fileDescriptorMilitary, []int{113} }

func (m *S2CCaptainUpstarProto) GetCaptainId() int32 {
	if m != nil {
		return m.CaptainId
	}
	return 0
}

func (m *S2CCaptainUpstarProto) GetStar() int32 {
	if m != nil {
		return m.Star
	}
	return 0
}

type C2SCaptainExchangeProto struct {
	Cap1Id int32 `protobuf:"varint,1,opt,name=cap1_id,json=cap1Id,proto3" json:"cap1_id,omitempty"`
	Cap2Id int32 `protobuf:"varint,2,opt,name=cap2_id,json=cap2Id,proto3" json:"cap2_id,omitempty"`
}

func (m *C2SCaptainExchangeProto) Reset()         { *m = C2SCaptainExchangeProto{} }
func (m *C2SCaptainExchangeProto) String() string { return proto.CompactTextString(m) }
func (*C2SCaptainExchangeProto) ProtoMessage()    {}
func (*C2SCaptainExchangeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{114}
}

func (m *C2SCaptainExchangeProto) GetCap1Id() int32 {
	if m != nil {
		return m.Cap1Id
	}
	return 0
}

func (m *C2SCaptainExchangeProto) GetCap2Id() int32 {
	if m != nil {
		return m.Cap2Id
	}
	return 0
}

type S2CCaptainExchangeProto struct {
	Cap1 []byte `protobuf:"bytes,1,opt,name=cap1,proto3" json:"cap1,omitempty"`
	Cap2 []byte `protobuf:"bytes,2,opt,name=cap2,proto3" json:"cap2,omitempty"`
}

func (m *S2CCaptainExchangeProto) Reset()         { *m = S2CCaptainExchangeProto{} }
func (m *S2CCaptainExchangeProto) String() string { return proto.CompactTextString(m) }
func (*S2CCaptainExchangeProto) ProtoMessage()    {}
func (*S2CCaptainExchangeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{115}
}

func (m *S2CCaptainExchangeProto) GetCap1() []byte {
	if m != nil {
		return m.Cap1
	}
	return nil
}

func (m *S2CCaptainExchangeProto) GetCap2() []byte {
	if m != nil {
		return m.Cap2
	}
	return nil
}

type C2SActivateCaptainFriendshipProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SActivateCaptainFriendshipProto) Reset()         { *m = C2SActivateCaptainFriendshipProto{} }
func (m *C2SActivateCaptainFriendshipProto) String() string { return proto.CompactTextString(m) }
func (*C2SActivateCaptainFriendshipProto) ProtoMessage()    {}
func (*C2SActivateCaptainFriendshipProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{116}
}

func (m *C2SActivateCaptainFriendshipProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type S2CActivateCaptainFriendshipProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *S2CActivateCaptainFriendshipProto) Reset()         { *m = S2CActivateCaptainFriendshipProto{} }
func (m *S2CActivateCaptainFriendshipProto) String() string { return proto.CompactTextString(m) }
func (*S2CActivateCaptainFriendshipProto) ProtoMessage()    {}
func (*S2CActivateCaptainFriendshipProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{117}
}

func (m *S2CActivateCaptainFriendshipProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type S2CShowPrizeCaptainProto struct {
	Captain int32 `protobuf:"varint,1,opt,name=captain,proto3" json:"captain,omitempty"`
	Exist   bool  `protobuf:"varint,2,opt,name=exist,proto3" json:"exist,omitempty"`
}

func (m *S2CShowPrizeCaptainProto) Reset()         { *m = S2CShowPrizeCaptainProto{} }
func (m *S2CShowPrizeCaptainProto) String() string { return proto.CompactTextString(m) }
func (*S2CShowPrizeCaptainProto) ProtoMessage()    {}
func (*S2CShowPrizeCaptainProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{118}
}

func (m *S2CShowPrizeCaptainProto) GetCaptain() int32 {
	if m != nil {
		return m.Captain
	}
	return 0
}

func (m *S2CShowPrizeCaptainProto) GetExist() bool {
	if m != nil {
		return m.Exist
	}
	return false
}

type C2SNoticeOfficialHasViewedProto struct {
	OfficialId  int32 `protobuf:"varint,1,opt,name=official_id,json=officialId,proto3" json:"official_id,omitempty"`
	OfficialIdx int32 `protobuf:"varint,2,opt,name=official_idx,json=officialIdx,proto3" json:"official_idx,omitempty"`
}

func (m *C2SNoticeOfficialHasViewedProto) Reset()         { *m = C2SNoticeOfficialHasViewedProto{} }
func (m *C2SNoticeOfficialHasViewedProto) String() string { return proto.CompactTextString(m) }
func (*C2SNoticeOfficialHasViewedProto) ProtoMessage()    {}
func (*C2SNoticeOfficialHasViewedProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{119}
}

func (m *C2SNoticeOfficialHasViewedProto) GetOfficialId() int32 {
	if m != nil {
		return m.OfficialId
	}
	return 0
}

func (m *C2SNoticeOfficialHasViewedProto) GetOfficialIdx() int32 {
	if m != nil {
		return m.OfficialIdx
	}
	return 0
}

type S2CNoticeOfficialHasViewedProto struct {
	OfficialId  int32 `protobuf:"varint,1,opt,name=official_id,json=officialId,proto3" json:"official_id,omitempty"`
	OfficialIdx int32 `protobuf:"varint,2,opt,name=official_idx,json=officialIdx,proto3" json:"official_idx,omitempty"`
}

func (m *S2CNoticeOfficialHasViewedProto) Reset()         { *m = S2CNoticeOfficialHasViewedProto{} }
func (m *S2CNoticeOfficialHasViewedProto) String() string { return proto.CompactTextString(m) }
func (*S2CNoticeOfficialHasViewedProto) ProtoMessage()    {}
func (*S2CNoticeOfficialHasViewedProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMilitary, []int{120}
}

func (m *S2CNoticeOfficialHasViewedProto) GetOfficialId() int32 {
	if m != nil {
		return m.OfficialId
	}
	return 0
}

func (m *S2CNoticeOfficialHasViewedProto) GetOfficialIdx() int32 {
	if m != nil {
		return m.OfficialIdx
	}
	return 0
}

func init() {
	proto.RegisterType((*S2CUpdateSoldierCapcityProto)(nil), "proto.S2CUpdateSoldierCapcityProto")
	proto.RegisterType((*C2SRecruitSoldierProto)(nil), "proto.C2SRecruitSoldierProto")
	proto.RegisterType((*S2CRecruitSoldierProto)(nil), "proto.S2CRecruitSoldierProto")
	proto.RegisterType((*C2SRecruitSoldierV2Proto)(nil), "proto.C2SRecruitSoldierV2Proto")
	proto.RegisterType((*S2CRecruitSoldierV2Proto)(nil), "proto.S2CRecruitSoldierV2Proto")
	proto.RegisterType((*S2CAutoRecoverSoldierProto)(nil), "proto.S2CAutoRecoverSoldierProto")
	proto.RegisterType((*S2CRecruitSoldierTimesChangedProto)(nil), "proto.S2CRecruitSoldierTimesChangedProto")
	proto.RegisterType((*S2CAddWoundedSoldierProto)(nil), "proto.S2CAddWoundedSoldierProto")
	proto.RegisterType((*C2SHealWoundedSoldierProto)(nil), "proto.C2SHealWoundedSoldierProto")
	proto.RegisterType((*S2CHealWoundedSoldierProto)(nil), "proto.S2CHealWoundedSoldierProto")
	proto.RegisterType((*C2SCaptainChangeSoldierProto)(nil), "proto.C2SCaptainChangeSoldierProto")
	proto.RegisterType((*S2CCaptainChangeSoldierProto)(nil), "proto.S2CCaptainChangeSoldierProto")
	proto.RegisterType((*C2SCaptainFullSoldierProto)(nil), "proto.C2SCaptainFullSoldierProto")
	proto.RegisterType((*S2CCaptainFullSoldierProto)(nil), "proto.S2CCaptainFullSoldierProto")
	proto.RegisterType((*S2CUpdateFreeSoldierProto)(nil), "proto.S2CUpdateFreeSoldierProto")
	proto.RegisterType((*S2CForceAddSoldierProto)(nil), "proto.S2CForceAddSoldierProto")
	proto.RegisterType((*S2CCaptainChangeDataProto)(nil), "proto.S2CCaptainChangeDataProto")
	proto.RegisterType((*C2SFightProto)(nil), "proto.C2SFightProto")
	proto.RegisterType((*S2CFightProto)(nil), "proto.S2CFightProto")
	proto.RegisterType((*S2CMultiFightProto)(nil), "proto.S2CMultiFightProto")
	proto.RegisterType((*C2SFightxProto)(nil), "proto.C2SFightxProto")
	proto.RegisterType((*S2CFightxProto)(nil), "proto.S2CFightxProto")
	proto.RegisterType((*S2CUpgradeSoldierLevelProto)(nil), "proto.S2CUpgradeSoldierLevelProto")
	proto.RegisterType((*S2CRecruitCaptainV2Proto)(nil), "proto.S2CRecruitCaptainV2Proto")
	proto.RegisterType((*S2CRandomCaptainHeadProto)(nil), "proto.S2CRandomCaptainHeadProto")
	proto.RegisterType((*C2SRecruitCaptainSeekerProto)(nil), "proto.C2SRecruitCaptainSeekerProto")
	proto.RegisterType((*S2CRecruitCaptainSeekerProto)(nil), "proto.S2CRecruitCaptainSeekerProto")
	proto.RegisterType((*C2SSetDefenseTroopProto)(nil), "proto.C2SSetDefenseTroopProto")
	proto.RegisterType((*S2CSetDefenseTroopProto)(nil), "proto.S2CSetDefenseTroopProto")
	proto.RegisterType((*S2CSetDenfeseTroopDefeatedMailProto)(nil), "proto.S2CSetDenfeseTroopDefeatedMailProto")
	proto.RegisterType((*C2SClearDefenseTroopDefeatedMailProto)(nil), "proto.C2SClearDefenseTroopDefeatedMailProto")
	proto.RegisterType((*S2CClearDefenseTroopDefeatedMailProto)(nil), "proto.S2CClearDefenseTroopDefeatedMailProto")
	proto.RegisterType((*C2SSetDefenserAutoFullSoldierProto)(nil), "proto.C2SSetDefenserAutoFullSoldierProto")
	proto.RegisterType((*S2CSetDefenserAutoFullSoldierProto)(nil), "proto.S2CSetDefenserAutoFullSoldierProto")
	proto.RegisterType((*C2SUseCopyDefenserGoodsProto)(nil), "proto.C2SUseCopyDefenserGoodsProto")
	proto.RegisterType((*S2CUseCopyDefenserGoodsProto)(nil), "proto.S2CUseCopyDefenserGoodsProto")
	proto.RegisterType((*S2CUpdateCopyDefenserProto)(nil), "proto.S2CUpdateCopyDefenserProto")
	proto.RegisterType((*C2SSellSeekCaptainProto)(nil), "proto.C2SSellSeekCaptainProto")
	proto.RegisterType((*S2CSellSeekCaptainProto)(nil), "proto.S2CSellSeekCaptainProto")
	proto.RegisterType((*C2SSetMultiCaptainIndexProto)(nil), "proto.C2SSetMultiCaptainIndexProto")
	proto.RegisterType((*S2CSetMultiCaptainIndexProto)(nil), "proto.S2CSetMultiCaptainIndexProto")
	proto.RegisterType((*C2SSetPveCaptainProto)(nil), "proto.C2SSetPveCaptainProto")
	proto.RegisterType((*S2CSetPveCaptainProto)(nil), "proto.S2CSetPveCaptainProto")
	proto.RegisterType((*C2SFireCaptainProto)(nil), "proto.C2SFireCaptainProto")
	proto.RegisterType((*S2CFireCaptainProto)(nil), "proto.S2CFireCaptainProto")
	proto.RegisterType((*C2SCaptainRefinedProto)(nil), "proto.C2SCaptainRefinedProto")
	proto.RegisterType((*S2CCaptainRefinedProto)(nil), "proto.S2CCaptainRefinedProto")
	proto.RegisterType((*C2SCaptainEnhanceProto)(nil), "proto.C2SCaptainEnhanceProto")
	proto.RegisterType((*S2CCaptainEnhanceProto)(nil), "proto.S2CCaptainEnhanceProto")
	proto.RegisterType((*S2CCaptainRefinedUpgradeProto)(nil), "proto.S2CCaptainRefinedUpgradeProto")
	proto.RegisterType((*S2CUpdateAbilityExpProto)(nil), "proto.S2CUpdateAbilityExpProto")
	proto.RegisterType((*S2CUpdateCaptainExpProto)(nil), "proto.S2CUpdateCaptainExpProto")
	proto.RegisterType((*S2CUpdateCaptainLevelProto)(nil), "proto.S2CUpdateCaptainLevelProto")
	proto.RegisterType((*S2CCaptainLevelupProto)(nil), "proto.S2CCaptainLevelupProto")
	proto.RegisterType((*S2CUpdateCaptainStatProto)(nil), "proto.S2CUpdateCaptainStatProto")
	proto.RegisterType((*C2SChangeCaptainNameProto)(nil), "proto.C2SChangeCaptainNameProto")
	proto.RegisterType((*S2CChangeCaptainNameProto)(nil), "proto.S2CChangeCaptainNameProto")
	proto.RegisterType((*C2SChangeCaptainRaceProto)(nil), "proto.C2SChangeCaptainRaceProto")
	proto.RegisterType((*S2CChangeCaptainRaceProto)(nil), "proto.S2CChangeCaptainRaceProto")
	proto.RegisterType((*C2SCaptainRebirthPreviewProto)(nil), "proto.C2SCaptainRebirthPreviewProto")
	proto.RegisterType((*S2CCaptainRebirthPreviewProto)(nil), "proto.S2CCaptainRebirthPreviewProto")
	proto.RegisterType((*S2CCaptainRebirthCdStartProto)(nil), "proto.S2CCaptainRebirthCdStartProto")
	proto.RegisterType((*C2SCaptainRebirthProto)(nil), "proto.C2SCaptainRebirthProto")
	proto.RegisterType((*S2CCaptainRebirthProto)(nil), "proto.S2CCaptainRebirthProto")
	proto.RegisterType((*C2SCaptainProgressProto)(nil), "proto.C2SCaptainProgressProto")
	proto.RegisterType((*S2CCaptainProgressProto)(nil), "proto.S2CCaptainProgressProto")
	proto.RegisterType((*C2SCaptainRebirthMiaoCdProto)(nil), "proto.C2SCaptainRebirthMiaoCdProto")
	proto.RegisterType((*S2CCaptainRebirthMiaoCdProto)(nil), "proto.S2CCaptainRebirthMiaoCdProto")
	proto.RegisterType((*S2CCollectCaptainTrainingExpProto)(nil), "proto.S2CCollectCaptainTrainingExpProto")
	proto.RegisterType((*S2CCaptainTrainExpProto)(nil), "proto.S2CCaptainTrainExpProto")
	proto.RegisterType((*S2CUpdateTrainingProto)(nil), "proto.S2CUpdateTrainingProto")
	proto.RegisterType((*S2CCaptainCanCollectExpProto)(nil), "proto.S2CCaptainCanCollectExpProto")
	proto.RegisterType((*C2SUseTrainingExpGoodsProto)(nil), "proto.C2SUseTrainingExpGoodsProto")
	proto.RegisterType((*S2CUseTrainingExpGoodsProto)(nil), "proto.S2CUseTrainingExpGoodsProto")
	proto.RegisterType((*C2SUseLevelExpGoodsProto)(nil), "proto.C2SUseLevelExpGoodsProto")
	proto.RegisterType((*S2CUseLevelExpGoodsProto)(nil), "proto.S2CUseLevelExpGoodsProto")
	proto.RegisterType((*C2SUseLevelExpGoods2Proto)(nil), "proto.C2SUseLevelExpGoods2Proto")
	proto.RegisterType((*S2CUseLevelExpGoods2Proto)(nil), "proto.S2CUseLevelExpGoods2Proto")
	proto.RegisterType((*C2SAutoUseGoodsUntilCaptainLevelupProto)(nil), "proto.C2SAutoUseGoodsUntilCaptainLevelupProto")
	proto.RegisterType((*S2CAutoUseGoodsUntilCaptainLevelupProto)(nil), "proto.S2CAutoUseGoodsUntilCaptainLevelupProto")
	proto.RegisterType((*S2CGetMaxRecruitSoldierProto)(nil), "proto.S2CGetMaxRecruitSoldierProto")
	proto.RegisterType((*S2CGetMaxHealSoldierProto)(nil), "proto.S2CGetMaxHealSoldierProto")
	proto.RegisterType((*S2CJiuGuanConsultProto)(nil), "proto.S2CJiuGuanConsultProto")
	proto.RegisterType((*S2CJiuGuanConsultBroadcastProto)(nil), "proto.S2CJiuGuanConsultBroadcastProto")
	proto.RegisterType((*S2CJiuGuanTimesChangedProto)(nil), "proto.S2CJiuGuanTimesChangedProto")
	proto.RegisterType((*C2SJiuGuanRefreshProto)(nil), "proto.C2SJiuGuanRefreshProto")
	proto.RegisterType((*S2CJiuGuanRefreshProto)(nil), "proto.S2CJiuGuanRefreshProto")
	proto.RegisterType((*C2SUnlockCaptainRestraintSpellProto)(nil), "proto.C2SUnlockCaptainRestraintSpellProto")
	proto.RegisterType((*S2CUnlockCaptainRestraintSpellProto)(nil), "proto.S2CUnlockCaptainRestraintSpellProto")
	proto.RegisterType((*S2CNewTroopsProto)(nil), "proto.S2CNewTroopsProto")
	proto.RegisterType((*C2SGetCaptainStatDetailsProto)(nil), "proto.C2SGetCaptainStatDetailsProto")
	proto.RegisterType((*S2CGetCaptainStatDetailsProto)(nil), "proto.S2CGetCaptainStatDetailsProto")
	proto.RegisterType((*C2SCaptainStatDetailsProto)(nil), "proto.C2SCaptainStatDetailsProto")
	proto.RegisterType((*S2CCaptainStatDetailsProto)(nil), "proto.S2CCaptainStatDetailsProto")
	proto.RegisterType((*S2CUpdateTroopFightAmountProto)(nil), "proto.S2CUpdateTroopFightAmountProto")
	proto.RegisterType((*C2SUpdateCaptainOfficialProto)(nil), "proto.C2SUpdateCaptainOfficialProto")
	proto.RegisterType((*S2CUpdateCaptainOfficialProto)(nil), "proto.S2CUpdateCaptainOfficialProto")
	proto.RegisterType((*C2SSetCaptainOfficialProto)(nil), "proto.C2SSetCaptainOfficialProto")
	proto.RegisterType((*S2CSetCaptainOfficialProto)(nil), "proto.S2CSetCaptainOfficialProto")
	proto.RegisterType((*C2SLeaveCaptainOfficialProto)(nil), "proto.C2SLeaveCaptainOfficialProto")
	proto.RegisterType((*S2CLeaveCaptainOfficialProto)(nil), "proto.S2CLeaveCaptainOfficialProto")
	proto.RegisterType((*S2CAddGongxunProto)(nil), "proto.S2CAddGongxunProto")
	proto.RegisterType((*C2SUseGongXunGoodsProto)(nil), "proto.C2SUseGongXunGoodsProto")
	proto.RegisterType((*S2CUseGongXunGoodsProto)(nil), "proto.S2CUseGongXunGoodsProto")
	proto.RegisterType((*C2SUseGongxunGoodsProto)(nil), "proto.C2SUseGongxunGoodsProto")
	proto.RegisterType((*S2CUseGongxunGoodsProto)(nil), "proto.S2CUseGongxunGoodsProto")
	proto.RegisterType((*C2SCloseFightGuideProto)(nil), "proto.C2SCloseFightGuideProto")
	proto.RegisterType((*S2CCloseFightGuideProto)(nil), "proto.S2CCloseFightGuideProto")
	proto.RegisterType((*C2SViewOtherHeroCaptainProto)(nil), "proto.C2SViewOtherHeroCaptainProto")
	proto.RegisterType((*S2CViewOtherHeroCaptainProto)(nil), "proto.S2CViewOtherHeroCaptainProto")
	proto.RegisterType((*C2SCaptainBornProto)(nil), "proto.C2SCaptainBornProto")
	proto.RegisterType((*S2CCaptainBornProto)(nil), "proto.S2CCaptainBornProto")
	proto.RegisterType((*C2SCaptainUpstarProto)(nil), "proto.C2SCaptainUpstarProto")
	proto.RegisterType((*S2CCaptainUpstarProto)(nil), "proto.S2CCaptainUpstarProto")
	proto.RegisterType((*C2SCaptainExchangeProto)(nil), "proto.C2SCaptainExchangeProto")
	proto.RegisterType((*S2CCaptainExchangeProto)(nil), "proto.S2CCaptainExchangeProto")
	proto.RegisterType((*C2SActivateCaptainFriendshipProto)(nil), "proto.C2SActivateCaptainFriendshipProto")
	proto.RegisterType((*S2CActivateCaptainFriendshipProto)(nil), "proto.S2CActivateCaptainFriendshipProto")
	proto.RegisterType((*S2CShowPrizeCaptainProto)(nil), "proto.S2CShowPrizeCaptainProto")
	proto.RegisterType((*C2SNoticeOfficialHasViewedProto)(nil), "proto.C2SNoticeOfficialHasViewedProto")
	proto.RegisterType((*S2CNoticeOfficialHasViewedProto)(nil), "proto.S2CNoticeOfficialHasViewedProto")
}
func (m *S2CUpdateSoldierCapcityProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateSoldierCapcityProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SoldierCapcity != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.SoldierCapcity))
	}
	if m.WoundedSoldierCapcity != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.WoundedSoldierCapcity))
	}
	if m.NewSoldierCapcity != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.NewSoldierCapcity))
	}
	if m.NewSoldierOutput != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.NewSoldierOutput))
	}
	if m.NewRecruitSoldierCount != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.NewRecruitSoldierCount))
	}
	return i, nil
}

func (m *C2SRecruitSoldierProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SRecruitSoldierProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *S2CRecruitSoldierProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CRecruitSoldierProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NewSoldier != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.NewSoldier))
	}
	if m.FreeSoldier != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.FreeSoldier))
	}
	return i, nil
}

func (m *C2SRecruitSoldierV2Proto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SRecruitSoldierV2Proto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.All {
		dAtA[i] = 0x8
		i++
		if m.All {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CRecruitSoldierV2Proto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CRecruitSoldierV2Proto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AddSoldier != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.AddSoldier))
	}
	return i, nil
}

func (m *S2CAutoRecoverSoldierProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CAutoRecoverSoldierProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FreeSoldier != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.FreeSoldier))
	}
	if len(m.CaptainId) > 0 {
		for _, num := range m.CaptainId {
			dAtA[i] = 0x10
			i++
			i = encodeVarintMilitary(dAtA, i, uint64(num))
		}
	}
	if len(m.CaptainSoldierCount) > 0 {
		for _, num := range m.CaptainSoldierCount {
			dAtA[i] = 0x18
			i++
			i = encodeVarintMilitary(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *S2CRecruitSoldierTimesChangedProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CRecruitSoldierTimesChangedProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StartRecoveryTime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.StartRecoveryTime))
	}
	return i, nil
}

func (m *S2CAddWoundedSoldierProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CAddWoundedSoldierProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ToAdd != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.ToAdd))
	}
	if m.Total != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Total))
	}
	return i, nil
}

func (m *C2SHealWoundedSoldierProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SHealWoundedSoldierProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *S2CHealWoundedSoldierProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CHealWoundedSoldierProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *C2SCaptainChangeSoldierProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCaptainChangeSoldierProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Id))
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *S2CCaptainChangeSoldierProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCaptainChangeSoldierProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Id))
	}
	if m.Soldier != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Soldier))
	}
	if m.FightAmount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.FightAmount))
	}
	if m.FreeSoldier != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.FreeSoldier))
	}
	return i, nil
}

func (m *C2SCaptainFullSoldierProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCaptainFullSoldierProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		for _, num := range m.Id {
			dAtA[i] = 0x8
			i++
			i = encodeVarintMilitary(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *S2CCaptainFullSoldierProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCaptainFullSoldierProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		for _, num := range m.Id {
			dAtA[i] = 0x8
			i++
			i = encodeVarintMilitary(dAtA, i, uint64(num))
		}
	}
	if len(m.Soldier) > 0 {
		for _, num := range m.Soldier {
			dAtA[i] = 0x10
			i++
			i = encodeVarintMilitary(dAtA, i, uint64(num))
		}
	}
	if len(m.FightAmount) > 0 {
		for _, num := range m.FightAmount {
			dAtA[i] = 0x18
			i++
			i = encodeVarintMilitary(dAtA, i, uint64(num))
		}
	}
	if m.FreeSoldier != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.FreeSoldier))
	}
	return i, nil
}

func (m *S2CUpdateFreeSoldierProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateFreeSoldierProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StartTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.StartTime))
	}
	if m.Capcity != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Capcity))
	}
	if m.Output != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Output))
	}
	if m.Overflow != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Overflow))
	}
	return i, nil
}

func (m *S2CForceAddSoldierProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CForceAddSoldierProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Times != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Times))
	}
	return i, nil
}

func (m *S2CCaptainChangeDataProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCaptainChangeDataProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Id))
	}
	if m.Soldier != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Soldier))
	}
	if m.MaxSoldier != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.MaxSoldier))
	}
	if m.FightAmount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.FightAmount))
	}
	return i, nil
}

func (m *C2SFightProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SFightProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Wall {
		dAtA[i] = 0x8
		i++
		if m.Wall {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CFightProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CFightProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Replay) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(len(m.Replay)))
		i += copy(dAtA[i:], m.Replay)
	}
	return i, nil
}

func (m *S2CMultiFightProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CMultiFightProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Replay) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(len(m.Replay)))
		i += copy(dAtA[i:], m.Replay)
	}
	return i, nil
}

func (m *C2SFightxProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SFightxProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Wall {
		dAtA[i] = 0x8
		i++
		if m.Wall {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Attacker) > 0 {
		for _, num := range m.Attacker {
			dAtA[i] = 0x10
			i++
			i = encodeVarintMilitary(dAtA, i, uint64(num))
		}
	}
	if len(m.Defenser) > 0 {
		for _, num := range m.Defenser {
			dAtA[i] = 0x18
			i++
			i = encodeVarintMilitary(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *S2CFightxProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CFightxProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Replay) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(len(m.Replay)))
		i += copy(dAtA[i:], m.Replay)
	}
	return i, nil
}

func (m *S2CUpgradeSoldierLevelProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpgradeSoldierLevelProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Level != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Level))
	}
	return i, nil
}

func (m *S2CRecruitCaptainV2Proto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CRecruitCaptainV2Proto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Captain) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(len(m.Captain)))
		i += copy(dAtA[i:], m.Captain)
	}
	if m.CaptainIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.CaptainIndex))
	}
	return i, nil
}

func (m *S2CRandomCaptainHeadProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CRandomCaptainHeadProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Head) > 0 {
		for _, s := range m.Head {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *C2SRecruitCaptainSeekerProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SRecruitCaptainSeekerProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Index))
	}
	if len(m.Head) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(len(m.Head)))
		i += copy(dAtA[i:], m.Head)
	}
	return i, nil
}

func (m *S2CRecruitCaptainSeekerProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CRecruitCaptainSeekerProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Index))
	}
	if len(m.Captain) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(len(m.Captain)))
		i += copy(dAtA[i:], m.Captain)
	}
	if m.CaptainIndex != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.CaptainIndex))
	}
	return i, nil
}

func (m *C2SSetDefenseTroopProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SSetDefenseTroopProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsTent {
		dAtA[i] = 0x8
		i++
		if m.IsTent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TroopIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.TroopIndex))
	}
	return i, nil
}

func (m *S2CSetDefenseTroopProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSetDefenseTroopProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsTent {
		dAtA[i] = 0x8
		i++
		if m.IsTent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TroopIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.TroopIndex))
	}
	return i, nil
}

func (m *S2CSetDenfeseTroopDefeatedMailProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSetDenfeseTroopDefeatedMailProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Mail) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(len(m.Mail)))
		i += copy(dAtA[i:], m.Mail)
	}
	if m.IsTent {
		dAtA[i] = 0x10
		i++
		if m.IsTent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *C2SClearDefenseTroopDefeatedMailProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SClearDefenseTroopDefeatedMailProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsTent {
		dAtA[i] = 0x8
		i++
		if m.IsTent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CClearDefenseTroopDefeatedMailProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CClearDefenseTroopDefeatedMailProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsTent {
		dAtA[i] = 0x8
		i++
		if m.IsTent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *C2SSetDefenserAutoFullSoldierProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SSetDefenserAutoFullSoldierProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Dont {
		dAtA[i] = 0x8
		i++
		if m.Dont {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CSetDefenserAutoFullSoldierProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSetDefenserAutoFullSoldierProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Dont {
		dAtA[i] = 0x8
		i++
		if m.Dont {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *C2SUseCopyDefenserGoodsProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SUseCopyDefenserGoodsProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Goods != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Goods))
	}
	if m.AutoBuy {
		dAtA[i] = 0x10
		i++
		if m.AutoBuy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TroopIndex != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.TroopIndex))
	}
	return i, nil
}

func (m *S2CUseCopyDefenserGoodsProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUseCopyDefenserGoodsProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TroopIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.TroopIndex))
	}
	if m.EndTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.EndTime))
	}
	return i, nil
}

func (m *S2CUpdateCopyDefenserProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateCopyDefenserProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Soldier != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Soldier))
	}
	if m.TotalSoldier != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.TotalSoldier))
	}
	if m.FightAmount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.FightAmount))
	}
	return i, nil
}

func (m *C2SSellSeekCaptainProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SSellSeekCaptainProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Index))
	}
	return i, nil
}

func (m *S2CSellSeekCaptainProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSellSeekCaptainProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Index))
	}
	return i, nil
}

func (m *C2SSetMultiCaptainIndexProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SSetMultiCaptainIndexProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Index))
	}
	if len(m.Id) > 0 {
		for _, num := range m.Id {
			dAtA[i] = 0x10
			i++
			i = encodeVarintMilitary(dAtA, i, uint64(num))
		}
	}
	if len(m.XIndex) > 0 {
		for _, num := range m.XIndex {
			dAtA[i] = 0x18
			i++
			i = encodeVarintMilitary(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *S2CSetMultiCaptainIndexProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSetMultiCaptainIndexProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Index))
	}
	if len(m.Id) > 0 {
		for _, num := range m.Id {
			dAtA[i] = 0x10
			i++
			i = encodeVarintMilitary(dAtA, i, uint64(num))
		}
	}
	if len(m.XIndex) > 0 {
		for _, num := range m.XIndex {
			dAtA[i] = 0x18
			i++
			i = encodeVarintMilitary(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *C2SSetPveCaptainProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SSetPveCaptainProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PveType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.PveType))
	}
	if len(m.Id) > 0 {
		for _, num := range m.Id {
			dAtA[i] = 0x10
			i++
			i = encodeVarintMilitary(dAtA, i, uint64(num))
		}
	}
	if len(m.XIndex) > 0 {
		for _, num := range m.XIndex {
			dAtA[i] = 0x18
			i++
			i = encodeVarintMilitary(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *S2CSetPveCaptainProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSetPveCaptainProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Troop) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(len(m.Troop)))
		i += copy(dAtA[i:], m.Troop)
	}
	return i, nil
}

func (m *C2SFireCaptainProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SFireCaptainProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *S2CFireCaptainProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CFireCaptainProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *C2SCaptainRefinedProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCaptainRefinedProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Captain != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Captain))
	}
	if len(m.GoodsId) > 0 {
		for _, num := range m.GoodsId {
			dAtA[i] = 0x10
			i++
			i = encodeVarintMilitary(dAtA, i, uint64(num))
		}
	}
	if len(m.Count) > 0 {
		for _, num := range m.Count {
			dAtA[i] = 0x18
			i++
			i = encodeVarintMilitary(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *S2CCaptainRefinedProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCaptainRefinedProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Captain != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Captain))
	}
	if m.Exp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Exp))
	}
	return i, nil
}

func (m *C2SCaptainEnhanceProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCaptainEnhanceProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Captain != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Captain))
	}
	if len(m.GoodsId) > 0 {
		for _, num := range m.GoodsId {
			dAtA[i] = 0x10
			i++
			i = encodeVarintMilitary(dAtA, i, uint64(num))
		}
	}
	if len(m.Count) > 0 {
		for _, num := range m.Count {
			dAtA[i] = 0x18
			i++
			i = encodeVarintMilitary(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *S2CCaptainEnhanceProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCaptainEnhanceProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Captain != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Captain))
	}
	if m.Ability != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Ability))
	}
	if m.AbilityExp != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.AbilityExp))
	}
	if m.Quality != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Quality))
	}
	return i, nil
}

func (m *S2CCaptainRefinedUpgradeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCaptainRefinedUpgradeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Captain != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Captain))
	}
	if m.Exp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Exp))
	}
	if m.Ability != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Ability))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Quality != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Quality))
	}
	return i, nil
}

func (m *S2CUpdateAbilityExpProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateAbilityExpProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Captain != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Captain))
	}
	if m.Exp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Exp))
	}
	return i, nil
}

func (m *S2CUpdateCaptainExpProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateCaptainExpProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Captain != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Captain))
	}
	if m.Exp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Exp))
	}
	return i, nil
}

func (m *S2CUpdateCaptainLevelProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateCaptainLevelProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Captain != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Captain))
	}
	if m.Exp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Exp))
	}
	if m.Level != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Level))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.SoldierCapcity != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.SoldierCapcity))
	}
	return i, nil
}

func (m *S2CCaptainLevelupProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCaptainLevelupProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Captain != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Captain))
	}
	if m.Exp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Exp))
	}
	if m.Level != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Level))
	}
	if m.SoldierCapcity != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.SoldierCapcity))
	}
	return i, nil
}

func (m *S2CUpdateCaptainStatProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateCaptainStatProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Captain != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Captain))
	}
	if len(m.TotalStat) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(len(m.TotalStat)))
		i += copy(dAtA[i:], m.TotalStat)
	}
	if m.FightAmount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.FightAmount))
	}
	if m.FullFightAmount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.FullFightAmount))
	}
	return i, nil
}

func (m *C2SChangeCaptainNameProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SChangeCaptainNameProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *S2CChangeCaptainNameProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CChangeCaptainNameProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *C2SChangeCaptainRaceProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SChangeCaptainRaceProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Id))
	}
	if m.Race != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Race))
	}
	if m.Money {
		dAtA[i] = 0x20
		i++
		if m.Money {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CChangeCaptainRaceProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CChangeCaptainRaceProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Id))
	}
	if m.Race != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Race))
	}
	if m.Cooldown != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Cooldown))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *C2SCaptainRebirthPreviewProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCaptainRebirthPreviewProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *S2CCaptainRebirthPreviewProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCaptainRebirthPreviewProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Id))
	}
	if m.RebirthLevel != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.RebirthLevel))
	}
	if m.Quality != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Quality))
	}
	if m.Ability != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Ability))
	}
	if m.AbilityLimit != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.AbilityLimit))
	}
	if m.TotalStat != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.TotalStat))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.SoldierCapcity != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.SoldierCapcity))
	}
	if len(m.AddStat) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(len(m.AddStat)))
		i += copy(dAtA[i:], m.AddStat)
	}
	return i, nil
}

func (m *S2CCaptainRebirthCdStartProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCaptainRebirthCdStartProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Id))
	}
	if m.CdEndtime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.CdEndtime))
	}
	return i, nil
}

func (m *C2SCaptainRebirthProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCaptainRebirthProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Id))
	}
	if m.Miao {
		dAtA[i] = 0x10
		i++
		if m.Miao {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CCaptainRebirthProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCaptainRebirthProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Id))
	}
	if m.RebirthLevel != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.RebirthLevel))
	}
	if m.RebirthExp != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.RebirthExp))
	}
	if m.Quality != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Quality))
	}
	if m.Ability != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Ability))
	}
	if m.AbilityExp != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.AbilityExp))
	}
	if m.AbilityLimit != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.AbilityLimit))
	}
	if m.Soldier != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Soldier))
	}
	if m.SoldierCapcity != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.SoldierCapcity))
	}
	if len(m.TotalStat) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(len(m.TotalStat)))
		i += copy(dAtA[i:], m.TotalStat)
	}
	if m.FightAmount != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.FightAmount))
	}
	if m.FullFightAmount != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.FullFightAmount))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *C2SCaptainProgressProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCaptainProgressProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Id))
	}
	if m.Miao {
		dAtA[i] = 0x10
		i++
		if m.Miao {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CCaptainProgressProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCaptainProgressProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Id))
	}
	if m.RebirthLevel != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.RebirthLevel))
	}
	if m.RebirthExp != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.RebirthExp))
	}
	if m.Quality != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Quality))
	}
	if m.Ability != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Ability))
	}
	if m.AbilityExp != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.AbilityExp))
	}
	if m.AbilityLimit != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.AbilityLimit))
	}
	if m.Soldier != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Soldier))
	}
	if m.SoldierCapcity != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.SoldierCapcity))
	}
	if len(m.TotalStat) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(len(m.TotalStat)))
		i += copy(dAtA[i:], m.TotalStat)
	}
	if m.FightAmount != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.FightAmount))
	}
	if m.FullFightAmount != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.FullFightAmount))
	}
	return i, nil
}

func (m *C2SCaptainRebirthMiaoCdProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCaptainRebirthMiaoCdProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *S2CCaptainRebirthMiaoCdProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCaptainRebirthMiaoCdProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *S2CCollectCaptainTrainingExpProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCollectCaptainTrainingExpProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Time))
	}
	return i, nil
}

func (m *S2CCaptainTrainExpProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCaptainTrainExpProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Time))
	}
	return i, nil
}

func (m *S2CUpdateTrainingProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateTrainingProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Gst != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Gst))
	}
	if m.Cst != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Cst))
	}
	if m.ExpPerHour != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.ExpPerHour))
	}
	if m.Coef != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Coef))
	}
	return i, nil
}

func (m *S2CCaptainCanCollectExpProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCaptainCanCollectExpProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Exp != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Exp))
	}
	if len(m.BuffCoef) > 0 {
		for _, num := range m.BuffCoef {
			dAtA[i] = 0x10
			i++
			i = encodeVarintMilitary(dAtA, i, uint64(num))
		}
	}
	if m.MaxDuration != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.MaxDuration))
	}
	return i, nil
}

func (m *C2SUseTrainingExpGoodsProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SUseTrainingExpGoodsProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CaptainId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.CaptainId))
	}
	if m.GoodsId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.GoodsId))
	}
	if m.Count != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *S2CUseTrainingExpGoodsProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUseTrainingExpGoodsProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CaptainId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.CaptainId))
	}
	if m.GoodsId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.GoodsId))
	}
	if m.Upgrade {
		dAtA[i] = 0x18
		i++
		if m.Upgrade {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Count != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *C2SUseLevelExpGoodsProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SUseLevelExpGoodsProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CaptainId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.CaptainId))
	}
	if m.GoodsId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.GoodsId))
	}
	if m.Count != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *S2CUseLevelExpGoodsProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUseLevelExpGoodsProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CaptainId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.CaptainId))
	}
	if m.GoodsId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.GoodsId))
	}
	if m.Count != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Count))
	}
	if m.Upgrade {
		dAtA[i] = 0x20
		i++
		if m.Upgrade {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *C2SUseLevelExpGoods2Proto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SUseLevelExpGoods2Proto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Captain != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Captain))
	}
	if m.GoodsId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.GoodsId))
	}
	return i, nil
}

func (m *S2CUseLevelExpGoods2Proto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUseLevelExpGoods2Proto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Captain != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Captain))
	}
	if m.Upgrade {
		dAtA[i] = 0x20
		i++
		if m.Upgrade {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Level != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Level))
	}
	if m.Exp != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Exp))
	}
	return i, nil
}

func (m *C2SAutoUseGoodsUntilCaptainLevelupProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SAutoUseGoodsUntilCaptainLevelupProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Captain != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Captain))
	}
	return i, nil
}

func (m *S2CAutoUseGoodsUntilCaptainLevelupProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CAutoUseGoodsUntilCaptainLevelupProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Captain != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Captain))
	}
	if m.Level != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Level))
	}
	if m.Exp != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Exp))
	}
	if m.Upgrade {
		dAtA[i] = 0x20
		i++
		if m.Upgrade {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CGetMaxRecruitSoldierProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CGetMaxRecruitSoldierProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *S2CGetMaxHealSoldierProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CGetMaxHealSoldierProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *S2CJiuGuanConsultProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CJiuGuanConsultProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Prize) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(len(m.Prize)))
		i += copy(dAtA[i:], m.Prize)
	}
	if m.CritMulti != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.CritMulti))
	}
	if m.CritMultiImgIndex != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.CritMultiImgIndex))
	}
	if m.TutorIndex != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.TutorIndex))
	}
	if m.OriginalIndex != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.OriginalIndex))
	}
	return i, nil
}

func (m *S2CJiuGuanConsultBroadcastProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CJiuGuanConsultBroadcastProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Level != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Level))
	}
	if m.CritMulti != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.CritMulti))
	}
	if len(m.HeroName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(len(m.HeroName)))
		i += copy(dAtA[i:], m.HeroName)
	}
	return i, nil
}

func (m *S2CJiuGuanTimesChangedProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CJiuGuanTimesChangedProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Times != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Times))
	}
	if m.NextTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.NextTime))
	}
	return i, nil
}

func (m *C2SJiuGuanRefreshProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SJiuGuanRefreshProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AutoMax {
		dAtA[i] = 0x8
		i++
		if m.AutoMax {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CJiuGuanRefreshProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CJiuGuanRefreshProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TutorIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.TutorIndex))
	}
	if m.RefreshTimes != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.RefreshTimes))
	}
	if m.AutoMax {
		dAtA[i] = 0x18
		i++
		if m.AutoMax {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *C2SUnlockCaptainRestraintSpellProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SUnlockCaptainRestraintSpellProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Captain != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Captain))
	}
	return i, nil
}

func (m *S2CUnlockCaptainRestraintSpellProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUnlockCaptainRestraintSpellProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Captain != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Captain))
	}
	return i, nil
}

func (m *S2CNewTroopsProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CNewTroopsProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Troop) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(len(m.Troop)))
		i += copy(dAtA[i:], m.Troop)
	}
	return i, nil
}

func (m *C2SGetCaptainStatDetailsProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SGetCaptainStatDetailsProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Captain != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Captain))
	}
	return i, nil
}

func (m *S2CGetCaptainStatDetailsProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CGetCaptainStatDetailsProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Captain != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Captain))
	}
	if len(m.Stats) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(len(m.Stats)))
		i += copy(dAtA[i:], m.Stats)
	}
	return i, nil
}

func (m *C2SCaptainStatDetailsProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCaptainStatDetailsProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Captain != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Captain))
	}
	return i, nil
}

func (m *S2CCaptainStatDetailsProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCaptainStatDetailsProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Captain != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Captain))
	}
	if len(m.Stats) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(len(m.Stats)))
		i += copy(dAtA[i:], m.Stats)
	}
	return i, nil
}

func (m *S2CUpdateTroopFightAmountProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateTroopFightAmountProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TroopIndex) > 0 {
		for _, num := range m.TroopIndex {
			dAtA[i] = 0x8
			i++
			i = encodeVarintMilitary(dAtA, i, uint64(num))
		}
	}
	if len(m.StartValue) > 0 {
		for _, num := range m.StartValue {
			dAtA[i] = 0x30
			i++
			i = encodeVarintMilitary(dAtA, i, uint64(num))
		}
	}
	if len(m.EndValue) > 0 {
		for _, num := range m.EndValue {
			dAtA[i] = 0x38
			i++
			i = encodeVarintMilitary(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *C2SUpdateCaptainOfficialProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SUpdateCaptainOfficialProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Captain != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Captain))
	}
	if m.Official != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Official))
	}
	return i, nil
}

func (m *S2CUpdateCaptainOfficialProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateCaptainOfficialProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Captain != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Captain))
	}
	if m.Official != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Official))
	}
	return i, nil
}

func (m *C2SSetCaptainOfficialProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SSetCaptainOfficialProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Captain) > 0 {
		for _, num := range m.Captain {
			dAtA[i] = 0x18
			i++
			i = encodeVarintMilitary(dAtA, i, uint64(num))
		}
	}
	if len(m.Official) > 0 {
		for _, num := range m.Official {
			dAtA[i] = 0x20
			i++
			i = encodeVarintMilitary(dAtA, i, uint64(num))
		}
	}
	if len(m.OfficialIdx) > 0 {
		for _, num := range m.OfficialIdx {
			dAtA[i] = 0x28
			i++
			i = encodeVarintMilitary(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *S2CSetCaptainOfficialProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSetCaptainOfficialProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Captain) > 0 {
		for _, num := range m.Captain {
			dAtA[i] = 0x18
			i++
			i = encodeVarintMilitary(dAtA, i, uint64(num))
		}
	}
	if len(m.Official) > 0 {
		for _, num := range m.Official {
			dAtA[i] = 0x20
			i++
			i = encodeVarintMilitary(dAtA, i, uint64(num))
		}
	}
	if len(m.OfficialIdx) > 0 {
		for _, num := range m.OfficialIdx {
			dAtA[i] = 0x28
			i++
			i = encodeVarintMilitary(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *C2SLeaveCaptainOfficialProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SLeaveCaptainOfficialProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Captain != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Captain))
	}
	return i, nil
}

func (m *S2CLeaveCaptainOfficialProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CLeaveCaptainOfficialProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Captain != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Captain))
	}
	return i, nil
}

func (m *S2CAddGongxunProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CAddGongxunProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Captain != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Captain))
	}
	if m.NewGongxun != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.NewGongxun))
	}
	return i, nil
}

func (m *C2SUseGongXunGoodsProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SUseGongXunGoodsProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Captain != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Captain))
	}
	if len(m.GoodsId) > 0 {
		for _, num := range m.GoodsId {
			dAtA[i] = 0x10
			i++
			i = encodeVarintMilitary(dAtA, i, uint64(num))
		}
	}
	if len(m.Count) > 0 {
		for _, num := range m.Count {
			dAtA[i] = 0x18
			i++
			i = encodeVarintMilitary(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *S2CUseGongXunGoodsProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUseGongXunGoodsProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Captain != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Captain))
	}
	if m.NewGongxun != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.NewGongxun))
	}
	return i, nil
}

func (m *C2SUseGongxunGoodsProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SUseGongxunGoodsProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Captain != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Captain))
	}
	if len(m.GoodsId) > 0 {
		for _, num := range m.GoodsId {
			dAtA[i] = 0x10
			i++
			i = encodeVarintMilitary(dAtA, i, uint64(num))
		}
	}
	if len(m.Count) > 0 {
		for _, num := range m.Count {
			dAtA[i] = 0x18
			i++
			i = encodeVarintMilitary(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *S2CUseGongxunGoodsProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUseGongxunGoodsProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Captain != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Captain))
	}
	if m.NewGongxun != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.NewGongxun))
	}
	return i, nil
}

func (m *C2SCloseFightGuideProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCloseFightGuideProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Close {
		dAtA[i] = 0x8
		i++
		if m.Close {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CCloseFightGuideProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCloseFightGuideProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Close {
		dAtA[i] = 0x8
		i++
		if m.Close {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *C2SViewOtherHeroCaptainProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SViewOtherHeroCaptainProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HeroId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(len(m.HeroId)))
		i += copy(dAtA[i:], m.HeroId)
	}
	if m.CaptainId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.CaptainId))
	}
	return i, nil
}

func (m *S2CViewOtherHeroCaptainProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CViewOtherHeroCaptainProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HeroId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(len(m.HeroId)))
		i += copy(dAtA[i:], m.HeroId)
	}
	if len(m.HeroName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(len(m.HeroName)))
		i += copy(dAtA[i:], m.HeroName)
	}
	if len(m.Captain) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(len(m.Captain)))
		i += copy(dAtA[i:], m.Captain)
	}
	return i, nil
}

func (m *C2SCaptainBornProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCaptainBornProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CaptainId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.CaptainId))
	}
	return i, nil
}

func (m *S2CCaptainBornProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCaptainBornProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Captain) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(len(m.Captain)))
		i += copy(dAtA[i:], m.Captain)
	}
	return i, nil
}

func (m *C2SCaptainUpstarProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCaptainUpstarProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CaptainId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.CaptainId))
	}
	return i, nil
}

func (m *S2CCaptainUpstarProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCaptainUpstarProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Star != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Star))
	}
	if m.CaptainId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.CaptainId))
	}
	return i, nil
}

func (m *C2SCaptainExchangeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCaptainExchangeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Cap1Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Cap1Id))
	}
	if m.Cap2Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Cap2Id))
	}
	return i, nil
}

func (m *S2CCaptainExchangeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCaptainExchangeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Cap1) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(len(m.Cap1)))
		i += copy(dAtA[i:], m.Cap1)
	}
	if len(m.Cap2) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(len(m.Cap2)))
		i += copy(dAtA[i:], m.Cap2)
	}
	return i, nil
}

func (m *C2SActivateCaptainFriendshipProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SActivateCaptainFriendshipProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *S2CActivateCaptainFriendshipProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CActivateCaptainFriendshipProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *S2CShowPrizeCaptainProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CShowPrizeCaptainProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Captain != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.Captain))
	}
	if m.Exist {
		dAtA[i] = 0x10
		i++
		if m.Exist {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *C2SNoticeOfficialHasViewedProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SNoticeOfficialHasViewedProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OfficialId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.OfficialId))
	}
	if m.OfficialIdx != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.OfficialIdx))
	}
	return i, nil
}

func (m *S2CNoticeOfficialHasViewedProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CNoticeOfficialHasViewedProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OfficialId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.OfficialId))
	}
	if m.OfficialIdx != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMilitary(dAtA, i, uint64(m.OfficialIdx))
	}
	return i, nil
}

func encodeFixed64Military(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Military(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintMilitary(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *S2CUpdateSoldierCapcityProto) Size() (n int) {
	var l int
	_ = l
	if m.SoldierCapcity != 0 {
		n += 1 + sovMilitary(uint64(m.SoldierCapcity))
	}
	if m.WoundedSoldierCapcity != 0 {
		n += 1 + sovMilitary(uint64(m.WoundedSoldierCapcity))
	}
	if m.NewSoldierCapcity != 0 {
		n += 1 + sovMilitary(uint64(m.NewSoldierCapcity))
	}
	if m.NewSoldierOutput != 0 {
		n += 1 + sovMilitary(uint64(m.NewSoldierOutput))
	}
	if m.NewRecruitSoldierCount != 0 {
		n += 1 + sovMilitary(uint64(m.NewRecruitSoldierCount))
	}
	return n
}

func (m *C2SRecruitSoldierProto) Size() (n int) {
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovMilitary(uint64(m.Count))
	}
	return n
}

func (m *S2CRecruitSoldierProto) Size() (n int) {
	var l int
	_ = l
	if m.NewSoldier != 0 {
		n += 1 + sovMilitary(uint64(m.NewSoldier))
	}
	if m.FreeSoldier != 0 {
		n += 1 + sovMilitary(uint64(m.FreeSoldier))
	}
	return n
}

func (m *C2SRecruitSoldierV2Proto) Size() (n int) {
	var l int
	_ = l
	if m.All {
		n += 2
	}
	return n
}

func (m *S2CRecruitSoldierV2Proto) Size() (n int) {
	var l int
	_ = l
	if m.AddSoldier != 0 {
		n += 1 + sovMilitary(uint64(m.AddSoldier))
	}
	return n
}

func (m *S2CAutoRecoverSoldierProto) Size() (n int) {
	var l int
	_ = l
	if m.FreeSoldier != 0 {
		n += 1 + sovMilitary(uint64(m.FreeSoldier))
	}
	if len(m.CaptainId) > 0 {
		for _, e := range m.CaptainId {
			n += 1 + sovMilitary(uint64(e))
		}
	}
	if len(m.CaptainSoldierCount) > 0 {
		for _, e := range m.CaptainSoldierCount {
			n += 1 + sovMilitary(uint64(e))
		}
	}
	return n
}

func (m *S2CRecruitSoldierTimesChangedProto) Size() (n int) {
	var l int
	_ = l
	if m.StartRecoveryTime != 0 {
		n += 1 + sovMilitary(uint64(m.StartRecoveryTime))
	}
	return n
}

func (m *S2CAddWoundedSoldierProto) Size() (n int) {
	var l int
	_ = l
	if m.ToAdd != 0 {
		n += 1 + sovMilitary(uint64(m.ToAdd))
	}
	if m.Total != 0 {
		n += 1 + sovMilitary(uint64(m.Total))
	}
	return n
}

func (m *C2SHealWoundedSoldierProto) Size() (n int) {
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovMilitary(uint64(m.Count))
	}
	return n
}

func (m *S2CHealWoundedSoldierProto) Size() (n int) {
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovMilitary(uint64(m.Count))
	}
	return n
}

func (m *C2SCaptainChangeSoldierProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMilitary(uint64(m.Id))
	}
	if m.Count != 0 {
		n += 1 + sovMilitary(uint64(m.Count))
	}
	return n
}

func (m *S2CCaptainChangeSoldierProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMilitary(uint64(m.Id))
	}
	if m.Soldier != 0 {
		n += 1 + sovMilitary(uint64(m.Soldier))
	}
	if m.FightAmount != 0 {
		n += 1 + sovMilitary(uint64(m.FightAmount))
	}
	if m.FreeSoldier != 0 {
		n += 1 + sovMilitary(uint64(m.FreeSoldier))
	}
	return n
}

func (m *C2SCaptainFullSoldierProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Id) > 0 {
		for _, e := range m.Id {
			n += 1 + sovMilitary(uint64(e))
		}
	}
	return n
}

func (m *S2CCaptainFullSoldierProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Id) > 0 {
		for _, e := range m.Id {
			n += 1 + sovMilitary(uint64(e))
		}
	}
	if len(m.Soldier) > 0 {
		for _, e := range m.Soldier {
			n += 1 + sovMilitary(uint64(e))
		}
	}
	if len(m.FightAmount) > 0 {
		for _, e := range m.FightAmount {
			n += 1 + sovMilitary(uint64(e))
		}
	}
	if m.FreeSoldier != 0 {
		n += 1 + sovMilitary(uint64(m.FreeSoldier))
	}
	return n
}

func (m *S2CUpdateFreeSoldierProto) Size() (n int) {
	var l int
	_ = l
	if m.StartTime != 0 {
		n += 1 + sovMilitary(uint64(m.StartTime))
	}
	if m.Capcity != 0 {
		n += 1 + sovMilitary(uint64(m.Capcity))
	}
	if m.Output != 0 {
		n += 1 + sovMilitary(uint64(m.Output))
	}
	if m.Overflow != 0 {
		n += 1 + sovMilitary(uint64(m.Overflow))
	}
	return n
}

func (m *S2CForceAddSoldierProto) Size() (n int) {
	var l int
	_ = l
	if m.Times != 0 {
		n += 1 + sovMilitary(uint64(m.Times))
	}
	return n
}

func (m *S2CCaptainChangeDataProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMilitary(uint64(m.Id))
	}
	if m.Soldier != 0 {
		n += 1 + sovMilitary(uint64(m.Soldier))
	}
	if m.MaxSoldier != 0 {
		n += 1 + sovMilitary(uint64(m.MaxSoldier))
	}
	if m.FightAmount != 0 {
		n += 1 + sovMilitary(uint64(m.FightAmount))
	}
	return n
}

func (m *C2SFightProto) Size() (n int) {
	var l int
	_ = l
	if m.Wall {
		n += 2
	}
	return n
}

func (m *S2CFightProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Replay)
	if l > 0 {
		n += 1 + l + sovMilitary(uint64(l))
	}
	return n
}

func (m *S2CMultiFightProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Replay)
	if l > 0 {
		n += 1 + l + sovMilitary(uint64(l))
	}
	return n
}

func (m *C2SFightxProto) Size() (n int) {
	var l int
	_ = l
	if m.Wall {
		n += 2
	}
	if len(m.Attacker) > 0 {
		for _, e := range m.Attacker {
			n += 1 + sovMilitary(uint64(e))
		}
	}
	if len(m.Defenser) > 0 {
		for _, e := range m.Defenser {
			n += 1 + sovMilitary(uint64(e))
		}
	}
	return n
}

func (m *S2CFightxProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Replay)
	if l > 0 {
		n += 1 + l + sovMilitary(uint64(l))
	}
	return n
}

func (m *S2CUpgradeSoldierLevelProto) Size() (n int) {
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovMilitary(uint64(m.Level))
	}
	return n
}

func (m *S2CRecruitCaptainV2Proto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Captain)
	if l > 0 {
		n += 1 + l + sovMilitary(uint64(l))
	}
	if m.CaptainIndex != 0 {
		n += 1 + sovMilitary(uint64(m.CaptainIndex))
	}
	return n
}

func (m *S2CRandomCaptainHeadProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Head) > 0 {
		for _, s := range m.Head {
			l = len(s)
			n += 1 + l + sovMilitary(uint64(l))
		}
	}
	return n
}

func (m *C2SRecruitCaptainSeekerProto) Size() (n int) {
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovMilitary(uint64(m.Index))
	}
	l = len(m.Head)
	if l > 0 {
		n += 1 + l + sovMilitary(uint64(l))
	}
	return n
}

func (m *S2CRecruitCaptainSeekerProto) Size() (n int) {
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovMilitary(uint64(m.Index))
	}
	l = len(m.Captain)
	if l > 0 {
		n += 1 + l + sovMilitary(uint64(l))
	}
	if m.CaptainIndex != 0 {
		n += 1 + sovMilitary(uint64(m.CaptainIndex))
	}
	return n
}

func (m *C2SSetDefenseTroopProto) Size() (n int) {
	var l int
	_ = l
	if m.IsTent {
		n += 2
	}
	if m.TroopIndex != 0 {
		n += 1 + sovMilitary(uint64(m.TroopIndex))
	}
	return n
}

func (m *S2CSetDefenseTroopProto) Size() (n int) {
	var l int
	_ = l
	if m.IsTent {
		n += 2
	}
	if m.TroopIndex != 0 {
		n += 1 + sovMilitary(uint64(m.TroopIndex))
	}
	return n
}

func (m *S2CSetDenfeseTroopDefeatedMailProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Mail)
	if l > 0 {
		n += 1 + l + sovMilitary(uint64(l))
	}
	if m.IsTent {
		n += 2
	}
	return n
}

func (m *C2SClearDefenseTroopDefeatedMailProto) Size() (n int) {
	var l int
	_ = l
	if m.IsTent {
		n += 2
	}
	return n
}

func (m *S2CClearDefenseTroopDefeatedMailProto) Size() (n int) {
	var l int
	_ = l
	if m.IsTent {
		n += 2
	}
	return n
}

func (m *C2SSetDefenserAutoFullSoldierProto) Size() (n int) {
	var l int
	_ = l
	if m.Dont {
		n += 2
	}
	return n
}

func (m *S2CSetDefenserAutoFullSoldierProto) Size() (n int) {
	var l int
	_ = l
	if m.Dont {
		n += 2
	}
	return n
}

func (m *C2SUseCopyDefenserGoodsProto) Size() (n int) {
	var l int
	_ = l
	if m.Goods != 0 {
		n += 1 + sovMilitary(uint64(m.Goods))
	}
	if m.AutoBuy {
		n += 2
	}
	if m.TroopIndex != 0 {
		n += 1 + sovMilitary(uint64(m.TroopIndex))
	}
	return n
}

func (m *S2CUseCopyDefenserGoodsProto) Size() (n int) {
	var l int
	_ = l
	if m.TroopIndex != 0 {
		n += 1 + sovMilitary(uint64(m.TroopIndex))
	}
	if m.EndTime != 0 {
		n += 1 + sovMilitary(uint64(m.EndTime))
	}
	return n
}

func (m *S2CUpdateCopyDefenserProto) Size() (n int) {
	var l int
	_ = l
	if m.Soldier != 0 {
		n += 1 + sovMilitary(uint64(m.Soldier))
	}
	if m.TotalSoldier != 0 {
		n += 1 + sovMilitary(uint64(m.TotalSoldier))
	}
	if m.FightAmount != 0 {
		n += 1 + sovMilitary(uint64(m.FightAmount))
	}
	return n
}

func (m *C2SSellSeekCaptainProto) Size() (n int) {
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovMilitary(uint64(m.Index))
	}
	return n
}

func (m *S2CSellSeekCaptainProto) Size() (n int) {
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovMilitary(uint64(m.Index))
	}
	return n
}

func (m *C2SSetMultiCaptainIndexProto) Size() (n int) {
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovMilitary(uint64(m.Index))
	}
	if len(m.Id) > 0 {
		for _, e := range m.Id {
			n += 1 + sovMilitary(uint64(e))
		}
	}
	if len(m.XIndex) > 0 {
		for _, e := range m.XIndex {
			n += 1 + sovMilitary(uint64(e))
		}
	}
	return n
}

func (m *S2CSetMultiCaptainIndexProto) Size() (n int) {
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovMilitary(uint64(m.Index))
	}
	if len(m.Id) > 0 {
		for _, e := range m.Id {
			n += 1 + sovMilitary(uint64(e))
		}
	}
	if len(m.XIndex) > 0 {
		for _, e := range m.XIndex {
			n += 1 + sovMilitary(uint64(e))
		}
	}
	return n
}

func (m *C2SSetPveCaptainProto) Size() (n int) {
	var l int
	_ = l
	if m.PveType != 0 {
		n += 1 + sovMilitary(uint64(m.PveType))
	}
	if len(m.Id) > 0 {
		for _, e := range m.Id {
			n += 1 + sovMilitary(uint64(e))
		}
	}
	if len(m.XIndex) > 0 {
		for _, e := range m.XIndex {
			n += 1 + sovMilitary(uint64(e))
		}
	}
	return n
}

func (m *S2CSetPveCaptainProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Troop)
	if l > 0 {
		n += 1 + l + sovMilitary(uint64(l))
	}
	return n
}

func (m *C2SFireCaptainProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMilitary(uint64(m.Id))
	}
	return n
}

func (m *S2CFireCaptainProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMilitary(uint64(m.Id))
	}
	return n
}

func (m *C2SCaptainRefinedProto) Size() (n int) {
	var l int
	_ = l
	if m.Captain != 0 {
		n += 1 + sovMilitary(uint64(m.Captain))
	}
	if len(m.GoodsId) > 0 {
		for _, e := range m.GoodsId {
			n += 1 + sovMilitary(uint64(e))
		}
	}
	if len(m.Count) > 0 {
		for _, e := range m.Count {
			n += 1 + sovMilitary(uint64(e))
		}
	}
	return n
}

func (m *S2CCaptainRefinedProto) Size() (n int) {
	var l int
	_ = l
	if m.Captain != 0 {
		n += 1 + sovMilitary(uint64(m.Captain))
	}
	if m.Exp != 0 {
		n += 1 + sovMilitary(uint64(m.Exp))
	}
	return n
}

func (m *C2SCaptainEnhanceProto) Size() (n int) {
	var l int
	_ = l
	if m.Captain != 0 {
		n += 1 + sovMilitary(uint64(m.Captain))
	}
	if len(m.GoodsId) > 0 {
		for _, e := range m.GoodsId {
			n += 1 + sovMilitary(uint64(e))
		}
	}
	if len(m.Count) > 0 {
		for _, e := range m.Count {
			n += 1 + sovMilitary(uint64(e))
		}
	}
	return n
}

func (m *S2CCaptainEnhanceProto) Size() (n int) {
	var l int
	_ = l
	if m.Captain != 0 {
		n += 1 + sovMilitary(uint64(m.Captain))
	}
	if m.Ability != 0 {
		n += 1 + sovMilitary(uint64(m.Ability))
	}
	if m.AbilityExp != 0 {
		n += 1 + sovMilitary(uint64(m.AbilityExp))
	}
	if m.Quality != 0 {
		n += 1 + sovMilitary(uint64(m.Quality))
	}
	return n
}

func (m *S2CCaptainRefinedUpgradeProto) Size() (n int) {
	var l int
	_ = l
	if m.Captain != 0 {
		n += 1 + sovMilitary(uint64(m.Captain))
	}
	if m.Exp != 0 {
		n += 1 + sovMilitary(uint64(m.Exp))
	}
	if m.Ability != 0 {
		n += 1 + sovMilitary(uint64(m.Ability))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMilitary(uint64(l))
	}
	if m.Quality != 0 {
		n += 1 + sovMilitary(uint64(m.Quality))
	}
	return n
}

func (m *S2CUpdateAbilityExpProto) Size() (n int) {
	var l int
	_ = l
	if m.Captain != 0 {
		n += 1 + sovMilitary(uint64(m.Captain))
	}
	if m.Exp != 0 {
		n += 1 + sovMilitary(uint64(m.Exp))
	}
	return n
}

func (m *S2CUpdateCaptainExpProto) Size() (n int) {
	var l int
	_ = l
	if m.Captain != 0 {
		n += 1 + sovMilitary(uint64(m.Captain))
	}
	if m.Exp != 0 {
		n += 1 + sovMilitary(uint64(m.Exp))
	}
	return n
}

func (m *S2CUpdateCaptainLevelProto) Size() (n int) {
	var l int
	_ = l
	if m.Captain != 0 {
		n += 1 + sovMilitary(uint64(m.Captain))
	}
	if m.Exp != 0 {
		n += 1 + sovMilitary(uint64(m.Exp))
	}
	if m.Level != 0 {
		n += 1 + sovMilitary(uint64(m.Level))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMilitary(uint64(l))
	}
	if m.SoldierCapcity != 0 {
		n += 1 + sovMilitary(uint64(m.SoldierCapcity))
	}
	return n
}

func (m *S2CCaptainLevelupProto) Size() (n int) {
	var l int
	_ = l
	if m.Captain != 0 {
		n += 1 + sovMilitary(uint64(m.Captain))
	}
	if m.Exp != 0 {
		n += 1 + sovMilitary(uint64(m.Exp))
	}
	if m.Level != 0 {
		n += 1 + sovMilitary(uint64(m.Level))
	}
	if m.SoldierCapcity != 0 {
		n += 1 + sovMilitary(uint64(m.SoldierCapcity))
	}
	return n
}

func (m *S2CUpdateCaptainStatProto) Size() (n int) {
	var l int
	_ = l
	if m.Captain != 0 {
		n += 1 + sovMilitary(uint64(m.Captain))
	}
	l = len(m.TotalStat)
	if l > 0 {
		n += 1 + l + sovMilitary(uint64(l))
	}
	if m.FightAmount != 0 {
		n += 1 + sovMilitary(uint64(m.FightAmount))
	}
	if m.FullFightAmount != 0 {
		n += 1 + sovMilitary(uint64(m.FullFightAmount))
	}
	return n
}

func (m *C2SChangeCaptainNameProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMilitary(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMilitary(uint64(l))
	}
	return n
}

func (m *S2CChangeCaptainNameProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMilitary(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMilitary(uint64(l))
	}
	return n
}

func (m *C2SChangeCaptainRaceProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMilitary(uint64(m.Id))
	}
	if m.Race != 0 {
		n += 1 + sovMilitary(uint64(m.Race))
	}
	if m.Money {
		n += 2
	}
	return n
}

func (m *S2CChangeCaptainRaceProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMilitary(uint64(m.Id))
	}
	if m.Race != 0 {
		n += 1 + sovMilitary(uint64(m.Race))
	}
	if m.Cooldown != 0 {
		n += 1 + sovMilitary(uint64(m.Cooldown))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMilitary(uint64(l))
	}
	return n
}

func (m *C2SCaptainRebirthPreviewProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMilitary(uint64(m.Id))
	}
	return n
}

func (m *S2CCaptainRebirthPreviewProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMilitary(uint64(m.Id))
	}
	if m.RebirthLevel != 0 {
		n += 1 + sovMilitary(uint64(m.RebirthLevel))
	}
	if m.Quality != 0 {
		n += 1 + sovMilitary(uint64(m.Quality))
	}
	if m.Ability != 0 {
		n += 1 + sovMilitary(uint64(m.Ability))
	}
	if m.AbilityLimit != 0 {
		n += 1 + sovMilitary(uint64(m.AbilityLimit))
	}
	if m.TotalStat != 0 {
		n += 1 + sovMilitary(uint64(m.TotalStat))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMilitary(uint64(l))
	}
	if m.SoldierCapcity != 0 {
		n += 1 + sovMilitary(uint64(m.SoldierCapcity))
	}
	l = len(m.AddStat)
	if l > 0 {
		n += 1 + l + sovMilitary(uint64(l))
	}
	return n
}

func (m *S2CCaptainRebirthCdStartProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMilitary(uint64(m.Id))
	}
	if m.CdEndtime != 0 {
		n += 1 + sovMilitary(uint64(m.CdEndtime))
	}
	return n
}

func (m *C2SCaptainRebirthProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMilitary(uint64(m.Id))
	}
	if m.Miao {
		n += 2
	}
	return n
}

func (m *S2CCaptainRebirthProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMilitary(uint64(m.Id))
	}
	if m.RebirthLevel != 0 {
		n += 1 + sovMilitary(uint64(m.RebirthLevel))
	}
	if m.RebirthExp != 0 {
		n += 1 + sovMilitary(uint64(m.RebirthExp))
	}
	if m.Quality != 0 {
		n += 1 + sovMilitary(uint64(m.Quality))
	}
	if m.Ability != 0 {
		n += 1 + sovMilitary(uint64(m.Ability))
	}
	if m.AbilityExp != 0 {
		n += 1 + sovMilitary(uint64(m.AbilityExp))
	}
	if m.AbilityLimit != 0 {
		n += 1 + sovMilitary(uint64(m.AbilityLimit))
	}
	if m.Soldier != 0 {
		n += 1 + sovMilitary(uint64(m.Soldier))
	}
	if m.SoldierCapcity != 0 {
		n += 1 + sovMilitary(uint64(m.SoldierCapcity))
	}
	l = len(m.TotalStat)
	if l > 0 {
		n += 1 + l + sovMilitary(uint64(l))
	}
	if m.FightAmount != 0 {
		n += 1 + sovMilitary(uint64(m.FightAmount))
	}
	if m.FullFightAmount != 0 {
		n += 1 + sovMilitary(uint64(m.FullFightAmount))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMilitary(uint64(l))
	}
	return n
}

func (m *C2SCaptainProgressProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMilitary(uint64(m.Id))
	}
	if m.Miao {
		n += 2
	}
	return n
}

func (m *S2CCaptainProgressProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMilitary(uint64(m.Id))
	}
	if m.RebirthLevel != 0 {
		n += 1 + sovMilitary(uint64(m.RebirthLevel))
	}
	if m.RebirthExp != 0 {
		n += 1 + sovMilitary(uint64(m.RebirthExp))
	}
	if m.Quality != 0 {
		n += 1 + sovMilitary(uint64(m.Quality))
	}
	if m.Ability != 0 {
		n += 1 + sovMilitary(uint64(m.Ability))
	}
	if m.AbilityExp != 0 {
		n += 1 + sovMilitary(uint64(m.AbilityExp))
	}
	if m.AbilityLimit != 0 {
		n += 1 + sovMilitary(uint64(m.AbilityLimit))
	}
	if m.Soldier != 0 {
		n += 1 + sovMilitary(uint64(m.Soldier))
	}
	if m.SoldierCapcity != 0 {
		n += 1 + sovMilitary(uint64(m.SoldierCapcity))
	}
	l = len(m.TotalStat)
	if l > 0 {
		n += 1 + l + sovMilitary(uint64(l))
	}
	if m.FightAmount != 0 {
		n += 1 + sovMilitary(uint64(m.FightAmount))
	}
	if m.FullFightAmount != 0 {
		n += 1 + sovMilitary(uint64(m.FullFightAmount))
	}
	return n
}

func (m *C2SCaptainRebirthMiaoCdProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMilitary(uint64(m.Id))
	}
	return n
}

func (m *S2CCaptainRebirthMiaoCdProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMilitary(uint64(m.Id))
	}
	return n
}

func (m *S2CCollectCaptainTrainingExpProto) Size() (n int) {
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovMilitary(uint64(m.Time))
	}
	return n
}

func (m *S2CCaptainTrainExpProto) Size() (n int) {
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovMilitary(uint64(m.Time))
	}
	return n
}

func (m *S2CUpdateTrainingProto) Size() (n int) {
	var l int
	_ = l
	if m.Gst != 0 {
		n += 1 + sovMilitary(uint64(m.Gst))
	}
	if m.Cst != 0 {
		n += 1 + sovMilitary(uint64(m.Cst))
	}
	if m.ExpPerHour != 0 {
		n += 1 + sovMilitary(uint64(m.ExpPerHour))
	}
	if m.Coef != 0 {
		n += 1 + sovMilitary(uint64(m.Coef))
	}
	return n
}

func (m *S2CCaptainCanCollectExpProto) Size() (n int) {
	var l int
	_ = l
	if m.Exp != 0 {
		n += 1 + sovMilitary(uint64(m.Exp))
	}
	if len(m.BuffCoef) > 0 {
		for _, e := range m.BuffCoef {
			n += 1 + sovMilitary(uint64(e))
		}
	}
	if m.MaxDuration != 0 {
		n += 1 + sovMilitary(uint64(m.MaxDuration))
	}
	return n
}

func (m *C2SUseTrainingExpGoodsProto) Size() (n int) {
	var l int
	_ = l
	if m.CaptainId != 0 {
		n += 1 + sovMilitary(uint64(m.CaptainId))
	}
	if m.GoodsId != 0 {
		n += 1 + sovMilitary(uint64(m.GoodsId))
	}
	if m.Count != 0 {
		n += 1 + sovMilitary(uint64(m.Count))
	}
	return n
}

func (m *S2CUseTrainingExpGoodsProto) Size() (n int) {
	var l int
	_ = l
	if m.CaptainId != 0 {
		n += 1 + sovMilitary(uint64(m.CaptainId))
	}
	if m.GoodsId != 0 {
		n += 1 + sovMilitary(uint64(m.GoodsId))
	}
	if m.Upgrade {
		n += 2
	}
	if m.Count != 0 {
		n += 1 + sovMilitary(uint64(m.Count))
	}
	return n
}

func (m *C2SUseLevelExpGoodsProto) Size() (n int) {
	var l int
	_ = l
	if m.CaptainId != 0 {
		n += 1 + sovMilitary(uint64(m.CaptainId))
	}
	if m.GoodsId != 0 {
		n += 1 + sovMilitary(uint64(m.GoodsId))
	}
	if m.Count != 0 {
		n += 1 + sovMilitary(uint64(m.Count))
	}
	return n
}

func (m *S2CUseLevelExpGoodsProto) Size() (n int) {
	var l int
	_ = l
	if m.CaptainId != 0 {
		n += 1 + sovMilitary(uint64(m.CaptainId))
	}
	if m.GoodsId != 0 {
		n += 1 + sovMilitary(uint64(m.GoodsId))
	}
	if m.Count != 0 {
		n += 1 + sovMilitary(uint64(m.Count))
	}
	if m.Upgrade {
		n += 2
	}
	return n
}

func (m *C2SUseLevelExpGoods2Proto) Size() (n int) {
	var l int
	_ = l
	if m.Captain != 0 {
		n += 1 + sovMilitary(uint64(m.Captain))
	}
	if m.GoodsId != 0 {
		n += 1 + sovMilitary(uint64(m.GoodsId))
	}
	return n
}

func (m *S2CUseLevelExpGoods2Proto) Size() (n int) {
	var l int
	_ = l
	if m.Captain != 0 {
		n += 1 + sovMilitary(uint64(m.Captain))
	}
	if m.Upgrade {
		n += 2
	}
	if m.Level != 0 {
		n += 1 + sovMilitary(uint64(m.Level))
	}
	if m.Exp != 0 {
		n += 1 + sovMilitary(uint64(m.Exp))
	}
	return n
}

func (m *C2SAutoUseGoodsUntilCaptainLevelupProto) Size() (n int) {
	var l int
	_ = l
	if m.Captain != 0 {
		n += 1 + sovMilitary(uint64(m.Captain))
	}
	return n
}

func (m *S2CAutoUseGoodsUntilCaptainLevelupProto) Size() (n int) {
	var l int
	_ = l
	if m.Captain != 0 {
		n += 1 + sovMilitary(uint64(m.Captain))
	}
	if m.Level != 0 {
		n += 1 + sovMilitary(uint64(m.Level))
	}
	if m.Exp != 0 {
		n += 1 + sovMilitary(uint64(m.Exp))
	}
	if m.Upgrade {
		n += 2
	}
	return n
}

func (m *S2CGetMaxRecruitSoldierProto) Size() (n int) {
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovMilitary(uint64(m.Count))
	}
	return n
}

func (m *S2CGetMaxHealSoldierProto) Size() (n int) {
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovMilitary(uint64(m.Count))
	}
	return n
}

func (m *S2CJiuGuanConsultProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Prize)
	if l > 0 {
		n += 1 + l + sovMilitary(uint64(l))
	}
	if m.CritMulti != 0 {
		n += 1 + sovMilitary(uint64(m.CritMulti))
	}
	if m.CritMultiImgIndex != 0 {
		n += 1 + sovMilitary(uint64(m.CritMultiImgIndex))
	}
	if m.TutorIndex != 0 {
		n += 1 + sovMilitary(uint64(m.TutorIndex))
	}
	if m.OriginalIndex != 0 {
		n += 1 + sovMilitary(uint64(m.OriginalIndex))
	}
	return n
}

func (m *S2CJiuGuanConsultBroadcastProto) Size() (n int) {
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovMilitary(uint64(m.Level))
	}
	if m.CritMulti != 0 {
		n += 1 + sovMilitary(uint64(m.CritMulti))
	}
	l = len(m.HeroName)
	if l > 0 {
		n += 1 + l + sovMilitary(uint64(l))
	}
	return n
}

func (m *S2CJiuGuanTimesChangedProto) Size() (n int) {
	var l int
	_ = l
	if m.Times != 0 {
		n += 1 + sovMilitary(uint64(m.Times))
	}
	if m.NextTime != 0 {
		n += 1 + sovMilitary(uint64(m.NextTime))
	}
	return n
}

func (m *C2SJiuGuanRefreshProto) Size() (n int) {
	var l int
	_ = l
	if m.AutoMax {
		n += 2
	}
	return n
}

func (m *S2CJiuGuanRefreshProto) Size() (n int) {
	var l int
	_ = l
	if m.TutorIndex != 0 {
		n += 1 + sovMilitary(uint64(m.TutorIndex))
	}
	if m.RefreshTimes != 0 {
		n += 1 + sovMilitary(uint64(m.RefreshTimes))
	}
	if m.AutoMax {
		n += 2
	}
	return n
}

func (m *C2SUnlockCaptainRestraintSpellProto) Size() (n int) {
	var l int
	_ = l
	if m.Captain != 0 {
		n += 1 + sovMilitary(uint64(m.Captain))
	}
	return n
}

func (m *S2CUnlockCaptainRestraintSpellProto) Size() (n int) {
	var l int
	_ = l
	if m.Captain != 0 {
		n += 1 + sovMilitary(uint64(m.Captain))
	}
	return n
}

func (m *S2CNewTroopsProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Troop)
	if l > 0 {
		n += 1 + l + sovMilitary(uint64(l))
	}
	return n
}

func (m *C2SGetCaptainStatDetailsProto) Size() (n int) {
	var l int
	_ = l
	if m.Captain != 0 {
		n += 1 + sovMilitary(uint64(m.Captain))
	}
	return n
}

func (m *S2CGetCaptainStatDetailsProto) Size() (n int) {
	var l int
	_ = l
	if m.Captain != 0 {
		n += 1 + sovMilitary(uint64(m.Captain))
	}
	l = len(m.Stats)
	if l > 0 {
		n += 1 + l + sovMilitary(uint64(l))
	}
	return n
}

func (m *C2SCaptainStatDetailsProto) Size() (n int) {
	var l int
	_ = l
	if m.Captain != 0 {
		n += 1 + sovMilitary(uint64(m.Captain))
	}
	return n
}

func (m *S2CCaptainStatDetailsProto) Size() (n int) {
	var l int
	_ = l
	if m.Captain != 0 {
		n += 1 + sovMilitary(uint64(m.Captain))
	}
	l = len(m.Stats)
	if l > 0 {
		n += 1 + l + sovMilitary(uint64(l))
	}
	return n
}

func (m *S2CUpdateTroopFightAmountProto) Size() (n int) {
	var l int
	_ = l
	if len(m.TroopIndex) > 0 {
		for _, e := range m.TroopIndex {
			n += 1 + sovMilitary(uint64(e))
		}
	}
	if len(m.StartValue) > 0 {
		for _, e := range m.StartValue {
			n += 1 + sovMilitary(uint64(e))
		}
	}
	if len(m.EndValue) > 0 {
		for _, e := range m.EndValue {
			n += 1 + sovMilitary(uint64(e))
		}
	}
	return n
}

func (m *C2SUpdateCaptainOfficialProto) Size() (n int) {
	var l int
	_ = l
	if m.Captain != 0 {
		n += 1 + sovMilitary(uint64(m.Captain))
	}
	if m.Official != 0 {
		n += 1 + sovMilitary(uint64(m.Official))
	}
	return n
}

func (m *S2CUpdateCaptainOfficialProto) Size() (n int) {
	var l int
	_ = l
	if m.Captain != 0 {
		n += 1 + sovMilitary(uint64(m.Captain))
	}
	if m.Official != 0 {
		n += 1 + sovMilitary(uint64(m.Official))
	}
	return n
}

func (m *C2SSetCaptainOfficialProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Captain) > 0 {
		for _, e := range m.Captain {
			n += 1 + sovMilitary(uint64(e))
		}
	}
	if len(m.Official) > 0 {
		for _, e := range m.Official {
			n += 1 + sovMilitary(uint64(e))
		}
	}
	if len(m.OfficialIdx) > 0 {
		for _, e := range m.OfficialIdx {
			n += 1 + sovMilitary(uint64(e))
		}
	}
	return n
}

func (m *S2CSetCaptainOfficialProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Captain) > 0 {
		for _, e := range m.Captain {
			n += 1 + sovMilitary(uint64(e))
		}
	}
	if len(m.Official) > 0 {
		for _, e := range m.Official {
			n += 1 + sovMilitary(uint64(e))
		}
	}
	if len(m.OfficialIdx) > 0 {
		for _, e := range m.OfficialIdx {
			n += 1 + sovMilitary(uint64(e))
		}
	}
	return n
}

func (m *C2SLeaveCaptainOfficialProto) Size() (n int) {
	var l int
	_ = l
	if m.Captain != 0 {
		n += 1 + sovMilitary(uint64(m.Captain))
	}
	return n
}

func (m *S2CLeaveCaptainOfficialProto) Size() (n int) {
	var l int
	_ = l
	if m.Captain != 0 {
		n += 1 + sovMilitary(uint64(m.Captain))
	}
	return n
}

func (m *S2CAddGongxunProto) Size() (n int) {
	var l int
	_ = l
	if m.Captain != 0 {
		n += 1 + sovMilitary(uint64(m.Captain))
	}
	if m.NewGongxun != 0 {
		n += 1 + sovMilitary(uint64(m.NewGongxun))
	}
	return n
}

func (m *C2SUseGongXunGoodsProto) Size() (n int) {
	var l int
	_ = l
	if m.Captain != 0 {
		n += 1 + sovMilitary(uint64(m.Captain))
	}
	if len(m.GoodsId) > 0 {
		for _, e := range m.GoodsId {
			n += 1 + sovMilitary(uint64(e))
		}
	}
	if len(m.Count) > 0 {
		for _, e := range m.Count {
			n += 1 + sovMilitary(uint64(e))
		}
	}
	return n
}

func (m *S2CUseGongXunGoodsProto) Size() (n int) {
	var l int
	_ = l
	if m.Captain != 0 {
		n += 1 + sovMilitary(uint64(m.Captain))
	}
	if m.NewGongxun != 0 {
		n += 1 + sovMilitary(uint64(m.NewGongxun))
	}
	return n
}

func (m *C2SUseGongxunGoodsProto) Size() (n int) {
	var l int
	_ = l
	if m.Captain != 0 {
		n += 1 + sovMilitary(uint64(m.Captain))
	}
	if len(m.GoodsId) > 0 {
		for _, e := range m.GoodsId {
			n += 1 + sovMilitary(uint64(e))
		}
	}
	if len(m.Count) > 0 {
		for _, e := range m.Count {
			n += 1 + sovMilitary(uint64(e))
		}
	}
	return n
}

func (m *S2CUseGongxunGoodsProto) Size() (n int) {
	var l int
	_ = l
	if m.Captain != 0 {
		n += 1 + sovMilitary(uint64(m.Captain))
	}
	if m.NewGongxun != 0 {
		n += 1 + sovMilitary(uint64(m.NewGongxun))
	}
	return n
}

func (m *C2SCloseFightGuideProto) Size() (n int) {
	var l int
	_ = l
	if m.Close {
		n += 2
	}
	return n
}

func (m *S2CCloseFightGuideProto) Size() (n int) {
	var l int
	_ = l
	if m.Close {
		n += 2
	}
	return n
}

func (m *C2SViewOtherHeroCaptainProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.HeroId)
	if l > 0 {
		n += 1 + l + sovMilitary(uint64(l))
	}
	if m.CaptainId != 0 {
		n += 1 + sovMilitary(uint64(m.CaptainId))
	}
	return n
}

func (m *S2CViewOtherHeroCaptainProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.HeroId)
	if l > 0 {
		n += 1 + l + sovMilitary(uint64(l))
	}
	l = len(m.HeroName)
	if l > 0 {
		n += 1 + l + sovMilitary(uint64(l))
	}
	l = len(m.Captain)
	if l > 0 {
		n += 1 + l + sovMilitary(uint64(l))
	}
	return n
}

func (m *C2SCaptainBornProto) Size() (n int) {
	var l int
	_ = l
	if m.CaptainId != 0 {
		n += 1 + sovMilitary(uint64(m.CaptainId))
	}
	return n
}

func (m *S2CCaptainBornProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Captain)
	if l > 0 {
		n += 1 + l + sovMilitary(uint64(l))
	}
	return n
}

func (m *C2SCaptainUpstarProto) Size() (n int) {
	var l int
	_ = l
	if m.CaptainId != 0 {
		n += 1 + sovMilitary(uint64(m.CaptainId))
	}
	return n
}

func (m *S2CCaptainUpstarProto) Size() (n int) {
	var l int
	_ = l
	if m.Star != 0 {
		n += 1 + sovMilitary(uint64(m.Star))
	}
	if m.CaptainId != 0 {
		n += 1 + sovMilitary(uint64(m.CaptainId))
	}
	return n
}

func (m *C2SCaptainExchangeProto) Size() (n int) {
	var l int
	_ = l
	if m.Cap1Id != 0 {
		n += 1 + sovMilitary(uint64(m.Cap1Id))
	}
	if m.Cap2Id != 0 {
		n += 1 + sovMilitary(uint64(m.Cap2Id))
	}
	return n
}

func (m *S2CCaptainExchangeProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Cap1)
	if l > 0 {
		n += 1 + l + sovMilitary(uint64(l))
	}
	l = len(m.Cap2)
	if l > 0 {
		n += 1 + l + sovMilitary(uint64(l))
	}
	return n
}

func (m *C2SActivateCaptainFriendshipProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMilitary(uint64(m.Id))
	}
	return n
}

func (m *S2CActivateCaptainFriendshipProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMilitary(uint64(m.Id))
	}
	return n
}

func (m *S2CShowPrizeCaptainProto) Size() (n int) {
	var l int
	_ = l
	if m.Captain != 0 {
		n += 1 + sovMilitary(uint64(m.Captain))
	}
	if m.Exist {
		n += 2
	}
	return n
}

func (m *C2SNoticeOfficialHasViewedProto) Size() (n int) {
	var l int
	_ = l
	if m.OfficialId != 0 {
		n += 1 + sovMilitary(uint64(m.OfficialId))
	}
	if m.OfficialIdx != 0 {
		n += 1 + sovMilitary(uint64(m.OfficialIdx))
	}
	return n
}

func (m *S2CNoticeOfficialHasViewedProto) Size() (n int) {
	var l int
	_ = l
	if m.OfficialId != 0 {
		n += 1 + sovMilitary(uint64(m.OfficialId))
	}
	if m.OfficialIdx != 0 {
		n += 1 + sovMilitary(uint64(m.OfficialIdx))
	}
	return n
}

func sovMilitary(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMilitary(x uint64) (n int) {
	return sovMilitary(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *S2CUpdateSoldierCapcityProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateSoldierCapcityProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateSoldierCapcityProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoldierCapcity", wireType)
			}
			m.SoldierCapcity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SoldierCapcity |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WoundedSoldierCapcity", wireType)
			}
			m.WoundedSoldierCapcity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WoundedSoldierCapcity |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewSoldierCapcity", wireType)
			}
			m.NewSoldierCapcity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewSoldierCapcity |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewSoldierOutput", wireType)
			}
			m.NewSoldierOutput = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewSoldierOutput |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewRecruitSoldierCount", wireType)
			}
			m.NewRecruitSoldierCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewRecruitSoldierCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SRecruitSoldierProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SRecruitSoldierProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SRecruitSoldierProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CRecruitSoldierProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CRecruitSoldierProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CRecruitSoldierProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewSoldier", wireType)
			}
			m.NewSoldier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewSoldier |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreeSoldier", wireType)
			}
			m.FreeSoldier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FreeSoldier |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SRecruitSoldierV2Proto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SRecruitSoldierV2Proto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SRecruitSoldierV2Proto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field All", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.All = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CRecruitSoldierV2Proto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CRecruitSoldierV2Proto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CRecruitSoldierV2Proto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddSoldier", wireType)
			}
			m.AddSoldier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddSoldier |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CAutoRecoverSoldierProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CAutoRecoverSoldierProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CAutoRecoverSoldierProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreeSoldier", wireType)
			}
			m.FreeSoldier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FreeSoldier |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CaptainId = append(m.CaptainId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMilitary
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMilitary
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CaptainId = append(m.CaptainId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainId", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CaptainSoldierCount = append(m.CaptainSoldierCount, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMilitary
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMilitary
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CaptainSoldierCount = append(m.CaptainSoldierCount, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainSoldierCount", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CRecruitSoldierTimesChangedProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CRecruitSoldierTimesChangedProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CRecruitSoldierTimesChangedProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartRecoveryTime", wireType)
			}
			m.StartRecoveryTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartRecoveryTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CAddWoundedSoldierProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CAddWoundedSoldierProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CAddWoundedSoldierProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAdd", wireType)
			}
			m.ToAdd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToAdd |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SHealWoundedSoldierProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SHealWoundedSoldierProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SHealWoundedSoldierProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CHealWoundedSoldierProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CHealWoundedSoldierProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CHealWoundedSoldierProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SCaptainChangeSoldierProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCaptainChangeSoldierProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCaptainChangeSoldierProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCaptainChangeSoldierProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCaptainChangeSoldierProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCaptainChangeSoldierProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Soldier", wireType)
			}
			m.Soldier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Soldier |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FightAmount", wireType)
			}
			m.FightAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FightAmount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreeSoldier", wireType)
			}
			m.FreeSoldier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FreeSoldier |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SCaptainFullSoldierProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCaptainFullSoldierProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCaptainFullSoldierProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMilitary
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMilitary
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCaptainFullSoldierProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCaptainFullSoldierProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCaptainFullSoldierProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMilitary
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMilitary
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Soldier = append(m.Soldier, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMilitary
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMilitary
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Soldier = append(m.Soldier, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Soldier", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.FightAmount = append(m.FightAmount, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMilitary
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMilitary
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.FightAmount = append(m.FightAmount, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field FightAmount", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreeSoldier", wireType)
			}
			m.FreeSoldier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FreeSoldier |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateFreeSoldierProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateFreeSoldierProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateFreeSoldierProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capcity", wireType)
			}
			m.Capcity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Capcity |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			m.Output = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Output |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Overflow", wireType)
			}
			m.Overflow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Overflow |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CForceAddSoldierProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CForceAddSoldierProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CForceAddSoldierProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Times", wireType)
			}
			m.Times = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Times |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCaptainChangeDataProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCaptainChangeDataProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCaptainChangeDataProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Soldier", wireType)
			}
			m.Soldier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Soldier |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSoldier", wireType)
			}
			m.MaxSoldier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxSoldier |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FightAmount", wireType)
			}
			m.FightAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FightAmount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SFightProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SFightProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SFightProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wall", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Wall = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CFightProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CFightProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CFightProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replay", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMilitary
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Replay = append(m.Replay[:0], dAtA[iNdEx:postIndex]...)
			if m.Replay == nil {
				m.Replay = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CMultiFightProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CMultiFightProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CMultiFightProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replay", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMilitary
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Replay = append(m.Replay[:0], dAtA[iNdEx:postIndex]...)
			if m.Replay == nil {
				m.Replay = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SFightxProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SFightxProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SFightxProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wall", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Wall = bool(v != 0)
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Attacker = append(m.Attacker, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMilitary
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMilitary
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Attacker = append(m.Attacker, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Attacker", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Defenser = append(m.Defenser, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMilitary
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMilitary
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Defenser = append(m.Defenser, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Defenser", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CFightxProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CFightxProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CFightxProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replay", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMilitary
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Replay = append(m.Replay[:0], dAtA[iNdEx:postIndex]...)
			if m.Replay == nil {
				m.Replay = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpgradeSoldierLevelProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpgradeSoldierLevelProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpgradeSoldierLevelProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CRecruitCaptainV2Proto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CRecruitCaptainV2Proto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CRecruitCaptainV2Proto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Captain", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMilitary
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Captain = append(m.Captain[:0], dAtA[iNdEx:postIndex]...)
			if m.Captain == nil {
				m.Captain = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainIndex", wireType)
			}
			m.CaptainIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CRandomCaptainHeadProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CRandomCaptainHeadProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CRandomCaptainHeadProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMilitary
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Head = append(m.Head, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SRecruitCaptainSeekerProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SRecruitCaptainSeekerProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SRecruitCaptainSeekerProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMilitary
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Head = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CRecruitCaptainSeekerProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CRecruitCaptainSeekerProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CRecruitCaptainSeekerProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Captain", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMilitary
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Captain = append(m.Captain[:0], dAtA[iNdEx:postIndex]...)
			if m.Captain == nil {
				m.Captain = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainIndex", wireType)
			}
			m.CaptainIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SSetDefenseTroopProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SSetDefenseTroopProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SSetDefenseTroopProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsTent = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TroopIndex", wireType)
			}
			m.TroopIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TroopIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSetDefenseTroopProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSetDefenseTroopProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSetDefenseTroopProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsTent = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TroopIndex", wireType)
			}
			m.TroopIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TroopIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSetDenfeseTroopDefeatedMailProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSetDenfeseTroopDefeatedMailProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSetDenfeseTroopDefeatedMailProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mail", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMilitary
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mail = append(m.Mail[:0], dAtA[iNdEx:postIndex]...)
			if m.Mail == nil {
				m.Mail = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsTent = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SClearDefenseTroopDefeatedMailProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SClearDefenseTroopDefeatedMailProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SClearDefenseTroopDefeatedMailProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsTent = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CClearDefenseTroopDefeatedMailProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CClearDefenseTroopDefeatedMailProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CClearDefenseTroopDefeatedMailProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsTent = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SSetDefenserAutoFullSoldierProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SSetDefenserAutoFullSoldierProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SSetDefenserAutoFullSoldierProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dont", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Dont = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSetDefenserAutoFullSoldierProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSetDefenserAutoFullSoldierProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSetDefenserAutoFullSoldierProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dont", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Dont = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SUseCopyDefenserGoodsProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SUseCopyDefenserGoodsProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SUseCopyDefenserGoodsProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goods", wireType)
			}
			m.Goods = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Goods |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoBuy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutoBuy = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TroopIndex", wireType)
			}
			m.TroopIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TroopIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUseCopyDefenserGoodsProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUseCopyDefenserGoodsProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUseCopyDefenserGoodsProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TroopIndex", wireType)
			}
			m.TroopIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TroopIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateCopyDefenserProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateCopyDefenserProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateCopyDefenserProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Soldier", wireType)
			}
			m.Soldier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Soldier |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSoldier", wireType)
			}
			m.TotalSoldier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalSoldier |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FightAmount", wireType)
			}
			m.FightAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FightAmount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SSellSeekCaptainProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SSellSeekCaptainProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SSellSeekCaptainProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSellSeekCaptainProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSellSeekCaptainProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSellSeekCaptainProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SSetMultiCaptainIndexProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SSetMultiCaptainIndexProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SSetMultiCaptainIndexProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMilitary
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMilitary
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.XIndex = append(m.XIndex, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMilitary
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMilitary
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.XIndex = append(m.XIndex, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field XIndex", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSetMultiCaptainIndexProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSetMultiCaptainIndexProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSetMultiCaptainIndexProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMilitary
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMilitary
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.XIndex = append(m.XIndex, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMilitary
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMilitary
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.XIndex = append(m.XIndex, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field XIndex", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SSetPveCaptainProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SSetPveCaptainProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SSetPveCaptainProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PveType", wireType)
			}
			m.PveType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PveType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMilitary
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMilitary
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.XIndex = append(m.XIndex, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMilitary
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMilitary
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.XIndex = append(m.XIndex, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field XIndex", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSetPveCaptainProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSetPveCaptainProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSetPveCaptainProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Troop", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMilitary
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Troop = append(m.Troop[:0], dAtA[iNdEx:postIndex]...)
			if m.Troop == nil {
				m.Troop = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SFireCaptainProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SFireCaptainProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SFireCaptainProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CFireCaptainProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CFireCaptainProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CFireCaptainProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SCaptainRefinedProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCaptainRefinedProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCaptainRefinedProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Captain", wireType)
			}
			m.Captain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Captain |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GoodsId = append(m.GoodsId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMilitary
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMilitary
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GoodsId = append(m.GoodsId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Count = append(m.Count, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMilitary
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMilitary
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Count = append(m.Count, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCaptainRefinedProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCaptainRefinedProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCaptainRefinedProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Captain", wireType)
			}
			m.Captain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Captain |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			m.Exp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SCaptainEnhanceProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCaptainEnhanceProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCaptainEnhanceProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Captain", wireType)
			}
			m.Captain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Captain |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GoodsId = append(m.GoodsId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMilitary
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMilitary
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GoodsId = append(m.GoodsId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Count = append(m.Count, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMilitary
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMilitary
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Count = append(m.Count, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCaptainEnhanceProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCaptainEnhanceProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCaptainEnhanceProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Captain", wireType)
			}
			m.Captain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Captain |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ability", wireType)
			}
			m.Ability = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ability |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbilityExp", wireType)
			}
			m.AbilityExp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AbilityExp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quality", wireType)
			}
			m.Quality = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quality |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCaptainRefinedUpgradeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCaptainRefinedUpgradeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCaptainRefinedUpgradeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Captain", wireType)
			}
			m.Captain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Captain |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			m.Exp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ability", wireType)
			}
			m.Ability = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ability |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMilitary
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = append(m.Name[:0], dAtA[iNdEx:postIndex]...)
			if m.Name == nil {
				m.Name = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quality", wireType)
			}
			m.Quality = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quality |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateAbilityExpProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateAbilityExpProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateAbilityExpProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Captain", wireType)
			}
			m.Captain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Captain |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			m.Exp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateCaptainExpProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateCaptainExpProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateCaptainExpProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Captain", wireType)
			}
			m.Captain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Captain |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			m.Exp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateCaptainLevelProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateCaptainLevelProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateCaptainLevelProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Captain", wireType)
			}
			m.Captain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Captain |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			m.Exp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMilitary
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = append(m.Name[:0], dAtA[iNdEx:postIndex]...)
			if m.Name == nil {
				m.Name = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoldierCapcity", wireType)
			}
			m.SoldierCapcity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SoldierCapcity |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCaptainLevelupProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCaptainLevelupProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCaptainLevelupProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Captain", wireType)
			}
			m.Captain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Captain |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			m.Exp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoldierCapcity", wireType)
			}
			m.SoldierCapcity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SoldierCapcity |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateCaptainStatProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateCaptainStatProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateCaptainStatProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Captain", wireType)
			}
			m.Captain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Captain |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalStat", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMilitary
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalStat = append(m.TotalStat[:0], dAtA[iNdEx:postIndex]...)
			if m.TotalStat == nil {
				m.TotalStat = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FightAmount", wireType)
			}
			m.FightAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FightAmount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullFightAmount", wireType)
			}
			m.FullFightAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FullFightAmount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SChangeCaptainNameProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SChangeCaptainNameProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SChangeCaptainNameProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMilitary
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CChangeCaptainNameProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CChangeCaptainNameProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CChangeCaptainNameProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMilitary
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SChangeCaptainRaceProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SChangeCaptainRaceProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SChangeCaptainRaceProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Race", wireType)
			}
			m.Race = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Race |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Money", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Money = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CChangeCaptainRaceProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CChangeCaptainRaceProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CChangeCaptainRaceProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Race", wireType)
			}
			m.Race = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Race |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cooldown", wireType)
			}
			m.Cooldown = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cooldown |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMilitary
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = append(m.Name[:0], dAtA[iNdEx:postIndex]...)
			if m.Name == nil {
				m.Name = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SCaptainRebirthPreviewProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCaptainRebirthPreviewProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCaptainRebirthPreviewProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCaptainRebirthPreviewProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCaptainRebirthPreviewProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCaptainRebirthPreviewProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RebirthLevel", wireType)
			}
			m.RebirthLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RebirthLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quality", wireType)
			}
			m.Quality = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quality |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ability", wireType)
			}
			m.Ability = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ability |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbilityLimit", wireType)
			}
			m.AbilityLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AbilityLimit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalStat", wireType)
			}
			m.TotalStat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalStat |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMilitary
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = append(m.Name[:0], dAtA[iNdEx:postIndex]...)
			if m.Name == nil {
				m.Name = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoldierCapcity", wireType)
			}
			m.SoldierCapcity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SoldierCapcity |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddStat", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMilitary
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddStat = append(m.AddStat[:0], dAtA[iNdEx:postIndex]...)
			if m.AddStat == nil {
				m.AddStat = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCaptainRebirthCdStartProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCaptainRebirthCdStartProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCaptainRebirthCdStartProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CdEndtime", wireType)
			}
			m.CdEndtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CdEndtime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SCaptainRebirthProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCaptainRebirthProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCaptainRebirthProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Miao", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Miao = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCaptainRebirthProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCaptainRebirthProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCaptainRebirthProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RebirthLevel", wireType)
			}
			m.RebirthLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RebirthLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RebirthExp", wireType)
			}
			m.RebirthExp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RebirthExp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quality", wireType)
			}
			m.Quality = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quality |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ability", wireType)
			}
			m.Ability = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ability |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbilityExp", wireType)
			}
			m.AbilityExp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AbilityExp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbilityLimit", wireType)
			}
			m.AbilityLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AbilityLimit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Soldier", wireType)
			}
			m.Soldier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Soldier |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoldierCapcity", wireType)
			}
			m.SoldierCapcity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SoldierCapcity |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalStat", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMilitary
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalStat = append(m.TotalStat[:0], dAtA[iNdEx:postIndex]...)
			if m.TotalStat == nil {
				m.TotalStat = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FightAmount", wireType)
			}
			m.FightAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FightAmount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullFightAmount", wireType)
			}
			m.FullFightAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FullFightAmount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMilitary
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = append(m.Name[:0], dAtA[iNdEx:postIndex]...)
			if m.Name == nil {
				m.Name = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SCaptainProgressProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCaptainProgressProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCaptainProgressProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Miao", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Miao = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCaptainProgressProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCaptainProgressProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCaptainProgressProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RebirthLevel", wireType)
			}
			m.RebirthLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RebirthLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RebirthExp", wireType)
			}
			m.RebirthExp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RebirthExp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quality", wireType)
			}
			m.Quality = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quality |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ability", wireType)
			}
			m.Ability = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ability |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbilityExp", wireType)
			}
			m.AbilityExp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AbilityExp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbilityLimit", wireType)
			}
			m.AbilityLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AbilityLimit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Soldier", wireType)
			}
			m.Soldier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Soldier |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoldierCapcity", wireType)
			}
			m.SoldierCapcity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SoldierCapcity |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalStat", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMilitary
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalStat = append(m.TotalStat[:0], dAtA[iNdEx:postIndex]...)
			if m.TotalStat == nil {
				m.TotalStat = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FightAmount", wireType)
			}
			m.FightAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FightAmount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullFightAmount", wireType)
			}
			m.FullFightAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FullFightAmount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SCaptainRebirthMiaoCdProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCaptainRebirthMiaoCdProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCaptainRebirthMiaoCdProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCaptainRebirthMiaoCdProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCaptainRebirthMiaoCdProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCaptainRebirthMiaoCdProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCollectCaptainTrainingExpProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCollectCaptainTrainingExpProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCollectCaptainTrainingExpProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCaptainTrainExpProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCaptainTrainExpProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCaptainTrainExpProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateTrainingProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateTrainingProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateTrainingProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gst", wireType)
			}
			m.Gst = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gst |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cst", wireType)
			}
			m.Cst = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cst |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpPerHour", wireType)
			}
			m.ExpPerHour = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpPerHour |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coef", wireType)
			}
			m.Coef = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coef |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCaptainCanCollectExpProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCaptainCanCollectExpProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCaptainCanCollectExpProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			m.Exp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BuffCoef = append(m.BuffCoef, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMilitary
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMilitary
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BuffCoef = append(m.BuffCoef, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BuffCoef", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDuration", wireType)
			}
			m.MaxDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxDuration |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SUseTrainingExpGoodsProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SUseTrainingExpGoodsProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SUseTrainingExpGoodsProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainId", wireType)
			}
			m.CaptainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			m.GoodsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUseTrainingExpGoodsProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUseTrainingExpGoodsProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUseTrainingExpGoodsProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainId", wireType)
			}
			m.CaptainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			m.GoodsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Upgrade", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Upgrade = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SUseLevelExpGoodsProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SUseLevelExpGoodsProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SUseLevelExpGoodsProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainId", wireType)
			}
			m.CaptainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			m.GoodsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUseLevelExpGoodsProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUseLevelExpGoodsProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUseLevelExpGoodsProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainId", wireType)
			}
			m.CaptainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			m.GoodsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Upgrade", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Upgrade = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SUseLevelExpGoods2Proto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SUseLevelExpGoods2Proto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SUseLevelExpGoods2Proto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Captain", wireType)
			}
			m.Captain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Captain |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			m.GoodsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUseLevelExpGoods2Proto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUseLevelExpGoods2Proto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUseLevelExpGoods2Proto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Captain", wireType)
			}
			m.Captain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Captain |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Upgrade", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Upgrade = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			m.Exp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SAutoUseGoodsUntilCaptainLevelupProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SAutoUseGoodsUntilCaptainLevelupProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SAutoUseGoodsUntilCaptainLevelupProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Captain", wireType)
			}
			m.Captain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Captain |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CAutoUseGoodsUntilCaptainLevelupProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CAutoUseGoodsUntilCaptainLevelupProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CAutoUseGoodsUntilCaptainLevelupProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Captain", wireType)
			}
			m.Captain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Captain |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			m.Exp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Upgrade", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Upgrade = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CGetMaxRecruitSoldierProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CGetMaxRecruitSoldierProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CGetMaxRecruitSoldierProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CGetMaxHealSoldierProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CGetMaxHealSoldierProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CGetMaxHealSoldierProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CJiuGuanConsultProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CJiuGuanConsultProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CJiuGuanConsultProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prize", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMilitary
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prize = append(m.Prize[:0], dAtA[iNdEx:postIndex]...)
			if m.Prize == nil {
				m.Prize = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CritMulti", wireType)
			}
			m.CritMulti = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CritMulti |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CritMultiImgIndex", wireType)
			}
			m.CritMultiImgIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CritMultiImgIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TutorIndex", wireType)
			}
			m.TutorIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TutorIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalIndex", wireType)
			}
			m.OriginalIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OriginalIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CJiuGuanConsultBroadcastProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CJiuGuanConsultBroadcastProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CJiuGuanConsultBroadcastProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CritMulti", wireType)
			}
			m.CritMulti = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CritMulti |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMilitary
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeroName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CJiuGuanTimesChangedProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CJiuGuanTimesChangedProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CJiuGuanTimesChangedProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Times", wireType)
			}
			m.Times = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Times |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextTime", wireType)
			}
			m.NextTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SJiuGuanRefreshProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SJiuGuanRefreshProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SJiuGuanRefreshProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoMax", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutoMax = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CJiuGuanRefreshProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CJiuGuanRefreshProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CJiuGuanRefreshProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TutorIndex", wireType)
			}
			m.TutorIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TutorIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshTimes", wireType)
			}
			m.RefreshTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefreshTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoMax", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutoMax = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SUnlockCaptainRestraintSpellProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SUnlockCaptainRestraintSpellProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SUnlockCaptainRestraintSpellProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Captain", wireType)
			}
			m.Captain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Captain |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUnlockCaptainRestraintSpellProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUnlockCaptainRestraintSpellProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUnlockCaptainRestraintSpellProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Captain", wireType)
			}
			m.Captain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Captain |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CNewTroopsProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CNewTroopsProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CNewTroopsProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Troop", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMilitary
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Troop = append(m.Troop[:0], dAtA[iNdEx:postIndex]...)
			if m.Troop == nil {
				m.Troop = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SGetCaptainStatDetailsProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SGetCaptainStatDetailsProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SGetCaptainStatDetailsProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Captain", wireType)
			}
			m.Captain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Captain |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CGetCaptainStatDetailsProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CGetCaptainStatDetailsProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CGetCaptainStatDetailsProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Captain", wireType)
			}
			m.Captain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Captain |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMilitary
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stats = append(m.Stats[:0], dAtA[iNdEx:postIndex]...)
			if m.Stats == nil {
				m.Stats = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SCaptainStatDetailsProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCaptainStatDetailsProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCaptainStatDetailsProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Captain", wireType)
			}
			m.Captain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Captain |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCaptainStatDetailsProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCaptainStatDetailsProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCaptainStatDetailsProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Captain", wireType)
			}
			m.Captain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Captain |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMilitary
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stats = append(m.Stats[:0], dAtA[iNdEx:postIndex]...)
			if m.Stats == nil {
				m.Stats = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateTroopFightAmountProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateTroopFightAmountProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateTroopFightAmountProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TroopIndex = append(m.TroopIndex, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMilitary
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMilitary
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TroopIndex = append(m.TroopIndex, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TroopIndex", wireType)
			}
		case 6:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.StartValue = append(m.StartValue, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMilitary
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMilitary
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.StartValue = append(m.StartValue, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field StartValue", wireType)
			}
		case 7:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EndValue = append(m.EndValue, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMilitary
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMilitary
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EndValue = append(m.EndValue, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EndValue", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SUpdateCaptainOfficialProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SUpdateCaptainOfficialProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SUpdateCaptainOfficialProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Captain", wireType)
			}
			m.Captain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Captain |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Official", wireType)
			}
			m.Official = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Official |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateCaptainOfficialProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateCaptainOfficialProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateCaptainOfficialProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Captain", wireType)
			}
			m.Captain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Captain |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Official", wireType)
			}
			m.Official = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Official |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SSetCaptainOfficialProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SSetCaptainOfficialProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SSetCaptainOfficialProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Captain = append(m.Captain, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMilitary
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMilitary
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Captain = append(m.Captain, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Captain", wireType)
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Official = append(m.Official, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMilitary
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMilitary
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Official = append(m.Official, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Official", wireType)
			}
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.OfficialIdx = append(m.OfficialIdx, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMilitary
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMilitary
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.OfficialIdx = append(m.OfficialIdx, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field OfficialIdx", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSetCaptainOfficialProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSetCaptainOfficialProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSetCaptainOfficialProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Captain = append(m.Captain, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMilitary
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMilitary
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Captain = append(m.Captain, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Captain", wireType)
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Official = append(m.Official, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMilitary
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMilitary
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Official = append(m.Official, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Official", wireType)
			}
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.OfficialIdx = append(m.OfficialIdx, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMilitary
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMilitary
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.OfficialIdx = append(m.OfficialIdx, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field OfficialIdx", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SLeaveCaptainOfficialProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SLeaveCaptainOfficialProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SLeaveCaptainOfficialProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Captain", wireType)
			}
			m.Captain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Captain |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CLeaveCaptainOfficialProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CLeaveCaptainOfficialProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CLeaveCaptainOfficialProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Captain", wireType)
			}
			m.Captain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Captain |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CAddGongxunProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CAddGongxunProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CAddGongxunProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Captain", wireType)
			}
			m.Captain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Captain |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewGongxun", wireType)
			}
			m.NewGongxun = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewGongxun |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SUseGongXunGoodsProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SUseGongXunGoodsProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SUseGongXunGoodsProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Captain", wireType)
			}
			m.Captain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Captain |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GoodsId = append(m.GoodsId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMilitary
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMilitary
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GoodsId = append(m.GoodsId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Count = append(m.Count, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMilitary
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMilitary
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Count = append(m.Count, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUseGongXunGoodsProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUseGongXunGoodsProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUseGongXunGoodsProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Captain", wireType)
			}
			m.Captain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Captain |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewGongxun", wireType)
			}
			m.NewGongxun = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewGongxun |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SUseGongxunGoodsProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SUseGongxunGoodsProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SUseGongxunGoodsProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Captain", wireType)
			}
			m.Captain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Captain |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GoodsId = append(m.GoodsId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMilitary
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMilitary
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GoodsId = append(m.GoodsId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Count = append(m.Count, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMilitary
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMilitary
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Count = append(m.Count, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUseGongxunGoodsProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUseGongxunGoodsProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUseGongxunGoodsProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Captain", wireType)
			}
			m.Captain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Captain |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewGongxun", wireType)
			}
			m.NewGongxun = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewGongxun |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SCloseFightGuideProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCloseFightGuideProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCloseFightGuideProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Close", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Close = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCloseFightGuideProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCloseFightGuideProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCloseFightGuideProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Close", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Close = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SViewOtherHeroCaptainProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SViewOtherHeroCaptainProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SViewOtherHeroCaptainProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMilitary
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeroId = append(m.HeroId[:0], dAtA[iNdEx:postIndex]...)
			if m.HeroId == nil {
				m.HeroId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainId", wireType)
			}
			m.CaptainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CViewOtherHeroCaptainProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CViewOtherHeroCaptainProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CViewOtherHeroCaptainProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMilitary
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeroId = append(m.HeroId[:0], dAtA[iNdEx:postIndex]...)
			if m.HeroId == nil {
				m.HeroId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMilitary
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeroName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Captain", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMilitary
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Captain = append(m.Captain[:0], dAtA[iNdEx:postIndex]...)
			if m.Captain == nil {
				m.Captain = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SCaptainBornProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCaptainBornProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCaptainBornProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainId", wireType)
			}
			m.CaptainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCaptainBornProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCaptainBornProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCaptainBornProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Captain", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMilitary
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Captain = append(m.Captain[:0], dAtA[iNdEx:postIndex]...)
			if m.Captain == nil {
				m.Captain = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SCaptainUpstarProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCaptainUpstarProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCaptainUpstarProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainId", wireType)
			}
			m.CaptainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCaptainUpstarProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCaptainUpstarProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCaptainUpstarProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Star", wireType)
			}
			m.Star = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Star |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainId", wireType)
			}
			m.CaptainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SCaptainExchangeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCaptainExchangeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCaptainExchangeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cap1Id", wireType)
			}
			m.Cap1Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cap1Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cap2Id", wireType)
			}
			m.Cap2Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cap2Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCaptainExchangeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCaptainExchangeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCaptainExchangeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cap1", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMilitary
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cap1 = append(m.Cap1[:0], dAtA[iNdEx:postIndex]...)
			if m.Cap1 == nil {
				m.Cap1 = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cap2", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMilitary
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cap2 = append(m.Cap2[:0], dAtA[iNdEx:postIndex]...)
			if m.Cap2 == nil {
				m.Cap2 = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SActivateCaptainFriendshipProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SActivateCaptainFriendshipProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SActivateCaptainFriendshipProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CActivateCaptainFriendshipProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CActivateCaptainFriendshipProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CActivateCaptainFriendshipProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CShowPrizeCaptainProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CShowPrizeCaptainProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CShowPrizeCaptainProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Captain", wireType)
			}
			m.Captain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Captain |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exist", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Exist = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SNoticeOfficialHasViewedProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SNoticeOfficialHasViewedProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SNoticeOfficialHasViewedProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfficialId", wireType)
			}
			m.OfficialId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OfficialId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfficialIdx", wireType)
			}
			m.OfficialIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OfficialIdx |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CNoticeOfficialHasViewedProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CNoticeOfficialHasViewedProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CNoticeOfficialHasViewedProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfficialId", wireType)
			}
			m.OfficialId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OfficialId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfficialIdx", wireType)
			}
			m.OfficialIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OfficialIdx |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilitary(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMilitary
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMilitary(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMilitary
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMilitary
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMilitary
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMilitary
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMilitary(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMilitary = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMilitary   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/gen/pb/military/military.proto", fileDescriptorMilitary)
}

var fileDescriptorMilitary = []byte{
	// 2938 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x3a, 0xdd, 0x6f, 0x1b, 0xc7,
	0xf1, 0xe1, 0x87, 0x24, 0x6a, 0x24, 0x39, 0x36, 0x1d, 0xdb, 0xf2, 0x97, 0x14, 0x9f, 0x60, 0x38,
	0xbf, 0x1f, 0x12, 0xa9, 0xa1, 0x03, 0xc7, 0x41, 0x5b, 0xa4, 0x32, 0x6d, 0x7d, 0xa4, 0xfe, 0x10,
	0x48, 0xc9, 0x6d, 0x83, 0x02, 0xc4, 0x8a, 0xbb, 0xa4, 0xb6, 0x3e, 0xde, 0x5d, 0xef, 0xf6, 0x44,
	0xaa, 0x0f, 0x05, 0x8a, 0xb6, 0x48, 0x8b, 0x02, 0x7d, 0xe9, 0x4b, 0x90, 0x3e, 0xb6, 0xaf, 0xfd,
	0x37, 0x8a, 0x3e, 0xf6, 0x4f, 0x28, 0xd2, 0x7f, 0xa4, 0xd8, 0xd9, 0xdd, 0xe3, 0x2e, 0x49, 0x51,
	0xa4, 0x62, 0xa7, 0x2f, 0x7d, 0xe2, 0xee, 0xec, 0xec, 0xec, 0xec, 0xcc, 0xdc, 0x7c, 0x2d, 0xe1,
	0x61, 0x9b, 0x8b, 0xa3, 0xf4, 0x70, 0xbd, 0x19, 0x76, 0x36, 0x7c, 0xde, 0x3e, 0x12, 0x11, 0xe9,
	0x6e, 0x74, 0x88, 0xcf, 0x3e, 0xde, 0x68, 0xb3, 0x60, 0x23, 0x3a, 0xdc, 0xe8, 0x70, 0x9f, 0x0b,
	0x12, 0x9f, 0x64, 0x83, 0xf5, 0x28, 0x0e, 0x45, 0x58, 0x9e, 0xc1, 0x1f, 0xef, 0xcb, 0x3c, 0xdc,
	0xaa, 0x57, 0xaa, 0x07, 0x11, 0x25, 0x82, 0xd5, 0x43, 0x9f, 0x72, 0x16, 0x57, 0x49, 0xd4, 0xe4,
	0xe2, 0x64, 0x0f, 0xf1, 0xee, 0xc1, 0xdb, 0x89, 0x02, 0x37, 0x9a, 0x0a, 0xbe, 0x9c, 0x7b, 0x37,
	0xf7, 0xde, 0x4c, 0xed, 0x42, 0xe2, 0x60, 0x97, 0x1f, 0xc0, 0xb5, 0x6e, 0x98, 0x06, 0x94, 0xd1,
	0xc6, 0xe0, 0x86, 0x3c, 0x6e, 0xb8, 0xa2, 0x97, 0xdd, 0x53, 0xca, 0xeb, 0x70, 0x39, 0x60, 0xdd,
	0xa1, 0x3d, 0x05, 0xdc, 0x73, 0x29, 0x60, 0xdd, 0x01, 0xfc, 0xf7, 0xa1, 0x6c, 0xe3, 0x87, 0xa9,
	0x88, 0x52, 0xb1, 0x5c, 0x44, 0xf4, 0x8b, 0x7d, 0xf4, 0x17, 0x08, 0x2f, 0x7f, 0x02, 0xd7, 0x25,
	0x76, 0xcc, 0x9a, 0x71, 0xca, 0x45, 0xff, 0x94, 0x30, 0x0d, 0xc4, 0xf2, 0x0c, 0x6e, 0xba, 0x1a,
	0xb0, 0x6e, 0x4d, 0xad, 0x9b, 0xa3, 0xe4, 0xaa, 0xb7, 0x0e, 0x57, 0xab, 0x95, 0xba, 0xbb, 0xa2,
	0x64, 0xf2, 0x0e, 0xcc, 0x28, 0x02, 0x4a, 0x12, 0x6a, 0xe2, 0xfd, 0x14, 0xae, 0xd6, 0x2b, 0xd5,
	0x51, 0xf8, 0xab, 0xb0, 0x60, 0xb1, 0xac, 0xc5, 0x01, 0x7d, 0x5e, 0xcb, 0x77, 0x60, 0xb1, 0x15,
	0x33, 0x96, 0x61, 0xa8, 0xcb, 0x2f, 0x48, 0x98, 0x46, 0xf1, 0xde, 0x87, 0xe5, 0x21, 0x6e, 0x5e,
	0x56, 0x14, 0xfd, 0x8b, 0x50, 0x20, 0xbe, 0x8f, 0xdc, 0x94, 0x6a, 0x72, 0xe8, 0x7d, 0x17, 0x96,
	0x87, 0x78, 0x31, 0xd8, 0xab, 0xb0, 0x40, 0x28, 0x1d, 0xe4, 0x86, 0x50, 0xa3, 0x18, 0xef, 0xab,
	0x1c, 0xdc, 0xa8, 0x57, 0xaa, 0x9b, 0xa9, 0x08, 0x6b, 0xac, 0x19, 0x1e, 0xb3, 0xd8, 0xb9, 0xcd,
	0x20, 0xb3, 0xb9, 0x21, 0x66, 0xcb, 0x77, 0x00, 0x9a, 0x24, 0x12, 0x84, 0x07, 0x0d, 0x4e, 0x97,
	0xf3, 0xef, 0x16, 0xde, 0x9b, 0x79, 0x94, 0xbf, 0xf8, 0x56, 0x6d, 0x5e, 0x43, 0x77, 0x69, 0xf9,
	0x01, 0x5c, 0x31, 0x28, 0xae, 0x52, 0x0a, 0x19, 0xf6, 0x65, 0x8d, 0xe0, 0x68, 0x65, 0x1f, 0xbc,
	0xa1, 0x9b, 0xed, 0xf3, 0x0e, 0x4b, 0xaa, 0x47, 0x24, 0x68, 0x33, 0xaa, 0x78, 0x5c, 0x87, 0xcb,
	0x89, 0x20, 0xb1, 0x90, 0x8a, 0x97, 0x17, 0x38, 0x69, 0x08, 0xde, 0x61, 0x9a, 0xd5, 0x4b, 0xb8,
	0xa4, 0xaf, 0x76, 0x22, 0x37, 0x7b, 0xdb, 0x70, 0x5d, 0xde, 0x98, 0xd2, 0x1f, 0x39, 0x36, 0x9a,
	0xa9, 0x5b, 0x84, 0x9b, 0x94, 0x1a, 0x75, 0xe3, 0x44, 0x41, 0x05, 0xf1, 0xb5, 0x00, 0xd5, 0xc4,
	0xab, 0xc0, 0x8d, 0x6a, 0xa5, 0xbe, 0xc3, 0x88, 0x7f, 0x0a, 0xa5, 0x11, 0x86, 0x53, 0x41, 0x71,
	0x4f, 0xb7, 0xe7, 0x31, 0xdc, 0xaa, 0x56, 0xea, 0x55, 0x25, 0x20, 0x75, 0x75, 0x67, 0xd7, 0x05,
	0xc8, 0x73, 0xc3, 0x70, 0x9e, 0xd3, 0x3e, 0x95, 0xbc, 0x4d, 0xe5, 0x8f, 0x39, 0xfc, 0xfa, 0x27,
	0x27, 0xb3, 0x0c, 0x73, 0xae, 0xdd, 0x98, 0x29, 0x5a, 0x85, 0x74, 0x40, 0x0d, 0xd2, 0xd1, 0x6a,
	0x54, 0x56, 0x21, 0x61, 0x9b, 0x08, 0x1a, 0x32, 0x9c, 0xe2, 0xb0, 0x95, 0x7f, 0x07, 0xc5, 0xa7,
	0xf9, 0xd9, 0x4a, 0x7d, 0xdf, 0xe1, 0xa6, 0xac, 0xb9, 0x31, 0x06, 0x92, 0xe7, 0xd4, 0xfb, 0x52,
	0x19, 0xeb, 0x14, 0x5b, 0xca, 0xb7, 0xec, 0x4b, 0x98, 0x85, 0xec, 0x22, 0x77, 0x87, 0x2e, 0x62,
	0x50, 0xa6, 0xbd, 0xcc, 0xef, 0x72, 0x68, 0x55, 0xca, 0xb7, 0x6e, 0xf5, 0x17, 0x14, 0x67, 0xb7,
	0x01, 0x94, 0x89, 0xa2, 0x65, 0x2a, 0x69, 0xce, 0x23, 0x44, 0x5a, 0xa4, 0x94, 0xb4, 0xeb, 0x0a,
	0xcd, 0xb4, 0x7c, 0x15, 0x66, 0x1d, 0xa7, 0xa7, 0x67, 0xe5, 0x1b, 0x50, 0x92, 0x06, 0xdd, 0xf2,
	0xc3, 0xae, 0xf6, 0x6c, 0xd9, 0xdc, 0xdb, 0x80, 0x6b, 0xf5, 0x4a, 0x75, 0x2b, 0x8c, 0x9b, 0x6c,
	0x93, 0x0e, 0x5b, 0xb7, 0xfc, 0x7e, 0x32, 0xeb, 0x96, 0x13, 0xef, 0xf7, 0x8a, 0x77, 0xc7, 0x32,
	0x1e, 0x13, 0x41, 0xa6, 0x35, 0x8b, 0x55, 0x58, 0xe8, 0x90, 0xde, 0x80, 0x63, 0x83, 0x0e, 0xe9,
	0xd5, 0x4f, 0xb1, 0x9b, 0xe2, 0x90, 0xdd, 0x78, 0x6b, 0xb0, 0x54, 0xad, 0xd4, 0xb7, 0x24, 0xc4,
	0x28, 0xb5, 0xd8, 0xed, 0x3b, 0x3c, 0x1c, 0x7b, 0xf7, 0x60, 0x49, 0xde, 0xb0, 0x8f, 0x74, 0x15,
	0x66, 0x63, 0x16, 0xf9, 0x44, 0xc5, 0xab, 0xc5, 0x9a, 0x9e, 0x79, 0xef, 0x43, 0xb9, 0x5e, 0xa9,
	0x3e, 0x4b, 0x7d, 0xc1, 0x27, 0xc0, 0xa6, 0x70, 0xc1, 0x9c, 0xdd, 0x3b, 0xf5, 0xf0, 0xf2, 0x0a,
	0x94, 0x88, 0x10, 0xa4, 0xf9, 0xca, 0x31, 0xa9, 0x0c, 0x26, 0xd7, 0x29, 0x6b, 0xb1, 0x20, 0x41,
	0x11, 0x64, 0xeb, 0x06, 0xe6, 0xbd, 0x07, 0x17, 0x0c, 0xf3, 0xbd, 0xf1, 0xfc, 0xdc, 0x87, 0x9b,
	0x68, 0x52, 0xed, 0x98, 0x50, 0x63, 0x4f, 0x4f, 0xd9, 0x31, 0xf3, 0x33, 0x65, 0xfa, 0x72, 0x66,
	0x94, 0x89, 0x13, 0xef, 0x27, 0x76, 0x34, 0xd0, 0x2a, 0x35, 0xd1, 0x40, 0xd9, 0x99, 0x84, 0xe8,
	0x93, 0xcc, 0xb4, 0xbc, 0x06, 0x4b, 0x99, 0x13, 0x0f, 0x28, 0xeb, 0x69, 0xd5, 0x2e, 0x1a, 0x1f,
	0x2e, 0x61, 0xde, 0x06, 0x9a, 0x49, 0x8d, 0x04, 0x34, 0xec, 0x68, 0xca, 0x3b, 0x8c, 0xd0, 0x4c,
	0x54, 0x47, 0x8c, 0xa8, 0x00, 0x30, 0x5f, 0xc3, 0xb1, 0xb7, 0x83, 0x8e, 0xcb, 0xe5, 0xa5, 0xce,
	0xd8, 0x2b, 0xcb, 0x1c, 0xd5, 0x69, 0xfa, 0x06, 0x38, 0xb1, 0x28, 0xe5, 0x32, 0x4a, 0x09, 0xfa,
	0xae, 0x69, 0x29, 0x59, 0xf7, 0xcd, 0x9f, 0x71, 0xdf, 0xc2, 0x88, 0xfb, 0xd6, 0xe1, 0x5a, 0xb5,
	0x52, 0xaf, 0x33, 0xf1, 0x58, 0xe9, 0x6e, 0x3f, 0x0e, 0xc3, 0x48, 0x9d, 0x77, 0x0d, 0xe6, 0x78,
	0xd2, 0x10, 0x4c, 0xbb, 0xea, 0x52, 0x6d, 0x96, 0x27, 0xfb, 0x2c, 0x10, 0xf2, 0x1b, 0x10, 0x12,
	0xcd, 0x11, 0x23, 0x20, 0x28, 0x23, 0x5a, 0xaf, 0x54, 0x5f, 0x33, 0xd1, 0x1a, 0xac, 0x19, 0xa2,
	0x41, 0x8b, 0x69, 0xa2, 0xf2, 0x00, 0x22, 0x18, 0x7d, 0x46, 0xb8, 0x9f, 0xe9, 0xa8, 0x43, 0xb8,
	0xaf, 0x95, 0x8f, 0x63, 0xfb, 0xd0, 0xbc, 0x7d, 0xa8, 0xf7, 0x03, 0xb8, 0x2b, 0xdd, 0xb3, 0xcf,
	0x48, 0x6c, 0xb3, 0x3a, 0x4c, 0xf5, 0x34, 0xb6, 0x25, 0x05, 0xe9, 0x56, 0xbe, 0x01, 0x85, 0x87,
	0xe0, 0x39, 0x1a, 0x88, 0x65, 0x9e, 0x32, 0xc2, 0xef, 0x17, 0x69, 0x98, 0xed, 0xc5, 0xb1, 0xdc,
	0xe9, 0x88, 0x79, 0xf2, 0x9d, 0x11, 0x1a, 0xed, 0x41, 0xc2, 0xaa, 0x61, 0x74, 0x62, 0x76, 0x6f,
	0x87, 0x21, 0x4d, 0x32, 0x53, 0x6b, 0xcb, 0x99, 0x31, 0x35, 0x9c, 0x94, 0xaf, 0x43, 0x89, 0xa4,
	0x22, 0x6c, 0x1c, 0xa6, 0x27, 0x5a, 0x8e, 0x73, 0x72, 0xfe, 0x28, 0x3d, 0x19, 0xd4, 0x5e, 0x61,
	0x48, 0x7b, 0x9f, 0xab, 0xb4, 0xfc, 0xd4, 0x13, 0x07, 0x08, 0xe4, 0x06, 0x09, 0xc8, 0xc3, 0x59,
	0x40, 0xed, 0xe0, 0x32, 0xc7, 0x02, 0x8a, 0xc9, 0xce, 0x2f, 0x31, 0x62, 0xaa, 0xb0, 0x64, 0x93,
	0xcf, 0x1c, 0x82, 0x9b, 0xd9, 0x65, 0xbe, 0x7c, 0x0d, 0x96, 0x30, 0xc9, 0x19, 0x48, 0x1d, 0x17,
	0x11, 0x58, 0x9f, 0x38, 0x0f, 0x90, 0xc1, 0x08, 0x35, 0xe8, 0xfb, 0xf2, 0x73, 0xd5, 0x5f, 0xee,
	0x98, 0x6f, 0x56, 0x47, 0xaf, 0xf1, 0x1b, 0xf2, 0xf6, 0x06, 0x86, 0xfa, 0xaa, 0x33, 0x81, 0x6e,
	0xbe, 0x6a, 0x7d, 0xc0, 0xe3, 0x9d, 0x4c, 0xde, 0xc9, 0x56, 0x65, 0x64, 0xbb, 0x09, 0x73, 0xbd,
	0x4c, 0x49, 0x66, 0x61, 0xb6, 0xb7, 0x6b, 0x8e, 0x51, 0x06, 0xf5, 0x66, 0x8f, 0x69, 0xc2, 0x15,
	0x75, 0x9b, 0xbd, 0x63, 0xe6, 0x5c, 0xfe, 0x3a, 0x94, 0xa2, 0x63, 0xd6, 0x10, 0x27, 0x91, 0x49,
	0x6d, 0xe7, 0xa2, 0x63, 0xb6, 0x7f, 0x12, 0xb1, 0xe9, 0x0f, 0xf9, 0x00, 0xae, 0xa8, 0xbb, 0x0c,
	0x1e, 0x22, 0xf3, 0x03, 0x69, 0x56, 0xda, 0x43, 0xa8, 0x89, 0x77, 0x17, 0x2e, 0x63, 0x5c, 0x8c,
	0x5d, 0xe4, 0x81, 0xc4, 0x40, 0xa2, 0x61, 0x60, 0x3b, 0x03, 0xed, 0x15, 0x96, 0x5a, 0x1a, 0xa5,
	0xc6, 0x5a, 0x3c, 0x30, 0x89, 0xfc, 0x40, 0x78, 0x9a, 0xe9, 0xbb, 0xeb, 0xdb, 0x50, 0xc2, 0xcf,
	0xcc, 0xad, 0x30, 0xe6, 0x10, 0xb6, 0x2b, 0x53, 0x92, 0x99, 0xc1, 0x7a, 0x22, 0x4b, 0x9d, 0xaf,
	0xf6, 0x33, 0x9b, 0x09, 0x0f, 0xbb, 0x08, 0x05, 0xd6, 0x8b, 0xb4, 0x91, 0xc9, 0xa1, 0xcb, 0xf2,
	0x93, 0xe0, 0x88, 0x04, 0x4d, 0xf6, 0xc6, 0x58, 0xfe, 0x22, 0x67, 0xf3, 0x3c, 0xe1, 0x69, 0xcb,
	0x30, 0x47, 0x0e, 0x65, 0xd1, 0x6f, 0x0a, 0x70, 0x33, 0xc5, 0x0a, 0x50, 0x0d, 0x1b, 0xf2, 0x56,
	0xda, 0xfb, 0x68, 0xd0, 0x93, 0x5e, 0x24, 0xb7, 0xfe, 0x3c, 0x25, 0xb8, 0x55, 0xe5, 0x63, 0x66,
	0xea, 0xfd, 0x29, 0x07, 0xb7, 0x87, 0xa4, 0xa7, 0xd3, 0x91, 0xa9, 0x85, 0x68, 0xb3, 0x58, 0x70,
	0x59, 0x2c, 0x43, 0x31, 0x20, 0x1d, 0x86, 0xc7, 0x2f, 0xd6, 0x70, 0x6c, 0x73, 0x35, 0xe3, 0x72,
	0xb5, 0x85, 0x09, 0x8e, 0xf2, 0x68, 0x9b, 0xd9, 0x35, 0xa6, 0x57, 0xaa, 0x4d, 0xc7, 0x08, 0xfb,
	0x3c, 0x74, 0xfe, 0x9c, 0xb3, 0x5d, 0xac, 0x42, 0xb3, 0xb2, 0xb4, 0x69, 0x44, 0x94, 0x65, 0x74,
	0x05, 0x2b, 0xa3, 0x1b, 0x29, 0x9e, 0x11, 0x9d, 0x9a, 0x99, 0x51, 0x9d, 0x1a, 0xef, 0xd7, 0x8e,
	0x35, 0x21, 0x5f, 0x69, 0xf4, 0xba, 0x38, 0x1b, 0xc1, 0x45, 0x71, 0x24, 0x17, 0x7f, 0xb1, 0xab,
	0x23, 0x93, 0xbe, 0x09, 0x22, 0xce, 0xfe, 0x88, 0x40, 0x47, 0x21, 0x41, 0x84, 0xce, 0xe1, 0xe6,
	0x55, 0x08, 0x12, 0x44, 0x4c, 0x52, 0x87, 0xfe, 0x3f, 0x5c, 0x6a, 0xa5, 0xbe, 0xdf, 0x18, 0x51,
	0x77, 0xbc, 0x2d, 0x17, 0xb6, 0xac, 0x58, 0xf5, 0x29, 0x5c, 0x97, 0x9f, 0x39, 0xd6, 0x3f, 0x9a,
	0xc9, 0xe7, 0xa4, 0xc3, 0x46, 0x97, 0x41, 0x46, 0x2b, 0x3a, 0x4b, 0x95, 0x63, 0x49, 0x40, 0xca,
	0xfa, 0xfc, 0x04, 0x0e, 0x86, 0x39, 0xa8, 0x91, 0xe6, 0xe9, 0x04, 0x62, 0xd2, 0x34, 0x11, 0x1f,
	0xc7, 0x52, 0x4f, 0x9d, 0x30, 0x60, 0x4a, 0x0f, 0xa5, 0x9a, 0x9a, 0x78, 0xe1, 0x30, 0x5f, 0xd3,
	0x91, 0xbd, 0x01, 0xa5, 0x66, 0x18, 0xfa, 0x34, 0xec, 0x06, 0x5a, 0xc8, 0xd9, 0x7c, 0x94, 0x79,
	0x7a, 0x1b, 0x70, 0xdb, 0xf6, 0xf1, 0x87, 0x3c, 0x16, 0x47, 0x7b, 0x31, 0x3b, 0xe6, 0xac, 0x3b,
	0x3a, 0x28, 0xfc, 0x35, 0xef, 0xba, 0x9a, 0x33, 0x77, 0xc8, 0x04, 0x25, 0x56, 0x68, 0x0d, 0x65,
	0x99, 0x3a, 0x41, 0xd1, 0x40, 0xb4, 0x74, 0xdb, 0x8b, 0x14, 0x1c, 0x2f, 0x62, 0x7b, 0xa3, 0xa2,
	0xeb, 0x8d, 0xd6, 0x60, 0xc9, 0x38, 0x4c, 0x9f, 0x77, 0xb8, 0xe9, 0x1c, 0x2e, 0x6a, 0xe0, 0x53,
	0x09, 0x1b, 0x30, 0xcc, 0x59, 0x55, 0xd0, 0xf7, 0x0d, 0xd3, 0xc8, 0xa4, 0x34, 0xfe, 0x93, 0x9d,
	0x1f, 0xd9, 0x5c, 0x95, 0xa9, 0x24, 0xa5, 0x8a, 0x32, 0xa8, 0xb2, 0x85, 0x50, 0x2a, 0xe9, 0x7a,
	0xcf, 0x47, 0x48, 0xa9, 0x2a, 0x97, 0x62, 0x31, 0x5a, 0x4a, 0xb7, 0x01, 0x9a, 0xb4, 0xc1, 0x02,
	0x6a, 0x37, 0x1e, 0x9a, 0xf4, 0x89, 0x02, 0x78, 0xdf, 0x73, 0x63, 0xb1, 0x96, 0xfa, 0x29, 0x56,
	0xd1, 0xe1, 0x24, 0xd4, 0xb9, 0x2d, 0x8e, 0xbd, 0xbf, 0x15, 0xdc, 0xe8, 0x3a, 0x66, 0xfb, 0x44,
	0xda, 0x5a, 0x85, 0x05, 0x83, 0x64, 0x85, 0x2a, 0x0d, 0x1a, 0x1b, 0xaa, 0x6c, 0x75, 0xce, 0x8c,
	0x8d, 0x7f, 0xb3, 0x43, 0xf1, 0x6f, 0x48, 0xdf, 0x73, 0x23, 0xf4, 0x6d, 0x25, 0xca, 0x25, 0x37,
	0x51, 0x9e, 0x58, 0xad, 0xae, 0xc9, 0xc0, 0x59, 0xbe, 0x6c, 0x61, 0x42, 0x5f, 0xb6, 0x38, 0xd2,
	0x97, 0x65, 0x16, 0xb8, 0x64, 0x7d, 0x95, 0xdf, 0xc7, 0x5c, 0xbc, 0x9f, 0x9c, 0xb5, 0x63, 0x96,
	0x24, 0x93, 0xab, 0xfb, 0xab, 0x02, 0xa6, 0xe6, 0x13, 0xed, 0xff, 0x9f, 0xbe, 0xbf, 0x5d, 0x7d,
	0x7b, 0xeb, 0x76, 0x8f, 0x58, 0x7f, 0x8a, 0xcf, 0x38, 0x09, 0xab, 0x74, 0xb4, 0xc3, 0x5d, 0xb7,
	0x9b, 0xc1, 0x13, 0xe0, 0x7f, 0x0c, 0x77, 0x24, 0x7e, 0xe8, 0xfb, 0xac, 0x69, 0x1a, 0x30, 0xfb,
	0x31, 0xe1, 0x01, 0x0f, 0xda, 0x59, 0xda, 0x54, 0x86, 0xa2, 0xd5, 0x7a, 0xc7, 0xb1, 0xf7, 0x81,
	0x6d, 0x34, 0xb8, 0x63, 0x2c, 0x7a, 0x8c, 0x2e, 0x45, 0x25, 0x0a, 0x86, 0x7e, 0xf6, 0xf0, 0xd1,
	0x4e, 0x4c, 0xec, 0x96, 0x43, 0x09, 0x69, 0x26, 0xc6, 0x3f, 0xcb, 0x61, 0xf9, 0x5d, 0x58, 0x64,
	0xbd, 0xa8, 0x11, 0xb1, 0xb8, 0x71, 0x14, 0xa6, 0xb1, 0xd1, 0x3e, 0xeb, 0x45, 0x7b, 0x2c, 0xde,
	0x09, 0xd3, 0x58, 0x9e, 0xd9, 0x0c, 0x59, 0x4b, 0x2b, 0x1d, 0xc7, 0x9e, 0x70, 0x1a, 0xe3, 0x24,
	0xd0, 0xb7, 0xcc, 0xf8, 0xd4, 0xe9, 0x50, 0xae, 0x9f, 0x0e, 0xad, 0xc2, 0xfc, 0x61, 0xda, 0x6a,
	0x35, 0x90, 0x94, 0xd5, 0x04, 0x94, 0xc0, 0x6a, 0xc8, 0x5a, 0x52, 0xbb, 0x1d, 0xd2, 0x6b, 0xd0,
	0x34, 0x26, 0x82, 0x87, 0x26, 0x68, 0x2e, 0x74, 0x48, 0xef, 0xb1, 0x06, 0x79, 0x1d, 0xb8, 0xa9,
	0xfa, 0x0c, 0x96, 0x18, 0xad, 0xa2, 0xff, 0xb6, 0xf3, 0xac, 0x92, 0xd3, 0x9e, 0x3b, 0x7b, 0x52,
	0xb9, 0xee, 0x94, 0x17, 0x68, 0xa1, 0xa6, 0xb4, 0x78, 0xa7, 0x5f, 0x5a, 0x58, 0xed, 0xff, 0x2f,
	0x72, 0xaa, 0x9b, 0xf8, 0xfa, 0xcf, 0x5b, 0x86, 0xb9, 0x54, 0x15, 0x05, 0x78, 0x62, 0xa9, 0x66,
	0xa6, 0x7d, 0x4e, 0x8a, 0x36, 0x27, 0x3f, 0xc3, 0xd7, 0xad, 0x83, 0x84, 0xa1, 0x17, 0x78, 0xb3,
	0xb7, 0xfe, 0x4d, 0x4e, 0x65, 0xf9, 0xdf, 0xc6, 0x61, 0xb6, 0x20, 0x8a, 0x8e, 0x20, 0xbc, 0x3d,
	0xcc, 0xeb, 0x06, 0xb9, 0xa8, 0x9c, 0x95, 0xfe, 0xda, 0x1c, 0x14, 0x1d, 0x0e, 0xbc, 0xae, 0x4a,
	0xa8, 0xa7, 0xa5, 0x78, 0x2a, 0x8b, 0xfd, 0x0c, 0x7f, 0xc6, 0xce, 0xf0, 0xb5, 0xe9, 0xcf, 0xf6,
	0xcb, 0x9d, 0x2a, 0xdc, 0xab, 0x56, 0xea, 0x9b, 0xa9, 0x08, 0x0f, 0x12, 0x86, 0x87, 0x1e, 0x04,
	0x82, 0xfb, 0x53, 0x15, 0x18, 0xde, 0x6f, 0x73, 0x70, 0x4f, 0xbf, 0x3a, 0x9e, 0x9f, 0x4a, 0x9f,
	0xe5, 0xfc, 0x08, 0x96, 0x0b, 0x4e, 0xe5, 0x79, 0x8a, 0x5e, 0x3e, 0xc2, 0x2f, 0x7f, 0x9b, 0x89,
	0x67, 0xa4, 0x37, 0xf9, 0xe3, 0xef, 0x87, 0x28, 0x7b, 0xb5, 0x6b, 0x87, 0x11, 0x7f, 0x82, 0x2d,
	0x7f, 0x57, 0x65, 0xd8, 0x67, 0x3c, 0xdd, 0x4e, 0xa5, 0x83, 0x09, 0x92, 0xd4, 0x17, 0xd9, 0x86,
	0x28, 0xe6, 0xbf, 0x60, 0xa6, 0xe7, 0x82, 0x13, 0xb4, 0xcd, 0x98, 0x8b, 0x46, 0x27, 0xf5, 0x05,
	0xcf, 0x12, 0xb7, 0x98, 0xab, 0xf6, 0x53, 0x79, 0x03, 0xde, 0xe9, 0x2f, 0x37, 0x78, 0xa7, 0xed,
	0x34, 0x17, 0x2f, 0x65, 0x88, 0xbb, 0x9d, 0xb6, 0x6a, 0x11, 0xae, 0xc2, 0x82, 0x48, 0x45, 0x18,
	0x6b, 0xbc, 0xa2, 0xee, 0x21, 0x4a, 0x90, 0x42, 0xb8, 0x0b, 0x17, 0xc2, 0x98, 0xb7, 0x79, 0x40,
	0x7c, 0x8d, 0xa3, 0x0c, 0x61, 0xc9, 0x40, 0x55, 0xeb, 0x28, 0x81, 0xd5, 0xa1, 0x7b, 0x3c, 0x8a,
	0x43, 0x42, 0x9b, 0x24, 0x11, 0x63, 0xde, 0x25, 0xce, 0xba, 0xd0, 0x4d, 0x98, 0x3f, 0x62, 0x71,
	0xd8, 0xc0, 0xa4, 0xa5, 0x80, 0x25, 0x51, 0x49, 0x02, 0x64, 0xfd, 0xe4, 0xed, 0xa1, 0xeb, 0xd2,
	0x87, 0x0e, 0x3f, 0x00, 0x67, 0xaf, 0x5a, 0x79, 0xeb, 0x55, 0x4b, 0x52, 0x0c, 0x58, 0x4f, 0x3f,
	0xb9, 0xe9, 0xa2, 0x45, 0x02, 0xb0, 0x2d, 0x7a, 0x1f, 0x13, 0x5f, 0x4d, 0xb1, 0xc6, 0x5a, 0x31,
	0x4b, 0x8e, 0xb2, 0x3e, 0x1b, 0x36, 0x72, 0x3b, 0xa4, 0xa7, 0xdb, 0xc2, 0xd8, 0xc8, 0x7d, 0x46,
	0x7a, 0xde, 0x89, 0xad, 0x43, 0x67, 0xd3, 0x80, 0x74, 0x73, 0x43, 0xd2, 0xc5, 0x7c, 0x08, 0x37,
	0x34, 0x6c, 0x56, 0x17, 0x35, 0x10, 0xef, 0xe4, 0x1c, 0x5d, 0x70, 0x8f, 0xfe, 0x14, 0xd6, 0xa4,
	0x03, 0x09, 0xfc, 0xb0, 0xf9, 0x2a, 0x0b, 0xda, 0x89, 0x90, 0x9e, 0x5c, 0xd4, 0x23, 0xe6, 0x9f,
	0xd5, 0x6c, 0x90, 0x04, 0xa4, 0xbf, 0x38, 0x3f, 0x81, 0xff, 0x83, 0x4b, 0xf5, 0x4a, 0xf5, 0x39,
	0xeb, 0x62, 0x0f, 0x3f, 0x19, 0xd7, 0x2f, 0xfc, 0x04, 0xab, 0xbf, 0x6d, 0x26, 0xac, 0x4a, 0xff,
	0x31, 0x13, 0x84, 0xfb, 0xc9, 0x59, 0xa7, 0xbc, 0xc0, 0x02, 0xe7, 0x3c, 0x5b, 0x25, 0x2f, 0x32,
	0xd3, 0x4a, 0x74, 0x9b, 0x40, 0x4d, 0xbc, 0x07, 0xf6, 0x23, 0xf3, 0x14, 0x8c, 0x3c, 0xb5, 0x5f,
	0x9a, 0xbf, 0x31, 0x17, 0x7f, 0xc8, 0xc1, 0x8a, 0x95, 0xd6, 0x84, 0x61, 0x64, 0xe5, 0x6e, 0x8a,
	0xe4, 0xda, 0x60, 0x93, 0xdf, 0x24, 0x15, 0x76, 0xa3, 0x7f, 0x0d, 0x16, 0xd4, 0x3b, 0xf2, 0x31,
	0xf1, 0x53, 0xb6, 0x3c, 0xdb, 0x47, 0x42, 0xf0, 0x4b, 0x09, 0x95, 0xc9, 0x09, 0x0b, 0xa8, 0x46,
	0x99, 0xeb, 0x27, 0x27, 0x2c, 0xa0, 0x88, 0xe0, 0x1d, 0xa0, 0x7e, 0x9c, 0x66, 0xcc, 0x8b, 0x56,
	0x8b, 0x37, 0x39, 0x19, 0xb6, 0x82, 0x82, 0x7b, 0xbd, 0x1b, 0x50, 0x0a, 0x35, 0xaa, 0xf6, 0x21,
	0xd9, 0x5c, 0x92, 0x1d, 0xec, 0xf1, 0xbc, 0x0e, 0xb2, 0xbf, 0xca, 0xa1, 0x0a, 0xeb, 0x99, 0x4d,
	0xb8, 0x44, 0x6f, 0xd9, 0x44, 0xb3, 0x36, 0xab, 0x21, 0xbc, 0xe2, 0x10, 0xce, 0x44, 0x61, 0x60,
	0xe5, 0xbb, 0xb0, 0x68, 0xc6, 0x0d, 0x4e, 0xa5, 0xcf, 0xcb, 0xfe, 0x00, 0x60, 0xe0, 0xbb, 0xb4,
	0x87, 0x3c, 0xa8, 0x8e, 0xf9, 0x7f, 0x8f, 0x87, 0x87, 0x98, 0xe1, 0x3f, 0x65, 0xe4, 0xf8, 0x4c,
	0xe9, 0x0e, 0xd8, 0xf2, 0x43, 0x8c, 0x72, 0xe7, 0xd9, 0xf9, 0x02, 0xdf, 0xcf, 0x37, 0x29, 0xdd,
	0x0e, 0x83, 0x76, 0x2f, 0x0d, 0xce, 0xb2, 0x7e, 0xfd, 0xe7, 0xa7, 0xb6, 0xc2, 0xb6, 0xfe, 0xfc,
	0xa4, 0xf7, 0x7b, 0x3e, 0x96, 0xa0, 0x18, 0xf3, 0x83, 0xf6, 0x8f, 0xd3, 0xc0, 0xca, 0xc6, 0xde,
	0x40, 0x2b, 0x7d, 0x1f, 0x6b, 0x8f, 0x29, 0x4f, 0x9b, 0xee, 0x0e, 0xbd, 0x6f, 0xf5, 0x0e, 0xbd,
	0xd7, 0x75, 0x07, 0xf5, 0x2c, 0x57, 0xf5, 0xc3, 0x84, 0xa1, 0x27, 0xda, 0x4e, 0xb9, 0xe9, 0xe9,
	0xcb, 0x04, 0x46, 0xc2, 0x75, 0xf4, 0x53, 0x13, 0xfd, 0x2c, 0x37, 0xc5, 0x86, 0x97, 0x68, 0xae,
	0x2f, 0x39, 0xeb, 0xbe, 0x10, 0x47, 0x2c, 0xde, 0x61, 0x71, 0xe8, 0x3c, 0x0b, 0x5d, 0x83, 0x39,
	0x0c, 0xf8, 0x3a, 0xf3, 0x5e, 0xac, 0xcd, 0xca, 0xe9, 0x2e, 0x1d, 0xc8, 0xca, 0xf3, 0x03, 0x59,
	0xb9, 0x17, 0xa0, 0x31, 0x4f, 0x44, 0x37, 0xef, 0xd0, 0x1d, 0x97, 0x61, 0xd8, 0xa2, 0x2c, 0x3a,
	0xff, 0x14, 0xf0, 0x3e, 0xc2, 0xc7, 0x2f, 0x7d, 0xc4, 0xa3, 0x30, 0x0e, 0x26, 0xa9, 0x1d, 0xbc,
	0x0d, 0x7c, 0x0b, 0x1b, 0xda, 0x75, 0xea, 0x1f, 0x30, 0xbc, 0x07, 0xf8, 0xee, 0xa7, 0x37, 0x1c,
	0x44, 0xd2, 0x9d, 0x4f, 0x74, 0xd0, 0x67, 0xf8, 0x94, 0x37, 0x62, 0x5f, 0x19, 0x8a, 0x72, 0x62,
	0xda, 0xb8, 0x72, 0x3c, 0x40, 0xab, 0x30, 0x48, 0xeb, 0x87, 0x76, 0x7f, 0xe8, 0x49, 0xaf, 0x89,
	0x39, 0x56, 0x26, 0xd5, 0x26, 0x89, 0x3e, 0xec, 0xb3, 0x30, 0x2b, 0xa7, 0xbb, 0x54, 0x2f, 0x54,
	0xfa, 0xaa, 0x92, 0x0b, 0x95, 0x5d, 0xea, 0x6d, 0xda, 0x75, 0xbf, 0x4b, 0x4c, 0xd6, 0xe0, 0x24,
	0xfa, 0xd0, 0xfc, 0x0d, 0x41, 0x8e, 0x35, 0xac, 0xa2, 0x75, 0x86, 0x63, 0xef, 0x3e, 0xdc, 0x91,
	0xa5, 0x46, 0x53, 0xf0, 0xe3, 0x7e, 0x48, 0xd9, 0x8a, 0x39, 0x0b, 0x68, 0x72, 0xc4, 0xa3, 0xd1,
	0x8d, 0x8a, 0xfb, 0xd8, 0xa8, 0x98, 0x72, 0xd3, 0x67, 0x58, 0x25, 0xd6, 0x8f, 0xc2, 0xee, 0x9e,
	0xcc, 0xbe, 0x1d, 0x83, 0x1a, 0x1b, 0xeb, 0x59, 0x8f, 0x27, 0xe6, 0x8f, 0x13, 0x6a, 0xe2, 0x31,
	0x58, 0xad, 0x56, 0xea, 0xcf, 0x43, 0xc1, 0x9b, 0xcc, 0xf8, 0xd9, 0x1d, 0x92, 0x48, 0x8b, 0x35,
	0x09, 0xeb, 0x2a, 0x2c, 0x58, 0x1e, 0xdf, 0xa4, 0x8b, 0x7d, 0x67, 0x5f, 0xbe, 0x33, 0x10, 0x12,
	0x94, 0x68, 0x9d, 0x70, 0xc0, 0x30, 0x11, 0x7f, 0xd3, 0xc7, 0x3c, 0xba, 0xf5, 0x8f, 0xaf, 0x57,
	0x72, 0xff, 0xfc, 0x7a, 0x25, 0xf7, 0xaf, 0xaf, 0x57, 0x72, 0x5f, 0xfe, 0x7b, 0xe5, 0xad, 0x9d,
	0xdc, 0xe7, 0x25, 0xf3, 0xf7, 0xe2, 0xc3, 0x59, 0xfc, 0x63, 0xf1, 0xfd, 0xff, 0x04, 0x00, 0x00,
	0xff, 0xff, 0x5c, 0xe0, 0x07, 0x1c, 0x9b, 0x2c, 0x00, 0x00,
}
