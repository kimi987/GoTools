// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/gen/pb/chat/chat.proto
// DO NOT EDIT!

/*
	Package chat is a generated protocol buffer package.

	It is generated from these files:
		github.com/lightpaw/male7/gen/pb/chat/chat.proto

	It has these top-level messages:
		C2SWorldChatProto
		S2CWorldOtherChatProto
		C2SGuildChatProto
		S2CGuildOtherChatProto
		S2CSelfChatWindowProto
		C2SCreateSelfChatWindowProto
		S2CCreateSelfChatWindowProto
		C2SRemoveChatWindowProto
		S2CRemoveChatWindowProto
		C2SListHistoryChatProto
		S2CListHistoryChatProto
		C2SSendChatProto
		S2CSendChatProto
		S2COtherSendChatProto
		C2SReadChatMsgProto
		S2CReadChatMsgProto
		C2SGetHeroChatInfoProto
		S2CGetHeroChatInfoProto
		S2CBanChatProto
*/
package chat

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type C2SWorldChatProto struct {
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (m *C2SWorldChatProto) Reset()                    { *m = C2SWorldChatProto{} }
func (m *C2SWorldChatProto) String() string            { return proto.CompactTextString(m) }
func (*C2SWorldChatProto) ProtoMessage()               {}
func (*C2SWorldChatProto) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{0} }

func (m *C2SWorldChatProto) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type S2CWorldOtherChatProto struct {
	Id                     []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Head                   string `protobuf:"bytes,3,opt,name=head,proto3" json:"head,omitempty"`
	GuildFlag              string `protobuf:"bytes,6,opt,name=guild_flag,json=guildFlag,proto3" json:"guild_flag,omitempty"`
	Text                   string `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	WhiteFlagGuildFlagName string `protobuf:"bytes,7,opt,name=white_flag_guild_flag_name,json=whiteFlagGuildFlagName,proto3" json:"white_flag_guild_flag_name,omitempty"`
}

func (m *S2CWorldOtherChatProto) Reset()                    { *m = S2CWorldOtherChatProto{} }
func (m *S2CWorldOtherChatProto) String() string            { return proto.CompactTextString(m) }
func (*S2CWorldOtherChatProto) ProtoMessage()               {}
func (*S2CWorldOtherChatProto) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{1} }

func (m *S2CWorldOtherChatProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *S2CWorldOtherChatProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *S2CWorldOtherChatProto) GetHead() string {
	if m != nil {
		return m.Head
	}
	return ""
}

func (m *S2CWorldOtherChatProto) GetGuildFlag() string {
	if m != nil {
		return m.GuildFlag
	}
	return ""
}

func (m *S2CWorldOtherChatProto) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *S2CWorldOtherChatProto) GetWhiteFlagGuildFlagName() string {
	if m != nil {
		return m.WhiteFlagGuildFlagName
	}
	return ""
}

type C2SGuildChatProto struct {
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (m *C2SGuildChatProto) Reset()                    { *m = C2SGuildChatProto{} }
func (m *C2SGuildChatProto) String() string            { return proto.CompactTextString(m) }
func (*C2SGuildChatProto) ProtoMessage()               {}
func (*C2SGuildChatProto) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{2} }

func (m *C2SGuildChatProto) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type S2CGuildOtherChatProto struct {
	Id                     []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Head                   string `protobuf:"bytes,3,opt,name=head,proto3" json:"head,omitempty"`
	Text                   string `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	WhiteFlagGuildFlagName string `protobuf:"bytes,5,opt,name=white_flag_guild_flag_name,json=whiteFlagGuildFlagName,proto3" json:"white_flag_guild_flag_name,omitempty"`
}

func (m *S2CGuildOtherChatProto) Reset()                    { *m = S2CGuildOtherChatProto{} }
func (m *S2CGuildOtherChatProto) String() string            { return proto.CompactTextString(m) }
func (*S2CGuildOtherChatProto) ProtoMessage()               {}
func (*S2CGuildOtherChatProto) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{3} }

func (m *S2CGuildOtherChatProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *S2CGuildOtherChatProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *S2CGuildOtherChatProto) GetHead() string {
	if m != nil {
		return m.Head
	}
	return ""
}

func (m *S2CGuildOtherChatProto) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *S2CGuildOtherChatProto) GetWhiteFlagGuildFlagName() string {
	if m != nil {
		return m.WhiteFlagGuildFlagName
	}
	return ""
}

type S2CSelfChatWindowProto struct {
	Sender [][]byte `protobuf:"bytes,3,rep,name=sender" json:"sender,omitempty"`
	Unread []int32  `protobuf:"varint,2,rep,name=unread" json:"unread,omitempty"`
}

func (m *S2CSelfChatWindowProto) Reset()                    { *m = S2CSelfChatWindowProto{} }
func (m *S2CSelfChatWindowProto) String() string            { return proto.CompactTextString(m) }
func (*S2CSelfChatWindowProto) ProtoMessage()               {}
func (*S2CSelfChatWindowProto) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{4} }

func (m *S2CSelfChatWindowProto) GetSender() [][]byte {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *S2CSelfChatWindowProto) GetUnread() []int32 {
	if m != nil {
		return m.Unread
	}
	return nil
}

type C2SCreateSelfChatWindowProto struct {
	Target []byte `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	SetUp  bool   `protobuf:"varint,2,opt,name=set_up,json=setUp,proto3" json:"set_up,omitempty"`
}

func (m *C2SCreateSelfChatWindowProto) Reset()                    { *m = C2SCreateSelfChatWindowProto{} }
func (m *C2SCreateSelfChatWindowProto) String() string            { return proto.CompactTextString(m) }
func (*C2SCreateSelfChatWindowProto) ProtoMessage()               {}
func (*C2SCreateSelfChatWindowProto) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{5} }

func (m *C2SCreateSelfChatWindowProto) GetTarget() []byte {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *C2SCreateSelfChatWindowProto) GetSetUp() bool {
	if m != nil {
		return m.SetUp
	}
	return false
}

type S2CCreateSelfChatWindowProto struct {
	Target []byte `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	SetUp  bool   `protobuf:"varint,2,opt,name=set_up,json=setUp,proto3" json:"set_up,omitempty"`
}

func (m *S2CCreateSelfChatWindowProto) Reset()                    { *m = S2CCreateSelfChatWindowProto{} }
func (m *S2CCreateSelfChatWindowProto) String() string            { return proto.CompactTextString(m) }
func (*S2CCreateSelfChatWindowProto) ProtoMessage()               {}
func (*S2CCreateSelfChatWindowProto) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{6} }

func (m *S2CCreateSelfChatWindowProto) GetTarget() []byte {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *S2CCreateSelfChatWindowProto) GetSetUp() bool {
	if m != nil {
		return m.SetUp
	}
	return false
}

type C2SRemoveChatWindowProto struct {
	ChatType   int32  `protobuf:"varint,1,opt,name=chat_type,json=chatType,proto3" json:"chat_type,omitempty"`
	ChatTarget []byte `protobuf:"bytes,2,opt,name=chat_target,json=chatTarget,proto3" json:"chat_target,omitempty"`
}

func (m *C2SRemoveChatWindowProto) Reset()                    { *m = C2SRemoveChatWindowProto{} }
func (m *C2SRemoveChatWindowProto) String() string            { return proto.CompactTextString(m) }
func (*C2SRemoveChatWindowProto) ProtoMessage()               {}
func (*C2SRemoveChatWindowProto) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{7} }

func (m *C2SRemoveChatWindowProto) GetChatType() int32 {
	if m != nil {
		return m.ChatType
	}
	return 0
}

func (m *C2SRemoveChatWindowProto) GetChatTarget() []byte {
	if m != nil {
		return m.ChatTarget
	}
	return nil
}

type S2CRemoveChatWindowProto struct {
	ChatType   int32  `protobuf:"varint,1,opt,name=chat_type,json=chatType,proto3" json:"chat_type,omitempty"`
	ChatTarget []byte `protobuf:"bytes,2,opt,name=chat_target,json=chatTarget,proto3" json:"chat_target,omitempty"`
}

func (m *S2CRemoveChatWindowProto) Reset()                    { *m = S2CRemoveChatWindowProto{} }
func (m *S2CRemoveChatWindowProto) String() string            { return proto.CompactTextString(m) }
func (*S2CRemoveChatWindowProto) ProtoMessage()               {}
func (*S2CRemoveChatWindowProto) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{8} }

func (m *S2CRemoveChatWindowProto) GetChatType() int32 {
	if m != nil {
		return m.ChatType
	}
	return 0
}

func (m *S2CRemoveChatWindowProto) GetChatTarget() []byte {
	if m != nil {
		return m.ChatTarget
	}
	return nil
}

type C2SListHistoryChatProto struct {
	ChatType   int32  `protobuf:"varint,1,opt,name=chat_type,json=chatType,proto3" json:"chat_type,omitempty"`
	ChatTarget []byte `protobuf:"bytes,2,opt,name=chat_target,json=chatTarget,proto3" json:"chat_target,omitempty"`
	MinChatId  []byte `protobuf:"bytes,3,opt,name=min_chat_id,json=minChatId,proto3" json:"min_chat_id,omitempty"`
}

func (m *C2SListHistoryChatProto) Reset()                    { *m = C2SListHistoryChatProto{} }
func (m *C2SListHistoryChatProto) String() string            { return proto.CompactTextString(m) }
func (*C2SListHistoryChatProto) ProtoMessage()               {}
func (*C2SListHistoryChatProto) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{9} }

func (m *C2SListHistoryChatProto) GetChatType() int32 {
	if m != nil {
		return m.ChatType
	}
	return 0
}

func (m *C2SListHistoryChatProto) GetChatTarget() []byte {
	if m != nil {
		return m.ChatTarget
	}
	return nil
}

func (m *C2SListHistoryChatProto) GetMinChatId() []byte {
	if m != nil {
		return m.MinChatId
	}
	return nil
}

type S2CListHistoryChatProto struct {
	ChatMsg [][]byte `protobuf:"bytes,1,rep,name=chat_msg,json=chatMsg" json:"chat_msg,omitempty"`
}

func (m *S2CListHistoryChatProto) Reset()                    { *m = S2CListHistoryChatProto{} }
func (m *S2CListHistoryChatProto) String() string            { return proto.CompactTextString(m) }
func (*S2CListHistoryChatProto) ProtoMessage()               {}
func (*S2CListHistoryChatProto) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{10} }

func (m *S2CListHistoryChatProto) GetChatMsg() [][]byte {
	if m != nil {
		return m.ChatMsg
	}
	return nil
}

type C2SSendChatProto struct {
	ChatMsg  []byte `protobuf:"bytes,1,opt,name=chat_msg,json=chatMsg,proto3" json:"chat_msg,omitempty"`
	Receiver bool   `protobuf:"varint,2,opt,name=receiver,proto3" json:"receiver,omitempty"`
}

func (m *C2SSendChatProto) Reset()                    { *m = C2SSendChatProto{} }
func (m *C2SSendChatProto) String() string            { return proto.CompactTextString(m) }
func (*C2SSendChatProto) ProtoMessage()               {}
func (*C2SSendChatProto) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{11} }

func (m *C2SSendChatProto) GetChatMsg() []byte {
	if m != nil {
		return m.ChatMsg
	}
	return nil
}

func (m *C2SSendChatProto) GetReceiver() bool {
	if m != nil {
		return m.Receiver
	}
	return false
}

type S2CSendChatProto struct {
	ChatId      []byte `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Receiver    []byte `protobuf:"bytes,2,opt,name=receiver,proto3" json:"receiver,omitempty"`
	ReplaceText string `protobuf:"bytes,3,opt,name=replace_text,json=replaceText,proto3" json:"replace_text,omitempty"`
}

func (m *S2CSendChatProto) Reset()                    { *m = S2CSendChatProto{} }
func (m *S2CSendChatProto) String() string            { return proto.CompactTextString(m) }
func (*S2CSendChatProto) ProtoMessage()               {}
func (*S2CSendChatProto) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{12} }

func (m *S2CSendChatProto) GetChatId() []byte {
	if m != nil {
		return m.ChatId
	}
	return nil
}

func (m *S2CSendChatProto) GetReceiver() []byte {
	if m != nil {
		return m.Receiver
	}
	return nil
}

func (m *S2CSendChatProto) GetReplaceText() string {
	if m != nil {
		return m.ReplaceText
	}
	return ""
}

type S2COtherSendChatProto struct {
	ChatMsg []byte `protobuf:"bytes,1,opt,name=chat_msg,json=chatMsg,proto3" json:"chat_msg,omitempty"`
}

func (m *S2COtherSendChatProto) Reset()                    { *m = S2COtherSendChatProto{} }
func (m *S2COtherSendChatProto) String() string            { return proto.CompactTextString(m) }
func (*S2COtherSendChatProto) ProtoMessage()               {}
func (*S2COtherSendChatProto) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{13} }

func (m *S2COtherSendChatProto) GetChatMsg() []byte {
	if m != nil {
		return m.ChatMsg
	}
	return nil
}

type C2SReadChatMsgProto struct {
	ChatType   int32  `protobuf:"varint,1,opt,name=chat_type,json=chatType,proto3" json:"chat_type,omitempty"`
	ChatTarget []byte `protobuf:"bytes,2,opt,name=chat_target,json=chatTarget,proto3" json:"chat_target,omitempty"`
}

func (m *C2SReadChatMsgProto) Reset()                    { *m = C2SReadChatMsgProto{} }
func (m *C2SReadChatMsgProto) String() string            { return proto.CompactTextString(m) }
func (*C2SReadChatMsgProto) ProtoMessage()               {}
func (*C2SReadChatMsgProto) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{14} }

func (m *C2SReadChatMsgProto) GetChatType() int32 {
	if m != nil {
		return m.ChatType
	}
	return 0
}

func (m *C2SReadChatMsgProto) GetChatTarget() []byte {
	if m != nil {
		return m.ChatTarget
	}
	return nil
}

type S2CReadChatMsgProto struct {
	ChatType   int32  `protobuf:"varint,1,opt,name=chat_type,json=chatType,proto3" json:"chat_type,omitempty"`
	ChatTarget []byte `protobuf:"bytes,2,opt,name=chat_target,json=chatTarget,proto3" json:"chat_target,omitempty"`
}

func (m *S2CReadChatMsgProto) Reset()                    { *m = S2CReadChatMsgProto{} }
func (m *S2CReadChatMsgProto) String() string            { return proto.CompactTextString(m) }
func (*S2CReadChatMsgProto) ProtoMessage()               {}
func (*S2CReadChatMsgProto) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{15} }

func (m *S2CReadChatMsgProto) GetChatType() int32 {
	if m != nil {
		return m.ChatType
	}
	return 0
}

func (m *S2CReadChatMsgProto) GetChatTarget() []byte {
	if m != nil {
		return m.ChatTarget
	}
	return nil
}

type C2SGetHeroChatInfoProto struct {
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SGetHeroChatInfoProto) Reset()                    { *m = C2SGetHeroChatInfoProto{} }
func (m *C2SGetHeroChatInfoProto) String() string            { return proto.CompactTextString(m) }
func (*C2SGetHeroChatInfoProto) ProtoMessage()               {}
func (*C2SGetHeroChatInfoProto) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{16} }

func (m *C2SGetHeroChatInfoProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type S2CGetHeroChatInfoProto struct {
	Id      []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Tower   int32  `protobuf:"varint,2,opt,name=tower,proto3" json:"tower,omitempty"`
	JunXian int32  `protobuf:"varint,3,opt,name=jun_xian,json=junXian,proto3" json:"jun_xian,omitempty"`
}

func (m *S2CGetHeroChatInfoProto) Reset()                    { *m = S2CGetHeroChatInfoProto{} }
func (m *S2CGetHeroChatInfoProto) String() string            { return proto.CompactTextString(m) }
func (*S2CGetHeroChatInfoProto) ProtoMessage()               {}
func (*S2CGetHeroChatInfoProto) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{17} }

func (m *S2CGetHeroChatInfoProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *S2CGetHeroChatInfoProto) GetTower() int32 {
	if m != nil {
		return m.Tower
	}
	return 0
}

func (m *S2CGetHeroChatInfoProto) GetJunXian() int32 {
	if m != nil {
		return m.JunXian
	}
	return 0
}

type S2CBanChatProto struct {
	EndTime int32 `protobuf:"varint,1,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (m *S2CBanChatProto) Reset()                    { *m = S2CBanChatProto{} }
func (m *S2CBanChatProto) String() string            { return proto.CompactTextString(m) }
func (*S2CBanChatProto) ProtoMessage()               {}
func (*S2CBanChatProto) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{18} }

func (m *S2CBanChatProto) GetEndTime() int32 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func init() {
	proto.RegisterType((*C2SWorldChatProto)(nil), "proto.C2SWorldChatProto")
	proto.RegisterType((*S2CWorldOtherChatProto)(nil), "proto.S2CWorldOtherChatProto")
	proto.RegisterType((*C2SGuildChatProto)(nil), "proto.C2SGuildChatProto")
	proto.RegisterType((*S2CGuildOtherChatProto)(nil), "proto.S2CGuildOtherChatProto")
	proto.RegisterType((*S2CSelfChatWindowProto)(nil), "proto.S2CSelfChatWindowProto")
	proto.RegisterType((*C2SCreateSelfChatWindowProto)(nil), "proto.C2SCreateSelfChatWindowProto")
	proto.RegisterType((*S2CCreateSelfChatWindowProto)(nil), "proto.S2CCreateSelfChatWindowProto")
	proto.RegisterType((*C2SRemoveChatWindowProto)(nil), "proto.C2SRemoveChatWindowProto")
	proto.RegisterType((*S2CRemoveChatWindowProto)(nil), "proto.S2CRemoveChatWindowProto")
	proto.RegisterType((*C2SListHistoryChatProto)(nil), "proto.C2SListHistoryChatProto")
	proto.RegisterType((*S2CListHistoryChatProto)(nil), "proto.S2CListHistoryChatProto")
	proto.RegisterType((*C2SSendChatProto)(nil), "proto.C2SSendChatProto")
	proto.RegisterType((*S2CSendChatProto)(nil), "proto.S2CSendChatProto")
	proto.RegisterType((*S2COtherSendChatProto)(nil), "proto.S2COtherSendChatProto")
	proto.RegisterType((*C2SReadChatMsgProto)(nil), "proto.C2SReadChatMsgProto")
	proto.RegisterType((*S2CReadChatMsgProto)(nil), "proto.S2CReadChatMsgProto")
	proto.RegisterType((*C2SGetHeroChatInfoProto)(nil), "proto.C2SGetHeroChatInfoProto")
	proto.RegisterType((*S2CGetHeroChatInfoProto)(nil), "proto.S2CGetHeroChatInfoProto")
	proto.RegisterType((*S2CBanChatProto)(nil), "proto.S2CBanChatProto")
}
func (m *C2SWorldChatProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SWorldChatProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Text) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChat(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	return i, nil
}

func (m *S2CWorldOtherChatProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CWorldOtherChatProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChat(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChat(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Head) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChat(dAtA, i, uint64(len(m.Head)))
		i += copy(dAtA[i:], m.Head)
	}
	if len(m.Text) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintChat(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	if len(m.GuildFlag) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintChat(dAtA, i, uint64(len(m.GuildFlag)))
		i += copy(dAtA[i:], m.GuildFlag)
	}
	if len(m.WhiteFlagGuildFlagName) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintChat(dAtA, i, uint64(len(m.WhiteFlagGuildFlagName)))
		i += copy(dAtA[i:], m.WhiteFlagGuildFlagName)
	}
	return i, nil
}

func (m *C2SGuildChatProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SGuildChatProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Text) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChat(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	return i, nil
}

func (m *S2CGuildOtherChatProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CGuildOtherChatProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChat(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChat(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Head) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChat(dAtA, i, uint64(len(m.Head)))
		i += copy(dAtA[i:], m.Head)
	}
	if len(m.Text) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChat(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	if len(m.WhiteFlagGuildFlagName) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintChat(dAtA, i, uint64(len(m.WhiteFlagGuildFlagName)))
		i += copy(dAtA[i:], m.WhiteFlagGuildFlagName)
	}
	return i, nil
}

func (m *S2CSelfChatWindowProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSelfChatWindowProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Unread) > 0 {
		for _, num := range m.Unread {
			dAtA[i] = 0x10
			i++
			i = encodeVarintChat(dAtA, i, uint64(num))
		}
	}
	if len(m.Sender) > 0 {
		for _, b := range m.Sender {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintChat(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *C2SCreateSelfChatWindowProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCreateSelfChatWindowProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Target) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChat(dAtA, i, uint64(len(m.Target)))
		i += copy(dAtA[i:], m.Target)
	}
	if m.SetUp {
		dAtA[i] = 0x10
		i++
		if m.SetUp {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CCreateSelfChatWindowProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCreateSelfChatWindowProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Target) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChat(dAtA, i, uint64(len(m.Target)))
		i += copy(dAtA[i:], m.Target)
	}
	if m.SetUp {
		dAtA[i] = 0x10
		i++
		if m.SetUp {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *C2SRemoveChatWindowProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SRemoveChatWindowProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChat(dAtA, i, uint64(m.ChatType))
	}
	if len(m.ChatTarget) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChat(dAtA, i, uint64(len(m.ChatTarget)))
		i += copy(dAtA[i:], m.ChatTarget)
	}
	return i, nil
}

func (m *S2CRemoveChatWindowProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CRemoveChatWindowProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChat(dAtA, i, uint64(m.ChatType))
	}
	if len(m.ChatTarget) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChat(dAtA, i, uint64(len(m.ChatTarget)))
		i += copy(dAtA[i:], m.ChatTarget)
	}
	return i, nil
}

func (m *C2SListHistoryChatProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SListHistoryChatProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChat(dAtA, i, uint64(m.ChatType))
	}
	if len(m.ChatTarget) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChat(dAtA, i, uint64(len(m.ChatTarget)))
		i += copy(dAtA[i:], m.ChatTarget)
	}
	if len(m.MinChatId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChat(dAtA, i, uint64(len(m.MinChatId)))
		i += copy(dAtA[i:], m.MinChatId)
	}
	return i, nil
}

func (m *S2CListHistoryChatProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CListHistoryChatProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ChatMsg) > 0 {
		for _, b := range m.ChatMsg {
			dAtA[i] = 0xa
			i++
			i = encodeVarintChat(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *C2SSendChatProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SSendChatProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ChatMsg) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChat(dAtA, i, uint64(len(m.ChatMsg)))
		i += copy(dAtA[i:], m.ChatMsg)
	}
	if m.Receiver {
		dAtA[i] = 0x10
		i++
		if m.Receiver {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CSendChatProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSendChatProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ChatId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChat(dAtA, i, uint64(len(m.ChatId)))
		i += copy(dAtA[i:], m.ChatId)
	}
	if len(m.Receiver) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChat(dAtA, i, uint64(len(m.Receiver)))
		i += copy(dAtA[i:], m.Receiver)
	}
	if len(m.ReplaceText) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChat(dAtA, i, uint64(len(m.ReplaceText)))
		i += copy(dAtA[i:], m.ReplaceText)
	}
	return i, nil
}

func (m *S2COtherSendChatProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2COtherSendChatProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ChatMsg) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChat(dAtA, i, uint64(len(m.ChatMsg)))
		i += copy(dAtA[i:], m.ChatMsg)
	}
	return i, nil
}

func (m *C2SReadChatMsgProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SReadChatMsgProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChat(dAtA, i, uint64(m.ChatType))
	}
	if len(m.ChatTarget) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChat(dAtA, i, uint64(len(m.ChatTarget)))
		i += copy(dAtA[i:], m.ChatTarget)
	}
	return i, nil
}

func (m *S2CReadChatMsgProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CReadChatMsgProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChatType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChat(dAtA, i, uint64(m.ChatType))
	}
	if len(m.ChatTarget) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChat(dAtA, i, uint64(len(m.ChatTarget)))
		i += copy(dAtA[i:], m.ChatTarget)
	}
	return i, nil
}

func (m *C2SGetHeroChatInfoProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SGetHeroChatInfoProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChat(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *S2CGetHeroChatInfoProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CGetHeroChatInfoProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChat(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Tower != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChat(dAtA, i, uint64(m.Tower))
	}
	if m.JunXian != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChat(dAtA, i, uint64(m.JunXian))
	}
	return i, nil
}

func (m *S2CBanChatProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CBanChatProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EndTime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChat(dAtA, i, uint64(m.EndTime))
	}
	return i, nil
}

func encodeFixed64Chat(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Chat(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintChat(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *C2SWorldChatProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovChat(uint64(l))
	}
	return n
}

func (m *S2CWorldOtherChatProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovChat(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovChat(uint64(l))
	}
	l = len(m.Head)
	if l > 0 {
		n += 1 + l + sovChat(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovChat(uint64(l))
	}
	l = len(m.GuildFlag)
	if l > 0 {
		n += 1 + l + sovChat(uint64(l))
	}
	l = len(m.WhiteFlagGuildFlagName)
	if l > 0 {
		n += 1 + l + sovChat(uint64(l))
	}
	return n
}

func (m *C2SGuildChatProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovChat(uint64(l))
	}
	return n
}

func (m *S2CGuildOtherChatProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovChat(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovChat(uint64(l))
	}
	l = len(m.Head)
	if l > 0 {
		n += 1 + l + sovChat(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovChat(uint64(l))
	}
	l = len(m.WhiteFlagGuildFlagName)
	if l > 0 {
		n += 1 + l + sovChat(uint64(l))
	}
	return n
}

func (m *S2CSelfChatWindowProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Unread) > 0 {
		for _, e := range m.Unread {
			n += 1 + sovChat(uint64(e))
		}
	}
	if len(m.Sender) > 0 {
		for _, b := range m.Sender {
			l = len(b)
			n += 1 + l + sovChat(uint64(l))
		}
	}
	return n
}

func (m *C2SCreateSelfChatWindowProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovChat(uint64(l))
	}
	if m.SetUp {
		n += 2
	}
	return n
}

func (m *S2CCreateSelfChatWindowProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovChat(uint64(l))
	}
	if m.SetUp {
		n += 2
	}
	return n
}

func (m *C2SRemoveChatWindowProto) Size() (n int) {
	var l int
	_ = l
	if m.ChatType != 0 {
		n += 1 + sovChat(uint64(m.ChatType))
	}
	l = len(m.ChatTarget)
	if l > 0 {
		n += 1 + l + sovChat(uint64(l))
	}
	return n
}

func (m *S2CRemoveChatWindowProto) Size() (n int) {
	var l int
	_ = l
	if m.ChatType != 0 {
		n += 1 + sovChat(uint64(m.ChatType))
	}
	l = len(m.ChatTarget)
	if l > 0 {
		n += 1 + l + sovChat(uint64(l))
	}
	return n
}

func (m *C2SListHistoryChatProto) Size() (n int) {
	var l int
	_ = l
	if m.ChatType != 0 {
		n += 1 + sovChat(uint64(m.ChatType))
	}
	l = len(m.ChatTarget)
	if l > 0 {
		n += 1 + l + sovChat(uint64(l))
	}
	l = len(m.MinChatId)
	if l > 0 {
		n += 1 + l + sovChat(uint64(l))
	}
	return n
}

func (m *S2CListHistoryChatProto) Size() (n int) {
	var l int
	_ = l
	if len(m.ChatMsg) > 0 {
		for _, b := range m.ChatMsg {
			l = len(b)
			n += 1 + l + sovChat(uint64(l))
		}
	}
	return n
}

func (m *C2SSendChatProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.ChatMsg)
	if l > 0 {
		n += 1 + l + sovChat(uint64(l))
	}
	if m.Receiver {
		n += 2
	}
	return n
}

func (m *S2CSendChatProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.ChatId)
	if l > 0 {
		n += 1 + l + sovChat(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovChat(uint64(l))
	}
	l = len(m.ReplaceText)
	if l > 0 {
		n += 1 + l + sovChat(uint64(l))
	}
	return n
}

func (m *S2COtherSendChatProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.ChatMsg)
	if l > 0 {
		n += 1 + l + sovChat(uint64(l))
	}
	return n
}

func (m *C2SReadChatMsgProto) Size() (n int) {
	var l int
	_ = l
	if m.ChatType != 0 {
		n += 1 + sovChat(uint64(m.ChatType))
	}
	l = len(m.ChatTarget)
	if l > 0 {
		n += 1 + l + sovChat(uint64(l))
	}
	return n
}

func (m *S2CReadChatMsgProto) Size() (n int) {
	var l int
	_ = l
	if m.ChatType != 0 {
		n += 1 + sovChat(uint64(m.ChatType))
	}
	l = len(m.ChatTarget)
	if l > 0 {
		n += 1 + l + sovChat(uint64(l))
	}
	return n
}

func (m *C2SGetHeroChatInfoProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovChat(uint64(l))
	}
	return n
}

func (m *S2CGetHeroChatInfoProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovChat(uint64(l))
	}
	if m.Tower != 0 {
		n += 1 + sovChat(uint64(m.Tower))
	}
	if m.JunXian != 0 {
		n += 1 + sovChat(uint64(m.JunXian))
	}
	return n
}

func (m *S2CBanChatProto) Size() (n int) {
	var l int
	_ = l
	if m.EndTime != 0 {
		n += 1 + sovChat(uint64(m.EndTime))
	}
	return n
}

func sovChat(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozChat(x uint64) (n int) {
	return sovChat(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *C2SWorldChatProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SWorldChatProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SWorldChatProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CWorldOtherChatProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CWorldOtherChatProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CWorldOtherChatProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Head = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildFlag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildFlag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhiteFlagGuildFlagName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WhiteFlagGuildFlagName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SGuildChatProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SGuildChatProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SGuildChatProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CGuildOtherChatProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CGuildOtherChatProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CGuildOtherChatProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Head = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhiteFlagGuildFlagName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WhiteFlagGuildFlagName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSelfChatWindowProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSelfChatWindowProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSelfChatWindowProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChat
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Unread = append(m.Unread, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChat
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChat
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChat
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Unread = append(m.Unread, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Unread", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = append(m.Sender, make([]byte, postIndex-iNdEx))
			copy(m.Sender[len(m.Sender)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SCreateSelfChatWindowProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCreateSelfChatWindowProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCreateSelfChatWindowProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = append(m.Target[:0], dAtA[iNdEx:postIndex]...)
			if m.Target == nil {
				m.Target = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetUp", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SetUp = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCreateSelfChatWindowProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCreateSelfChatWindowProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCreateSelfChatWindowProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = append(m.Target[:0], dAtA[iNdEx:postIndex]...)
			if m.Target == nil {
				m.Target = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetUp", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SetUp = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SRemoveChatWindowProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SRemoveChatWindowProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SRemoveChatWindowProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatType", wireType)
			}
			m.ChatType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatTarget", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatTarget = append(m.ChatTarget[:0], dAtA[iNdEx:postIndex]...)
			if m.ChatTarget == nil {
				m.ChatTarget = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CRemoveChatWindowProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CRemoveChatWindowProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CRemoveChatWindowProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatType", wireType)
			}
			m.ChatType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatTarget", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatTarget = append(m.ChatTarget[:0], dAtA[iNdEx:postIndex]...)
			if m.ChatTarget == nil {
				m.ChatTarget = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SListHistoryChatProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SListHistoryChatProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SListHistoryChatProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatType", wireType)
			}
			m.ChatType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatTarget", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatTarget = append(m.ChatTarget[:0], dAtA[iNdEx:postIndex]...)
			if m.ChatTarget == nil {
				m.ChatTarget = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinChatId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinChatId = append(m.MinChatId[:0], dAtA[iNdEx:postIndex]...)
			if m.MinChatId == nil {
				m.MinChatId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CListHistoryChatProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CListHistoryChatProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CListHistoryChatProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatMsg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatMsg = append(m.ChatMsg, make([]byte, postIndex-iNdEx))
			copy(m.ChatMsg[len(m.ChatMsg)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SSendChatProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SSendChatProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SSendChatProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatMsg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatMsg = append(m.ChatMsg[:0], dAtA[iNdEx:postIndex]...)
			if m.ChatMsg == nil {
				m.ChatMsg = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Receiver = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSendChatProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSendChatProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSendChatProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatId = append(m.ChatId[:0], dAtA[iNdEx:postIndex]...)
			if m.ChatId == nil {
				m.ChatId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = append(m.Receiver[:0], dAtA[iNdEx:postIndex]...)
			if m.Receiver == nil {
				m.Receiver = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplaceText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplaceText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2COtherSendChatProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2COtherSendChatProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2COtherSendChatProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatMsg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatMsg = append(m.ChatMsg[:0], dAtA[iNdEx:postIndex]...)
			if m.ChatMsg == nil {
				m.ChatMsg = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SReadChatMsgProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SReadChatMsgProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SReadChatMsgProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatType", wireType)
			}
			m.ChatType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatTarget", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatTarget = append(m.ChatTarget[:0], dAtA[iNdEx:postIndex]...)
			if m.ChatTarget == nil {
				m.ChatTarget = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CReadChatMsgProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CReadChatMsgProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CReadChatMsgProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatType", wireType)
			}
			m.ChatType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatTarget", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatTarget = append(m.ChatTarget[:0], dAtA[iNdEx:postIndex]...)
			if m.ChatTarget == nil {
				m.ChatTarget = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SGetHeroChatInfoProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SGetHeroChatInfoProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SGetHeroChatInfoProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CGetHeroChatInfoProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CGetHeroChatInfoProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CGetHeroChatInfoProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tower", wireType)
			}
			m.Tower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tower |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JunXian", wireType)
			}
			m.JunXian = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JunXian |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CBanChatProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CBanChatProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CBanChatProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChat(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChat
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthChat
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowChat
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipChat(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthChat = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChat   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/gen/pb/chat/chat.proto", fileDescriptorChat)
}

var fileDescriptorChat = []byte{
	// 668 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0xd1, 0x4e, 0xdb, 0x4a,
	0x10, 0xc5, 0x09, 0x4e, 0xc8, 0x10, 0xdd, 0xcb, 0x35, 0x97, 0xe0, 0xcb, 0x6d, 0x53, 0xea, 0x97,
	0x52, 0xa9, 0x22, 0x95, 0x5b, 0xa9, 0x52, 0x1f, 0xb1, 0x54, 0x40, 0x82, 0xb6, 0xf2, 0x52, 0x81,
	0x78, 0xb1, 0x96, 0x78, 0xb0, 0x17, 0xd9, 0x6b, 0xcb, 0xde, 0x10, 0xf8, 0x93, 0x3e, 0xf6, 0x4f,
	0xfa, 0xda, 0xc7, 0x7e, 0x42, 0x45, 0x7f, 0xa4, 0xda, 0xb1, 0x21, 0xb4, 0xa5, 0x08, 0xa9, 0xe9,
	0x4b, 0xb2, 0x3b, 0x73, 0xf6, 0x9c, 0x39, 0x3b, 0xb3, 0x09, 0x3c, 0x8d, 0x84, 0x8a, 0x47, 0x47,
	0xeb, 0xc3, 0x2c, 0x1d, 0x24, 0x22, 0x8a, 0x55, 0xce, 0xc7, 0x83, 0x94, 0x27, 0xf8, 0x62, 0x10,
	0xa1, 0x1c, 0xe4, 0x47, 0x83, 0x61, 0xcc, 0x15, 0x7d, 0xac, 0xe7, 0x45, 0xa6, 0x32, 0xcb, 0xa4,
	0x2f, 0xe7, 0x11, 0xfc, 0xe3, 0xb9, 0x6c, 0x3f, 0x2b, 0x92, 0xd0, 0x8b, 0xb9, 0x7a, 0x4b, 0x39,
	0x0b, 0x66, 0x15, 0x9e, 0x29, 0xdb, 0x58, 0x35, 0xd6, 0x3a, 0x3e, 0xad, 0x9d, 0x8f, 0x06, 0xf4,
	0x98, 0xeb, 0x11, 0xf2, 0x8d, 0x8a, 0xb1, 0x98, 0xc0, 0xff, 0x82, 0x86, 0x08, 0x09, 0xdc, 0xf5,
	0x1b, 0x22, 0xd4, 0xc7, 0x25, 0x4f, 0xd1, 0x6e, 0x54, 0xc7, 0xf5, 0x5a, 0xc7, 0x62, 0xe4, 0xa1,
	0xdd, 0xac, 0x62, 0x7a, 0x7d, 0x25, 0x63, 0x4e, 0x64, 0xac, 0xfb, 0x00, 0xd1, 0x48, 0x24, 0x61,
	0x70, 0x9c, 0xf0, 0xc8, 0x6e, 0x51, 0xa6, 0x43, 0x91, 0x57, 0x09, 0x8f, 0xac, 0x97, 0xb0, 0x32,
	0x8e, 0x85, 0x42, 0x4a, 0x07, 0x13, 0x64, 0x40, 0x82, 0x6d, 0x82, 0xf7, 0x08, 0xa1, 0xe1, 0x9b,
	0x97, 0xe7, 0x5e, 0xf3, 0x14, 0x6b, 0xab, 0x14, 0xbb, 0xdd, 0xea, 0x87, 0xca, 0x2a, 0x21, 0xa7,
	0x6c, 0x75, 0xf6, 0x9a, 0xd5, 0xdb, 0xbd, 0x98, 0xb7, 0x7a, 0xd9, 0xa1, 0x0a, 0x19, 0x26, 0xc7,
	0xba, 0xb6, 0x7d, 0x21, 0xc3, 0x6c, 0x5c, 0x55, 0xb8, 0x02, 0xad, 0x91, 0x2c, 0xb4, 0x7e, 0x63,
	0xb5, 0xb9, 0x66, 0x6e, 0x34, 0x16, 0x66, 0xfc, 0x3a, 0x62, 0xf5, 0xa0, 0x55, 0xa2, 0x0c, 0xb1,
	0xb0, 0x9b, 0xab, 0xcd, 0xb5, 0xae, 0x5f, 0xef, 0x9c, 0x5d, 0xb8, 0xe7, 0xb9, 0xcc, 0x2b, 0x90,
	0x2b, 0xbc, 0x89, 0xb3, 0x07, 0x2d, 0xc5, 0x8b, 0x08, 0x55, 0xed, 0xbc, 0xde, 0x59, 0x4b, 0x9a,
	0x4f, 0x05, 0xa3, 0x9c, 0xfc, 0xcf, 0xf9, 0x66, 0x89, 0xea, 0x5d, 0xae, 0xe9, 0x98, 0xeb, 0x4d,
	0x8d, 0xee, 0x00, 0x6c, 0xcf, 0x65, 0x3e, 0xa6, 0xd9, 0x29, 0xfe, 0x48, 0xf5, 0x3f, 0x74, 0xf4,
	0x4c, 0x07, 0xea, 0x3c, 0x47, 0x62, 0x33, 0xfd, 0x39, 0x1d, 0xd8, 0x3b, 0xcf, 0xd1, 0x7a, 0x00,
	0xf3, 0x55, 0xb2, 0x12, 0x6b, 0x90, 0x18, 0x50, 0x9a, 0x22, 0x9a, 0x99, 0xb9, 0xde, 0x9f, 0x60,
	0x1e, 0xc3, 0xb2, 0xe7, 0xb2, 0x1d, 0x51, 0xaa, 0x2d, 0x51, 0xaa, 0xac, 0x38, 0x9f, 0x8c, 0xd0,
	0x6f, 0x11, 0x5b, 0x7d, 0x98, 0x4f, 0x85, 0x0c, 0x08, 0x24, 0xaa, 0x19, 0xeb, 0xfa, 0x9d, 0x54,
	0x48, 0x2d, 0xb0, 0x1d, 0x3a, 0xcf, 0x61, 0x99, 0xb9, 0xde, 0x8d, 0xc2, 0xff, 0x01, 0xe9, 0x04,
	0x69, 0x19, 0xd9, 0x06, 0xf5, 0xbf, 0xad, 0xf7, 0xbb, 0x65, 0xe4, 0x6c, 0xc3, 0x82, 0xe7, 0x32,
	0x86, 0x32, 0xfc, 0x15, 0xdc, 0xb8, 0x06, 0xb7, 0x56, 0x60, 0xae, 0xc0, 0x21, 0x8a, 0x53, 0x2c,
	0xea, 0x56, 0x5d, 0xed, 0x9d, 0x13, 0x58, 0xa0, 0xc9, 0xbc, 0x4e, 0xb5, 0x0c, 0xed, 0xcb, 0x82,
	0xeb, 0x8e, 0x0f, 0xa9, 0xda, 0x9f, 0x88, 0xba, 0x13, 0x22, 0xeb, 0x21, 0x74, 0x0b, 0xcc, 0x13,
	0x3e, 0xc4, 0x80, 0x9e, 0x4e, 0xf5, 0x9c, 0xe6, 0xeb, 0xd8, 0x9e, 0x7e, 0xa8, 0x2e, 0x2c, 0x31,
	0xd7, 0xa3, 0x27, 0x7a, 0xd7, 0xda, 0x1d, 0x06, 0x8b, 0x34, 0x4d, 0x9c, 0xe0, 0xbb, 0x65, 0x34,
	0x8d, 0x76, 0x33, 0x58, 0xa4, 0x41, 0x9a, 0x2a, 0xe9, 0x63, 0x9a, 0xa1, 0x4d, 0x54, 0x5b, 0x58,
	0x64, 0xd4, 0x5e, 0x79, 0x9c, 0xdd, 0xf8, 0x33, 0xe4, 0x1c, 0x52, 0xd7, 0xef, 0x02, 0xb5, 0xfe,
	0x05, 0x53, 0x65, 0xe3, 0xfa, 0xbe, 0x4d, 0xbf, 0xda, 0xe8, 0x0b, 0x3b, 0x19, 0xc9, 0xe0, 0x4c,
	0x70, 0x49, 0x17, 0x6d, 0xfa, 0xed, 0x93, 0x91, 0x3c, 0x10, 0x5c, 0x3a, 0x4f, 0xe0, 0x6f, 0xe6,
	0x7a, 0x1b, 0x5c, 0x7e, 0x77, 0xbd, 0x28, 0xc3, 0x40, 0x89, 0xf4, 0xd2, 0x56, 0x1b, 0x65, 0xb8,
	0x27, 0x52, 0xdc, 0xb0, 0x3f, 0x5d, 0xf4, 0x8d, 0xcf, 0x17, 0x7d, 0xe3, 0xcb, 0x45, 0xdf, 0x78,
	0xff, 0xb5, 0x3f, 0xb3, 0x65, 0x1c, 0xce, 0x6a, 0x53, 0x47, 0x2d, 0xfa, 0xc3, 0x79, 0xf6, 0x2d,
	0x00, 0x00, 0xff, 0xff, 0xe3, 0x58, 0x62, 0x94, 0xab, 0x06, 0x00, 0x00,
}
