// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/gen/pb/login/login.proto
// DO NOT EDIT!

/*
	Package login is a generated protocol buffer package.

	It is generated from these files:
		github.com/lightpaw/male7/gen/pb/login/login.proto

	It has these top-level messages:
		C2SInternalLoginProto
		S2CInternalLoginProto
		C2SLoginProto
		S2CLoginProto
		S2CTutorialProgressProto
		C2SSetTutorialProgressProto
		C2SCreateHeroProto
		S2CLoadedProto
		C2SRobotLoginProto
		S2CBanLoginProto
*/
package login

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import proto3 "github.com/lightpaw/male7/pb/shared_proto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type C2SInternalLoginProto struct {
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SInternalLoginProto) Reset()                    { *m = C2SInternalLoginProto{} }
func (m *C2SInternalLoginProto) String() string            { return proto.CompactTextString(m) }
func (*C2SInternalLoginProto) ProtoMessage()               {}
func (*C2SInternalLoginProto) Descriptor() ([]byte, []int) { return fileDescriptorLogin, []int{0} }

func (m *C2SInternalLoginProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type S2CInternalLoginProto struct {
	HeroProto []byte `protobuf:"bytes,1,opt,name=heroProto,proto3" json:"heroProto,omitempty"`
}

func (m *S2CInternalLoginProto) Reset()                    { *m = S2CInternalLoginProto{} }
func (m *S2CInternalLoginProto) String() string            { return proto.CompactTextString(m) }
func (*S2CInternalLoginProto) ProtoMessage()               {}
func (*S2CInternalLoginProto) Descriptor() ([]byte, []int) { return fileDescriptorLogin, []int{1} }

func (m *S2CInternalLoginProto) GetHeroProto() []byte {
	if m != nil {
		return m.HeroProto
	}
	return nil
}

type C2SLoginProto struct {
	Token       string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	TencentInfo []byte `protobuf:"bytes,4,opt,name=tencent_info,json=tencentInfo,proto3" json:"tencent_info,omitempty"`
}

func (m *C2SLoginProto) Reset()                    { *m = C2SLoginProto{} }
func (m *C2SLoginProto) String() string            { return proto.CompactTextString(m) }
func (*C2SLoginProto) ProtoMessage()               {}
func (*C2SLoginProto) Descriptor() ([]byte, []int) { return fileDescriptorLogin, []int{2} }

func (m *C2SLoginProto) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *C2SLoginProto) GetTencentInfo() []byte {
	if m != nil {
		return m.TencentInfo
	}
	return nil
}

type S2CLoginProto struct {
	Created   bool                   `protobuf:"varint,2,opt,name=created,proto3" json:"created,omitempty"`
	Male      bool                   `protobuf:"varint,3,opt,name=male,proto3" json:"male,omitempty"`
	Head      string                 `protobuf:"bytes,4,opt,name=head,proto3" json:"head,omitempty"`
	Building  []int32                `protobuf:"varint,5,rep,name=building" json:"building,omitempty"`
	IsDebug   bool                   `protobuf:"varint,8,opt,name=is_debug,json=isDebug,proto3" json:"is_debug,omitempty"`
	Countries *proto3.CountriesProto `protobuf:"bytes,9,opt,name=countries" json:"countries,omitempty"`
}

func (m *S2CLoginProto) Reset()                    { *m = S2CLoginProto{} }
func (m *S2CLoginProto) String() string            { return proto.CompactTextString(m) }
func (*S2CLoginProto) ProtoMessage()               {}
func (*S2CLoginProto) Descriptor() ([]byte, []int) { return fileDescriptorLogin, []int{3} }

func (m *S2CLoginProto) GetCreated() bool {
	if m != nil {
		return m.Created
	}
	return false
}

func (m *S2CLoginProto) GetMale() bool {
	if m != nil {
		return m.Male
	}
	return false
}

func (m *S2CLoginProto) GetHead() string {
	if m != nil {
		return m.Head
	}
	return ""
}

func (m *S2CLoginProto) GetBuilding() []int32 {
	if m != nil {
		return m.Building
	}
	return nil
}

func (m *S2CLoginProto) GetIsDebug() bool {
	if m != nil {
		return m.IsDebug
	}
	return false
}

func (m *S2CLoginProto) GetCountries() *proto3.CountriesProto {
	if m != nil {
		return m.Countries
	}
	return nil
}

type S2CTutorialProgressProto struct {
	Progress int32 `protobuf:"varint,1,opt,name=progress,proto3" json:"progress,omitempty"`
}

func (m *S2CTutorialProgressProto) Reset()                    { *m = S2CTutorialProgressProto{} }
func (m *S2CTutorialProgressProto) String() string            { return proto.CompactTextString(m) }
func (*S2CTutorialProgressProto) ProtoMessage()               {}
func (*S2CTutorialProgressProto) Descriptor() ([]byte, []int) { return fileDescriptorLogin, []int{4} }

func (m *S2CTutorialProgressProto) GetProgress() int32 {
	if m != nil {
		return m.Progress
	}
	return 0
}

type C2SSetTutorialProgressProto struct {
	Progress   int32 `protobuf:"varint,1,opt,name=progress,proto3" json:"progress,omitempty"`
	IsComplete bool  `protobuf:"varint,2,opt,name=is_complete,json=isComplete,proto3" json:"is_complete,omitempty"`
}

func (m *C2SSetTutorialProgressProto) Reset()                    { *m = C2SSetTutorialProgressProto{} }
func (m *C2SSetTutorialProgressProto) String() string            { return proto.CompactTextString(m) }
func (*C2SSetTutorialProgressProto) ProtoMessage()               {}
func (*C2SSetTutorialProgressProto) Descriptor() ([]byte, []int) { return fileDescriptorLogin, []int{5} }

func (m *C2SSetTutorialProgressProto) GetProgress() int32 {
	if m != nil {
		return m.Progress
	}
	return 0
}

func (m *C2SSetTutorialProgressProto) GetIsComplete() bool {
	if m != nil {
		return m.IsComplete
	}
	return false
}

type C2SCreateHeroProto struct {
	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Male    bool   `protobuf:"varint,2,opt,name=male,proto3" json:"male,omitempty"`
	HeadUrl string `protobuf:"bytes,5,opt,name=head_url,json=headUrl,proto3" json:"head_url,omitempty"`
	Country int32  `protobuf:"varint,6,opt,name=country,proto3" json:"country,omitempty"`
}

func (m *C2SCreateHeroProto) Reset()                    { *m = C2SCreateHeroProto{} }
func (m *C2SCreateHeroProto) String() string            { return proto.CompactTextString(m) }
func (*C2SCreateHeroProto) ProtoMessage()               {}
func (*C2SCreateHeroProto) Descriptor() ([]byte, []int) { return fileDescriptorLogin, []int{6} }

func (m *C2SCreateHeroProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *C2SCreateHeroProto) GetMale() bool {
	if m != nil {
		return m.Male
	}
	return false
}

func (m *C2SCreateHeroProto) GetHeadUrl() string {
	if m != nil {
		return m.HeadUrl
	}
	return ""
}

func (m *C2SCreateHeroProto) GetCountry() int32 {
	if m != nil {
		return m.Country
	}
	return 0
}

type S2CLoadedProto struct {
	HeroProto []byte `protobuf:"bytes,1,opt,name=heroProto,proto3" json:"heroProto,omitempty"`
}

func (m *S2CLoadedProto) Reset()                    { *m = S2CLoadedProto{} }
func (m *S2CLoadedProto) String() string            { return proto.CompactTextString(m) }
func (*S2CLoadedProto) ProtoMessage()               {}
func (*S2CLoadedProto) Descriptor() ([]byte, []int) { return fileDescriptorLogin, []int{7} }

func (m *S2CLoadedProto) GetHeroProto() []byte {
	if m != nil {
		return m.HeroProto
	}
	return nil
}

type C2SRobotLoginProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SRobotLoginProto) Reset()                    { *m = C2SRobotLoginProto{} }
func (m *C2SRobotLoginProto) String() string            { return proto.CompactTextString(m) }
func (*C2SRobotLoginProto) ProtoMessage()               {}
func (*C2SRobotLoginProto) Descriptor() ([]byte, []int) { return fileDescriptorLogin, []int{8} }

func (m *C2SRobotLoginProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type S2CBanLoginProto struct {
	ResultTime int32 `protobuf:"varint,1,opt,name=result_time,json=resultTime,proto3" json:"result_time,omitempty"`
}

func (m *S2CBanLoginProto) Reset()                    { *m = S2CBanLoginProto{} }
func (m *S2CBanLoginProto) String() string            { return proto.CompactTextString(m) }
func (*S2CBanLoginProto) ProtoMessage()               {}
func (*S2CBanLoginProto) Descriptor() ([]byte, []int) { return fileDescriptorLogin, []int{9} }

func (m *S2CBanLoginProto) GetResultTime() int32 {
	if m != nil {
		return m.ResultTime
	}
	return 0
}

func init() {
	proto.RegisterType((*C2SInternalLoginProto)(nil), "proto.C2SInternalLoginProto")
	proto.RegisterType((*S2CInternalLoginProto)(nil), "proto.S2CInternalLoginProto")
	proto.RegisterType((*C2SLoginProto)(nil), "proto.C2SLoginProto")
	proto.RegisterType((*S2CLoginProto)(nil), "proto.S2CLoginProto")
	proto.RegisterType((*S2CTutorialProgressProto)(nil), "proto.S2CTutorialProgressProto")
	proto.RegisterType((*C2SSetTutorialProgressProto)(nil), "proto.C2SSetTutorialProgressProto")
	proto.RegisterType((*C2SCreateHeroProto)(nil), "proto.C2SCreateHeroProto")
	proto.RegisterType((*S2CLoadedProto)(nil), "proto.S2CLoadedProto")
	proto.RegisterType((*C2SRobotLoginProto)(nil), "proto.C2SRobotLoginProto")
	proto.RegisterType((*S2CBanLoginProto)(nil), "proto.S2CBanLoginProto")
}
func (m *C2SInternalLoginProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SInternalLoginProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLogin(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *S2CInternalLoginProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CInternalLoginProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HeroProto) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLogin(dAtA, i, uint64(len(m.HeroProto)))
		i += copy(dAtA[i:], m.HeroProto)
	}
	return i, nil
}

func (m *C2SLoginProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SLoginProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLogin(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if len(m.TencentInfo) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintLogin(dAtA, i, uint64(len(m.TencentInfo)))
		i += copy(dAtA[i:], m.TencentInfo)
	}
	return i, nil
}

func (m *S2CLoginProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CLoginProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Created {
		dAtA[i] = 0x10
		i++
		if m.Created {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Male {
		dAtA[i] = 0x18
		i++
		if m.Male {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Head) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintLogin(dAtA, i, uint64(len(m.Head)))
		i += copy(dAtA[i:], m.Head)
	}
	if len(m.Building) > 0 {
		for _, num := range m.Building {
			dAtA[i] = 0x28
			i++
			i = encodeVarintLogin(dAtA, i, uint64(num))
		}
	}
	if m.IsDebug {
		dAtA[i] = 0x40
		i++
		if m.IsDebug {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Countries != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintLogin(dAtA, i, uint64(m.Countries.Size()))
		n1, err := m.Countries.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *S2CTutorialProgressProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CTutorialProgressProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Progress != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLogin(dAtA, i, uint64(m.Progress))
	}
	return i, nil
}

func (m *C2SSetTutorialProgressProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SSetTutorialProgressProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Progress != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLogin(dAtA, i, uint64(m.Progress))
	}
	if m.IsComplete {
		dAtA[i] = 0x10
		i++
		if m.IsComplete {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *C2SCreateHeroProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCreateHeroProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLogin(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Male {
		dAtA[i] = 0x10
		i++
		if m.Male {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.HeadUrl) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintLogin(dAtA, i, uint64(len(m.HeadUrl)))
		i += copy(dAtA[i:], m.HeadUrl)
	}
	if m.Country != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintLogin(dAtA, i, uint64(m.Country))
	}
	return i, nil
}

func (m *S2CLoadedProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CLoadedProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HeroProto) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLogin(dAtA, i, uint64(len(m.HeroProto)))
		i += copy(dAtA[i:], m.HeroProto)
	}
	return i, nil
}

func (m *C2SRobotLoginProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SRobotLoginProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLogin(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *S2CBanLoginProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CBanLoginProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ResultTime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLogin(dAtA, i, uint64(m.ResultTime))
	}
	return i, nil
}

func encodeFixed64Login(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Login(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintLogin(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *C2SInternalLoginProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovLogin(uint64(l))
	}
	return n
}

func (m *S2CInternalLoginProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.HeroProto)
	if l > 0 {
		n += 1 + l + sovLogin(uint64(l))
	}
	return n
}

func (m *C2SLoginProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovLogin(uint64(l))
	}
	l = len(m.TencentInfo)
	if l > 0 {
		n += 1 + l + sovLogin(uint64(l))
	}
	return n
}

func (m *S2CLoginProto) Size() (n int) {
	var l int
	_ = l
	if m.Created {
		n += 2
	}
	if m.Male {
		n += 2
	}
	l = len(m.Head)
	if l > 0 {
		n += 1 + l + sovLogin(uint64(l))
	}
	if len(m.Building) > 0 {
		for _, e := range m.Building {
			n += 1 + sovLogin(uint64(e))
		}
	}
	if m.IsDebug {
		n += 2
	}
	if m.Countries != nil {
		l = m.Countries.Size()
		n += 1 + l + sovLogin(uint64(l))
	}
	return n
}

func (m *S2CTutorialProgressProto) Size() (n int) {
	var l int
	_ = l
	if m.Progress != 0 {
		n += 1 + sovLogin(uint64(m.Progress))
	}
	return n
}

func (m *C2SSetTutorialProgressProto) Size() (n int) {
	var l int
	_ = l
	if m.Progress != 0 {
		n += 1 + sovLogin(uint64(m.Progress))
	}
	if m.IsComplete {
		n += 2
	}
	return n
}

func (m *C2SCreateHeroProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovLogin(uint64(l))
	}
	if m.Male {
		n += 2
	}
	l = len(m.HeadUrl)
	if l > 0 {
		n += 1 + l + sovLogin(uint64(l))
	}
	if m.Country != 0 {
		n += 1 + sovLogin(uint64(m.Country))
	}
	return n
}

func (m *S2CLoadedProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.HeroProto)
	if l > 0 {
		n += 1 + l + sovLogin(uint64(l))
	}
	return n
}

func (m *C2SRobotLoginProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLogin(uint64(m.Id))
	}
	return n
}

func (m *S2CBanLoginProto) Size() (n int) {
	var l int
	_ = l
	if m.ResultTime != 0 {
		n += 1 + sovLogin(uint64(m.ResultTime))
	}
	return n
}

func sovLogin(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozLogin(x uint64) (n int) {
	return sovLogin(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *C2SInternalLoginProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SInternalLoginProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SInternalLoginProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLogin
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLogin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CInternalLoginProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CInternalLoginProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CInternalLoginProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroProto", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLogin
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeroProto = append(m.HeroProto[:0], dAtA[iNdEx:postIndex]...)
			if m.HeroProto == nil {
				m.HeroProto = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLogin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SLoginProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SLoginProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SLoginProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TencentInfo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLogin
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TencentInfo = append(m.TencentInfo[:0], dAtA[iNdEx:postIndex]...)
			if m.TencentInfo == nil {
				m.TencentInfo = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLogin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CLoginProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CLoginProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CLoginProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Created = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Male", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Male = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Head = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLogin
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Building = append(m.Building, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLogin
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLogin
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLogin
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Building = append(m.Building, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Building", wireType)
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDebug", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDebug = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Countries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLogin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Countries == nil {
				m.Countries = &proto3.CountriesProto{}
			}
			if err := m.Countries.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLogin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CTutorialProgressProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CTutorialProgressProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CTutorialProgressProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			m.Progress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Progress |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLogin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SSetTutorialProgressProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SSetTutorialProgressProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SSetTutorialProgressProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			m.Progress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Progress |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsComplete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsComplete = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLogin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLogin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SCreateHeroProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCreateHeroProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCreateHeroProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Male", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Male = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLogin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeadUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			m.Country = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Country |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLogin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CLoadedProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CLoadedProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CLoadedProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroProto", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLogin
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeroProto = append(m.HeroProto[:0], dAtA[iNdEx:postIndex]...)
			if m.HeroProto == nil {
				m.HeroProto = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLogin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLogin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SRobotLoginProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SRobotLoginProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SRobotLoginProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLogin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CBanLoginProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLogin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CBanLoginProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CBanLoginProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultTime", wireType)
			}
			m.ResultTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResultTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLogin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLogin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLogin(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLogin
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLogin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthLogin
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLogin
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLogin(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLogin = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLogin   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/gen/pb/login/login.proto", fileDescriptorLogin)
}

var fileDescriptorLogin = []byte{
	// 514 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0xc1, 0x6e, 0x9b, 0x40,
	0x10, 0x0d, 0x4e, 0x48, 0x60, 0x9c, 0x44, 0x11, 0xaa, 0x25, 0x9c, 0x56, 0x8e, 0x8b, 0x2a, 0xd5,
	0x27, 0x23, 0x61, 0xb5, 0xb9, 0x7b, 0x7b, 0x70, 0xa4, 0x1e, 0x22, 0x48, 0x2f, 0xb9, 0x20, 0x30,
	0x13, 0xbc, 0x2a, 0xde, 0xa5, 0xcb, 0xa2, 0xaa, 0x7f, 0xd2, 0xdf, 0xe9, 0xad, 0xc7, 0x7e, 0x42,
	0xe5, 0xfe, 0x48, 0xc5, 0x80, 0x1d, 0x1f, 0x52, 0xa9, 0xb9, 0xc0, 0xbe, 0xa7, 0x37, 0x8f, 0xd9,
	0x37, 0x03, 0x04, 0x39, 0xd7, 0xab, 0x3a, 0x9d, 0x2e, 0xe5, 0xda, 0x2f, 0x78, 0xbe, 0xd2, 0x65,
	0xf2, 0xd5, 0x5f, 0x27, 0x05, 0x5e, 0xfb, 0x39, 0x0a, 0xbf, 0x4c, 0xfd, 0x42, 0xe6, 0x5c, 0xb4,
	0xcf, 0x69, 0xa9, 0xa4, 0x96, 0x8e, 0x49, 0xaf, 0xcb, 0xeb, 0x7f, 0x97, 0x96, 0xa9, 0x5f, 0xad,
	0x12, 0x85, 0x59, 0x4c, 0x52, 0x7f, 0x29, 0x6b, 0xa1, 0xd5, 0xb7, 0xb6, 0xde, 0x7b, 0x0b, 0x03,
	0x16, 0x44, 0x37, 0x42, 0xa3, 0x12, 0x49, 0xf1, 0xb1, 0x71, 0xbe, 0x25, 0xe3, 0x73, 0xe8, 0xf1,
	0xcc, 0x35, 0xc6, 0xc6, 0xe4, 0x34, 0xec, 0xf1, 0xcc, 0x7b, 0x07, 0x83, 0x28, 0x60, 0x4f, 0x08,
	0x5f, 0x81, 0xbd, 0x42, 0x25, 0x09, 0x74, 0xfa, 0x47, 0xc2, 0x5b, 0xc0, 0x19, 0x0b, 0xa2, 0x3d,
	0xf9, 0x0b, 0x30, 0xb5, 0xfc, 0x8c, 0xc2, 0xed, 0x8d, 0x8d, 0x89, 0x1d, 0xb6, 0xc0, 0x79, 0x0d,
	0xa7, 0x1a, 0xc5, 0x12, 0x85, 0x8e, 0xb9, 0x78, 0x90, 0xee, 0x11, 0xf9, 0xf4, 0x3b, 0xee, 0x46,
	0x3c, 0x48, 0xef, 0x87, 0x01, 0x67, 0x51, 0xc0, 0xf6, 0xac, 0x5c, 0x38, 0x59, 0x2a, 0x4c, 0x34,
	0x66, 0x64, 0x66, 0x85, 0x5b, 0xe8, 0x38, 0x70, 0xd4, 0x5c, 0xde, 0x3d, 0x24, 0x9a, 0xce, 0x0d,
	0xb7, 0xc2, 0x24, 0x23, 0x6b, 0x3b, 0xa4, 0xb3, 0x33, 0x02, 0x2b, 0xad, 0x79, 0x91, 0x71, 0x91,
	0xbb, 0xe6, 0xf8, 0x70, 0x62, 0xce, 0x7b, 0x17, 0x07, 0xe1, 0x8e, 0x73, 0x86, 0x60, 0xf1, 0x2a,
	0xce, 0x30, 0xad, 0x73, 0xd7, 0x6a, 0x3f, 0xc1, 0xab, 0x0f, 0x0d, 0x74, 0x66, 0x60, 0xb7, 0x49,
	0x72, 0xac, 0x5c, 0x7b, 0x6c, 0x4c, 0xfa, 0xc1, 0xa0, 0xcd, 0x74, 0xca, 0xb6, 0x3c, 0xb5, 0x19,
	0x3e, 0xea, 0xbc, 0xf7, 0xe0, 0x46, 0x01, 0xbb, 0xab, 0xb5, 0x54, 0x3c, 0x29, 0x6e, 0x95, 0xcc,
	0x15, 0x56, 0xad, 0xcc, 0xb9, 0x04, 0xab, 0xec, 0x08, 0x8a, 0xd1, 0x0c, 0x77, 0xd8, 0xbb, 0x87,
	0x97, 0x2c, 0x88, 0x22, 0xd4, 0xcf, 0x2e, 0x75, 0xae, 0xa0, 0xcf, 0xab, 0x78, 0x29, 0xd7, 0x65,
	0x81, 0x1a, 0xbb, 0xa0, 0x80, 0x57, 0xac, 0x63, 0xbc, 0x2f, 0xe0, 0xb0, 0x20, 0x62, 0x94, 0xdc,
	0x62, 0x3b, 0xb7, 0x26, 0x2d, 0x91, 0xac, 0x91, 0xec, 0xec, 0x90, 0xce, 0xbb, 0x54, 0x7b, 0x7b,
	0xa9, 0x0e, 0xc1, 0x6a, 0x92, 0x8c, 0x6b, 0x55, 0xb8, 0x26, 0x69, 0x4f, 0x1a, 0xfc, 0x49, 0x15,
	0x34, 0x9e, 0x76, 0xd7, 0xdc, 0x63, 0x6a, 0x6a, 0x0b, 0xbd, 0x29, 0x9c, 0xd3, 0x24, 0x93, 0x0c,
	0xb3, 0xff, 0x59, 0xa2, 0x37, 0xd4, 0x62, 0x28, 0x53, 0xa9, 0x9f, 0xdc, 0x50, 0x93, 0x36, 0x74,
	0x06, 0x17, 0x51, 0xc0, 0xe6, 0x89, 0xd8, 0xd3, 0x5c, 0x41, 0x5f, 0x61, 0x55, 0x17, 0x3a, 0xd6,
	0xbc, 0xbb, 0x8d, 0x19, 0x42, 0x4b, 0xdd, 0xf1, 0x35, 0xce, 0x87, 0x3f, 0x37, 0x23, 0xe3, 0xd7,
	0x66, 0x64, 0xfc, 0xde, 0x8c, 0x8c, 0xef, 0x7f, 0x46, 0x07, 0x0b, 0xe3, 0xde, 0xa4, 0x1f, 0x2c,
	0x3d, 0xa6, 0x69, 0xce, 0xfe, 0x06, 0x00, 0x00, 0xff, 0xff, 0x9a, 0x63, 0xc0, 0x07, 0x97, 0x03,
	0x00, 0x00,
}
