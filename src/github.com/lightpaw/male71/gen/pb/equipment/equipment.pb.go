// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/gen/pb/equipment/equipment.proto
// DO NOT EDIT!

/*
	Package equipment is a generated protocol buffer package.

	It is generated from these files:
		github.com/lightpaw/male7/gen/pb/equipment/equipment.proto

	It has these top-level messages:
		C2SViewChatEquipProto
		S2CViewChatEquipProto
		S2CAddEquipmentProto
		S2CAddEquipmentWithExpireTimeProto
		C2SWearEquipmentProto
		S2CWearEquipmentProto
		C2SUpgradeEquipmentProto
		S2CUpgradeEquipmentProto
		C2SUpgradeEquipmentAllProto
		S2CUpgradeEquipmentAllProto
		C2SRefinedEquipmentProto
		S2CRefinedEquipmentProto
		S2CUpdateEquipmentProto
		S2CUpdateMultiEquipmentProto
		C2SSmeltEquipmentProto
		S2CSmeltEquipmentProto
		C2SRebuildEquipmentProto
		S2CRebuildEquipmentProto
		S2COpenEquipCombineProto
		S2CRebuildUpgradeEquipmentProto
		S2CRebuildRefineEquipmentProto
		C2SOneKeyTakeOffProto
		S2COneKeyTakeOffProto
*/
package equipment

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type C2SViewChatEquipProto struct {
	DataId  int32 `protobuf:"varint,1,opt,name=data_id,json=dataId,proto3" json:"data_id,omitempty"`
	Level   int32 `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	Refined int32 `protobuf:"varint,3,opt,name=refined,proto3" json:"refined,omitempty"`
}

func (m *C2SViewChatEquipProto) Reset()                    { *m = C2SViewChatEquipProto{} }
func (m *C2SViewChatEquipProto) String() string            { return proto.CompactTextString(m) }
func (*C2SViewChatEquipProto) ProtoMessage()               {}
func (*C2SViewChatEquipProto) Descriptor() ([]byte, []int) { return fileDescriptorEquipment, []int{0} }

func (m *C2SViewChatEquipProto) GetDataId() int32 {
	if m != nil {
		return m.DataId
	}
	return 0
}

func (m *C2SViewChatEquipProto) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *C2SViewChatEquipProto) GetRefined() int32 {
	if m != nil {
		return m.Refined
	}
	return 0
}

type S2CViewChatEquipProto struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *S2CViewChatEquipProto) Reset()                    { *m = S2CViewChatEquipProto{} }
func (m *S2CViewChatEquipProto) String() string            { return proto.CompactTextString(m) }
func (*S2CViewChatEquipProto) ProtoMessage()               {}
func (*S2CViewChatEquipProto) Descriptor() ([]byte, []int) { return fileDescriptorEquipment, []int{1} }

func (m *S2CViewChatEquipProto) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type S2CAddEquipmentProto struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *S2CAddEquipmentProto) Reset()                    { *m = S2CAddEquipmentProto{} }
func (m *S2CAddEquipmentProto) String() string            { return proto.CompactTextString(m) }
func (*S2CAddEquipmentProto) ProtoMessage()               {}
func (*S2CAddEquipmentProto) Descriptor() ([]byte, []int) { return fileDescriptorEquipment, []int{2} }

func (m *S2CAddEquipmentProto) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type S2CAddEquipmentWithExpireTimeProto struct {
	Data       []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	ExpireTime int32  `protobuf:"varint,2,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
}

func (m *S2CAddEquipmentWithExpireTimeProto) Reset()         { *m = S2CAddEquipmentWithExpireTimeProto{} }
func (m *S2CAddEquipmentWithExpireTimeProto) String() string { return proto.CompactTextString(m) }
func (*S2CAddEquipmentWithExpireTimeProto) ProtoMessage()    {}
func (*S2CAddEquipmentWithExpireTimeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorEquipment, []int{3}
}

func (m *S2CAddEquipmentWithExpireTimeProto) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *S2CAddEquipmentWithExpireTimeProto) GetExpireTime() int32 {
	if m != nil {
		return m.ExpireTime
	}
	return 0
}

type C2SWearEquipmentProto struct {
	CaptainId   int32 `protobuf:"varint,1,opt,name=captain_id,json=captainId,proto3" json:"captain_id,omitempty"`
	EquipmentId int32 `protobuf:"varint,2,opt,name=equipment_id,json=equipmentId,proto3" json:"equipment_id,omitempty"`
	Down        bool  `protobuf:"varint,3,opt,name=down,proto3" json:"down,omitempty"`
	Inhert      bool  `protobuf:"varint,4,opt,name=inhert,proto3" json:"inhert,omitempty"`
}

func (m *C2SWearEquipmentProto) Reset()                    { *m = C2SWearEquipmentProto{} }
func (m *C2SWearEquipmentProto) String() string            { return proto.CompactTextString(m) }
func (*C2SWearEquipmentProto) ProtoMessage()               {}
func (*C2SWearEquipmentProto) Descriptor() ([]byte, []int) { return fileDescriptorEquipment, []int{4} }

func (m *C2SWearEquipmentProto) GetCaptainId() int32 {
	if m != nil {
		return m.CaptainId
	}
	return 0
}

func (m *C2SWearEquipmentProto) GetEquipmentId() int32 {
	if m != nil {
		return m.EquipmentId
	}
	return 0
}

func (m *C2SWearEquipmentProto) GetDown() bool {
	if m != nil {
		return m.Down
	}
	return false
}

func (m *C2SWearEquipmentProto) GetInhert() bool {
	if m != nil {
		return m.Inhert
	}
	return false
}

type S2CWearEquipmentProto struct {
	CaptainId int32 `protobuf:"varint,1,opt,name=captain_id,json=captainId,proto3" json:"captain_id,omitempty"`
	UpId      int32 `protobuf:"varint,2,opt,name=up_id,json=upId,proto3" json:"up_id,omitempty"`
	DownId    int32 `protobuf:"varint,3,opt,name=down_id,json=downId,proto3" json:"down_id,omitempty"`
	Taoz      int32 `protobuf:"varint,4,opt,name=taoz,proto3" json:"taoz,omitempty"`
}

func (m *S2CWearEquipmentProto) Reset()                    { *m = S2CWearEquipmentProto{} }
func (m *S2CWearEquipmentProto) String() string            { return proto.CompactTextString(m) }
func (*S2CWearEquipmentProto) ProtoMessage()               {}
func (*S2CWearEquipmentProto) Descriptor() ([]byte, []int) { return fileDescriptorEquipment, []int{5} }

func (m *S2CWearEquipmentProto) GetCaptainId() int32 {
	if m != nil {
		return m.CaptainId
	}
	return 0
}

func (m *S2CWearEquipmentProto) GetUpId() int32 {
	if m != nil {
		return m.UpId
	}
	return 0
}

func (m *S2CWearEquipmentProto) GetDownId() int32 {
	if m != nil {
		return m.DownId
	}
	return 0
}

func (m *S2CWearEquipmentProto) GetTaoz() int32 {
	if m != nil {
		return m.Taoz
	}
	return 0
}

type C2SUpgradeEquipmentProto struct {
	CaptainId    int32 `protobuf:"varint,1,opt,name=captain_id,json=captainId,proto3" json:"captain_id,omitempty"`
	EquipmentId  int32 `protobuf:"varint,2,opt,name=equipment_id,json=equipmentId,proto3" json:"equipment_id,omitempty"`
	UpgradeTimes int32 `protobuf:"varint,3,opt,name=upgrade_times,json=upgradeTimes,proto3" json:"upgrade_times,omitempty"`
}

func (m *C2SUpgradeEquipmentProto) Reset()         { *m = C2SUpgradeEquipmentProto{} }
func (m *C2SUpgradeEquipmentProto) String() string { return proto.CompactTextString(m) }
func (*C2SUpgradeEquipmentProto) ProtoMessage()    {}
func (*C2SUpgradeEquipmentProto) Descriptor() ([]byte, []int) {
	return fileDescriptorEquipment, []int{6}
}

func (m *C2SUpgradeEquipmentProto) GetCaptainId() int32 {
	if m != nil {
		return m.CaptainId
	}
	return 0
}

func (m *C2SUpgradeEquipmentProto) GetEquipmentId() int32 {
	if m != nil {
		return m.EquipmentId
	}
	return 0
}

func (m *C2SUpgradeEquipmentProto) GetUpgradeTimes() int32 {
	if m != nil {
		return m.UpgradeTimes
	}
	return 0
}

type S2CUpgradeEquipmentProto struct {
	CaptainId   int32 `protobuf:"varint,1,opt,name=captain_id,json=captainId,proto3" json:"captain_id,omitempty"`
	EquipmentId int32 `protobuf:"varint,2,opt,name=equipment_id,json=equipmentId,proto3" json:"equipment_id,omitempty"`
	Level       int32 `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
}

func (m *S2CUpgradeEquipmentProto) Reset()         { *m = S2CUpgradeEquipmentProto{} }
func (m *S2CUpgradeEquipmentProto) String() string { return proto.CompactTextString(m) }
func (*S2CUpgradeEquipmentProto) ProtoMessage()    {}
func (*S2CUpgradeEquipmentProto) Descriptor() ([]byte, []int) {
	return fileDescriptorEquipment, []int{7}
}

func (m *S2CUpgradeEquipmentProto) GetCaptainId() int32 {
	if m != nil {
		return m.CaptainId
	}
	return 0
}

func (m *S2CUpgradeEquipmentProto) GetEquipmentId() int32 {
	if m != nil {
		return m.EquipmentId
	}
	return 0
}

func (m *S2CUpgradeEquipmentProto) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

type C2SUpgradeEquipmentAllProto struct {
	CaptainId int32 `protobuf:"varint,1,opt,name=captain_id,json=captainId,proto3" json:"captain_id,omitempty"`
}

func (m *C2SUpgradeEquipmentAllProto) Reset()         { *m = C2SUpgradeEquipmentAllProto{} }
func (m *C2SUpgradeEquipmentAllProto) String() string { return proto.CompactTextString(m) }
func (*C2SUpgradeEquipmentAllProto) ProtoMessage()    {}
func (*C2SUpgradeEquipmentAllProto) Descriptor() ([]byte, []int) {
	return fileDescriptorEquipment, []int{8}
}

func (m *C2SUpgradeEquipmentAllProto) GetCaptainId() int32 {
	if m != nil {
		return m.CaptainId
	}
	return 0
}

type S2CUpgradeEquipmentAllProto struct {
	CaptainId int32   `protobuf:"varint,1,opt,name=captain_id,json=captainId,proto3" json:"captain_id,omitempty"`
	Level     []int32 `protobuf:"varint,2,rep,name=level" json:"level,omitempty"`
}

func (m *S2CUpgradeEquipmentAllProto) Reset()         { *m = S2CUpgradeEquipmentAllProto{} }
func (m *S2CUpgradeEquipmentAllProto) String() string { return proto.CompactTextString(m) }
func (*S2CUpgradeEquipmentAllProto) ProtoMessage()    {}
func (*S2CUpgradeEquipmentAllProto) Descriptor() ([]byte, []int) {
	return fileDescriptorEquipment, []int{9}
}

func (m *S2CUpgradeEquipmentAllProto) GetCaptainId() int32 {
	if m != nil {
		return m.CaptainId
	}
	return 0
}

func (m *S2CUpgradeEquipmentAllProto) GetLevel() []int32 {
	if m != nil {
		return m.Level
	}
	return nil
}

type C2SRefinedEquipmentProto struct {
	CaptainId   int32 `protobuf:"varint,1,opt,name=captain_id,json=captainId,proto3" json:"captain_id,omitempty"`
	EquipmentId int32 `protobuf:"varint,2,opt,name=equipment_id,json=equipmentId,proto3" json:"equipment_id,omitempty"`
}

func (m *C2SRefinedEquipmentProto) Reset()         { *m = C2SRefinedEquipmentProto{} }
func (m *C2SRefinedEquipmentProto) String() string { return proto.CompactTextString(m) }
func (*C2SRefinedEquipmentProto) ProtoMessage()    {}
func (*C2SRefinedEquipmentProto) Descriptor() ([]byte, []int) {
	return fileDescriptorEquipment, []int{10}
}

func (m *C2SRefinedEquipmentProto) GetCaptainId() int32 {
	if m != nil {
		return m.CaptainId
	}
	return 0
}

func (m *C2SRefinedEquipmentProto) GetEquipmentId() int32 {
	if m != nil {
		return m.EquipmentId
	}
	return 0
}

type S2CRefinedEquipmentProto struct {
	CaptainId   int32 `protobuf:"varint,1,opt,name=captain_id,json=captainId,proto3" json:"captain_id,omitempty"`
	EquipmentId int32 `protobuf:"varint,2,opt,name=equipment_id,json=equipmentId,proto3" json:"equipment_id,omitempty"`
	Level       int32 `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	Taoz        int32 `protobuf:"varint,4,opt,name=taoz,proto3" json:"taoz,omitempty"`
}

func (m *S2CRefinedEquipmentProto) Reset()         { *m = S2CRefinedEquipmentProto{} }
func (m *S2CRefinedEquipmentProto) String() string { return proto.CompactTextString(m) }
func (*S2CRefinedEquipmentProto) ProtoMessage()    {}
func (*S2CRefinedEquipmentProto) Descriptor() ([]byte, []int) {
	return fileDescriptorEquipment, []int{11}
}

func (m *S2CRefinedEquipmentProto) GetCaptainId() int32 {
	if m != nil {
		return m.CaptainId
	}
	return 0
}

func (m *S2CRefinedEquipmentProto) GetEquipmentId() int32 {
	if m != nil {
		return m.EquipmentId
	}
	return 0
}

func (m *S2CRefinedEquipmentProto) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *S2CRefinedEquipmentProto) GetTaoz() int32 {
	if m != nil {
		return m.Taoz
	}
	return 0
}

type S2CUpdateEquipmentProto struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *S2CUpdateEquipmentProto) Reset()         { *m = S2CUpdateEquipmentProto{} }
func (m *S2CUpdateEquipmentProto) String() string { return proto.CompactTextString(m) }
func (*S2CUpdateEquipmentProto) ProtoMessage()    {}
func (*S2CUpdateEquipmentProto) Descriptor() ([]byte, []int) {
	return fileDescriptorEquipment, []int{12}
}

func (m *S2CUpdateEquipmentProto) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type S2CUpdateMultiEquipmentProto struct {
	Data [][]byte `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
}

func (m *S2CUpdateMultiEquipmentProto) Reset()         { *m = S2CUpdateMultiEquipmentProto{} }
func (m *S2CUpdateMultiEquipmentProto) String() string { return proto.CompactTextString(m) }
func (*S2CUpdateMultiEquipmentProto) ProtoMessage()    {}
func (*S2CUpdateMultiEquipmentProto) Descriptor() ([]byte, []int) {
	return fileDescriptorEquipment, []int{13}
}

func (m *S2CUpdateMultiEquipmentProto) GetData() [][]byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type C2SSmeltEquipmentProto struct {
	EquipmentId []int32 `protobuf:"varint,1,rep,name=equipment_id,json=equipmentId" json:"equipment_id,omitempty"`
}

func (m *C2SSmeltEquipmentProto) Reset()                    { *m = C2SSmeltEquipmentProto{} }
func (m *C2SSmeltEquipmentProto) String() string            { return proto.CompactTextString(m) }
func (*C2SSmeltEquipmentProto) ProtoMessage()               {}
func (*C2SSmeltEquipmentProto) Descriptor() ([]byte, []int) { return fileDescriptorEquipment, []int{14} }

func (m *C2SSmeltEquipmentProto) GetEquipmentId() []int32 {
	if m != nil {
		return m.EquipmentId
	}
	return nil
}

type S2CSmeltEquipmentProto struct {
	EquipmentId []int32 `protobuf:"varint,1,rep,name=equipment_id,json=equipmentId" json:"equipment_id,omitempty"`
}

func (m *S2CSmeltEquipmentProto) Reset()                    { *m = S2CSmeltEquipmentProto{} }
func (m *S2CSmeltEquipmentProto) String() string            { return proto.CompactTextString(m) }
func (*S2CSmeltEquipmentProto) ProtoMessage()               {}
func (*S2CSmeltEquipmentProto) Descriptor() ([]byte, []int) { return fileDescriptorEquipment, []int{15} }

func (m *S2CSmeltEquipmentProto) GetEquipmentId() []int32 {
	if m != nil {
		return m.EquipmentId
	}
	return nil
}

type C2SRebuildEquipmentProto struct {
	EquipmentId []int32 `protobuf:"varint,1,rep,name=equipment_id,json=equipmentId" json:"equipment_id,omitempty"`
}

func (m *C2SRebuildEquipmentProto) Reset()         { *m = C2SRebuildEquipmentProto{} }
func (m *C2SRebuildEquipmentProto) String() string { return proto.CompactTextString(m) }
func (*C2SRebuildEquipmentProto) ProtoMessage()    {}
func (*C2SRebuildEquipmentProto) Descriptor() ([]byte, []int) {
	return fileDescriptorEquipment, []int{16}
}

func (m *C2SRebuildEquipmentProto) GetEquipmentId() []int32 {
	if m != nil {
		return m.EquipmentId
	}
	return nil
}

type S2CRebuildEquipmentProto struct {
	EquipmentId []int32 `protobuf:"varint,1,rep,name=equipment_id,json=equipmentId" json:"equipment_id,omitempty"`
}

func (m *S2CRebuildEquipmentProto) Reset()         { *m = S2CRebuildEquipmentProto{} }
func (m *S2CRebuildEquipmentProto) String() string { return proto.CompactTextString(m) }
func (*S2CRebuildEquipmentProto) ProtoMessage()    {}
func (*S2CRebuildEquipmentProto) Descriptor() ([]byte, []int) {
	return fileDescriptorEquipment, []int{17}
}

func (m *S2CRebuildEquipmentProto) GetEquipmentId() []int32 {
	if m != nil {
		return m.EquipmentId
	}
	return nil
}

type S2COpenEquipCombineProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *S2COpenEquipCombineProto) Reset()         { *m = S2COpenEquipCombineProto{} }
func (m *S2COpenEquipCombineProto) String() string { return proto.CompactTextString(m) }
func (*S2COpenEquipCombineProto) ProtoMessage()    {}
func (*S2COpenEquipCombineProto) Descriptor() ([]byte, []int) {
	return fileDescriptorEquipment, []int{18}
}

func (m *S2COpenEquipCombineProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type S2CRebuildUpgradeEquipmentProto struct {
	EquipmentId int32 `protobuf:"varint,1,opt,name=equipment_id,json=equipmentId,proto3" json:"equipment_id,omitempty"`
	CaptainId   int32 `protobuf:"varint,2,opt,name=captain_id,json=captainId,proto3" json:"captain_id,omitempty"`
}

func (m *S2CRebuildUpgradeEquipmentProto) Reset()         { *m = S2CRebuildUpgradeEquipmentProto{} }
func (m *S2CRebuildUpgradeEquipmentProto) String() string { return proto.CompactTextString(m) }
func (*S2CRebuildUpgradeEquipmentProto) ProtoMessage()    {}
func (*S2CRebuildUpgradeEquipmentProto) Descriptor() ([]byte, []int) {
	return fileDescriptorEquipment, []int{19}
}

func (m *S2CRebuildUpgradeEquipmentProto) GetEquipmentId() int32 {
	if m != nil {
		return m.EquipmentId
	}
	return 0
}

func (m *S2CRebuildUpgradeEquipmentProto) GetCaptainId() int32 {
	if m != nil {
		return m.CaptainId
	}
	return 0
}

type S2CRebuildRefineEquipmentProto struct {
	EquipmentId int32 `protobuf:"varint,1,opt,name=equipment_id,json=equipmentId,proto3" json:"equipment_id,omitempty"`
	CaptainId   int32 `protobuf:"varint,2,opt,name=captain_id,json=captainId,proto3" json:"captain_id,omitempty"`
}

func (m *S2CRebuildRefineEquipmentProto) Reset()         { *m = S2CRebuildRefineEquipmentProto{} }
func (m *S2CRebuildRefineEquipmentProto) String() string { return proto.CompactTextString(m) }
func (*S2CRebuildRefineEquipmentProto) ProtoMessage()    {}
func (*S2CRebuildRefineEquipmentProto) Descriptor() ([]byte, []int) {
	return fileDescriptorEquipment, []int{20}
}

func (m *S2CRebuildRefineEquipmentProto) GetEquipmentId() int32 {
	if m != nil {
		return m.EquipmentId
	}
	return 0
}

func (m *S2CRebuildRefineEquipmentProto) GetCaptainId() int32 {
	if m != nil {
		return m.CaptainId
	}
	return 0
}

type C2SOneKeyTakeOffProto struct {
	CaptainId int32 `protobuf:"varint,1,opt,name=captain_id,json=captainId,proto3" json:"captain_id,omitempty"`
}

func (m *C2SOneKeyTakeOffProto) Reset()                    { *m = C2SOneKeyTakeOffProto{} }
func (m *C2SOneKeyTakeOffProto) String() string            { return proto.CompactTextString(m) }
func (*C2SOneKeyTakeOffProto) ProtoMessage()               {}
func (*C2SOneKeyTakeOffProto) Descriptor() ([]byte, []int) { return fileDescriptorEquipment, []int{21} }

func (m *C2SOneKeyTakeOffProto) GetCaptainId() int32 {
	if m != nil {
		return m.CaptainId
	}
	return 0
}

type S2COneKeyTakeOffProto struct {
	CaptainId int32 `protobuf:"varint,1,opt,name=captain_id,json=captainId,proto3" json:"captain_id,omitempty"`
}

func (m *S2COneKeyTakeOffProto) Reset()                    { *m = S2COneKeyTakeOffProto{} }
func (m *S2COneKeyTakeOffProto) String() string            { return proto.CompactTextString(m) }
func (*S2COneKeyTakeOffProto) ProtoMessage()               {}
func (*S2COneKeyTakeOffProto) Descriptor() ([]byte, []int) { return fileDescriptorEquipment, []int{22} }

func (m *S2COneKeyTakeOffProto) GetCaptainId() int32 {
	if m != nil {
		return m.CaptainId
	}
	return 0
}

func init() {
	proto.RegisterType((*C2SViewChatEquipProto)(nil), "proto.C2SViewChatEquipProto")
	proto.RegisterType((*S2CViewChatEquipProto)(nil), "proto.S2CViewChatEquipProto")
	proto.RegisterType((*S2CAddEquipmentProto)(nil), "proto.S2CAddEquipmentProto")
	proto.RegisterType((*S2CAddEquipmentWithExpireTimeProto)(nil), "proto.S2CAddEquipmentWithExpireTimeProto")
	proto.RegisterType((*C2SWearEquipmentProto)(nil), "proto.C2SWearEquipmentProto")
	proto.RegisterType((*S2CWearEquipmentProto)(nil), "proto.S2CWearEquipmentProto")
	proto.RegisterType((*C2SUpgradeEquipmentProto)(nil), "proto.C2SUpgradeEquipmentProto")
	proto.RegisterType((*S2CUpgradeEquipmentProto)(nil), "proto.S2CUpgradeEquipmentProto")
	proto.RegisterType((*C2SUpgradeEquipmentAllProto)(nil), "proto.C2SUpgradeEquipmentAllProto")
	proto.RegisterType((*S2CUpgradeEquipmentAllProto)(nil), "proto.S2CUpgradeEquipmentAllProto")
	proto.RegisterType((*C2SRefinedEquipmentProto)(nil), "proto.C2SRefinedEquipmentProto")
	proto.RegisterType((*S2CRefinedEquipmentProto)(nil), "proto.S2CRefinedEquipmentProto")
	proto.RegisterType((*S2CUpdateEquipmentProto)(nil), "proto.S2CUpdateEquipmentProto")
	proto.RegisterType((*S2CUpdateMultiEquipmentProto)(nil), "proto.S2CUpdateMultiEquipmentProto")
	proto.RegisterType((*C2SSmeltEquipmentProto)(nil), "proto.C2SSmeltEquipmentProto")
	proto.RegisterType((*S2CSmeltEquipmentProto)(nil), "proto.S2CSmeltEquipmentProto")
	proto.RegisterType((*C2SRebuildEquipmentProto)(nil), "proto.C2SRebuildEquipmentProto")
	proto.RegisterType((*S2CRebuildEquipmentProto)(nil), "proto.S2CRebuildEquipmentProto")
	proto.RegisterType((*S2COpenEquipCombineProto)(nil), "proto.S2COpenEquipCombineProto")
	proto.RegisterType((*S2CRebuildUpgradeEquipmentProto)(nil), "proto.S2CRebuildUpgradeEquipmentProto")
	proto.RegisterType((*S2CRebuildRefineEquipmentProto)(nil), "proto.S2CRebuildRefineEquipmentProto")
	proto.RegisterType((*C2SOneKeyTakeOffProto)(nil), "proto.C2SOneKeyTakeOffProto")
	proto.RegisterType((*S2COneKeyTakeOffProto)(nil), "proto.S2COneKeyTakeOffProto")
}
func (m *C2SViewChatEquipProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SViewChatEquipProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DataId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEquipment(dAtA, i, uint64(m.DataId))
	}
	if m.Level != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEquipment(dAtA, i, uint64(m.Level))
	}
	if m.Refined != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEquipment(dAtA, i, uint64(m.Refined))
	}
	return i, nil
}

func (m *S2CViewChatEquipProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CViewChatEquipProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEquipment(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *S2CAddEquipmentProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CAddEquipmentProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEquipment(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *S2CAddEquipmentWithExpireTimeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CAddEquipmentWithExpireTimeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEquipment(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.ExpireTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEquipment(dAtA, i, uint64(m.ExpireTime))
	}
	return i, nil
}

func (m *C2SWearEquipmentProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SWearEquipmentProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CaptainId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEquipment(dAtA, i, uint64(m.CaptainId))
	}
	if m.EquipmentId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEquipment(dAtA, i, uint64(m.EquipmentId))
	}
	if m.Down {
		dAtA[i] = 0x18
		i++
		if m.Down {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Inhert {
		dAtA[i] = 0x20
		i++
		if m.Inhert {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CWearEquipmentProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CWearEquipmentProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CaptainId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEquipment(dAtA, i, uint64(m.CaptainId))
	}
	if m.UpId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEquipment(dAtA, i, uint64(m.UpId))
	}
	if m.DownId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEquipment(dAtA, i, uint64(m.DownId))
	}
	if m.Taoz != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintEquipment(dAtA, i, uint64(m.Taoz))
	}
	return i, nil
}

func (m *C2SUpgradeEquipmentProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SUpgradeEquipmentProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CaptainId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEquipment(dAtA, i, uint64(m.CaptainId))
	}
	if m.EquipmentId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEquipment(dAtA, i, uint64(m.EquipmentId))
	}
	if m.UpgradeTimes != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEquipment(dAtA, i, uint64(m.UpgradeTimes))
	}
	return i, nil
}

func (m *S2CUpgradeEquipmentProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpgradeEquipmentProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CaptainId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEquipment(dAtA, i, uint64(m.CaptainId))
	}
	if m.EquipmentId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEquipment(dAtA, i, uint64(m.EquipmentId))
	}
	if m.Level != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEquipment(dAtA, i, uint64(m.Level))
	}
	return i, nil
}

func (m *C2SUpgradeEquipmentAllProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SUpgradeEquipmentAllProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CaptainId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEquipment(dAtA, i, uint64(m.CaptainId))
	}
	return i, nil
}

func (m *S2CUpgradeEquipmentAllProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpgradeEquipmentAllProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CaptainId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEquipment(dAtA, i, uint64(m.CaptainId))
	}
	if len(m.Level) > 0 {
		for _, num := range m.Level {
			dAtA[i] = 0x10
			i++
			i = encodeVarintEquipment(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *C2SRefinedEquipmentProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SRefinedEquipmentProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CaptainId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEquipment(dAtA, i, uint64(m.CaptainId))
	}
	if m.EquipmentId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEquipment(dAtA, i, uint64(m.EquipmentId))
	}
	return i, nil
}

func (m *S2CRefinedEquipmentProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CRefinedEquipmentProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CaptainId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEquipment(dAtA, i, uint64(m.CaptainId))
	}
	if m.EquipmentId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEquipment(dAtA, i, uint64(m.EquipmentId))
	}
	if m.Level != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEquipment(dAtA, i, uint64(m.Level))
	}
	if m.Taoz != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintEquipment(dAtA, i, uint64(m.Taoz))
	}
	return i, nil
}

func (m *S2CUpdateEquipmentProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateEquipmentProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEquipment(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *S2CUpdateMultiEquipmentProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateMultiEquipmentProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, b := range m.Data {
			dAtA[i] = 0xa
			i++
			i = encodeVarintEquipment(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *C2SSmeltEquipmentProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SSmeltEquipmentProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EquipmentId) > 0 {
		for _, num := range m.EquipmentId {
			dAtA[i] = 0x8
			i++
			i = encodeVarintEquipment(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *S2CSmeltEquipmentProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSmeltEquipmentProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EquipmentId) > 0 {
		for _, num := range m.EquipmentId {
			dAtA[i] = 0x8
			i++
			i = encodeVarintEquipment(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *C2SRebuildEquipmentProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SRebuildEquipmentProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EquipmentId) > 0 {
		for _, num := range m.EquipmentId {
			dAtA[i] = 0x8
			i++
			i = encodeVarintEquipment(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *S2CRebuildEquipmentProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CRebuildEquipmentProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.EquipmentId) > 0 {
		for _, num := range m.EquipmentId {
			dAtA[i] = 0x8
			i++
			i = encodeVarintEquipment(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *S2COpenEquipCombineProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2COpenEquipCombineProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEquipment(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *S2CRebuildUpgradeEquipmentProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CRebuildUpgradeEquipmentProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EquipmentId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEquipment(dAtA, i, uint64(m.EquipmentId))
	}
	if m.CaptainId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEquipment(dAtA, i, uint64(m.CaptainId))
	}
	return i, nil
}

func (m *S2CRebuildRefineEquipmentProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CRebuildRefineEquipmentProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EquipmentId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEquipment(dAtA, i, uint64(m.EquipmentId))
	}
	if m.CaptainId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEquipment(dAtA, i, uint64(m.CaptainId))
	}
	return i, nil
}

func (m *C2SOneKeyTakeOffProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SOneKeyTakeOffProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CaptainId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEquipment(dAtA, i, uint64(m.CaptainId))
	}
	return i, nil
}

func (m *S2COneKeyTakeOffProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2COneKeyTakeOffProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CaptainId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEquipment(dAtA, i, uint64(m.CaptainId))
	}
	return i, nil
}

func encodeFixed64Equipment(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Equipment(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintEquipment(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *C2SViewChatEquipProto) Size() (n int) {
	var l int
	_ = l
	if m.DataId != 0 {
		n += 1 + sovEquipment(uint64(m.DataId))
	}
	if m.Level != 0 {
		n += 1 + sovEquipment(uint64(m.Level))
	}
	if m.Refined != 0 {
		n += 1 + sovEquipment(uint64(m.Refined))
	}
	return n
}

func (m *S2CViewChatEquipProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovEquipment(uint64(l))
	}
	return n
}

func (m *S2CAddEquipmentProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovEquipment(uint64(l))
	}
	return n
}

func (m *S2CAddEquipmentWithExpireTimeProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovEquipment(uint64(l))
	}
	if m.ExpireTime != 0 {
		n += 1 + sovEquipment(uint64(m.ExpireTime))
	}
	return n
}

func (m *C2SWearEquipmentProto) Size() (n int) {
	var l int
	_ = l
	if m.CaptainId != 0 {
		n += 1 + sovEquipment(uint64(m.CaptainId))
	}
	if m.EquipmentId != 0 {
		n += 1 + sovEquipment(uint64(m.EquipmentId))
	}
	if m.Down {
		n += 2
	}
	if m.Inhert {
		n += 2
	}
	return n
}

func (m *S2CWearEquipmentProto) Size() (n int) {
	var l int
	_ = l
	if m.CaptainId != 0 {
		n += 1 + sovEquipment(uint64(m.CaptainId))
	}
	if m.UpId != 0 {
		n += 1 + sovEquipment(uint64(m.UpId))
	}
	if m.DownId != 0 {
		n += 1 + sovEquipment(uint64(m.DownId))
	}
	if m.Taoz != 0 {
		n += 1 + sovEquipment(uint64(m.Taoz))
	}
	return n
}

func (m *C2SUpgradeEquipmentProto) Size() (n int) {
	var l int
	_ = l
	if m.CaptainId != 0 {
		n += 1 + sovEquipment(uint64(m.CaptainId))
	}
	if m.EquipmentId != 0 {
		n += 1 + sovEquipment(uint64(m.EquipmentId))
	}
	if m.UpgradeTimes != 0 {
		n += 1 + sovEquipment(uint64(m.UpgradeTimes))
	}
	return n
}

func (m *S2CUpgradeEquipmentProto) Size() (n int) {
	var l int
	_ = l
	if m.CaptainId != 0 {
		n += 1 + sovEquipment(uint64(m.CaptainId))
	}
	if m.EquipmentId != 0 {
		n += 1 + sovEquipment(uint64(m.EquipmentId))
	}
	if m.Level != 0 {
		n += 1 + sovEquipment(uint64(m.Level))
	}
	return n
}

func (m *C2SUpgradeEquipmentAllProto) Size() (n int) {
	var l int
	_ = l
	if m.CaptainId != 0 {
		n += 1 + sovEquipment(uint64(m.CaptainId))
	}
	return n
}

func (m *S2CUpgradeEquipmentAllProto) Size() (n int) {
	var l int
	_ = l
	if m.CaptainId != 0 {
		n += 1 + sovEquipment(uint64(m.CaptainId))
	}
	if len(m.Level) > 0 {
		for _, e := range m.Level {
			n += 1 + sovEquipment(uint64(e))
		}
	}
	return n
}

func (m *C2SRefinedEquipmentProto) Size() (n int) {
	var l int
	_ = l
	if m.CaptainId != 0 {
		n += 1 + sovEquipment(uint64(m.CaptainId))
	}
	if m.EquipmentId != 0 {
		n += 1 + sovEquipment(uint64(m.EquipmentId))
	}
	return n
}

func (m *S2CRefinedEquipmentProto) Size() (n int) {
	var l int
	_ = l
	if m.CaptainId != 0 {
		n += 1 + sovEquipment(uint64(m.CaptainId))
	}
	if m.EquipmentId != 0 {
		n += 1 + sovEquipment(uint64(m.EquipmentId))
	}
	if m.Level != 0 {
		n += 1 + sovEquipment(uint64(m.Level))
	}
	if m.Taoz != 0 {
		n += 1 + sovEquipment(uint64(m.Taoz))
	}
	return n
}

func (m *S2CUpdateEquipmentProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovEquipment(uint64(l))
	}
	return n
}

func (m *S2CUpdateMultiEquipmentProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, b := range m.Data {
			l = len(b)
			n += 1 + l + sovEquipment(uint64(l))
		}
	}
	return n
}

func (m *C2SSmeltEquipmentProto) Size() (n int) {
	var l int
	_ = l
	if len(m.EquipmentId) > 0 {
		for _, e := range m.EquipmentId {
			n += 1 + sovEquipment(uint64(e))
		}
	}
	return n
}

func (m *S2CSmeltEquipmentProto) Size() (n int) {
	var l int
	_ = l
	if len(m.EquipmentId) > 0 {
		for _, e := range m.EquipmentId {
			n += 1 + sovEquipment(uint64(e))
		}
	}
	return n
}

func (m *C2SRebuildEquipmentProto) Size() (n int) {
	var l int
	_ = l
	if len(m.EquipmentId) > 0 {
		for _, e := range m.EquipmentId {
			n += 1 + sovEquipment(uint64(e))
		}
	}
	return n
}

func (m *S2CRebuildEquipmentProto) Size() (n int) {
	var l int
	_ = l
	if len(m.EquipmentId) > 0 {
		for _, e := range m.EquipmentId {
			n += 1 + sovEquipment(uint64(e))
		}
	}
	return n
}

func (m *S2COpenEquipCombineProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEquipment(uint64(m.Id))
	}
	return n
}

func (m *S2CRebuildUpgradeEquipmentProto) Size() (n int) {
	var l int
	_ = l
	if m.EquipmentId != 0 {
		n += 1 + sovEquipment(uint64(m.EquipmentId))
	}
	if m.CaptainId != 0 {
		n += 1 + sovEquipment(uint64(m.CaptainId))
	}
	return n
}

func (m *S2CRebuildRefineEquipmentProto) Size() (n int) {
	var l int
	_ = l
	if m.EquipmentId != 0 {
		n += 1 + sovEquipment(uint64(m.EquipmentId))
	}
	if m.CaptainId != 0 {
		n += 1 + sovEquipment(uint64(m.CaptainId))
	}
	return n
}

func (m *C2SOneKeyTakeOffProto) Size() (n int) {
	var l int
	_ = l
	if m.CaptainId != 0 {
		n += 1 + sovEquipment(uint64(m.CaptainId))
	}
	return n
}

func (m *S2COneKeyTakeOffProto) Size() (n int) {
	var l int
	_ = l
	if m.CaptainId != 0 {
		n += 1 + sovEquipment(uint64(m.CaptainId))
	}
	return n
}

func sovEquipment(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEquipment(x uint64) (n int) {
	return sovEquipment(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *C2SViewChatEquipProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquipment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SViewChatEquipProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SViewChatEquipProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataId", wireType)
			}
			m.DataId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Refined", wireType)
			}
			m.Refined = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Refined |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEquipment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEquipment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CViewChatEquipProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquipment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CViewChatEquipProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CViewChatEquipProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEquipment
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEquipment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEquipment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CAddEquipmentProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquipment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CAddEquipmentProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CAddEquipmentProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEquipment
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEquipment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEquipment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CAddEquipmentWithExpireTimeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquipment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CAddEquipmentWithExpireTimeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CAddEquipmentWithExpireTimeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEquipment
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireTime", wireType)
			}
			m.ExpireTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEquipment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEquipment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SWearEquipmentProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquipment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SWearEquipmentProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SWearEquipmentProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainId", wireType)
			}
			m.CaptainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipmentId", wireType)
			}
			m.EquipmentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EquipmentId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Down", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Down = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inhert", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Inhert = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEquipment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEquipment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CWearEquipmentProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquipment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CWearEquipmentProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CWearEquipmentProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainId", wireType)
			}
			m.CaptainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpId", wireType)
			}
			m.UpId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownId", wireType)
			}
			m.DownId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DownId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Taoz", wireType)
			}
			m.Taoz = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Taoz |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEquipment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEquipment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SUpgradeEquipmentProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquipment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SUpgradeEquipmentProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SUpgradeEquipmentProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainId", wireType)
			}
			m.CaptainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipmentId", wireType)
			}
			m.EquipmentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EquipmentId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgradeTimes", wireType)
			}
			m.UpgradeTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpgradeTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEquipment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEquipment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpgradeEquipmentProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquipment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpgradeEquipmentProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpgradeEquipmentProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainId", wireType)
			}
			m.CaptainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipmentId", wireType)
			}
			m.EquipmentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EquipmentId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEquipment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEquipment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SUpgradeEquipmentAllProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquipment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SUpgradeEquipmentAllProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SUpgradeEquipmentAllProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainId", wireType)
			}
			m.CaptainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEquipment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEquipment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpgradeEquipmentAllProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquipment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpgradeEquipmentAllProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpgradeEquipmentAllProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainId", wireType)
			}
			m.CaptainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEquipment
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Level = append(m.Level, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEquipment
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEquipment
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEquipment
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Level = append(m.Level, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEquipment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEquipment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SRefinedEquipmentProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquipment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SRefinedEquipmentProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SRefinedEquipmentProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainId", wireType)
			}
			m.CaptainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipmentId", wireType)
			}
			m.EquipmentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EquipmentId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEquipment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEquipment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CRefinedEquipmentProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquipment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CRefinedEquipmentProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CRefinedEquipmentProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainId", wireType)
			}
			m.CaptainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipmentId", wireType)
			}
			m.EquipmentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EquipmentId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Taoz", wireType)
			}
			m.Taoz = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Taoz |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEquipment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEquipment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateEquipmentProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquipment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateEquipmentProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateEquipmentProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEquipment
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEquipment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEquipment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateMultiEquipmentProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquipment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateMultiEquipmentProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateMultiEquipmentProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEquipment
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, make([]byte, postIndex-iNdEx))
			copy(m.Data[len(m.Data)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEquipment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEquipment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SSmeltEquipmentProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquipment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SSmeltEquipmentProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SSmeltEquipmentProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEquipment
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EquipmentId = append(m.EquipmentId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEquipment
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEquipment
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEquipment
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EquipmentId = append(m.EquipmentId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipmentId", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEquipment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEquipment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSmeltEquipmentProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquipment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSmeltEquipmentProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSmeltEquipmentProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEquipment
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EquipmentId = append(m.EquipmentId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEquipment
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEquipment
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEquipment
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EquipmentId = append(m.EquipmentId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipmentId", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEquipment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEquipment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SRebuildEquipmentProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquipment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SRebuildEquipmentProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SRebuildEquipmentProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEquipment
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EquipmentId = append(m.EquipmentId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEquipment
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEquipment
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEquipment
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EquipmentId = append(m.EquipmentId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipmentId", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEquipment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEquipment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CRebuildEquipmentProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquipment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CRebuildEquipmentProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CRebuildEquipmentProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEquipment
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EquipmentId = append(m.EquipmentId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEquipment
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEquipment
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEquipment
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EquipmentId = append(m.EquipmentId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipmentId", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEquipment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEquipment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2COpenEquipCombineProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquipment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2COpenEquipCombineProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2COpenEquipCombineProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEquipment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEquipment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CRebuildUpgradeEquipmentProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquipment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CRebuildUpgradeEquipmentProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CRebuildUpgradeEquipmentProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipmentId", wireType)
			}
			m.EquipmentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EquipmentId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainId", wireType)
			}
			m.CaptainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEquipment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEquipment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CRebuildRefineEquipmentProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquipment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CRebuildRefineEquipmentProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CRebuildRefineEquipmentProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipmentId", wireType)
			}
			m.EquipmentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EquipmentId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainId", wireType)
			}
			m.CaptainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEquipment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEquipment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SOneKeyTakeOffProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquipment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SOneKeyTakeOffProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SOneKeyTakeOffProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainId", wireType)
			}
			m.CaptainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEquipment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEquipment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2COneKeyTakeOffProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquipment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2COneKeyTakeOffProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2COneKeyTakeOffProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainId", wireType)
			}
			m.CaptainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquipment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEquipment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEquipment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEquipment(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEquipment
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEquipment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEquipment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEquipment
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEquipment
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEquipment(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEquipment = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEquipment   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/gen/pb/equipment/equipment.proto", fileDescriptorEquipment)
}

var fileDescriptorEquipment = []byte{
	// 612 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0xdd, 0x6a, 0x13, 0x41,
	0x14, 0xee, 0x26, 0xdd, 0xd6, 0x9e, 0x46, 0x91, 0xb5, 0x4d, 0x17, 0x6a, 0x53, 0x3b, 0x22, 0x94,
	0x8a, 0x0d, 0xac, 0x50, 0x41, 0x84, 0x92, 0x2e, 0x01, 0x83, 0x48, 0x24, 0x5b, 0x5b, 0x14, 0xa1,
	0xce, 0x66, 0x26, 0xc9, 0xe0, 0xfe, 0xb9, 0x9d, 0x35, 0xd5, 0x3b, 0x2f, 0xf4, 0x19, 0x7c, 0x24,
	0x2f, 0x7d, 0x04, 0x89, 0x2f, 0x22, 0x39, 0xbb, 0xd9, 0xb5, 0xe9, 0x06, 0x52, 0x9b, 0x5e, 0x65,
	0xe6, 0xe4, 0x9c, 0xef, 0x7c, 0xf3, 0x7d, 0x67, 0x66, 0xe1, 0x69, 0x57, 0xc8, 0x5e, 0x64, 0xef,
	0xb6, 0x7d, 0xb7, 0xea, 0x88, 0x6e, 0x4f, 0x06, 0xb4, 0x5f, 0x75, 0xa9, 0xc3, 0x9f, 0x54, 0xbb,
	0xdc, 0xab, 0x06, 0x76, 0x95, 0x7f, 0x8c, 0x44, 0xe0, 0x72, 0x4f, 0x66, 0xab, 0xdd, 0x20, 0xf4,
	0xa5, 0xaf, 0xa9, 0xf8, 0x43, 0xde, 0xc3, 0xaa, 0x69, 0x58, 0x47, 0x82, 0xf7, 0xcd, 0x1e, 0x95,
	0xf5, 0x61, 0xd2, 0x2b, 0xfc, 0x7f, 0x0d, 0x16, 0x19, 0x95, 0xf4, 0x44, 0x30, 0x5d, 0xb9, 0xa7,
	0x6c, 0xab, 0xad, 0x85, 0xe1, 0xb6, 0xc1, 0xb4, 0x15, 0x50, 0x1d, 0xfe, 0x89, 0x3b, 0x7a, 0x01,
	0xc3, 0xf1, 0x46, 0xd3, 0x61, 0x31, 0xe4, 0x1d, 0xe1, 0x71, 0xa6, 0x17, 0x31, 0x3e, 0xda, 0x92,
	0x87, 0xb0, 0x6a, 0x19, 0x66, 0x4e, 0x07, 0x0d, 0xe6, 0x87, 0x90, 0x08, 0x5f, 0x6a, 0xe1, 0x9a,
	0xec, 0xc0, 0x8a, 0x65, 0x98, 0x35, 0xc6, 0xea, 0x23, 0xba, 0x93, 0x73, 0xdf, 0x00, 0x19, 0xcb,
	0x3d, 0x16, 0xb2, 0x57, 0x3f, 0x0b, 0x44, 0xc8, 0x0f, 0x85, 0xcb, 0x27, 0x56, 0x6a, 0x9b, 0xb0,
	0xcc, 0x31, 0xed, 0x44, 0x0a, 0x97, 0x27, 0x07, 0x01, 0x9e, 0x56, 0x92, 0x6f, 0x0a, 0xca, 0x72,
	0xcc, 0x69, 0x38, 0x46, 0x64, 0x03, 0xa0, 0x4d, 0x03, 0x49, 0x85, 0x97, 0x29, 0xb3, 0x94, 0x44,
	0x1a, 0x4c, 0xdb, 0x82, 0x52, 0x2a, 0xf4, 0x30, 0x21, 0x86, 0x5e, 0x4e, 0x63, 0x0d, 0x86, 0x84,
	0xfc, 0xbe, 0x87, 0x32, 0xdd, 0x68, 0xe1, 0x5a, 0x2b, 0xc3, 0x82, 0xf0, 0x7a, 0x3c, 0x94, 0xfa,
	0x3c, 0x46, 0x93, 0x1d, 0x39, 0x43, 0xed, 0x2e, 0x4f, 0xe3, 0x0e, 0xa8, 0x51, 0x90, 0xf5, 0x9f,
	0x8f, 0x82, 0x06, 0x43, 0x47, 0xfd, 0x3e, 0x16, 0x14, 0x13, 0x47, 0xfd, 0xbe, 0x17, 0x33, 0x92,
	0xd4, 0xff, 0x82, 0xbd, 0xd5, 0x16, 0xae, 0xc9, 0x57, 0x05, 0x74, 0xd3, 0xb0, 0x5e, 0x07, 0xdd,
	0x90, 0x32, 0x3e, 0x73, 0x11, 0xee, 0xc3, 0xcd, 0x28, 0x86, 0x46, 0x0b, 0x4e, 0x13, 0x46, 0xa5,
	0x24, 0x38, 0x34, 0xe1, 0x94, 0x84, 0xa0, 0x5b, 0x86, 0x79, 0x5d, 0x14, 0xd2, 0x39, 0x2e, 0xfe,
	0x33, 0xc7, 0xe4, 0x19, 0xac, 0xe7, 0x1c, 0xbb, 0xe6, 0x38, 0xd3, 0xb4, 0x25, 0x47, 0xb0, 0x9e,
	0xc3, 0x78, 0xca, 0x6a, 0x4d, 0xcf, 0x6e, 0x56, 0x71, 0x5b, 0x3d, 0x28, 0xdc, 0x9e, 0x1b, 0xb1,
	0x7a, 0x87, 0x66, 0xb4, 0xe2, 0x1b, 0x35, 0x6b, 0x25, 0xc8, 0x77, 0x05, 0x85, 0xbe, 0x26, 0xf8,
	0x7c, 0xa1, 0x73, 0x87, 0xee, 0x11, 0xac, 0xa1, 0x7c, 0x8c, 0x4a, 0x3e, 0xc5, 0x03, 0x60, 0xc0,
	0xdd, 0x34, 0xfd, 0x65, 0xe4, 0x48, 0x31, 0xb1, 0xa6, 0x98, 0xd6, 0xec, 0x43, 0xd9, 0x34, 0x2c,
	0xcb, 0xe5, 0x8e, 0x1c, 0xcb, 0x7e, 0x30, 0x76, 0x12, 0x25, 0x35, 0xe1, 0x9c, 0x58, 0xfb, 0x50,
	0xb6, 0x0c, 0xf3, 0x0a, 0x00, 0xb5, 0xc4, 0x4b, 0x3b, 0x12, 0x0e, 0xfb, 0x6f, 0x08, 0xf4, 0xeb,
	0x0a, 0x10, 0x3b, 0x08, 0xd1, 0x0c, 0xb8, 0x87, 0xf5, 0xa6, 0xef, 0xda, 0xc2, 0x4b, 0x9e, 0xcc,
	0x5b, 0x50, 0x48, 0xad, 0x2e, 0x08, 0x46, 0xda, 0xb0, 0x99, 0xb5, 0xcb, 0xbf, 0x8e, 0x5b, 0x17,
	0xba, 0x5e, 0x18, 0x83, 0xf3, 0x83, 0x54, 0x18, 0xbf, 0x3a, 0x36, 0x54, 0xb2, 0x26, 0xf1, 0x28,
	0xce, 0xbc, 0xc7, 0x1e, 0xbe, 0xea, 0x4d, 0x8f, 0xbf, 0xe0, 0x9f, 0x0f, 0xe9, 0x07, 0xde, 0xec,
	0x74, 0xa6, 0xba, 0xd6, 0x7b, 0xf8, 0x0c, 0x5f, 0xba, 0xee, 0x60, 0xe3, 0xe7, 0xa0, 0xa2, 0xfc,
	0x1a, 0x54, 0x94, 0xdf, 0x83, 0x8a, 0xf2, 0xe3, 0x4f, 0x65, 0xee, 0xb9, 0xf2, 0x76, 0x29, 0xe5,
	0x6b, 0x2f, 0xe0, 0x27, 0xf8, 0xf1, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x79, 0x50, 0xc9, 0x18,
	0xc7, 0x07, 0x00, 0x00,
}
