// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/gen/pb/dungeon/dungeon.proto
// DO NOT EDIT!

/*
	Package dungeon is a generated protocol buffer package.

	It is generated from these files:
		github.com/lightpaw/male7/gen/pb/dungeon/dungeon.proto

	It has these top-level messages:
		C2SChallengeProto
		S2CChallengeProto
		S2CUpdateChallengeTimesProto
		C2SCollectChapterPrizeProto
		S2CCollectChapterPrizeProto
		C2SCollectPassDungeonPrizeProto
		S2CCollectPassDungeonPrizeProto
		C2SAutoChallengeProto
		S2CAutoChallengeProto
		C2SCollectChapterStarPrizeProto
		S2CCollectChapterStarPrizeProto
*/
package dungeon

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type C2SChallengeProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SChallengeProto) Reset()                    { *m = C2SChallengeProto{} }
func (m *C2SChallengeProto) String() string            { return proto.CompactTextString(m) }
func (*C2SChallengeProto) ProtoMessage()               {}
func (*C2SChallengeProto) Descriptor() ([]byte, []int) { return fileDescriptorDungeon, []int{0} }

func (m *C2SChallengeProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type S2CChallengeProto struct {
	Id          int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Link        string `protobuf:"bytes,2,opt,name=link,proto3" json:"link,omitempty"`
	Share       []byte `protobuf:"bytes,5,opt,name=share,proto3" json:"share,omitempty"`
	Prize       []byte `protobuf:"bytes,3,opt,name=prize,proto3" json:"prize,omitempty"`
	Pass        bool   `protobuf:"varint,4,opt,name=pass,proto3" json:"pass,omitempty"`
	IsFirstPass bool   `protobuf:"varint,6,opt,name=is_first_pass,json=isFirstPass,proto3" json:"is_first_pass,omitempty"`
	EnabledStar []bool `protobuf:"varint,7,rep,name=enabled_star,json=enabledStar" json:"enabled_star,omitempty"`
	PassSeconds int32  `protobuf:"varint,8,opt,name=pass_seconds,json=passSeconds,proto3" json:"pass_seconds,omitempty"`
	ChapterStar int32  `protobuf:"varint,9,opt,name=chapter_star,json=chapterStar,proto3" json:"chapter_star,omitempty"`
	PassTimes   int32  `protobuf:"varint,10,opt,name=pass_times,json=passTimes,proto3" json:"pass_times,omitempty"`
	IsRefresh   bool   `protobuf:"varint,11,opt,name=is_refresh,json=isRefresh,proto3" json:"is_refresh,omitempty"`
}

func (m *S2CChallengeProto) Reset()                    { *m = S2CChallengeProto{} }
func (m *S2CChallengeProto) String() string            { return proto.CompactTextString(m) }
func (*S2CChallengeProto) ProtoMessage()               {}
func (*S2CChallengeProto) Descriptor() ([]byte, []int) { return fileDescriptorDungeon, []int{1} }

func (m *S2CChallengeProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *S2CChallengeProto) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *S2CChallengeProto) GetShare() []byte {
	if m != nil {
		return m.Share
	}
	return nil
}

func (m *S2CChallengeProto) GetPrize() []byte {
	if m != nil {
		return m.Prize
	}
	return nil
}

func (m *S2CChallengeProto) GetPass() bool {
	if m != nil {
		return m.Pass
	}
	return false
}

func (m *S2CChallengeProto) GetIsFirstPass() bool {
	if m != nil {
		return m.IsFirstPass
	}
	return false
}

func (m *S2CChallengeProto) GetEnabledStar() []bool {
	if m != nil {
		return m.EnabledStar
	}
	return nil
}

func (m *S2CChallengeProto) GetPassSeconds() int32 {
	if m != nil {
		return m.PassSeconds
	}
	return 0
}

func (m *S2CChallengeProto) GetChapterStar() int32 {
	if m != nil {
		return m.ChapterStar
	}
	return 0
}

func (m *S2CChallengeProto) GetPassTimes() int32 {
	if m != nil {
		return m.PassTimes
	}
	return 0
}

func (m *S2CChallengeProto) GetIsRefresh() bool {
	if m != nil {
		return m.IsRefresh
	}
	return false
}

type S2CUpdateChallengeTimesProto struct {
	StartTime int32 `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
}

func (m *S2CUpdateChallengeTimesProto) Reset()         { *m = S2CUpdateChallengeTimesProto{} }
func (m *S2CUpdateChallengeTimesProto) String() string { return proto.CompactTextString(m) }
func (*S2CUpdateChallengeTimesProto) ProtoMessage()    {}
func (*S2CUpdateChallengeTimesProto) Descriptor() ([]byte, []int) {
	return fileDescriptorDungeon, []int{2}
}

func (m *S2CUpdateChallengeTimesProto) GetStartTime() int32 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

type C2SCollectChapterPrizeProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SCollectChapterPrizeProto) Reset()         { *m = C2SCollectChapterPrizeProto{} }
func (m *C2SCollectChapterPrizeProto) String() string { return proto.CompactTextString(m) }
func (*C2SCollectChapterPrizeProto) ProtoMessage()    {}
func (*C2SCollectChapterPrizeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorDungeon, []int{3}
}

func (m *C2SCollectChapterPrizeProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type S2CCollectChapterPrizeProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *S2CCollectChapterPrizeProto) Reset()         { *m = S2CCollectChapterPrizeProto{} }
func (m *S2CCollectChapterPrizeProto) String() string { return proto.CompactTextString(m) }
func (*S2CCollectChapterPrizeProto) ProtoMessage()    {}
func (*S2CCollectChapterPrizeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorDungeon, []int{4}
}

func (m *S2CCollectChapterPrizeProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type C2SCollectPassDungeonPrizeProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SCollectPassDungeonPrizeProto) Reset()         { *m = C2SCollectPassDungeonPrizeProto{} }
func (m *C2SCollectPassDungeonPrizeProto) String() string { return proto.CompactTextString(m) }
func (*C2SCollectPassDungeonPrizeProto) ProtoMessage()    {}
func (*C2SCollectPassDungeonPrizeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorDungeon, []int{5}
}

func (m *C2SCollectPassDungeonPrizeProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type S2CCollectPassDungeonPrizeProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *S2CCollectPassDungeonPrizeProto) Reset()         { *m = S2CCollectPassDungeonPrizeProto{} }
func (m *S2CCollectPassDungeonPrizeProto) String() string { return proto.CompactTextString(m) }
func (*S2CCollectPassDungeonPrizeProto) ProtoMessage()    {}
func (*S2CCollectPassDungeonPrizeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorDungeon, []int{6}
}

func (m *S2CCollectPassDungeonPrizeProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type C2SAutoChallengeProto struct {
	Id    int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Times int32 `protobuf:"varint,2,opt,name=times,proto3" json:"times,omitempty"`
}

func (m *C2SAutoChallengeProto) Reset()                    { *m = C2SAutoChallengeProto{} }
func (m *C2SAutoChallengeProto) String() string            { return proto.CompactTextString(m) }
func (*C2SAutoChallengeProto) ProtoMessage()               {}
func (*C2SAutoChallengeProto) Descriptor() ([]byte, []int) { return fileDescriptorDungeon, []int{7} }

func (m *C2SAutoChallengeProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *C2SAutoChallengeProto) GetTimes() int32 {
	if m != nil {
		return m.Times
	}
	return 0
}

type S2CAutoChallengeProto struct {
	Id        int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Prizes    [][]byte `protobuf:"bytes,2,rep,name=prizes" json:"prizes,omitempty"`
	PassTimes int32    `protobuf:"varint,4,opt,name=pass_times,json=passTimes,proto3" json:"pass_times,omitempty"`
}

func (m *S2CAutoChallengeProto) Reset()                    { *m = S2CAutoChallengeProto{} }
func (m *S2CAutoChallengeProto) String() string            { return proto.CompactTextString(m) }
func (*S2CAutoChallengeProto) ProtoMessage()               {}
func (*S2CAutoChallengeProto) Descriptor() ([]byte, []int) { return fileDescriptorDungeon, []int{8} }

func (m *S2CAutoChallengeProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *S2CAutoChallengeProto) GetPrizes() [][]byte {
	if m != nil {
		return m.Prizes
	}
	return nil
}

func (m *S2CAutoChallengeProto) GetPassTimes() int32 {
	if m != nil {
		return m.PassTimes
	}
	return 0
}

type C2SCollectChapterStarPrizeProto struct {
	Id       int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CollectN int32 `protobuf:"varint,2,opt,name=collect_n,json=collectN,proto3" json:"collect_n,omitempty"`
}

func (m *C2SCollectChapterStarPrizeProto) Reset()         { *m = C2SCollectChapterStarPrizeProto{} }
func (m *C2SCollectChapterStarPrizeProto) String() string { return proto.CompactTextString(m) }
func (*C2SCollectChapterStarPrizeProto) ProtoMessage()    {}
func (*C2SCollectChapterStarPrizeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorDungeon, []int{9}
}

func (m *C2SCollectChapterStarPrizeProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *C2SCollectChapterStarPrizeProto) GetCollectN() int32 {
	if m != nil {
		return m.CollectN
	}
	return 0
}

type S2CCollectChapterStarPrizeProto struct {
	Id       int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CollectN int32  `protobuf:"varint,2,opt,name=collect_n,json=collectN,proto3" json:"collect_n,omitempty"`
	Prize    []byte `protobuf:"bytes,3,opt,name=prize,proto3" json:"prize,omitempty"`
}

func (m *S2CCollectChapterStarPrizeProto) Reset()         { *m = S2CCollectChapterStarPrizeProto{} }
func (m *S2CCollectChapterStarPrizeProto) String() string { return proto.CompactTextString(m) }
func (*S2CCollectChapterStarPrizeProto) ProtoMessage()    {}
func (*S2CCollectChapterStarPrizeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorDungeon, []int{10}
}

func (m *S2CCollectChapterStarPrizeProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *S2CCollectChapterStarPrizeProto) GetCollectN() int32 {
	if m != nil {
		return m.CollectN
	}
	return 0
}

func (m *S2CCollectChapterStarPrizeProto) GetPrize() []byte {
	if m != nil {
		return m.Prize
	}
	return nil
}

func init() {
	proto.RegisterType((*C2SChallengeProto)(nil), "proto.C2SChallengeProto")
	proto.RegisterType((*S2CChallengeProto)(nil), "proto.S2CChallengeProto")
	proto.RegisterType((*S2CUpdateChallengeTimesProto)(nil), "proto.S2CUpdateChallengeTimesProto")
	proto.RegisterType((*C2SCollectChapterPrizeProto)(nil), "proto.C2SCollectChapterPrizeProto")
	proto.RegisterType((*S2CCollectChapterPrizeProto)(nil), "proto.S2CCollectChapterPrizeProto")
	proto.RegisterType((*C2SCollectPassDungeonPrizeProto)(nil), "proto.C2SCollectPassDungeonPrizeProto")
	proto.RegisterType((*S2CCollectPassDungeonPrizeProto)(nil), "proto.S2CCollectPassDungeonPrizeProto")
	proto.RegisterType((*C2SAutoChallengeProto)(nil), "proto.C2SAutoChallengeProto")
	proto.RegisterType((*S2CAutoChallengeProto)(nil), "proto.S2CAutoChallengeProto")
	proto.RegisterType((*C2SCollectChapterStarPrizeProto)(nil), "proto.C2SCollectChapterStarPrizeProto")
	proto.RegisterType((*S2CCollectChapterStarPrizeProto)(nil), "proto.S2CCollectChapterStarPrizeProto")
}
func (m *C2SChallengeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SChallengeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDungeon(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *S2CChallengeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CChallengeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDungeon(dAtA, i, uint64(m.Id))
	}
	if len(m.Link) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDungeon(dAtA, i, uint64(len(m.Link)))
		i += copy(dAtA[i:], m.Link)
	}
	if len(m.Prize) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDungeon(dAtA, i, uint64(len(m.Prize)))
		i += copy(dAtA[i:], m.Prize)
	}
	if m.Pass {
		dAtA[i] = 0x20
		i++
		if m.Pass {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Share) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintDungeon(dAtA, i, uint64(len(m.Share)))
		i += copy(dAtA[i:], m.Share)
	}
	if m.IsFirstPass {
		dAtA[i] = 0x30
		i++
		if m.IsFirstPass {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.EnabledStar) > 0 {
		for _, b := range m.EnabledStar {
			dAtA[i] = 0x38
			i++
			if b {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i++
		}
	}
	if m.PassSeconds != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintDungeon(dAtA, i, uint64(m.PassSeconds))
	}
	if m.ChapterStar != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintDungeon(dAtA, i, uint64(m.ChapterStar))
	}
	if m.PassTimes != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintDungeon(dAtA, i, uint64(m.PassTimes))
	}
	if m.IsRefresh {
		dAtA[i] = 0x58
		i++
		if m.IsRefresh {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CUpdateChallengeTimesProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateChallengeTimesProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StartTime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDungeon(dAtA, i, uint64(m.StartTime))
	}
	return i, nil
}

func (m *C2SCollectChapterPrizeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCollectChapterPrizeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDungeon(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *S2CCollectChapterPrizeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCollectChapterPrizeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDungeon(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *C2SCollectPassDungeonPrizeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCollectPassDungeonPrizeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDungeon(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *S2CCollectPassDungeonPrizeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCollectPassDungeonPrizeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDungeon(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *C2SAutoChallengeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SAutoChallengeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDungeon(dAtA, i, uint64(m.Id))
	}
	if m.Times != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDungeon(dAtA, i, uint64(m.Times))
	}
	return i, nil
}

func (m *S2CAutoChallengeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CAutoChallengeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDungeon(dAtA, i, uint64(m.Id))
	}
	if len(m.Prizes) > 0 {
		for _, b := range m.Prizes {
			dAtA[i] = 0x12
			i++
			i = encodeVarintDungeon(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.PassTimes != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDungeon(dAtA, i, uint64(m.PassTimes))
	}
	return i, nil
}

func (m *C2SCollectChapterStarPrizeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCollectChapterStarPrizeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDungeon(dAtA, i, uint64(m.Id))
	}
	if m.CollectN != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDungeon(dAtA, i, uint64(m.CollectN))
	}
	return i, nil
}

func (m *S2CCollectChapterStarPrizeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCollectChapterStarPrizeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDungeon(dAtA, i, uint64(m.Id))
	}
	if m.CollectN != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDungeon(dAtA, i, uint64(m.CollectN))
	}
	if len(m.Prize) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDungeon(dAtA, i, uint64(len(m.Prize)))
		i += copy(dAtA[i:], m.Prize)
	}
	return i, nil
}

func encodeFixed64Dungeon(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Dungeon(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintDungeon(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *C2SChallengeProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDungeon(uint64(m.Id))
	}
	return n
}

func (m *S2CChallengeProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDungeon(uint64(m.Id))
	}
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovDungeon(uint64(l))
	}
	l = len(m.Prize)
	if l > 0 {
		n += 1 + l + sovDungeon(uint64(l))
	}
	if m.Pass {
		n += 2
	}
	l = len(m.Share)
	if l > 0 {
		n += 1 + l + sovDungeon(uint64(l))
	}
	if m.IsFirstPass {
		n += 2
	}
	if len(m.EnabledStar) > 0 {
		n += 2 * len(m.EnabledStar)
	}
	if m.PassSeconds != 0 {
		n += 1 + sovDungeon(uint64(m.PassSeconds))
	}
	if m.ChapterStar != 0 {
		n += 1 + sovDungeon(uint64(m.ChapterStar))
	}
	if m.PassTimes != 0 {
		n += 1 + sovDungeon(uint64(m.PassTimes))
	}
	if m.IsRefresh {
		n += 2
	}
	return n
}

func (m *S2CUpdateChallengeTimesProto) Size() (n int) {
	var l int
	_ = l
	if m.StartTime != 0 {
		n += 1 + sovDungeon(uint64(m.StartTime))
	}
	return n
}

func (m *C2SCollectChapterPrizeProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDungeon(uint64(m.Id))
	}
	return n
}

func (m *S2CCollectChapterPrizeProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDungeon(uint64(m.Id))
	}
	return n
}

func (m *C2SCollectPassDungeonPrizeProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDungeon(uint64(m.Id))
	}
	return n
}

func (m *S2CCollectPassDungeonPrizeProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDungeon(uint64(m.Id))
	}
	return n
}

func (m *C2SAutoChallengeProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDungeon(uint64(m.Id))
	}
	if m.Times != 0 {
		n += 1 + sovDungeon(uint64(m.Times))
	}
	return n
}

func (m *S2CAutoChallengeProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDungeon(uint64(m.Id))
	}
	if len(m.Prizes) > 0 {
		for _, b := range m.Prizes {
			l = len(b)
			n += 1 + l + sovDungeon(uint64(l))
		}
	}
	if m.PassTimes != 0 {
		n += 1 + sovDungeon(uint64(m.PassTimes))
	}
	return n
}

func (m *C2SCollectChapterStarPrizeProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDungeon(uint64(m.Id))
	}
	if m.CollectN != 0 {
		n += 1 + sovDungeon(uint64(m.CollectN))
	}
	return n
}

func (m *S2CCollectChapterStarPrizeProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDungeon(uint64(m.Id))
	}
	if m.CollectN != 0 {
		n += 1 + sovDungeon(uint64(m.CollectN))
	}
	l = len(m.Prize)
	if l > 0 {
		n += 1 + l + sovDungeon(uint64(l))
	}
	return n
}

func sovDungeon(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDungeon(x uint64) (n int) {
	return sovDungeon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *C2SChallengeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDungeon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SChallengeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SChallengeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDungeon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDungeon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDungeon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CChallengeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDungeon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CChallengeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CChallengeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDungeon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDungeon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDungeon
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prize", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDungeon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDungeon
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prize = append(m.Prize[:0], dAtA[iNdEx:postIndex]...)
			if m.Prize == nil {
				m.Prize = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pass", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDungeon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Pass = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Share", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDungeon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDungeon
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Share = append(m.Share[:0], dAtA[iNdEx:postIndex]...)
			if m.Share == nil {
				m.Share = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFirstPass", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDungeon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFirstPass = bool(v != 0)
		case 7:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDungeon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EnabledStar = append(m.EnabledStar, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDungeon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDungeon
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDungeon
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EnabledStar = append(m.EnabledStar, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EnabledStar", wireType)
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassSeconds", wireType)
			}
			m.PassSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDungeon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PassSeconds |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChapterStar", wireType)
			}
			m.ChapterStar = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDungeon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChapterStar |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassTimes", wireType)
			}
			m.PassTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDungeon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PassTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRefresh", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDungeon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRefresh = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDungeon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDungeon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateChallengeTimesProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDungeon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateChallengeTimesProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateChallengeTimesProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDungeon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDungeon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDungeon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SCollectChapterPrizeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDungeon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCollectChapterPrizeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCollectChapterPrizeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDungeon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDungeon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDungeon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCollectChapterPrizeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDungeon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCollectChapterPrizeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCollectChapterPrizeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDungeon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDungeon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDungeon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SCollectPassDungeonPrizeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDungeon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCollectPassDungeonPrizeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCollectPassDungeonPrizeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDungeon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDungeon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDungeon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCollectPassDungeonPrizeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDungeon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCollectPassDungeonPrizeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCollectPassDungeonPrizeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDungeon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDungeon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDungeon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SAutoChallengeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDungeon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SAutoChallengeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SAutoChallengeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDungeon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Times", wireType)
			}
			m.Times = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDungeon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Times |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDungeon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDungeon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CAutoChallengeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDungeon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CAutoChallengeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CAutoChallengeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDungeon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prizes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDungeon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDungeon
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prizes = append(m.Prizes, make([]byte, postIndex-iNdEx))
			copy(m.Prizes[len(m.Prizes)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassTimes", wireType)
			}
			m.PassTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDungeon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PassTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDungeon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDungeon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SCollectChapterStarPrizeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDungeon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCollectChapterStarPrizeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCollectChapterStarPrizeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDungeon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectN", wireType)
			}
			m.CollectN = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDungeon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollectN |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDungeon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDungeon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCollectChapterStarPrizeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDungeon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCollectChapterStarPrizeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCollectChapterStarPrizeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDungeon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectN", wireType)
			}
			m.CollectN = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDungeon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollectN |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prize", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDungeon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDungeon
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prize = append(m.Prize[:0], dAtA[iNdEx:postIndex]...)
			if m.Prize == nil {
				m.Prize = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDungeon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDungeon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDungeon(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDungeon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDungeon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDungeon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDungeon
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDungeon
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDungeon(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDungeon = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDungeon   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/gen/pb/dungeon/dungeon.proto", fileDescriptorDungeon)
}

var fileDescriptorDungeon = []byte{
	// 496 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0xd1, 0x6a, 0xd4, 0x40,
	0x14, 0x6d, 0xb2, 0x9b, 0xed, 0xe6, 0xee, 0x2a, 0x36, 0xb4, 0x12, 0x58, 0xbb, 0xc6, 0x88, 0x90,
	0x97, 0x36, 0x18, 0x41, 0x9f, 0xfa, 0x60, 0x23, 0xe2, 0x53, 0x59, 0x12, 0x7d, 0xf1, 0xc1, 0x30,
	0x9b, 0x4c, 0x93, 0xc1, 0x6c, 0x12, 0x66, 0x66, 0x11, 0xfc, 0x12, 0xbf, 0x48, 0x7c, 0xf4, 0x13,
	0x64, 0xfd, 0x11, 0x99, 0x3b, 0xd1, 0x2d, 0xa5, 0xd6, 0x05, 0x9f, 0x32, 0xf7, 0xcc, 0x39, 0x67,
	0x6e, 0xce, 0x9d, 0x81, 0xe7, 0x25, 0x93, 0xd5, 0x7a, 0x79, 0x9a, 0xb7, 0xab, 0xb0, 0x66, 0x65,
	0x25, 0x3b, 0xf2, 0x29, 0x5c, 0x91, 0x9a, 0xbe, 0x08, 0x4b, 0xda, 0x84, 0xdd, 0x32, 0x2c, 0xd6,
	0x4d, 0x49, 0xdb, 0xe6, 0xf7, 0xf7, 0xb4, 0xe3, 0xad, 0x6c, 0x1d, 0x0b, 0x3f, 0xfe, 0x63, 0x38,
	0x88, 0xa3, 0x34, 0xae, 0x48, 0x5d, 0xd3, 0xa6, 0xa4, 0x0b, 0xdc, 0xbb, 0x0b, 0x26, 0x2b, 0x5c,
	0xc3, 0x33, 0x02, 0x2b, 0x31, 0x59, 0xe1, 0x7f, 0x35, 0xe1, 0x20, 0x8d, 0xe2, 0xdb, 0x59, 0x8e,
	0x03, 0xc3, 0x9a, 0x35, 0x1f, 0x5d, 0xd3, 0x33, 0x02, 0x3b, 0xc1, 0xb5, 0x73, 0x08, 0x56, 0xc7,
	0xd9, 0x67, 0xea, 0x0e, 0x3c, 0x23, 0x98, 0x26, 0xba, 0x50, 0xcc, 0x8e, 0x08, 0xe1, 0x0e, 0x3d,
	0x23, 0x18, 0x27, 0xb8, 0x56, 0x4c, 0x51, 0x11, 0x4e, 0x5d, 0x4b, 0x33, 0xb1, 0x70, 0x7c, 0xb8,
	0xc3, 0x44, 0x76, 0xc9, 0xb8, 0x90, 0x19, 0x4a, 0x46, 0x28, 0x99, 0x30, 0xf1, 0x5a, 0x61, 0x0b,
	0xa5, 0x7c, 0x02, 0x53, 0xda, 0x90, 0x65, 0x4d, 0x8b, 0x4c, 0x48, 0xc2, 0xdd, 0x7d, 0x6f, 0x10,
	0x8c, 0xcf, 0xcd, 0x7b, 0x7b, 0xc9, 0xa4, 0xc7, 0x53, 0x49, 0xb8, 0xf3, 0x08, 0xa6, 0xca, 0x21,
	0x13, 0x34, 0x6f, 0x9b, 0x42, 0xb8, 0x63, 0x6c, 0x7c, 0xa2, 0xb0, 0x54, 0x43, 0x8a, 0x92, 0x57,
	0xa4, 0x93, 0x94, 0x6b, 0x27, 0x5b, 0x53, 0x7a, 0x0c, 0x5d, 0x8e, 0x01, 0xd0, 0x45, 0xb2, 0x15,
	0x15, 0x2e, 0x20, 0xc1, 0x56, 0xc8, 0x5b, 0x05, 0xa8, 0x6d, 0x26, 0x32, 0x4e, 0x2f, 0x39, 0x15,
	0x95, 0x3b, 0xc1, 0x66, 0x6d, 0x26, 0x12, 0x0d, 0xf8, 0x67, 0xf0, 0x20, 0x8d, 0xe2, 0x77, 0x5d,
	0x41, 0x24, 0xfd, 0x93, 0x26, 0x2a, 0x75, 0xa4, 0xc7, 0x00, 0xea, 0x60, 0x89, 0xf6, 0x7d, 0xb4,
	0x36, 0x22, 0x8a, 0xe4, 0x9f, 0xc0, 0x4c, 0x0d, 0xab, 0xad, 0x6b, 0x9a, 0xcb, 0x58, 0x77, 0xb5,
	0x50, 0x89, 0xde, 0x3c, 0xb6, 0x13, 0x98, 0xa9, 0xa9, 0xed, 0x4a, 0x7f, 0x0a, 0x0f, 0xb7, 0xee,
	0x2a, 0xd9, 0x57, 0xfa, 0xc2, 0xdc, 0x2e, 0xd9, 0x9e, 0xb0, 0x9b, 0xe4, 0x0c, 0x8e, 0xe2, 0x28,
	0x7d, 0xb9, 0x96, 0xed, 0x3f, 0xae, 0xd3, 0x21, 0x58, 0x3a, 0x64, 0x13, 0x21, 0x5d, 0xf8, 0x1f,
	0xe0, 0x28, 0x8d, 0xe2, 0x1d, 0xe4, 0xf7, 0x61, 0x84, 0x97, 0x4d, 0xe9, 0x07, 0xc1, 0x34, 0xe9,
	0xab, 0x6b, 0x03, 0x1c, 0x5e, 0x1b, 0xa0, 0x7f, 0x71, 0x35, 0x84, 0x78, 0x3b, 0xf8, 0xbf, 0xff,
	0x91, 0x33, 0x03, 0x3b, 0xd7, 0xfc, 0xac, 0xe9, 0x9b, 0x1d, 0xf7, 0xc0, 0x85, 0x5f, 0x5c, 0x4d,
	0xe8, 0xff, 0xfd, 0x6e, 0x7e, 0x50, 0xe7, 0xb3, 0x6f, 0x9b, 0xb9, 0xf1, 0x7d, 0x33, 0x37, 0x7e,
	0x6c, 0xe6, 0xc6, 0x97, 0x9f, 0xf3, 0xbd, 0x37, 0xc6, 0xfb, 0xfd, 0xfe, 0xbd, 0x2f, 0x47, 0xf8,
	0xd2, 0x9f, 0xfd, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x66, 0x7a, 0x4c, 0x2a, 0x2a, 0x04, 0x00, 0x00,
}
