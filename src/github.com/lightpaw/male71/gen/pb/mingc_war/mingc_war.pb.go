// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/gen/pb/mingc_war/mingc_war.proto
// DO NOT EDIT!

/*
	Package mingc_war is a generated protocol buffer package.

	It is generated from these files:
		github.com/lightpaw/male7/gen/pb/mingc_war/mingc_war.proto

	It has these top-level messages:
		S2CViewMcWarSelfGuildProto
		C2SViewMcWarProto
		S2CViewMcWarProto
		C2SApplyAtkProto
		S2CApplyAtkProto
		S2CApplyAtkSuccProto
		S2CApplyAtkFailProto
		C2SApplyAstProto
		S2CApplyAstProto
		S2CReceiveApplyAstProto
		C2SCancelApplyAstProto
		S2CCancelApplyAstProto
		S2CReceiveCancelApplyAstProto
		C2SReplyApplyAstProto
		S2CReplyApplyAstProto
		S2CApplyAstPassProto
		S2CMingcWarFightPrepareStartProto
		S2CMingcWarFightStartProto
		S2CIsJoiningFightOnLoginProto
		C2SViewMingcWarMcProto
		S2CViewMingcWarMcProto
		C2SJoinFightProto
		S2CJoinFightProto
		S2COtherJoinFightProto
		S2CQuitFightProto
		S2COtherQuitFightProto
		S2CSceneBuildingDestroyProsperityProto
		S2CSceneFightPrepareEndProto
		S2CSceneWarEndProto
		C2SSceneMoveProto
		S2CSceneMoveProto
		S2CSceneBackProto
		C2SSceneSpeedUpProto
		S2CSceneSpeedUpProto
		S2CSceneOtherMoveProto
		S2CSceneMoveStationProto
		S2CSceneBuildingFightProto
		S2CSceneTroopReliveProto
		S2CSceneOtherTroopReliveProto
		S2CSceneTroopUpdateProto
		C2SViewMcWarSceneProto
		S2CViewMcWarSceneProto
		C2SWatchProto
		C2SQuitWatchProto
		S2CMcWarEndRecordProto
		C2SViewMcWarRecordProto
		S2CViewMcWarRecordProto
		C2SViewMcWarTroopRecordProto
		S2CViewMcWarTroopRecordProto
		S2CViewSceneTroopRecordProto
		S2CMyRankProto
		C2SApplyRefreshRankProto
		S2CApplyRefreshRankProto
		C2SViewMyGuildMemberRankProto
		S2CViewMyGuildMemberRankProto
		S2CCurMultiKillProto
		S2CSpecialMultiKillProto
		C2SSceneChangeModeProto
		S2CSceneChangeModeProto
		S2CSceneChangeModeNoticeProto
		C2SSceneTouShiBuildingTurnToProto
		S2CSceneTouShiBuildingTurnToProto
		S2CSceneTouShiBuildingTurnToNoticeProto
		C2SSceneTouShiBuildingFireProto
		S2CSceneTouShiBuildingFireProto
		S2CSceneTouShiBuildingFireNoticeProto
		S2CSceneTouShiBombExplodeNoticeProto
		S2CSceneDrumProto
		S2CSceneDrumNoticeProto
		S2CSceneDrumAddStatNoticeProto
		S2CMingcHostUpdateNoticeProto
*/
package mingc_war

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import proto1 "github.com/lightpaw/male7/pb/shared_proto"
import proto8 "github.com/lightpaw/male7/pb/shared_proto"
import proto10 "github.com/lightpaw/male7/pb/shared_proto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type S2CViewMcWarSelfGuildProto struct {
	SelfGuild *proto10.McWarGuildProto `protobuf:"bytes,1,opt,name=self_guild,json=selfGuild" json:"self_guild,omitempty"`
}

func (m *S2CViewMcWarSelfGuildProto) Reset()         { *m = S2CViewMcWarSelfGuildProto{} }
func (m *S2CViewMcWarSelfGuildProto) String() string { return proto.CompactTextString(m) }
func (*S2CViewMcWarSelfGuildProto) ProtoMessage()    {}
func (*S2CViewMcWarSelfGuildProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMingcWar, []int{0}
}

func (m *S2CViewMcWarSelfGuildProto) GetSelfGuild() *proto10.McWarGuildProto {
	if m != nil {
		return m.SelfGuild
	}
	return nil
}

type C2SViewMcWarProto struct {
	Ver int32 `protobuf:"varint,1,opt,name=ver,proto3" json:"ver,omitempty"`
}

func (m *C2SViewMcWarProto) Reset()                    { *m = C2SViewMcWarProto{} }
func (m *C2SViewMcWarProto) String() string            { return proto.CompactTextString(m) }
func (*C2SViewMcWarProto) ProtoMessage()               {}
func (*C2SViewMcWarProto) Descriptor() ([]byte, []int) { return fileDescriptorMingcWar, []int{1} }

func (m *C2SViewMcWarProto) GetVer() int32 {
	if m != nil {
		return m.Ver
	}
	return 0
}

type S2CViewMcWarProto struct {
	Ver int32               `protobuf:"varint,3,opt,name=ver,proto3" json:"ver,omitempty"`
	War *proto10.McWarProto `protobuf:"bytes,2,opt,name=war" json:"war,omitempty"`
}

func (m *S2CViewMcWarProto) Reset()                    { *m = S2CViewMcWarProto{} }
func (m *S2CViewMcWarProto) String() string            { return proto.CompactTextString(m) }
func (*S2CViewMcWarProto) ProtoMessage()               {}
func (*S2CViewMcWarProto) Descriptor() ([]byte, []int) { return fileDescriptorMingcWar, []int{2} }

func (m *S2CViewMcWarProto) GetVer() int32 {
	if m != nil {
		return m.Ver
	}
	return 0
}

func (m *S2CViewMcWarProto) GetWar() *proto10.McWarProto {
	if m != nil {
		return m.War
	}
	return nil
}

type C2SApplyAtkProto struct {
	Mcid int32 `protobuf:"varint,1,opt,name=mcid,proto3" json:"mcid,omitempty"`
	Cost int32 `protobuf:"varint,2,opt,name=cost,proto3" json:"cost,omitempty"`
}

func (m *C2SApplyAtkProto) Reset()                    { *m = C2SApplyAtkProto{} }
func (m *C2SApplyAtkProto) String() string            { return proto.CompactTextString(m) }
func (*C2SApplyAtkProto) ProtoMessage()               {}
func (*C2SApplyAtkProto) Descriptor() ([]byte, []int) { return fileDescriptorMingcWar, []int{3} }

func (m *C2SApplyAtkProto) GetMcid() int32 {
	if m != nil {
		return m.Mcid
	}
	return 0
}

func (m *C2SApplyAtkProto) GetCost() int32 {
	if m != nil {
		return m.Cost
	}
	return 0
}

type S2CApplyAtkProto struct {
	Mcid int32 `protobuf:"varint,1,opt,name=mcid,proto3" json:"mcid,omitempty"`
	Cost int32 `protobuf:"varint,2,opt,name=cost,proto3" json:"cost,omitempty"`
}

func (m *S2CApplyAtkProto) Reset()                    { *m = S2CApplyAtkProto{} }
func (m *S2CApplyAtkProto) String() string            { return proto.CompactTextString(m) }
func (*S2CApplyAtkProto) ProtoMessage()               {}
func (*S2CApplyAtkProto) Descriptor() ([]byte, []int) { return fileDescriptorMingcWar, []int{4} }

func (m *S2CApplyAtkProto) GetMcid() int32 {
	if m != nil {
		return m.Mcid
	}
	return 0
}

func (m *S2CApplyAtkProto) GetCost() int32 {
	if m != nil {
		return m.Cost
	}
	return 0
}

type S2CApplyAtkSuccProto struct {
	Mcid int32 `protobuf:"varint,1,opt,name=mcid,proto3" json:"mcid,omitempty"`
}

func (m *S2CApplyAtkSuccProto) Reset()                    { *m = S2CApplyAtkSuccProto{} }
func (m *S2CApplyAtkSuccProto) String() string            { return proto.CompactTextString(m) }
func (*S2CApplyAtkSuccProto) ProtoMessage()               {}
func (*S2CApplyAtkSuccProto) Descriptor() ([]byte, []int) { return fileDescriptorMingcWar, []int{5} }

func (m *S2CApplyAtkSuccProto) GetMcid() int32 {
	if m != nil {
		return m.Mcid
	}
	return 0
}

type S2CApplyAtkFailProto struct {
	Mcid int32 `protobuf:"varint,1,opt,name=mcid,proto3" json:"mcid,omitempty"`
	Cost int32 `protobuf:"varint,2,opt,name=cost,proto3" json:"cost,omitempty"`
}

func (m *S2CApplyAtkFailProto) Reset()                    { *m = S2CApplyAtkFailProto{} }
func (m *S2CApplyAtkFailProto) String() string            { return proto.CompactTextString(m) }
func (*S2CApplyAtkFailProto) ProtoMessage()               {}
func (*S2CApplyAtkFailProto) Descriptor() ([]byte, []int) { return fileDescriptorMingcWar, []int{6} }

func (m *S2CApplyAtkFailProto) GetMcid() int32 {
	if m != nil {
		return m.Mcid
	}
	return 0
}

func (m *S2CApplyAtkFailProto) GetCost() int32 {
	if m != nil {
		return m.Cost
	}
	return 0
}

type C2SApplyAstProto struct {
	Mcid int32 `protobuf:"varint,1,opt,name=mcid,proto3" json:"mcid,omitempty"`
	Atk  bool  `protobuf:"varint,2,opt,name=atk,proto3" json:"atk,omitempty"`
}

func (m *C2SApplyAstProto) Reset()                    { *m = C2SApplyAstProto{} }
func (m *C2SApplyAstProto) String() string            { return proto.CompactTextString(m) }
func (*C2SApplyAstProto) ProtoMessage()               {}
func (*C2SApplyAstProto) Descriptor() ([]byte, []int) { return fileDescriptorMingcWar, []int{7} }

func (m *C2SApplyAstProto) GetMcid() int32 {
	if m != nil {
		return m.Mcid
	}
	return 0
}

func (m *C2SApplyAstProto) GetAtk() bool {
	if m != nil {
		return m.Atk
	}
	return false
}

type S2CApplyAstProto struct {
	Mcid int32 `protobuf:"varint,1,opt,name=mcid,proto3" json:"mcid,omitempty"`
	Atk  bool  `protobuf:"varint,2,opt,name=atk,proto3" json:"atk,omitempty"`
}

func (m *S2CApplyAstProto) Reset()                    { *m = S2CApplyAstProto{} }
func (m *S2CApplyAstProto) String() string            { return proto.CompactTextString(m) }
func (*S2CApplyAstProto) ProtoMessage()               {}
func (*S2CApplyAstProto) Descriptor() ([]byte, []int) { return fileDescriptorMingcWar, []int{8} }

func (m *S2CApplyAstProto) GetMcid() int32 {
	if m != nil {
		return m.Mcid
	}
	return 0
}

func (m *S2CApplyAstProto) GetAtk() bool {
	if m != nil {
		return m.Atk
	}
	return false
}

type S2CReceiveApplyAstProto struct {
	Mcid int32 `protobuf:"varint,1,opt,name=mcid,proto3" json:"mcid,omitempty"`
}

func (m *S2CReceiveApplyAstProto) Reset()                    { *m = S2CReceiveApplyAstProto{} }
func (m *S2CReceiveApplyAstProto) String() string            { return proto.CompactTextString(m) }
func (*S2CReceiveApplyAstProto) ProtoMessage()               {}
func (*S2CReceiveApplyAstProto) Descriptor() ([]byte, []int) { return fileDescriptorMingcWar, []int{9} }

func (m *S2CReceiveApplyAstProto) GetMcid() int32 {
	if m != nil {
		return m.Mcid
	}
	return 0
}

type C2SCancelApplyAstProto struct {
	Mcid int32 `protobuf:"varint,1,opt,name=mcid,proto3" json:"mcid,omitempty"`
}

func (m *C2SCancelApplyAstProto) Reset()                    { *m = C2SCancelApplyAstProto{} }
func (m *C2SCancelApplyAstProto) String() string            { return proto.CompactTextString(m) }
func (*C2SCancelApplyAstProto) ProtoMessage()               {}
func (*C2SCancelApplyAstProto) Descriptor() ([]byte, []int) { return fileDescriptorMingcWar, []int{10} }

func (m *C2SCancelApplyAstProto) GetMcid() int32 {
	if m != nil {
		return m.Mcid
	}
	return 0
}

type S2CCancelApplyAstProto struct {
	Mcid int32 `protobuf:"varint,1,opt,name=mcid,proto3" json:"mcid,omitempty"`
}

func (m *S2CCancelApplyAstProto) Reset()                    { *m = S2CCancelApplyAstProto{} }
func (m *S2CCancelApplyAstProto) String() string            { return proto.CompactTextString(m) }
func (*S2CCancelApplyAstProto) ProtoMessage()               {}
func (*S2CCancelApplyAstProto) Descriptor() ([]byte, []int) { return fileDescriptorMingcWar, []int{11} }

func (m *S2CCancelApplyAstProto) GetMcid() int32 {
	if m != nil {
		return m.Mcid
	}
	return 0
}

type S2CReceiveCancelApplyAstProto struct {
	Mcid int32 `protobuf:"varint,1,opt,name=mcid,proto3" json:"mcid,omitempty"`
}

func (m *S2CReceiveCancelApplyAstProto) Reset()         { *m = S2CReceiveCancelApplyAstProto{} }
func (m *S2CReceiveCancelApplyAstProto) String() string { return proto.CompactTextString(m) }
func (*S2CReceiveCancelApplyAstProto) ProtoMessage()    {}
func (*S2CReceiveCancelApplyAstProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMingcWar, []int{12}
}

func (m *S2CReceiveCancelApplyAstProto) GetMcid() int32 {
	if m != nil {
		return m.Mcid
	}
	return 0
}

type C2SReplyApplyAstProto struct {
	Mcid  int32 `protobuf:"varint,1,opt,name=mcid,proto3" json:"mcid,omitempty"`
	Gid   int32 `protobuf:"varint,2,opt,name=gid,proto3" json:"gid,omitempty"`
	Agree bool  `protobuf:"varint,3,opt,name=agree,proto3" json:"agree,omitempty"`
}

func (m *C2SReplyApplyAstProto) Reset()                    { *m = C2SReplyApplyAstProto{} }
func (m *C2SReplyApplyAstProto) String() string            { return proto.CompactTextString(m) }
func (*C2SReplyApplyAstProto) ProtoMessage()               {}
func (*C2SReplyApplyAstProto) Descriptor() ([]byte, []int) { return fileDescriptorMingcWar, []int{13} }

func (m *C2SReplyApplyAstProto) GetMcid() int32 {
	if m != nil {
		return m.Mcid
	}
	return 0
}

func (m *C2SReplyApplyAstProto) GetGid() int32 {
	if m != nil {
		return m.Gid
	}
	return 0
}

func (m *C2SReplyApplyAstProto) GetAgree() bool {
	if m != nil {
		return m.Agree
	}
	return false
}

type S2CReplyApplyAstProto struct {
	Mcid  int32 `protobuf:"varint,1,opt,name=mcid,proto3" json:"mcid,omitempty"`
	Gid   int32 `protobuf:"varint,2,opt,name=gid,proto3" json:"gid,omitempty"`
	Agree bool  `protobuf:"varint,3,opt,name=agree,proto3" json:"agree,omitempty"`
}

func (m *S2CReplyApplyAstProto) Reset()                    { *m = S2CReplyApplyAstProto{} }
func (m *S2CReplyApplyAstProto) String() string            { return proto.CompactTextString(m) }
func (*S2CReplyApplyAstProto) ProtoMessage()               {}
func (*S2CReplyApplyAstProto) Descriptor() ([]byte, []int) { return fileDescriptorMingcWar, []int{14} }

func (m *S2CReplyApplyAstProto) GetMcid() int32 {
	if m != nil {
		return m.Mcid
	}
	return 0
}

func (m *S2CReplyApplyAstProto) GetGid() int32 {
	if m != nil {
		return m.Gid
	}
	return 0
}

func (m *S2CReplyApplyAstProto) GetAgree() bool {
	if m != nil {
		return m.Agree
	}
	return false
}

type S2CApplyAstPassProto struct {
	Mcid  int32 `protobuf:"varint,1,opt,name=mcid,proto3" json:"mcid,omitempty"`
	Agree bool  `protobuf:"varint,3,opt,name=agree,proto3" json:"agree,omitempty"`
}

func (m *S2CApplyAstPassProto) Reset()                    { *m = S2CApplyAstPassProto{} }
func (m *S2CApplyAstPassProto) String() string            { return proto.CompactTextString(m) }
func (*S2CApplyAstPassProto) ProtoMessage()               {}
func (*S2CApplyAstPassProto) Descriptor() ([]byte, []int) { return fileDescriptorMingcWar, []int{15} }

func (m *S2CApplyAstPassProto) GetMcid() int32 {
	if m != nil {
		return m.Mcid
	}
	return 0
}

func (m *S2CApplyAstPassProto) GetAgree() bool {
	if m != nil {
		return m.Agree
	}
	return false
}

type S2CMingcWarFightPrepareStartProto struct {
	StartTime int32 `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   int32 `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (m *S2CMingcWarFightPrepareStartProto) Reset()         { *m = S2CMingcWarFightPrepareStartProto{} }
func (m *S2CMingcWarFightPrepareStartProto) String() string { return proto.CompactTextString(m) }
func (*S2CMingcWarFightPrepareStartProto) ProtoMessage()    {}
func (*S2CMingcWarFightPrepareStartProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMingcWar, []int{16}
}

func (m *S2CMingcWarFightPrepareStartProto) GetStartTime() int32 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *S2CMingcWarFightPrepareStartProto) GetEndTime() int32 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

type S2CMingcWarFightStartProto struct {
	StartTime int32 `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   int32 `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (m *S2CMingcWarFightStartProto) Reset()         { *m = S2CMingcWarFightStartProto{} }
func (m *S2CMingcWarFightStartProto) String() string { return proto.CompactTextString(m) }
func (*S2CMingcWarFightStartProto) ProtoMessage()    {}
func (*S2CMingcWarFightStartProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMingcWar, []int{17}
}

func (m *S2CMingcWarFightStartProto) GetStartTime() int32 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *S2CMingcWarFightStartProto) GetEndTime() int32 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

type S2CIsJoiningFightOnLoginProto struct {
	Mcid int32 `protobuf:"varint,1,opt,name=mcid,proto3" json:"mcid,omitempty"`
}

func (m *S2CIsJoiningFightOnLoginProto) Reset()         { *m = S2CIsJoiningFightOnLoginProto{} }
func (m *S2CIsJoiningFightOnLoginProto) String() string { return proto.CompactTextString(m) }
func (*S2CIsJoiningFightOnLoginProto) ProtoMessage()    {}
func (*S2CIsJoiningFightOnLoginProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMingcWar, []int{18}
}

func (m *S2CIsJoiningFightOnLoginProto) GetMcid() int32 {
	if m != nil {
		return m.Mcid
	}
	return 0
}

type C2SViewMingcWarMcProto struct {
	Mcid int32 `protobuf:"varint,1,opt,name=mcid,proto3" json:"mcid,omitempty"`
}

func (m *C2SViewMingcWarMcProto) Reset()                    { *m = C2SViewMingcWarMcProto{} }
func (m *C2SViewMingcWarMcProto) String() string            { return proto.CompactTextString(m) }
func (*C2SViewMingcWarMcProto) ProtoMessage()               {}
func (*C2SViewMingcWarMcProto) Descriptor() ([]byte, []int) { return fileDescriptorMingcWar, []int{19} }

func (m *C2SViewMingcWarMcProto) GetMcid() int32 {
	if m != nil {
		return m.Mcid
	}
	return 0
}

type S2CViewMingcWarMcProto struct {
	Mc *proto10.McWarMcProto `protobuf:"bytes,1,opt,name=mc" json:"mc,omitempty"`
}

func (m *S2CViewMingcWarMcProto) Reset()                    { *m = S2CViewMingcWarMcProto{} }
func (m *S2CViewMingcWarMcProto) String() string            { return proto.CompactTextString(m) }
func (*S2CViewMingcWarMcProto) ProtoMessage()               {}
func (*S2CViewMingcWarMcProto) Descriptor() ([]byte, []int) { return fileDescriptorMingcWar, []int{20} }

func (m *S2CViewMingcWarMcProto) GetMc() *proto10.McWarMcProto {
	if m != nil {
		return m.Mc
	}
	return nil
}

type C2SJoinFightProto struct {
	Mcid      int32   `protobuf:"varint,1,opt,name=mcid,proto3" json:"mcid,omitempty"`
	CaptainId []int32 `protobuf:"varint,3,rep,name=captain_id,json=captainId" json:"captain_id,omitempty"`
	XIndex    []int32 `protobuf:"varint,4,rep,name=x_index,json=xIndex" json:"x_index,omitempty"`
}

func (m *C2SJoinFightProto) Reset()                    { *m = C2SJoinFightProto{} }
func (m *C2SJoinFightProto) String() string            { return proto.CompactTextString(m) }
func (*C2SJoinFightProto) ProtoMessage()               {}
func (*C2SJoinFightProto) Descriptor() ([]byte, []int) { return fileDescriptorMingcWar, []int{21} }

func (m *C2SJoinFightProto) GetMcid() int32 {
	if m != nil {
		return m.Mcid
	}
	return 0
}

func (m *C2SJoinFightProto) GetCaptainId() []int32 {
	if m != nil {
		return m.CaptainId
	}
	return nil
}

func (m *C2SJoinFightProto) GetXIndex() []int32 {
	if m != nil {
		return m.XIndex
	}
	return nil
}

type S2CJoinFightProto struct {
	Mcid int32 `protobuf:"varint,1,opt,name=mcid,proto3" json:"mcid,omitempty"`
	Atk  bool  `protobuf:"varint,2,opt,name=atk,proto3" json:"atk,omitempty"`
}

func (m *S2CJoinFightProto) Reset()                    { *m = S2CJoinFightProto{} }
func (m *S2CJoinFightProto) String() string            { return proto.CompactTextString(m) }
func (*S2CJoinFightProto) ProtoMessage()               {}
func (*S2CJoinFightProto) Descriptor() ([]byte, []int) { return fileDescriptorMingcWar, []int{22} }

func (m *S2CJoinFightProto) GetMcid() int32 {
	if m != nil {
		return m.Mcid
	}
	return 0
}

func (m *S2CJoinFightProto) GetAtk() bool {
	if m != nil {
		return m.Atk
	}
	return false
}

type S2COtherJoinFightProto struct {
	Mcid   int32                    `protobuf:"varint,1,opt,name=mcid,proto3" json:"mcid,omitempty"`
	HeroId []byte                   `protobuf:"bytes,2,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
	Data   *proto10.McWarTroopProto `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

func (m *S2COtherJoinFightProto) Reset()                    { *m = S2COtherJoinFightProto{} }
func (m *S2COtherJoinFightProto) String() string            { return proto.CompactTextString(m) }
func (*S2COtherJoinFightProto) ProtoMessage()               {}
func (*S2COtherJoinFightProto) Descriptor() ([]byte, []int) { return fileDescriptorMingcWar, []int{23} }

func (m *S2COtherJoinFightProto) GetMcid() int32 {
	if m != nil {
		return m.Mcid
	}
	return 0
}

func (m *S2COtherJoinFightProto) GetHeroId() []byte {
	if m != nil {
		return m.HeroId
	}
	return nil
}

func (m *S2COtherJoinFightProto) GetData() *proto10.McWarTroopProto {
	if m != nil {
		return m.Data
	}
	return nil
}

type S2CQuitFightProto struct {
	Mcid int32 `protobuf:"varint,1,opt,name=mcid,proto3" json:"mcid,omitempty"`
}

func (m *S2CQuitFightProto) Reset()                    { *m = S2CQuitFightProto{} }
func (m *S2CQuitFightProto) String() string            { return proto.CompactTextString(m) }
func (*S2CQuitFightProto) ProtoMessage()               {}
func (*S2CQuitFightProto) Descriptor() ([]byte, []int) { return fileDescriptorMingcWar, []int{24} }

func (m *S2CQuitFightProto) GetMcid() int32 {
	if m != nil {
		return m.Mcid
	}
	return 0
}

type S2COtherQuitFightProto struct {
	Mcid   int32  `protobuf:"varint,1,opt,name=mcid,proto3" json:"mcid,omitempty"`
	HeroId []byte `protobuf:"bytes,2,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
}

func (m *S2COtherQuitFightProto) Reset()                    { *m = S2COtherQuitFightProto{} }
func (m *S2COtherQuitFightProto) String() string            { return proto.CompactTextString(m) }
func (*S2COtherQuitFightProto) ProtoMessage()               {}
func (*S2COtherQuitFightProto) Descriptor() ([]byte, []int) { return fileDescriptorMingcWar, []int{25} }

func (m *S2COtherQuitFightProto) GetMcid() int32 {
	if m != nil {
		return m.Mcid
	}
	return 0
}

func (m *S2COtherQuitFightProto) GetHeroId() []byte {
	if m != nil {
		return m.HeroId
	}
	return nil
}

type S2CSceneBuildingDestroyProsperityProto struct {
	PosX          int32 `protobuf:"varint,4,opt,name=pos_x,json=posX,proto3" json:"pos_x,omitempty"`
	PosY          int32 `protobuf:"varint,5,opt,name=pos_y,json=posY,proto3" json:"pos_y,omitempty"`
	NewProsperity int32 `protobuf:"varint,3,opt,name=new_prosperity,json=newProsperity,proto3" json:"new_prosperity,omitempty"`
}

func (m *S2CSceneBuildingDestroyProsperityProto) Reset() {
	*m = S2CSceneBuildingDestroyProsperityProto{}
}
func (m *S2CSceneBuildingDestroyProsperityProto) String() string { return proto.CompactTextString(m) }
func (*S2CSceneBuildingDestroyProsperityProto) ProtoMessage()    {}
func (*S2CSceneBuildingDestroyProsperityProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMingcWar, []int{26}
}

func (m *S2CSceneBuildingDestroyProsperityProto) GetPosX() int32 {
	if m != nil {
		return m.PosX
	}
	return 0
}

func (m *S2CSceneBuildingDestroyProsperityProto) GetPosY() int32 {
	if m != nil {
		return m.PosY
	}
	return 0
}

func (m *S2CSceneBuildingDestroyProsperityProto) GetNewProsperity() int32 {
	if m != nil {
		return m.NewProsperity
	}
	return 0
}

type S2CSceneFightPrepareEndProto struct {
	StartTime int32 `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
}

func (m *S2CSceneFightPrepareEndProto) Reset()         { *m = S2CSceneFightPrepareEndProto{} }
func (m *S2CSceneFightPrepareEndProto) String() string { return proto.CompactTextString(m) }
func (*S2CSceneFightPrepareEndProto) ProtoMessage()    {}
func (*S2CSceneFightPrepareEndProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMingcWar, []int{27}
}

func (m *S2CSceneFightPrepareEndProto) GetStartTime() int32 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

type S2CSceneWarEndProto struct {
	McId int32 `protobuf:"varint,1,opt,name=mc_id,json=mcId,proto3" json:"mc_id,omitempty"`
}

func (m *S2CSceneWarEndProto) Reset()                    { *m = S2CSceneWarEndProto{} }
func (m *S2CSceneWarEndProto) String() string            { return proto.CompactTextString(m) }
func (*S2CSceneWarEndProto) ProtoMessage()               {}
func (*S2CSceneWarEndProto) Descriptor() ([]byte, []int) { return fileDescriptorMingcWar, []int{28} }

func (m *S2CSceneWarEndProto) GetMcId() int32 {
	if m != nil {
		return m.McId
	}
	return 0
}

type C2SSceneMoveProto struct {
	DestPosX int32 `protobuf:"varint,4,opt,name=dest_pos_x,json=destPosX,proto3" json:"dest_pos_x,omitempty"`
	DestPosY int32 `protobuf:"varint,5,opt,name=dest_pos_y,json=destPosY,proto3" json:"dest_pos_y,omitempty"`
}

func (m *C2SSceneMoveProto) Reset()                    { *m = C2SSceneMoveProto{} }
func (m *C2SSceneMoveProto) String() string            { return proto.CompactTextString(m) }
func (*C2SSceneMoveProto) ProtoMessage()               {}
func (*C2SSceneMoveProto) Descriptor() ([]byte, []int) { return fileDescriptorMingcWar, []int{29} }

func (m *C2SSceneMoveProto) GetDestPosX() int32 {
	if m != nil {
		return m.DestPosX
	}
	return 0
}

func (m *C2SSceneMoveProto) GetDestPosY() int32 {
	if m != nil {
		return m.DestPosY
	}
	return 0
}

type S2CSceneMoveProto struct {
	DestPosX int32 `protobuf:"varint,3,opt,name=dest_pos_x,json=destPosX,proto3" json:"dest_pos_x,omitempty"`
	DestPosY int32 `protobuf:"varint,4,opt,name=dest_pos_y,json=destPosY,proto3" json:"dest_pos_y,omitempty"`
	EndTime  int32 `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (m *S2CSceneMoveProto) Reset()                    { *m = S2CSceneMoveProto{} }
func (m *S2CSceneMoveProto) String() string            { return proto.CompactTextString(m) }
func (*S2CSceneMoveProto) ProtoMessage()               {}
func (*S2CSceneMoveProto) Descriptor() ([]byte, []int) { return fileDescriptorMingcWar, []int{30} }

func (m *S2CSceneMoveProto) GetDestPosX() int32 {
	if m != nil {
		return m.DestPosX
	}
	return 0
}

func (m *S2CSceneMoveProto) GetDestPosY() int32 {
	if m != nil {
		return m.DestPosY
	}
	return 0
}

func (m *S2CSceneMoveProto) GetEndTime() int32 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

type S2CSceneBackProto struct {
	DestPosX int32 `protobuf:"varint,1,opt,name=dest_pos_x,json=destPosX,proto3" json:"dest_pos_x,omitempty"`
	DestPosY int32 `protobuf:"varint,2,opt,name=dest_pos_y,json=destPosY,proto3" json:"dest_pos_y,omitempty"`
	EndTime  int32 `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (m *S2CSceneBackProto) Reset()                    { *m = S2CSceneBackProto{} }
func (m *S2CSceneBackProto) String() string            { return proto.CompactTextString(m) }
func (*S2CSceneBackProto) ProtoMessage()               {}
func (*S2CSceneBackProto) Descriptor() ([]byte, []int) { return fileDescriptorMingcWar, []int{31} }

func (m *S2CSceneBackProto) GetDestPosX() int32 {
	if m != nil {
		return m.DestPosX
	}
	return 0
}

func (m *S2CSceneBackProto) GetDestPosY() int32 {
	if m != nil {
		return m.DestPosY
	}
	return 0
}

func (m *S2CSceneBackProto) GetEndTime() int32 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

type C2SSceneSpeedUpProto struct {
	Id      []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	GoodsId int32  `protobuf:"varint,2,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`
	Money   bool   `protobuf:"varint,3,opt,name=money,proto3" json:"money,omitempty"`
}

func (m *C2SSceneSpeedUpProto) Reset()                    { *m = C2SSceneSpeedUpProto{} }
func (m *C2SSceneSpeedUpProto) String() string            { return proto.CompactTextString(m) }
func (*C2SSceneSpeedUpProto) ProtoMessage()               {}
func (*C2SSceneSpeedUpProto) Descriptor() ([]byte, []int) { return fileDescriptorMingcWar, []int{32} }

func (m *C2SSceneSpeedUpProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *C2SSceneSpeedUpProto) GetGoodsId() int32 {
	if m != nil {
		return m.GoodsId
	}
	return 0
}

func (m *C2SSceneSpeedUpProto) GetMoney() bool {
	if m != nil {
		return m.Money
	}
	return false
}

type S2CSceneSpeedUpProto struct {
	Id      []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	EndTime int32  `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (m *S2CSceneSpeedUpProto) Reset()                    { *m = S2CSceneSpeedUpProto{} }
func (m *S2CSceneSpeedUpProto) String() string            { return proto.CompactTextString(m) }
func (*S2CSceneSpeedUpProto) ProtoMessage()               {}
func (*S2CSceneSpeedUpProto) Descriptor() ([]byte, []int) { return fileDescriptorMingcWar, []int{33} }

func (m *S2CSceneSpeedUpProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *S2CSceneSpeedUpProto) GetEndTime() int32 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

type S2CSceneOtherMoveProto struct {
	HeroId    []byte `protobuf:"bytes,1,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
	StartPosX int32  `protobuf:"varint,2,opt,name=start_pos_x,json=startPosX,proto3" json:"start_pos_x,omitempty"`
	StartPosY int32  `protobuf:"varint,3,opt,name=start_pos_y,json=startPosY,proto3" json:"start_pos_y,omitempty"`
	DestPosX  int32  `protobuf:"varint,4,opt,name=dest_pos_x,json=destPosX,proto3" json:"dest_pos_x,omitempty"`
	DestPosY  int32  `protobuf:"varint,5,opt,name=dest_pos_y,json=destPosY,proto3" json:"dest_pos_y,omitempty"`
	EndTime   int32  `protobuf:"varint,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (m *S2CSceneOtherMoveProto) Reset()                    { *m = S2CSceneOtherMoveProto{} }
func (m *S2CSceneOtherMoveProto) String() string            { return proto.CompactTextString(m) }
func (*S2CSceneOtherMoveProto) ProtoMessage()               {}
func (*S2CSceneOtherMoveProto) Descriptor() ([]byte, []int) { return fileDescriptorMingcWar, []int{34} }

func (m *S2CSceneOtherMoveProto) GetHeroId() []byte {
	if m != nil {
		return m.HeroId
	}
	return nil
}

func (m *S2CSceneOtherMoveProto) GetStartPosX() int32 {
	if m != nil {
		return m.StartPosX
	}
	return 0
}

func (m *S2CSceneOtherMoveProto) GetStartPosY() int32 {
	if m != nil {
		return m.StartPosY
	}
	return 0
}

func (m *S2CSceneOtherMoveProto) GetDestPosX() int32 {
	if m != nil {
		return m.DestPosX
	}
	return 0
}

func (m *S2CSceneOtherMoveProto) GetDestPosY() int32 {
	if m != nil {
		return m.DestPosY
	}
	return 0
}

func (m *S2CSceneOtherMoveProto) GetEndTime() int32 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

type S2CSceneMoveStationProto struct {
	HeroId []byte `protobuf:"bytes,1,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
	PosX   int32  `protobuf:"varint,2,opt,name=pos_x,json=posX,proto3" json:"pos_x,omitempty"`
	PosY   int32  `protobuf:"varint,3,opt,name=pos_y,json=posY,proto3" json:"pos_y,omitempty"`
}

func (m *S2CSceneMoveStationProto) Reset()         { *m = S2CSceneMoveStationProto{} }
func (m *S2CSceneMoveStationProto) String() string { return proto.CompactTextString(m) }
func (*S2CSceneMoveStationProto) ProtoMessage()    {}
func (*S2CSceneMoveStationProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMingcWar, []int{35}
}

func (m *S2CSceneMoveStationProto) GetHeroId() []byte {
	if m != nil {
		return m.HeroId
	}
	return nil
}

func (m *S2CSceneMoveStationProto) GetPosX() int32 {
	if m != nil {
		return m.PosX
	}
	return 0
}

func (m *S2CSceneMoveStationProto) GetPosY() int32 {
	if m != nil {
		return m.PosY
	}
	return 0
}

type S2CSceneBuildingFightProto struct {
	HeroId []byte `protobuf:"bytes,1,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
	Gid    int32  `protobuf:"varint,2,opt,name=gid,proto3" json:"gid,omitempty"`
	Win    bool   `protobuf:"varint,3,opt,name=win,proto3" json:"win,omitempty"`
	PosX   int32  `protobuf:"varint,4,opt,name=pos_x,json=posX,proto3" json:"pos_x,omitempty"`
	PosY   int32  `protobuf:"varint,5,opt,name=pos_y,json=posY,proto3" json:"pos_y,omitempty"`
}

func (m *S2CSceneBuildingFightProto) Reset()         { *m = S2CSceneBuildingFightProto{} }
func (m *S2CSceneBuildingFightProto) String() string { return proto.CompactTextString(m) }
func (*S2CSceneBuildingFightProto) ProtoMessage()    {}
func (*S2CSceneBuildingFightProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMingcWar, []int{36}
}

func (m *S2CSceneBuildingFightProto) GetHeroId() []byte {
	if m != nil {
		return m.HeroId
	}
	return nil
}

func (m *S2CSceneBuildingFightProto) GetGid() int32 {
	if m != nil {
		return m.Gid
	}
	return 0
}

func (m *S2CSceneBuildingFightProto) GetWin() bool {
	if m != nil {
		return m.Win
	}
	return false
}

func (m *S2CSceneBuildingFightProto) GetPosX() int32 {
	if m != nil {
		return m.PosX
	}
	return 0
}

func (m *S2CSceneBuildingFightProto) GetPosY() int32 {
	if m != nil {
		return m.PosY
	}
	return 0
}

type S2CSceneTroopReliveProto struct {
	EndTime int32 `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (m *S2CSceneTroopReliveProto) Reset()         { *m = S2CSceneTroopReliveProto{} }
func (m *S2CSceneTroopReliveProto) String() string { return proto.CompactTextString(m) }
func (*S2CSceneTroopReliveProto) ProtoMessage()    {}
func (*S2CSceneTroopReliveProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMingcWar, []int{37}
}

func (m *S2CSceneTroopReliveProto) GetEndTime() int32 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

type S2CSceneOtherTroopReliveProto struct {
	HeroId  []byte `protobuf:"bytes,1,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
	EndTime int32  `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (m *S2CSceneOtherTroopReliveProto) Reset()         { *m = S2CSceneOtherTroopReliveProto{} }
func (m *S2CSceneOtherTroopReliveProto) String() string { return proto.CompactTextString(m) }
func (*S2CSceneOtherTroopReliveProto) ProtoMessage()    {}
func (*S2CSceneOtherTroopReliveProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMingcWar, []int{38}
}

func (m *S2CSceneOtherTroopReliveProto) GetHeroId() []byte {
	if m != nil {
		return m.HeroId
	}
	return nil
}

func (m *S2CSceneOtherTroopReliveProto) GetEndTime() int32 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

type S2CSceneTroopUpdateProto struct {
	HeroId []byte                   `protobuf:"bytes,1,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
	Data   *proto10.McWarTroopProto `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (m *S2CSceneTroopUpdateProto) Reset()         { *m = S2CSceneTroopUpdateProto{} }
func (m *S2CSceneTroopUpdateProto) String() string { return proto.CompactTextString(m) }
func (*S2CSceneTroopUpdateProto) ProtoMessage()    {}
func (*S2CSceneTroopUpdateProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMingcWar, []int{39}
}

func (m *S2CSceneTroopUpdateProto) GetHeroId() []byte {
	if m != nil {
		return m.HeroId
	}
	return nil
}

func (m *S2CSceneTroopUpdateProto) GetData() *proto10.McWarTroopProto {
	if m != nil {
		return m.Data
	}
	return nil
}

type C2SViewMcWarSceneProto struct {
	McId int32 `protobuf:"varint,1,opt,name=mc_id,json=mcId,proto3" json:"mc_id,omitempty"`
}

func (m *C2SViewMcWarSceneProto) Reset()                    { *m = C2SViewMcWarSceneProto{} }
func (m *C2SViewMcWarSceneProto) String() string            { return proto.CompactTextString(m) }
func (*C2SViewMcWarSceneProto) ProtoMessage()               {}
func (*C2SViewMcWarSceneProto) Descriptor() ([]byte, []int) { return fileDescriptorMingcWar, []int{40} }

func (m *C2SViewMcWarSceneProto) GetMcId() int32 {
	if m != nil {
		return m.McId
	}
	return 0
}

type S2CViewMcWarSceneProto struct {
	Scene *proto10.McWarSceneProto `protobuf:"bytes,1,opt,name=scene" json:"scene,omitempty"`
}

func (m *S2CViewMcWarSceneProto) Reset()                    { *m = S2CViewMcWarSceneProto{} }
func (m *S2CViewMcWarSceneProto) String() string            { return proto.CompactTextString(m) }
func (*S2CViewMcWarSceneProto) ProtoMessage()               {}
func (*S2CViewMcWarSceneProto) Descriptor() ([]byte, []int) { return fileDescriptorMingcWar, []int{41} }

func (m *S2CViewMcWarSceneProto) GetScene() *proto10.McWarSceneProto {
	if m != nil {
		return m.Scene
	}
	return nil
}

type C2SWatchProto struct {
	McId int32 `protobuf:"varint,1,opt,name=mc_id,json=mcId,proto3" json:"mc_id,omitempty"`
}

func (m *C2SWatchProto) Reset()                    { *m = C2SWatchProto{} }
func (m *C2SWatchProto) String() string            { return proto.CompactTextString(m) }
func (*C2SWatchProto) ProtoMessage()               {}
func (*C2SWatchProto) Descriptor() ([]byte, []int) { return fileDescriptorMingcWar, []int{42} }

func (m *C2SWatchProto) GetMcId() int32 {
	if m != nil {
		return m.McId
	}
	return 0
}

type C2SQuitWatchProto struct {
	McId int32 `protobuf:"varint,1,opt,name=mc_id,json=mcId,proto3" json:"mc_id,omitempty"`
}

func (m *C2SQuitWatchProto) Reset()                    { *m = C2SQuitWatchProto{} }
func (m *C2SQuitWatchProto) String() string            { return proto.CompactTextString(m) }
func (*C2SQuitWatchProto) ProtoMessage()               {}
func (*C2SQuitWatchProto) Descriptor() ([]byte, []int) { return fileDescriptorMingcWar, []int{43} }

func (m *C2SQuitWatchProto) GetMcId() int32 {
	if m != nil {
		return m.McId
	}
	return 0
}

type S2CMcWarEndRecordProto struct {
	WarId  int32                          `protobuf:"varint,2,opt,name=war_id,json=warId,proto3" json:"war_id,omitempty"`
	Record *proto10.McWarFightRecordProto `protobuf:"bytes,1,opt,name=record" json:"record,omitempty"`
}

func (m *S2CMcWarEndRecordProto) Reset()                    { *m = S2CMcWarEndRecordProto{} }
func (m *S2CMcWarEndRecordProto) String() string            { return proto.CompactTextString(m) }
func (*S2CMcWarEndRecordProto) ProtoMessage()               {}
func (*S2CMcWarEndRecordProto) Descriptor() ([]byte, []int) { return fileDescriptorMingcWar, []int{44} }

func (m *S2CMcWarEndRecordProto) GetWarId() int32 {
	if m != nil {
		return m.WarId
	}
	return 0
}

func (m *S2CMcWarEndRecordProto) GetRecord() *proto10.McWarFightRecordProto {
	if m != nil {
		return m.Record
	}
	return nil
}

type C2SViewMcWarRecordProto struct {
	WarId int32 `protobuf:"varint,1,opt,name=war_id,json=warId,proto3" json:"war_id,omitempty"`
	McId  int32 `protobuf:"varint,2,opt,name=mc_id,json=mcId,proto3" json:"mc_id,omitempty"`
}

func (m *C2SViewMcWarRecordProto) Reset()                    { *m = C2SViewMcWarRecordProto{} }
func (m *C2SViewMcWarRecordProto) String() string            { return proto.CompactTextString(m) }
func (*C2SViewMcWarRecordProto) ProtoMessage()               {}
func (*C2SViewMcWarRecordProto) Descriptor() ([]byte, []int) { return fileDescriptorMingcWar, []int{45} }

func (m *C2SViewMcWarRecordProto) GetWarId() int32 {
	if m != nil {
		return m.WarId
	}
	return 0
}

func (m *C2SViewMcWarRecordProto) GetMcId() int32 {
	if m != nil {
		return m.McId
	}
	return 0
}

type S2CViewMcWarRecordProto struct {
	WarId  int32                          `protobuf:"varint,2,opt,name=war_id,json=warId,proto3" json:"war_id,omitempty"`
	Record *proto10.McWarFightRecordProto `protobuf:"bytes,1,opt,name=record" json:"record,omitempty"`
}

func (m *S2CViewMcWarRecordProto) Reset()                    { *m = S2CViewMcWarRecordProto{} }
func (m *S2CViewMcWarRecordProto) String() string            { return proto.CompactTextString(m) }
func (*S2CViewMcWarRecordProto) ProtoMessage()               {}
func (*S2CViewMcWarRecordProto) Descriptor() ([]byte, []int) { return fileDescriptorMingcWar, []int{46} }

func (m *S2CViewMcWarRecordProto) GetWarId() int32 {
	if m != nil {
		return m.WarId
	}
	return 0
}

func (m *S2CViewMcWarRecordProto) GetRecord() *proto10.McWarFightRecordProto {
	if m != nil {
		return m.Record
	}
	return nil
}

type C2SViewMcWarTroopRecordProto struct {
	WarId int32 `protobuf:"varint,1,opt,name=war_id,json=warId,proto3" json:"war_id,omitempty"`
	McId  int32 `protobuf:"varint,2,opt,name=mc_id,json=mcId,proto3" json:"mc_id,omitempty"`
}

func (m *C2SViewMcWarTroopRecordProto) Reset()         { *m = C2SViewMcWarTroopRecordProto{} }
func (m *C2SViewMcWarTroopRecordProto) String() string { return proto.CompactTextString(m) }
func (*C2SViewMcWarTroopRecordProto) ProtoMessage()    {}
func (*C2SViewMcWarTroopRecordProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMingcWar, []int{47}
}

func (m *C2SViewMcWarTroopRecordProto) GetWarId() int32 {
	if m != nil {
		return m.WarId
	}
	return 0
}

func (m *C2SViewMcWarTroopRecordProto) GetMcId() int32 {
	if m != nil {
		return m.McId
	}
	return 0
}

type S2CViewMcWarTroopRecordProto struct {
	Record *proto10.McWarTroopAllRecordProto `protobuf:"bytes,1,opt,name=record" json:"record,omitempty"`
}

func (m *S2CViewMcWarTroopRecordProto) Reset()         { *m = S2CViewMcWarTroopRecordProto{} }
func (m *S2CViewMcWarTroopRecordProto) String() string { return proto.CompactTextString(m) }
func (*S2CViewMcWarTroopRecordProto) ProtoMessage()    {}
func (*S2CViewMcWarTroopRecordProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMingcWar, []int{48}
}

func (m *S2CViewMcWarTroopRecordProto) GetRecord() *proto10.McWarTroopAllRecordProto {
	if m != nil {
		return m.Record
	}
	return nil
}

type S2CViewSceneTroopRecordProto struct {
	Record [][]byte `protobuf:"bytes,2,rep,name=record" json:"record,omitempty"`
}

func (m *S2CViewSceneTroopRecordProto) Reset()         { *m = S2CViewSceneTroopRecordProto{} }
func (m *S2CViewSceneTroopRecordProto) String() string { return proto.CompactTextString(m) }
func (*S2CViewSceneTroopRecordProto) ProtoMessage()    {}
func (*S2CViewSceneTroopRecordProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMingcWar, []int{49}
}

func (m *S2CViewSceneTroopRecordProto) GetRecord() [][]byte {
	if m != nil {
		return m.Record
	}
	return nil
}

type S2CMyRankProto struct {
	Info *proto10.McWarTroopRankProto `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
}

func (m *S2CMyRankProto) Reset()                    { *m = S2CMyRankProto{} }
func (m *S2CMyRankProto) String() string            { return proto.CompactTextString(m) }
func (*S2CMyRankProto) ProtoMessage()               {}
func (*S2CMyRankProto) Descriptor() ([]byte, []int) { return fileDescriptorMingcWar, []int{50} }

func (m *S2CMyRankProto) GetInfo() *proto10.McWarTroopRankProto {
	if m != nil {
		return m.Info
	}
	return nil
}

type C2SApplyRefreshRankProto struct {
	Version int32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *C2SApplyRefreshRankProto) Reset()         { *m = C2SApplyRefreshRankProto{} }
func (m *C2SApplyRefreshRankProto) String() string { return proto.CompactTextString(m) }
func (*C2SApplyRefreshRankProto) ProtoMessage()    {}
func (*C2SApplyRefreshRankProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMingcWar, []int{51}
}

func (m *C2SApplyRefreshRankProto) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type S2CApplyRefreshRankProto struct {
	Version int32                         `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	Rank    *proto10.McWarTroopsRankProto `protobuf:"bytes,3,opt,name=rank" json:"rank,omitempty"`
}

func (m *S2CApplyRefreshRankProto) Reset()         { *m = S2CApplyRefreshRankProto{} }
func (m *S2CApplyRefreshRankProto) String() string { return proto.CompactTextString(m) }
func (*S2CApplyRefreshRankProto) ProtoMessage()    {}
func (*S2CApplyRefreshRankProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMingcWar, []int{52}
}

func (m *S2CApplyRefreshRankProto) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *S2CApplyRefreshRankProto) GetRank() *proto10.McWarTroopsRankProto {
	if m != nil {
		return m.Rank
	}
	return nil
}

type C2SViewMyGuildMemberRankProto struct {
	WarId int32 `protobuf:"varint,1,opt,name=war_id,json=warId,proto3" json:"war_id,omitempty"`
	McId  int32 `protobuf:"varint,2,opt,name=mc_id,json=mcId,proto3" json:"mc_id,omitempty"`
}

func (m *C2SViewMyGuildMemberRankProto) Reset()         { *m = C2SViewMyGuildMemberRankProto{} }
func (m *C2SViewMyGuildMemberRankProto) String() string { return proto.CompactTextString(m) }
func (*C2SViewMyGuildMemberRankProto) ProtoMessage()    {}
func (*C2SViewMyGuildMemberRankProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMingcWar, []int{53}
}

func (m *C2SViewMyGuildMemberRankProto) GetWarId() int32 {
	if m != nil {
		return m.WarId
	}
	return 0
}

func (m *C2SViewMyGuildMemberRankProto) GetMcId() int32 {
	if m != nil {
		return m.McId
	}
	return 0
}

type S2CViewMyGuildMemberRankProto struct {
	Rank *proto10.McWarTroopsInfoProto `protobuf:"bytes,1,opt,name=rank" json:"rank,omitempty"`
}

func (m *S2CViewMyGuildMemberRankProto) Reset()         { *m = S2CViewMyGuildMemberRankProto{} }
func (m *S2CViewMyGuildMemberRankProto) String() string { return proto.CompactTextString(m) }
func (*S2CViewMyGuildMemberRankProto) ProtoMessage()    {}
func (*S2CViewMyGuildMemberRankProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMingcWar, []int{54}
}

func (m *S2CViewMyGuildMemberRankProto) GetRank() *proto10.McWarTroopsInfoProto {
	if m != nil {
		return m.Rank
	}
	return nil
}

type S2CCurMultiKillProto struct {
	MultiKill int32 `protobuf:"varint,1,opt,name=multi_kill,json=multiKill,proto3" json:"multi_kill,omitempty"`
}

func (m *S2CCurMultiKillProto) Reset()                    { *m = S2CCurMultiKillProto{} }
func (m *S2CCurMultiKillProto) String() string            { return proto.CompactTextString(m) }
func (*S2CCurMultiKillProto) ProtoMessage()               {}
func (*S2CCurMultiKillProto) Descriptor() ([]byte, []int) { return fileDescriptorMingcWar, []int{55} }

func (m *S2CCurMultiKillProto) GetMultiKill() int32 {
	if m != nil {
		return m.MultiKill
	}
	return 0
}

type S2CSpecialMultiKillProto struct {
	HeroId    []byte `protobuf:"bytes,1,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
	MultiKill int32  `protobuf:"varint,2,opt,name=multi_kill,json=multiKill,proto3" json:"multi_kill,omitempty"`
}

func (m *S2CSpecialMultiKillProto) Reset()         { *m = S2CSpecialMultiKillProto{} }
func (m *S2CSpecialMultiKillProto) String() string { return proto.CompactTextString(m) }
func (*S2CSpecialMultiKillProto) ProtoMessage()    {}
func (*S2CSpecialMultiKillProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMingcWar, []int{56}
}

func (m *S2CSpecialMultiKillProto) GetHeroId() []byte {
	if m != nil {
		return m.HeroId
	}
	return nil
}

func (m *S2CSpecialMultiKillProto) GetMultiKill() int32 {
	if m != nil {
		return m.MultiKill
	}
	return 0
}

type C2SSceneChangeModeProto struct {
	Mode int32 `protobuf:"varint,1,opt,name=mode,proto3" json:"mode,omitempty"`
}

func (m *C2SSceneChangeModeProto) Reset()                    { *m = C2SSceneChangeModeProto{} }
func (m *C2SSceneChangeModeProto) String() string            { return proto.CompactTextString(m) }
func (*C2SSceneChangeModeProto) ProtoMessage()               {}
func (*C2SSceneChangeModeProto) Descriptor() ([]byte, []int) { return fileDescriptorMingcWar, []int{57} }

func (m *C2SSceneChangeModeProto) GetMode() int32 {
	if m != nil {
		return m.Mode
	}
	return 0
}

type S2CSceneChangeModeProto struct {
	Mode int32 `protobuf:"varint,1,opt,name=mode,proto3" json:"mode,omitempty"`
}

func (m *S2CSceneChangeModeProto) Reset()                    { *m = S2CSceneChangeModeProto{} }
func (m *S2CSceneChangeModeProto) String() string            { return proto.CompactTextString(m) }
func (*S2CSceneChangeModeProto) ProtoMessage()               {}
func (*S2CSceneChangeModeProto) Descriptor() ([]byte, []int) { return fileDescriptorMingcWar, []int{58} }

func (m *S2CSceneChangeModeProto) GetMode() int32 {
	if m != nil {
		return m.Mode
	}
	return 0
}

type S2CSceneChangeModeNoticeProto struct {
	HeroId []byte `protobuf:"bytes,1,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
	Mode   int32  `protobuf:"varint,2,opt,name=mode,proto3" json:"mode,omitempty"`
}

func (m *S2CSceneChangeModeNoticeProto) Reset()         { *m = S2CSceneChangeModeNoticeProto{} }
func (m *S2CSceneChangeModeNoticeProto) String() string { return proto.CompactTextString(m) }
func (*S2CSceneChangeModeNoticeProto) ProtoMessage()    {}
func (*S2CSceneChangeModeNoticeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMingcWar, []int{59}
}

func (m *S2CSceneChangeModeNoticeProto) GetHeroId() []byte {
	if m != nil {
		return m.HeroId
	}
	return nil
}

func (m *S2CSceneChangeModeNoticeProto) GetMode() int32 {
	if m != nil {
		return m.Mode
	}
	return 0
}

type C2SSceneTouShiBuildingTurnToProto struct {
	PosX int32 `protobuf:"varint,1,opt,name=pos_x,json=posX,proto3" json:"pos_x,omitempty"`
	PosY int32 `protobuf:"varint,2,opt,name=pos_y,json=posY,proto3" json:"pos_y,omitempty"`
	Left bool  `protobuf:"varint,3,opt,name=left,proto3" json:"left,omitempty"`
}

func (m *C2SSceneTouShiBuildingTurnToProto) Reset()         { *m = C2SSceneTouShiBuildingTurnToProto{} }
func (m *C2SSceneTouShiBuildingTurnToProto) String() string { return proto.CompactTextString(m) }
func (*C2SSceneTouShiBuildingTurnToProto) ProtoMessage()    {}
func (*C2SSceneTouShiBuildingTurnToProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMingcWar, []int{60}
}

func (m *C2SSceneTouShiBuildingTurnToProto) GetPosX() int32 {
	if m != nil {
		return m.PosX
	}
	return 0
}

func (m *C2SSceneTouShiBuildingTurnToProto) GetPosY() int32 {
	if m != nil {
		return m.PosY
	}
	return 0
}

func (m *C2SSceneTouShiBuildingTurnToProto) GetLeft() bool {
	if m != nil {
		return m.Left
	}
	return false
}

type S2CSceneTouShiBuildingTurnToProto struct {
	PosX           int32 `protobuf:"varint,1,opt,name=pos_x,json=posX,proto3" json:"pos_x,omitempty"`
	PosY           int32 `protobuf:"varint,2,opt,name=pos_y,json=posY,proto3" json:"pos_y,omitempty"`
	Left           bool  `protobuf:"varint,3,opt,name=left,proto3" json:"left,omitempty"`
	NewTargetIndex int32 `protobuf:"varint,4,opt,name=new_target_index,json=newTargetIndex,proto3" json:"new_target_index,omitempty"`
	TurnEndTime    int32 `protobuf:"varint,5,opt,name=turn_end_time,json=turnEndTime,proto3" json:"turn_end_time,omitempty"`
}

func (m *S2CSceneTouShiBuildingTurnToProto) Reset()         { *m = S2CSceneTouShiBuildingTurnToProto{} }
func (m *S2CSceneTouShiBuildingTurnToProto) String() string { return proto.CompactTextString(m) }
func (*S2CSceneTouShiBuildingTurnToProto) ProtoMessage()    {}
func (*S2CSceneTouShiBuildingTurnToProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMingcWar, []int{61}
}

func (m *S2CSceneTouShiBuildingTurnToProto) GetPosX() int32 {
	if m != nil {
		return m.PosX
	}
	return 0
}

func (m *S2CSceneTouShiBuildingTurnToProto) GetPosY() int32 {
	if m != nil {
		return m.PosY
	}
	return 0
}

func (m *S2CSceneTouShiBuildingTurnToProto) GetLeft() bool {
	if m != nil {
		return m.Left
	}
	return false
}

func (m *S2CSceneTouShiBuildingTurnToProto) GetNewTargetIndex() int32 {
	if m != nil {
		return m.NewTargetIndex
	}
	return 0
}

func (m *S2CSceneTouShiBuildingTurnToProto) GetTurnEndTime() int32 {
	if m != nil {
		return m.TurnEndTime
	}
	return 0
}

type S2CSceneTouShiBuildingTurnToNoticeProto struct {
	PosX           int32 `protobuf:"varint,1,opt,name=pos_x,json=posX,proto3" json:"pos_x,omitempty"`
	PosY           int32 `protobuf:"varint,2,opt,name=pos_y,json=posY,proto3" json:"pos_y,omitempty"`
	Left           bool  `protobuf:"varint,3,opt,name=left,proto3" json:"left,omitempty"`
	NewTargetIndex int32 `protobuf:"varint,4,opt,name=new_target_index,json=newTargetIndex,proto3" json:"new_target_index,omitempty"`
	TurnEndTime    int32 `protobuf:"varint,5,opt,name=turn_end_time,json=turnEndTime,proto3" json:"turn_end_time,omitempty"`
}

func (m *S2CSceneTouShiBuildingTurnToNoticeProto) Reset() {
	*m = S2CSceneTouShiBuildingTurnToNoticeProto{}
}
func (m *S2CSceneTouShiBuildingTurnToNoticeProto) String() string { return proto.CompactTextString(m) }
func (*S2CSceneTouShiBuildingTurnToNoticeProto) ProtoMessage()    {}
func (*S2CSceneTouShiBuildingTurnToNoticeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMingcWar, []int{62}
}

func (m *S2CSceneTouShiBuildingTurnToNoticeProto) GetPosX() int32 {
	if m != nil {
		return m.PosX
	}
	return 0
}

func (m *S2CSceneTouShiBuildingTurnToNoticeProto) GetPosY() int32 {
	if m != nil {
		return m.PosY
	}
	return 0
}

func (m *S2CSceneTouShiBuildingTurnToNoticeProto) GetLeft() bool {
	if m != nil {
		return m.Left
	}
	return false
}

func (m *S2CSceneTouShiBuildingTurnToNoticeProto) GetNewTargetIndex() int32 {
	if m != nil {
		return m.NewTargetIndex
	}
	return 0
}

func (m *S2CSceneTouShiBuildingTurnToNoticeProto) GetTurnEndTime() int32 {
	if m != nil {
		return m.TurnEndTime
	}
	return 0
}

type C2SSceneTouShiBuildingFireProto struct {
	PosX int32 `protobuf:"varint,1,opt,name=pos_x,json=posX,proto3" json:"pos_x,omitempty"`
	PosY int32 `protobuf:"varint,2,opt,name=pos_y,json=posY,proto3" json:"pos_y,omitempty"`
}

func (m *C2SSceneTouShiBuildingFireProto) Reset()         { *m = C2SSceneTouShiBuildingFireProto{} }
func (m *C2SSceneTouShiBuildingFireProto) String() string { return proto.CompactTextString(m) }
func (*C2SSceneTouShiBuildingFireProto) ProtoMessage()    {}
func (*C2SSceneTouShiBuildingFireProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMingcWar, []int{63}
}

func (m *C2SSceneTouShiBuildingFireProto) GetPosX() int32 {
	if m != nil {
		return m.PosX
	}
	return 0
}

func (m *C2SSceneTouShiBuildingFireProto) GetPosY() int32 {
	if m != nil {
		return m.PosY
	}
	return 0
}

type S2CSceneTouShiBuildingFireProto struct {
	PosX            int32 `protobuf:"varint,1,opt,name=pos_x,json=posX,proto3" json:"pos_x,omitempty"`
	PosY            int32 `protobuf:"varint,2,opt,name=pos_y,json=posY,proto3" json:"pos_y,omitempty"`
	TargetIndex     int32 `protobuf:"varint,3,opt,name=target_index,json=targetIndex,proto3" json:"target_index,omitempty"`
	PrepareEndTime  int32 `protobuf:"varint,4,opt,name=prepare_end_time,json=prepareEndTime,proto3" json:"prepare_end_time,omitempty"`
	BombExplodeTime int32 `protobuf:"varint,5,opt,name=bomb_explode_time,json=bombExplodeTime,proto3" json:"bomb_explode_time,omitempty"`
}

func (m *S2CSceneTouShiBuildingFireProto) Reset()         { *m = S2CSceneTouShiBuildingFireProto{} }
func (m *S2CSceneTouShiBuildingFireProto) String() string { return proto.CompactTextString(m) }
func (*S2CSceneTouShiBuildingFireProto) ProtoMessage()    {}
func (*S2CSceneTouShiBuildingFireProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMingcWar, []int{64}
}

func (m *S2CSceneTouShiBuildingFireProto) GetPosX() int32 {
	if m != nil {
		return m.PosX
	}
	return 0
}

func (m *S2CSceneTouShiBuildingFireProto) GetPosY() int32 {
	if m != nil {
		return m.PosY
	}
	return 0
}

func (m *S2CSceneTouShiBuildingFireProto) GetTargetIndex() int32 {
	if m != nil {
		return m.TargetIndex
	}
	return 0
}

func (m *S2CSceneTouShiBuildingFireProto) GetPrepareEndTime() int32 {
	if m != nil {
		return m.PrepareEndTime
	}
	return 0
}

func (m *S2CSceneTouShiBuildingFireProto) GetBombExplodeTime() int32 {
	if m != nil {
		return m.BombExplodeTime
	}
	return 0
}

type S2CSceneTouShiBuildingFireNoticeProto struct {
	PosX            int32  `protobuf:"varint,1,opt,name=pos_x,json=posX,proto3" json:"pos_x,omitempty"`
	PosY            int32  `protobuf:"varint,2,opt,name=pos_y,json=posY,proto3" json:"pos_y,omitempty"`
	TargetIndex     int32  `protobuf:"varint,3,opt,name=target_index,json=targetIndex,proto3" json:"target_index,omitempty"`
	PrepareEndTime  int32  `protobuf:"varint,4,opt,name=prepare_end_time,json=prepareEndTime,proto3" json:"prepare_end_time,omitempty"`
	BombExplodeTime int32  `protobuf:"varint,5,opt,name=bomb_explode_time,json=bombExplodeTime,proto3" json:"bomb_explode_time,omitempty"`
	FireHeroName    string `protobuf:"bytes,6,opt,name=fire_hero_name,json=fireHeroName,proto3" json:"fire_hero_name,omitempty"`
	FireHeroCountry int32  `protobuf:"varint,7,opt,name=fire_hero_country,json=fireHeroCountry,proto3" json:"fire_hero_country,omitempty"`
}

func (m *S2CSceneTouShiBuildingFireNoticeProto) Reset()         { *m = S2CSceneTouShiBuildingFireNoticeProto{} }
func (m *S2CSceneTouShiBuildingFireNoticeProto) String() string { return proto.CompactTextString(m) }
func (*S2CSceneTouShiBuildingFireNoticeProto) ProtoMessage()    {}
func (*S2CSceneTouShiBuildingFireNoticeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMingcWar, []int{65}
}

func (m *S2CSceneTouShiBuildingFireNoticeProto) GetPosX() int32 {
	if m != nil {
		return m.PosX
	}
	return 0
}

func (m *S2CSceneTouShiBuildingFireNoticeProto) GetPosY() int32 {
	if m != nil {
		return m.PosY
	}
	return 0
}

func (m *S2CSceneTouShiBuildingFireNoticeProto) GetTargetIndex() int32 {
	if m != nil {
		return m.TargetIndex
	}
	return 0
}

func (m *S2CSceneTouShiBuildingFireNoticeProto) GetPrepareEndTime() int32 {
	if m != nil {
		return m.PrepareEndTime
	}
	return 0
}

func (m *S2CSceneTouShiBuildingFireNoticeProto) GetBombExplodeTime() int32 {
	if m != nil {
		return m.BombExplodeTime
	}
	return 0
}

func (m *S2CSceneTouShiBuildingFireNoticeProto) GetFireHeroName() string {
	if m != nil {
		return m.FireHeroName
	}
	return ""
}

func (m *S2CSceneTouShiBuildingFireNoticeProto) GetFireHeroCountry() int32 {
	if m != nil {
		return m.FireHeroCountry
	}
	return 0
}

type S2CSceneTouShiBombExplodeNoticeProto struct {
	FireTroopId []byte `protobuf:"bytes,1,opt,name=fire_troop_id,json=fireTroopId,proto3" json:"fire_troop_id,omitempty"`
}

func (m *S2CSceneTouShiBombExplodeNoticeProto) Reset()         { *m = S2CSceneTouShiBombExplodeNoticeProto{} }
func (m *S2CSceneTouShiBombExplodeNoticeProto) String() string { return proto.CompactTextString(m) }
func (*S2CSceneTouShiBombExplodeNoticeProto) ProtoMessage()    {}
func (*S2CSceneTouShiBombExplodeNoticeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMingcWar, []int{66}
}

func (m *S2CSceneTouShiBombExplodeNoticeProto) GetFireTroopId() []byte {
	if m != nil {
		return m.FireTroopId
	}
	return nil
}

type S2CSceneDrumProto struct {
	DrumDesc     string                  `protobuf:"bytes,3,opt,name=drum_desc,json=drumDesc,proto3" json:"drum_desc,omitempty"`
	NextDrumTime int32                   `protobuf:"varint,2,opt,name=next_drum_time,json=nextDrumTime,proto3" json:"next_drum_time,omitempty"`
	AddDrumStat  *proto1.SpriteStatProto `protobuf:"bytes,4,opt,name=add_drum_stat,json=addDrumStat" json:"add_drum_stat,omitempty"`
}

func (m *S2CSceneDrumProto) Reset()                    { *m = S2CSceneDrumProto{} }
func (m *S2CSceneDrumProto) String() string            { return proto.CompactTextString(m) }
func (*S2CSceneDrumProto) ProtoMessage()               {}
func (*S2CSceneDrumProto) Descriptor() ([]byte, []int) { return fileDescriptorMingcWar, []int{67} }

func (m *S2CSceneDrumProto) GetDrumDesc() string {
	if m != nil {
		return m.DrumDesc
	}
	return ""
}

func (m *S2CSceneDrumProto) GetNextDrumTime() int32 {
	if m != nil {
		return m.NextDrumTime
	}
	return 0
}

func (m *S2CSceneDrumProto) GetAddDrumStat() *proto1.SpriteStatProto {
	if m != nil {
		return m.AddDrumStat
	}
	return nil
}

type S2CSceneDrumNoticeProto struct {
	HeroId       []byte                  `protobuf:"bytes,1,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
	IsAtk        bool                    `protobuf:"varint,5,opt,name=is_atk,json=isAtk,proto3" json:"is_atk,omitempty"`
	NewDrumTimes int32                   `protobuf:"varint,2,opt,name=new_drum_times,json=newDrumTimes,proto3" json:"new_drum_times,omitempty"`
	AddDrumStat  *proto1.SpriteStatProto `protobuf:"bytes,3,opt,name=add_drum_stat,json=addDrumStat" json:"add_drum_stat,omitempty"`
	NewDrumStat  *proto1.SpriteStatProto `protobuf:"bytes,4,opt,name=new_drum_stat,json=newDrumStat" json:"new_drum_stat,omitempty"`
}

func (m *S2CSceneDrumNoticeProto) Reset()                    { *m = S2CSceneDrumNoticeProto{} }
func (m *S2CSceneDrumNoticeProto) String() string            { return proto.CompactTextString(m) }
func (*S2CSceneDrumNoticeProto) ProtoMessage()               {}
func (*S2CSceneDrumNoticeProto) Descriptor() ([]byte, []int) { return fileDescriptorMingcWar, []int{68} }

func (m *S2CSceneDrumNoticeProto) GetHeroId() []byte {
	if m != nil {
		return m.HeroId
	}
	return nil
}

func (m *S2CSceneDrumNoticeProto) GetIsAtk() bool {
	if m != nil {
		return m.IsAtk
	}
	return false
}

func (m *S2CSceneDrumNoticeProto) GetNewDrumTimes() int32 {
	if m != nil {
		return m.NewDrumTimes
	}
	return 0
}

func (m *S2CSceneDrumNoticeProto) GetAddDrumStat() *proto1.SpriteStatProto {
	if m != nil {
		return m.AddDrumStat
	}
	return nil
}

func (m *S2CSceneDrumNoticeProto) GetNewDrumStat() *proto1.SpriteStatProto {
	if m != nil {
		return m.NewDrumStat
	}
	return nil
}

type S2CSceneDrumAddStatNoticeProto struct {
	Troops [][]byte `protobuf:"bytes,2,rep,name=troops" json:"troops,omitempty"`
}

func (m *S2CSceneDrumAddStatNoticeProto) Reset()         { *m = S2CSceneDrumAddStatNoticeProto{} }
func (m *S2CSceneDrumAddStatNoticeProto) String() string { return proto.CompactTextString(m) }
func (*S2CSceneDrumAddStatNoticeProto) ProtoMessage()    {}
func (*S2CSceneDrumAddStatNoticeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMingcWar, []int{69}
}

func (m *S2CSceneDrumAddStatNoticeProto) GetTroops() [][]byte {
	if m != nil {
		return m.Troops
	}
	return nil
}

type S2CMingcHostUpdateNoticeProto struct {
	McId    int32                   `protobuf:"varint,1,opt,name=mc_id,json=mcId,proto3" json:"mc_id,omitempty"`
	NewHost *proto8.GuildBasicProto `protobuf:"bytes,2,opt,name=new_host,json=newHost" json:"new_host,omitempty"`
}

func (m *S2CMingcHostUpdateNoticeProto) Reset()         { *m = S2CMingcHostUpdateNoticeProto{} }
func (m *S2CMingcHostUpdateNoticeProto) String() string { return proto.CompactTextString(m) }
func (*S2CMingcHostUpdateNoticeProto) ProtoMessage()    {}
func (*S2CMingcHostUpdateNoticeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMingcWar, []int{70}
}

func (m *S2CMingcHostUpdateNoticeProto) GetMcId() int32 {
	if m != nil {
		return m.McId
	}
	return 0
}

func (m *S2CMingcHostUpdateNoticeProto) GetNewHost() *proto8.GuildBasicProto {
	if m != nil {
		return m.NewHost
	}
	return nil
}

func init() {
	proto.RegisterType((*S2CViewMcWarSelfGuildProto)(nil), "proto.S2CViewMcWarSelfGuildProto")
	proto.RegisterType((*C2SViewMcWarProto)(nil), "proto.C2SViewMcWarProto")
	proto.RegisterType((*S2CViewMcWarProto)(nil), "proto.S2CViewMcWarProto")
	proto.RegisterType((*C2SApplyAtkProto)(nil), "proto.C2SApplyAtkProto")
	proto.RegisterType((*S2CApplyAtkProto)(nil), "proto.S2CApplyAtkProto")
	proto.RegisterType((*S2CApplyAtkSuccProto)(nil), "proto.S2CApplyAtkSuccProto")
	proto.RegisterType((*S2CApplyAtkFailProto)(nil), "proto.S2CApplyAtkFailProto")
	proto.RegisterType((*C2SApplyAstProto)(nil), "proto.C2SApplyAstProto")
	proto.RegisterType((*S2CApplyAstProto)(nil), "proto.S2CApplyAstProto")
	proto.RegisterType((*S2CReceiveApplyAstProto)(nil), "proto.S2CReceiveApplyAstProto")
	proto.RegisterType((*C2SCancelApplyAstProto)(nil), "proto.C2SCancelApplyAstProto")
	proto.RegisterType((*S2CCancelApplyAstProto)(nil), "proto.S2CCancelApplyAstProto")
	proto.RegisterType((*S2CReceiveCancelApplyAstProto)(nil), "proto.S2CReceiveCancelApplyAstProto")
	proto.RegisterType((*C2SReplyApplyAstProto)(nil), "proto.C2SReplyApplyAstProto")
	proto.RegisterType((*S2CReplyApplyAstProto)(nil), "proto.S2CReplyApplyAstProto")
	proto.RegisterType((*S2CApplyAstPassProto)(nil), "proto.S2CApplyAstPassProto")
	proto.RegisterType((*S2CMingcWarFightPrepareStartProto)(nil), "proto.S2CMingcWarFightPrepareStartProto")
	proto.RegisterType((*S2CMingcWarFightStartProto)(nil), "proto.S2CMingcWarFightStartProto")
	proto.RegisterType((*S2CIsJoiningFightOnLoginProto)(nil), "proto.S2CIsJoiningFightOnLoginProto")
	proto.RegisterType((*C2SViewMingcWarMcProto)(nil), "proto.C2SViewMingcWarMcProto")
	proto.RegisterType((*S2CViewMingcWarMcProto)(nil), "proto.S2CViewMingcWarMcProto")
	proto.RegisterType((*C2SJoinFightProto)(nil), "proto.C2SJoinFightProto")
	proto.RegisterType((*S2CJoinFightProto)(nil), "proto.S2CJoinFightProto")
	proto.RegisterType((*S2COtherJoinFightProto)(nil), "proto.S2COtherJoinFightProto")
	proto.RegisterType((*S2CQuitFightProto)(nil), "proto.S2CQuitFightProto")
	proto.RegisterType((*S2COtherQuitFightProto)(nil), "proto.S2COtherQuitFightProto")
	proto.RegisterType((*S2CSceneBuildingDestroyProsperityProto)(nil), "proto.S2CSceneBuildingDestroyProsperityProto")
	proto.RegisterType((*S2CSceneFightPrepareEndProto)(nil), "proto.S2CSceneFightPrepareEndProto")
	proto.RegisterType((*S2CSceneWarEndProto)(nil), "proto.S2CSceneWarEndProto")
	proto.RegisterType((*C2SSceneMoveProto)(nil), "proto.C2SSceneMoveProto")
	proto.RegisterType((*S2CSceneMoveProto)(nil), "proto.S2CSceneMoveProto")
	proto.RegisterType((*S2CSceneBackProto)(nil), "proto.S2CSceneBackProto")
	proto.RegisterType((*C2SSceneSpeedUpProto)(nil), "proto.C2SSceneSpeedUpProto")
	proto.RegisterType((*S2CSceneSpeedUpProto)(nil), "proto.S2CSceneSpeedUpProto")
	proto.RegisterType((*S2CSceneOtherMoveProto)(nil), "proto.S2CSceneOtherMoveProto")
	proto.RegisterType((*S2CSceneMoveStationProto)(nil), "proto.S2CSceneMoveStationProto")
	proto.RegisterType((*S2CSceneBuildingFightProto)(nil), "proto.S2CSceneBuildingFightProto")
	proto.RegisterType((*S2CSceneTroopReliveProto)(nil), "proto.S2CSceneTroopReliveProto")
	proto.RegisterType((*S2CSceneOtherTroopReliveProto)(nil), "proto.S2CSceneOtherTroopReliveProto")
	proto.RegisterType((*S2CSceneTroopUpdateProto)(nil), "proto.S2CSceneTroopUpdateProto")
	proto.RegisterType((*C2SViewMcWarSceneProto)(nil), "proto.C2SViewMcWarSceneProto")
	proto.RegisterType((*S2CViewMcWarSceneProto)(nil), "proto.S2CViewMcWarSceneProto")
	proto.RegisterType((*C2SWatchProto)(nil), "proto.C2SWatchProto")
	proto.RegisterType((*C2SQuitWatchProto)(nil), "proto.C2SQuitWatchProto")
	proto.RegisterType((*S2CMcWarEndRecordProto)(nil), "proto.S2CMcWarEndRecordProto")
	proto.RegisterType((*C2SViewMcWarRecordProto)(nil), "proto.C2SViewMcWarRecordProto")
	proto.RegisterType((*S2CViewMcWarRecordProto)(nil), "proto.S2CViewMcWarRecordProto")
	proto.RegisterType((*C2SViewMcWarTroopRecordProto)(nil), "proto.C2SViewMcWarTroopRecordProto")
	proto.RegisterType((*S2CViewMcWarTroopRecordProto)(nil), "proto.S2CViewMcWarTroopRecordProto")
	proto.RegisterType((*S2CViewSceneTroopRecordProto)(nil), "proto.S2CViewSceneTroopRecordProto")
	proto.RegisterType((*S2CMyRankProto)(nil), "proto.S2CMyRankProto")
	proto.RegisterType((*C2SApplyRefreshRankProto)(nil), "proto.C2SApplyRefreshRankProto")
	proto.RegisterType((*S2CApplyRefreshRankProto)(nil), "proto.S2CApplyRefreshRankProto")
	proto.RegisterType((*C2SViewMyGuildMemberRankProto)(nil), "proto.C2SViewMyGuildMemberRankProto")
	proto.RegisterType((*S2CViewMyGuildMemberRankProto)(nil), "proto.S2CViewMyGuildMemberRankProto")
	proto.RegisterType((*S2CCurMultiKillProto)(nil), "proto.S2CCurMultiKillProto")
	proto.RegisterType((*S2CSpecialMultiKillProto)(nil), "proto.S2CSpecialMultiKillProto")
	proto.RegisterType((*C2SSceneChangeModeProto)(nil), "proto.C2SSceneChangeModeProto")
	proto.RegisterType((*S2CSceneChangeModeProto)(nil), "proto.S2CSceneChangeModeProto")
	proto.RegisterType((*S2CSceneChangeModeNoticeProto)(nil), "proto.S2CSceneChangeModeNoticeProto")
	proto.RegisterType((*C2SSceneTouShiBuildingTurnToProto)(nil), "proto.C2SSceneTouShiBuildingTurnToProto")
	proto.RegisterType((*S2CSceneTouShiBuildingTurnToProto)(nil), "proto.S2CSceneTouShiBuildingTurnToProto")
	proto.RegisterType((*S2CSceneTouShiBuildingTurnToNoticeProto)(nil), "proto.S2CSceneTouShiBuildingTurnToNoticeProto")
	proto.RegisterType((*C2SSceneTouShiBuildingFireProto)(nil), "proto.C2SSceneTouShiBuildingFireProto")
	proto.RegisterType((*S2CSceneTouShiBuildingFireProto)(nil), "proto.S2CSceneTouShiBuildingFireProto")
	proto.RegisterType((*S2CSceneTouShiBuildingFireNoticeProto)(nil), "proto.S2CSceneTouShiBuildingFireNoticeProto")
	proto.RegisterType((*S2CSceneTouShiBombExplodeNoticeProto)(nil), "proto.S2CSceneTouShiBombExplodeNoticeProto")
	proto.RegisterType((*S2CSceneDrumProto)(nil), "proto.S2CSceneDrumProto")
	proto.RegisterType((*S2CSceneDrumNoticeProto)(nil), "proto.S2CSceneDrumNoticeProto")
	proto.RegisterType((*S2CSceneDrumAddStatNoticeProto)(nil), "proto.S2CSceneDrumAddStatNoticeProto")
	proto.RegisterType((*S2CMingcHostUpdateNoticeProto)(nil), "proto.S2CMingcHostUpdateNoticeProto")
}
func (m *S2CViewMcWarSelfGuildProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CViewMcWarSelfGuildProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SelfGuild != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.SelfGuild.Size()))
		n1, err := m.SelfGuild.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *C2SViewMcWarProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SViewMcWarProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ver != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.Ver))
	}
	return i, nil
}

func (m *S2CViewMcWarProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CViewMcWarProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.War != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.War.Size()))
		n2, err := m.War.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Ver != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.Ver))
	}
	return i, nil
}

func (m *C2SApplyAtkProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SApplyAtkProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mcid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.Mcid))
	}
	if m.Cost != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.Cost))
	}
	return i, nil
}

func (m *S2CApplyAtkProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CApplyAtkProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mcid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.Mcid))
	}
	if m.Cost != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.Cost))
	}
	return i, nil
}

func (m *S2CApplyAtkSuccProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CApplyAtkSuccProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mcid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.Mcid))
	}
	return i, nil
}

func (m *S2CApplyAtkFailProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CApplyAtkFailProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mcid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.Mcid))
	}
	if m.Cost != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.Cost))
	}
	return i, nil
}

func (m *C2SApplyAstProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SApplyAstProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mcid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.Mcid))
	}
	if m.Atk {
		dAtA[i] = 0x10
		i++
		if m.Atk {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CApplyAstProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CApplyAstProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mcid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.Mcid))
	}
	if m.Atk {
		dAtA[i] = 0x10
		i++
		if m.Atk {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CReceiveApplyAstProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CReceiveApplyAstProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mcid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.Mcid))
	}
	return i, nil
}

func (m *C2SCancelApplyAstProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCancelApplyAstProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mcid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.Mcid))
	}
	return i, nil
}

func (m *S2CCancelApplyAstProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCancelApplyAstProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mcid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.Mcid))
	}
	return i, nil
}

func (m *S2CReceiveCancelApplyAstProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CReceiveCancelApplyAstProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mcid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.Mcid))
	}
	return i, nil
}

func (m *C2SReplyApplyAstProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SReplyApplyAstProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mcid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.Mcid))
	}
	if m.Gid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.Gid))
	}
	if m.Agree {
		dAtA[i] = 0x18
		i++
		if m.Agree {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CReplyApplyAstProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CReplyApplyAstProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mcid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.Mcid))
	}
	if m.Gid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.Gid))
	}
	if m.Agree {
		dAtA[i] = 0x18
		i++
		if m.Agree {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CApplyAstPassProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CApplyAstPassProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mcid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.Mcid))
	}
	if m.Agree {
		dAtA[i] = 0x18
		i++
		if m.Agree {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CMingcWarFightPrepareStartProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CMingcWarFightPrepareStartProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StartTime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.EndTime))
	}
	return i, nil
}

func (m *S2CMingcWarFightStartProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CMingcWarFightStartProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StartTime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.EndTime))
	}
	return i, nil
}

func (m *S2CIsJoiningFightOnLoginProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CIsJoiningFightOnLoginProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mcid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.Mcid))
	}
	return i, nil
}

func (m *C2SViewMingcWarMcProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SViewMingcWarMcProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mcid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.Mcid))
	}
	return i, nil
}

func (m *S2CViewMingcWarMcProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CViewMingcWarMcProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mc != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.Mc.Size()))
		n3, err := m.Mc.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *C2SJoinFightProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SJoinFightProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mcid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.Mcid))
	}
	if len(m.CaptainId) > 0 {
		for _, num := range m.CaptainId {
			dAtA[i] = 0x18
			i++
			i = encodeVarintMingcWar(dAtA, i, uint64(num))
		}
	}
	if len(m.XIndex) > 0 {
		for _, num := range m.XIndex {
			dAtA[i] = 0x20
			i++
			i = encodeVarintMingcWar(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *S2CJoinFightProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CJoinFightProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mcid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.Mcid))
	}
	if m.Atk {
		dAtA[i] = 0x10
		i++
		if m.Atk {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2COtherJoinFightProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2COtherJoinFightProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mcid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.Mcid))
	}
	if len(m.HeroId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(len(m.HeroId)))
		i += copy(dAtA[i:], m.HeroId)
	}
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.Data.Size()))
		n4, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *S2CQuitFightProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CQuitFightProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mcid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.Mcid))
	}
	return i, nil
}

func (m *S2COtherQuitFightProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2COtherQuitFightProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mcid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.Mcid))
	}
	if len(m.HeroId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(len(m.HeroId)))
		i += copy(dAtA[i:], m.HeroId)
	}
	return i, nil
}

func (m *S2CSceneBuildingDestroyProsperityProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSceneBuildingDestroyProsperityProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NewProsperity != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.NewProsperity))
	}
	if m.PosX != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.PosX))
	}
	if m.PosY != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.PosY))
	}
	return i, nil
}

func (m *S2CSceneFightPrepareEndProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSceneFightPrepareEndProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StartTime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.StartTime))
	}
	return i, nil
}

func (m *S2CSceneWarEndProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSceneWarEndProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.McId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.McId))
	}
	return i, nil
}

func (m *C2SSceneMoveProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SSceneMoveProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DestPosX != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.DestPosX))
	}
	if m.DestPosY != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.DestPosY))
	}
	return i, nil
}

func (m *S2CSceneMoveProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSceneMoveProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EndTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.EndTime))
	}
	if m.DestPosX != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.DestPosX))
	}
	if m.DestPosY != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.DestPosY))
	}
	return i, nil
}

func (m *S2CSceneBackProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSceneBackProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DestPosX != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.DestPosX))
	}
	if m.DestPosY != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.DestPosY))
	}
	if m.EndTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.EndTime))
	}
	return i, nil
}

func (m *C2SSceneSpeedUpProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SSceneSpeedUpProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.GoodsId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.GoodsId))
	}
	if m.Money {
		dAtA[i] = 0x18
		i++
		if m.Money {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CSceneSpeedUpProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSceneSpeedUpProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.EndTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.EndTime))
	}
	return i, nil
}

func (m *S2CSceneOtherMoveProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSceneOtherMoveProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HeroId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(len(m.HeroId)))
		i += copy(dAtA[i:], m.HeroId)
	}
	if m.StartPosX != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.StartPosX))
	}
	if m.StartPosY != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.StartPosY))
	}
	if m.DestPosX != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.DestPosX))
	}
	if m.DestPosY != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.DestPosY))
	}
	if m.EndTime != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.EndTime))
	}
	return i, nil
}

func (m *S2CSceneMoveStationProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSceneMoveStationProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HeroId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(len(m.HeroId)))
		i += copy(dAtA[i:], m.HeroId)
	}
	if m.PosX != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.PosX))
	}
	if m.PosY != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.PosY))
	}
	return i, nil
}

func (m *S2CSceneBuildingFightProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSceneBuildingFightProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HeroId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(len(m.HeroId)))
		i += copy(dAtA[i:], m.HeroId)
	}
	if m.Gid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.Gid))
	}
	if m.Win {
		dAtA[i] = 0x18
		i++
		if m.Win {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.PosX != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.PosX))
	}
	if m.PosY != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.PosY))
	}
	return i, nil
}

func (m *S2CSceneTroopReliveProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSceneTroopReliveProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EndTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.EndTime))
	}
	return i, nil
}

func (m *S2CSceneOtherTroopReliveProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSceneOtherTroopReliveProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HeroId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(len(m.HeroId)))
		i += copy(dAtA[i:], m.HeroId)
	}
	if m.EndTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.EndTime))
	}
	return i, nil
}

func (m *S2CSceneTroopUpdateProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSceneTroopUpdateProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HeroId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(len(m.HeroId)))
		i += copy(dAtA[i:], m.HeroId)
	}
	if m.Data != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.Data.Size()))
		n5, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *C2SViewMcWarSceneProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SViewMcWarSceneProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.McId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.McId))
	}
	return i, nil
}

func (m *S2CViewMcWarSceneProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CViewMcWarSceneProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Scene != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.Scene.Size()))
		n6, err := m.Scene.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *C2SWatchProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SWatchProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.McId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.McId))
	}
	return i, nil
}

func (m *C2SQuitWatchProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SQuitWatchProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.McId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.McId))
	}
	return i, nil
}

func (m *S2CMcWarEndRecordProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CMcWarEndRecordProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Record != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.Record.Size()))
		n7, err := m.Record.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.WarId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.WarId))
	}
	return i, nil
}

func (m *C2SViewMcWarRecordProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SViewMcWarRecordProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.WarId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.WarId))
	}
	if m.McId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.McId))
	}
	return i, nil
}

func (m *S2CViewMcWarRecordProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CViewMcWarRecordProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Record != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.Record.Size()))
		n8, err := m.Record.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.WarId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.WarId))
	}
	return i, nil
}

func (m *C2SViewMcWarTroopRecordProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SViewMcWarTroopRecordProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.WarId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.WarId))
	}
	if m.McId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.McId))
	}
	return i, nil
}

func (m *S2CViewMcWarTroopRecordProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CViewMcWarTroopRecordProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Record != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.Record.Size()))
		n9, err := m.Record.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func (m *S2CViewSceneTroopRecordProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CViewSceneTroopRecordProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Record) > 0 {
		for _, b := range m.Record {
			dAtA[i] = 0x12
			i++
			i = encodeVarintMingcWar(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *S2CMyRankProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CMyRankProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.Info.Size()))
		n10, err := m.Info.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}

func (m *C2SApplyRefreshRankProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SApplyRefreshRankProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.Version))
	}
	return i, nil
}

func (m *S2CApplyRefreshRankProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CApplyRefreshRankProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.Version))
	}
	if m.Rank != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.Rank.Size()))
		n11, err := m.Rank.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}

func (m *C2SViewMyGuildMemberRankProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SViewMyGuildMemberRankProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.WarId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.WarId))
	}
	if m.McId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.McId))
	}
	return i, nil
}

func (m *S2CViewMyGuildMemberRankProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CViewMyGuildMemberRankProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rank != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.Rank.Size()))
		n12, err := m.Rank.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func (m *S2CCurMultiKillProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCurMultiKillProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MultiKill != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.MultiKill))
	}
	return i, nil
}

func (m *S2CSpecialMultiKillProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSpecialMultiKillProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HeroId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(len(m.HeroId)))
		i += copy(dAtA[i:], m.HeroId)
	}
	if m.MultiKill != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.MultiKill))
	}
	return i, nil
}

func (m *C2SSceneChangeModeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SSceneChangeModeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.Mode))
	}
	return i, nil
}

func (m *S2CSceneChangeModeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSceneChangeModeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.Mode))
	}
	return i, nil
}

func (m *S2CSceneChangeModeNoticeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSceneChangeModeNoticeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HeroId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(len(m.HeroId)))
		i += copy(dAtA[i:], m.HeroId)
	}
	if m.Mode != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.Mode))
	}
	return i, nil
}

func (m *C2SSceneTouShiBuildingTurnToProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SSceneTouShiBuildingTurnToProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PosX != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.PosX))
	}
	if m.PosY != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.PosY))
	}
	if m.Left {
		dAtA[i] = 0x18
		i++
		if m.Left {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CSceneTouShiBuildingTurnToProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSceneTouShiBuildingTurnToProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PosX != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.PosX))
	}
	if m.PosY != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.PosY))
	}
	if m.Left {
		dAtA[i] = 0x18
		i++
		if m.Left {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.NewTargetIndex != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.NewTargetIndex))
	}
	if m.TurnEndTime != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.TurnEndTime))
	}
	return i, nil
}

func (m *S2CSceneTouShiBuildingTurnToNoticeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSceneTouShiBuildingTurnToNoticeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PosX != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.PosX))
	}
	if m.PosY != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.PosY))
	}
	if m.Left {
		dAtA[i] = 0x18
		i++
		if m.Left {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.NewTargetIndex != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.NewTargetIndex))
	}
	if m.TurnEndTime != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.TurnEndTime))
	}
	return i, nil
}

func (m *C2SSceneTouShiBuildingFireProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SSceneTouShiBuildingFireProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PosX != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.PosX))
	}
	if m.PosY != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.PosY))
	}
	return i, nil
}

func (m *S2CSceneTouShiBuildingFireProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSceneTouShiBuildingFireProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PosX != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.PosX))
	}
	if m.PosY != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.PosY))
	}
	if m.TargetIndex != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.TargetIndex))
	}
	if m.PrepareEndTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.PrepareEndTime))
	}
	if m.BombExplodeTime != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.BombExplodeTime))
	}
	return i, nil
}

func (m *S2CSceneTouShiBuildingFireNoticeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSceneTouShiBuildingFireNoticeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PosX != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.PosX))
	}
	if m.PosY != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.PosY))
	}
	if m.TargetIndex != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.TargetIndex))
	}
	if m.PrepareEndTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.PrepareEndTime))
	}
	if m.BombExplodeTime != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.BombExplodeTime))
	}
	if len(m.FireHeroName) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(len(m.FireHeroName)))
		i += copy(dAtA[i:], m.FireHeroName)
	}
	if m.FireHeroCountry != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.FireHeroCountry))
	}
	return i, nil
}

func (m *S2CSceneTouShiBombExplodeNoticeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSceneTouShiBombExplodeNoticeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FireTroopId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(len(m.FireTroopId)))
		i += copy(dAtA[i:], m.FireTroopId)
	}
	return i, nil
}

func (m *S2CSceneDrumProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSceneDrumProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NextDrumTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.NextDrumTime))
	}
	if len(m.DrumDesc) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(len(m.DrumDesc)))
		i += copy(dAtA[i:], m.DrumDesc)
	}
	if m.AddDrumStat != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.AddDrumStat.Size()))
		n13, err := m.AddDrumStat.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}

func (m *S2CSceneDrumNoticeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSceneDrumNoticeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HeroId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(len(m.HeroId)))
		i += copy(dAtA[i:], m.HeroId)
	}
	if m.NewDrumTimes != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.NewDrumTimes))
	}
	if m.AddDrumStat != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.AddDrumStat.Size()))
		n14, err := m.AddDrumStat.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.NewDrumStat != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.NewDrumStat.Size()))
		n15, err := m.NewDrumStat.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.IsAtk {
		dAtA[i] = 0x28
		i++
		if m.IsAtk {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CSceneDrumAddStatNoticeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSceneDrumAddStatNoticeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Troops) > 0 {
		for _, b := range m.Troops {
			dAtA[i] = 0x12
			i++
			i = encodeVarintMingcWar(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *S2CMingcHostUpdateNoticeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CMingcHostUpdateNoticeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.McId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.McId))
	}
	if m.NewHost != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMingcWar(dAtA, i, uint64(m.NewHost.Size()))
		n16, err := m.NewHost.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}

func encodeFixed64MingcWar(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32MingcWar(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintMingcWar(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *S2CViewMcWarSelfGuildProto) Size() (n int) {
	var l int
	_ = l
	if m.SelfGuild != nil {
		l = m.SelfGuild.Size()
		n += 1 + l + sovMingcWar(uint64(l))
	}
	return n
}

func (m *C2SViewMcWarProto) Size() (n int) {
	var l int
	_ = l
	if m.Ver != 0 {
		n += 1 + sovMingcWar(uint64(m.Ver))
	}
	return n
}

func (m *S2CViewMcWarProto) Size() (n int) {
	var l int
	_ = l
	if m.War != nil {
		l = m.War.Size()
		n += 1 + l + sovMingcWar(uint64(l))
	}
	if m.Ver != 0 {
		n += 1 + sovMingcWar(uint64(m.Ver))
	}
	return n
}

func (m *C2SApplyAtkProto) Size() (n int) {
	var l int
	_ = l
	if m.Mcid != 0 {
		n += 1 + sovMingcWar(uint64(m.Mcid))
	}
	if m.Cost != 0 {
		n += 1 + sovMingcWar(uint64(m.Cost))
	}
	return n
}

func (m *S2CApplyAtkProto) Size() (n int) {
	var l int
	_ = l
	if m.Mcid != 0 {
		n += 1 + sovMingcWar(uint64(m.Mcid))
	}
	if m.Cost != 0 {
		n += 1 + sovMingcWar(uint64(m.Cost))
	}
	return n
}

func (m *S2CApplyAtkSuccProto) Size() (n int) {
	var l int
	_ = l
	if m.Mcid != 0 {
		n += 1 + sovMingcWar(uint64(m.Mcid))
	}
	return n
}

func (m *S2CApplyAtkFailProto) Size() (n int) {
	var l int
	_ = l
	if m.Mcid != 0 {
		n += 1 + sovMingcWar(uint64(m.Mcid))
	}
	if m.Cost != 0 {
		n += 1 + sovMingcWar(uint64(m.Cost))
	}
	return n
}

func (m *C2SApplyAstProto) Size() (n int) {
	var l int
	_ = l
	if m.Mcid != 0 {
		n += 1 + sovMingcWar(uint64(m.Mcid))
	}
	if m.Atk {
		n += 2
	}
	return n
}

func (m *S2CApplyAstProto) Size() (n int) {
	var l int
	_ = l
	if m.Mcid != 0 {
		n += 1 + sovMingcWar(uint64(m.Mcid))
	}
	if m.Atk {
		n += 2
	}
	return n
}

func (m *S2CReceiveApplyAstProto) Size() (n int) {
	var l int
	_ = l
	if m.Mcid != 0 {
		n += 1 + sovMingcWar(uint64(m.Mcid))
	}
	return n
}

func (m *C2SCancelApplyAstProto) Size() (n int) {
	var l int
	_ = l
	if m.Mcid != 0 {
		n += 1 + sovMingcWar(uint64(m.Mcid))
	}
	return n
}

func (m *S2CCancelApplyAstProto) Size() (n int) {
	var l int
	_ = l
	if m.Mcid != 0 {
		n += 1 + sovMingcWar(uint64(m.Mcid))
	}
	return n
}

func (m *S2CReceiveCancelApplyAstProto) Size() (n int) {
	var l int
	_ = l
	if m.Mcid != 0 {
		n += 1 + sovMingcWar(uint64(m.Mcid))
	}
	return n
}

func (m *C2SReplyApplyAstProto) Size() (n int) {
	var l int
	_ = l
	if m.Mcid != 0 {
		n += 1 + sovMingcWar(uint64(m.Mcid))
	}
	if m.Gid != 0 {
		n += 1 + sovMingcWar(uint64(m.Gid))
	}
	if m.Agree {
		n += 2
	}
	return n
}

func (m *S2CReplyApplyAstProto) Size() (n int) {
	var l int
	_ = l
	if m.Mcid != 0 {
		n += 1 + sovMingcWar(uint64(m.Mcid))
	}
	if m.Gid != 0 {
		n += 1 + sovMingcWar(uint64(m.Gid))
	}
	if m.Agree {
		n += 2
	}
	return n
}

func (m *S2CApplyAstPassProto) Size() (n int) {
	var l int
	_ = l
	if m.Mcid != 0 {
		n += 1 + sovMingcWar(uint64(m.Mcid))
	}
	if m.Agree {
		n += 2
	}
	return n
}

func (m *S2CMingcWarFightPrepareStartProto) Size() (n int) {
	var l int
	_ = l
	if m.StartTime != 0 {
		n += 1 + sovMingcWar(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovMingcWar(uint64(m.EndTime))
	}
	return n
}

func (m *S2CMingcWarFightStartProto) Size() (n int) {
	var l int
	_ = l
	if m.StartTime != 0 {
		n += 1 + sovMingcWar(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovMingcWar(uint64(m.EndTime))
	}
	return n
}

func (m *S2CIsJoiningFightOnLoginProto) Size() (n int) {
	var l int
	_ = l
	if m.Mcid != 0 {
		n += 1 + sovMingcWar(uint64(m.Mcid))
	}
	return n
}

func (m *C2SViewMingcWarMcProto) Size() (n int) {
	var l int
	_ = l
	if m.Mcid != 0 {
		n += 1 + sovMingcWar(uint64(m.Mcid))
	}
	return n
}

func (m *S2CViewMingcWarMcProto) Size() (n int) {
	var l int
	_ = l
	if m.Mc != nil {
		l = m.Mc.Size()
		n += 1 + l + sovMingcWar(uint64(l))
	}
	return n
}

func (m *C2SJoinFightProto) Size() (n int) {
	var l int
	_ = l
	if m.Mcid != 0 {
		n += 1 + sovMingcWar(uint64(m.Mcid))
	}
	if len(m.CaptainId) > 0 {
		for _, e := range m.CaptainId {
			n += 1 + sovMingcWar(uint64(e))
		}
	}
	if len(m.XIndex) > 0 {
		for _, e := range m.XIndex {
			n += 1 + sovMingcWar(uint64(e))
		}
	}
	return n
}

func (m *S2CJoinFightProto) Size() (n int) {
	var l int
	_ = l
	if m.Mcid != 0 {
		n += 1 + sovMingcWar(uint64(m.Mcid))
	}
	if m.Atk {
		n += 2
	}
	return n
}

func (m *S2COtherJoinFightProto) Size() (n int) {
	var l int
	_ = l
	if m.Mcid != 0 {
		n += 1 + sovMingcWar(uint64(m.Mcid))
	}
	l = len(m.HeroId)
	if l > 0 {
		n += 1 + l + sovMingcWar(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovMingcWar(uint64(l))
	}
	return n
}

func (m *S2CQuitFightProto) Size() (n int) {
	var l int
	_ = l
	if m.Mcid != 0 {
		n += 1 + sovMingcWar(uint64(m.Mcid))
	}
	return n
}

func (m *S2COtherQuitFightProto) Size() (n int) {
	var l int
	_ = l
	if m.Mcid != 0 {
		n += 1 + sovMingcWar(uint64(m.Mcid))
	}
	l = len(m.HeroId)
	if l > 0 {
		n += 1 + l + sovMingcWar(uint64(l))
	}
	return n
}

func (m *S2CSceneBuildingDestroyProsperityProto) Size() (n int) {
	var l int
	_ = l
	if m.NewProsperity != 0 {
		n += 1 + sovMingcWar(uint64(m.NewProsperity))
	}
	if m.PosX != 0 {
		n += 1 + sovMingcWar(uint64(m.PosX))
	}
	if m.PosY != 0 {
		n += 1 + sovMingcWar(uint64(m.PosY))
	}
	return n
}

func (m *S2CSceneFightPrepareEndProto) Size() (n int) {
	var l int
	_ = l
	if m.StartTime != 0 {
		n += 1 + sovMingcWar(uint64(m.StartTime))
	}
	return n
}

func (m *S2CSceneWarEndProto) Size() (n int) {
	var l int
	_ = l
	if m.McId != 0 {
		n += 1 + sovMingcWar(uint64(m.McId))
	}
	return n
}

func (m *C2SSceneMoveProto) Size() (n int) {
	var l int
	_ = l
	if m.DestPosX != 0 {
		n += 1 + sovMingcWar(uint64(m.DestPosX))
	}
	if m.DestPosY != 0 {
		n += 1 + sovMingcWar(uint64(m.DestPosY))
	}
	return n
}

func (m *S2CSceneMoveProto) Size() (n int) {
	var l int
	_ = l
	if m.EndTime != 0 {
		n += 1 + sovMingcWar(uint64(m.EndTime))
	}
	if m.DestPosX != 0 {
		n += 1 + sovMingcWar(uint64(m.DestPosX))
	}
	if m.DestPosY != 0 {
		n += 1 + sovMingcWar(uint64(m.DestPosY))
	}
	return n
}

func (m *S2CSceneBackProto) Size() (n int) {
	var l int
	_ = l
	if m.DestPosX != 0 {
		n += 1 + sovMingcWar(uint64(m.DestPosX))
	}
	if m.DestPosY != 0 {
		n += 1 + sovMingcWar(uint64(m.DestPosY))
	}
	if m.EndTime != 0 {
		n += 1 + sovMingcWar(uint64(m.EndTime))
	}
	return n
}

func (m *C2SSceneSpeedUpProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMingcWar(uint64(l))
	}
	if m.GoodsId != 0 {
		n += 1 + sovMingcWar(uint64(m.GoodsId))
	}
	if m.Money {
		n += 2
	}
	return n
}

func (m *S2CSceneSpeedUpProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMingcWar(uint64(l))
	}
	if m.EndTime != 0 {
		n += 1 + sovMingcWar(uint64(m.EndTime))
	}
	return n
}

func (m *S2CSceneOtherMoveProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.HeroId)
	if l > 0 {
		n += 1 + l + sovMingcWar(uint64(l))
	}
	if m.StartPosX != 0 {
		n += 1 + sovMingcWar(uint64(m.StartPosX))
	}
	if m.StartPosY != 0 {
		n += 1 + sovMingcWar(uint64(m.StartPosY))
	}
	if m.DestPosX != 0 {
		n += 1 + sovMingcWar(uint64(m.DestPosX))
	}
	if m.DestPosY != 0 {
		n += 1 + sovMingcWar(uint64(m.DestPosY))
	}
	if m.EndTime != 0 {
		n += 1 + sovMingcWar(uint64(m.EndTime))
	}
	return n
}

func (m *S2CSceneMoveStationProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.HeroId)
	if l > 0 {
		n += 1 + l + sovMingcWar(uint64(l))
	}
	if m.PosX != 0 {
		n += 1 + sovMingcWar(uint64(m.PosX))
	}
	if m.PosY != 0 {
		n += 1 + sovMingcWar(uint64(m.PosY))
	}
	return n
}

func (m *S2CSceneBuildingFightProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.HeroId)
	if l > 0 {
		n += 1 + l + sovMingcWar(uint64(l))
	}
	if m.Gid != 0 {
		n += 1 + sovMingcWar(uint64(m.Gid))
	}
	if m.Win {
		n += 2
	}
	if m.PosX != 0 {
		n += 1 + sovMingcWar(uint64(m.PosX))
	}
	if m.PosY != 0 {
		n += 1 + sovMingcWar(uint64(m.PosY))
	}
	return n
}

func (m *S2CSceneTroopReliveProto) Size() (n int) {
	var l int
	_ = l
	if m.EndTime != 0 {
		n += 1 + sovMingcWar(uint64(m.EndTime))
	}
	return n
}

func (m *S2CSceneOtherTroopReliveProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.HeroId)
	if l > 0 {
		n += 1 + l + sovMingcWar(uint64(l))
	}
	if m.EndTime != 0 {
		n += 1 + sovMingcWar(uint64(m.EndTime))
	}
	return n
}

func (m *S2CSceneTroopUpdateProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.HeroId)
	if l > 0 {
		n += 1 + l + sovMingcWar(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovMingcWar(uint64(l))
	}
	return n
}

func (m *C2SViewMcWarSceneProto) Size() (n int) {
	var l int
	_ = l
	if m.McId != 0 {
		n += 1 + sovMingcWar(uint64(m.McId))
	}
	return n
}

func (m *S2CViewMcWarSceneProto) Size() (n int) {
	var l int
	_ = l
	if m.Scene != nil {
		l = m.Scene.Size()
		n += 1 + l + sovMingcWar(uint64(l))
	}
	return n
}

func (m *C2SWatchProto) Size() (n int) {
	var l int
	_ = l
	if m.McId != 0 {
		n += 1 + sovMingcWar(uint64(m.McId))
	}
	return n
}

func (m *C2SQuitWatchProto) Size() (n int) {
	var l int
	_ = l
	if m.McId != 0 {
		n += 1 + sovMingcWar(uint64(m.McId))
	}
	return n
}

func (m *S2CMcWarEndRecordProto) Size() (n int) {
	var l int
	_ = l
	if m.Record != nil {
		l = m.Record.Size()
		n += 1 + l + sovMingcWar(uint64(l))
	}
	if m.WarId != 0 {
		n += 1 + sovMingcWar(uint64(m.WarId))
	}
	return n
}

func (m *C2SViewMcWarRecordProto) Size() (n int) {
	var l int
	_ = l
	if m.WarId != 0 {
		n += 1 + sovMingcWar(uint64(m.WarId))
	}
	if m.McId != 0 {
		n += 1 + sovMingcWar(uint64(m.McId))
	}
	return n
}

func (m *S2CViewMcWarRecordProto) Size() (n int) {
	var l int
	_ = l
	if m.Record != nil {
		l = m.Record.Size()
		n += 1 + l + sovMingcWar(uint64(l))
	}
	if m.WarId != 0 {
		n += 1 + sovMingcWar(uint64(m.WarId))
	}
	return n
}

func (m *C2SViewMcWarTroopRecordProto) Size() (n int) {
	var l int
	_ = l
	if m.WarId != 0 {
		n += 1 + sovMingcWar(uint64(m.WarId))
	}
	if m.McId != 0 {
		n += 1 + sovMingcWar(uint64(m.McId))
	}
	return n
}

func (m *S2CViewMcWarTroopRecordProto) Size() (n int) {
	var l int
	_ = l
	if m.Record != nil {
		l = m.Record.Size()
		n += 1 + l + sovMingcWar(uint64(l))
	}
	return n
}

func (m *S2CViewSceneTroopRecordProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Record) > 0 {
		for _, b := range m.Record {
			l = len(b)
			n += 1 + l + sovMingcWar(uint64(l))
		}
	}
	return n
}

func (m *S2CMyRankProto) Size() (n int) {
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovMingcWar(uint64(l))
	}
	return n
}

func (m *C2SApplyRefreshRankProto) Size() (n int) {
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovMingcWar(uint64(m.Version))
	}
	return n
}

func (m *S2CApplyRefreshRankProto) Size() (n int) {
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovMingcWar(uint64(m.Version))
	}
	if m.Rank != nil {
		l = m.Rank.Size()
		n += 1 + l + sovMingcWar(uint64(l))
	}
	return n
}

func (m *C2SViewMyGuildMemberRankProto) Size() (n int) {
	var l int
	_ = l
	if m.WarId != 0 {
		n += 1 + sovMingcWar(uint64(m.WarId))
	}
	if m.McId != 0 {
		n += 1 + sovMingcWar(uint64(m.McId))
	}
	return n
}

func (m *S2CViewMyGuildMemberRankProto) Size() (n int) {
	var l int
	_ = l
	if m.Rank != nil {
		l = m.Rank.Size()
		n += 1 + l + sovMingcWar(uint64(l))
	}
	return n
}

func (m *S2CCurMultiKillProto) Size() (n int) {
	var l int
	_ = l
	if m.MultiKill != 0 {
		n += 1 + sovMingcWar(uint64(m.MultiKill))
	}
	return n
}

func (m *S2CSpecialMultiKillProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.HeroId)
	if l > 0 {
		n += 1 + l + sovMingcWar(uint64(l))
	}
	if m.MultiKill != 0 {
		n += 1 + sovMingcWar(uint64(m.MultiKill))
	}
	return n
}

func (m *C2SSceneChangeModeProto) Size() (n int) {
	var l int
	_ = l
	if m.Mode != 0 {
		n += 1 + sovMingcWar(uint64(m.Mode))
	}
	return n
}

func (m *S2CSceneChangeModeProto) Size() (n int) {
	var l int
	_ = l
	if m.Mode != 0 {
		n += 1 + sovMingcWar(uint64(m.Mode))
	}
	return n
}

func (m *S2CSceneChangeModeNoticeProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.HeroId)
	if l > 0 {
		n += 1 + l + sovMingcWar(uint64(l))
	}
	if m.Mode != 0 {
		n += 1 + sovMingcWar(uint64(m.Mode))
	}
	return n
}

func (m *C2SSceneTouShiBuildingTurnToProto) Size() (n int) {
	var l int
	_ = l
	if m.PosX != 0 {
		n += 1 + sovMingcWar(uint64(m.PosX))
	}
	if m.PosY != 0 {
		n += 1 + sovMingcWar(uint64(m.PosY))
	}
	if m.Left {
		n += 2
	}
	return n
}

func (m *S2CSceneTouShiBuildingTurnToProto) Size() (n int) {
	var l int
	_ = l
	if m.PosX != 0 {
		n += 1 + sovMingcWar(uint64(m.PosX))
	}
	if m.PosY != 0 {
		n += 1 + sovMingcWar(uint64(m.PosY))
	}
	if m.Left {
		n += 2
	}
	if m.NewTargetIndex != 0 {
		n += 1 + sovMingcWar(uint64(m.NewTargetIndex))
	}
	if m.TurnEndTime != 0 {
		n += 1 + sovMingcWar(uint64(m.TurnEndTime))
	}
	return n
}

func (m *S2CSceneTouShiBuildingTurnToNoticeProto) Size() (n int) {
	var l int
	_ = l
	if m.PosX != 0 {
		n += 1 + sovMingcWar(uint64(m.PosX))
	}
	if m.PosY != 0 {
		n += 1 + sovMingcWar(uint64(m.PosY))
	}
	if m.Left {
		n += 2
	}
	if m.NewTargetIndex != 0 {
		n += 1 + sovMingcWar(uint64(m.NewTargetIndex))
	}
	if m.TurnEndTime != 0 {
		n += 1 + sovMingcWar(uint64(m.TurnEndTime))
	}
	return n
}

func (m *C2SSceneTouShiBuildingFireProto) Size() (n int) {
	var l int
	_ = l
	if m.PosX != 0 {
		n += 1 + sovMingcWar(uint64(m.PosX))
	}
	if m.PosY != 0 {
		n += 1 + sovMingcWar(uint64(m.PosY))
	}
	return n
}

func (m *S2CSceneTouShiBuildingFireProto) Size() (n int) {
	var l int
	_ = l
	if m.PosX != 0 {
		n += 1 + sovMingcWar(uint64(m.PosX))
	}
	if m.PosY != 0 {
		n += 1 + sovMingcWar(uint64(m.PosY))
	}
	if m.TargetIndex != 0 {
		n += 1 + sovMingcWar(uint64(m.TargetIndex))
	}
	if m.PrepareEndTime != 0 {
		n += 1 + sovMingcWar(uint64(m.PrepareEndTime))
	}
	if m.BombExplodeTime != 0 {
		n += 1 + sovMingcWar(uint64(m.BombExplodeTime))
	}
	return n
}

func (m *S2CSceneTouShiBuildingFireNoticeProto) Size() (n int) {
	var l int
	_ = l
	if m.PosX != 0 {
		n += 1 + sovMingcWar(uint64(m.PosX))
	}
	if m.PosY != 0 {
		n += 1 + sovMingcWar(uint64(m.PosY))
	}
	if m.TargetIndex != 0 {
		n += 1 + sovMingcWar(uint64(m.TargetIndex))
	}
	if m.PrepareEndTime != 0 {
		n += 1 + sovMingcWar(uint64(m.PrepareEndTime))
	}
	if m.BombExplodeTime != 0 {
		n += 1 + sovMingcWar(uint64(m.BombExplodeTime))
	}
	l = len(m.FireHeroName)
	if l > 0 {
		n += 1 + l + sovMingcWar(uint64(l))
	}
	if m.FireHeroCountry != 0 {
		n += 1 + sovMingcWar(uint64(m.FireHeroCountry))
	}
	return n
}

func (m *S2CSceneTouShiBombExplodeNoticeProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.FireTroopId)
	if l > 0 {
		n += 1 + l + sovMingcWar(uint64(l))
	}
	return n
}

func (m *S2CSceneDrumProto) Size() (n int) {
	var l int
	_ = l
	if m.NextDrumTime != 0 {
		n += 1 + sovMingcWar(uint64(m.NextDrumTime))
	}
	l = len(m.DrumDesc)
	if l > 0 {
		n += 1 + l + sovMingcWar(uint64(l))
	}
	if m.AddDrumStat != nil {
		l = m.AddDrumStat.Size()
		n += 1 + l + sovMingcWar(uint64(l))
	}
	return n
}

func (m *S2CSceneDrumNoticeProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.HeroId)
	if l > 0 {
		n += 1 + l + sovMingcWar(uint64(l))
	}
	if m.NewDrumTimes != 0 {
		n += 1 + sovMingcWar(uint64(m.NewDrumTimes))
	}
	if m.AddDrumStat != nil {
		l = m.AddDrumStat.Size()
		n += 1 + l + sovMingcWar(uint64(l))
	}
	if m.NewDrumStat != nil {
		l = m.NewDrumStat.Size()
		n += 1 + l + sovMingcWar(uint64(l))
	}
	if m.IsAtk {
		n += 2
	}
	return n
}

func (m *S2CSceneDrumAddStatNoticeProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Troops) > 0 {
		for _, b := range m.Troops {
			l = len(b)
			n += 1 + l + sovMingcWar(uint64(l))
		}
	}
	return n
}

func (m *S2CMingcHostUpdateNoticeProto) Size() (n int) {
	var l int
	_ = l
	if m.McId != 0 {
		n += 1 + sovMingcWar(uint64(m.McId))
	}
	if m.NewHost != nil {
		l = m.NewHost.Size()
		n += 1 + l + sovMingcWar(uint64(l))
	}
	return n
}

func sovMingcWar(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMingcWar(x uint64) (n int) {
	return sovMingcWar(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *S2CViewMcWarSelfGuildProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CViewMcWarSelfGuildProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CViewMcWarSelfGuildProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfGuild", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMingcWar
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SelfGuild == nil {
				m.SelfGuild = &proto10.McWarGuildProto{}
			}
			if err := m.SelfGuild.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SViewMcWarProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SViewMcWarProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SViewMcWarProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ver", wireType)
			}
			m.Ver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ver |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CViewMcWarProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CViewMcWarProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CViewMcWarProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field War", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMingcWar
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.War == nil {
				m.War = &proto10.McWarProto{}
			}
			if err := m.War.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ver", wireType)
			}
			m.Ver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ver |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SApplyAtkProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SApplyAtkProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SApplyAtkProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mcid", wireType)
			}
			m.Mcid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mcid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cost", wireType)
			}
			m.Cost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cost |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CApplyAtkProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CApplyAtkProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CApplyAtkProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mcid", wireType)
			}
			m.Mcid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mcid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cost", wireType)
			}
			m.Cost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cost |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CApplyAtkSuccProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CApplyAtkSuccProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CApplyAtkSuccProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mcid", wireType)
			}
			m.Mcid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mcid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CApplyAtkFailProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CApplyAtkFailProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CApplyAtkFailProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mcid", wireType)
			}
			m.Mcid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mcid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cost", wireType)
			}
			m.Cost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cost |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SApplyAstProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SApplyAstProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SApplyAstProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mcid", wireType)
			}
			m.Mcid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mcid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Atk", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Atk = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CApplyAstProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CApplyAstProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CApplyAstProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mcid", wireType)
			}
			m.Mcid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mcid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Atk", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Atk = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CReceiveApplyAstProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CReceiveApplyAstProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CReceiveApplyAstProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mcid", wireType)
			}
			m.Mcid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mcid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SCancelApplyAstProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCancelApplyAstProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCancelApplyAstProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mcid", wireType)
			}
			m.Mcid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mcid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCancelApplyAstProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCancelApplyAstProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCancelApplyAstProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mcid", wireType)
			}
			m.Mcid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mcid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CReceiveCancelApplyAstProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CReceiveCancelApplyAstProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CReceiveCancelApplyAstProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mcid", wireType)
			}
			m.Mcid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mcid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SReplyApplyAstProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SReplyApplyAstProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SReplyApplyAstProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mcid", wireType)
			}
			m.Mcid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mcid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gid", wireType)
			}
			m.Gid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agree", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Agree = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CReplyApplyAstProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CReplyApplyAstProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CReplyApplyAstProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mcid", wireType)
			}
			m.Mcid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mcid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gid", wireType)
			}
			m.Gid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agree", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Agree = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CApplyAstPassProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CApplyAstPassProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CApplyAstPassProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mcid", wireType)
			}
			m.Mcid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mcid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agree", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Agree = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CMingcWarFightPrepareStartProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CMingcWarFightPrepareStartProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CMingcWarFightPrepareStartProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CMingcWarFightStartProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CMingcWarFightStartProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CMingcWarFightStartProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CIsJoiningFightOnLoginProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CIsJoiningFightOnLoginProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CIsJoiningFightOnLoginProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mcid", wireType)
			}
			m.Mcid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mcid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SViewMingcWarMcProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SViewMingcWarMcProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SViewMingcWarMcProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mcid", wireType)
			}
			m.Mcid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mcid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CViewMingcWarMcProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CViewMingcWarMcProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CViewMingcWarMcProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMingcWar
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mc == nil {
				m.Mc = &proto10.McWarMcProto{}
			}
			if err := m.Mc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SJoinFightProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SJoinFightProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SJoinFightProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mcid", wireType)
			}
			m.Mcid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mcid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMingcWar
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CaptainId = append(m.CaptainId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMingcWar
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMingcWar
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMingcWar
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CaptainId = append(m.CaptainId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainId", wireType)
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMingcWar
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.XIndex = append(m.XIndex, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMingcWar
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMingcWar
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMingcWar
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.XIndex = append(m.XIndex, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field XIndex", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CJoinFightProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CJoinFightProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CJoinFightProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mcid", wireType)
			}
			m.Mcid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mcid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Atk", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Atk = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2COtherJoinFightProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2COtherJoinFightProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2COtherJoinFightProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mcid", wireType)
			}
			m.Mcid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mcid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMingcWar
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeroId = append(m.HeroId[:0], dAtA[iNdEx:postIndex]...)
			if m.HeroId == nil {
				m.HeroId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMingcWar
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &proto10.McWarTroopProto{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CQuitFightProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CQuitFightProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CQuitFightProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mcid", wireType)
			}
			m.Mcid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mcid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2COtherQuitFightProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2COtherQuitFightProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2COtherQuitFightProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mcid", wireType)
			}
			m.Mcid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mcid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMingcWar
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeroId = append(m.HeroId[:0], dAtA[iNdEx:postIndex]...)
			if m.HeroId == nil {
				m.HeroId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSceneBuildingDestroyProsperityProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSceneBuildingDestroyProsperityProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSceneBuildingDestroyProsperityProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewProsperity", wireType)
			}
			m.NewProsperity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewProsperity |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosX", wireType)
			}
			m.PosX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosX |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosY", wireType)
			}
			m.PosY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosY |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSceneFightPrepareEndProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSceneFightPrepareEndProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSceneFightPrepareEndProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSceneWarEndProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSceneWarEndProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSceneWarEndProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field McId", wireType)
			}
			m.McId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.McId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SSceneMoveProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SSceneMoveProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SSceneMoveProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestPosX", wireType)
			}
			m.DestPosX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestPosX |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestPosY", wireType)
			}
			m.DestPosY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestPosY |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSceneMoveProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSceneMoveProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSceneMoveProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestPosX", wireType)
			}
			m.DestPosX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestPosX |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestPosY", wireType)
			}
			m.DestPosY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestPosY |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSceneBackProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSceneBackProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSceneBackProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestPosX", wireType)
			}
			m.DestPosX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestPosX |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestPosY", wireType)
			}
			m.DestPosY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestPosY |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SSceneSpeedUpProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SSceneSpeedUpProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SSceneSpeedUpProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMingcWar
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			m.GoodsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Money", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Money = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSceneSpeedUpProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSceneSpeedUpProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSceneSpeedUpProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMingcWar
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSceneOtherMoveProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSceneOtherMoveProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSceneOtherMoveProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMingcWar
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeroId = append(m.HeroId[:0], dAtA[iNdEx:postIndex]...)
			if m.HeroId == nil {
				m.HeroId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartPosX", wireType)
			}
			m.StartPosX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartPosX |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartPosY", wireType)
			}
			m.StartPosY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartPosY |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestPosX", wireType)
			}
			m.DestPosX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestPosX |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestPosY", wireType)
			}
			m.DestPosY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestPosY |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSceneMoveStationProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSceneMoveStationProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSceneMoveStationProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMingcWar
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeroId = append(m.HeroId[:0], dAtA[iNdEx:postIndex]...)
			if m.HeroId == nil {
				m.HeroId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosX", wireType)
			}
			m.PosX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosX |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosY", wireType)
			}
			m.PosY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosY |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSceneBuildingFightProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSceneBuildingFightProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSceneBuildingFightProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMingcWar
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeroId = append(m.HeroId[:0], dAtA[iNdEx:postIndex]...)
			if m.HeroId == nil {
				m.HeroId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gid", wireType)
			}
			m.Gid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Win", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Win = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosX", wireType)
			}
			m.PosX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosX |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosY", wireType)
			}
			m.PosY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosY |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSceneTroopReliveProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSceneTroopReliveProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSceneTroopReliveProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSceneOtherTroopReliveProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSceneOtherTroopReliveProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSceneOtherTroopReliveProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMingcWar
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeroId = append(m.HeroId[:0], dAtA[iNdEx:postIndex]...)
			if m.HeroId == nil {
				m.HeroId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSceneTroopUpdateProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSceneTroopUpdateProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSceneTroopUpdateProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMingcWar
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeroId = append(m.HeroId[:0], dAtA[iNdEx:postIndex]...)
			if m.HeroId == nil {
				m.HeroId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMingcWar
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &proto10.McWarTroopProto{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SViewMcWarSceneProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SViewMcWarSceneProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SViewMcWarSceneProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field McId", wireType)
			}
			m.McId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.McId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CViewMcWarSceneProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CViewMcWarSceneProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CViewMcWarSceneProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scene", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMingcWar
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Scene == nil {
				m.Scene = &proto10.McWarSceneProto{}
			}
			if err := m.Scene.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SWatchProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SWatchProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SWatchProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field McId", wireType)
			}
			m.McId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.McId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SQuitWatchProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SQuitWatchProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SQuitWatchProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field McId", wireType)
			}
			m.McId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.McId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CMcWarEndRecordProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CMcWarEndRecordProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CMcWarEndRecordProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMingcWar
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Record == nil {
				m.Record = &proto10.McWarFightRecordProto{}
			}
			if err := m.Record.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WarId", wireType)
			}
			m.WarId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WarId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SViewMcWarRecordProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SViewMcWarRecordProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SViewMcWarRecordProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WarId", wireType)
			}
			m.WarId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WarId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field McId", wireType)
			}
			m.McId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.McId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CViewMcWarRecordProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CViewMcWarRecordProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CViewMcWarRecordProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMingcWar
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Record == nil {
				m.Record = &proto10.McWarFightRecordProto{}
			}
			if err := m.Record.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WarId", wireType)
			}
			m.WarId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WarId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SViewMcWarTroopRecordProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SViewMcWarTroopRecordProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SViewMcWarTroopRecordProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WarId", wireType)
			}
			m.WarId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WarId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field McId", wireType)
			}
			m.McId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.McId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CViewMcWarTroopRecordProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CViewMcWarTroopRecordProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CViewMcWarTroopRecordProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMingcWar
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Record == nil {
				m.Record = &proto10.McWarTroopAllRecordProto{}
			}
			if err := m.Record.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CViewSceneTroopRecordProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CViewSceneTroopRecordProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CViewSceneTroopRecordProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMingcWar
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Record = append(m.Record, make([]byte, postIndex-iNdEx))
			copy(m.Record[len(m.Record)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CMyRankProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CMyRankProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CMyRankProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMingcWar
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &proto10.McWarTroopRankProto{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SApplyRefreshRankProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SApplyRefreshRankProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SApplyRefreshRankProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CApplyRefreshRankProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CApplyRefreshRankProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CApplyRefreshRankProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMingcWar
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rank == nil {
				m.Rank = &proto10.McWarTroopsRankProto{}
			}
			if err := m.Rank.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SViewMyGuildMemberRankProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SViewMyGuildMemberRankProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SViewMyGuildMemberRankProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WarId", wireType)
			}
			m.WarId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WarId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field McId", wireType)
			}
			m.McId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.McId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CViewMyGuildMemberRankProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CViewMyGuildMemberRankProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CViewMyGuildMemberRankProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMingcWar
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rank == nil {
				m.Rank = &proto10.McWarTroopsInfoProto{}
			}
			if err := m.Rank.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCurMultiKillProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCurMultiKillProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCurMultiKillProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiKill", wireType)
			}
			m.MultiKill = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MultiKill |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSpecialMultiKillProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSpecialMultiKillProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSpecialMultiKillProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMingcWar
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeroId = append(m.HeroId[:0], dAtA[iNdEx:postIndex]...)
			if m.HeroId == nil {
				m.HeroId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiKill", wireType)
			}
			m.MultiKill = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MultiKill |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SSceneChangeModeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SSceneChangeModeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SSceneChangeModeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSceneChangeModeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSceneChangeModeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSceneChangeModeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSceneChangeModeNoticeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSceneChangeModeNoticeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSceneChangeModeNoticeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMingcWar
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeroId = append(m.HeroId[:0], dAtA[iNdEx:postIndex]...)
			if m.HeroId == nil {
				m.HeroId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SSceneTouShiBuildingTurnToProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SSceneTouShiBuildingTurnToProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SSceneTouShiBuildingTurnToProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosX", wireType)
			}
			m.PosX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosX |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosY", wireType)
			}
			m.PosY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosY |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Left", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Left = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSceneTouShiBuildingTurnToProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSceneTouShiBuildingTurnToProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSceneTouShiBuildingTurnToProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosX", wireType)
			}
			m.PosX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosX |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosY", wireType)
			}
			m.PosY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosY |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Left", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Left = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewTargetIndex", wireType)
			}
			m.NewTargetIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewTargetIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TurnEndTime", wireType)
			}
			m.TurnEndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TurnEndTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSceneTouShiBuildingTurnToNoticeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSceneTouShiBuildingTurnToNoticeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSceneTouShiBuildingTurnToNoticeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosX", wireType)
			}
			m.PosX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosX |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosY", wireType)
			}
			m.PosY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosY |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Left", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Left = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewTargetIndex", wireType)
			}
			m.NewTargetIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewTargetIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TurnEndTime", wireType)
			}
			m.TurnEndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TurnEndTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SSceneTouShiBuildingFireProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SSceneTouShiBuildingFireProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SSceneTouShiBuildingFireProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosX", wireType)
			}
			m.PosX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosX |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosY", wireType)
			}
			m.PosY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosY |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSceneTouShiBuildingFireProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSceneTouShiBuildingFireProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSceneTouShiBuildingFireProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosX", wireType)
			}
			m.PosX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosX |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosY", wireType)
			}
			m.PosY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosY |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetIndex", wireType)
			}
			m.TargetIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrepareEndTime", wireType)
			}
			m.PrepareEndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrepareEndTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BombExplodeTime", wireType)
			}
			m.BombExplodeTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BombExplodeTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSceneTouShiBuildingFireNoticeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSceneTouShiBuildingFireNoticeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSceneTouShiBuildingFireNoticeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosX", wireType)
			}
			m.PosX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosX |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosY", wireType)
			}
			m.PosY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosY |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetIndex", wireType)
			}
			m.TargetIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrepareEndTime", wireType)
			}
			m.PrepareEndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrepareEndTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BombExplodeTime", wireType)
			}
			m.BombExplodeTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BombExplodeTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FireHeroName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMingcWar
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FireHeroName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FireHeroCountry", wireType)
			}
			m.FireHeroCountry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FireHeroCountry |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSceneTouShiBombExplodeNoticeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSceneTouShiBombExplodeNoticeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSceneTouShiBombExplodeNoticeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FireTroopId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMingcWar
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FireTroopId = append(m.FireTroopId[:0], dAtA[iNdEx:postIndex]...)
			if m.FireTroopId == nil {
				m.FireTroopId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSceneDrumProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSceneDrumProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSceneDrumProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextDrumTime", wireType)
			}
			m.NextDrumTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextDrumTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrumDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMingcWar
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DrumDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddDrumStat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMingcWar
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AddDrumStat == nil {
				m.AddDrumStat = &proto1.SpriteStatProto{}
			}
			if err := m.AddDrumStat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSceneDrumNoticeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSceneDrumNoticeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSceneDrumNoticeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMingcWar
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeroId = append(m.HeroId[:0], dAtA[iNdEx:postIndex]...)
			if m.HeroId == nil {
				m.HeroId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewDrumTimes", wireType)
			}
			m.NewDrumTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewDrumTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddDrumStat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMingcWar
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AddDrumStat == nil {
				m.AddDrumStat = &proto1.SpriteStatProto{}
			}
			if err := m.AddDrumStat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewDrumStat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMingcWar
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewDrumStat == nil {
				m.NewDrumStat = &proto1.SpriteStatProto{}
			}
			if err := m.NewDrumStat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAtk", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAtk = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSceneDrumAddStatNoticeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSceneDrumAddStatNoticeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSceneDrumAddStatNoticeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Troops", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMingcWar
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Troops = append(m.Troops, make([]byte, postIndex-iNdEx))
			copy(m.Troops[len(m.Troops)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CMingcHostUpdateNoticeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CMingcHostUpdateNoticeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CMingcHostUpdateNoticeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field McId", wireType)
			}
			m.McId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.McId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewHost", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMingcWar
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewHost == nil {
				m.NewHost = &proto8.GuildBasicProto{}
			}
			if err := m.NewHost.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMingcWar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingcWar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMingcWar(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMingcWar
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMingcWar
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMingcWar
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMingcWar
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMingcWar(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMingcWar = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMingcWar   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/gen/pb/mingc_war/mingc_war.proto", fileDescriptorMingcWar)
}

var fileDescriptorMingcWar = []byte{
	// 1832 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0xcd, 0x72, 0xdb, 0xc8,
	0x11, 0x5e, 0x90, 0xa2, 0x7e, 0x5a, 0x92, 0x23, 0xd3, 0x7f, 0x8c, 0x7f, 0x64, 0x1b, 0x2b, 0x67,
	0x55, 0xae, 0xb5, 0x55, 0xe1, 0xda, 0xd9, 0xac, 0xab, 0x36, 0xb5, 0x12, 0x2d, 0xc7, 0xb4, 0x57,
	0x6b, 0x05, 0xd0, 0xae, 0xe2, 0x54, 0x6d, 0xa1, 0x46, 0xc0, 0x88, 0x9c, 0x08, 0xc4, 0x20, 0x83,
	0xa1, 0x29, 0x9e, 0xf3, 0x06, 0x39, 0xe5, 0x90, 0x77, 0xc8, 0x29, 0x6f, 0x90, 0xc3, 0x1e, 0xf3,
	0x08, 0x29, 0xe7, 0x90, 0xd7, 0x48, 0x4d, 0x63, 0x00, 0x0c, 0x29, 0xfe, 0x49, 0x71, 0x2a, 0x7b,
	0x22, 0xd0, 0xe8, 0xfe, 0xfa, 0xeb, 0x9e, 0x9e, 0xee, 0x19, 0xc2, 0xb3, 0x16, 0x93, 0xed, 0xee,
	0xd1, 0x63, 0x9f, 0x77, 0xb6, 0x42, 0xd6, 0x6a, 0xcb, 0x98, 0xf4, 0xb6, 0x3a, 0x24, 0xa4, 0x9f,
	0x6f, 0xb5, 0x68, 0xb4, 0x15, 0x1f, 0x6d, 0x75, 0x58, 0xd4, 0xf2, 0xbd, 0x1e, 0x11, 0xc5, 0xd3,
	0xe3, 0x58, 0x70, 0xc9, 0xab, 0x15, 0xfc, 0xb9, 0xf9, 0x64, 0x3c, 0x44, 0x7c, 0xb4, 0x95, 0xb4,
	0x89, 0xa0, 0x81, 0x87, 0xaa, 0x5b, 0x47, 0x24, 0xa1, 0xa9, 0xf1, 0xcd, 0xa7, 0xb3, 0x5b, 0xb5,
	0xba, 0x2c, 0x0c, 0xb4, 0xd9, 0x17, 0xb3, 0x9b, 0x0d, 0xd1, 0xb5, 0x5d, 0xb8, 0xe9, 0xd6, 0x1b,
	0xdf, 0x31, 0xda, 0xdb, 0xf3, 0x0f, 0x89, 0x70, 0x69, 0x78, 0xfc, 0x6b, 0x85, 0xbc, 0x8f, 0xc1,
	0x3c, 0x05, 0x48, 0x68, 0x78, 0xec, 0xa1, 0xb3, 0x9a, 0x75, 0xcf, 0xda, 0x5c, 0xae, 0x5f, 0x4f,
	0x2d, 0x1f, 0xa3, 0x7e, 0xa1, 0xeb, 0x2c, 0x25, 0x99, 0xad, 0xfd, 0x00, 0x2e, 0x37, 0xea, 0x6e,
	0x0e, 0x9a, 0x62, 0xad, 0x41, 0xf9, 0x1d, 0x15, 0x08, 0x52, 0x71, 0xd4, 0xa3, 0xfd, 0x0a, 0x2e,
	0x9b, 0xbe, 0x53, 0xb5, 0x8f, 0xa1, 0xdc, 0x23, 0xa2, 0x56, 0x42, 0x5f, 0x97, 0x4d, 0x5f, 0xa9,
	0x1b, 0xf5, 0x35, 0xc3, 0x2a, 0x17, 0x58, 0xcf, 0x60, 0xad, 0x51, 0x77, 0xb7, 0xe3, 0x38, 0xec,
	0x6f, 0xcb, 0x93, 0x14, 0xaa, 0x0a, 0x73, 0x1d, 0x9f, 0x05, 0xda, 0x25, 0x3e, 0x2b, 0x99, 0xcf,
	0x13, 0x89, 0xf8, 0x15, 0x07, 0x9f, 0x95, 0xad, 0x5b, 0x6f, 0x5c, 0xcc, 0xf6, 0x21, 0x5c, 0x35,
	0x6c, 0xdd, 0xae, 0xef, 0x8f, 0xb5, 0xb7, 0x7f, 0x35, 0xa0, 0xfb, 0x82, 0xb0, 0xf0, 0x7c, 0xbe,
	0x7e, 0x69, 0xc4, 0x98, 0xc8, 0xf1, 0xb6, 0x6b, 0x50, 0x26, 0xf2, 0x04, 0x4d, 0x17, 0x1d, 0xf5,
	0xa8, 0x2c, 0x73, 0xcf, 0xe7, 0xb3, 0x7c, 0x04, 0x37, 0xdc, 0x7a, 0xc3, 0xa1, 0x3e, 0x65, 0xef,
	0xe8, 0x54, 0x00, 0xfb, 0x53, 0xb8, 0xde, 0xa8, 0xbb, 0x0d, 0x12, 0xf9, 0x34, 0x9c, 0x49, 0xdb,
	0xad, 0x37, 0x66, 0xd5, 0xfe, 0x0c, 0xee, 0x14, 0x54, 0x66, 0x35, 0x72, 0xe1, 0x5a, 0xa3, 0xee,
	0x3a, 0x54, 0xe9, 0xcd, 0x12, 0x7e, 0x8b, 0x05, 0x3a, 0xe7, 0xea, 0xb1, 0x7a, 0x15, 0x2a, 0xa4,
	0x25, 0x28, 0xc5, 0x52, 0x5b, 0x74, 0xd2, 0x17, 0x05, 0x8a, 0x4c, 0x3e, 0x28, 0xe8, 0x57, 0x46,
	0x75, 0x24, 0x72, 0x9f, 0x24, 0xc9, 0x78, 0xcc, 0xd1, 0x08, 0xdf, 0xc3, 0x7d, 0xb7, 0xde, 0xd8,
	0x53, 0x3b, 0xfc, 0x90, 0x88, 0x17, 0xaa, 0x11, 0xec, 0x0b, 0x1a, 0x13, 0x41, 0x5d, 0x49, 0x84,
	0xa6, 0x78, 0x07, 0x20, 0x51, 0x6f, 0x9e, 0x64, 0x1d, 0xaa, 0x41, 0x97, 0x50, 0x72, 0xc0, 0x3a,
	0xb4, 0xfa, 0x53, 0x58, 0xa4, 0x51, 0x90, 0x7e, 0x4c, 0x29, 0x2f, 0xd0, 0x28, 0x50, 0x9f, 0xec,
	0xef, 0xb0, 0x55, 0x0c, 0xc0, 0x7f, 0x10, 0xdc, 0x74, 0x5d, 0x9b, 0xc9, 0x2b, 0xce, 0x22, 0x16,
	0xb5, 0x10, 0xf8, 0x4d, 0xf4, 0x35, 0x6f, 0xb1, 0x68, 0x5a, 0xa1, 0x61, 0xef, 0xd0, 0x84, 0xf6,
	0x26, 0xec, 0xbc, 0x2f, 0xb1, 0xd0, 0x46, 0x69, 0x7f, 0x0c, 0xa5, 0x8e, 0xaf, 0x3b, 0xdb, 0x15,
	0xb3, 0xdb, 0x68, 0x05, 0xa7, 0xd4, 0xf1, 0xed, 0x16, 0xf6, 0x33, 0xc5, 0x4f, 0x27, 0x75, 0xdc,
	0xba, 0xdc, 0x07, 0xf0, 0x49, 0x2c, 0x09, 0x8b, 0x3c, 0x16, 0xd4, 0xca, 0xf7, 0xca, 0x9b, 0x95,
	0x9d, 0xd2, 0xda, 0x47, 0xce, 0x92, 0x96, 0x36, 0x83, 0xea, 0x2d, 0x58, 0x38, 0xf5, 0x58, 0x14,
	0xd0, 0xd3, 0xda, 0x5c, 0xfe, 0x7d, 0xfe, 0xb4, 0xa9, 0x24, 0xf6, 0x17, 0xd8, 0x11, 0x67, 0x70,
	0x74, 0x76, 0xa3, 0xfe, 0x01, 0x43, 0x7c, 0x23, 0xdb, 0x54, 0xcc, 0x60, 0x7f, 0x03, 0x16, 0xda,
	0x54, 0x70, 0x4f, 0x17, 0xe6, 0x8a, 0x33, 0xaf, 0x5e, 0x9b, 0x41, 0xf5, 0x21, 0xcc, 0x05, 0x44,
	0x12, 0x2c, 0xac, 0xa1, 0x5e, 0x7f, 0x20, 0x38, 0x8f, 0xd3, 0xa4, 0xa0, 0x8e, 0xfd, 0x09, 0xb2,
	0xfd, 0x4d, 0x97, 0xc9, 0xc9, 0xde, 0xec, 0xdd, 0x82, 0xdb, 0x74, 0xed, 0xb1, 0xdc, 0xec, 0x3e,
	0xfc, 0xcc, 0xad, 0x37, 0x5c, 0x9f, 0x46, 0x74, 0x47, 0xcd, 0x19, 0x16, 0xb5, 0x9e, 0xd3, 0x44,
	0x0a, 0xde, 0xdf, 0x17, 0x3c, 0x89, 0xa9, 0x60, 0xb2, 0x9f, 0xc2, 0x3e, 0x80, 0x4b, 0x11, 0xed,
	0xa9, 0x91, 0xa7, 0xc5, 0x7a, 0x54, 0xac, 0x46, 0xb4, 0x57, 0xe8, 0x56, 0xaf, 0x40, 0x25, 0xe6,
	0x89, 0xa7, 0x56, 0x02, 0xdd, 0xc7, 0x3c, 0xf9, 0x6d, 0x26, 0xec, 0xd7, 0x2a, 0xb9, 0xf0, 0xad,
	0xfd, 0x25, 0xdc, 0xce, 0x5c, 0x9b, 0xfb, 0x6a, 0x37, 0x0a, 0x66, 0xa9, 0x7e, 0xfb, 0x21, 0x5c,
	0xc9, 0xcc, 0x0f, 0x89, 0xc8, 0xad, 0xae, 0x40, 0xa5, 0xe3, 0x7b, 0x66, 0xf8, 0xcd, 0xc0, 0x7e,
	0x83, 0xc5, 0x86, 0xba, 0x7b, 0xfc, 0x1d, 0x4d, 0x35, 0x6f, 0x03, 0x04, 0x34, 0x91, 0x9e, 0x49,
	0x77, 0x51, 0x49, 0xf6, 0x15, 0x65, 0xf3, 0x6b, 0xc6, 0x3b, 0xfb, 0xfa, 0xd6, 0xfe, 0x3d, 0x2e,
	0xd3, 0x10, 0xe0, 0xf8, 0xfd, 0x38, 0xe4, 0xab, 0x3c, 0xd1, 0xd7, 0xdc, 0x78, 0x5f, 0x3b, 0xc4,
	0x3f, 0x19, 0x45, 0xde, 0x9a, 0x08, 0x58, 0x1a, 0x04, 0x1c, 0xe0, 0x59, 0x1e, 0xec, 0x1b, 0x87,
	0x70, 0x35, 0x4b, 0x94, 0x1b, 0x53, 0x1a, 0x7c, 0x9b, 0x16, 0x67, 0xf5, 0x12, 0x94, 0x74, 0x4a,
	0x57, 0x9c, 0x12, 0x0b, 0x14, 0x44, 0x8b, 0xf3, 0x20, 0xf1, 0xf2, 0x2e, 0xbc, 0x80, 0xef, 0x4d,
	0xec, 0xa3, 0x1d, 0x1e, 0xd1, 0x7e, 0xd6, 0x47, 0xf1, 0xc5, 0xde, 0xc6, 0x4e, 0x3c, 0x13, 0xf0,
	0xb8, 0x9e, 0xf6, 0x83, 0x85, 0x25, 0x8f, 0x18, 0x58, 0xf7, 0x45, 0xe6, 0x8d, 0xf2, 0xb6, 0x06,
	0xb6, 0xde, 0x3a, 0x2c, 0xa7, 0x35, 0x94, 0xe6, 0xa9, 0x64, 0x14, 0x11, 0x26, 0x6a, 0xe0, 0x7b,
	0x56, 0xd1, 0xf9, 0xf7, 0xb7, 0xff, 0x4d, 0x8d, 0x0c, 0x84, 0x32, 0x3f, 0x18, 0xca, 0xf7, 0x50,
	0x33, 0xcb, 0xc7, 0x95, 0x44, 0x32, 0x1e, 0x4d, 0x89, 0x25, 0xdf, 0x59, 0xa5, 0x51, 0x3b, 0xab,
	0x6c, 0xec, 0xac, 0x3f, 0x5a, 0x38, 0x56, 0x06, 0x76, 0xb5, 0xd1, 0x20, 0xc6, 0x7a, 0x38, 0x3b,
	0x56, 0xd7, 0xa0, 0xdc, 0x63, 0x91, 0x5e, 0x4a, 0xf5, 0x78, 0x8e, 0xfd, 0xfd, 0xb4, 0x08, 0x12,
	0xdb, 0x9c, 0x43, 0x43, 0x36, 0x7d, 0xab, 0xd8, 0x2e, 0x8e, 0xae, 0x62, 0x95, 0xcf, 0xd8, 0x8e,
	0xa5, 0x3f, 0x01, 0xd4, 0x1b, 0xe2, 0xf2, 0x6d, 0x1c, 0x10, 0x39, 0x0d, 0x2f, 0xeb, 0xdb, 0xa5,
	0x19, 0xfa, 0xf6, 0xa3, 0x62, 0x76, 0xe2, 0x99, 0x5f, 0x79, 0x9a, 0xd0, 0x90, 0x5e, 0x14, 0xc3,
	0x73, 0x48, 0xfd, 0x53, 0xa8, 0x24, 0xea, 0x6d, 0xd4, 0xcd, 0xa0, 0x50, 0x73, 0x52, 0x25, 0x7b,
	0x03, 0x56, 0x1b, 0x75, 0xf7, 0x90, 0x48, 0xbf, 0x3d, 0xc1, 0xdb, 0x26, 0xb6, 0x3f, 0x35, 0x26,
	0xa6, 0x69, 0x52, 0xe4, 0x85, 0xce, 0x76, 0xa3, 0xc0, 0xa1, 0x3e, 0x17, 0xba, 0xaf, 0x3e, 0x81,
	0x79, 0x81, 0xaf, 0x9a, 0xd8, 0x6d, 0x93, 0x18, 0x16, 0x97, 0xa1, 0xed, 0x68, 0xdd, 0xea, 0x35,
	0x98, 0xef, 0x11, 0x51, 0x74, 0x89, 0x4a, 0x8f, 0x88, 0xa6, 0x1a, 0x5e, 0x37, 0xcc, 0x6c, 0x99,
	0x7e, 0x0a, 0x0b, 0xcb, 0xb0, 0x28, 0xd8, 0x96, 0x0c, 0xb6, 0xc7, 0x78, 0x90, 0x1e, 0x09, 0xf3,
	0x41, 0xe9, 0xbe, 0x82, 0xdb, 0x26, 0x5d, 0x5d, 0x91, 0x17, 0xe3, 0x7c, 0x88, 0x53, 0x6f, 0x3c,
	0xd6, 0xe7, 0x43, 0xc4, 0xef, 0x9e, 0x29, 0xbb, 0xed, 0x30, 0x1c, 0xc1, 0xdd, 0xfe, 0x45, 0x0e,
	0x6c, 0x6e, 0xb9, 0x02, 0xf8, 0x7a, 0x0e, 0x5c, 0xba, 0x57, 0x56, 0x55, 0xae, 0xed, 0xbe, 0x82,
	0x4b, 0x6a, 0xc9, 0xfb, 0x0e, 0x89, 0xf4, 0x6c, 0x79, 0x0c, 0x73, 0x2c, 0x3a, 0xe6, 0x9a, 0xc0,
	0xcd, 0x33, 0x04, 0x72, 0x4d, 0x07, 0xf5, 0xec, 0x27, 0x50, 0xcb, 0xee, 0x50, 0x0e, 0x3d, 0x16,
	0x34, 0x69, 0x17, 0x58, 0x35, 0x58, 0x78, 0x47, 0x45, 0xc2, 0x78, 0xa4, 0x73, 0x93, 0xbd, 0xda,
	0x14, 0xb7, 0xe4, 0x54, 0xab, 0xd2, 0x80, 0x55, 0x75, 0x0b, 0xe6, 0x04, 0x89, 0x4e, 0xf4, 0x59,
	0xea, 0xd6, 0x19, 0x6e, 0x89, 0x41, 0x4e, 0x29, 0xda, 0xaf, 0xe1, 0x4e, 0xb6, 0x76, 0x7d, 0xbc,
	0x49, 0xef, 0xd1, 0xce, 0x11, 0x15, 0x85, 0xaf, 0xf3, 0x2c, 0xde, 0x3e, 0xf6, 0xa6, 0x09, 0x60,
	0x19, 0x3d, 0x6b, 0x1c, 0xbd, 0x66, 0x74, 0xcc, 0x4d, 0x7a, 0x4f, 0x71, 0x2e, 0x36, 0xba, 0x62,
	0xaf, 0x1b, 0x4a, 0xf6, 0x9a, 0x85, 0x61, 0x7e, 0xf8, 0xe9, 0x28, 0x89, 0x77, 0xc2, 0xc2, 0x30,
	0x3b, 0xfc, 0x74, 0x32, 0x1d, 0xdb, 0x49, 0xfb, 0x59, 0x4c, 0x7d, 0x46, 0xc2, 0x21, 0xd3, 0xb1,
	0xfd, 0x6c, 0x10, 0xb3, 0x34, 0x8c, 0xf9, 0x08, 0x37, 0x25, 0x16, 0x4f, 0xa3, 0x4d, 0xa2, 0x16,
	0xdd, 0xe3, 0x01, 0x2d, 0x8e, 0x94, 0x3c, 0xa0, 0x79, 0xab, 0xe0, 0x01, 0xd5, 0xb7, 0xd8, 0x99,
	0xd5, 0xbf, 0x2e, 0xda, 0x7a, 0xa1, 0xfe, 0x0d, 0x97, 0xcc, 0x9f, 0xd6, 0x86, 0x33, 0xb4, 0x92,
	0x81, 0x46, 0xe0, 0x7e, 0xc6, 0xf5, 0x80, 0x77, 0xdd, 0x36, 0xcb, 0xc6, 0xdc, 0x41, 0x57, 0x44,
	0x07, 0x3c, 0xef, 0x70, 0xe6, 0xf1, 0x68, 0x68, 0x54, 0x15, 0x53, 0xf4, 0xad, 0x72, 0x11, 0xd2,
	0x63, 0xa9, 0xe7, 0x1c, 0x3e, 0xdb, 0x7f, 0xb5, 0xf0, 0xea, 0xf7, 0xbf, 0xf4, 0x51, 0xdd, 0x84,
	0x35, 0x75, 0xa6, 0x96, 0x44, 0xb4, 0xa8, 0xcc, 0x6f, 0x30, 0xca, 0x46, 0x9d, 0xb5, 0x0f, 0x50,
	0x8c, 0xb7, 0x98, 0xaa, 0x0d, 0xab, 0xb2, 0x2b, 0x22, 0x2f, 0x1f, 0x70, 0xe9, 0xa4, 0x5d, 0x56,
	0xc2, 0x5d, 0x3d, 0xe4, 0xfe, 0x66, 0xc1, 0x27, 0x93, 0x18, 0x9b, 0xd9, 0xfe, 0x31, 0xf1, 0x7e,
	0x0d, 0x77, 0x47, 0x2f, 0xe6, 0x0b, 0x26, 0xce, 0x4b, 0xd7, 0xfe, 0xbb, 0x05, 0x77, 0x47, 0x27,
	0xe1, 0x02, 0x68, 0xd5, 0xfb, 0xb0, 0x32, 0x10, 0x64, 0x59, 0xb3, 0x37, 0x22, 0xdc, 0x84, 0xb5,
	0x38, 0xbd, 0xb9, 0x14, 0x41, 0xea, 0x5c, 0xc4, 0xf9, 0x8d, 0x06, 0x2f, 0x01, 0x0f, 0xe1, 0xf2,
	0x11, 0xef, 0x1c, 0x79, 0xf4, 0x34, 0x0e, 0x79, 0x40, 0xcd, 0x7c, 0xfc, 0x44, 0x7d, 0xd8, 0x4d,
	0xe5, 0x98, 0x93, 0xbf, 0x94, 0xe0, 0xc1, 0xf8, 0x30, 0x2e, 0xb6, 0x92, 0xff, 0xaf, 0x60, 0xaa,
	0x1b, 0x70, 0xe9, 0x98, 0x09, 0xea, 0xe1, 0xfe, 0x8e, 0x88, 0x3e, 0x0f, 0x2f, 0x39, 0x2b, 0x4a,
	0xfa, 0x92, 0x0a, 0xfe, 0x0d, 0x49, 0x11, 0x0b, 0x2d, 0x9f, 0x77, 0x23, 0x29, 0xfa, 0xb5, 0x85,
	0x14, 0x31, 0x53, 0x6c, 0xa4, 0x62, 0xfb, 0x15, 0x6c, 0x0c, 0x65, 0xa7, 0x70, 0x69, 0x26, 0xc7,
	0x86, 0x55, 0xc4, 0x94, 0xaa, 0xf9, 0x16, 0xad, 0x65, 0x59, 0x09, 0xb1, 0x21, 0x37, 0x03, 0xfb,
	0x4f, 0x56, 0x71, 0xc1, 0x7a, 0x2e, 0xba, 0x9d, 0xd4, 0x72, 0x43, 0x5d, 0x77, 0x4f, 0xa5, 0x17,
	0x88, 0x6e, 0xc7, 0x3c, 0x52, 0xae, 0x28, 0xa9, 0x52, 0xc3, 0xc8, 0x6e, 0xc1, 0x12, 0x2a, 0x04,
	0x34, 0xf1, 0x31, 0x9f, 0x4b, 0xce, 0xa2, 0x12, 0x3c, 0xa7, 0x89, 0x5f, 0x7d, 0x06, 0xab, 0x24,
	0x08, 0x52, 0x84, 0x44, 0x12, 0x89, 0x99, 0x2c, 0x8e, 0x74, 0x6e, 0x2c, 0x98, 0xc4, 0xb3, 0x7f,
	0x3a, 0x10, 0x96, 0x49, 0x10, 0x28, 0x60, 0x25, 0xb1, 0xff, 0x6d, 0x15, 0xed, 0x55, 0x09, 0x67,
	0xea, 0x94, 0x1b, 0xe9, 0x15, 0x3d, 0xa7, 0x9c, 0x14, 0x9c, 0x7b, 0x19, 0xe5, 0xe4, 0x2c, 0xad,
	0xf2, 0xcc, 0xb4, 0x94, 0x6d, 0xee, 0x61, 0x96, 0x90, 0xb4, 0x63, 0xb4, 0xbd, 0x06, 0xf3, 0x2c,
	0xf1, 0x88, 0x3c, 0xc1, 0x32, 0x59, 0x74, 0x2a, 0x2c, 0xd9, 0xc6, 0xff, 0x51, 0xd7, 0xcd, 0x40,
	0xb7, 0x83, 0x40, 0x69, 0x9b, 0xf1, 0x5e, 0x87, 0x79, 0x5c, 0xbf, 0x24, 0x3b, 0xb9, 0xa4, 0x6f,
	0x76, 0x0b, 0x47, 0x0a, 0xfe, 0xfb, 0xf4, 0x92, 0x27, 0x32, 0x3d, 0xd3, 0x0f, 0x6d, 0x8d, 0x33,
	0x47, 0xdc, 0xea, 0xcf, 0x61, 0x51, 0x85, 0xd0, 0xce, 0xfe, 0x09, 0x2e, 0xd8, 0xe3, 0x44, 0xdf,
	0x21, 0x09, 0xd3, 0x7f, 0x53, 0x2d, 0x44, 0xb4, 0xa7, 0x80, 0x77, 0xee, 0xfc, 0xf0, 0x7e, 0xdd,
	0xfa, 0xc7, 0xfb, 0x75, 0xeb, 0x9f, 0xef, 0xd7, 0xad, 0x3f, 0xff, 0x6b, 0xfd, 0xa3, 0x97, 0xd6,
	0xef, 0x96, 0xf2, 0x7f, 0xfd, 0x8f, 0xe6, 0xd1, 0xfc, 0xb3, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff,
	0xf2, 0x7e, 0x0a, 0xf4, 0xe3, 0x18, 0x00, 0x00,
}
