// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/gen/pb/task/task.proto
// DO NOT EDIT!

/*
	Package task is a generated protocol buffer package.

	It is generated from these files:
		github.com/lightpaw/male7/gen/pb/task/task.proto

	It has these top-level messages:
		S2CUpdateTaskProgressProto
		C2SCollectTaskPrizeProto
		S2CCollectTaskPrizeProto
		S2CNewTaskProto
		C2SCollectTaskBoxPrizeProto
		S2CCollectTaskBoxPrizeProto
		S2CCollectBaYeStagePrizeProto
		C2SCollectActiveDegreePrizeProto
		S2CCollectActiveDegreePrizeProto
		C2SCollectAchieveStarPrizeProto
		S2CCollectAchieveStarPrizeProto
		S2CAchieveReachProto
		C2SChangeSelectShowAchieveProto
		S2CChangeSelectShowAchieveProto
		S2CRemoveTaskProto
		C2SCollectBwzlPrizeProto
		S2CCollectBwzlPrizeProto
		C2SViewOtherAchieveTaskListProto
		S2CViewOtherAchieveTaskListProto
		C2SGetTroopTitleFightAmountProto
		S2CGetTroopTitleFightAmountProto
		S2CUpgradeTitleProto
		C2SCompleteBoolTaskProto
		S2CCompleteBoolTaskProto
*/
package task

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import proto2 "github.com/lightpaw/male7/pb/shared_proto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type S2CUpdateTaskProgressProto struct {
	Id       int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Progress int32 `protobuf:"varint,2,opt,name=progress,proto3" json:"progress,omitempty"`
	Complete bool  `protobuf:"varint,3,opt,name=complete,proto3" json:"complete,omitempty"`
}

func (m *S2CUpdateTaskProgressProto) Reset()                    { *m = S2CUpdateTaskProgressProto{} }
func (m *S2CUpdateTaskProgressProto) String() string            { return proto.CompactTextString(m) }
func (*S2CUpdateTaskProgressProto) ProtoMessage()               {}
func (*S2CUpdateTaskProgressProto) Descriptor() ([]byte, []int) { return fileDescriptorTask, []int{0} }

func (m *S2CUpdateTaskProgressProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *S2CUpdateTaskProgressProto) GetProgress() int32 {
	if m != nil {
		return m.Progress
	}
	return 0
}

func (m *S2CUpdateTaskProgressProto) GetComplete() bool {
	if m != nil {
		return m.Complete
	}
	return false
}

type C2SCollectTaskPrizeProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SCollectTaskPrizeProto) Reset()                    { *m = C2SCollectTaskPrizeProto{} }
func (m *C2SCollectTaskPrizeProto) String() string            { return proto.CompactTextString(m) }
func (*C2SCollectTaskPrizeProto) ProtoMessage()               {}
func (*C2SCollectTaskPrizeProto) Descriptor() ([]byte, []int) { return fileDescriptorTask, []int{1} }

func (m *C2SCollectTaskPrizeProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type S2CCollectTaskPrizeProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *S2CCollectTaskPrizeProto) Reset()                    { *m = S2CCollectTaskPrizeProto{} }
func (m *S2CCollectTaskPrizeProto) String() string            { return proto.CompactTextString(m) }
func (*S2CCollectTaskPrizeProto) ProtoMessage()               {}
func (*S2CCollectTaskPrizeProto) Descriptor() ([]byte, []int) { return fileDescriptorTask, []int{2} }

func (m *S2CCollectTaskPrizeProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type S2CNewTaskProto struct {
	Id       int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Progress int32 `protobuf:"varint,3,opt,name=progress,proto3" json:"progress,omitempty"`
	Complete bool  `protobuf:"varint,4,opt,name=complete,proto3" json:"complete,omitempty"`
	Main     bool  `protobuf:"varint,2,opt,name=main,proto3" json:"main,omitempty"`
}

func (m *S2CNewTaskProto) Reset()                    { *m = S2CNewTaskProto{} }
func (m *S2CNewTaskProto) String() string            { return proto.CompactTextString(m) }
func (*S2CNewTaskProto) ProtoMessage()               {}
func (*S2CNewTaskProto) Descriptor() ([]byte, []int) { return fileDescriptorTask, []int{3} }

func (m *S2CNewTaskProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *S2CNewTaskProto) GetProgress() int32 {
	if m != nil {
		return m.Progress
	}
	return 0
}

func (m *S2CNewTaskProto) GetComplete() bool {
	if m != nil {
		return m.Complete
	}
	return false
}

func (m *S2CNewTaskProto) GetMain() bool {
	if m != nil {
		return m.Main
	}
	return false
}

type C2SCollectTaskBoxPrizeProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SCollectTaskBoxPrizeProto) Reset()                    { *m = C2SCollectTaskBoxPrizeProto{} }
func (m *C2SCollectTaskBoxPrizeProto) String() string            { return proto.CompactTextString(m) }
func (*C2SCollectTaskBoxPrizeProto) ProtoMessage()               {}
func (*C2SCollectTaskBoxPrizeProto) Descriptor() ([]byte, []int) { return fileDescriptorTask, []int{4} }

func (m *C2SCollectTaskBoxPrizeProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type S2CCollectTaskBoxPrizeProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *S2CCollectTaskBoxPrizeProto) Reset()                    { *m = S2CCollectTaskBoxPrizeProto{} }
func (m *S2CCollectTaskBoxPrizeProto) String() string            { return proto.CompactTextString(m) }
func (*S2CCollectTaskBoxPrizeProto) ProtoMessage()               {}
func (*S2CCollectTaskBoxPrizeProto) Descriptor() ([]byte, []int) { return fileDescriptorTask, []int{5} }

func (m *S2CCollectTaskBoxPrizeProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type S2CCollectBaYeStagePrizeProto struct {
	Stage []byte `protobuf:"bytes,1,opt,name=stage,proto3" json:"stage,omitempty"`
}

func (m *S2CCollectBaYeStagePrizeProto) Reset()         { *m = S2CCollectBaYeStagePrizeProto{} }
func (m *S2CCollectBaYeStagePrizeProto) String() string { return proto.CompactTextString(m) }
func (*S2CCollectBaYeStagePrizeProto) ProtoMessage()    {}
func (*S2CCollectBaYeStagePrizeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorTask, []int{6}
}

func (m *S2CCollectBaYeStagePrizeProto) GetStage() []byte {
	if m != nil {
		return m.Stage
	}
	return nil
}

type C2SCollectActiveDegreePrizeProto struct {
	CollectIndex int32 `protobuf:"varint,1,opt,name=collect_index,json=collectIndex,proto3" json:"collect_index,omitempty"`
}

func (m *C2SCollectActiveDegreePrizeProto) Reset()         { *m = C2SCollectActiveDegreePrizeProto{} }
func (m *C2SCollectActiveDegreePrizeProto) String() string { return proto.CompactTextString(m) }
func (*C2SCollectActiveDegreePrizeProto) ProtoMessage()    {}
func (*C2SCollectActiveDegreePrizeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorTask, []int{7}
}

func (m *C2SCollectActiveDegreePrizeProto) GetCollectIndex() int32 {
	if m != nil {
		return m.CollectIndex
	}
	return 0
}

type S2CCollectActiveDegreePrizeProto struct {
	CollectIndex int32 `protobuf:"varint,2,opt,name=collect_index,json=collectIndex,proto3" json:"collect_index,omitempty"`
}

func (m *S2CCollectActiveDegreePrizeProto) Reset()         { *m = S2CCollectActiveDegreePrizeProto{} }
func (m *S2CCollectActiveDegreePrizeProto) String() string { return proto.CompactTextString(m) }
func (*S2CCollectActiveDegreePrizeProto) ProtoMessage()    {}
func (*S2CCollectActiveDegreePrizeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorTask, []int{8}
}

func (m *S2CCollectActiveDegreePrizeProto) GetCollectIndex() int32 {
	if m != nil {
		return m.CollectIndex
	}
	return 0
}

type C2SCollectAchieveStarPrizeProto struct {
	StarCount int32 `protobuf:"varint,1,opt,name=star_count,json=starCount,proto3" json:"star_count,omitempty"`
}

func (m *C2SCollectAchieveStarPrizeProto) Reset()         { *m = C2SCollectAchieveStarPrizeProto{} }
func (m *C2SCollectAchieveStarPrizeProto) String() string { return proto.CompactTextString(m) }
func (*C2SCollectAchieveStarPrizeProto) ProtoMessage()    {}
func (*C2SCollectAchieveStarPrizeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorTask, []int{9}
}

func (m *C2SCollectAchieveStarPrizeProto) GetStarCount() int32 {
	if m != nil {
		return m.StarCount
	}
	return 0
}

type S2CCollectAchieveStarPrizeProto struct {
	StarCount int32 `protobuf:"varint,1,opt,name=star_count,json=starCount,proto3" json:"star_count,omitempty"`
}

func (m *S2CCollectAchieveStarPrizeProto) Reset()         { *m = S2CCollectAchieveStarPrizeProto{} }
func (m *S2CCollectAchieveStarPrizeProto) String() string { return proto.CompactTextString(m) }
func (*S2CCollectAchieveStarPrizeProto) ProtoMessage()    {}
func (*S2CCollectAchieveStarPrizeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorTask, []int{10}
}

func (m *S2CCollectAchieveStarPrizeProto) GetStarCount() int32 {
	if m != nil {
		return m.StarCount
	}
	return 0
}

type S2CAchieveReachProto struct {
	Id        int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ReachTime int32 `protobuf:"varint,2,opt,name=reach_time,json=reachTime,proto3" json:"reach_time,omitempty"`
}

func (m *S2CAchieveReachProto) Reset()                    { *m = S2CAchieveReachProto{} }
func (m *S2CAchieveReachProto) String() string            { return proto.CompactTextString(m) }
func (*S2CAchieveReachProto) ProtoMessage()               {}
func (*S2CAchieveReachProto) Descriptor() ([]byte, []int) { return fileDescriptorTask, []int{11} }

func (m *S2CAchieveReachProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *S2CAchieveReachProto) GetReachTime() int32 {
	if m != nil {
		return m.ReachTime
	}
	return 0
}

type C2SChangeSelectShowAchieveProto struct {
	AchieveType int32 `protobuf:"varint,1,opt,name=achieve_type,json=achieveType,proto3" json:"achieve_type,omitempty"`
	AddOrRemove bool  `protobuf:"varint,2,opt,name=add_or_remove,json=addOrRemove,proto3" json:"add_or_remove,omitempty"`
}

func (m *C2SChangeSelectShowAchieveProto) Reset()         { *m = C2SChangeSelectShowAchieveProto{} }
func (m *C2SChangeSelectShowAchieveProto) String() string { return proto.CompactTextString(m) }
func (*C2SChangeSelectShowAchieveProto) ProtoMessage()    {}
func (*C2SChangeSelectShowAchieveProto) Descriptor() ([]byte, []int) {
	return fileDescriptorTask, []int{12}
}

func (m *C2SChangeSelectShowAchieveProto) GetAchieveType() int32 {
	if m != nil {
		return m.AchieveType
	}
	return 0
}

func (m *C2SChangeSelectShowAchieveProto) GetAddOrRemove() bool {
	if m != nil {
		return m.AddOrRemove
	}
	return false
}

type S2CChangeSelectShowAchieveProto struct {
	AchieveType int32 `protobuf:"varint,1,opt,name=achieve_type,json=achieveType,proto3" json:"achieve_type,omitempty"`
	AddOrRemove bool  `protobuf:"varint,2,opt,name=add_or_remove,json=addOrRemove,proto3" json:"add_or_remove,omitempty"`
}

func (m *S2CChangeSelectShowAchieveProto) Reset()         { *m = S2CChangeSelectShowAchieveProto{} }
func (m *S2CChangeSelectShowAchieveProto) String() string { return proto.CompactTextString(m) }
func (*S2CChangeSelectShowAchieveProto) ProtoMessage()    {}
func (*S2CChangeSelectShowAchieveProto) Descriptor() ([]byte, []int) {
	return fileDescriptorTask, []int{13}
}

func (m *S2CChangeSelectShowAchieveProto) GetAchieveType() int32 {
	if m != nil {
		return m.AchieveType
	}
	return 0
}

func (m *S2CChangeSelectShowAchieveProto) GetAddOrRemove() bool {
	if m != nil {
		return m.AddOrRemove
	}
	return false
}

type S2CRemoveTaskProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *S2CRemoveTaskProto) Reset()                    { *m = S2CRemoveTaskProto{} }
func (m *S2CRemoveTaskProto) String() string            { return proto.CompactTextString(m) }
func (*S2CRemoveTaskProto) ProtoMessage()               {}
func (*S2CRemoveTaskProto) Descriptor() ([]byte, []int) { return fileDescriptorTask, []int{14} }

func (m *S2CRemoveTaskProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type C2SCollectBwzlPrizeProto struct {
	CompleteCount int32 `protobuf:"varint,1,opt,name=complete_count,json=completeCount,proto3" json:"complete_count,omitempty"`
}

func (m *C2SCollectBwzlPrizeProto) Reset()                    { *m = C2SCollectBwzlPrizeProto{} }
func (m *C2SCollectBwzlPrizeProto) String() string            { return proto.CompactTextString(m) }
func (*C2SCollectBwzlPrizeProto) ProtoMessage()               {}
func (*C2SCollectBwzlPrizeProto) Descriptor() ([]byte, []int) { return fileDescriptorTask, []int{15} }

func (m *C2SCollectBwzlPrizeProto) GetCompleteCount() int32 {
	if m != nil {
		return m.CompleteCount
	}
	return 0
}

type S2CCollectBwzlPrizeProto struct {
	CompleteCount int32 `protobuf:"varint,1,opt,name=complete_count,json=completeCount,proto3" json:"complete_count,omitempty"`
}

func (m *S2CCollectBwzlPrizeProto) Reset()                    { *m = S2CCollectBwzlPrizeProto{} }
func (m *S2CCollectBwzlPrizeProto) String() string            { return proto.CompactTextString(m) }
func (*S2CCollectBwzlPrizeProto) ProtoMessage()               {}
func (*S2CCollectBwzlPrizeProto) Descriptor() ([]byte, []int) { return fileDescriptorTask, []int{16} }

func (m *S2CCollectBwzlPrizeProto) GetCompleteCount() int32 {
	if m != nil {
		return m.CompleteCount
	}
	return 0
}

type C2SViewOtherAchieveTaskListProto struct {
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SViewOtherAchieveTaskListProto) Reset()         { *m = C2SViewOtherAchieveTaskListProto{} }
func (m *C2SViewOtherAchieveTaskListProto) String() string { return proto.CompactTextString(m) }
func (*C2SViewOtherAchieveTaskListProto) ProtoMessage()    {}
func (*C2SViewOtherAchieveTaskListProto) Descriptor() ([]byte, []int) {
	return fileDescriptorTask, []int{17}
}

func (m *C2SViewOtherAchieveTaskListProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type S2CViewOtherAchieveTaskListProto struct {
	Id   []byte                            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	List *proto2.OtherAchieveTaskListProto `protobuf:"bytes,2,opt,name=list" json:"list,omitempty"`
}

func (m *S2CViewOtherAchieveTaskListProto) Reset()         { *m = S2CViewOtherAchieveTaskListProto{} }
func (m *S2CViewOtherAchieveTaskListProto) String() string { return proto.CompactTextString(m) }
func (*S2CViewOtherAchieveTaskListProto) ProtoMessage()    {}
func (*S2CViewOtherAchieveTaskListProto) Descriptor() ([]byte, []int) {
	return fileDescriptorTask, []int{18}
}

func (m *S2CViewOtherAchieveTaskListProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *S2CViewOtherAchieveTaskListProto) GetList() *proto2.OtherAchieveTaskListProto {
	if m != nil {
		return m.List
	}
	return nil
}

type C2SGetTroopTitleFightAmountProto struct {
	TroopIndex int32 `protobuf:"varint,1,opt,name=troop_index,json=troopIndex,proto3" json:"troop_index,omitempty"`
	TitleId    int32 `protobuf:"varint,2,opt,name=title_id,json=titleId,proto3" json:"title_id,omitempty"`
}

func (m *C2SGetTroopTitleFightAmountProto) Reset()         { *m = C2SGetTroopTitleFightAmountProto{} }
func (m *C2SGetTroopTitleFightAmountProto) String() string { return proto.CompactTextString(m) }
func (*C2SGetTroopTitleFightAmountProto) ProtoMessage()    {}
func (*C2SGetTroopTitleFightAmountProto) Descriptor() ([]byte, []int) {
	return fileDescriptorTask, []int{19}
}

func (m *C2SGetTroopTitleFightAmountProto) GetTroopIndex() int32 {
	if m != nil {
		return m.TroopIndex
	}
	return 0
}

func (m *C2SGetTroopTitleFightAmountProto) GetTitleId() int32 {
	if m != nil {
		return m.TitleId
	}
	return 0
}

type S2CGetTroopTitleFightAmountProto struct {
	TroopIndex  int32 `protobuf:"varint,1,opt,name=troop_index,json=troopIndex,proto3" json:"troop_index,omitempty"`
	TitleId     int32 `protobuf:"varint,2,opt,name=title_id,json=titleId,proto3" json:"title_id,omitempty"`
	FightAmount int32 `protobuf:"varint,3,opt,name=fight_amount,json=fightAmount,proto3" json:"fight_amount,omitempty"`
}

func (m *S2CGetTroopTitleFightAmountProto) Reset()         { *m = S2CGetTroopTitleFightAmountProto{} }
func (m *S2CGetTroopTitleFightAmountProto) String() string { return proto.CompactTextString(m) }
func (*S2CGetTroopTitleFightAmountProto) ProtoMessage()    {}
func (*S2CGetTroopTitleFightAmountProto) Descriptor() ([]byte, []int) {
	return fileDescriptorTask, []int{20}
}

func (m *S2CGetTroopTitleFightAmountProto) GetTroopIndex() int32 {
	if m != nil {
		return m.TroopIndex
	}
	return 0
}

func (m *S2CGetTroopTitleFightAmountProto) GetTitleId() int32 {
	if m != nil {
		return m.TitleId
	}
	return 0
}

func (m *S2CGetTroopTitleFightAmountProto) GetFightAmount() int32 {
	if m != nil {
		return m.FightAmount
	}
	return 0
}

type S2CUpgradeTitleProto struct {
	CompleteTitleId int32 `protobuf:"varint,1,opt,name=complete_title_id,json=completeTitleId,proto3" json:"complete_title_id,omitempty"`
}

func (m *S2CUpgradeTitleProto) Reset()                    { *m = S2CUpgradeTitleProto{} }
func (m *S2CUpgradeTitleProto) String() string            { return proto.CompactTextString(m) }
func (*S2CUpgradeTitleProto) ProtoMessage()               {}
func (*S2CUpgradeTitleProto) Descriptor() ([]byte, []int) { return fileDescriptorTask, []int{21} }

func (m *S2CUpgradeTitleProto) GetCompleteTitleId() int32 {
	if m != nil {
		return m.CompleteTitleId
	}
	return 0
}

type C2SCompleteBoolTaskProto struct {
	BoolType int32 `protobuf:"varint,1,opt,name=bool_type,json=boolType,proto3" json:"bool_type,omitempty"`
}

func (m *C2SCompleteBoolTaskProto) Reset()                    { *m = C2SCompleteBoolTaskProto{} }
func (m *C2SCompleteBoolTaskProto) String() string            { return proto.CompactTextString(m) }
func (*C2SCompleteBoolTaskProto) ProtoMessage()               {}
func (*C2SCompleteBoolTaskProto) Descriptor() ([]byte, []int) { return fileDescriptorTask, []int{22} }

func (m *C2SCompleteBoolTaskProto) GetBoolType() int32 {
	if m != nil {
		return m.BoolType
	}
	return 0
}

type S2CCompleteBoolTaskProto struct {
	BoolType int32 `protobuf:"varint,1,opt,name=bool_type,json=boolType,proto3" json:"bool_type,omitempty"`
}

func (m *S2CCompleteBoolTaskProto) Reset()                    { *m = S2CCompleteBoolTaskProto{} }
func (m *S2CCompleteBoolTaskProto) String() string            { return proto.CompactTextString(m) }
func (*S2CCompleteBoolTaskProto) ProtoMessage()               {}
func (*S2CCompleteBoolTaskProto) Descriptor() ([]byte, []int) { return fileDescriptorTask, []int{23} }

func (m *S2CCompleteBoolTaskProto) GetBoolType() int32 {
	if m != nil {
		return m.BoolType
	}
	return 0
}

func init() {
	proto.RegisterType((*S2CUpdateTaskProgressProto)(nil), "proto.S2CUpdateTaskProgressProto")
	proto.RegisterType((*C2SCollectTaskPrizeProto)(nil), "proto.C2SCollectTaskPrizeProto")
	proto.RegisterType((*S2CCollectTaskPrizeProto)(nil), "proto.S2CCollectTaskPrizeProto")
	proto.RegisterType((*S2CNewTaskProto)(nil), "proto.S2CNewTaskProto")
	proto.RegisterType((*C2SCollectTaskBoxPrizeProto)(nil), "proto.C2SCollectTaskBoxPrizeProto")
	proto.RegisterType((*S2CCollectTaskBoxPrizeProto)(nil), "proto.S2CCollectTaskBoxPrizeProto")
	proto.RegisterType((*S2CCollectBaYeStagePrizeProto)(nil), "proto.S2CCollectBaYeStagePrizeProto")
	proto.RegisterType((*C2SCollectActiveDegreePrizeProto)(nil), "proto.C2SCollectActiveDegreePrizeProto")
	proto.RegisterType((*S2CCollectActiveDegreePrizeProto)(nil), "proto.S2CCollectActiveDegreePrizeProto")
	proto.RegisterType((*C2SCollectAchieveStarPrizeProto)(nil), "proto.C2SCollectAchieveStarPrizeProto")
	proto.RegisterType((*S2CCollectAchieveStarPrizeProto)(nil), "proto.S2CCollectAchieveStarPrizeProto")
	proto.RegisterType((*S2CAchieveReachProto)(nil), "proto.S2CAchieveReachProto")
	proto.RegisterType((*C2SChangeSelectShowAchieveProto)(nil), "proto.C2SChangeSelectShowAchieveProto")
	proto.RegisterType((*S2CChangeSelectShowAchieveProto)(nil), "proto.S2CChangeSelectShowAchieveProto")
	proto.RegisterType((*S2CRemoveTaskProto)(nil), "proto.S2CRemoveTaskProto")
	proto.RegisterType((*C2SCollectBwzlPrizeProto)(nil), "proto.C2SCollectBwzlPrizeProto")
	proto.RegisterType((*S2CCollectBwzlPrizeProto)(nil), "proto.S2CCollectBwzlPrizeProto")
	proto.RegisterType((*C2SViewOtherAchieveTaskListProto)(nil), "proto.C2SViewOtherAchieveTaskListProto")
	proto.RegisterType((*S2CViewOtherAchieveTaskListProto)(nil), "proto.S2CViewOtherAchieveTaskListProto")
	proto.RegisterType((*C2SGetTroopTitleFightAmountProto)(nil), "proto.C2SGetTroopTitleFightAmountProto")
	proto.RegisterType((*S2CGetTroopTitleFightAmountProto)(nil), "proto.S2CGetTroopTitleFightAmountProto")
	proto.RegisterType((*S2CUpgradeTitleProto)(nil), "proto.S2CUpgradeTitleProto")
	proto.RegisterType((*C2SCompleteBoolTaskProto)(nil), "proto.C2SCompleteBoolTaskProto")
	proto.RegisterType((*S2CCompleteBoolTaskProto)(nil), "proto.S2CCompleteBoolTaskProto")
}
func (m *S2CUpdateTaskProgressProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateTaskProgressProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Id))
	}
	if m.Progress != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Progress))
	}
	if m.Complete {
		dAtA[i] = 0x18
		i++
		if m.Complete {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *C2SCollectTaskPrizeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCollectTaskPrizeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *S2CCollectTaskPrizeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCollectTaskPrizeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *S2CNewTaskProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CNewTaskProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Id))
	}
	if m.Main {
		dAtA[i] = 0x10
		i++
		if m.Main {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Progress != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Progress))
	}
	if m.Complete {
		dAtA[i] = 0x20
		i++
		if m.Complete {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *C2SCollectTaskBoxPrizeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCollectTaskBoxPrizeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *S2CCollectTaskBoxPrizeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCollectTaskBoxPrizeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *S2CCollectBaYeStagePrizeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCollectBaYeStagePrizeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Stage) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTask(dAtA, i, uint64(len(m.Stage)))
		i += copy(dAtA[i:], m.Stage)
	}
	return i, nil
}

func (m *C2SCollectActiveDegreePrizeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCollectActiveDegreePrizeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CollectIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.CollectIndex))
	}
	return i, nil
}

func (m *S2CCollectActiveDegreePrizeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCollectActiveDegreePrizeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CollectIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.CollectIndex))
	}
	return i, nil
}

func (m *C2SCollectAchieveStarPrizeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCollectAchieveStarPrizeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StarCount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.StarCount))
	}
	return i, nil
}

func (m *S2CCollectAchieveStarPrizeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCollectAchieveStarPrizeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StarCount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.StarCount))
	}
	return i, nil
}

func (m *S2CAchieveReachProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CAchieveReachProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Id))
	}
	if m.ReachTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.ReachTime))
	}
	return i, nil
}

func (m *C2SChangeSelectShowAchieveProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SChangeSelectShowAchieveProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AchieveType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.AchieveType))
	}
	if m.AddOrRemove {
		dAtA[i] = 0x10
		i++
		if m.AddOrRemove {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CChangeSelectShowAchieveProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CChangeSelectShowAchieveProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AchieveType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.AchieveType))
	}
	if m.AddOrRemove {
		dAtA[i] = 0x10
		i++
		if m.AddOrRemove {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CRemoveTaskProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CRemoveTaskProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *C2SCollectBwzlPrizeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCollectBwzlPrizeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CompleteCount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.CompleteCount))
	}
	return i, nil
}

func (m *S2CCollectBwzlPrizeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCollectBwzlPrizeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CompleteCount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.CompleteCount))
	}
	return i, nil
}

func (m *C2SViewOtherAchieveTaskListProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SViewOtherAchieveTaskListProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTask(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *S2CViewOtherAchieveTaskListProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CViewOtherAchieveTaskListProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTask(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.List != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.List.Size()))
		n1, err := m.List.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *C2SGetTroopTitleFightAmountProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SGetTroopTitleFightAmountProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TroopIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.TroopIndex))
	}
	if m.TitleId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.TitleId))
	}
	return i, nil
}

func (m *S2CGetTroopTitleFightAmountProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CGetTroopTitleFightAmountProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TroopIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.TroopIndex))
	}
	if m.TitleId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.TitleId))
	}
	if m.FightAmount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.FightAmount))
	}
	return i, nil
}

func (m *S2CUpgradeTitleProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpgradeTitleProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CompleteTitleId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.CompleteTitleId))
	}
	return i, nil
}

func (m *C2SCompleteBoolTaskProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCompleteBoolTaskProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BoolType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.BoolType))
	}
	return i, nil
}

func (m *S2CCompleteBoolTaskProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCompleteBoolTaskProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BoolType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.BoolType))
	}
	return i, nil
}

func encodeFixed64Task(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Task(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintTask(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *S2CUpdateTaskProgressProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTask(uint64(m.Id))
	}
	if m.Progress != 0 {
		n += 1 + sovTask(uint64(m.Progress))
	}
	if m.Complete {
		n += 2
	}
	return n
}

func (m *C2SCollectTaskPrizeProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTask(uint64(m.Id))
	}
	return n
}

func (m *S2CCollectTaskPrizeProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTask(uint64(m.Id))
	}
	return n
}

func (m *S2CNewTaskProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTask(uint64(m.Id))
	}
	if m.Main {
		n += 2
	}
	if m.Progress != 0 {
		n += 1 + sovTask(uint64(m.Progress))
	}
	if m.Complete {
		n += 2
	}
	return n
}

func (m *C2SCollectTaskBoxPrizeProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTask(uint64(m.Id))
	}
	return n
}

func (m *S2CCollectTaskBoxPrizeProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTask(uint64(m.Id))
	}
	return n
}

func (m *S2CCollectBaYeStagePrizeProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Stage)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	return n
}

func (m *C2SCollectActiveDegreePrizeProto) Size() (n int) {
	var l int
	_ = l
	if m.CollectIndex != 0 {
		n += 1 + sovTask(uint64(m.CollectIndex))
	}
	return n
}

func (m *S2CCollectActiveDegreePrizeProto) Size() (n int) {
	var l int
	_ = l
	if m.CollectIndex != 0 {
		n += 1 + sovTask(uint64(m.CollectIndex))
	}
	return n
}

func (m *C2SCollectAchieveStarPrizeProto) Size() (n int) {
	var l int
	_ = l
	if m.StarCount != 0 {
		n += 1 + sovTask(uint64(m.StarCount))
	}
	return n
}

func (m *S2CCollectAchieveStarPrizeProto) Size() (n int) {
	var l int
	_ = l
	if m.StarCount != 0 {
		n += 1 + sovTask(uint64(m.StarCount))
	}
	return n
}

func (m *S2CAchieveReachProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTask(uint64(m.Id))
	}
	if m.ReachTime != 0 {
		n += 1 + sovTask(uint64(m.ReachTime))
	}
	return n
}

func (m *C2SChangeSelectShowAchieveProto) Size() (n int) {
	var l int
	_ = l
	if m.AchieveType != 0 {
		n += 1 + sovTask(uint64(m.AchieveType))
	}
	if m.AddOrRemove {
		n += 2
	}
	return n
}

func (m *S2CChangeSelectShowAchieveProto) Size() (n int) {
	var l int
	_ = l
	if m.AchieveType != 0 {
		n += 1 + sovTask(uint64(m.AchieveType))
	}
	if m.AddOrRemove {
		n += 2
	}
	return n
}

func (m *S2CRemoveTaskProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTask(uint64(m.Id))
	}
	return n
}

func (m *C2SCollectBwzlPrizeProto) Size() (n int) {
	var l int
	_ = l
	if m.CompleteCount != 0 {
		n += 1 + sovTask(uint64(m.CompleteCount))
	}
	return n
}

func (m *S2CCollectBwzlPrizeProto) Size() (n int) {
	var l int
	_ = l
	if m.CompleteCount != 0 {
		n += 1 + sovTask(uint64(m.CompleteCount))
	}
	return n
}

func (m *C2SViewOtherAchieveTaskListProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	return n
}

func (m *S2CViewOtherAchieveTaskListProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	if m.List != nil {
		l = m.List.Size()
		n += 1 + l + sovTask(uint64(l))
	}
	return n
}

func (m *C2SGetTroopTitleFightAmountProto) Size() (n int) {
	var l int
	_ = l
	if m.TroopIndex != 0 {
		n += 1 + sovTask(uint64(m.TroopIndex))
	}
	if m.TitleId != 0 {
		n += 1 + sovTask(uint64(m.TitleId))
	}
	return n
}

func (m *S2CGetTroopTitleFightAmountProto) Size() (n int) {
	var l int
	_ = l
	if m.TroopIndex != 0 {
		n += 1 + sovTask(uint64(m.TroopIndex))
	}
	if m.TitleId != 0 {
		n += 1 + sovTask(uint64(m.TitleId))
	}
	if m.FightAmount != 0 {
		n += 1 + sovTask(uint64(m.FightAmount))
	}
	return n
}

func (m *S2CUpgradeTitleProto) Size() (n int) {
	var l int
	_ = l
	if m.CompleteTitleId != 0 {
		n += 1 + sovTask(uint64(m.CompleteTitleId))
	}
	return n
}

func (m *C2SCompleteBoolTaskProto) Size() (n int) {
	var l int
	_ = l
	if m.BoolType != 0 {
		n += 1 + sovTask(uint64(m.BoolType))
	}
	return n
}

func (m *S2CCompleteBoolTaskProto) Size() (n int) {
	var l int
	_ = l
	if m.BoolType != 0 {
		n += 1 + sovTask(uint64(m.BoolType))
	}
	return n
}

func sovTask(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTask(x uint64) (n int) {
	return sovTask(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *S2CUpdateTaskProgressProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateTaskProgressProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateTaskProgressProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			m.Progress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Progress |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Complete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Complete = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SCollectTaskPrizeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCollectTaskPrizeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCollectTaskPrizeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCollectTaskPrizeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCollectTaskPrizeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCollectTaskPrizeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CNewTaskProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CNewTaskProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CNewTaskProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Main", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Main = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			m.Progress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Progress |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Complete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Complete = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SCollectTaskBoxPrizeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCollectTaskBoxPrizeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCollectTaskBoxPrizeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCollectTaskBoxPrizeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCollectTaskBoxPrizeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCollectTaskBoxPrizeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCollectBaYeStagePrizeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCollectBaYeStagePrizeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCollectBaYeStagePrizeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stage", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stage = append(m.Stage[:0], dAtA[iNdEx:postIndex]...)
			if m.Stage == nil {
				m.Stage = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SCollectActiveDegreePrizeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCollectActiveDegreePrizeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCollectActiveDegreePrizeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectIndex", wireType)
			}
			m.CollectIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollectIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCollectActiveDegreePrizeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCollectActiveDegreePrizeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCollectActiveDegreePrizeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectIndex", wireType)
			}
			m.CollectIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollectIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SCollectAchieveStarPrizeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCollectAchieveStarPrizeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCollectAchieveStarPrizeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StarCount", wireType)
			}
			m.StarCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StarCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCollectAchieveStarPrizeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCollectAchieveStarPrizeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCollectAchieveStarPrizeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StarCount", wireType)
			}
			m.StarCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StarCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CAchieveReachProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CAchieveReachProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CAchieveReachProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReachTime", wireType)
			}
			m.ReachTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReachTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SChangeSelectShowAchieveProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SChangeSelectShowAchieveProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SChangeSelectShowAchieveProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AchieveType", wireType)
			}
			m.AchieveType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AchieveType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddOrRemove", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddOrRemove = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CChangeSelectShowAchieveProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CChangeSelectShowAchieveProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CChangeSelectShowAchieveProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AchieveType", wireType)
			}
			m.AchieveType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AchieveType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddOrRemove", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddOrRemove = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CRemoveTaskProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CRemoveTaskProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CRemoveTaskProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SCollectBwzlPrizeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCollectBwzlPrizeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCollectBwzlPrizeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompleteCount", wireType)
			}
			m.CompleteCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompleteCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCollectBwzlPrizeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCollectBwzlPrizeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCollectBwzlPrizeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompleteCount", wireType)
			}
			m.CompleteCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompleteCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SViewOtherAchieveTaskListProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SViewOtherAchieveTaskListProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SViewOtherAchieveTaskListProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CViewOtherAchieveTaskListProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CViewOtherAchieveTaskListProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CViewOtherAchieveTaskListProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.List == nil {
				m.List = &proto2.OtherAchieveTaskListProto{}
			}
			if err := m.List.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SGetTroopTitleFightAmountProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SGetTroopTitleFightAmountProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SGetTroopTitleFightAmountProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TroopIndex", wireType)
			}
			m.TroopIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TroopIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TitleId", wireType)
			}
			m.TitleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TitleId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CGetTroopTitleFightAmountProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CGetTroopTitleFightAmountProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CGetTroopTitleFightAmountProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TroopIndex", wireType)
			}
			m.TroopIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TroopIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TitleId", wireType)
			}
			m.TitleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TitleId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FightAmount", wireType)
			}
			m.FightAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FightAmount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpgradeTitleProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpgradeTitleProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpgradeTitleProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompleteTitleId", wireType)
			}
			m.CompleteTitleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompleteTitleId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SCompleteBoolTaskProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCompleteBoolTaskProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCompleteBoolTaskProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoolType", wireType)
			}
			m.BoolType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BoolType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCompleteBoolTaskProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCompleteBoolTaskProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCompleteBoolTaskProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoolType", wireType)
			}
			m.BoolType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BoolType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTask(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTask
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTask
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTask
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTask(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTask = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTask   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/gen/pb/task/task.proto", fileDescriptorTask)
}

var fileDescriptorTask = []byte{
	// 700 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0xd1, 0x4e, 0xdb, 0x4a,
	0x10, 0xbd, 0x0e, 0xe1, 0xde, 0x30, 0x09, 0xa0, 0x1b, 0xf1, 0x90, 0x82, 0x08, 0xa9, 0xdb, 0x4a,
	0x08, 0x09, 0x52, 0xb9, 0x54, 0xbc, 0x36, 0x71, 0x5b, 0x8a, 0x54, 0x15, 0x64, 0x87, 0x4a, 0xed,
	0x43, 0xad, 0x8d, 0x3d, 0xd8, 0x2b, 0xec, 0xac, 0xb5, 0x5e, 0x08, 0xf0, 0xd6, 0xbf, 0xe8, 0x27,
	0xf5, 0xb1, 0x9f, 0x50, 0xd1, 0x1f, 0xa9, 0x76, 0xbd, 0x24, 0x0e, 0x0a, 0x08, 0x90, 0xda, 0x97,
	0x24, 0x73, 0x76, 0xe6, 0xcc, 0x99, 0xf5, 0x19, 0x07, 0x9e, 0x87, 0x54, 0x44, 0x27, 0xfd, 0x2d,
	0x9f, 0x25, 0xed, 0x98, 0x86, 0x91, 0x48, 0xc9, 0xb0, 0x9d, 0x90, 0x18, 0x77, 0xda, 0x21, 0x0e,
	0xda, 0x69, 0xbf, 0x2d, 0x48, 0x76, 0xac, 0x3e, 0xb6, 0x52, 0xce, 0x04, 0xab, 0xcf, 0xaa, 0xaf,
	0xe5, 0xed, 0x9b, 0x0b, 0xd3, 0x7e, 0x3b, 0x8b, 0x08, 0xc7, 0xc0, 0x53, 0xa9, 0x85, 0x62, 0x33,
	0x80, 0x65, 0xd7, 0xb2, 0x0f, 0xd3, 0x80, 0x08, 0xec, 0x91, 0xec, 0xf8, 0x80, 0xb3, 0x90, 0x63,
	0x96, 0x1d, 0x28, 0xea, 0x05, 0x28, 0xd1, 0xa0, 0x61, 0xb4, 0x8c, 0xf5, 0x59, 0xa7, 0x44, 0x83,
	0xfa, 0x32, 0x54, 0x52, 0x9d, 0xd0, 0x28, 0x29, 0x74, 0x14, 0xcb, 0x33, 0x9f, 0x25, 0x69, 0x8c,
	0x02, 0x1b, 0x33, 0x2d, 0x63, 0xbd, 0xe2, 0x8c, 0x62, 0x73, 0x03, 0x1a, 0xb6, 0xe5, 0xda, 0x2c,
	0x8e, 0xd1, 0x17, 0x79, 0x1b, 0x7a, 0x81, 0x53, 0x7b, 0xc8, 0x5c, 0xd7, 0xb2, 0xef, 0x96, 0x9b,
	0xc0, 0xa2, 0x6b, 0xd9, 0x1f, 0x70, 0xa8, 0xa5, 0x4f, 0x91, 0x5c, 0x87, 0x72, 0x42, 0xe8, 0x40,
	0xc9, 0xad, 0x38, 0xea, 0xf7, 0xc4, 0x18, 0x33, 0xb7, 0x8c, 0x51, 0xbe, 0x36, 0xc6, 0x26, 0xac,
	0x4c, 0x8e, 0xd1, 0x65, 0x67, 0xb7, 0xa8, 0xdb, 0x84, 0x95, 0xc9, 0x49, 0x6e, 0x4f, 0x7f, 0x09,
	0xab, 0xe3, 0xf4, 0x2e, 0xf9, 0x84, 0xae, 0x20, 0x21, 0x16, 0x0a, 0x96, 0x60, 0x36, 0x93, 0x90,
	0xaa, 0xa9, 0x39, 0x79, 0x60, 0xee, 0x42, 0x6b, 0x2c, 0xaa, 0xe3, 0x0b, 0x7a, 0x8a, 0xaf, 0x31,
	0xe4, 0x58, 0xac, 0x7c, 0x02, 0xf3, 0x7e, 0x9e, 0xe0, 0xd1, 0x41, 0x80, 0x67, 0xba, 0x6b, 0x4d,
	0x83, 0x7b, 0x12, 0x93, 0x44, 0xe3, 0xfe, 0x77, 0x25, 0x2a, 0x4d, 0x21, 0x7a, 0x05, 0x6b, 0x45,
	0x45, 0x11, 0xc5, 0x53, 0x39, 0x0b, 0x2f, 0xf0, 0xac, 0x02, 0x64, 0x82, 0x70, 0xcf, 0x67, 0x27,
	0x03, 0xa1, 0xd5, 0xcc, 0x49, 0xc4, 0x96, 0x80, 0x64, 0x28, 0x4a, 0x79, 0x00, 0xc3, 0x1b, 0x58,
	0x72, 0x2d, 0x5b, 0x97, 0x3a, 0x48, 0xfc, 0x68, 0xba, 0x3d, 0x56, 0x01, 0xb8, 0x3c, 0xf5, 0x04,
	0x4d, 0x50, 0x4f, 0x33, 0xa7, 0x90, 0x1e, 0x4d, 0xd0, 0x8c, 0xf2, 0x51, 0x22, 0x32, 0x08, 0xd1,
	0x45, 0xa9, 0xc6, 0x8d, 0xd8, 0x50, 0xd3, 0xe6, 0x8c, 0x8f, 0xa1, 0x46, 0xf2, 0xd8, 0x13, 0xe7,
	0x29, 0x6a, 0xee, 0xaa, 0xc6, 0x7a, 0xe7, 0x29, 0xd6, 0x4d, 0x98, 0x27, 0x41, 0xe0, 0x31, 0xee,
	0x71, 0x4c, 0xd8, 0x29, 0x6a, 0x33, 0x56, 0x49, 0x10, 0xec, 0x73, 0x47, 0x41, 0xb2, 0x93, 0x1c,
	0xf9, 0x2f, 0x74, 0x7a, 0x0a, 0x75, 0xd7, 0xb2, 0xf3, 0xe0, 0xc6, 0xbd, 0x31, 0x3b, 0xc5, 0x95,
	0xed, 0x0e, 0x2f, 0xe2, 0xc2, 0xdd, 0x3f, 0x83, 0x85, 0xab, 0x9d, 0x98, 0xb8, 0xff, 0xf9, 0x2b,
	0x34, 0x7f, 0x06, 0x9d, 0xe2, 0x26, 0x3f, 0x8c, 0xc2, 0x52, 0xe6, 0xfe, 0x48, 0x71, 0xb8, 0x2f,
	0x22, 0xe4, 0xfa, 0x3a, 0xa4, 0xea, 0xf7, 0x34, 0x13, 0xd7, 0x95, 0xd7, 0x94, 0xf2, 0x48, 0xf9,
	0xf8, 0x5e, 0x35, 0xf5, 0x6d, 0x28, 0xc7, 0x34, 0x13, 0xea, 0xba, 0xaa, 0x56, 0x2b, 0x7f, 0x39,
	0x6e, 0xdd, 0x58, 0xef, 0xa8, 0x6c, 0xf3, 0x8b, 0x52, 0xb7, 0x8b, 0xa2, 0xc7, 0x19, 0x4b, 0x7b,
	0x54, 0xc4, 0xf8, 0x56, 0xbe, 0x79, 0x3b, 0x89, 0x14, 0x9f, 0x77, 0x5a, 0x83, 0xaa, 0x90, 0xa7,
	0x13, 0x8b, 0x07, 0x0a, 0x52, 0xdb, 0x52, 0x7f, 0x04, 0x15, 0x21, 0x2b, 0x3d, 0x1a, 0x68, 0xff,
	0xfd, 0xa7, 0xe2, 0xbd, 0xc0, 0xfc, 0x6a, 0xa8, 0x51, 0xfe, 0x58, 0x03, 0xe9, 0xa8, 0x23, 0xc9,
	0xe7, 0x11, 0x45, 0xa8, 0x5f, 0x86, 0xd5, 0xa3, 0x71, 0x0f, 0xb3, 0xab, 0x16, 0xe9, 0x30, 0x0d,
	0x39, 0x09, 0x50, 0x29, 0xc8, 0xdb, 0x6e, 0xc0, 0xff, 0xa3, 0x07, 0x38, 0xa2, 0xcf, 0x9b, 0x2f,
	0x5e, 0x1d, 0xf4, 0xf4, 0x1c, 0x3b, 0xda, 0x4b, 0x39, 0xda, 0x65, 0x2c, 0x1e, 0xfb, 0x6e, 0x05,
	0xe6, 0xfa, 0x8c, 0xc5, 0x45, 0x47, 0x57, 0x24, 0x20, 0xed, 0x2c, 0x0b, 0x95, 0x83, 0xee, 0x5b,
	0xd8, 0x6d, 0x7c, 0xbf, 0x6c, 0x1a, 0x3f, 0x2e, 0x9b, 0xc6, 0xcf, 0xcb, 0xa6, 0xf1, 0xed, 0x57,
	0xf3, 0x9f, 0x77, 0xc6, 0xe7, 0xb2, 0xfc, 0xdb, 0xeb, 0xff, 0xab, 0x1e, 0xed, 0x8b, 0xdf, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x4a, 0x56, 0x2f, 0x93, 0x68, 0x07, 0x00, 0x00,
}
