// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/gen/pb/gem/gem.proto
// DO NOT EDIT!

/*
	Package gem is a generated protocol buffer package.

	It is generated from these files:
		github.com/lightpaw/male7/gen/pb/gem/gem.proto

	It has these top-level messages:
		C2SUseGemProto
		S2CUseGemProto
		C2SInlayGemProto
		S2CInlayGemProto
		C2SCombineGemProto
		S2CCombineGemProto
		C2SOneKeyUseGemProto
		S2COneKeyUseGemProto
		C2SOneKeyCombineGemProto
		S2COneKeyCombineGemProto
		C2SRequestOneKeyCombineCostProto
		S2CRequestOneKeyCombineCostProto
		C2SOneKeyCombineDepotGemProto
		S2COneKeyCombineDepotGemProto
*/
package gem

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type C2SUseGemProto struct {
	CaptainId int32 `protobuf:"varint,1,opt,name=captain_id,json=captainId,proto3" json:"captain_id,omitempty"`
	SlotIdx   int32 `protobuf:"varint,4,opt,name=slot_idx,json=slotIdx,proto3" json:"slot_idx,omitempty"`
	Down      bool  `protobuf:"varint,3,opt,name=down,proto3" json:"down,omitempty"`
	GemId     int32 `protobuf:"varint,2,opt,name=gem_id,json=gemId,proto3" json:"gem_id,omitempty"`
}

func (m *C2SUseGemProto) Reset()                    { *m = C2SUseGemProto{} }
func (m *C2SUseGemProto) String() string            { return proto.CompactTextString(m) }
func (*C2SUseGemProto) ProtoMessage()               {}
func (*C2SUseGemProto) Descriptor() ([]byte, []int) { return fileDescriptorGem, []int{0} }

func (m *C2SUseGemProto) GetCaptainId() int32 {
	if m != nil {
		return m.CaptainId
	}
	return 0
}

func (m *C2SUseGemProto) GetSlotIdx() int32 {
	if m != nil {
		return m.SlotIdx
	}
	return 0
}

func (m *C2SUseGemProto) GetDown() bool {
	if m != nil {
		return m.Down
	}
	return false
}

func (m *C2SUseGemProto) GetGemId() int32 {
	if m != nil {
		return m.GemId
	}
	return 0
}

type S2CUseGemProto struct {
	CaptainId int32 `protobuf:"varint,1,opt,name=captain_id,json=captainId,proto3" json:"captain_id,omitempty"`
	SlotIdx   int32 `protobuf:"varint,4,opt,name=slot_idx,json=slotIdx,proto3" json:"slot_idx,omitempty"`
	UpId      int32 `protobuf:"varint,2,opt,name=up_id,json=upId,proto3" json:"up_id,omitempty"`
}

func (m *S2CUseGemProto) Reset()                    { *m = S2CUseGemProto{} }
func (m *S2CUseGemProto) String() string            { return proto.CompactTextString(m) }
func (*S2CUseGemProto) ProtoMessage()               {}
func (*S2CUseGemProto) Descriptor() ([]byte, []int) { return fileDescriptorGem, []int{1} }

func (m *S2CUseGemProto) GetCaptainId() int32 {
	if m != nil {
		return m.CaptainId
	}
	return 0
}

func (m *S2CUseGemProto) GetSlotIdx() int32 {
	if m != nil {
		return m.SlotIdx
	}
	return 0
}

func (m *S2CUseGemProto) GetUpId() int32 {
	if m != nil {
		return m.UpId
	}
	return 0
}

type C2SInlayGemProto struct {
	CaptainId int32 `protobuf:"varint,1,opt,name=captain_id,json=captainId,proto3" json:"captain_id,omitempty"`
	SlotIdx   int32 `protobuf:"varint,2,opt,name=slot_idx,json=slotIdx,proto3" json:"slot_idx,omitempty"`
	GemId     int32 `protobuf:"varint,3,opt,name=gem_id,json=gemId,proto3" json:"gem_id,omitempty"`
}

func (m *C2SInlayGemProto) Reset()                    { *m = C2SInlayGemProto{} }
func (m *C2SInlayGemProto) String() string            { return proto.CompactTextString(m) }
func (*C2SInlayGemProto) ProtoMessage()               {}
func (*C2SInlayGemProto) Descriptor() ([]byte, []int) { return fileDescriptorGem, []int{2} }

func (m *C2SInlayGemProto) GetCaptainId() int32 {
	if m != nil {
		return m.CaptainId
	}
	return 0
}

func (m *C2SInlayGemProto) GetSlotIdx() int32 {
	if m != nil {
		return m.SlotIdx
	}
	return 0
}

func (m *C2SInlayGemProto) GetGemId() int32 {
	if m != nil {
		return m.GemId
	}
	return 0
}

type S2CInlayGemProto struct {
	CaptainId int32 `protobuf:"varint,1,opt,name=captain_id,json=captainId,proto3" json:"captain_id,omitempty"`
	SlotIdx   int32 `protobuf:"varint,2,opt,name=slot_idx,json=slotIdx,proto3" json:"slot_idx,omitempty"`
	GemId     int32 `protobuf:"varint,3,opt,name=gem_id,json=gemId,proto3" json:"gem_id,omitempty"`
}

func (m *S2CInlayGemProto) Reset()                    { *m = S2CInlayGemProto{} }
func (m *S2CInlayGemProto) String() string            { return proto.CompactTextString(m) }
func (*S2CInlayGemProto) ProtoMessage()               {}
func (*S2CInlayGemProto) Descriptor() ([]byte, []int) { return fileDescriptorGem, []int{3} }

func (m *S2CInlayGemProto) GetCaptainId() int32 {
	if m != nil {
		return m.CaptainId
	}
	return 0
}

func (m *S2CInlayGemProto) GetSlotIdx() int32 {
	if m != nil {
		return m.SlotIdx
	}
	return 0
}

func (m *S2CInlayGemProto) GetGemId() int32 {
	if m != nil {
		return m.GemId
	}
	return 0
}

type C2SCombineGemProto struct {
	CaptainId int32 `protobuf:"varint,1,opt,name=captain_id,json=captainId,proto3" json:"captain_id,omitempty"`
	SlotIdx   int32 `protobuf:"varint,2,opt,name=slot_idx,json=slotIdx,proto3" json:"slot_idx,omitempty"`
}

func (m *C2SCombineGemProto) Reset()                    { *m = C2SCombineGemProto{} }
func (m *C2SCombineGemProto) String() string            { return proto.CompactTextString(m) }
func (*C2SCombineGemProto) ProtoMessage()               {}
func (*C2SCombineGemProto) Descriptor() ([]byte, []int) { return fileDescriptorGem, []int{4} }

func (m *C2SCombineGemProto) GetCaptainId() int32 {
	if m != nil {
		return m.CaptainId
	}
	return 0
}

func (m *C2SCombineGemProto) GetSlotIdx() int32 {
	if m != nil {
		return m.SlotIdx
	}
	return 0
}

type S2CCombineGemProto struct {
	CaptainId int32 `protobuf:"varint,1,opt,name=captain_id,json=captainId,proto3" json:"captain_id,omitempty"`
	SlotIdx   int32 `protobuf:"varint,2,opt,name=slot_idx,json=slotIdx,proto3" json:"slot_idx,omitempty"`
	GemId     int32 `protobuf:"varint,5,opt,name=gem_id,json=gemId,proto3" json:"gem_id,omitempty"`
}

func (m *S2CCombineGemProto) Reset()                    { *m = S2CCombineGemProto{} }
func (m *S2CCombineGemProto) String() string            { return proto.CompactTextString(m) }
func (*S2CCombineGemProto) ProtoMessage()               {}
func (*S2CCombineGemProto) Descriptor() ([]byte, []int) { return fileDescriptorGem, []int{5} }

func (m *S2CCombineGemProto) GetCaptainId() int32 {
	if m != nil {
		return m.CaptainId
	}
	return 0
}

func (m *S2CCombineGemProto) GetSlotIdx() int32 {
	if m != nil {
		return m.SlotIdx
	}
	return 0
}

func (m *S2CCombineGemProto) GetGemId() int32 {
	if m != nil {
		return m.GemId
	}
	return 0
}

type C2SOneKeyUseGemProto struct {
	CaptainId int32 `protobuf:"varint,1,opt,name=captain_id,json=captainId,proto3" json:"captain_id,omitempty"`
	DownAll   bool  `protobuf:"varint,2,opt,name=down_all,json=downAll,proto3" json:"down_all,omitempty"`
	EquipType int32 `protobuf:"varint,3,opt,name=equip_type,json=equipType,proto3" json:"equip_type,omitempty"`
}

func (m *C2SOneKeyUseGemProto) Reset()                    { *m = C2SOneKeyUseGemProto{} }
func (m *C2SOneKeyUseGemProto) String() string            { return proto.CompactTextString(m) }
func (*C2SOneKeyUseGemProto) ProtoMessage()               {}
func (*C2SOneKeyUseGemProto) Descriptor() ([]byte, []int) { return fileDescriptorGem, []int{6} }

func (m *C2SOneKeyUseGemProto) GetCaptainId() int32 {
	if m != nil {
		return m.CaptainId
	}
	return 0
}

func (m *C2SOneKeyUseGemProto) GetDownAll() bool {
	if m != nil {
		return m.DownAll
	}
	return false
}

func (m *C2SOneKeyUseGemProto) GetEquipType() int32 {
	if m != nil {
		return m.EquipType
	}
	return 0
}

type S2COneKeyUseGemProto struct {
	CaptainId int32   `protobuf:"varint,1,opt,name=captain_id,json=captainId,proto3" json:"captain_id,omitempty"`
	DownAll   bool    `protobuf:"varint,4,opt,name=down_all,json=downAll,proto3" json:"down_all,omitempty"`
	GemId     []int32 `protobuf:"varint,3,rep,name=gem_id,json=gemId" json:"gem_id,omitempty"`
	EquipType int32   `protobuf:"varint,5,opt,name=equip_type,json=equipType,proto3" json:"equip_type,omitempty"`
}

func (m *S2COneKeyUseGemProto) Reset()                    { *m = S2COneKeyUseGemProto{} }
func (m *S2COneKeyUseGemProto) String() string            { return proto.CompactTextString(m) }
func (*S2COneKeyUseGemProto) ProtoMessage()               {}
func (*S2COneKeyUseGemProto) Descriptor() ([]byte, []int) { return fileDescriptorGem, []int{7} }

func (m *S2COneKeyUseGemProto) GetCaptainId() int32 {
	if m != nil {
		return m.CaptainId
	}
	return 0
}

func (m *S2COneKeyUseGemProto) GetDownAll() bool {
	if m != nil {
		return m.DownAll
	}
	return false
}

func (m *S2COneKeyUseGemProto) GetGemId() []int32 {
	if m != nil {
		return m.GemId
	}
	return nil
}

func (m *S2COneKeyUseGemProto) GetEquipType() int32 {
	if m != nil {
		return m.EquipType
	}
	return 0
}

type C2SOneKeyCombineGemProto struct {
	CaptainId int32 `protobuf:"varint,1,opt,name=captain_id,json=captainId,proto3" json:"captain_id,omitempty"`
	SlotIdx   int32 `protobuf:"varint,2,opt,name=slot_idx,json=slotIdx,proto3" json:"slot_idx,omitempty"`
	Buy       bool  `protobuf:"varint,3,opt,name=buy,proto3" json:"buy,omitempty"`
}

func (m *C2SOneKeyCombineGemProto) Reset()                    { *m = C2SOneKeyCombineGemProto{} }
func (m *C2SOneKeyCombineGemProto) String() string            { return proto.CompactTextString(m) }
func (*C2SOneKeyCombineGemProto) ProtoMessage()               {}
func (*C2SOneKeyCombineGemProto) Descriptor() ([]byte, []int) { return fileDescriptorGem, []int{8} }

func (m *C2SOneKeyCombineGemProto) GetCaptainId() int32 {
	if m != nil {
		return m.CaptainId
	}
	return 0
}

func (m *C2SOneKeyCombineGemProto) GetSlotIdx() int32 {
	if m != nil {
		return m.SlotIdx
	}
	return 0
}

func (m *C2SOneKeyCombineGemProto) GetBuy() bool {
	if m != nil {
		return m.Buy
	}
	return false
}

type S2COneKeyCombineGemProto struct {
	CaptainId int32 `protobuf:"varint,1,opt,name=captain_id,json=captainId,proto3" json:"captain_id,omitempty"`
	SlotIdx   int32 `protobuf:"varint,2,opt,name=slot_idx,json=slotIdx,proto3" json:"slot_idx,omitempty"`
	GemId     int32 `protobuf:"varint,3,opt,name=gem_id,json=gemId,proto3" json:"gem_id,omitempty"`
}

func (m *S2COneKeyCombineGemProto) Reset()                    { *m = S2COneKeyCombineGemProto{} }
func (m *S2COneKeyCombineGemProto) String() string            { return proto.CompactTextString(m) }
func (*S2COneKeyCombineGemProto) ProtoMessage()               {}
func (*S2COneKeyCombineGemProto) Descriptor() ([]byte, []int) { return fileDescriptorGem, []int{9} }

func (m *S2COneKeyCombineGemProto) GetCaptainId() int32 {
	if m != nil {
		return m.CaptainId
	}
	return 0
}

func (m *S2COneKeyCombineGemProto) GetSlotIdx() int32 {
	if m != nil {
		return m.SlotIdx
	}
	return 0
}

func (m *S2COneKeyCombineGemProto) GetGemId() int32 {
	if m != nil {
		return m.GemId
	}
	return 0
}

type C2SRequestOneKeyCombineCostProto struct {
	CaptainId int32 `protobuf:"varint,1,opt,name=captain_id,json=captainId,proto3" json:"captain_id,omitempty"`
	SlotIdx   int32 `protobuf:"varint,2,opt,name=slot_idx,json=slotIdx,proto3" json:"slot_idx,omitempty"`
	GemId     int32 `protobuf:"varint,3,opt,name=gem_id,json=gemId,proto3" json:"gem_id,omitempty"`
}

func (m *C2SRequestOneKeyCombineCostProto) Reset()         { *m = C2SRequestOneKeyCombineCostProto{} }
func (m *C2SRequestOneKeyCombineCostProto) String() string { return proto.CompactTextString(m) }
func (*C2SRequestOneKeyCombineCostProto) ProtoMessage()    {}
func (*C2SRequestOneKeyCombineCostProto) Descriptor() ([]byte, []int) {
	return fileDescriptorGem, []int{10}
}

func (m *C2SRequestOneKeyCombineCostProto) GetCaptainId() int32 {
	if m != nil {
		return m.CaptainId
	}
	return 0
}

func (m *C2SRequestOneKeyCombineCostProto) GetSlotIdx() int32 {
	if m != nil {
		return m.SlotIdx
	}
	return 0
}

func (m *C2SRequestOneKeyCombineCostProto) GetGemId() int32 {
	if m != nil {
		return m.GemId
	}
	return 0
}

type S2CRequestOneKeyCombineCostProto struct {
	CaptainId  int32   `protobuf:"varint,1,opt,name=captain_id,json=captainId,proto3" json:"captain_id,omitempty"`
	SlotIdx    int32   `protobuf:"varint,2,opt,name=slot_idx,json=slotIdx,proto3" json:"slot_idx,omitempty"`
	CanCombine bool    `protobuf:"varint,3,opt,name=can_combine,json=canCombine,proto3" json:"can_combine,omitempty"`
	GemId      []int32 `protobuf:"varint,4,rep,name=gem_id,json=gemId" json:"gem_id,omitempty"`
	GemCount   []int32 `protobuf:"varint,5,rep,name=gem_count,json=gemCount" json:"gem_count,omitempty"`
	BuyCount   int32   `protobuf:"varint,6,opt,name=buy_count,json=buyCount,proto3" json:"buy_count,omitempty"`
	BuyYuanbao int32   `protobuf:"varint,7,opt,name=buy_yuanbao,json=buyYuanbao,proto3" json:"buy_yuanbao,omitempty"`
}

func (m *S2CRequestOneKeyCombineCostProto) Reset()         { *m = S2CRequestOneKeyCombineCostProto{} }
func (m *S2CRequestOneKeyCombineCostProto) String() string { return proto.CompactTextString(m) }
func (*S2CRequestOneKeyCombineCostProto) ProtoMessage()    {}
func (*S2CRequestOneKeyCombineCostProto) Descriptor() ([]byte, []int) {
	return fileDescriptorGem, []int{11}
}

func (m *S2CRequestOneKeyCombineCostProto) GetCaptainId() int32 {
	if m != nil {
		return m.CaptainId
	}
	return 0
}

func (m *S2CRequestOneKeyCombineCostProto) GetSlotIdx() int32 {
	if m != nil {
		return m.SlotIdx
	}
	return 0
}

func (m *S2CRequestOneKeyCombineCostProto) GetCanCombine() bool {
	if m != nil {
		return m.CanCombine
	}
	return false
}

func (m *S2CRequestOneKeyCombineCostProto) GetGemId() []int32 {
	if m != nil {
		return m.GemId
	}
	return nil
}

func (m *S2CRequestOneKeyCombineCostProto) GetGemCount() []int32 {
	if m != nil {
		return m.GemCount
	}
	return nil
}

func (m *S2CRequestOneKeyCombineCostProto) GetBuyCount() int32 {
	if m != nil {
		return m.BuyCount
	}
	return 0
}

func (m *S2CRequestOneKeyCombineCostProto) GetBuyYuanbao() int32 {
	if m != nil {
		return m.BuyYuanbao
	}
	return 0
}

type C2SOneKeyCombineDepotGemProto struct {
	GemId       int32 `protobuf:"varint,1,opt,name=gem_id,json=gemId,proto3" json:"gem_id,omitempty"`
	NewGemCount int32 `protobuf:"varint,2,opt,name=new_gem_count,json=newGemCount,proto3" json:"new_gem_count,omitempty"`
	Buy         bool  `protobuf:"varint,3,opt,name=buy,proto3" json:"buy,omitempty"`
}

func (m *C2SOneKeyCombineDepotGemProto) Reset()         { *m = C2SOneKeyCombineDepotGemProto{} }
func (m *C2SOneKeyCombineDepotGemProto) String() string { return proto.CompactTextString(m) }
func (*C2SOneKeyCombineDepotGemProto) ProtoMessage()    {}
func (*C2SOneKeyCombineDepotGemProto) Descriptor() ([]byte, []int) {
	return fileDescriptorGem, []int{12}
}

func (m *C2SOneKeyCombineDepotGemProto) GetGemId() int32 {
	if m != nil {
		return m.GemId
	}
	return 0
}

func (m *C2SOneKeyCombineDepotGemProto) GetNewGemCount() int32 {
	if m != nil {
		return m.NewGemCount
	}
	return 0
}

func (m *C2SOneKeyCombineDepotGemProto) GetBuy() bool {
	if m != nil {
		return m.Buy
	}
	return false
}

type S2COneKeyCombineDepotGemProto struct {
	NewGemId    int32 `protobuf:"varint,1,opt,name=new_gem_id,json=newGemId,proto3" json:"new_gem_id,omitempty"`
	NewGemCount int32 `protobuf:"varint,2,opt,name=new_gem_count,json=newGemCount,proto3" json:"new_gem_count,omitempty"`
}

func (m *S2COneKeyCombineDepotGemProto) Reset()         { *m = S2COneKeyCombineDepotGemProto{} }
func (m *S2COneKeyCombineDepotGemProto) String() string { return proto.CompactTextString(m) }
func (*S2COneKeyCombineDepotGemProto) ProtoMessage()    {}
func (*S2COneKeyCombineDepotGemProto) Descriptor() ([]byte, []int) {
	return fileDescriptorGem, []int{13}
}

func (m *S2COneKeyCombineDepotGemProto) GetNewGemId() int32 {
	if m != nil {
		return m.NewGemId
	}
	return 0
}

func (m *S2COneKeyCombineDepotGemProto) GetNewGemCount() int32 {
	if m != nil {
		return m.NewGemCount
	}
	return 0
}

func init() {
	proto.RegisterType((*C2SUseGemProto)(nil), "proto.C2SUseGemProto")
	proto.RegisterType((*S2CUseGemProto)(nil), "proto.S2CUseGemProto")
	proto.RegisterType((*C2SInlayGemProto)(nil), "proto.C2SInlayGemProto")
	proto.RegisterType((*S2CInlayGemProto)(nil), "proto.S2CInlayGemProto")
	proto.RegisterType((*C2SCombineGemProto)(nil), "proto.C2SCombineGemProto")
	proto.RegisterType((*S2CCombineGemProto)(nil), "proto.S2CCombineGemProto")
	proto.RegisterType((*C2SOneKeyUseGemProto)(nil), "proto.C2SOneKeyUseGemProto")
	proto.RegisterType((*S2COneKeyUseGemProto)(nil), "proto.S2COneKeyUseGemProto")
	proto.RegisterType((*C2SOneKeyCombineGemProto)(nil), "proto.C2SOneKeyCombineGemProto")
	proto.RegisterType((*S2COneKeyCombineGemProto)(nil), "proto.S2COneKeyCombineGemProto")
	proto.RegisterType((*C2SRequestOneKeyCombineCostProto)(nil), "proto.C2SRequestOneKeyCombineCostProto")
	proto.RegisterType((*S2CRequestOneKeyCombineCostProto)(nil), "proto.S2CRequestOneKeyCombineCostProto")
	proto.RegisterType((*C2SOneKeyCombineDepotGemProto)(nil), "proto.C2SOneKeyCombineDepotGemProto")
	proto.RegisterType((*S2COneKeyCombineDepotGemProto)(nil), "proto.S2COneKeyCombineDepotGemProto")
}
func (m *C2SUseGemProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SUseGemProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CaptainId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGem(dAtA, i, uint64(m.CaptainId))
	}
	if m.GemId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGem(dAtA, i, uint64(m.GemId))
	}
	if m.Down {
		dAtA[i] = 0x18
		i++
		if m.Down {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SlotIdx != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGem(dAtA, i, uint64(m.SlotIdx))
	}
	return i, nil
}

func (m *S2CUseGemProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUseGemProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CaptainId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGem(dAtA, i, uint64(m.CaptainId))
	}
	if m.UpId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGem(dAtA, i, uint64(m.UpId))
	}
	if m.SlotIdx != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGem(dAtA, i, uint64(m.SlotIdx))
	}
	return i, nil
}

func (m *C2SInlayGemProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SInlayGemProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CaptainId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGem(dAtA, i, uint64(m.CaptainId))
	}
	if m.SlotIdx != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGem(dAtA, i, uint64(m.SlotIdx))
	}
	if m.GemId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGem(dAtA, i, uint64(m.GemId))
	}
	return i, nil
}

func (m *S2CInlayGemProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CInlayGemProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CaptainId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGem(dAtA, i, uint64(m.CaptainId))
	}
	if m.SlotIdx != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGem(dAtA, i, uint64(m.SlotIdx))
	}
	if m.GemId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGem(dAtA, i, uint64(m.GemId))
	}
	return i, nil
}

func (m *C2SCombineGemProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCombineGemProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CaptainId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGem(dAtA, i, uint64(m.CaptainId))
	}
	if m.SlotIdx != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGem(dAtA, i, uint64(m.SlotIdx))
	}
	return i, nil
}

func (m *S2CCombineGemProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCombineGemProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CaptainId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGem(dAtA, i, uint64(m.CaptainId))
	}
	if m.SlotIdx != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGem(dAtA, i, uint64(m.SlotIdx))
	}
	if m.GemId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGem(dAtA, i, uint64(m.GemId))
	}
	return i, nil
}

func (m *C2SOneKeyUseGemProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SOneKeyUseGemProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CaptainId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGem(dAtA, i, uint64(m.CaptainId))
	}
	if m.DownAll {
		dAtA[i] = 0x10
		i++
		if m.DownAll {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.EquipType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGem(dAtA, i, uint64(m.EquipType))
	}
	return i, nil
}

func (m *S2COneKeyUseGemProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2COneKeyUseGemProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CaptainId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGem(dAtA, i, uint64(m.CaptainId))
	}
	if len(m.GemId) > 0 {
		for _, num := range m.GemId {
			dAtA[i] = 0x18
			i++
			i = encodeVarintGem(dAtA, i, uint64(num))
		}
	}
	if m.DownAll {
		dAtA[i] = 0x20
		i++
		if m.DownAll {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.EquipType != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGem(dAtA, i, uint64(m.EquipType))
	}
	return i, nil
}

func (m *C2SOneKeyCombineGemProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SOneKeyCombineGemProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CaptainId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGem(dAtA, i, uint64(m.CaptainId))
	}
	if m.SlotIdx != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGem(dAtA, i, uint64(m.SlotIdx))
	}
	if m.Buy {
		dAtA[i] = 0x18
		i++
		if m.Buy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2COneKeyCombineGemProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2COneKeyCombineGemProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CaptainId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGem(dAtA, i, uint64(m.CaptainId))
	}
	if m.SlotIdx != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGem(dAtA, i, uint64(m.SlotIdx))
	}
	if m.GemId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGem(dAtA, i, uint64(m.GemId))
	}
	return i, nil
}

func (m *C2SRequestOneKeyCombineCostProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SRequestOneKeyCombineCostProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CaptainId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGem(dAtA, i, uint64(m.CaptainId))
	}
	if m.SlotIdx != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGem(dAtA, i, uint64(m.SlotIdx))
	}
	if m.GemId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGem(dAtA, i, uint64(m.GemId))
	}
	return i, nil
}

func (m *S2CRequestOneKeyCombineCostProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CRequestOneKeyCombineCostProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CaptainId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGem(dAtA, i, uint64(m.CaptainId))
	}
	if m.SlotIdx != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGem(dAtA, i, uint64(m.SlotIdx))
	}
	if m.CanCombine {
		dAtA[i] = 0x18
		i++
		if m.CanCombine {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.GemId) > 0 {
		for _, num := range m.GemId {
			dAtA[i] = 0x20
			i++
			i = encodeVarintGem(dAtA, i, uint64(num))
		}
	}
	if len(m.GemCount) > 0 {
		for _, num := range m.GemCount {
			dAtA[i] = 0x28
			i++
			i = encodeVarintGem(dAtA, i, uint64(num))
		}
	}
	if m.BuyCount != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGem(dAtA, i, uint64(m.BuyCount))
	}
	if m.BuyYuanbao != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintGem(dAtA, i, uint64(m.BuyYuanbao))
	}
	return i, nil
}

func (m *C2SOneKeyCombineDepotGemProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SOneKeyCombineDepotGemProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GemId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGem(dAtA, i, uint64(m.GemId))
	}
	if m.NewGemCount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGem(dAtA, i, uint64(m.NewGemCount))
	}
	if m.Buy {
		dAtA[i] = 0x18
		i++
		if m.Buy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2COneKeyCombineDepotGemProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2COneKeyCombineDepotGemProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NewGemId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGem(dAtA, i, uint64(m.NewGemId))
	}
	if m.NewGemCount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGem(dAtA, i, uint64(m.NewGemCount))
	}
	return i, nil
}

func encodeFixed64Gem(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Gem(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintGem(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *C2SUseGemProto) Size() (n int) {
	var l int
	_ = l
	if m.CaptainId != 0 {
		n += 1 + sovGem(uint64(m.CaptainId))
	}
	if m.GemId != 0 {
		n += 1 + sovGem(uint64(m.GemId))
	}
	if m.Down {
		n += 2
	}
	if m.SlotIdx != 0 {
		n += 1 + sovGem(uint64(m.SlotIdx))
	}
	return n
}

func (m *S2CUseGemProto) Size() (n int) {
	var l int
	_ = l
	if m.CaptainId != 0 {
		n += 1 + sovGem(uint64(m.CaptainId))
	}
	if m.UpId != 0 {
		n += 1 + sovGem(uint64(m.UpId))
	}
	if m.SlotIdx != 0 {
		n += 1 + sovGem(uint64(m.SlotIdx))
	}
	return n
}

func (m *C2SInlayGemProto) Size() (n int) {
	var l int
	_ = l
	if m.CaptainId != 0 {
		n += 1 + sovGem(uint64(m.CaptainId))
	}
	if m.SlotIdx != 0 {
		n += 1 + sovGem(uint64(m.SlotIdx))
	}
	if m.GemId != 0 {
		n += 1 + sovGem(uint64(m.GemId))
	}
	return n
}

func (m *S2CInlayGemProto) Size() (n int) {
	var l int
	_ = l
	if m.CaptainId != 0 {
		n += 1 + sovGem(uint64(m.CaptainId))
	}
	if m.SlotIdx != 0 {
		n += 1 + sovGem(uint64(m.SlotIdx))
	}
	if m.GemId != 0 {
		n += 1 + sovGem(uint64(m.GemId))
	}
	return n
}

func (m *C2SCombineGemProto) Size() (n int) {
	var l int
	_ = l
	if m.CaptainId != 0 {
		n += 1 + sovGem(uint64(m.CaptainId))
	}
	if m.SlotIdx != 0 {
		n += 1 + sovGem(uint64(m.SlotIdx))
	}
	return n
}

func (m *S2CCombineGemProto) Size() (n int) {
	var l int
	_ = l
	if m.CaptainId != 0 {
		n += 1 + sovGem(uint64(m.CaptainId))
	}
	if m.SlotIdx != 0 {
		n += 1 + sovGem(uint64(m.SlotIdx))
	}
	if m.GemId != 0 {
		n += 1 + sovGem(uint64(m.GemId))
	}
	return n
}

func (m *C2SOneKeyUseGemProto) Size() (n int) {
	var l int
	_ = l
	if m.CaptainId != 0 {
		n += 1 + sovGem(uint64(m.CaptainId))
	}
	if m.DownAll {
		n += 2
	}
	if m.EquipType != 0 {
		n += 1 + sovGem(uint64(m.EquipType))
	}
	return n
}

func (m *S2COneKeyUseGemProto) Size() (n int) {
	var l int
	_ = l
	if m.CaptainId != 0 {
		n += 1 + sovGem(uint64(m.CaptainId))
	}
	if len(m.GemId) > 0 {
		for _, e := range m.GemId {
			n += 1 + sovGem(uint64(e))
		}
	}
	if m.DownAll {
		n += 2
	}
	if m.EquipType != 0 {
		n += 1 + sovGem(uint64(m.EquipType))
	}
	return n
}

func (m *C2SOneKeyCombineGemProto) Size() (n int) {
	var l int
	_ = l
	if m.CaptainId != 0 {
		n += 1 + sovGem(uint64(m.CaptainId))
	}
	if m.SlotIdx != 0 {
		n += 1 + sovGem(uint64(m.SlotIdx))
	}
	if m.Buy {
		n += 2
	}
	return n
}

func (m *S2COneKeyCombineGemProto) Size() (n int) {
	var l int
	_ = l
	if m.CaptainId != 0 {
		n += 1 + sovGem(uint64(m.CaptainId))
	}
	if m.SlotIdx != 0 {
		n += 1 + sovGem(uint64(m.SlotIdx))
	}
	if m.GemId != 0 {
		n += 1 + sovGem(uint64(m.GemId))
	}
	return n
}

func (m *C2SRequestOneKeyCombineCostProto) Size() (n int) {
	var l int
	_ = l
	if m.CaptainId != 0 {
		n += 1 + sovGem(uint64(m.CaptainId))
	}
	if m.SlotIdx != 0 {
		n += 1 + sovGem(uint64(m.SlotIdx))
	}
	if m.GemId != 0 {
		n += 1 + sovGem(uint64(m.GemId))
	}
	return n
}

func (m *S2CRequestOneKeyCombineCostProto) Size() (n int) {
	var l int
	_ = l
	if m.CaptainId != 0 {
		n += 1 + sovGem(uint64(m.CaptainId))
	}
	if m.SlotIdx != 0 {
		n += 1 + sovGem(uint64(m.SlotIdx))
	}
	if m.CanCombine {
		n += 2
	}
	if len(m.GemId) > 0 {
		for _, e := range m.GemId {
			n += 1 + sovGem(uint64(e))
		}
	}
	if len(m.GemCount) > 0 {
		for _, e := range m.GemCount {
			n += 1 + sovGem(uint64(e))
		}
	}
	if m.BuyCount != 0 {
		n += 1 + sovGem(uint64(m.BuyCount))
	}
	if m.BuyYuanbao != 0 {
		n += 1 + sovGem(uint64(m.BuyYuanbao))
	}
	return n
}

func (m *C2SOneKeyCombineDepotGemProto) Size() (n int) {
	var l int
	_ = l
	if m.GemId != 0 {
		n += 1 + sovGem(uint64(m.GemId))
	}
	if m.NewGemCount != 0 {
		n += 1 + sovGem(uint64(m.NewGemCount))
	}
	if m.Buy {
		n += 2
	}
	return n
}

func (m *S2COneKeyCombineDepotGemProto) Size() (n int) {
	var l int
	_ = l
	if m.NewGemId != 0 {
		n += 1 + sovGem(uint64(m.NewGemId))
	}
	if m.NewGemCount != 0 {
		n += 1 + sovGem(uint64(m.NewGemCount))
	}
	return n
}

func sovGem(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGem(x uint64) (n int) {
	return sovGem(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *C2SUseGemProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SUseGemProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SUseGemProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainId", wireType)
			}
			m.CaptainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GemId", wireType)
			}
			m.GemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GemId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Down", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Down = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotIdx", wireType)
			}
			m.SlotIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlotIdx |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUseGemProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUseGemProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUseGemProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainId", wireType)
			}
			m.CaptainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpId", wireType)
			}
			m.UpId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotIdx", wireType)
			}
			m.SlotIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlotIdx |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SInlayGemProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SInlayGemProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SInlayGemProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainId", wireType)
			}
			m.CaptainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotIdx", wireType)
			}
			m.SlotIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlotIdx |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GemId", wireType)
			}
			m.GemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GemId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CInlayGemProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CInlayGemProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CInlayGemProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainId", wireType)
			}
			m.CaptainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotIdx", wireType)
			}
			m.SlotIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlotIdx |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GemId", wireType)
			}
			m.GemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GemId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SCombineGemProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCombineGemProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCombineGemProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainId", wireType)
			}
			m.CaptainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotIdx", wireType)
			}
			m.SlotIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlotIdx |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCombineGemProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCombineGemProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCombineGemProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainId", wireType)
			}
			m.CaptainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotIdx", wireType)
			}
			m.SlotIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlotIdx |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GemId", wireType)
			}
			m.GemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GemId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SOneKeyUseGemProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SOneKeyUseGemProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SOneKeyUseGemProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainId", wireType)
			}
			m.CaptainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownAll", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DownAll = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipType", wireType)
			}
			m.EquipType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EquipType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2COneKeyUseGemProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2COneKeyUseGemProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2COneKeyUseGemProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainId", wireType)
			}
			m.CaptainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGem
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GemId = append(m.GemId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGem
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGem
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGem
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GemId = append(m.GemId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GemId", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownAll", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DownAll = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipType", wireType)
			}
			m.EquipType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EquipType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SOneKeyCombineGemProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SOneKeyCombineGemProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SOneKeyCombineGemProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainId", wireType)
			}
			m.CaptainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotIdx", wireType)
			}
			m.SlotIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlotIdx |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Buy = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2COneKeyCombineGemProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2COneKeyCombineGemProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2COneKeyCombineGemProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainId", wireType)
			}
			m.CaptainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotIdx", wireType)
			}
			m.SlotIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlotIdx |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GemId", wireType)
			}
			m.GemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GemId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SRequestOneKeyCombineCostProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SRequestOneKeyCombineCostProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SRequestOneKeyCombineCostProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainId", wireType)
			}
			m.CaptainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotIdx", wireType)
			}
			m.SlotIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlotIdx |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GemId", wireType)
			}
			m.GemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GemId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CRequestOneKeyCombineCostProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CRequestOneKeyCombineCostProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CRequestOneKeyCombineCostProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainId", wireType)
			}
			m.CaptainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotIdx", wireType)
			}
			m.SlotIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlotIdx |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanCombine", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CanCombine = bool(v != 0)
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGem
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GemId = append(m.GemId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGem
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGem
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGem
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GemId = append(m.GemId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GemId", wireType)
			}
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGem
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GemCount = append(m.GemCount, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGem
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGem
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGem
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GemCount = append(m.GemCount, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GemCount", wireType)
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyCount", wireType)
			}
			m.BuyCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuyCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyYuanbao", wireType)
			}
			m.BuyYuanbao = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuyYuanbao |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SOneKeyCombineDepotGemProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SOneKeyCombineDepotGemProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SOneKeyCombineDepotGemProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GemId", wireType)
			}
			m.GemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GemId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewGemCount", wireType)
			}
			m.NewGemCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewGemCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Buy = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2COneKeyCombineDepotGemProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2COneKeyCombineDepotGemProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2COneKeyCombineDepotGemProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewGemId", wireType)
			}
			m.NewGemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewGemId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewGemCount", wireType)
			}
			m.NewGemCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewGemCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGem(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGem(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGem
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGem
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGem
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGem
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGem
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGem(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGem = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGem   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("github.com/lightpaw/male7/gen/pb/gem/gem.proto", fileDescriptorGem) }

var fileDescriptorGem = []byte{
	// 551 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x95, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xeb, 0x24, 0x4e, 0x9c, 0x89, 0xa8, 0x22, 0x53, 0x84, 0x2b, 0xc8, 0x1f, 0xf9, 0x94,
	0x53, 0x22, 0x99, 0x03, 0x67, 0xba, 0x48, 0x25, 0x42, 0x02, 0x14, 0xc3, 0x01, 0x2e, 0xd6, 0xda,
	0x1e, 0x5c, 0x0b, 0x7b, 0xd7, 0x25, 0x5e, 0xa5, 0x7e, 0x05, 0x9e, 0x80, 0x47, 0xe2, 0xc8, 0x23,
	0xa0, 0xf0, 0x10, 0x5c, 0xd1, 0x6e, 0x9c, 0xc4, 0x09, 0x52, 0xd5, 0xd2, 0xe6, 0x10, 0x65, 0x77,
	0xbe, 0xcd, 0xfc, 0x66, 0x66, 0xbf, 0xd8, 0x30, 0x8e, 0xe2, 0xfc, 0x42, 0xf8, 0xe3, 0x80, 0xa7,
	0x93, 0x24, 0x8e, 0x2e, 0xf2, 0x8c, 0x2e, 0x26, 0x29, 0x4d, 0xf0, 0xf9, 0x24, 0x42, 0x36, 0xc9,
	0xfc, 0x49, 0x84, 0xa9, 0xfc, 0x8c, 0xb3, 0xaf, 0x3c, 0xe7, 0xa6, 0xae, 0xbe, 0x6c, 0x01, 0xc7,
	0xc4, 0x71, 0x3f, 0xcc, 0xf1, 0x1c, 0xd3, 0x77, 0x4a, 0xe8, 0x01, 0x04, 0x34, 0xcb, 0x69, 0xcc,
	0xbc, 0x38, 0xb4, 0xb4, 0xa1, 0x36, 0xd2, 0x67, 0xed, 0x32, 0x32, 0x0d, 0xcd, 0x47, 0xd0, 0x8c,
	0x30, 0x95, 0x52, 0x4d, 0x49, 0x7a, 0x84, 0xe9, 0x34, 0x34, 0x4d, 0x68, 0x84, 0x7c, 0xc1, 0xac,
	0xfa, 0x50, 0x1b, 0x19, 0x33, 0xb5, 0x36, 0x4f, 0xc1, 0x98, 0x27, 0x3c, 0xf7, 0xe2, 0xf0, 0xca,
	0x6a, 0xa8, 0xc3, 0x2d, 0xb9, 0x9f, 0x86, 0x57, 0xb6, 0x07, 0xc7, 0xae, 0x43, 0x6e, 0x81, 0x7d,
	0x08, 0xba, 0xc8, 0xb6, 0xd4, 0x86, 0xc8, 0xa6, 0xe1, 0x75, 0x80, 0x00, 0xba, 0xc4, 0x71, 0xa7,
	0x2c, 0xa1, 0xc5, 0x4d, 0x11, 0xd5, 0x6c, 0xb5, 0x9d, 0x6c, 0x95, 0xa6, 0xeb, 0x95, 0xa6, 0x25,
	0xc4, 0x75, 0xc8, 0x81, 0x21, 0x6f, 0xc0, 0x24, 0x8e, 0x4b, 0x78, 0xea, 0xc7, 0x0c, 0xef, 0x8e,
	0xb1, 0x11, 0x4c, 0xd7, 0x21, 0xf7, 0x96, 0xaf, 0x52, 0xb6, 0x5e, 0x2d, 0x9b, 0xc3, 0x09, 0x71,
	0xdc, 0xb7, 0x0c, 0x5f, 0x63, 0x71, 0x8b, 0x7b, 0x3e, 0x05, 0x43, 0x7a, 0xc7, 0xa3, 0x49, 0xa2,
	0x40, 0xc6, 0xac, 0x25, 0xf7, 0x2f, 0x92, 0x44, 0xfe, 0x12, 0x2f, 0x45, 0x9c, 0x79, 0x79, 0x91,
	0x61, 0x39, 0xa3, 0xb6, 0x8a, 0xbc, 0x2f, 0x32, 0xb4, 0xbf, 0x69, 0x70, 0xe2, 0x3a, 0xe4, 0x3f,
	0x88, 0xdb, 0xb1, 0xd7, 0x47, 0xfa, 0x59, 0xad, 0x7b, 0xb4, 0x36, 0x75, 0xb5, 0x98, 0xc6, 0x75,
	0xc5, 0xe8, 0xfb, 0xc5, 0x7c, 0x06, 0x6b, 0xd3, 0xfd, 0xfd, 0x8d, 0xba, 0x0b, 0x75, 0x5f, 0x14,
	0xe5, 0x7f, 0x4c, 0x2e, 0xed, 0x2f, 0x60, 0x6d, 0x7a, 0x3e, 0xc4, 0x95, 0xee, 0x38, 0x71, 0x0e,
	0x43, 0xe2, 0xb8, 0x33, 0xbc, 0x14, 0x38, 0xcf, 0x77, 0x98, 0x84, 0xcf, 0xf3, 0x03, 0x41, 0xff,
	0x68, 0x30, 0x74, 0x1d, 0x72, 0x28, 0xea, 0x00, 0x3a, 0x01, 0x65, 0x5e, 0xb0, 0xca, 0x58, 0x8e,
	0x16, 0x02, 0xca, 0x4a, 0x46, 0xc5, 0x1e, 0x8d, 0x7d, 0x7b, 0x0c, 0xa0, 0x2d, 0xa5, 0x80, 0x0b,
	0x96, 0x5b, 0xfa, 0x46, 0x35, 0x22, 0x4c, 0x89, 0x8c, 0x99, 0x4f, 0xa0, 0xed, 0x8b, 0xa2, 0x3c,
	0xd0, 0x54, 0x60, 0xc3, 0x17, 0xc5, 0x4a, 0x1c, 0x40, 0x47, 0x8a, 0x85, 0xa0, 0xcc, 0xa7, 0xdc,
	0x6a, 0x29, 0x19, 0x7c, 0x51, 0x7c, 0x5c, 0x45, 0xec, 0x04, 0x7a, 0xfb, 0x1e, 0x7a, 0x89, 0x19,
	0xcf, 0x37, 0x17, 0xbc, 0x9d, 0x98, 0x56, 0x7d, 0x14, 0xdb, 0xf0, 0x80, 0xe1, 0xc2, 0xdb, 0x96,
	0xb6, 0x6a, 0xb9, 0xc3, 0x70, 0x71, 0xbe, 0xae, 0xec, 0x5f, 0x27, 0x51, 0xe8, 0xed, 0x3b, 0x69,
	0x97, 0xf6, 0x14, 0x60, 0x9d, 0x76, 0x43, 0x34, 0x56, 0x39, 0x6f, 0x06, 0x3d, 0x7b, 0xfc, 0x63,
	0xd9, 0xd7, 0x7e, 0x2e, 0xfb, 0xda, 0xaf, 0x65, 0x5f, 0xfb, 0xfe, 0xbb, 0x7f, 0xf4, 0x4a, 0xfb,
	0x54, 0x8f, 0x30, 0xf5, 0x9b, 0xea, 0x5d, 0xf4, 0xec, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x25,
	0x77, 0xf6, 0x9c, 0xc4, 0x06, 0x00, 0x00,
}
