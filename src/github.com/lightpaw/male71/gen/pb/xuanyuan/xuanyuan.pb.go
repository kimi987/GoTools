// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/gen/pb/xuanyuan/xuanyuan.proto
// DO NOT EDIT!

/*
	Package xuanyuan is a generated protocol buffer package.

	It is generated from these files:
		github.com/lightpaw/male7/gen/pb/xuanyuan/xuanyuan.proto

	It has these top-level messages:
		S2CRankIsEmptyProto
		S2CSelfInfoProto
		C2SListTargetProto
		S2CListTargetProto
		C2SQueryTargetTroopProto
		S2CQueryTargetTroopProto
		C2SChallengeProto
		S2CChallengeProto
		S2CUpdateXyInfoProto
		S2CAddRecordProto
		C2SListRecordProto
		S2CListRecordProto
		S2CCollectRankPrizeProto
*/
package xuanyuan

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import proto1 "github.com/lightpaw/male7/pb/shared_proto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type S2CRankIsEmptyProto struct {
	IsEmpty bool `protobuf:"varint,1,opt,name=is_empty,json=isEmpty,proto3" json:"is_empty,omitempty"`
}

func (m *S2CRankIsEmptyProto) Reset()                    { *m = S2CRankIsEmptyProto{} }
func (m *S2CRankIsEmptyProto) String() string            { return proto.CompactTextString(m) }
func (*S2CRankIsEmptyProto) ProtoMessage()               {}
func (*S2CRankIsEmptyProto) Descriptor() ([]byte, []int) { return fileDescriptorXuanyuan, []int{0} }

func (m *S2CRankIsEmptyProto) GetIsEmpty() bool {
	if m != nil {
		return m.IsEmpty
	}
	return false
}

type S2CSelfInfoProto struct {
	Rank            int32    `protobuf:"varint,2,opt,name=rank,proto3" json:"rank,omitempty"`
	Score           int32    `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty"`
	Win             int32    `protobuf:"varint,4,opt,name=win,proto3" json:"win,omitempty"`
	Lose            int32    `protobuf:"varint,5,opt,name=lose,proto3" json:"lose,omitempty"`
	RangeId         int32    `protobuf:"varint,8,opt,name=range_id,json=rangeId,proto3" json:"range_id,omitempty"`
	FirstTargetRank int32    `protobuf:"varint,7,opt,name=first_target_rank,json=firstTargetRank,proto3" json:"first_target_rank,omitempty"`
	Targets         [][]byte `protobuf:"bytes,6,rep,name=targets" json:"targets,omitempty"`
}

func (m *S2CSelfInfoProto) Reset()                    { *m = S2CSelfInfoProto{} }
func (m *S2CSelfInfoProto) String() string            { return proto.CompactTextString(m) }
func (*S2CSelfInfoProto) ProtoMessage()               {}
func (*S2CSelfInfoProto) Descriptor() ([]byte, []int) { return fileDescriptorXuanyuan, []int{1} }

func (m *S2CSelfInfoProto) GetRank() int32 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *S2CSelfInfoProto) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *S2CSelfInfoProto) GetWin() int32 {
	if m != nil {
		return m.Win
	}
	return 0
}

func (m *S2CSelfInfoProto) GetLose() int32 {
	if m != nil {
		return m.Lose
	}
	return 0
}

func (m *S2CSelfInfoProto) GetRangeId() int32 {
	if m != nil {
		return m.RangeId
	}
	return 0
}

func (m *S2CSelfInfoProto) GetFirstTargetRank() int32 {
	if m != nil {
		return m.FirstTargetRank
	}
	return 0
}

func (m *S2CSelfInfoProto) GetTargets() [][]byte {
	if m != nil {
		return m.Targets
	}
	return nil
}

type C2SListTargetProto struct {
	RangeId int32 `protobuf:"varint,1,opt,name=range_id,json=rangeId,proto3" json:"range_id,omitempty"`
}

func (m *C2SListTargetProto) Reset()                    { *m = C2SListTargetProto{} }
func (m *C2SListTargetProto) String() string            { return proto.CompactTextString(m) }
func (*C2SListTargetProto) ProtoMessage()               {}
func (*C2SListTargetProto) Descriptor() ([]byte, []int) { return fileDescriptorXuanyuan, []int{2} }

func (m *C2SListTargetProto) GetRangeId() int32 {
	if m != nil {
		return m.RangeId
	}
	return 0
}

type S2CListTargetProto struct {
	RangeId         int32    `protobuf:"varint,1,opt,name=range_id,json=rangeId,proto3" json:"range_id,omitempty"`
	FirstTargetRank int32    `protobuf:"varint,2,opt,name=first_target_rank,json=firstTargetRank,proto3" json:"first_target_rank,omitempty"`
	Targets         [][]byte `protobuf:"bytes,3,rep,name=targets" json:"targets,omitempty"`
}

func (m *S2CListTargetProto) Reset()                    { *m = S2CListTargetProto{} }
func (m *S2CListTargetProto) String() string            { return proto.CompactTextString(m) }
func (*S2CListTargetProto) ProtoMessage()               {}
func (*S2CListTargetProto) Descriptor() ([]byte, []int) { return fileDescriptorXuanyuan, []int{3} }

func (m *S2CListTargetProto) GetRangeId() int32 {
	if m != nil {
		return m.RangeId
	}
	return 0
}

func (m *S2CListTargetProto) GetFirstTargetRank() int32 {
	if m != nil {
		return m.FirstTargetRank
	}
	return 0
}

func (m *S2CListTargetProto) GetTargets() [][]byte {
	if m != nil {
		return m.Targets
	}
	return nil
}

type C2SQueryTargetTroopProto struct {
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SQueryTargetTroopProto) Reset()                    { *m = C2SQueryTargetTroopProto{} }
func (m *C2SQueryTargetTroopProto) String() string            { return proto.CompactTextString(m) }
func (*C2SQueryTargetTroopProto) ProtoMessage()               {}
func (*C2SQueryTargetTroopProto) Descriptor() ([]byte, []int) { return fileDescriptorXuanyuan, []int{4} }

func (m *C2SQueryTargetTroopProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type S2CQueryTargetTroopProto struct {
	Id      []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Version int32  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	Player  []byte `protobuf:"bytes,4,opt,name=player,proto3" json:"player,omitempty"`
}

func (m *S2CQueryTargetTroopProto) Reset()                    { *m = S2CQueryTargetTroopProto{} }
func (m *S2CQueryTargetTroopProto) String() string            { return proto.CompactTextString(m) }
func (*S2CQueryTargetTroopProto) ProtoMessage()               {}
func (*S2CQueryTargetTroopProto) Descriptor() ([]byte, []int) { return fileDescriptorXuanyuan, []int{5} }

func (m *S2CQueryTargetTroopProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *S2CQueryTargetTroopProto) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *S2CQueryTargetTroopProto) GetPlayer() []byte {
	if m != nil {
		return m.Player
	}
	return nil
}

type C2SChallengeProto struct {
	Id      []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Version int32  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *C2SChallengeProto) Reset()                    { *m = C2SChallengeProto{} }
func (m *C2SChallengeProto) String() string            { return proto.CompactTextString(m) }
func (*C2SChallengeProto) ProtoMessage()               {}
func (*C2SChallengeProto) Descriptor() ([]byte, []int) { return fileDescriptorXuanyuan, []int{6} }

func (m *C2SChallengeProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *C2SChallengeProto) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type S2CChallengeProto struct {
	Id       []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Link     string `protobuf:"bytes,2,opt,name=link,proto3" json:"link,omitempty"`
	AddScore int32  `protobuf:"varint,3,opt,name=add_score,json=addScore,proto3" json:"add_score,omitempty"`
}

func (m *S2CChallengeProto) Reset()                    { *m = S2CChallengeProto{} }
func (m *S2CChallengeProto) String() string            { return proto.CompactTextString(m) }
func (*S2CChallengeProto) ProtoMessage()               {}
func (*S2CChallengeProto) Descriptor() ([]byte, []int) { return fileDescriptorXuanyuan, []int{7} }

func (m *S2CChallengeProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *S2CChallengeProto) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *S2CChallengeProto) GetAddScore() int32 {
	if m != nil {
		return m.AddScore
	}
	return 0
}

type S2CUpdateXyInfoProto struct {
	Score int32 `protobuf:"varint,1,opt,name=score,proto3" json:"score,omitempty"`
	Win   int32 `protobuf:"varint,2,opt,name=win,proto3" json:"win,omitempty"`
	Lose  int32 `protobuf:"varint,3,opt,name=lose,proto3" json:"lose,omitempty"`
}

func (m *S2CUpdateXyInfoProto) Reset()                    { *m = S2CUpdateXyInfoProto{} }
func (m *S2CUpdateXyInfoProto) String() string            { return proto.CompactTextString(m) }
func (*S2CUpdateXyInfoProto) ProtoMessage()               {}
func (*S2CUpdateXyInfoProto) Descriptor() ([]byte, []int) { return fileDescriptorXuanyuan, []int{8} }

func (m *S2CUpdateXyInfoProto) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *S2CUpdateXyInfoProto) GetWin() int32 {
	if m != nil {
		return m.Win
	}
	return 0
}

func (m *S2CUpdateXyInfoProto) GetLose() int32 {
	if m != nil {
		return m.Lose
	}
	return 0
}

type S2CAddRecordProto struct {
	Id   int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *S2CAddRecordProto) Reset()                    { *m = S2CAddRecordProto{} }
func (m *S2CAddRecordProto) String() string            { return proto.CompactTextString(m) }
func (*S2CAddRecordProto) ProtoMessage()               {}
func (*S2CAddRecordProto) Descriptor() ([]byte, []int) { return fileDescriptorXuanyuan, []int{9} }

func (m *S2CAddRecordProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *S2CAddRecordProto) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type C2SListRecordProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Up bool  `protobuf:"varint,2,opt,name=up,proto3" json:"up,omitempty"`
}

func (m *C2SListRecordProto) Reset()                    { *m = C2SListRecordProto{} }
func (m *C2SListRecordProto) String() string            { return proto.CompactTextString(m) }
func (*C2SListRecordProto) ProtoMessage()               {}
func (*C2SListRecordProto) Descriptor() ([]byte, []int) { return fileDescriptorXuanyuan, []int{10} }

func (m *C2SListRecordProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *C2SListRecordProto) GetUp() bool {
	if m != nil {
		return m.Up
	}
	return false
}

type S2CListRecordProto struct {
	Id   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Up   bool     `protobuf:"varint,2,opt,name=up,proto3" json:"up,omitempty"`
	Ids  []int32  `protobuf:"varint,3,rep,name=ids" json:"ids,omitempty"`
	Data [][]byte `protobuf:"bytes,4,rep,name=data" json:"data,omitempty"`
}

func (m *S2CListRecordProto) Reset()                    { *m = S2CListRecordProto{} }
func (m *S2CListRecordProto) String() string            { return proto.CompactTextString(m) }
func (*S2CListRecordProto) ProtoMessage()               {}
func (*S2CListRecordProto) Descriptor() ([]byte, []int) { return fileDescriptorXuanyuan, []int{11} }

func (m *S2CListRecordProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *S2CListRecordProto) GetUp() bool {
	if m != nil {
		return m.Up
	}
	return false
}

func (m *S2CListRecordProto) GetIds() []int32 {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *S2CListRecordProto) GetData() [][]byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type S2CCollectRankPrizeProto struct {
	Prize *proto1.PrizeProto `protobuf:"bytes,1,opt,name=prize" json:"prize,omitempty"`
}

func (m *S2CCollectRankPrizeProto) Reset()         { *m = S2CCollectRankPrizeProto{} }
func (m *S2CCollectRankPrizeProto) String() string { return proto.CompactTextString(m) }
func (*S2CCollectRankPrizeProto) ProtoMessage()    {}
func (*S2CCollectRankPrizeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorXuanyuan, []int{12}
}

func (m *S2CCollectRankPrizeProto) GetPrize() *proto1.PrizeProto {
	if m != nil {
		return m.Prize
	}
	return nil
}

func init() {
	proto.RegisterType((*S2CRankIsEmptyProto)(nil), "proto.S2CRankIsEmptyProto")
	proto.RegisterType((*S2CSelfInfoProto)(nil), "proto.S2CSelfInfoProto")
	proto.RegisterType((*C2SListTargetProto)(nil), "proto.C2SListTargetProto")
	proto.RegisterType((*S2CListTargetProto)(nil), "proto.S2CListTargetProto")
	proto.RegisterType((*C2SQueryTargetTroopProto)(nil), "proto.C2SQueryTargetTroopProto")
	proto.RegisterType((*S2CQueryTargetTroopProto)(nil), "proto.S2CQueryTargetTroopProto")
	proto.RegisterType((*C2SChallengeProto)(nil), "proto.C2SChallengeProto")
	proto.RegisterType((*S2CChallengeProto)(nil), "proto.S2CChallengeProto")
	proto.RegisterType((*S2CUpdateXyInfoProto)(nil), "proto.S2CUpdateXyInfoProto")
	proto.RegisterType((*S2CAddRecordProto)(nil), "proto.S2CAddRecordProto")
	proto.RegisterType((*C2SListRecordProto)(nil), "proto.C2SListRecordProto")
	proto.RegisterType((*S2CListRecordProto)(nil), "proto.S2CListRecordProto")
	proto.RegisterType((*S2CCollectRankPrizeProto)(nil), "proto.S2CCollectRankPrizeProto")
}
func (m *S2CRankIsEmptyProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CRankIsEmptyProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsEmpty {
		dAtA[i] = 0x8
		i++
		if m.IsEmpty {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CSelfInfoProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSelfInfoProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rank != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintXuanyuan(dAtA, i, uint64(m.Rank))
	}
	if m.Score != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintXuanyuan(dAtA, i, uint64(m.Score))
	}
	if m.Win != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintXuanyuan(dAtA, i, uint64(m.Win))
	}
	if m.Lose != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintXuanyuan(dAtA, i, uint64(m.Lose))
	}
	if len(m.Targets) > 0 {
		for _, b := range m.Targets {
			dAtA[i] = 0x32
			i++
			i = encodeVarintXuanyuan(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.FirstTargetRank != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintXuanyuan(dAtA, i, uint64(m.FirstTargetRank))
	}
	if m.RangeId != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintXuanyuan(dAtA, i, uint64(m.RangeId))
	}
	return i, nil
}

func (m *C2SListTargetProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SListTargetProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RangeId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintXuanyuan(dAtA, i, uint64(m.RangeId))
	}
	return i, nil
}

func (m *S2CListTargetProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CListTargetProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RangeId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintXuanyuan(dAtA, i, uint64(m.RangeId))
	}
	if m.FirstTargetRank != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintXuanyuan(dAtA, i, uint64(m.FirstTargetRank))
	}
	if len(m.Targets) > 0 {
		for _, b := range m.Targets {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintXuanyuan(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *C2SQueryTargetTroopProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SQueryTargetTroopProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXuanyuan(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *S2CQueryTargetTroopProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CQueryTargetTroopProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXuanyuan(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Version != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintXuanyuan(dAtA, i, uint64(m.Version))
	}
	if len(m.Player) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintXuanyuan(dAtA, i, uint64(len(m.Player)))
		i += copy(dAtA[i:], m.Player)
	}
	return i, nil
}

func (m *C2SChallengeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SChallengeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXuanyuan(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Version != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintXuanyuan(dAtA, i, uint64(m.Version))
	}
	return i, nil
}

func (m *S2CChallengeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CChallengeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXuanyuan(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Link) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintXuanyuan(dAtA, i, uint64(len(m.Link)))
		i += copy(dAtA[i:], m.Link)
	}
	if m.AddScore != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintXuanyuan(dAtA, i, uint64(m.AddScore))
	}
	return i, nil
}

func (m *S2CUpdateXyInfoProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateXyInfoProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Score != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintXuanyuan(dAtA, i, uint64(m.Score))
	}
	if m.Win != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintXuanyuan(dAtA, i, uint64(m.Win))
	}
	if m.Lose != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintXuanyuan(dAtA, i, uint64(m.Lose))
	}
	return i, nil
}

func (m *S2CAddRecordProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CAddRecordProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintXuanyuan(dAtA, i, uint64(m.Id))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintXuanyuan(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *C2SListRecordProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SListRecordProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintXuanyuan(dAtA, i, uint64(m.Id))
	}
	if m.Up {
		dAtA[i] = 0x10
		i++
		if m.Up {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CListRecordProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CListRecordProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintXuanyuan(dAtA, i, uint64(m.Id))
	}
	if m.Up {
		dAtA[i] = 0x10
		i++
		if m.Up {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Ids) > 0 {
		for _, num := range m.Ids {
			dAtA[i] = 0x18
			i++
			i = encodeVarintXuanyuan(dAtA, i, uint64(num))
		}
	}
	if len(m.Data) > 0 {
		for _, b := range m.Data {
			dAtA[i] = 0x22
			i++
			i = encodeVarintXuanyuan(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *S2CCollectRankPrizeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCollectRankPrizeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Prize != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXuanyuan(dAtA, i, uint64(m.Prize.Size()))
		n1, err := m.Prize.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func encodeFixed64Xuanyuan(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Xuanyuan(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintXuanyuan(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *S2CRankIsEmptyProto) Size() (n int) {
	var l int
	_ = l
	if m.IsEmpty {
		n += 2
	}
	return n
}

func (m *S2CSelfInfoProto) Size() (n int) {
	var l int
	_ = l
	if m.Rank != 0 {
		n += 1 + sovXuanyuan(uint64(m.Rank))
	}
	if m.Score != 0 {
		n += 1 + sovXuanyuan(uint64(m.Score))
	}
	if m.Win != 0 {
		n += 1 + sovXuanyuan(uint64(m.Win))
	}
	if m.Lose != 0 {
		n += 1 + sovXuanyuan(uint64(m.Lose))
	}
	if len(m.Targets) > 0 {
		for _, b := range m.Targets {
			l = len(b)
			n += 1 + l + sovXuanyuan(uint64(l))
		}
	}
	if m.FirstTargetRank != 0 {
		n += 1 + sovXuanyuan(uint64(m.FirstTargetRank))
	}
	if m.RangeId != 0 {
		n += 1 + sovXuanyuan(uint64(m.RangeId))
	}
	return n
}

func (m *C2SListTargetProto) Size() (n int) {
	var l int
	_ = l
	if m.RangeId != 0 {
		n += 1 + sovXuanyuan(uint64(m.RangeId))
	}
	return n
}

func (m *S2CListTargetProto) Size() (n int) {
	var l int
	_ = l
	if m.RangeId != 0 {
		n += 1 + sovXuanyuan(uint64(m.RangeId))
	}
	if m.FirstTargetRank != 0 {
		n += 1 + sovXuanyuan(uint64(m.FirstTargetRank))
	}
	if len(m.Targets) > 0 {
		for _, b := range m.Targets {
			l = len(b)
			n += 1 + l + sovXuanyuan(uint64(l))
		}
	}
	return n
}

func (m *C2SQueryTargetTroopProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovXuanyuan(uint64(l))
	}
	return n
}

func (m *S2CQueryTargetTroopProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovXuanyuan(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovXuanyuan(uint64(m.Version))
	}
	l = len(m.Player)
	if l > 0 {
		n += 1 + l + sovXuanyuan(uint64(l))
	}
	return n
}

func (m *C2SChallengeProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovXuanyuan(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovXuanyuan(uint64(m.Version))
	}
	return n
}

func (m *S2CChallengeProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovXuanyuan(uint64(l))
	}
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovXuanyuan(uint64(l))
	}
	if m.AddScore != 0 {
		n += 1 + sovXuanyuan(uint64(m.AddScore))
	}
	return n
}

func (m *S2CUpdateXyInfoProto) Size() (n int) {
	var l int
	_ = l
	if m.Score != 0 {
		n += 1 + sovXuanyuan(uint64(m.Score))
	}
	if m.Win != 0 {
		n += 1 + sovXuanyuan(uint64(m.Win))
	}
	if m.Lose != 0 {
		n += 1 + sovXuanyuan(uint64(m.Lose))
	}
	return n
}

func (m *S2CAddRecordProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovXuanyuan(uint64(m.Id))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovXuanyuan(uint64(l))
	}
	return n
}

func (m *C2SListRecordProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovXuanyuan(uint64(m.Id))
	}
	if m.Up {
		n += 2
	}
	return n
}

func (m *S2CListRecordProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovXuanyuan(uint64(m.Id))
	}
	if m.Up {
		n += 2
	}
	if len(m.Ids) > 0 {
		for _, e := range m.Ids {
			n += 1 + sovXuanyuan(uint64(e))
		}
	}
	if len(m.Data) > 0 {
		for _, b := range m.Data {
			l = len(b)
			n += 1 + l + sovXuanyuan(uint64(l))
		}
	}
	return n
}

func (m *S2CCollectRankPrizeProto) Size() (n int) {
	var l int
	_ = l
	if m.Prize != nil {
		l = m.Prize.Size()
		n += 1 + l + sovXuanyuan(uint64(l))
	}
	return n
}

func sovXuanyuan(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozXuanyuan(x uint64) (n int) {
	return sovXuanyuan(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *S2CRankIsEmptyProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXuanyuan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CRankIsEmptyProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CRankIsEmptyProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEmpty", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXuanyuan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEmpty = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipXuanyuan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXuanyuan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSelfInfoProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXuanyuan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSelfInfoProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSelfInfoProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXuanyuan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXuanyuan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Win", wireType)
			}
			m.Win = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXuanyuan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Win |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lose", wireType)
			}
			m.Lose = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXuanyuan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lose |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Targets", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXuanyuan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthXuanyuan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Targets = append(m.Targets, make([]byte, postIndex-iNdEx))
			copy(m.Targets[len(m.Targets)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstTargetRank", wireType)
			}
			m.FirstTargetRank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXuanyuan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstTargetRank |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeId", wireType)
			}
			m.RangeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXuanyuan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXuanyuan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXuanyuan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SListTargetProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXuanyuan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SListTargetProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SListTargetProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeId", wireType)
			}
			m.RangeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXuanyuan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXuanyuan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXuanyuan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CListTargetProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXuanyuan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CListTargetProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CListTargetProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeId", wireType)
			}
			m.RangeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXuanyuan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstTargetRank", wireType)
			}
			m.FirstTargetRank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXuanyuan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstTargetRank |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Targets", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXuanyuan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthXuanyuan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Targets = append(m.Targets, make([]byte, postIndex-iNdEx))
			copy(m.Targets[len(m.Targets)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXuanyuan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXuanyuan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SQueryTargetTroopProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXuanyuan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SQueryTargetTroopProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SQueryTargetTroopProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXuanyuan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthXuanyuan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXuanyuan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXuanyuan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CQueryTargetTroopProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXuanyuan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CQueryTargetTroopProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CQueryTargetTroopProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXuanyuan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthXuanyuan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXuanyuan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Player", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXuanyuan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthXuanyuan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Player = append(m.Player[:0], dAtA[iNdEx:postIndex]...)
			if m.Player == nil {
				m.Player = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXuanyuan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXuanyuan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SChallengeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXuanyuan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SChallengeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SChallengeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXuanyuan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthXuanyuan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXuanyuan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXuanyuan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXuanyuan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CChallengeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXuanyuan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CChallengeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CChallengeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXuanyuan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthXuanyuan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXuanyuan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthXuanyuan
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddScore", wireType)
			}
			m.AddScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXuanyuan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddScore |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXuanyuan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXuanyuan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateXyInfoProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXuanyuan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateXyInfoProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateXyInfoProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXuanyuan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Win", wireType)
			}
			m.Win = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXuanyuan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Win |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lose", wireType)
			}
			m.Lose = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXuanyuan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lose |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXuanyuan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXuanyuan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CAddRecordProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXuanyuan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CAddRecordProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CAddRecordProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXuanyuan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXuanyuan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthXuanyuan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXuanyuan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXuanyuan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SListRecordProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXuanyuan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SListRecordProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SListRecordProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXuanyuan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Up", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXuanyuan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Up = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipXuanyuan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXuanyuan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CListRecordProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXuanyuan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CListRecordProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CListRecordProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXuanyuan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Up", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXuanyuan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Up = bool(v != 0)
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXuanyuan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXuanyuan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthXuanyuan
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXuanyuan
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXuanyuan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthXuanyuan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, make([]byte, postIndex-iNdEx))
			copy(m.Data[len(m.Data)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXuanyuan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXuanyuan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCollectRankPrizeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXuanyuan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCollectRankPrizeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCollectRankPrizeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXuanyuan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXuanyuan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Prize == nil {
				m.Prize = &proto1.PrizeProto{}
			}
			if err := m.Prize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXuanyuan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXuanyuan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipXuanyuan(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowXuanyuan
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowXuanyuan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowXuanyuan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthXuanyuan
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowXuanyuan
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipXuanyuan(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthXuanyuan = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowXuanyuan   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/gen/pb/xuanyuan/xuanyuan.proto", fileDescriptorXuanyuan)
}

var fileDescriptorXuanyuan = []byte{
	// 576 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xae, 0xed, 0x3a, 0x71, 0x97, 0xa8, 0x24, 0x26, 0x42, 0xe6, 0x47, 0x51, 0xe4, 0x0b, 0x51,
	0x0f, 0x31, 0x32, 0x95, 0xca, 0x85, 0x03, 0x5d, 0x21, 0x11, 0x89, 0x43, 0x59, 0x07, 0x09, 0x21,
	0x84, 0xb5, 0xc9, 0x6e, 0x9c, 0x55, 0x1d, 0xdb, 0x5a, 0xdb, 0x94, 0xf0, 0x24, 0xbc, 0x0f, 0x17,
	0x8e, 0x3c, 0x02, 0x0a, 0x2f, 0x82, 0x3c, 0x9b, 0x38, 0x2d, 0x04, 0x68, 0x4f, 0x9e, 0x6f, 0x76,
	0xbe, 0x99, 0x6f, 0xd6, 0x9f, 0x16, 0x3d, 0x8d, 0x44, 0x31, 0x2f, 0x27, 0xc3, 0x69, 0xba, 0xf0,
	0x62, 0x11, 0xcd, 0x8b, 0x8c, 0x5e, 0x78, 0x0b, 0x1a, 0xf3, 0x13, 0x2f, 0xe2, 0x89, 0x97, 0x4d,
	0xbc, 0x4f, 0x25, 0x4d, 0x96, 0x25, 0x4d, 0xea, 0x60, 0x98, 0xc9, 0xb4, 0x48, 0x6d, 0x13, 0x3e,
	0xf7, 0x8f, 0xff, 0xde, 0x20, 0x9b, 0x78, 0xf9, 0x9c, 0x4a, 0xce, 0x42, 0x28, 0xf5, 0x26, 0x34,
	0xe7, 0x8a, 0xec, 0x3e, 0x46, 0x77, 0x02, 0x1f, 0x13, 0x9a, 0x9c, 0x8f, 0xf2, 0x17, 0x8b, 0xac,
	0x58, 0x9e, 0x41, 0xcf, 0x7b, 0xc8, 0x12, 0x79, 0xc8, 0xab, 0x84, 0xa3, 0xf5, 0xb5, 0x81, 0x45,
	0x9a, 0x42, 0x9d, 0xbb, 0x5f, 0x35, 0xd4, 0x0e, 0x7c, 0x1c, 0xf0, 0x78, 0x36, 0x4a, 0x66, 0xa9,
	0xaa, 0xb7, 0xd1, 0xbe, 0xa4, 0xc9, 0xb9, 0xa3, 0xf7, 0xb5, 0x81, 0x49, 0x20, 0xb6, 0xbb, 0xc8,
	0xcc, 0xa7, 0xa9, 0xe4, 0x8e, 0x01, 0x49, 0x05, 0xec, 0x36, 0x32, 0x2e, 0x44, 0xe2, 0xec, 0x43,
	0xae, 0x0a, 0x2b, 0x6e, 0x9c, 0xe6, 0xdc, 0x31, 0x15, 0xb7, 0x8a, 0x6d, 0x07, 0x35, 0x0b, 0x2a,
	0x23, 0x5e, 0xe4, 0x4e, 0xa3, 0x6f, 0x0c, 0x5a, 0x64, 0x03, 0xed, 0x23, 0xd4, 0x99, 0x09, 0x99,
	0x17, 0xa1, 0x4a, 0x84, 0x30, 0xb6, 0x09, 0xd4, 0xdb, 0x70, 0x30, 0x86, 0x7c, 0xb5, 0x51, 0xb5,
	0x85, 0xa4, 0x49, 0xc4, 0x43, 0xc1, 0x1c, 0x0b, 0x4a, 0x9a, 0x80, 0x47, 0xcc, 0xf5, 0x90, 0x8d,
	0xfd, 0xe0, 0x95, 0xd8, 0xd4, 0xd7, 0x6b, 0xd7, 0x04, 0xed, 0x2a, 0xa1, 0x44, 0x76, 0xe0, 0xe3,
	0xeb, 0x13, 0x76, 0x0b, 0xd5, 0x77, 0x0b, 0xbd, 0xb4, 0xae, 0x71, 0x65, 0x5d, 0xf7, 0x08, 0x39,
	0xd8, 0x0f, 0x5e, 0x97, 0x5c, 0x2e, 0x55, 0xfd, 0x58, 0xa6, 0x69, 0xa6, 0x86, 0x1f, 0x22, 0x7d,
	0x3d, 0xb6, 0x45, 0x74, 0xc1, 0xdc, 0xf7, 0xc8, 0x09, 0x7c, 0x7c, 0xad, 0xda, 0x6a, 0xe2, 0x47,
	0x2e, 0x73, 0x91, 0x26, 0x6b, 0x4d, 0x1b, 0x68, 0xdf, 0x45, 0x8d, 0x2c, 0xa6, 0x4b, 0x2e, 0xe1,
	0x1f, 0xb5, 0xc8, 0x1a, 0xb9, 0xcf, 0x50, 0x07, 0xfb, 0x01, 0x9e, 0xd3, 0x38, 0xe6, 0x49, 0xc4,
	0x6f, 0xd8, 0xd6, 0x1d, 0xa3, 0x4e, 0xe0, 0xe3, 0xff, 0xd0, 0x2b, 0x2b, 0x88, 0xf5, 0x35, 0x1d,
	0x10, 0x88, 0xed, 0x07, 0xe8, 0x80, 0x32, 0x16, 0x5e, 0xb6, 0x92, 0x45, 0x19, 0x0b, 0x2a, 0xec,
	0x12, 0xd4, 0x0d, 0x7c, 0xfc, 0x26, 0x63, 0xb4, 0xe0, 0x6f, 0x97, 0x5b, 0x3f, 0xd6, 0xde, 0xd3,
	0x76, 0x78, 0x4f, 0xff, 0xd3, 0x7b, 0xc6, 0xd6, 0x7b, 0xee, 0x09, 0x28, 0x7d, 0xce, 0x18, 0xe1,
	0xd3, 0x54, 0xb2, 0xdf, 0x95, 0x9a, 0x1b, 0xa5, 0x8c, 0x16, 0x14, 0x7a, 0xb5, 0x08, 0xc4, 0xee,
	0x71, 0xed, 0xa9, 0x7f, 0x31, 0x0f, 0x91, 0x5e, 0x66, 0xc0, 0xb3, 0x88, 0x5e, 0x66, 0xee, 0x87,
	0xda, 0x58, 0x37, 0x60, 0xd9, 0x5d, 0x64, 0x08, 0xa6, 0xdc, 0x62, 0x9e, 0xea, 0xed, 0x3d, 0x52,
	0xc1, 0x5a, 0xd5, 0x3e, 0x98, 0x48, 0xa9, 0xc2, 0xe0, 0x0a, 0x9c, 0xc6, 0x31, 0x9f, 0x82, 0xdb,
	0xce, 0xa4, 0xf8, 0xbc, 0xbe, 0xff, 0x47, 0xc8, 0xcc, 0x2a, 0x04, 0x83, 0x6e, 0xf9, 0x1d, 0xf5,
	0x28, 0x0c, 0xb7, 0x15, 0x44, 0x9d, 0x9f, 0x3e, 0xfc, 0xb6, 0xea, 0x69, 0xdf, 0x57, 0x3d, 0xed,
	0xc7, 0xaa, 0xa7, 0x7d, 0xf9, 0xd9, 0xdb, 0x7b, 0xa9, 0xbd, 0xb3, 0x36, 0xef, 0xd0, 0xa4, 0x01,
	0xb4, 0x27, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0xde, 0xcc, 0x3e, 0x3a, 0xc4, 0x04, 0x00, 0x00,
}
