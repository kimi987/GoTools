// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/gen/pb/garden/garden.proto
// DO NOT EDIT!

/*
	Package garden is a generated protocol buffer package.

	It is generated from these files:
		github.com/lightpaw/male7/gen/pb/garden/garden.proto

	It has these top-level messages:
		S2CListTreasuryTreeHeroProto
		C2SListHelpMeProto
		S2CListHelpMeProto
		S2CListTreasuryTreeTimesProto
		C2SWaterTreasuryTreeProto
		S2CWaterTreasuryTreeProto
		S2CUpdateSelfTreasuryTreeTimesProto
		S2CUpdateSelfTreasuryTreeFullProto
*/
package garden

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type S2CListTreasuryTreeHeroProto struct {
	HeroId           [][]byte `protobuf:"bytes,1,rep,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	HeroName         []string `protobuf:"bytes,2,rep,name=hero_name,json=heroName" json:"hero_name,omitempty"`
	HeroHead         []string `protobuf:"bytes,3,rep,name=hero_head,json=heroHead" json:"hero_head,omitempty"`
	HeroGuild        []int32  `protobuf:"varint,4,rep,name=hero_guild,json=heroGuild" json:"hero_guild,omitempty"`
	HeroFriend       []bool   `protobuf:"varint,5,rep,name=hero_friend,json=heroFriend" json:"hero_friend,omitempty"`
	HeroWaterTimes   []int32  `protobuf:"varint,6,rep,name=hero_water_times,json=heroWaterTimes" json:"hero_water_times,omitempty"`
	GuildId          []int32  `protobuf:"varint,7,rep,name=guild_id,json=guildId" json:"guild_id,omitempty"`
	FlagName         []string `protobuf:"bytes,8,rep,name=flag_name,json=flagName" json:"flag_name,omitempty"`
	HelpMeHeroId     [][]byte `protobuf:"bytes,9,rep,name=help_me_hero_id,json=helpMeHeroId" json:"help_me_hero_id,omitempty"`
	HelpMeHeroName   []string `protobuf:"bytes,10,rep,name=help_me_hero_name,json=helpMeHeroName" json:"help_me_hero_name,omitempty"`
	HelpMeHeroGuild  []int32  `protobuf:"varint,11,rep,name=help_me_hero_guild,json=helpMeHeroGuild" json:"help_me_hero_guild,omitempty"`
	HelpMeHeroSeason []int32  `protobuf:"varint,12,rep,name=help_me_hero_season,json=helpMeHeroSeason" json:"help_me_hero_season,omitempty"`
}

func (m *S2CListTreasuryTreeHeroProto) Reset()         { *m = S2CListTreasuryTreeHeroProto{} }
func (m *S2CListTreasuryTreeHeroProto) String() string { return proto.CompactTextString(m) }
func (*S2CListTreasuryTreeHeroProto) ProtoMessage()    {}
func (*S2CListTreasuryTreeHeroProto) Descriptor() ([]byte, []int) {
	return fileDescriptorGarden, []int{0}
}

func (m *S2CListTreasuryTreeHeroProto) GetHeroId() [][]byte {
	if m != nil {
		return m.HeroId
	}
	return nil
}

func (m *S2CListTreasuryTreeHeroProto) GetHeroName() []string {
	if m != nil {
		return m.HeroName
	}
	return nil
}

func (m *S2CListTreasuryTreeHeroProto) GetHeroHead() []string {
	if m != nil {
		return m.HeroHead
	}
	return nil
}

func (m *S2CListTreasuryTreeHeroProto) GetHeroGuild() []int32 {
	if m != nil {
		return m.HeroGuild
	}
	return nil
}

func (m *S2CListTreasuryTreeHeroProto) GetHeroFriend() []bool {
	if m != nil {
		return m.HeroFriend
	}
	return nil
}

func (m *S2CListTreasuryTreeHeroProto) GetHeroWaterTimes() []int32 {
	if m != nil {
		return m.HeroWaterTimes
	}
	return nil
}

func (m *S2CListTreasuryTreeHeroProto) GetGuildId() []int32 {
	if m != nil {
		return m.GuildId
	}
	return nil
}

func (m *S2CListTreasuryTreeHeroProto) GetFlagName() []string {
	if m != nil {
		return m.FlagName
	}
	return nil
}

func (m *S2CListTreasuryTreeHeroProto) GetHelpMeHeroId() [][]byte {
	if m != nil {
		return m.HelpMeHeroId
	}
	return nil
}

func (m *S2CListTreasuryTreeHeroProto) GetHelpMeHeroName() []string {
	if m != nil {
		return m.HelpMeHeroName
	}
	return nil
}

func (m *S2CListTreasuryTreeHeroProto) GetHelpMeHeroGuild() []int32 {
	if m != nil {
		return m.HelpMeHeroGuild
	}
	return nil
}

func (m *S2CListTreasuryTreeHeroProto) GetHelpMeHeroSeason() []int32 {
	if m != nil {
		return m.HelpMeHeroSeason
	}
	return nil
}

type C2SListHelpMeProto struct {
	TargetId []byte `protobuf:"bytes,1,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
}

func (m *C2SListHelpMeProto) Reset()                    { *m = C2SListHelpMeProto{} }
func (m *C2SListHelpMeProto) String() string            { return proto.CompactTextString(m) }
func (*C2SListHelpMeProto) ProtoMessage()               {}
func (*C2SListHelpMeProto) Descriptor() ([]byte, []int) { return fileDescriptorGarden, []int{1} }

func (m *C2SListHelpMeProto) GetTargetId() []byte {
	if m != nil {
		return m.TargetId
	}
	return nil
}

type S2CListHelpMeProto struct {
	TargetId           []byte   `protobuf:"bytes,5,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	HelpMeHeroId       [][]byte `protobuf:"bytes,1,rep,name=help_me_hero_id,json=helpMeHeroId" json:"help_me_hero_id,omitempty"`
	HelpMeHeroName     []string `protobuf:"bytes,2,rep,name=help_me_hero_name,json=helpMeHeroName" json:"help_me_hero_name,omitempty"`
	HelpMeHeroGuild    []int32  `protobuf:"varint,6,rep,name=help_me_hero_guild,json=helpMeHeroGuild" json:"help_me_hero_guild,omitempty"`
	HelpMeHeroFlagName []string `protobuf:"bytes,7,rep,name=help_me_hero_flag_name,json=helpMeHeroFlagName" json:"help_me_hero_flag_name,omitempty"`
	HelpMeHeroSeason   []int32  `protobuf:"varint,4,rep,name=help_me_hero_season,json=helpMeHeroSeason" json:"help_me_hero_season,omitempty"`
}

func (m *S2CListHelpMeProto) Reset()                    { *m = S2CListHelpMeProto{} }
func (m *S2CListHelpMeProto) String() string            { return proto.CompactTextString(m) }
func (*S2CListHelpMeProto) ProtoMessage()               {}
func (*S2CListHelpMeProto) Descriptor() ([]byte, []int) { return fileDescriptorGarden, []int{2} }

func (m *S2CListHelpMeProto) GetTargetId() []byte {
	if m != nil {
		return m.TargetId
	}
	return nil
}

func (m *S2CListHelpMeProto) GetHelpMeHeroId() [][]byte {
	if m != nil {
		return m.HelpMeHeroId
	}
	return nil
}

func (m *S2CListHelpMeProto) GetHelpMeHeroName() []string {
	if m != nil {
		return m.HelpMeHeroName
	}
	return nil
}

func (m *S2CListHelpMeProto) GetHelpMeHeroGuild() []int32 {
	if m != nil {
		return m.HelpMeHeroGuild
	}
	return nil
}

func (m *S2CListHelpMeProto) GetHelpMeHeroFlagName() []string {
	if m != nil {
		return m.HelpMeHeroFlagName
	}
	return nil
}

func (m *S2CListHelpMeProto) GetHelpMeHeroSeason() []int32 {
	if m != nil {
		return m.HelpMeHeroSeason
	}
	return nil
}

type S2CListTreasuryTreeTimesProto struct {
	HeroId     [][]byte `protobuf:"bytes,1,rep,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	WaterTimes []int32  `protobuf:"varint,2,rep,name=water_times,json=waterTimes" json:"water_times,omitempty"`
}

func (m *S2CListTreasuryTreeTimesProto) Reset()         { *m = S2CListTreasuryTreeTimesProto{} }
func (m *S2CListTreasuryTreeTimesProto) String() string { return proto.CompactTextString(m) }
func (*S2CListTreasuryTreeTimesProto) ProtoMessage()    {}
func (*S2CListTreasuryTreeTimesProto) Descriptor() ([]byte, []int) {
	return fileDescriptorGarden, []int{3}
}

func (m *S2CListTreasuryTreeTimesProto) GetHeroId() [][]byte {
	if m != nil {
		return m.HeroId
	}
	return nil
}

func (m *S2CListTreasuryTreeTimesProto) GetWaterTimes() []int32 {
	if m != nil {
		return m.WaterTimes
	}
	return nil
}

type C2SWaterTreasuryTreeProto struct {
	Target []byte `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
}

func (m *C2SWaterTreasuryTreeProto) Reset()                    { *m = C2SWaterTreasuryTreeProto{} }
func (m *C2SWaterTreasuryTreeProto) String() string            { return proto.CompactTextString(m) }
func (*C2SWaterTreasuryTreeProto) ProtoMessage()               {}
func (*C2SWaterTreasuryTreeProto) Descriptor() ([]byte, []int) { return fileDescriptorGarden, []int{4} }

func (m *C2SWaterTreasuryTreeProto) GetTarget() []byte {
	if m != nil {
		return m.Target
	}
	return nil
}

type S2CWaterTreasuryTreeProto struct {
	Target     []byte `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	WaterTimes int32  `protobuf:"varint,2,opt,name=water_times,json=waterTimes,proto3" json:"water_times,omitempty"`
}

func (m *S2CWaterTreasuryTreeProto) Reset()                    { *m = S2CWaterTreasuryTreeProto{} }
func (m *S2CWaterTreasuryTreeProto) String() string            { return proto.CompactTextString(m) }
func (*S2CWaterTreasuryTreeProto) ProtoMessage()               {}
func (*S2CWaterTreasuryTreeProto) Descriptor() ([]byte, []int) { return fileDescriptorGarden, []int{5} }

func (m *S2CWaterTreasuryTreeProto) GetTarget() []byte {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *S2CWaterTreasuryTreeProto) GetWaterTimes() int32 {
	if m != nil {
		return m.WaterTimes
	}
	return 0
}

type S2CUpdateSelfTreasuryTreeTimesProto struct {
	WaterTimes         int32  `protobuf:"varint,1,opt,name=water_times,json=waterTimes,proto3" json:"water_times,omitempty"`
	HelpMeHeroId       []byte `protobuf:"bytes,2,opt,name=help_me_hero_id,json=helpMeHeroId,proto3" json:"help_me_hero_id,omitempty"`
	HelpMeHeroName     string `protobuf:"bytes,3,opt,name=help_me_hero_name,json=helpMeHeroName,proto3" json:"help_me_hero_name,omitempty"`
	HelpMeHeroGuild    int32  `protobuf:"varint,4,opt,name=help_me_hero_guild,json=helpMeHeroGuild,proto3" json:"help_me_hero_guild,omitempty"`
	HelpMeHeroFlagName string `protobuf:"bytes,5,opt,name=help_me_hero_flag_name,json=helpMeHeroFlagName,proto3" json:"help_me_hero_flag_name,omitempty"`
}

func (m *S2CUpdateSelfTreasuryTreeTimesProto) Reset()         { *m = S2CUpdateSelfTreasuryTreeTimesProto{} }
func (m *S2CUpdateSelfTreasuryTreeTimesProto) String() string { return proto.CompactTextString(m) }
func (*S2CUpdateSelfTreasuryTreeTimesProto) ProtoMessage()    {}
func (*S2CUpdateSelfTreasuryTreeTimesProto) Descriptor() ([]byte, []int) {
	return fileDescriptorGarden, []int{6}
}

func (m *S2CUpdateSelfTreasuryTreeTimesProto) GetWaterTimes() int32 {
	if m != nil {
		return m.WaterTimes
	}
	return 0
}

func (m *S2CUpdateSelfTreasuryTreeTimesProto) GetHelpMeHeroId() []byte {
	if m != nil {
		return m.HelpMeHeroId
	}
	return nil
}

func (m *S2CUpdateSelfTreasuryTreeTimesProto) GetHelpMeHeroName() string {
	if m != nil {
		return m.HelpMeHeroName
	}
	return ""
}

func (m *S2CUpdateSelfTreasuryTreeTimesProto) GetHelpMeHeroGuild() int32 {
	if m != nil {
		return m.HelpMeHeroGuild
	}
	return 0
}

func (m *S2CUpdateSelfTreasuryTreeTimesProto) GetHelpMeHeroFlagName() string {
	if m != nil {
		return m.HelpMeHeroFlagName
	}
	return ""
}

type S2CUpdateSelfTreasuryTreeFullProto struct {
	Season      int32 `protobuf:"varint,1,opt,name=season,proto3" json:"season,omitempty"`
	CollectTime int32 `protobuf:"varint,2,opt,name=collect_time,json=collectTime,proto3" json:"collect_time,omitempty"`
}

func (m *S2CUpdateSelfTreasuryTreeFullProto) Reset()         { *m = S2CUpdateSelfTreasuryTreeFullProto{} }
func (m *S2CUpdateSelfTreasuryTreeFullProto) String() string { return proto.CompactTextString(m) }
func (*S2CUpdateSelfTreasuryTreeFullProto) ProtoMessage()    {}
func (*S2CUpdateSelfTreasuryTreeFullProto) Descriptor() ([]byte, []int) {
	return fileDescriptorGarden, []int{7}
}

func (m *S2CUpdateSelfTreasuryTreeFullProto) GetSeason() int32 {
	if m != nil {
		return m.Season
	}
	return 0
}

func (m *S2CUpdateSelfTreasuryTreeFullProto) GetCollectTime() int32 {
	if m != nil {
		return m.CollectTime
	}
	return 0
}

func init() {
	proto.RegisterType((*S2CListTreasuryTreeHeroProto)(nil), "proto.S2CListTreasuryTreeHeroProto")
	proto.RegisterType((*C2SListHelpMeProto)(nil), "proto.C2SListHelpMeProto")
	proto.RegisterType((*S2CListHelpMeProto)(nil), "proto.S2CListHelpMeProto")
	proto.RegisterType((*S2CListTreasuryTreeTimesProto)(nil), "proto.S2CListTreasuryTreeTimesProto")
	proto.RegisterType((*C2SWaterTreasuryTreeProto)(nil), "proto.C2SWaterTreasuryTreeProto")
	proto.RegisterType((*S2CWaterTreasuryTreeProto)(nil), "proto.S2CWaterTreasuryTreeProto")
	proto.RegisterType((*S2CUpdateSelfTreasuryTreeTimesProto)(nil), "proto.S2CUpdateSelfTreasuryTreeTimesProto")
	proto.RegisterType((*S2CUpdateSelfTreasuryTreeFullProto)(nil), "proto.S2CUpdateSelfTreasuryTreeFullProto")
}
func (m *S2CListTreasuryTreeHeroProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CListTreasuryTreeHeroProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HeroId) > 0 {
		for _, b := range m.HeroId {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGarden(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.HeroName) > 0 {
		for _, s := range m.HeroName {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.HeroHead) > 0 {
		for _, s := range m.HeroHead {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.HeroGuild) > 0 {
		for _, num := range m.HeroGuild {
			dAtA[i] = 0x20
			i++
			i = encodeVarintGarden(dAtA, i, uint64(num))
		}
	}
	if len(m.HeroFriend) > 0 {
		for _, b := range m.HeroFriend {
			dAtA[i] = 0x28
			i++
			if b {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i++
		}
	}
	if len(m.HeroWaterTimes) > 0 {
		for _, num := range m.HeroWaterTimes {
			dAtA[i] = 0x30
			i++
			i = encodeVarintGarden(dAtA, i, uint64(num))
		}
	}
	if len(m.GuildId) > 0 {
		for _, num := range m.GuildId {
			dAtA[i] = 0x38
			i++
			i = encodeVarintGarden(dAtA, i, uint64(num))
		}
	}
	if len(m.FlagName) > 0 {
		for _, s := range m.FlagName {
			dAtA[i] = 0x42
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.HelpMeHeroId) > 0 {
		for _, b := range m.HelpMeHeroId {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintGarden(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.HelpMeHeroName) > 0 {
		for _, s := range m.HelpMeHeroName {
			dAtA[i] = 0x52
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.HelpMeHeroGuild) > 0 {
		for _, num := range m.HelpMeHeroGuild {
			dAtA[i] = 0x58
			i++
			i = encodeVarintGarden(dAtA, i, uint64(num))
		}
	}
	if len(m.HelpMeHeroSeason) > 0 {
		for _, num := range m.HelpMeHeroSeason {
			dAtA[i] = 0x60
			i++
			i = encodeVarintGarden(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *C2SListHelpMeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SListHelpMeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TargetId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGarden(dAtA, i, uint64(len(m.TargetId)))
		i += copy(dAtA[i:], m.TargetId)
	}
	return i, nil
}

func (m *S2CListHelpMeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CListHelpMeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HelpMeHeroId) > 0 {
		for _, b := range m.HelpMeHeroId {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGarden(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.HelpMeHeroName) > 0 {
		for _, s := range m.HelpMeHeroName {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.HelpMeHeroSeason) > 0 {
		for _, num := range m.HelpMeHeroSeason {
			dAtA[i] = 0x20
			i++
			i = encodeVarintGarden(dAtA, i, uint64(num))
		}
	}
	if len(m.TargetId) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGarden(dAtA, i, uint64(len(m.TargetId)))
		i += copy(dAtA[i:], m.TargetId)
	}
	if len(m.HelpMeHeroGuild) > 0 {
		for _, num := range m.HelpMeHeroGuild {
			dAtA[i] = 0x30
			i++
			i = encodeVarintGarden(dAtA, i, uint64(num))
		}
	}
	if len(m.HelpMeHeroFlagName) > 0 {
		for _, s := range m.HelpMeHeroFlagName {
			dAtA[i] = 0x3a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *S2CListTreasuryTreeTimesProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CListTreasuryTreeTimesProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HeroId) > 0 {
		for _, b := range m.HeroId {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGarden(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.WaterTimes) > 0 {
		for _, num := range m.WaterTimes {
			dAtA[i] = 0x10
			i++
			i = encodeVarintGarden(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *C2SWaterTreasuryTreeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SWaterTreasuryTreeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Target) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGarden(dAtA, i, uint64(len(m.Target)))
		i += copy(dAtA[i:], m.Target)
	}
	return i, nil
}

func (m *S2CWaterTreasuryTreeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CWaterTreasuryTreeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Target) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGarden(dAtA, i, uint64(len(m.Target)))
		i += copy(dAtA[i:], m.Target)
	}
	if m.WaterTimes != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGarden(dAtA, i, uint64(m.WaterTimes))
	}
	return i, nil
}

func (m *S2CUpdateSelfTreasuryTreeTimesProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateSelfTreasuryTreeTimesProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.WaterTimes != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGarden(dAtA, i, uint64(m.WaterTimes))
	}
	if len(m.HelpMeHeroId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGarden(dAtA, i, uint64(len(m.HelpMeHeroId)))
		i += copy(dAtA[i:], m.HelpMeHeroId)
	}
	if len(m.HelpMeHeroName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGarden(dAtA, i, uint64(len(m.HelpMeHeroName)))
		i += copy(dAtA[i:], m.HelpMeHeroName)
	}
	if m.HelpMeHeroGuild != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGarden(dAtA, i, uint64(m.HelpMeHeroGuild))
	}
	if len(m.HelpMeHeroFlagName) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGarden(dAtA, i, uint64(len(m.HelpMeHeroFlagName)))
		i += copy(dAtA[i:], m.HelpMeHeroFlagName)
	}
	return i, nil
}

func (m *S2CUpdateSelfTreasuryTreeFullProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateSelfTreasuryTreeFullProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Season != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGarden(dAtA, i, uint64(m.Season))
	}
	if m.CollectTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGarden(dAtA, i, uint64(m.CollectTime))
	}
	return i, nil
}

func encodeFixed64Garden(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Garden(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintGarden(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *S2CListTreasuryTreeHeroProto) Size() (n int) {
	var l int
	_ = l
	if len(m.HeroId) > 0 {
		for _, b := range m.HeroId {
			l = len(b)
			n += 1 + l + sovGarden(uint64(l))
		}
	}
	if len(m.HeroName) > 0 {
		for _, s := range m.HeroName {
			l = len(s)
			n += 1 + l + sovGarden(uint64(l))
		}
	}
	if len(m.HeroHead) > 0 {
		for _, s := range m.HeroHead {
			l = len(s)
			n += 1 + l + sovGarden(uint64(l))
		}
	}
	if len(m.HeroGuild) > 0 {
		for _, e := range m.HeroGuild {
			n += 1 + sovGarden(uint64(e))
		}
	}
	if len(m.HeroFriend) > 0 {
		n += 2 * len(m.HeroFriend)
	}
	if len(m.HeroWaterTimes) > 0 {
		for _, e := range m.HeroWaterTimes {
			n += 1 + sovGarden(uint64(e))
		}
	}
	if len(m.GuildId) > 0 {
		for _, e := range m.GuildId {
			n += 1 + sovGarden(uint64(e))
		}
	}
	if len(m.FlagName) > 0 {
		for _, s := range m.FlagName {
			l = len(s)
			n += 1 + l + sovGarden(uint64(l))
		}
	}
	if len(m.HelpMeHeroId) > 0 {
		for _, b := range m.HelpMeHeroId {
			l = len(b)
			n += 1 + l + sovGarden(uint64(l))
		}
	}
	if len(m.HelpMeHeroName) > 0 {
		for _, s := range m.HelpMeHeroName {
			l = len(s)
			n += 1 + l + sovGarden(uint64(l))
		}
	}
	if len(m.HelpMeHeroGuild) > 0 {
		for _, e := range m.HelpMeHeroGuild {
			n += 1 + sovGarden(uint64(e))
		}
	}
	if len(m.HelpMeHeroSeason) > 0 {
		for _, e := range m.HelpMeHeroSeason {
			n += 1 + sovGarden(uint64(e))
		}
	}
	return n
}

func (m *C2SListHelpMeProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.TargetId)
	if l > 0 {
		n += 1 + l + sovGarden(uint64(l))
	}
	return n
}

func (m *S2CListHelpMeProto) Size() (n int) {
	var l int
	_ = l
	if len(m.HelpMeHeroId) > 0 {
		for _, b := range m.HelpMeHeroId {
			l = len(b)
			n += 1 + l + sovGarden(uint64(l))
		}
	}
	if len(m.HelpMeHeroName) > 0 {
		for _, s := range m.HelpMeHeroName {
			l = len(s)
			n += 1 + l + sovGarden(uint64(l))
		}
	}
	if len(m.HelpMeHeroSeason) > 0 {
		for _, e := range m.HelpMeHeroSeason {
			n += 1 + sovGarden(uint64(e))
		}
	}
	l = len(m.TargetId)
	if l > 0 {
		n += 1 + l + sovGarden(uint64(l))
	}
	if len(m.HelpMeHeroGuild) > 0 {
		for _, e := range m.HelpMeHeroGuild {
			n += 1 + sovGarden(uint64(e))
		}
	}
	if len(m.HelpMeHeroFlagName) > 0 {
		for _, s := range m.HelpMeHeroFlagName {
			l = len(s)
			n += 1 + l + sovGarden(uint64(l))
		}
	}
	return n
}

func (m *S2CListTreasuryTreeTimesProto) Size() (n int) {
	var l int
	_ = l
	if len(m.HeroId) > 0 {
		for _, b := range m.HeroId {
			l = len(b)
			n += 1 + l + sovGarden(uint64(l))
		}
	}
	if len(m.WaterTimes) > 0 {
		for _, e := range m.WaterTimes {
			n += 1 + sovGarden(uint64(e))
		}
	}
	return n
}

func (m *C2SWaterTreasuryTreeProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovGarden(uint64(l))
	}
	return n
}

func (m *S2CWaterTreasuryTreeProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovGarden(uint64(l))
	}
	if m.WaterTimes != 0 {
		n += 1 + sovGarden(uint64(m.WaterTimes))
	}
	return n
}

func (m *S2CUpdateSelfTreasuryTreeTimesProto) Size() (n int) {
	var l int
	_ = l
	if m.WaterTimes != 0 {
		n += 1 + sovGarden(uint64(m.WaterTimes))
	}
	l = len(m.HelpMeHeroId)
	if l > 0 {
		n += 1 + l + sovGarden(uint64(l))
	}
	l = len(m.HelpMeHeroName)
	if l > 0 {
		n += 1 + l + sovGarden(uint64(l))
	}
	if m.HelpMeHeroGuild != 0 {
		n += 1 + sovGarden(uint64(m.HelpMeHeroGuild))
	}
	l = len(m.HelpMeHeroFlagName)
	if l > 0 {
		n += 1 + l + sovGarden(uint64(l))
	}
	return n
}

func (m *S2CUpdateSelfTreasuryTreeFullProto) Size() (n int) {
	var l int
	_ = l
	if m.Season != 0 {
		n += 1 + sovGarden(uint64(m.Season))
	}
	if m.CollectTime != 0 {
		n += 1 + sovGarden(uint64(m.CollectTime))
	}
	return n
}

func sovGarden(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGarden(x uint64) (n int) {
	return sovGarden(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *S2CListTreasuryTreeHeroProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGarden
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CListTreasuryTreeHeroProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CListTreasuryTreeHeroProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGarden
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGarden
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeroId = append(m.HeroId, make([]byte, postIndex-iNdEx))
			copy(m.HeroId[len(m.HeroId)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGarden
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGarden
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeroName = append(m.HeroName, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroHead", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGarden
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGarden
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeroHead = append(m.HeroHead, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGarden
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.HeroGuild = append(m.HeroGuild, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGarden
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGarden
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGarden
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.HeroGuild = append(m.HeroGuild, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroGuild", wireType)
			}
		case 5:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGarden
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.HeroFriend = append(m.HeroFriend, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGarden
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGarden
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGarden
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.HeroFriend = append(m.HeroFriend, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroFriend", wireType)
			}
		case 6:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGarden
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.HeroWaterTimes = append(m.HeroWaterTimes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGarden
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGarden
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGarden
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.HeroWaterTimes = append(m.HeroWaterTimes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroWaterTimes", wireType)
			}
		case 7:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGarden
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GuildId = append(m.GuildId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGarden
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGarden
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGarden
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GuildId = append(m.GuildId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildId", wireType)
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlagName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGarden
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGarden
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FlagName = append(m.FlagName, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HelpMeHeroId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGarden
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGarden
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HelpMeHeroId = append(m.HelpMeHeroId, make([]byte, postIndex-iNdEx))
			copy(m.HelpMeHeroId[len(m.HelpMeHeroId)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HelpMeHeroName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGarden
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGarden
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HelpMeHeroName = append(m.HelpMeHeroName, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGarden
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.HelpMeHeroGuild = append(m.HelpMeHeroGuild, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGarden
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGarden
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGarden
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.HelpMeHeroGuild = append(m.HelpMeHeroGuild, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field HelpMeHeroGuild", wireType)
			}
		case 12:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGarden
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.HelpMeHeroSeason = append(m.HelpMeHeroSeason, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGarden
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGarden
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGarden
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.HelpMeHeroSeason = append(m.HelpMeHeroSeason, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field HelpMeHeroSeason", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGarden(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGarden
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SListHelpMeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGarden
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SListHelpMeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SListHelpMeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGarden
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGarden
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetId = append(m.TargetId[:0], dAtA[iNdEx:postIndex]...)
			if m.TargetId == nil {
				m.TargetId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGarden(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGarden
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CListHelpMeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGarden
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CListHelpMeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CListHelpMeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HelpMeHeroId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGarden
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGarden
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HelpMeHeroId = append(m.HelpMeHeroId, make([]byte, postIndex-iNdEx))
			copy(m.HelpMeHeroId[len(m.HelpMeHeroId)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HelpMeHeroName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGarden
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGarden
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HelpMeHeroName = append(m.HelpMeHeroName, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGarden
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.HelpMeHeroSeason = append(m.HelpMeHeroSeason, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGarden
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGarden
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGarden
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.HelpMeHeroSeason = append(m.HelpMeHeroSeason, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field HelpMeHeroSeason", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGarden
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGarden
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetId = append(m.TargetId[:0], dAtA[iNdEx:postIndex]...)
			if m.TargetId == nil {
				m.TargetId = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGarden
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.HelpMeHeroGuild = append(m.HelpMeHeroGuild, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGarden
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGarden
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGarden
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.HelpMeHeroGuild = append(m.HelpMeHeroGuild, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field HelpMeHeroGuild", wireType)
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HelpMeHeroFlagName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGarden
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGarden
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HelpMeHeroFlagName = append(m.HelpMeHeroFlagName, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGarden(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGarden
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CListTreasuryTreeTimesProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGarden
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CListTreasuryTreeTimesProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CListTreasuryTreeTimesProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGarden
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGarden
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeroId = append(m.HeroId, make([]byte, postIndex-iNdEx))
			copy(m.HeroId[len(m.HeroId)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGarden
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.WaterTimes = append(m.WaterTimes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGarden
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGarden
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGarden
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.WaterTimes = append(m.WaterTimes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field WaterTimes", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGarden(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGarden
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SWaterTreasuryTreeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGarden
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SWaterTreasuryTreeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SWaterTreasuryTreeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGarden
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGarden
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = append(m.Target[:0], dAtA[iNdEx:postIndex]...)
			if m.Target == nil {
				m.Target = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGarden(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGarden
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CWaterTreasuryTreeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGarden
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CWaterTreasuryTreeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CWaterTreasuryTreeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGarden
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGarden
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = append(m.Target[:0], dAtA[iNdEx:postIndex]...)
			if m.Target == nil {
				m.Target = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaterTimes", wireType)
			}
			m.WaterTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGarden
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WaterTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGarden(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGarden
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateSelfTreasuryTreeTimesProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGarden
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateSelfTreasuryTreeTimesProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateSelfTreasuryTreeTimesProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaterTimes", wireType)
			}
			m.WaterTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGarden
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WaterTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HelpMeHeroId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGarden
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGarden
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HelpMeHeroId = append(m.HelpMeHeroId[:0], dAtA[iNdEx:postIndex]...)
			if m.HelpMeHeroId == nil {
				m.HelpMeHeroId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HelpMeHeroName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGarden
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGarden
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HelpMeHeroName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HelpMeHeroGuild", wireType)
			}
			m.HelpMeHeroGuild = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGarden
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HelpMeHeroGuild |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HelpMeHeroFlagName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGarden
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGarden
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HelpMeHeroFlagName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGarden(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGarden
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateSelfTreasuryTreeFullProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGarden
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateSelfTreasuryTreeFullProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateSelfTreasuryTreeFullProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Season", wireType)
			}
			m.Season = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGarden
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Season |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectTime", wireType)
			}
			m.CollectTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGarden
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollectTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGarden(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGarden
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGarden(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGarden
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGarden
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGarden
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGarden
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGarden
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGarden(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGarden = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGarden   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/gen/pb/garden/garden.proto", fileDescriptorGarden)
}

var fileDescriptorGarden = []byte{
	// 601 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x5f, 0x8b, 0xd3, 0x4e,
	0x14, 0xdd, 0x24, 0x4d, 0xda, 0xde, 0x96, 0xdd, 0xfe, 0xe6, 0x07, 0x6b, 0xd6, 0x75, 0x6b, 0x37,
	0x45, 0x88, 0x28, 0x1b, 0x36, 0x2b, 0xf8, 0xbe, 0x85, 0xda, 0x82, 0x8a, 0x34, 0x15, 0x41, 0x90,
	0x32, 0x6d, 0xa6, 0x69, 0x20, 0x69, 0x4a, 0x9a, 0x52, 0xfc, 0x26, 0x82, 0x5f, 0xc8, 0x47, 0x5f,
	0x7d, 0x93, 0xfa, 0x29, 0x7c, 0x93, 0xdc, 0x89, 0x49, 0x53, 0x12, 0xdc, 0x7d, 0x0a, 0x73, 0xff,
	0xe5, 0x9c, 0x73, 0xcf, 0x0c, 0xbc, 0x70, 0xdc, 0x68, 0xb1, 0x99, 0x5e, 0xcd, 0x02, 0xdf, 0xf0,
	0x5c, 0x67, 0x11, 0xad, 0xe8, 0xd6, 0xf0, 0xa9, 0xc7, 0x5e, 0x1a, 0x0e, 0x5b, 0x1a, 0xab, 0xa9,
	0xe1, 0xd0, 0xd0, 0x66, 0xcb, 0xe4, 0x73, 0xb5, 0x0a, 0x83, 0x28, 0x20, 0x32, 0x7e, 0xb4, 0x1f,
	0x12, 0x3c, 0xb2, 0xcc, 0xde, 0x6b, 0x77, 0x1d, 0x8d, 0x43, 0x46, 0xd7, 0x9b, 0xf0, 0xf3, 0x38,
	0x64, 0x6c, 0xc0, 0xc2, 0xe0, 0x1d, 0xd6, 0x3d, 0x80, 0xea, 0x82, 0x85, 0xc1, 0xc4, 0xb5, 0x55,
	0xa1, 0x23, 0xe9, 0xcd, 0x91, 0x12, 0x1f, 0x87, 0x36, 0x39, 0x87, 0x3a, 0x26, 0x96, 0xd4, 0x67,
	0xaa, 0xd8, 0x91, 0xf4, 0xfa, 0xa8, 0x16, 0x07, 0xde, 0x52, 0x9f, 0xa5, 0xc9, 0x05, 0xa3, 0xb6,
	0x2a, 0x65, 0xc9, 0x01, 0xa3, 0x36, 0xb9, 0x04, 0xc0, 0xa4, 0xb3, 0x71, 0x3d, 0x5b, 0xad, 0x74,
	0x24, 0x5d, 0xbe, 0x15, 0x5b, 0x47, 0x23, 0x6c, 0x79, 0x15, 0x07, 0x49, 0x17, 0x1a, 0x58, 0x32,
	0x0f, 0x5d, 0xb6, 0xb4, 0x55, 0xb9, 0x23, 0xe9, 0x35, 0xac, 0xc1, 0xce, 0x3e, 0x46, 0xc9, 0x73,
	0x68, 0x61, 0xd1, 0x96, 0x46, 0x2c, 0x9c, 0x44, 0xae, 0xcf, 0xd6, 0xaa, 0x92, 0x4e, 0x3b, 0x8e,
	0x73, 0x1f, 0xe2, 0xd4, 0x38, 0xce, 0x90, 0x0b, 0xa8, 0xe1, 0x0f, 0x63, 0x26, 0xd5, 0xb4, 0xaa,
	0x8a, 0x31, 0x4e, 0x67, 0xee, 0x51, 0x87, 0xd3, 0xa9, 0x71, 0xc4, 0x71, 0x00, 0xe9, 0x3c, 0x81,
	0x93, 0x05, 0xf3, 0x56, 0x13, 0x9f, 0x4d, 0xfe, 0x8a, 0x51, 0x47, 0x31, 0x9a, 0x71, 0xf8, 0x0d,
	0xca, 0x35, 0xb4, 0xc9, 0x53, 0xf8, 0x2f, 0x57, 0x86, 0xb3, 0x00, 0x67, 0x1d, 0x67, 0x85, 0x38,
	0xd1, 0x00, 0x92, 0x2b, 0xe5, 0x5a, 0x34, 0x52, 0x5c, 0x27, 0x59, 0x3d, 0x57, 0xe4, 0x1a, 0xfe,
	0xcf, 0x35, 0xac, 0x19, 0x5d, 0x07, 0x4b, 0xb5, 0x99, 0x76, 0xb4, 0xb2, 0x0e, 0x0b, 0x73, 0xda,
	0x35, 0x90, 0x9e, 0x69, 0xc5, 0xab, 0x1d, 0x60, 0x8a, 0x2f, 0xf4, 0x1c, 0xea, 0x11, 0x0d, 0x1d,
	0x16, 0xf1, 0x95, 0x0a, 0x7a, 0x73, 0x54, 0xe3, 0x81, 0xa1, 0xad, 0x7d, 0x15, 0x81, 0x24, 0x76,
	0xd8, 0xef, 0x29, 0xe0, 0x2f, 0xdc, 0x95, 0xbf, 0x58, 0xc8, 0xbf, 0x84, 0x4e, 0xa5, 0x9c, 0x4e,
	0x1e, 0xb8, 0x9c, 0x07, 0x5e, 0xa2, 0xa7, 0x52, 0xae, 0xa7, 0x09, 0xa7, 0xb9, 0x86, 0x6c, 0xf9,
	0x55, 0x04, 0x4c, 0xb2, 0x86, 0x7e, 0x62, 0x03, 0xed, 0x13, 0x5c, 0x14, 0xdc, 0x15, 0xb4, 0xd7,
	0x3f, 0x2e, 0x4b, 0x17, 0x1a, 0xfb, 0x2e, 0x15, 0x53, 0x5c, 0xb0, 0x4d, 0x1d, 0xaa, 0xdd, 0xc0,
	0x59, 0xcf, 0xb4, 0xb8, 0x65, 0xf7, 0xe6, 0xf3, 0xd1, 0xa7, 0xa0, 0x70, 0xb2, 0xc9, 0xce, 0x92,
	0x93, 0x36, 0x86, 0x33, 0xcb, 0xec, 0xdd, 0xaf, 0x89, 0x3c, 0x3e, 0x84, 0x23, 0xe8, 0x72, 0x0e,
	0xca, 0x6f, 0x01, 0xba, 0x96, 0xd9, 0x7b, 0xbf, 0xb2, 0x69, 0xc4, 0x2c, 0xe6, 0xcd, 0x4b, 0x08,
	0x1f, 0x0c, 0x12, 0x0e, 0x07, 0x15, 0x39, 0x47, 0x44, 0x28, 0x77, 0x70, 0x8e, 0xd4, 0x11, 0x0a,
	0x9c, 0xf3, 0xac, 0x70, 0xd3, 0x15, 0xfc, 0xf3, 0x3d, 0xb6, 0x2c, 0xe3, 0xf0, 0xa2, 0x2d, 0x4f,
	0x40, 0x2b, 0xa5, 0xde, 0xdf, 0x78, 0x5e, 0x2a, 0x6d, 0xe2, 0x59, 0x4e, 0x3a, 0x39, 0x91, 0x4b,
	0x68, 0xce, 0x02, 0xcf, 0x63, 0xb3, 0x08, 0x35, 0x49, 0xb4, 0x6d, 0x24, 0xb1, 0x58, 0x94, 0xdb,
	0x87, 0xdf, 0x76, 0x6d, 0xe1, 0xfb, 0xae, 0x2d, 0xfc, 0xdc, 0xb5, 0x85, 0x2f, 0xbf, 0xda, 0x47,
	0x03, 0xe1, 0xa3, 0xc2, 0x1f, 0xe7, 0xa9, 0x82, 0xcf, 0xf2, 0xcd, 0x9f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xf9, 0x32, 0x06, 0x71, 0xd5, 0x05, 0x00, 0x00,
}
