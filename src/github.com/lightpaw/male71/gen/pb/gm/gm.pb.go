// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/gen/pb/gm/gm.proto
// DO NOT EDIT!

/*
	Package gm is a generated protocol buffer package.

	It is generated from these files:
		github.com/lightpaw/male7/gen/pb/gm/gm.proto

	It has these top-level messages:
		S2CListCmdProto
		C2SGmProto
		S2CGmProto
		C2SInvaseTargetIdProto
		S2CInvaseTargetIdProto
*/
package gm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type S2CListCmdProto struct {
	Datas [][]byte `protobuf:"bytes,1,rep,name=datas" json:"datas,omitempty"`
}

func (m *S2CListCmdProto) Reset()                    { *m = S2CListCmdProto{} }
func (m *S2CListCmdProto) String() string            { return proto.CompactTextString(m) }
func (*S2CListCmdProto) ProtoMessage()               {}
func (*S2CListCmdProto) Descriptor() ([]byte, []int) { return fileDescriptorGm, []int{0} }

func (m *S2CListCmdProto) GetDatas() [][]byte {
	if m != nil {
		return m.Datas
	}
	return nil
}

type C2SGmProto struct {
	Cmd string `protobuf:"bytes,1,opt,name=cmd,proto3" json:"cmd,omitempty"`
}

func (m *C2SGmProto) Reset()                    { *m = C2SGmProto{} }
func (m *C2SGmProto) String() string            { return proto.CompactTextString(m) }
func (*C2SGmProto) ProtoMessage()               {}
func (*C2SGmProto) Descriptor() ([]byte, []int) { return fileDescriptorGm, []int{1} }

func (m *C2SGmProto) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

type S2CGmProto struct {
	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *S2CGmProto) Reset()                    { *m = S2CGmProto{} }
func (m *S2CGmProto) String() string            { return proto.CompactTextString(m) }
func (*S2CGmProto) ProtoMessage()               {}
func (*S2CGmProto) Descriptor() ([]byte, []int) { return fileDescriptorGm, []int{2} }

func (m *S2CGmProto) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

type C2SInvaseTargetIdProto struct {
	NpcType int32 `protobuf:"varint,1,opt,name=npc_type,json=npcType,proto3" json:"npc_type,omitempty"`
}

func (m *C2SInvaseTargetIdProto) Reset()                    { *m = C2SInvaseTargetIdProto{} }
func (m *C2SInvaseTargetIdProto) String() string            { return proto.CompactTextString(m) }
func (*C2SInvaseTargetIdProto) ProtoMessage()               {}
func (*C2SInvaseTargetIdProto) Descriptor() ([]byte, []int) { return fileDescriptorGm, []int{3} }

func (m *C2SInvaseTargetIdProto) GetNpcType() int32 {
	if m != nil {
		return m.NpcType
	}
	return 0
}

type S2CInvaseTargetIdProto struct {
	TargetId []byte `protobuf:"bytes,1,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	TargetX  int32  `protobuf:"varint,2,opt,name=target_x,json=targetX,proto3" json:"target_x,omitempty"`
	TargetY  int32  `protobuf:"varint,3,opt,name=target_y,json=targetY,proto3" json:"target_y,omitempty"`
}

func (m *S2CInvaseTargetIdProto) Reset()                    { *m = S2CInvaseTargetIdProto{} }
func (m *S2CInvaseTargetIdProto) String() string            { return proto.CompactTextString(m) }
func (*S2CInvaseTargetIdProto) ProtoMessage()               {}
func (*S2CInvaseTargetIdProto) Descriptor() ([]byte, []int) { return fileDescriptorGm, []int{4} }

func (m *S2CInvaseTargetIdProto) GetTargetId() []byte {
	if m != nil {
		return m.TargetId
	}
	return nil
}

func (m *S2CInvaseTargetIdProto) GetTargetX() int32 {
	if m != nil {
		return m.TargetX
	}
	return 0
}

func (m *S2CInvaseTargetIdProto) GetTargetY() int32 {
	if m != nil {
		return m.TargetY
	}
	return 0
}

func init() {
	proto.RegisterType((*S2CListCmdProto)(nil), "proto.S2CListCmdProto")
	proto.RegisterType((*C2SGmProto)(nil), "proto.C2SGmProto")
	proto.RegisterType((*S2CGmProto)(nil), "proto.S2CGmProto")
	proto.RegisterType((*C2SInvaseTargetIdProto)(nil), "proto.C2SInvaseTargetIdProto")
	proto.RegisterType((*S2CInvaseTargetIdProto)(nil), "proto.S2CInvaseTargetIdProto")
}
func (m *S2CListCmdProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CListCmdProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, b := range m.Datas {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGm(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *C2SGmProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SGmProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Cmd) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGm(dAtA, i, uint64(len(m.Cmd)))
		i += copy(dAtA[i:], m.Cmd)
	}
	return i, nil
}

func (m *S2CGmProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CGmProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGm(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	return i, nil
}

func (m *C2SInvaseTargetIdProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SInvaseTargetIdProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NpcType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGm(dAtA, i, uint64(m.NpcType))
	}
	return i, nil
}

func (m *S2CInvaseTargetIdProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CInvaseTargetIdProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TargetId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGm(dAtA, i, uint64(len(m.TargetId)))
		i += copy(dAtA[i:], m.TargetId)
	}
	if m.TargetX != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGm(dAtA, i, uint64(m.TargetX))
	}
	if m.TargetY != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGm(dAtA, i, uint64(m.TargetY))
	}
	return i, nil
}

func encodeFixed64Gm(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Gm(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintGm(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *S2CListCmdProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, b := range m.Datas {
			l = len(b)
			n += 1 + l + sovGm(uint64(l))
		}
	}
	return n
}

func (m *C2SGmProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Cmd)
	if l > 0 {
		n += 1 + l + sovGm(uint64(l))
	}
	return n
}

func (m *S2CGmProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovGm(uint64(l))
	}
	return n
}

func (m *C2SInvaseTargetIdProto) Size() (n int) {
	var l int
	_ = l
	if m.NpcType != 0 {
		n += 1 + sovGm(uint64(m.NpcType))
	}
	return n
}

func (m *S2CInvaseTargetIdProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.TargetId)
	if l > 0 {
		n += 1 + l + sovGm(uint64(l))
	}
	if m.TargetX != 0 {
		n += 1 + sovGm(uint64(m.TargetX))
	}
	if m.TargetY != 0 {
		n += 1 + sovGm(uint64(m.TargetY))
	}
	return n
}

func sovGm(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGm(x uint64) (n int) {
	return sovGm(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *S2CListCmdProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CListCmdProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CListCmdProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGm
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datas = append(m.Datas, make([]byte, postIndex-iNdEx))
			copy(m.Datas[len(m.Datas)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SGmProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SGmProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SGmProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cmd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CGmProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CGmProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CGmProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SInvaseTargetIdProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SInvaseTargetIdProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SInvaseTargetIdProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NpcType", wireType)
			}
			m.NpcType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NpcType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CInvaseTargetIdProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CInvaseTargetIdProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CInvaseTargetIdProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGm
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetId = append(m.TargetId[:0], dAtA[iNdEx:postIndex]...)
			if m.TargetId == nil {
				m.TargetId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetX", wireType)
			}
			m.TargetX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetX |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetY", wireType)
			}
			m.TargetY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetY |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGm(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGm
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGm
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGm
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGm(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGm = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGm   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("github.com/lightpaw/male7/gen/pb/gm/gm.proto", fileDescriptorGm) }

var fileDescriptorGm = []byte{
	// 275 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x49, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0xcf, 0xc9, 0x4c, 0xcf, 0x28, 0x29, 0x48, 0x2c, 0xd7,
	0xcf, 0x4d, 0xcc, 0x49, 0x35, 0xd7, 0x4f, 0x4f, 0xcd, 0xd3, 0x2f, 0x48, 0xd2, 0x4f, 0xcf, 0xd5,
	0x4f, 0xcf, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0xea, 0x5c, 0xfc,
	0xc1, 0x46, 0xce, 0x3e, 0x99, 0xc5, 0x25, 0xce, 0xb9, 0x29, 0x01, 0x60, 0x19, 0x11, 0x2e, 0xd6,
	0x94, 0xc4, 0x92, 0xc4, 0x62, 0x09, 0x46, 0x05, 0x66, 0x0d, 0x9e, 0x20, 0x08, 0x47, 0x49, 0x8e,
	0x8b, 0xcb, 0xd9, 0x28, 0xd8, 0x3d, 0x17, 0xa2, 0x46, 0x80, 0x8b, 0x39, 0x39, 0x37, 0x45, 0x82,
	0x51, 0x81, 0x51, 0x83, 0x33, 0x08, 0xc4, 0x54, 0x52, 0xe1, 0xe2, 0x0a, 0x36, 0x72, 0x86, 0xc9,
	0x8b, 0x71, 0xb1, 0x15, 0xa5, 0x16, 0x97, 0xe6, 0x94, 0x40, 0x95, 0x40, 0x79, 0x4a, 0xc6, 0x5c,
	0x62, 0xce, 0x46, 0xc1, 0x9e, 0x79, 0x65, 0x89, 0xc5, 0xa9, 0x21, 0x89, 0x45, 0xe9, 0xa9, 0x25,
	0x9e, 0x50, 0x5b, 0x25, 0xb9, 0x38, 0xf2, 0x0a, 0x92, 0xe3, 0x4b, 0x2a, 0x0b, 0x52, 0xc1, 0x7a,
	0x58, 0x83, 0xd8, 0xf3, 0x0a, 0x92, 0x43, 0x2a, 0x0b, 0x52, 0x95, 0xb2, 0xb9, 0xc4, 0x82, 0x8d,
	0x9c, 0xb1, 0x69, 0x92, 0xe6, 0xe2, 0x2c, 0x01, 0x0b, 0xc4, 0x67, 0x42, 0x1c, 0xc3, 0x13, 0xc4,
	0x51, 0x02, 0x55, 0x01, 0x32, 0x11, 0x2a, 0x59, 0x21, 0xc1, 0x04, 0x31, 0x11, 0xc2, 0x8f, 0x40,
	0x92, 0xaa, 0x94, 0x60, 0x46, 0x96, 0x8a, 0x74, 0x12, 0x3b, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23,
	0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x67, 0x3c, 0x96, 0x63, 0xf0, 0x60, 0x8c, 0x62, 0x4a, 0xcf,
	0x4d, 0x62, 0x03, 0x87, 0x97, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x12, 0x3c, 0x94, 0x2c, 0x66,
	0x01, 0x00, 0x00,
}
