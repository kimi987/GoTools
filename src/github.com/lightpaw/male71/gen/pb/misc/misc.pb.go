// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/gen/pb/misc/misc.proto
// DO NOT EDIT!

/*
	Package misc is a generated protocol buffer package.

	It is generated from these files:
		github.com/lightpaw/male7/gen/pb/misc/misc.proto

	It has these top-level messages:
		C2SConfigProto
		S2CConfigProto
		C2SConfigluaProto
		S2CConfigluaProto
		C2SClientLogProto
		C2SSyncTimeProto
		S2CSyncTimeProto
		S2CBlockProto
		S2COpenFunctionProto
		S2COpenMultiFunctionProto
		S2CSetHeroBoolProto
		S2CResetHeroBoolProto
		S2CScreenShowWordsProto
		C2SClientVersionProto
		S2CClientVersionProto
		C2SUpdatePfTokenProto
		C2SSettingsProto
		S2CSettingsProto
		S2CSettingsToDefaultProto
		S2CHeroBroadcastProto
		S2CSysTimingBroadcastProto
		S2CSysBroadcastProto
		C2SUpdateLocationProto
		S2CUpdateLocationProto
		C2SCollectChargePrizeProto
		S2CCollectChargePrizeProto
		S2CUpdateChargeAmountProto
		C2SCollectDailyBargainProto
		S2CCollectDailyBargainProto
		C2SActivateDurationCardProto
		S2CActivateDurationCardProto
		C2SCollectDurationCardDailyPrizeProto
		S2CCollectDurationCardDailyPrizeProto
		C2SSetPrivacySettingProto
		S2CSetPrivacySettingProto
		C2SGetProductInfoProto
		S2CGetProductInfoProto
		S2CUpdateFirstRechargeProto
		S2CUpdateBuffNoticeProto
*/
package misc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import proto2 "github.com/lightpaw/male7/pb/shared_proto"
import proto3 "github.com/lightpaw/male7/pb/shared_proto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type C2SConfigProto struct {
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *C2SConfigProto) Reset()                    { *m = C2SConfigProto{} }
func (m *C2SConfigProto) String() string            { return proto.CompactTextString(m) }
func (*C2SConfigProto) ProtoMessage()               {}
func (*C2SConfigProto) Descriptor() ([]byte, []int) { return fileDescriptorMisc, []int{0} }

func (m *C2SConfigProto) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type S2CConfigProto struct {
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Config  []byte `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (m *S2CConfigProto) Reset()                    { *m = S2CConfigProto{} }
func (m *S2CConfigProto) String() string            { return proto.CompactTextString(m) }
func (*S2CConfigProto) ProtoMessage()               {}
func (*S2CConfigProto) Descriptor() ([]byte, []int) { return fileDescriptorMisc, []int{1} }

func (m *S2CConfigProto) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *S2CConfigProto) GetConfig() []byte {
	if m != nil {
		return m.Config
	}
	return nil
}

type C2SConfigluaProto struct {
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *C2SConfigluaProto) Reset()                    { *m = C2SConfigluaProto{} }
func (m *C2SConfigluaProto) String() string            { return proto.CompactTextString(m) }
func (*C2SConfigluaProto) ProtoMessage()               {}
func (*C2SConfigluaProto) Descriptor() ([]byte, []int) { return fileDescriptorMisc, []int{2} }

func (m *C2SConfigluaProto) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type S2CConfigluaProto struct {
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Config  []byte `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (m *S2CConfigluaProto) Reset()                    { *m = S2CConfigluaProto{} }
func (m *S2CConfigluaProto) String() string            { return proto.CompactTextString(m) }
func (*S2CConfigluaProto) ProtoMessage()               {}
func (*S2CConfigluaProto) Descriptor() ([]byte, []int) { return fileDescriptorMisc, []int{3} }

func (m *S2CConfigluaProto) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *S2CConfigluaProto) GetConfig() []byte {
	if m != nil {
		return m.Config
	}
	return nil
}

type C2SClientLogProto struct {
	Level string `protobuf:"bytes,2,opt,name=level,proto3" json:"level,omitempty"`
	Text  string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (m *C2SClientLogProto) Reset()                    { *m = C2SClientLogProto{} }
func (m *C2SClientLogProto) String() string            { return proto.CompactTextString(m) }
func (*C2SClientLogProto) ProtoMessage()               {}
func (*C2SClientLogProto) Descriptor() ([]byte, []int) { return fileDescriptorMisc, []int{4} }

func (m *C2SClientLogProto) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

func (m *C2SClientLogProto) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type C2SSyncTimeProto struct {
	ClientTime int32 `protobuf:"varint,1,opt,name=client_time,json=clientTime,proto3" json:"client_time,omitempty"`
}

func (m *C2SSyncTimeProto) Reset()                    { *m = C2SSyncTimeProto{} }
func (m *C2SSyncTimeProto) String() string            { return proto.CompactTextString(m) }
func (*C2SSyncTimeProto) ProtoMessage()               {}
func (*C2SSyncTimeProto) Descriptor() ([]byte, []int) { return fileDescriptorMisc, []int{5} }

func (m *C2SSyncTimeProto) GetClientTime() int32 {
	if m != nil {
		return m.ClientTime
	}
	return 0
}

type S2CSyncTimeProto struct {
	ClientTime int32 `protobuf:"varint,1,opt,name=client_time,json=clientTime,proto3" json:"client_time,omitempty"`
	ServerTime int32 `protobuf:"varint,2,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`
}

func (m *S2CSyncTimeProto) Reset()                    { *m = S2CSyncTimeProto{} }
func (m *S2CSyncTimeProto) String() string            { return proto.CompactTextString(m) }
func (*S2CSyncTimeProto) ProtoMessage()               {}
func (*S2CSyncTimeProto) Descriptor() ([]byte, []int) { return fileDescriptorMisc, []int{6} }

func (m *S2CSyncTimeProto) GetClientTime() int32 {
	if m != nil {
		return m.ClientTime
	}
	return 0
}

func (m *S2CSyncTimeProto) GetServerTime() int32 {
	if m != nil {
		return m.ServerTime
	}
	return 0
}

type S2CBlockProto struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *S2CBlockProto) Reset()                    { *m = S2CBlockProto{} }
func (m *S2CBlockProto) String() string            { return proto.CompactTextString(m) }
func (*S2CBlockProto) ProtoMessage()               {}
func (*S2CBlockProto) Descriptor() ([]byte, []int) { return fileDescriptorMisc, []int{7} }

func (m *S2CBlockProto) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type S2COpenFunctionProto struct {
	FunctionType int32 `protobuf:"varint,1,opt,name=function_type,json=functionType,proto3" json:"function_type,omitempty"`
}

func (m *S2COpenFunctionProto) Reset()                    { *m = S2COpenFunctionProto{} }
func (m *S2COpenFunctionProto) String() string            { return proto.CompactTextString(m) }
func (*S2COpenFunctionProto) ProtoMessage()               {}
func (*S2COpenFunctionProto) Descriptor() ([]byte, []int) { return fileDescriptorMisc, []int{8} }

func (m *S2COpenFunctionProto) GetFunctionType() int32 {
	if m != nil {
		return m.FunctionType
	}
	return 0
}

type S2COpenMultiFunctionProto struct {
	FunctionType []int32 `protobuf:"varint,1,rep,name=function_type,json=functionType" json:"function_type,omitempty"`
}

func (m *S2COpenMultiFunctionProto) Reset()                    { *m = S2COpenMultiFunctionProto{} }
func (m *S2COpenMultiFunctionProto) String() string            { return proto.CompactTextString(m) }
func (*S2COpenMultiFunctionProto) ProtoMessage()               {}
func (*S2COpenMultiFunctionProto) Descriptor() ([]byte, []int) { return fileDescriptorMisc, []int{9} }

func (m *S2COpenMultiFunctionProto) GetFunctionType() []int32 {
	if m != nil {
		return m.FunctionType
	}
	return nil
}

type S2CSetHeroBoolProto struct {
	BoolType int32 `protobuf:"varint,1,opt,name=bool_type,json=boolType,proto3" json:"bool_type,omitempty"`
}

func (m *S2CSetHeroBoolProto) Reset()                    { *m = S2CSetHeroBoolProto{} }
func (m *S2CSetHeroBoolProto) String() string            { return proto.CompactTextString(m) }
func (*S2CSetHeroBoolProto) ProtoMessage()               {}
func (*S2CSetHeroBoolProto) Descriptor() ([]byte, []int) { return fileDescriptorMisc, []int{10} }

func (m *S2CSetHeroBoolProto) GetBoolType() int32 {
	if m != nil {
		return m.BoolType
	}
	return 0
}

type S2CResetHeroBoolProto struct {
	BoolType int32 `protobuf:"varint,1,opt,name=bool_type,json=boolType,proto3" json:"bool_type,omitempty"`
}

func (m *S2CResetHeroBoolProto) Reset()                    { *m = S2CResetHeroBoolProto{} }
func (m *S2CResetHeroBoolProto) String() string            { return proto.CompactTextString(m) }
func (*S2CResetHeroBoolProto) ProtoMessage()               {}
func (*S2CResetHeroBoolProto) Descriptor() ([]byte, []int) { return fileDescriptorMisc, []int{11} }

func (m *S2CResetHeroBoolProto) GetBoolType() int32 {
	if m != nil {
		return m.BoolType
	}
	return 0
}

type S2CScreenShowWordsProto struct {
	Json string `protobuf:"bytes,2,opt,name=json,proto3" json:"json,omitempty"`
}

func (m *S2CScreenShowWordsProto) Reset()                    { *m = S2CScreenShowWordsProto{} }
func (m *S2CScreenShowWordsProto) String() string            { return proto.CompactTextString(m) }
func (*S2CScreenShowWordsProto) ProtoMessage()               {}
func (*S2CScreenShowWordsProto) Descriptor() ([]byte, []int) { return fileDescriptorMisc, []int{12} }

func (m *S2CScreenShowWordsProto) GetJson() string {
	if m != nil {
		return m.Json
	}
	return ""
}

type C2SClientVersionProto struct {
	Os string `protobuf:"bytes,1,opt,name=os,proto3" json:"os,omitempty"`
	T  string `protobuf:"bytes,2,opt,name=t,proto3" json:"t,omitempty"`
}

func (m *C2SClientVersionProto) Reset()                    { *m = C2SClientVersionProto{} }
func (m *C2SClientVersionProto) String() string            { return proto.CompactTextString(m) }
func (*C2SClientVersionProto) ProtoMessage()               {}
func (*C2SClientVersionProto) Descriptor() ([]byte, []int) { return fileDescriptorMisc, []int{13} }

func (m *C2SClientVersionProto) GetOs() string {
	if m != nil {
		return m.Os
	}
	return ""
}

func (m *C2SClientVersionProto) GetT() string {
	if m != nil {
		return m.T
	}
	return ""
}

type S2CClientVersionProto struct {
	V  string `protobuf:"bytes,1,opt,name=v,proto3" json:"v,omitempty"`
	Os string `protobuf:"bytes,2,opt,name=os,proto3" json:"os,omitempty"`
	T  string `protobuf:"bytes,3,opt,name=t,proto3" json:"t,omitempty"`
}

func (m *S2CClientVersionProto) Reset()                    { *m = S2CClientVersionProto{} }
func (m *S2CClientVersionProto) String() string            { return proto.CompactTextString(m) }
func (*S2CClientVersionProto) ProtoMessage()               {}
func (*S2CClientVersionProto) Descriptor() ([]byte, []int) { return fileDescriptorMisc, []int{14} }

func (m *S2CClientVersionProto) GetV() string {
	if m != nil {
		return m.V
	}
	return ""
}

func (m *S2CClientVersionProto) GetOs() string {
	if m != nil {
		return m.Os
	}
	return ""
}

func (m *S2CClientVersionProto) GetT() string {
	if m != nil {
		return m.T
	}
	return ""
}

type C2SUpdatePfTokenProto struct {
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *C2SUpdatePfTokenProto) Reset()                    { *m = C2SUpdatePfTokenProto{} }
func (m *C2SUpdatePfTokenProto) String() string            { return proto.CompactTextString(m) }
func (*C2SUpdatePfTokenProto) ProtoMessage()               {}
func (*C2SUpdatePfTokenProto) Descriptor() ([]byte, []int) { return fileDescriptorMisc, []int{15} }

func (m *C2SUpdatePfTokenProto) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type C2SSettingsProto struct {
	SettingType int32 `protobuf:"varint,1,opt,name=setting_type,json=settingType,proto3" json:"setting_type,omitempty"`
	Open        bool  `protobuf:"varint,2,opt,name=open,proto3" json:"open,omitempty"`
}

func (m *C2SSettingsProto) Reset()                    { *m = C2SSettingsProto{} }
func (m *C2SSettingsProto) String() string            { return proto.CompactTextString(m) }
func (*C2SSettingsProto) ProtoMessage()               {}
func (*C2SSettingsProto) Descriptor() ([]byte, []int) { return fileDescriptorMisc, []int{16} }

func (m *C2SSettingsProto) GetSettingType() int32 {
	if m != nil {
		return m.SettingType
	}
	return 0
}

func (m *C2SSettingsProto) GetOpen() bool {
	if m != nil {
		return m.Open
	}
	return false
}

type S2CSettingsProto struct {
	SettingType proto3.SettingType `protobuf:"varint,1,opt,name=setting_type,json=settingType,proto3,enum=proto.SettingType" json:"setting_type,omitempty"`
	Open        bool               `protobuf:"varint,2,opt,name=open,proto3" json:"open,omitempty"`
}

func (m *S2CSettingsProto) Reset()                    { *m = S2CSettingsProto{} }
func (m *S2CSettingsProto) String() string            { return proto.CompactTextString(m) }
func (*S2CSettingsProto) ProtoMessage()               {}
func (*S2CSettingsProto) Descriptor() ([]byte, []int) { return fileDescriptorMisc, []int{17} }

func (m *S2CSettingsProto) GetSettingType() proto3.SettingType {
	if m != nil {
		return m.SettingType
	}
	return proto3.SettingType_InvalidSettingType
}

func (m *S2CSettingsProto) GetOpen() bool {
	if m != nil {
		return m.Open
	}
	return false
}

type S2CSettingsToDefaultProto struct {
	SettingType *proto3.HeroSettingsProto `protobuf:"bytes,1,opt,name=setting_type,json=settingType" json:"setting_type,omitempty"`
}

func (m *S2CSettingsToDefaultProto) Reset()                    { *m = S2CSettingsToDefaultProto{} }
func (m *S2CSettingsToDefaultProto) String() string            { return proto.CompactTextString(m) }
func (*S2CSettingsToDefaultProto) ProtoMessage()               {}
func (*S2CSettingsToDefaultProto) Descriptor() ([]byte, []int) { return fileDescriptorMisc, []int{18} }

func (m *S2CSettingsToDefaultProto) GetSettingType() *proto3.HeroSettingsProto {
	if m != nil {
		return m.SettingType
	}
	return nil
}

type S2CHeroBroadcastProto struct {
	Text      string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	GuildFlag string `protobuf:"bytes,3,opt,name=guild_flag,json=guildFlag,proto3" json:"guild_flag,omitempty"`
}

func (m *S2CHeroBroadcastProto) Reset()                    { *m = S2CHeroBroadcastProto{} }
func (m *S2CHeroBroadcastProto) String() string            { return proto.CompactTextString(m) }
func (*S2CHeroBroadcastProto) ProtoMessage()               {}
func (*S2CHeroBroadcastProto) Descriptor() ([]byte, []int) { return fileDescriptorMisc, []int{19} }

func (m *S2CHeroBroadcastProto) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *S2CHeroBroadcastProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *S2CHeroBroadcastProto) GetGuildFlag() string {
	if m != nil {
		return m.GuildFlag
	}
	return ""
}

type S2CSysTimingBroadcastProto struct {
	Text string `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
}

func (m *S2CSysTimingBroadcastProto) Reset()                    { *m = S2CSysTimingBroadcastProto{} }
func (m *S2CSysTimingBroadcastProto) String() string            { return proto.CompactTextString(m) }
func (*S2CSysTimingBroadcastProto) ProtoMessage()               {}
func (*S2CSysTimingBroadcastProto) Descriptor() ([]byte, []int) { return fileDescriptorMisc, []int{20} }

func (m *S2CSysTimingBroadcastProto) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type S2CSysBroadcastProto struct {
	Text string `protobuf:"bytes,9,opt,name=text,proto3" json:"text,omitempty"`
}

func (m *S2CSysBroadcastProto) Reset()                    { *m = S2CSysBroadcastProto{} }
func (m *S2CSysBroadcastProto) String() string            { return proto.CompactTextString(m) }
func (*S2CSysBroadcastProto) ProtoMessage()               {}
func (*S2CSysBroadcastProto) Descriptor() ([]byte, []int) { return fileDescriptorMisc, []int{21} }

func (m *S2CSysBroadcastProto) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type C2SUpdateLocationProto struct {
	Location int32 `protobuf:"varint,1,opt,name=location,proto3" json:"location,omitempty"`
}

func (m *C2SUpdateLocationProto) Reset()                    { *m = C2SUpdateLocationProto{} }
func (m *C2SUpdateLocationProto) String() string            { return proto.CompactTextString(m) }
func (*C2SUpdateLocationProto) ProtoMessage()               {}
func (*C2SUpdateLocationProto) Descriptor() ([]byte, []int) { return fileDescriptorMisc, []int{22} }

func (m *C2SUpdateLocationProto) GetLocation() int32 {
	if m != nil {
		return m.Location
	}
	return 0
}

type S2CUpdateLocationProto struct {
	Location int32 `protobuf:"varint,1,opt,name=location,proto3" json:"location,omitempty"`
}

func (m *S2CUpdateLocationProto) Reset()                    { *m = S2CUpdateLocationProto{} }
func (m *S2CUpdateLocationProto) String() string            { return proto.CompactTextString(m) }
func (*S2CUpdateLocationProto) ProtoMessage()               {}
func (*S2CUpdateLocationProto) Descriptor() ([]byte, []int) { return fileDescriptorMisc, []int{23} }

func (m *S2CUpdateLocationProto) GetLocation() int32 {
	if m != nil {
		return m.Location
	}
	return 0
}

type C2SCollectChargePrizeProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SCollectChargePrizeProto) Reset()                    { *m = C2SCollectChargePrizeProto{} }
func (m *C2SCollectChargePrizeProto) String() string            { return proto.CompactTextString(m) }
func (*C2SCollectChargePrizeProto) ProtoMessage()               {}
func (*C2SCollectChargePrizeProto) Descriptor() ([]byte, []int) { return fileDescriptorMisc, []int{24} }

func (m *C2SCollectChargePrizeProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type S2CCollectChargePrizeProto struct {
	Id    int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Prize []byte `protobuf:"bytes,2,opt,name=prize,proto3" json:"prize,omitempty"`
}

func (m *S2CCollectChargePrizeProto) Reset()                    { *m = S2CCollectChargePrizeProto{} }
func (m *S2CCollectChargePrizeProto) String() string            { return proto.CompactTextString(m) }
func (*S2CCollectChargePrizeProto) ProtoMessage()               {}
func (*S2CCollectChargePrizeProto) Descriptor() ([]byte, []int) { return fileDescriptorMisc, []int{25} }

func (m *S2CCollectChargePrizeProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *S2CCollectChargePrizeProto) GetPrize() []byte {
	if m != nil {
		return m.Prize
	}
	return nil
}

type S2CUpdateChargeAmountProto struct {
	Amount int32 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *S2CUpdateChargeAmountProto) Reset()                    { *m = S2CUpdateChargeAmountProto{} }
func (m *S2CUpdateChargeAmountProto) String() string            { return proto.CompactTextString(m) }
func (*S2CUpdateChargeAmountProto) ProtoMessage()               {}
func (*S2CUpdateChargeAmountProto) Descriptor() ([]byte, []int) { return fileDescriptorMisc, []int{26} }

func (m *S2CUpdateChargeAmountProto) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type C2SCollectDailyBargainProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SCollectDailyBargainProto) Reset()                    { *m = C2SCollectDailyBargainProto{} }
func (m *C2SCollectDailyBargainProto) String() string            { return proto.CompactTextString(m) }
func (*C2SCollectDailyBargainProto) ProtoMessage()               {}
func (*C2SCollectDailyBargainProto) Descriptor() ([]byte, []int) { return fileDescriptorMisc, []int{27} }

func (m *C2SCollectDailyBargainProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type S2CCollectDailyBargainProto struct {
	Id    int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Times int32  `protobuf:"varint,3,opt,name=times,proto3" json:"times,omitempty"`
	Prize []byte `protobuf:"bytes,2,opt,name=prize,proto3" json:"prize,omitempty"`
}

func (m *S2CCollectDailyBargainProto) Reset()                    { *m = S2CCollectDailyBargainProto{} }
func (m *S2CCollectDailyBargainProto) String() string            { return proto.CompactTextString(m) }
func (*S2CCollectDailyBargainProto) ProtoMessage()               {}
func (*S2CCollectDailyBargainProto) Descriptor() ([]byte, []int) { return fileDescriptorMisc, []int{28} }

func (m *S2CCollectDailyBargainProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *S2CCollectDailyBargainProto) GetTimes() int32 {
	if m != nil {
		return m.Times
	}
	return 0
}

func (m *S2CCollectDailyBargainProto) GetPrize() []byte {
	if m != nil {
		return m.Prize
	}
	return nil
}

type C2SActivateDurationCardProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SActivateDurationCardProto) Reset()         { *m = C2SActivateDurationCardProto{} }
func (m *C2SActivateDurationCardProto) String() string { return proto.CompactTextString(m) }
func (*C2SActivateDurationCardProto) ProtoMessage()    {}
func (*C2SActivateDurationCardProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMisc, []int{29}
}

func (m *C2SActivateDurationCardProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type S2CActivateDurationCardProto struct {
	Id      int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	EndTime int32  `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Prize   []byte `protobuf:"bytes,3,opt,name=prize,proto3" json:"prize,omitempty"`
}

func (m *S2CActivateDurationCardProto) Reset()         { *m = S2CActivateDurationCardProto{} }
func (m *S2CActivateDurationCardProto) String() string { return proto.CompactTextString(m) }
func (*S2CActivateDurationCardProto) ProtoMessage()    {}
func (*S2CActivateDurationCardProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMisc, []int{30}
}

func (m *S2CActivateDurationCardProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *S2CActivateDurationCardProto) GetEndTime() int32 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *S2CActivateDurationCardProto) GetPrize() []byte {
	if m != nil {
		return m.Prize
	}
	return nil
}

type C2SCollectDurationCardDailyPrizeProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SCollectDurationCardDailyPrizeProto) Reset()         { *m = C2SCollectDurationCardDailyPrizeProto{} }
func (m *C2SCollectDurationCardDailyPrizeProto) String() string { return proto.CompactTextString(m) }
func (*C2SCollectDurationCardDailyPrizeProto) ProtoMessage()    {}
func (*C2SCollectDurationCardDailyPrizeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMisc, []int{31}
}

func (m *C2SCollectDurationCardDailyPrizeProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type S2CCollectDurationCardDailyPrizeProto struct {
	Id    int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Prize []byte `protobuf:"bytes,2,opt,name=prize,proto3" json:"prize,omitempty"`
}

func (m *S2CCollectDurationCardDailyPrizeProto) Reset()         { *m = S2CCollectDurationCardDailyPrizeProto{} }
func (m *S2CCollectDurationCardDailyPrizeProto) String() string { return proto.CompactTextString(m) }
func (*S2CCollectDurationCardDailyPrizeProto) ProtoMessage()    {}
func (*S2CCollectDurationCardDailyPrizeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorMisc, []int{32}
}

func (m *S2CCollectDurationCardDailyPrizeProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *S2CCollectDurationCardDailyPrizeProto) GetPrize() []byte {
	if m != nil {
		return m.Prize
	}
	return nil
}

type C2SSetPrivacySettingProto struct {
	SettingId   int32 `protobuf:"varint,1,opt,name=setting_id,json=settingId,proto3" json:"setting_id,omitempty"`
	OpenOrClose bool  `protobuf:"varint,2,opt,name=open_or_close,json=openOrClose,proto3" json:"open_or_close,omitempty"`
}

func (m *C2SSetPrivacySettingProto) Reset()                    { *m = C2SSetPrivacySettingProto{} }
func (m *C2SSetPrivacySettingProto) String() string            { return proto.CompactTextString(m) }
func (*C2SSetPrivacySettingProto) ProtoMessage()               {}
func (*C2SSetPrivacySettingProto) Descriptor() ([]byte, []int) { return fileDescriptorMisc, []int{33} }

func (m *C2SSetPrivacySettingProto) GetSettingId() int32 {
	if m != nil {
		return m.SettingId
	}
	return 0
}

func (m *C2SSetPrivacySettingProto) GetOpenOrClose() bool {
	if m != nil {
		return m.OpenOrClose
	}
	return false
}

type S2CSetPrivacySettingProto struct {
	SettingType proto3.PrivacySettingType `protobuf:"varint,1,opt,name=setting_type,json=settingType,proto3,enum=proto.PrivacySettingType" json:"setting_type,omitempty"`
	OpenOrClose bool                      `protobuf:"varint,2,opt,name=open_or_close,json=openOrClose,proto3" json:"open_or_close,omitempty"`
}

func (m *S2CSetPrivacySettingProto) Reset()                    { *m = S2CSetPrivacySettingProto{} }
func (m *S2CSetPrivacySettingProto) String() string            { return proto.CompactTextString(m) }
func (*S2CSetPrivacySettingProto) ProtoMessage()               {}
func (*S2CSetPrivacySettingProto) Descriptor() ([]byte, []int) { return fileDescriptorMisc, []int{34} }

func (m *S2CSetPrivacySettingProto) GetSettingType() proto3.PrivacySettingType {
	if m != nil {
		return m.SettingType
	}
	return proto3.PrivacySettingType_InvalidPrivacySettingType
}

func (m *S2CSetPrivacySettingProto) GetOpenOrClose() bool {
	if m != nil {
		return m.OpenOrClose
	}
	return false
}

type C2SGetProductInfoProto struct {
	Id int32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SGetProductInfoProto) Reset()                    { *m = C2SGetProductInfoProto{} }
func (m *C2SGetProductInfoProto) String() string            { return proto.CompactTextString(m) }
func (*C2SGetProductInfoProto) ProtoMessage()               {}
func (*C2SGetProductInfoProto) Descriptor() ([]byte, []int) { return fileDescriptorMisc, []int{35} }

func (m *C2SGetProductInfoProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type S2CGetProductInfoProto struct {
	Id          int32  `protobuf:"varint,7,opt,name=id,proto3" json:"id,omitempty"`
	ProductId   string `protobuf:"bytes,8,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	ProductName string `protobuf:"bytes,9,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	CpOrderId   string `protobuf:"bytes,2,opt,name=cp_order_id,json=cpOrderId,proto3" json:"cp_order_id,omitempty"`
	Money       int32  `protobuf:"varint,3,opt,name=money,proto3" json:"money,omitempty"`
	Gold        int32  `protobuf:"varint,4,opt,name=gold,proto3" json:"gold,omitempty"`
	Ext         string `protobuf:"bytes,5,opt,name=ext,proto3" json:"ext,omitempty"`
	IsDebug     bool   `protobuf:"varint,6,opt,name=is_debug,json=isDebug,proto3" json:"is_debug,omitempty"`
}

func (m *S2CGetProductInfoProto) Reset()                    { *m = S2CGetProductInfoProto{} }
func (m *S2CGetProductInfoProto) String() string            { return proto.CompactTextString(m) }
func (*S2CGetProductInfoProto) ProtoMessage()               {}
func (*S2CGetProductInfoProto) Descriptor() ([]byte, []int) { return fileDescriptorMisc, []int{36} }

func (m *S2CGetProductInfoProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *S2CGetProductInfoProto) GetProductId() string {
	if m != nil {
		return m.ProductId
	}
	return ""
}

func (m *S2CGetProductInfoProto) GetProductName() string {
	if m != nil {
		return m.ProductName
	}
	return ""
}

func (m *S2CGetProductInfoProto) GetCpOrderId() string {
	if m != nil {
		return m.CpOrderId
	}
	return ""
}

func (m *S2CGetProductInfoProto) GetMoney() int32 {
	if m != nil {
		return m.Money
	}
	return 0
}

func (m *S2CGetProductInfoProto) GetGold() int32 {
	if m != nil {
		return m.Gold
	}
	return 0
}

func (m *S2CGetProductInfoProto) GetExt() string {
	if m != nil {
		return m.Ext
	}
	return ""
}

func (m *S2CGetProductInfoProto) GetIsDebug() bool {
	if m != nil {
		return m.IsDebug
	}
	return false
}

type S2CUpdateFirstRechargeProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *S2CUpdateFirstRechargeProto) Reset()                    { *m = S2CUpdateFirstRechargeProto{} }
func (m *S2CUpdateFirstRechargeProto) String() string            { return proto.CompactTextString(m) }
func (*S2CUpdateFirstRechargeProto) ProtoMessage()               {}
func (*S2CUpdateFirstRechargeProto) Descriptor() ([]byte, []int) { return fileDescriptorMisc, []int{37} }

func (m *S2CUpdateFirstRechargeProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type S2CUpdateBuffNoticeProto struct {
	GroupId int32                 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Buff    *proto2.BuffInfoProto `protobuf:"bytes,2,opt,name=buff" json:"buff,omitempty"`
}

func (m *S2CUpdateBuffNoticeProto) Reset()                    { *m = S2CUpdateBuffNoticeProto{} }
func (m *S2CUpdateBuffNoticeProto) String() string            { return proto.CompactTextString(m) }
func (*S2CUpdateBuffNoticeProto) ProtoMessage()               {}
func (*S2CUpdateBuffNoticeProto) Descriptor() ([]byte, []int) { return fileDescriptorMisc, []int{38} }

func (m *S2CUpdateBuffNoticeProto) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *S2CUpdateBuffNoticeProto) GetBuff() *proto2.BuffInfoProto {
	if m != nil {
		return m.Buff
	}
	return nil
}

func init() {
	proto.RegisterType((*C2SConfigProto)(nil), "proto.C2SConfigProto")
	proto.RegisterType((*S2CConfigProto)(nil), "proto.S2CConfigProto")
	proto.RegisterType((*C2SConfigluaProto)(nil), "proto.C2SConfigluaProto")
	proto.RegisterType((*S2CConfigluaProto)(nil), "proto.S2CConfigluaProto")
	proto.RegisterType((*C2SClientLogProto)(nil), "proto.C2SClientLogProto")
	proto.RegisterType((*C2SSyncTimeProto)(nil), "proto.C2SSyncTimeProto")
	proto.RegisterType((*S2CSyncTimeProto)(nil), "proto.S2CSyncTimeProto")
	proto.RegisterType((*S2CBlockProto)(nil), "proto.S2CBlockProto")
	proto.RegisterType((*S2COpenFunctionProto)(nil), "proto.S2COpenFunctionProto")
	proto.RegisterType((*S2COpenMultiFunctionProto)(nil), "proto.S2COpenMultiFunctionProto")
	proto.RegisterType((*S2CSetHeroBoolProto)(nil), "proto.S2CSetHeroBoolProto")
	proto.RegisterType((*S2CResetHeroBoolProto)(nil), "proto.S2CResetHeroBoolProto")
	proto.RegisterType((*S2CScreenShowWordsProto)(nil), "proto.S2CScreenShowWordsProto")
	proto.RegisterType((*C2SClientVersionProto)(nil), "proto.C2SClientVersionProto")
	proto.RegisterType((*S2CClientVersionProto)(nil), "proto.S2CClientVersionProto")
	proto.RegisterType((*C2SUpdatePfTokenProto)(nil), "proto.C2SUpdatePfTokenProto")
	proto.RegisterType((*C2SSettingsProto)(nil), "proto.C2SSettingsProto")
	proto.RegisterType((*S2CSettingsProto)(nil), "proto.S2CSettingsProto")
	proto.RegisterType((*S2CSettingsToDefaultProto)(nil), "proto.S2CSettingsToDefaultProto")
	proto.RegisterType((*S2CHeroBroadcastProto)(nil), "proto.S2CHeroBroadcastProto")
	proto.RegisterType((*S2CSysTimingBroadcastProto)(nil), "proto.S2CSysTimingBroadcastProto")
	proto.RegisterType((*S2CSysBroadcastProto)(nil), "proto.S2CSysBroadcastProto")
	proto.RegisterType((*C2SUpdateLocationProto)(nil), "proto.C2SUpdateLocationProto")
	proto.RegisterType((*S2CUpdateLocationProto)(nil), "proto.S2CUpdateLocationProto")
	proto.RegisterType((*C2SCollectChargePrizeProto)(nil), "proto.C2SCollectChargePrizeProto")
	proto.RegisterType((*S2CCollectChargePrizeProto)(nil), "proto.S2CCollectChargePrizeProto")
	proto.RegisterType((*S2CUpdateChargeAmountProto)(nil), "proto.S2CUpdateChargeAmountProto")
	proto.RegisterType((*C2SCollectDailyBargainProto)(nil), "proto.C2SCollectDailyBargainProto")
	proto.RegisterType((*S2CCollectDailyBargainProto)(nil), "proto.S2CCollectDailyBargainProto")
	proto.RegisterType((*C2SActivateDurationCardProto)(nil), "proto.C2SActivateDurationCardProto")
	proto.RegisterType((*S2CActivateDurationCardProto)(nil), "proto.S2CActivateDurationCardProto")
	proto.RegisterType((*C2SCollectDurationCardDailyPrizeProto)(nil), "proto.C2SCollectDurationCardDailyPrizeProto")
	proto.RegisterType((*S2CCollectDurationCardDailyPrizeProto)(nil), "proto.S2CCollectDurationCardDailyPrizeProto")
	proto.RegisterType((*C2SSetPrivacySettingProto)(nil), "proto.C2SSetPrivacySettingProto")
	proto.RegisterType((*S2CSetPrivacySettingProto)(nil), "proto.S2CSetPrivacySettingProto")
	proto.RegisterType((*C2SGetProductInfoProto)(nil), "proto.C2SGetProductInfoProto")
	proto.RegisterType((*S2CGetProductInfoProto)(nil), "proto.S2CGetProductInfoProto")
	proto.RegisterType((*S2CUpdateFirstRechargeProto)(nil), "proto.S2CUpdateFirstRechargeProto")
	proto.RegisterType((*S2CUpdateBuffNoticeProto)(nil), "proto.S2CUpdateBuffNoticeProto")
}
func (m *C2SConfigProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SConfigProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMisc(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	return i, nil
}

func (m *S2CConfigProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CConfigProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Config) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMisc(dAtA, i, uint64(len(m.Config)))
		i += copy(dAtA[i:], m.Config)
	}
	if len(m.Version) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMisc(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	return i, nil
}

func (m *C2SConfigluaProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SConfigluaProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMisc(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	return i, nil
}

func (m *S2CConfigluaProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CConfigluaProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMisc(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	if len(m.Config) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMisc(dAtA, i, uint64(len(m.Config)))
		i += copy(dAtA[i:], m.Config)
	}
	return i, nil
}

func (m *C2SClientLogProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SClientLogProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Text) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMisc(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	if len(m.Level) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMisc(dAtA, i, uint64(len(m.Level)))
		i += copy(dAtA[i:], m.Level)
	}
	return i, nil
}

func (m *C2SSyncTimeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SSyncTimeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ClientTime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMisc(dAtA, i, uint64(m.ClientTime))
	}
	return i, nil
}

func (m *S2CSyncTimeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSyncTimeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ClientTime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMisc(dAtA, i, uint64(m.ClientTime))
	}
	if m.ServerTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMisc(dAtA, i, uint64(m.ServerTime))
	}
	return i, nil
}

func (m *S2CBlockProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CBlockProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMisc(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *S2COpenFunctionProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2COpenFunctionProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FunctionType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMisc(dAtA, i, uint64(m.FunctionType))
	}
	return i, nil
}

func (m *S2COpenMultiFunctionProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2COpenMultiFunctionProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FunctionType) > 0 {
		for _, num := range m.FunctionType {
			dAtA[i] = 0x8
			i++
			i = encodeVarintMisc(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *S2CSetHeroBoolProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSetHeroBoolProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BoolType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMisc(dAtA, i, uint64(m.BoolType))
	}
	return i, nil
}

func (m *S2CResetHeroBoolProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CResetHeroBoolProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BoolType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMisc(dAtA, i, uint64(m.BoolType))
	}
	return i, nil
}

func (m *S2CScreenShowWordsProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CScreenShowWordsProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Json) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMisc(dAtA, i, uint64(len(m.Json)))
		i += copy(dAtA[i:], m.Json)
	}
	return i, nil
}

func (m *C2SClientVersionProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SClientVersionProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Os) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMisc(dAtA, i, uint64(len(m.Os)))
		i += copy(dAtA[i:], m.Os)
	}
	if len(m.T) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMisc(dAtA, i, uint64(len(m.T)))
		i += copy(dAtA[i:], m.T)
	}
	return i, nil
}

func (m *S2CClientVersionProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CClientVersionProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.V) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMisc(dAtA, i, uint64(len(m.V)))
		i += copy(dAtA[i:], m.V)
	}
	if len(m.Os) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMisc(dAtA, i, uint64(len(m.Os)))
		i += copy(dAtA[i:], m.Os)
	}
	if len(m.T) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMisc(dAtA, i, uint64(len(m.T)))
		i += copy(dAtA[i:], m.T)
	}
	return i, nil
}

func (m *C2SUpdatePfTokenProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SUpdatePfTokenProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMisc(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	return i, nil
}

func (m *C2SSettingsProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SSettingsProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SettingType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMisc(dAtA, i, uint64(m.SettingType))
	}
	if m.Open {
		dAtA[i] = 0x10
		i++
		if m.Open {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CSettingsProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSettingsProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SettingType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMisc(dAtA, i, uint64(m.SettingType))
	}
	if m.Open {
		dAtA[i] = 0x10
		i++
		if m.Open {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CSettingsToDefaultProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSettingsToDefaultProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SettingType != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMisc(dAtA, i, uint64(m.SettingType.Size()))
		n1, err := m.SettingType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *S2CHeroBroadcastProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CHeroBroadcastProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Text) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMisc(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMisc(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.GuildFlag) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMisc(dAtA, i, uint64(len(m.GuildFlag)))
		i += copy(dAtA[i:], m.GuildFlag)
	}
	return i, nil
}

func (m *S2CSysTimingBroadcastProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSysTimingBroadcastProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Text) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMisc(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	return i, nil
}

func (m *S2CSysBroadcastProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSysBroadcastProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Text) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintMisc(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	return i, nil
}

func (m *C2SUpdateLocationProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SUpdateLocationProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Location != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMisc(dAtA, i, uint64(m.Location))
	}
	return i, nil
}

func (m *S2CUpdateLocationProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateLocationProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Location != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMisc(dAtA, i, uint64(m.Location))
	}
	return i, nil
}

func (m *C2SCollectChargePrizeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCollectChargePrizeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMisc(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *S2CCollectChargePrizeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCollectChargePrizeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMisc(dAtA, i, uint64(m.Id))
	}
	if len(m.Prize) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMisc(dAtA, i, uint64(len(m.Prize)))
		i += copy(dAtA[i:], m.Prize)
	}
	return i, nil
}

func (m *S2CUpdateChargeAmountProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateChargeAmountProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMisc(dAtA, i, uint64(m.Amount))
	}
	return i, nil
}

func (m *C2SCollectDailyBargainProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCollectDailyBargainProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMisc(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *S2CCollectDailyBargainProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCollectDailyBargainProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMisc(dAtA, i, uint64(m.Id))
	}
	if len(m.Prize) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMisc(dAtA, i, uint64(len(m.Prize)))
		i += copy(dAtA[i:], m.Prize)
	}
	if m.Times != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMisc(dAtA, i, uint64(m.Times))
	}
	return i, nil
}

func (m *C2SActivateDurationCardProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SActivateDurationCardProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMisc(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *S2CActivateDurationCardProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CActivateDurationCardProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMisc(dAtA, i, uint64(m.Id))
	}
	if m.EndTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMisc(dAtA, i, uint64(m.EndTime))
	}
	if len(m.Prize) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMisc(dAtA, i, uint64(len(m.Prize)))
		i += copy(dAtA[i:], m.Prize)
	}
	return i, nil
}

func (m *C2SCollectDurationCardDailyPrizeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCollectDurationCardDailyPrizeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMisc(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *S2CCollectDurationCardDailyPrizeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCollectDurationCardDailyPrizeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMisc(dAtA, i, uint64(m.Id))
	}
	if len(m.Prize) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMisc(dAtA, i, uint64(len(m.Prize)))
		i += copy(dAtA[i:], m.Prize)
	}
	return i, nil
}

func (m *C2SSetPrivacySettingProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SSetPrivacySettingProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SettingId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMisc(dAtA, i, uint64(m.SettingId))
	}
	if m.OpenOrClose {
		dAtA[i] = 0x10
		i++
		if m.OpenOrClose {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CSetPrivacySettingProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSetPrivacySettingProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SettingType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMisc(dAtA, i, uint64(m.SettingType))
	}
	if m.OpenOrClose {
		dAtA[i] = 0x10
		i++
		if m.OpenOrClose {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *C2SGetProductInfoProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SGetProductInfoProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMisc(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *S2CGetProductInfoProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CGetProductInfoProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CpOrderId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMisc(dAtA, i, uint64(len(m.CpOrderId)))
		i += copy(dAtA[i:], m.CpOrderId)
	}
	if m.Money != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMisc(dAtA, i, uint64(m.Money))
	}
	if m.Gold != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMisc(dAtA, i, uint64(m.Gold))
	}
	if len(m.Ext) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMisc(dAtA, i, uint64(len(m.Ext)))
		i += copy(dAtA[i:], m.Ext)
	}
	if m.IsDebug {
		dAtA[i] = 0x30
		i++
		if m.IsDebug {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Id != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintMisc(dAtA, i, uint64(m.Id))
	}
	if len(m.ProductId) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintMisc(dAtA, i, uint64(len(m.ProductId)))
		i += copy(dAtA[i:], m.ProductId)
	}
	if len(m.ProductName) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintMisc(dAtA, i, uint64(len(m.ProductName)))
		i += copy(dAtA[i:], m.ProductName)
	}
	return i, nil
}

func (m *S2CUpdateFirstRechargeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateFirstRechargeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMisc(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *S2CUpdateBuffNoticeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateBuffNoticeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMisc(dAtA, i, uint64(m.GroupId))
	}
	if m.Buff != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMisc(dAtA, i, uint64(m.Buff.Size()))
		n2, err := m.Buff.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func encodeFixed64Misc(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Misc(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintMisc(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *C2SConfigProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovMisc(uint64(l))
	}
	return n
}

func (m *S2CConfigProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Config)
	if l > 0 {
		n += 1 + l + sovMisc(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovMisc(uint64(l))
	}
	return n
}

func (m *C2SConfigluaProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovMisc(uint64(l))
	}
	return n
}

func (m *S2CConfigluaProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovMisc(uint64(l))
	}
	l = len(m.Config)
	if l > 0 {
		n += 1 + l + sovMisc(uint64(l))
	}
	return n
}

func (m *C2SClientLogProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovMisc(uint64(l))
	}
	l = len(m.Level)
	if l > 0 {
		n += 1 + l + sovMisc(uint64(l))
	}
	return n
}

func (m *C2SSyncTimeProto) Size() (n int) {
	var l int
	_ = l
	if m.ClientTime != 0 {
		n += 1 + sovMisc(uint64(m.ClientTime))
	}
	return n
}

func (m *S2CSyncTimeProto) Size() (n int) {
	var l int
	_ = l
	if m.ClientTime != 0 {
		n += 1 + sovMisc(uint64(m.ClientTime))
	}
	if m.ServerTime != 0 {
		n += 1 + sovMisc(uint64(m.ServerTime))
	}
	return n
}

func (m *S2CBlockProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovMisc(uint64(l))
	}
	return n
}

func (m *S2COpenFunctionProto) Size() (n int) {
	var l int
	_ = l
	if m.FunctionType != 0 {
		n += 1 + sovMisc(uint64(m.FunctionType))
	}
	return n
}

func (m *S2COpenMultiFunctionProto) Size() (n int) {
	var l int
	_ = l
	if len(m.FunctionType) > 0 {
		for _, e := range m.FunctionType {
			n += 1 + sovMisc(uint64(e))
		}
	}
	return n
}

func (m *S2CSetHeroBoolProto) Size() (n int) {
	var l int
	_ = l
	if m.BoolType != 0 {
		n += 1 + sovMisc(uint64(m.BoolType))
	}
	return n
}

func (m *S2CResetHeroBoolProto) Size() (n int) {
	var l int
	_ = l
	if m.BoolType != 0 {
		n += 1 + sovMisc(uint64(m.BoolType))
	}
	return n
}

func (m *S2CScreenShowWordsProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Json)
	if l > 0 {
		n += 1 + l + sovMisc(uint64(l))
	}
	return n
}

func (m *C2SClientVersionProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Os)
	if l > 0 {
		n += 1 + l + sovMisc(uint64(l))
	}
	l = len(m.T)
	if l > 0 {
		n += 1 + l + sovMisc(uint64(l))
	}
	return n
}

func (m *S2CClientVersionProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.V)
	if l > 0 {
		n += 1 + l + sovMisc(uint64(l))
	}
	l = len(m.Os)
	if l > 0 {
		n += 1 + l + sovMisc(uint64(l))
	}
	l = len(m.T)
	if l > 0 {
		n += 1 + l + sovMisc(uint64(l))
	}
	return n
}

func (m *C2SUpdatePfTokenProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovMisc(uint64(l))
	}
	return n
}

func (m *C2SSettingsProto) Size() (n int) {
	var l int
	_ = l
	if m.SettingType != 0 {
		n += 1 + sovMisc(uint64(m.SettingType))
	}
	if m.Open {
		n += 2
	}
	return n
}

func (m *S2CSettingsProto) Size() (n int) {
	var l int
	_ = l
	if m.SettingType != 0 {
		n += 1 + sovMisc(uint64(m.SettingType))
	}
	if m.Open {
		n += 2
	}
	return n
}

func (m *S2CSettingsToDefaultProto) Size() (n int) {
	var l int
	_ = l
	if m.SettingType != nil {
		l = m.SettingType.Size()
		n += 1 + l + sovMisc(uint64(l))
	}
	return n
}

func (m *S2CHeroBroadcastProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovMisc(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMisc(uint64(l))
	}
	l = len(m.GuildFlag)
	if l > 0 {
		n += 1 + l + sovMisc(uint64(l))
	}
	return n
}

func (m *S2CSysTimingBroadcastProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovMisc(uint64(l))
	}
	return n
}

func (m *S2CSysBroadcastProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovMisc(uint64(l))
	}
	return n
}

func (m *C2SUpdateLocationProto) Size() (n int) {
	var l int
	_ = l
	if m.Location != 0 {
		n += 1 + sovMisc(uint64(m.Location))
	}
	return n
}

func (m *S2CUpdateLocationProto) Size() (n int) {
	var l int
	_ = l
	if m.Location != 0 {
		n += 1 + sovMisc(uint64(m.Location))
	}
	return n
}

func (m *C2SCollectChargePrizeProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMisc(uint64(m.Id))
	}
	return n
}

func (m *S2CCollectChargePrizeProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMisc(uint64(m.Id))
	}
	l = len(m.Prize)
	if l > 0 {
		n += 1 + l + sovMisc(uint64(l))
	}
	return n
}

func (m *S2CUpdateChargeAmountProto) Size() (n int) {
	var l int
	_ = l
	if m.Amount != 0 {
		n += 1 + sovMisc(uint64(m.Amount))
	}
	return n
}

func (m *C2SCollectDailyBargainProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMisc(uint64(m.Id))
	}
	return n
}

func (m *S2CCollectDailyBargainProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMisc(uint64(m.Id))
	}
	l = len(m.Prize)
	if l > 0 {
		n += 1 + l + sovMisc(uint64(l))
	}
	if m.Times != 0 {
		n += 1 + sovMisc(uint64(m.Times))
	}
	return n
}

func (m *C2SActivateDurationCardProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMisc(uint64(m.Id))
	}
	return n
}

func (m *S2CActivateDurationCardProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMisc(uint64(m.Id))
	}
	if m.EndTime != 0 {
		n += 1 + sovMisc(uint64(m.EndTime))
	}
	l = len(m.Prize)
	if l > 0 {
		n += 1 + l + sovMisc(uint64(l))
	}
	return n
}

func (m *C2SCollectDurationCardDailyPrizeProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMisc(uint64(m.Id))
	}
	return n
}

func (m *S2CCollectDurationCardDailyPrizeProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMisc(uint64(m.Id))
	}
	l = len(m.Prize)
	if l > 0 {
		n += 1 + l + sovMisc(uint64(l))
	}
	return n
}

func (m *C2SSetPrivacySettingProto) Size() (n int) {
	var l int
	_ = l
	if m.SettingId != 0 {
		n += 1 + sovMisc(uint64(m.SettingId))
	}
	if m.OpenOrClose {
		n += 2
	}
	return n
}

func (m *S2CSetPrivacySettingProto) Size() (n int) {
	var l int
	_ = l
	if m.SettingType != 0 {
		n += 1 + sovMisc(uint64(m.SettingType))
	}
	if m.OpenOrClose {
		n += 2
	}
	return n
}

func (m *C2SGetProductInfoProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMisc(uint64(m.Id))
	}
	return n
}

func (m *S2CGetProductInfoProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.CpOrderId)
	if l > 0 {
		n += 1 + l + sovMisc(uint64(l))
	}
	if m.Money != 0 {
		n += 1 + sovMisc(uint64(m.Money))
	}
	if m.Gold != 0 {
		n += 1 + sovMisc(uint64(m.Gold))
	}
	l = len(m.Ext)
	if l > 0 {
		n += 1 + l + sovMisc(uint64(l))
	}
	if m.IsDebug {
		n += 2
	}
	if m.Id != 0 {
		n += 1 + sovMisc(uint64(m.Id))
	}
	l = len(m.ProductId)
	if l > 0 {
		n += 1 + l + sovMisc(uint64(l))
	}
	l = len(m.ProductName)
	if l > 0 {
		n += 1 + l + sovMisc(uint64(l))
	}
	return n
}

func (m *S2CUpdateFirstRechargeProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMisc(uint64(m.Id))
	}
	return n
}

func (m *S2CUpdateBuffNoticeProto) Size() (n int) {
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovMisc(uint64(m.GroupId))
	}
	if m.Buff != nil {
		l = m.Buff.Size()
		n += 1 + l + sovMisc(uint64(l))
	}
	return n
}

func sovMisc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMisc(x uint64) (n int) {
	return sovMisc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *C2SConfigProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMisc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SConfigProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SConfigProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMisc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMisc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMisc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CConfigProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMisc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CConfigProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CConfigProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMisc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Config = append(m.Config[:0], dAtA[iNdEx:postIndex]...)
			if m.Config == nil {
				m.Config = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMisc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMisc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMisc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SConfigluaProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMisc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SConfigluaProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SConfigluaProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMisc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMisc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMisc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CConfigluaProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMisc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CConfigluaProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CConfigluaProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMisc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMisc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Config = append(m.Config[:0], dAtA[iNdEx:postIndex]...)
			if m.Config == nil {
				m.Config = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMisc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMisc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SClientLogProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMisc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SClientLogProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SClientLogProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMisc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMisc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Level = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMisc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMisc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SSyncTimeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMisc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SSyncTimeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SSyncTimeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientTime", wireType)
			}
			m.ClientTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMisc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMisc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSyncTimeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMisc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSyncTimeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSyncTimeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientTime", wireType)
			}
			m.ClientTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerTime", wireType)
			}
			m.ServerTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMisc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMisc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CBlockProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMisc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CBlockProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CBlockProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMisc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMisc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMisc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2COpenFunctionProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMisc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2COpenFunctionProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2COpenFunctionProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FunctionType", wireType)
			}
			m.FunctionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FunctionType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMisc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMisc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2COpenMultiFunctionProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMisc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2COpenMultiFunctionProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2COpenMultiFunctionProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMisc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.FunctionType = append(m.FunctionType, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMisc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMisc
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMisc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.FunctionType = append(m.FunctionType, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field FunctionType", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMisc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMisc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSetHeroBoolProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMisc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSetHeroBoolProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSetHeroBoolProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoolType", wireType)
			}
			m.BoolType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BoolType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMisc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMisc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CResetHeroBoolProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMisc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CResetHeroBoolProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CResetHeroBoolProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoolType", wireType)
			}
			m.BoolType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BoolType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMisc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMisc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CScreenShowWordsProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMisc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CScreenShowWordsProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CScreenShowWordsProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Json", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMisc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Json = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMisc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMisc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SClientVersionProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMisc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SClientVersionProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SClientVersionProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Os", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMisc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Os = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field T", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMisc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.T = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMisc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMisc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CClientVersionProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMisc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CClientVersionProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CClientVersionProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field V", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMisc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.V = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Os", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMisc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Os = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field T", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMisc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.T = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMisc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMisc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SUpdatePfTokenProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMisc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SUpdatePfTokenProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SUpdatePfTokenProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMisc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMisc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMisc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SSettingsProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMisc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SSettingsProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SSettingsProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettingType", wireType)
			}
			m.SettingType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SettingType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Open", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Open = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMisc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMisc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSettingsProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMisc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSettingsProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSettingsProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettingType", wireType)
			}
			m.SettingType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SettingType |= (proto3.SettingType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Open", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Open = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMisc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMisc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSettingsToDefaultProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMisc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSettingsToDefaultProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSettingsToDefaultProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettingType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMisc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SettingType == nil {
				m.SettingType = &proto3.HeroSettingsProto{}
			}
			if err := m.SettingType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMisc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMisc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CHeroBroadcastProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMisc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CHeroBroadcastProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CHeroBroadcastProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMisc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMisc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildFlag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMisc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildFlag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMisc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMisc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSysTimingBroadcastProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMisc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSysTimingBroadcastProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSysTimingBroadcastProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMisc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMisc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMisc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSysBroadcastProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMisc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSysBroadcastProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSysBroadcastProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMisc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMisc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMisc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SUpdateLocationProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMisc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SUpdateLocationProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SUpdateLocationProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			m.Location = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Location |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMisc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMisc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateLocationProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMisc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateLocationProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateLocationProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			m.Location = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Location |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMisc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMisc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SCollectChargePrizeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMisc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCollectChargePrizeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCollectChargePrizeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMisc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMisc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCollectChargePrizeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMisc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCollectChargePrizeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCollectChargePrizeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prize", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMisc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prize = append(m.Prize[:0], dAtA[iNdEx:postIndex]...)
			if m.Prize == nil {
				m.Prize = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMisc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMisc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateChargeAmountProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMisc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateChargeAmountProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateChargeAmountProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMisc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMisc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SCollectDailyBargainProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMisc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCollectDailyBargainProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCollectDailyBargainProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMisc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMisc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCollectDailyBargainProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMisc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCollectDailyBargainProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCollectDailyBargainProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prize", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMisc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prize = append(m.Prize[:0], dAtA[iNdEx:postIndex]...)
			if m.Prize == nil {
				m.Prize = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Times", wireType)
			}
			m.Times = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Times |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMisc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMisc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SActivateDurationCardProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMisc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SActivateDurationCardProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SActivateDurationCardProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMisc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMisc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CActivateDurationCardProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMisc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CActivateDurationCardProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CActivateDurationCardProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prize", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMisc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prize = append(m.Prize[:0], dAtA[iNdEx:postIndex]...)
			if m.Prize == nil {
				m.Prize = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMisc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMisc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SCollectDurationCardDailyPrizeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMisc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCollectDurationCardDailyPrizeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCollectDurationCardDailyPrizeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMisc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMisc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCollectDurationCardDailyPrizeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMisc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCollectDurationCardDailyPrizeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCollectDurationCardDailyPrizeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prize", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMisc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prize = append(m.Prize[:0], dAtA[iNdEx:postIndex]...)
			if m.Prize == nil {
				m.Prize = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMisc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMisc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SSetPrivacySettingProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMisc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SSetPrivacySettingProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SSetPrivacySettingProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettingId", wireType)
			}
			m.SettingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SettingId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenOrClose", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OpenOrClose = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMisc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMisc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSetPrivacySettingProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMisc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSetPrivacySettingProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSetPrivacySettingProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettingType", wireType)
			}
			m.SettingType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SettingType |= (proto3.PrivacySettingType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenOrClose", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OpenOrClose = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMisc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMisc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SGetProductInfoProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMisc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SGetProductInfoProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SGetProductInfoProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMisc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMisc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CGetProductInfoProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMisc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CGetProductInfoProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CGetProductInfoProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpOrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMisc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CpOrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Money", wireType)
			}
			m.Money = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Money |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gold", wireType)
			}
			m.Gold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gold |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ext", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMisc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ext = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDebug", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDebug = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMisc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMisc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMisc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMisc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateFirstRechargeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMisc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateFirstRechargeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateFirstRechargeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMisc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMisc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateBuffNoticeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMisc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateBuffNoticeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateBuffNoticeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buff", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMisc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Buff == nil {
				m.Buff = &proto2.BuffInfoProto{}
			}
			if err := m.Buff.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMisc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMisc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMisc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMisc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMisc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMisc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMisc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMisc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMisc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMisc   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/gen/pb/misc/misc.proto", fileDescriptorMisc)
}

var fileDescriptorMisc = []byte{
	// 1121 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xdd, 0x6e, 0xdb, 0x46,
	0x13, 0x0d, 0x65, 0xcb, 0x96, 0x46, 0xb6, 0xe1, 0xf0, 0x73, 0xf2, 0xc9, 0x76, 0xec, 0xb6, 0x0c,
	0x82, 0x1a, 0x41, 0x6d, 0x05, 0x8c, 0x03, 0x5f, 0xa4, 0xbd, 0x88, 0xe8, 0xba, 0x11, 0x90, 0xc4,
	0x86, 0xa8, 0xfe, 0x02, 0x8d, 0xb0, 0x22, 0x57, 0xf4, 0x36, 0x14, 0x97, 0x20, 0x97, 0x4a, 0x55,
	0xa0, 0xef, 0xd1, 0x47, 0xea, 0x65, 0x1f, 0xa1, 0x75, 0x5f, 0xa4, 0xd8, 0xd9, 0x25, 0x45, 0x35,
	0x72, 0x2d, 0xdf, 0xd8, 0x3b, 0xa3, 0x39, 0x67, 0xce, 0xce, 0xce, 0x8c, 0x04, 0x4f, 0x02, 0x26,
	0x2e, 0xb3, 0xc1, 0x91, 0xc7, 0x47, 0xad, 0x90, 0x05, 0x97, 0x22, 0x26, 0xef, 0x5b, 0x23, 0x12,
	0xd2, 0x93, 0x56, 0x40, 0xa3, 0x56, 0x3c, 0x68, 0x8d, 0x58, 0xea, 0xe1, 0x9f, 0xa3, 0x38, 0xe1,
	0x82, 0x9b, 0x55, 0xfc, 0xb7, 0x73, 0x7c, 0x3d, 0x30, 0x1e, 0xb4, 0xd2, 0x4b, 0x92, 0x50, 0xbf,
	0x8f, 0xa1, 0xad, 0x41, 0x36, 0x1c, 0x2a, 0xf0, 0xce, 0xc9, 0xe2, 0xa8, 0x94, 0x0a, 0xc1, 0xa2,
	0x40, 0x01, 0xad, 0xc7, 0xb0, 0xe1, 0xd8, 0xae, 0xc3, 0xa3, 0x21, 0x0b, 0x2e, 0x50, 0x47, 0x13,
	0x56, 0xc7, 0x34, 0x49, 0x19, 0x8f, 0x9a, 0xc6, 0xc7, 0xc6, 0x41, 0xbd, 0x9b, 0x9b, 0x56, 0x1b,
	0x36, 0x5c, 0xdb, 0x29, 0xc7, 0xde, 0x87, 0x15, 0x0f, 0x4d, 0x0c, 0x5d, 0xeb, 0x6a, 0xab, 0xcc,
	0x51, 0x99, 0xe5, 0x38, 0x84, 0xbb, 0x45, 0xbe, 0x30, 0x23, 0x37, 0xa5, 0xfc, 0x12, 0xee, 0x16,
	0x29, 0x6f, 0x0e, 0x2f, 0xe9, 0xa9, 0x94, 0xf5, 0x58, 0x5f, 0xa8, 0xac, 0x21, 0xa3, 0x91, 0x78,
	0xc5, 0xb5, 0x78, 0x13, 0x96, 0x05, 0xfd, 0x59, 0x68, 0x0e, 0x3c, 0x9b, 0x5b, 0x50, 0x0d, 0xe9,
	0x98, 0x86, 0x5a, 0xb6, 0x32, 0xac, 0xa7, 0xb0, 0xe9, 0xd8, 0xae, 0x3b, 0x89, 0xbc, 0x1e, 0x1b,
	0x51, 0x85, 0xfe, 0x08, 0x1a, 0x1e, 0xf2, 0xf5, 0x05, 0x1b, 0x51, 0x24, 0xa9, 0x76, 0x41, 0xb9,
	0x64, 0x94, 0xd5, 0x83, 0x4d, 0xd7, 0x76, 0x6e, 0x07, 0x92, 0x01, 0x29, 0x4d, 0xc6, 0x34, 0x51,
	0x01, 0x15, 0x15, 0xa0, 0x5c, 0xc8, 0xfa, 0x10, 0xd6, 0x5d, 0xdb, 0x69, 0x87, 0xdc, 0x7b, 0x57,
	0xdc, 0xc2, 0x27, 0x82, 0xe8, 0x07, 0xc0, 0xb3, 0xf5, 0x1c, 0xb6, 0x5c, 0xdb, 0x39, 0x8f, 0x69,
	0x74, 0x96, 0x45, 0x9e, 0x60, 0x3c, 0x52, 0xb1, 0x0f, 0x61, 0x7d, 0xa8, 0x1d, 0x7d, 0x31, 0x89,
	0x73, 0x01, 0x6b, 0xb9, 0xb3, 0x37, 0x89, 0xa9, 0x75, 0x0a, 0xdb, 0x1a, 0xfc, 0x3a, 0x0b, 0x05,
	0x9b, 0x65, 0xf8, 0xf4, 0x43, 0x86, 0xa5, 0x83, 0x6a, 0xbb, 0xb2, 0x79, 0xe7, 0x5f, 0x2c, 0x36,
	0xfc, 0x4f, 0xde, 0x9e, 0x8a, 0x97, 0x34, 0xe1, 0x6d, 0xce, 0x43, 0x85, 0xdf, 0x85, 0xfa, 0x80,
	0xf3, 0xb0, 0x9c, 0xbd, 0x26, 0x1d, 0x88, 0x39, 0x86, 0x7b, 0xae, 0xed, 0x74, 0x69, 0x7a, 0x2b,
	0xd4, 0x21, 0xfc, 0x5f, 0x66, 0xf2, 0x12, 0x4a, 0x23, 0xf7, 0x92, 0xbf, 0xff, 0x96, 0x27, 0x7e,
	0x5a, 0xd4, 0xe6, 0xa7, 0xb4, 0xe8, 0x41, 0x3c, 0x5b, 0xcf, 0xe0, 0x5e, 0xd1, 0x0a, 0xdf, 0xa8,
	0xb6, 0x51, 0xc1, 0x1b, 0x50, 0xe1, 0xa9, 0x6e, 0x86, 0x0a, 0x4f, 0xcd, 0x35, 0x30, 0x84, 0x46,
	0x1a, 0xc2, 0x72, 0x50, 0xdb, 0x1c, 0xd8, 0x1a, 0x18, 0x63, 0x8d, 0x32, 0xc6, 0x9a, 0xa4, 0x32,
	0x4b, 0xb2, 0x94, 0x93, 0x1c, 0x62, 0xee, 0xaf, 0x63, 0x9f, 0x08, 0x7a, 0x31, 0xec, 0xf1, 0x77,
	0x54, 0x93, 0x6c, 0x41, 0x55, 0x48, 0x4b, 0x13, 0x29, 0xc3, 0xea, 0xa8, 0xb6, 0x53, 0xf3, 0xaa,
	0xaf, 0xf4, 0x09, 0xac, 0xe9, 0x01, 0x2e, 0x57, 0xa3, 0xa1, 0x7d, 0xb2, 0x20, 0xf2, 0xd6, 0x3c,
	0xa6, 0xea, 0xd6, 0xb5, 0x2e, 0x9e, 0xad, 0x1f, 0x55, 0x33, 0xce, 0x50, 0x3d, 0x9b, 0x43, 0xb5,
	0x61, 0x9b, 0x6a, 0x31, 0x1c, 0xb9, 0x53, 0xc6, 0x9b, 0xe9, 0xbf, 0xc3, 0x9e, 0xc9, 0xe9, 0x7b,
	0xfc, 0x94, 0x0e, 0x49, 0x16, 0x0a, 0x95, 0xe7, 0xf9, 0x9c, 0x3c, 0x0d, 0xbb, 0xa9, 0xf3, 0xc8,
	0x97, 0x9e, 0xd1, 0x35, 0x93, 0xcd, 0x7a, 0x8b, 0x75, 0xc7, 0x76, 0x48, 0x38, 0xf1, 0x3d, 0x92,
	0x8a, 0xeb, 0xa7, 0xd7, 0x84, 0xe5, 0x88, 0xe8, 0xb1, 0xa9, 0x77, 0xf1, 0x6c, 0xee, 0x01, 0x04,
	0x19, 0x0b, 0xfd, 0xfe, 0x30, 0x24, 0x81, 0x7e, 0x8a, 0x3a, 0x7a, 0xce, 0x42, 0x12, 0x58, 0x4f,
	0x60, 0x07, 0xa7, 0x34, 0xed, 0xb1, 0x11, 0x8b, 0x82, 0x6b, 0x92, 0x2c, 0x4d, 0x93, 0x58, 0x8f,
	0x71, 0xb8, 0xdc, 0x49, 0x7a, 0x4d, 0x6c, 0xbd, 0x14, 0x7b, 0x0c, 0xf7, 0x8b, 0x07, 0x7f, 0xc5,
	0x3d, 0x32, 0x1d, 0xa4, 0x1d, 0xa8, 0x85, 0xda, 0x91, 0x77, 0x74, 0x6e, 0x4b, 0x94, 0x6b, 0x3b,
	0xb7, 0x45, 0x7d, 0x06, 0x3b, 0xb8, 0x59, 0xc3, 0x90, 0x7a, 0xc2, 0xb9, 0x24, 0x49, 0x40, 0x2f,
	0x12, 0xf6, 0x0b, 0x2d, 0xba, 0x9b, 0xf9, 0x1a, 0x53, 0x61, 0xbe, 0xd5, 0xc6, 0x7b, 0x2f, 0x18,
	0x2d, 0xfb, 0x33, 0x96, 0x9f, 0xea, 0xb5, 0xaa, 0x0c, 0xeb, 0x18, 0x39, 0x94, 0x4e, 0x45, 0xf1,
	0x62, 0xc4, 0xb3, 0x48, 0x14, 0xdf, 0x0d, 0x04, 0x4d, 0xcd, 0xa3, 0x2d, 0xeb, 0x10, 0x76, 0xa7,
	0x3a, 0x4f, 0x09, 0x0b, 0x27, 0x6d, 0x92, 0x04, 0x84, 0x45, 0xf3, 0x85, 0x7e, 0x0f, 0xbb, 0x53,
	0xa1, 0x37, 0x86, 0xcf, 0x57, 0x8a, 0xf3, 0xc5, 0x46, 0x34, 0xc5, 0x87, 0xac, 0x76, 0x95, 0x61,
	0x1d, 0xc1, 0x03, 0xc7, 0x76, 0x5f, 0x78, 0x82, 0x8d, 0x89, 0xa0, 0xa7, 0x59, 0x82, 0x85, 0x74,
	0x48, 0xe2, 0xcf, 0x97, 0xd2, 0x87, 0x07, 0xae, 0xed, 0x2c, 0x1c, 0x6f, 0x6e, 0x43, 0x8d, 0x46,
	0x7e, 0x79, 0x93, 0xaf, 0xd2, 0xc8, 0xc7, 0x3d, 0x5f, 0xc8, 0x5c, 0x2a, 0x17, 0xf4, 0x04, 0x1e,
	0x95, 0x4a, 0x53, 0xe2, 0xc7, 0x7b, 0xff, 0xc7, 0x6b, 0xbe, 0x86, 0x47, 0xa5, 0x22, 0x2d, 0x0e,
	0xbc, 0xe6, 0x61, 0xdf, 0xc2, 0xb6, 0x5a, 0x3c, 0x17, 0x09, 0x1b, 0x13, 0x6f, 0xa2, 0xe7, 0x53,
	0x51, 0xec, 0x01, 0xe4, 0xe3, 0x5c, 0x50, 0xd5, 0xb5, 0xa7, 0xe3, 0x9b, 0x16, 0xac, 0xcb, 0x95,
	0xd0, 0xe7, 0x49, 0xdf, 0x0b, 0x79, 0x4a, 0xf5, 0x9e, 0x68, 0x48, 0xe7, 0x79, 0xe2, 0x48, 0x97,
	0xf5, 0x6b, 0xbe, 0x2e, 0xe6, 0xf1, 0x7f, 0x3e, 0x77, 0x2d, 0x6d, 0xeb, 0x75, 0x31, 0x8b, 0xf8,
	0x70, 0x3b, 0x2d, 0x92, 0xfe, 0x00, 0xa7, 0xf2, 0x2b, 0x99, 0x9e, 0xfb, 0x99, 0x27, 0x3a, 0xd1,
	0x90, 0x97, 0xcb, 0x53, 0x29, 0xea, 0xfa, 0x97, 0x81, 0xa3, 0x38, 0x2f, 0x74, 0x1f, 0x1a, 0x5e,
	0xdc, 0xe7, 0x89, 0x4f, 0x93, 0xbe, 0xc6, 0xd4, 0xbb, 0x75, 0x2f, 0x3e, 0x97, 0x9e, 0x0e, 0x56,
	0x76, 0xc4, 0x23, 0x3a, 0xc9, 0x5b, 0x0e, 0x0d, 0xb9, 0x24, 0x02, 0x1e, 0xfa, 0xcd, 0x65, 0x74,
	0xe2, 0xd9, 0xdc, 0x84, 0x25, 0xb9, 0x37, 0xaa, 0xc8, 0x20, 0x8f, 0xb2, 0x71, 0x58, 0xda, 0xf7,
	0xe9, 0x20, 0x0b, 0x9a, 0x2b, 0xa8, 0x7f, 0x95, 0xa5, 0xa7, 0xd2, 0xd4, 0x0a, 0x57, 0x8b, 0x07,
	0xdc, 0x03, 0x88, 0x95, 0x34, 0xa9, 0xa2, 0xa6, 0x54, 0x68, 0x4f, 0xc7, 0x97, 0x5f, 0x17, 0xf9,
	0xc7, 0xb8, 0x19, 0xd5, 0x72, 0x6a, 0x68, 0xdf, 0x1b, 0x32, 0x92, 0xdf, 0x9f, 0xbb, 0xc5, 0x14,
	0x9f, 0xb1, 0x24, 0x15, 0x5d, 0xea, 0xe9, 0x7d, 0x30, 0x7f, 0x08, 0x9a, 0x45, 0x78, 0x3b, 0x1b,
	0x0e, 0xdf, 0x70, 0xc1, 0x3c, 0x1d, 0xbb, 0x0d, 0xb5, 0x20, 0xe1, 0x59, 0x3c, 0x6d, 0x8c, 0x55,
	0xb4, 0x3b, 0xbe, 0x79, 0x00, 0xcb, 0xf2, 0xe7, 0x2a, 0xd6, 0xa9, 0x61, 0x6f, 0xe9, 0xd7, 0x94,
	0x04, 0x45, 0x49, 0xbb, 0x18, 0xd1, 0x6e, 0xfe, 0x7e, 0xb5, 0x6f, 0xfc, 0x71, 0xb5, 0x6f, 0xfc,
	0x79, 0xb5, 0x6f, 0xfc, 0xf6, 0xf7, 0xfe, 0x9d, 0x97, 0xc6, 0x0f, 0xcb, 0xf2, 0x77, 0xf2, 0x60,
	0x05, 0x41, 0x4f, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0xca, 0x6e, 0x7c, 0x23, 0x5c, 0x0b, 0x00,
	0x00,
}
