// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/gen/pb/zhengwu/zhengwu.proto
// DO NOT EDIT!

/*
Package zhengwu is a generated protocol buffer package.

It is generated from these files:
	github.com/lightpaw/male7/gen/pb/zhengwu/zhengwu.proto

It has these top-level messages:
	C2SStartProto
	S2CStartProto
	S2CRefreshProto
	C2SVipCollectProto
	S2CVipCollectProto
*/
package zhengwu

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type C2SStartProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SStartProto) Reset()                    { *m = C2SStartProto{} }
func (m *C2SStartProto) String() string            { return proto.CompactTextString(m) }
func (*C2SStartProto) ProtoMessage()               {}
func (*C2SStartProto) Descriptor() ([]byte, []int) { return fileDescriptorZhengwu, []int{0} }

func (m *C2SStartProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type S2CStartProto struct {
	ZhengWu []byte `protobuf:"bytes,1,opt,name=zheng_wu,json=zhengWu,proto3" json:"zheng_wu,omitempty"`
}

func (m *S2CStartProto) Reset()                    { *m = S2CStartProto{} }
func (m *S2CStartProto) String() string            { return proto.CompactTextString(m) }
func (*S2CStartProto) ProtoMessage()               {}
func (*S2CStartProto) Descriptor() ([]byte, []int) { return fileDescriptorZhengwu, []int{1} }

func (m *S2CStartProto) GetZhengWu() []byte {
	if m != nil {
		return m.ZhengWu
	}
	return nil
}

type S2CRefreshProto struct {
	NewZhengWu []byte `protobuf:"bytes,1,opt,name=new_zheng_wu,json=newZhengWu,proto3" json:"new_zheng_wu,omitempty"`
}

func (m *S2CRefreshProto) Reset()                    { *m = S2CRefreshProto{} }
func (m *S2CRefreshProto) String() string            { return proto.CompactTextString(m) }
func (*S2CRefreshProto) ProtoMessage()               {}
func (*S2CRefreshProto) Descriptor() ([]byte, []int) { return fileDescriptorZhengwu, []int{2} }

func (m *S2CRefreshProto) GetNewZhengWu() []byte {
	if m != nil {
		return m.NewZhengWu
	}
	return nil
}

type C2SVipCollectProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SVipCollectProto) Reset()                    { *m = C2SVipCollectProto{} }
func (m *C2SVipCollectProto) String() string            { return proto.CompactTextString(m) }
func (*C2SVipCollectProto) ProtoMessage()               {}
func (*C2SVipCollectProto) Descriptor() ([]byte, []int) { return fileDescriptorZhengwu, []int{3} }

func (m *C2SVipCollectProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type S2CVipCollectProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *S2CVipCollectProto) Reset()                    { *m = S2CVipCollectProto{} }
func (m *S2CVipCollectProto) String() string            { return proto.CompactTextString(m) }
func (*S2CVipCollectProto) ProtoMessage()               {}
func (*S2CVipCollectProto) Descriptor() ([]byte, []int) { return fileDescriptorZhengwu, []int{4} }

func (m *S2CVipCollectProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*C2SStartProto)(nil), "proto.C2SStartProto")
	proto.RegisterType((*S2CStartProto)(nil), "proto.S2CStartProto")
	proto.RegisterType((*S2CRefreshProto)(nil), "proto.S2CRefreshProto")
	proto.RegisterType((*C2SVipCollectProto)(nil), "proto.C2SVipCollectProto")
	proto.RegisterType((*S2CVipCollectProto)(nil), "proto.S2CVipCollectProto")
}
func (m *C2SStartProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SStartProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintZhengwu(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *S2CStartProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CStartProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ZhengWu) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintZhengwu(dAtA, i, uint64(len(m.ZhengWu)))
		i += copy(dAtA[i:], m.ZhengWu)
	}
	return i, nil
}

func (m *S2CRefreshProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CRefreshProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NewZhengWu) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintZhengwu(dAtA, i, uint64(len(m.NewZhengWu)))
		i += copy(dAtA[i:], m.NewZhengWu)
	}
	return i, nil
}

func (m *C2SVipCollectProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SVipCollectProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintZhengwu(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *S2CVipCollectProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CVipCollectProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintZhengwu(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func encodeFixed64Zhengwu(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Zhengwu(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintZhengwu(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *C2SStartProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovZhengwu(uint64(m.Id))
	}
	return n
}

func (m *S2CStartProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.ZhengWu)
	if l > 0 {
		n += 1 + l + sovZhengwu(uint64(l))
	}
	return n
}

func (m *S2CRefreshProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.NewZhengWu)
	if l > 0 {
		n += 1 + l + sovZhengwu(uint64(l))
	}
	return n
}

func (m *C2SVipCollectProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovZhengwu(uint64(m.Id))
	}
	return n
}

func (m *S2CVipCollectProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovZhengwu(uint64(m.Id))
	}
	return n
}

func sovZhengwu(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozZhengwu(x uint64) (n int) {
	return sovZhengwu(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *C2SStartProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZhengwu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SStartProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SStartProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhengwu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZhengwu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZhengwu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CStartProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZhengwu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CStartProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CStartProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZhengWu", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhengwu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZhengwu
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZhengWu = append(m.ZhengWu[:0], dAtA[iNdEx:postIndex]...)
			if m.ZhengWu == nil {
				m.ZhengWu = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZhengwu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZhengwu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CRefreshProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZhengwu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CRefreshProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CRefreshProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewZhengWu", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhengwu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZhengwu
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewZhengWu = append(m.NewZhengWu[:0], dAtA[iNdEx:postIndex]...)
			if m.NewZhengWu == nil {
				m.NewZhengWu = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZhengwu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZhengwu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SVipCollectProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZhengwu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SVipCollectProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SVipCollectProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhengwu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZhengwu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZhengwu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CVipCollectProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZhengwu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CVipCollectProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CVipCollectProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhengwu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZhengwu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZhengwu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipZhengwu(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowZhengwu
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZhengwu
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZhengwu
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthZhengwu
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowZhengwu
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipZhengwu(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthZhengwu = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowZhengwu   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/gen/pb/zhengwu/zhengwu.proto", fileDescriptorZhengwu)
}

var fileDescriptorZhengwu = []byte{
	// 222 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x4b, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0xcf, 0xc9, 0x4c, 0xcf, 0x28, 0x29, 0x48, 0x2c, 0xd7,
	0xcf, 0x4d, 0xcc, 0x49, 0x35, 0xd7, 0x4f, 0x4f, 0xcd, 0xd3, 0x2f, 0x48, 0xd2, 0xaf, 0xca, 0x48,
	0xcd, 0x4b, 0x2f, 0x2f, 0x85, 0xd1, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0xac, 0x60, 0x4a,
	0x49, 0x9e, 0x8b, 0xd7, 0xd9, 0x28, 0x38, 0xb8, 0x24, 0xb1, 0xa8, 0x24, 0x00, 0x2c, 0xce, 0xc7,
	0xc5, 0x94, 0x99, 0x22, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x1a, 0xc4, 0x94, 0x99, 0xa2, 0xa4, 0xc5,
	0xc5, 0x1b, 0x6c, 0xe4, 0x8c, 0xa4, 0x40, 0x92, 0x8b, 0x03, 0x6c, 0x52, 0x7c, 0x79, 0x29, 0x58,
	0x19, 0x4f, 0x10, 0x3b, 0x98, 0x1f, 0x5e, 0xaa, 0x64, 0xcc, 0xc5, 0x1f, 0x6c, 0xe4, 0x1c, 0x94,
	0x9a, 0x56, 0x94, 0x5a, 0x9c, 0x01, 0x51, 0xad, 0xc0, 0xc5, 0x93, 0x97, 0x5a, 0x1e, 0x8f, 0xa6,
	0x83, 0x2b, 0x2f, 0xb5, 0x3c, 0x0a, 0xaa, 0x49, 0x85, 0x4b, 0xc8, 0xd9, 0x28, 0x38, 0x2c, 0xb3,
	0xc0, 0x39, 0x3f, 0x27, 0x27, 0x35, 0x19, 0x87, 0x33, 0x54, 0xb8, 0x84, 0x82, 0x8d, 0x9c, 0x09,
	0xa8, 0x72, 0x92, 0x3e, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18,
	0x67, 0x3c, 0x96, 0x63, 0xf0, 0x60, 0x8c, 0x62, 0x87, 0xfa, 0x3b, 0x89, 0x0d, 0xec, 0x63, 0x63,
	0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x57, 0x0e, 0x74, 0x35, 0x32, 0x01, 0x00, 0x00,
}
