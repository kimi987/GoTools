// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/gen/pb/random_event/random_event.proto
// DO NOT EDIT!

/*
	Package random_event is a generated protocol buffer package.

	It is generated from these files:
		github.com/lightpaw/male7/gen/pb/random_event/random_event.proto

	It has these top-level messages:
		C2SChooseOptionProto
		S2CChooseOptionProto
		C2SOpenEventProto
		S2COpenEventProto
		S2CNewEventProto
		S2CAddEventHandbookProto
*/
package random_event

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import proto2 "github.com/lightpaw/male7/pb/shared_proto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type C2SChooseOptionProto struct {
	PosX   int32 `protobuf:"varint,1,opt,name=pos_x,json=posX,proto3" json:"pos_x,omitempty"`
	PosY   int32 `protobuf:"varint,2,opt,name=pos_y,json=posY,proto3" json:"pos_y,omitempty"`
	Option int32 `protobuf:"varint,3,opt,name=option,proto3" json:"option,omitempty"`
}

func (m *C2SChooseOptionProto) Reset()                    { *m = C2SChooseOptionProto{} }
func (m *C2SChooseOptionProto) String() string            { return proto.CompactTextString(m) }
func (*C2SChooseOptionProto) ProtoMessage()               {}
func (*C2SChooseOptionProto) Descriptor() ([]byte, []int) { return fileDescriptorRandomEvent, []int{0} }

func (m *C2SChooseOptionProto) GetPosX() int32 {
	if m != nil {
		return m.PosX
	}
	return 0
}

func (m *C2SChooseOptionProto) GetPosY() int32 {
	if m != nil {
		return m.PosY
	}
	return 0
}

func (m *C2SChooseOptionProto) GetOption() int32 {
	if m != nil {
		return m.Option
	}
	return 0
}

type S2CChooseOptionProto struct {
	PosX    int32  `protobuf:"varint,3,opt,name=pos_x,json=posX,proto3" json:"pos_x,omitempty"`
	PosY    int32  `protobuf:"varint,4,opt,name=pos_y,json=posY,proto3" json:"pos_y,omitempty"`
	Option  int32  `protobuf:"varint,5,opt,name=option,proto3" json:"option,omitempty"`
	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Prize   []byte `protobuf:"bytes,2,opt,name=prize,proto3" json:"prize,omitempty"`
}

func (m *S2CChooseOptionProto) Reset()                    { *m = S2CChooseOptionProto{} }
func (m *S2CChooseOptionProto) String() string            { return proto.CompactTextString(m) }
func (*S2CChooseOptionProto) ProtoMessage()               {}
func (*S2CChooseOptionProto) Descriptor() ([]byte, []int) { return fileDescriptorRandomEvent, []int{1} }

func (m *S2CChooseOptionProto) GetPosX() int32 {
	if m != nil {
		return m.PosX
	}
	return 0
}

func (m *S2CChooseOptionProto) GetPosY() int32 {
	if m != nil {
		return m.PosY
	}
	return 0
}

func (m *S2CChooseOptionProto) GetOption() int32 {
	if m != nil {
		return m.Option
	}
	return 0
}

func (m *S2CChooseOptionProto) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *S2CChooseOptionProto) GetPrize() []byte {
	if m != nil {
		return m.Prize
	}
	return nil
}

type C2SOpenEventProto struct {
	PosX int32 `protobuf:"varint,1,opt,name=pos_x,json=posX,proto3" json:"pos_x,omitempty"`
	PosY int32 `protobuf:"varint,2,opt,name=pos_y,json=posY,proto3" json:"pos_y,omitempty"`
}

func (m *C2SOpenEventProto) Reset()                    { *m = C2SOpenEventProto{} }
func (m *C2SOpenEventProto) String() string            { return proto.CompactTextString(m) }
func (*C2SOpenEventProto) ProtoMessage()               {}
func (*C2SOpenEventProto) Descriptor() ([]byte, []int) { return fileDescriptorRandomEvent, []int{2} }

func (m *C2SOpenEventProto) GetPosX() int32 {
	if m != nil {
		return m.PosX
	}
	return 0
}

func (m *C2SOpenEventProto) GetPosY() int32 {
	if m != nil {
		return m.PosY
	}
	return 0
}

type S2COpenEventProto struct {
	PosX    int32                      `protobuf:"varint,2,opt,name=pos_x,json=posX,proto3" json:"pos_x,omitempty"`
	PosY    int32                      `protobuf:"varint,3,opt,name=pos_y,json=posY,proto3" json:"pos_y,omitempty"`
	EventId int32                      `protobuf:"varint,4,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Options []*proto2.EventOptionProto `protobuf:"bytes,5,rep,name=options" json:"options,omitempty"`
}

func (m *S2COpenEventProto) Reset()                    { *m = S2COpenEventProto{} }
func (m *S2COpenEventProto) String() string            { return proto.CompactTextString(m) }
func (*S2COpenEventProto) ProtoMessage()               {}
func (*S2COpenEventProto) Descriptor() ([]byte, []int) { return fileDescriptorRandomEvent, []int{3} }

func (m *S2COpenEventProto) GetPosX() int32 {
	if m != nil {
		return m.PosX
	}
	return 0
}

func (m *S2COpenEventProto) GetPosY() int32 {
	if m != nil {
		return m.PosY
	}
	return 0
}

func (m *S2COpenEventProto) GetEventId() int32 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *S2COpenEventProto) GetOptions() []*proto2.EventOptionProto {
	if m != nil {
		return m.Options
	}
	return nil
}

type S2CNewEventProto struct {
	ArrPosX []int32 `protobuf:"varint,1,rep,name=arr_pos_x,json=arrPosX" json:"arr_pos_x,omitempty"`
	ArrPosY []int32 `protobuf:"varint,2,rep,name=arr_pos_y,json=arrPosY" json:"arr_pos_y,omitempty"`
}

func (m *S2CNewEventProto) Reset()                    { *m = S2CNewEventProto{} }
func (m *S2CNewEventProto) String() string            { return proto.CompactTextString(m) }
func (*S2CNewEventProto) ProtoMessage()               {}
func (*S2CNewEventProto) Descriptor() ([]byte, []int) { return fileDescriptorRandomEvent, []int{4} }

func (m *S2CNewEventProto) GetArrPosX() []int32 {
	if m != nil {
		return m.ArrPosX
	}
	return nil
}

func (m *S2CNewEventProto) GetArrPosY() []int32 {
	if m != nil {
		return m.ArrPosY
	}
	return nil
}

type S2CAddEventHandbookProto struct {
	EventId int32 `protobuf:"varint,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
}

func (m *S2CAddEventHandbookProto) Reset()         { *m = S2CAddEventHandbookProto{} }
func (m *S2CAddEventHandbookProto) String() string { return proto.CompactTextString(m) }
func (*S2CAddEventHandbookProto) ProtoMessage()    {}
func (*S2CAddEventHandbookProto) Descriptor() ([]byte, []int) {
	return fileDescriptorRandomEvent, []int{5}
}

func (m *S2CAddEventHandbookProto) GetEventId() int32 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func init() {
	proto.RegisterType((*C2SChooseOptionProto)(nil), "proto.C2SChooseOptionProto")
	proto.RegisterType((*S2CChooseOptionProto)(nil), "proto.S2CChooseOptionProto")
	proto.RegisterType((*C2SOpenEventProto)(nil), "proto.C2SOpenEventProto")
	proto.RegisterType((*S2COpenEventProto)(nil), "proto.S2COpenEventProto")
	proto.RegisterType((*S2CNewEventProto)(nil), "proto.S2CNewEventProto")
	proto.RegisterType((*S2CAddEventHandbookProto)(nil), "proto.S2CAddEventHandbookProto")
}
func (m *C2SChooseOptionProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SChooseOptionProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PosX != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRandomEvent(dAtA, i, uint64(m.PosX))
	}
	if m.PosY != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRandomEvent(dAtA, i, uint64(m.PosY))
	}
	if m.Option != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRandomEvent(dAtA, i, uint64(m.Option))
	}
	return i, nil
}

func (m *S2CChooseOptionProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CChooseOptionProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Success {
		dAtA[i] = 0x8
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Prize) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRandomEvent(dAtA, i, uint64(len(m.Prize)))
		i += copy(dAtA[i:], m.Prize)
	}
	if m.PosX != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRandomEvent(dAtA, i, uint64(m.PosX))
	}
	if m.PosY != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRandomEvent(dAtA, i, uint64(m.PosY))
	}
	if m.Option != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRandomEvent(dAtA, i, uint64(m.Option))
	}
	return i, nil
}

func (m *C2SOpenEventProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SOpenEventProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PosX != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRandomEvent(dAtA, i, uint64(m.PosX))
	}
	if m.PosY != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRandomEvent(dAtA, i, uint64(m.PosY))
	}
	return i, nil
}

func (m *S2COpenEventProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2COpenEventProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PosX != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRandomEvent(dAtA, i, uint64(m.PosX))
	}
	if m.PosY != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRandomEvent(dAtA, i, uint64(m.PosY))
	}
	if m.EventId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRandomEvent(dAtA, i, uint64(m.EventId))
	}
	if len(m.Options) > 0 {
		for _, msg := range m.Options {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintRandomEvent(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *S2CNewEventProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CNewEventProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ArrPosX) > 0 {
		for _, num := range m.ArrPosX {
			dAtA[i] = 0x8
			i++
			i = encodeVarintRandomEvent(dAtA, i, uint64(num))
		}
	}
	if len(m.ArrPosY) > 0 {
		for _, num := range m.ArrPosY {
			dAtA[i] = 0x10
			i++
			i = encodeVarintRandomEvent(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *S2CAddEventHandbookProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CAddEventHandbookProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EventId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRandomEvent(dAtA, i, uint64(m.EventId))
	}
	return i, nil
}

func encodeFixed64RandomEvent(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32RandomEvent(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintRandomEvent(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *C2SChooseOptionProto) Size() (n int) {
	var l int
	_ = l
	if m.PosX != 0 {
		n += 1 + sovRandomEvent(uint64(m.PosX))
	}
	if m.PosY != 0 {
		n += 1 + sovRandomEvent(uint64(m.PosY))
	}
	if m.Option != 0 {
		n += 1 + sovRandomEvent(uint64(m.Option))
	}
	return n
}

func (m *S2CChooseOptionProto) Size() (n int) {
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	l = len(m.Prize)
	if l > 0 {
		n += 1 + l + sovRandomEvent(uint64(l))
	}
	if m.PosX != 0 {
		n += 1 + sovRandomEvent(uint64(m.PosX))
	}
	if m.PosY != 0 {
		n += 1 + sovRandomEvent(uint64(m.PosY))
	}
	if m.Option != 0 {
		n += 1 + sovRandomEvent(uint64(m.Option))
	}
	return n
}

func (m *C2SOpenEventProto) Size() (n int) {
	var l int
	_ = l
	if m.PosX != 0 {
		n += 1 + sovRandomEvent(uint64(m.PosX))
	}
	if m.PosY != 0 {
		n += 1 + sovRandomEvent(uint64(m.PosY))
	}
	return n
}

func (m *S2COpenEventProto) Size() (n int) {
	var l int
	_ = l
	if m.PosX != 0 {
		n += 1 + sovRandomEvent(uint64(m.PosX))
	}
	if m.PosY != 0 {
		n += 1 + sovRandomEvent(uint64(m.PosY))
	}
	if m.EventId != 0 {
		n += 1 + sovRandomEvent(uint64(m.EventId))
	}
	if len(m.Options) > 0 {
		for _, e := range m.Options {
			l = e.Size()
			n += 1 + l + sovRandomEvent(uint64(l))
		}
	}
	return n
}

func (m *S2CNewEventProto) Size() (n int) {
	var l int
	_ = l
	if len(m.ArrPosX) > 0 {
		for _, e := range m.ArrPosX {
			n += 1 + sovRandomEvent(uint64(e))
		}
	}
	if len(m.ArrPosY) > 0 {
		for _, e := range m.ArrPosY {
			n += 1 + sovRandomEvent(uint64(e))
		}
	}
	return n
}

func (m *S2CAddEventHandbookProto) Size() (n int) {
	var l int
	_ = l
	if m.EventId != 0 {
		n += 1 + sovRandomEvent(uint64(m.EventId))
	}
	return n
}

func sovRandomEvent(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRandomEvent(x uint64) (n int) {
	return sovRandomEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *C2SChooseOptionProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRandomEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SChooseOptionProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SChooseOptionProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosX", wireType)
			}
			m.PosX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosX |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosY", wireType)
			}
			m.PosY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosY |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Option", wireType)
			}
			m.Option = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Option |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRandomEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRandomEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CChooseOptionProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRandomEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CChooseOptionProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CChooseOptionProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prize", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRandomEvent
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prize = append(m.Prize[:0], dAtA[iNdEx:postIndex]...)
			if m.Prize == nil {
				m.Prize = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosX", wireType)
			}
			m.PosX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosX |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosY", wireType)
			}
			m.PosY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosY |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Option", wireType)
			}
			m.Option = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Option |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRandomEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRandomEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SOpenEventProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRandomEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SOpenEventProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SOpenEventProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosX", wireType)
			}
			m.PosX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosX |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosY", wireType)
			}
			m.PosY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosY |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRandomEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRandomEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2COpenEventProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRandomEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2COpenEventProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2COpenEventProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosX", wireType)
			}
			m.PosX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosX |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosY", wireType)
			}
			m.PosY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosY |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			m.EventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRandomEvent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Options = append(m.Options, &proto2.EventOptionProto{})
			if err := m.Options[len(m.Options)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRandomEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRandomEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CNewEventProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRandomEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CNewEventProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CNewEventProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRandomEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ArrPosX = append(m.ArrPosX, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRandomEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRandomEvent
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRandomEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ArrPosX = append(m.ArrPosX, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ArrPosX", wireType)
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRandomEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ArrPosY = append(m.ArrPosY, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRandomEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRandomEvent
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRandomEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ArrPosY = append(m.ArrPosY, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ArrPosY", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRandomEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRandomEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CAddEventHandbookProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRandomEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CAddEventHandbookProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CAddEventHandbookProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			m.EventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandomEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRandomEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRandomEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRandomEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRandomEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRandomEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRandomEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRandomEvent
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRandomEvent
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRandomEvent(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRandomEvent = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRandomEvent   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/gen/pb/random_event/random_event.proto", fileDescriptorRandomEvent)
}

var fileDescriptorRandomEvent = []byte{
	// 389 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xcf, 0x4e, 0xea, 0x40,
	0x18, 0xc5, 0x19, 0x4a, 0x29, 0x77, 0x2e, 0x0b, 0xe8, 0x25, 0xf7, 0xf6, 0xba, 0x68, 0x48, 0x57,
	0xac, 0x68, 0xac, 0x31, 0x6e, 0x34, 0x51, 0x1a, 0x13, 0xdc, 0x08, 0x69, 0x37, 0xe0, 0xa6, 0x69,
	0x99, 0x09, 0x6d, 0x84, 0xce, 0x64, 0xa6, 0x88, 0xfa, 0x04, 0x26, 0xbe, 0x80, 0x8f, 0xe4, 0xd2,
	0x47, 0x30, 0xf8, 0x22, 0x86, 0x29, 0xd5, 0xa2, 0x65, 0xe1, 0xaa, 0x39, 0xdf, 0x9f, 0xd3, 0xdf,
	0xf9, 0x5a, 0x78, 0x3a, 0x8d, 0x92, 0x70, 0x11, 0x74, 0x27, 0x64, 0x6e, 0xce, 0xa2, 0x69, 0x98,
	0x50, 0x7f, 0x69, 0xce, 0xfd, 0x19, 0x3e, 0x32, 0xa7, 0x38, 0x36, 0x69, 0x60, 0x32, 0x3f, 0x46,
	0x64, 0xee, 0xe1, 0x1b, 0x1c, 0x27, 0x5b, 0xa2, 0x4b, 0x19, 0x49, 0x88, 0x2a, 0x8b, 0xc7, 0xde,
	0xf1, 0x6e, 0x23, 0x1a, 0x98, 0x3c, 0xf4, 0x19, 0x46, 0x9e, 0x18, 0x2d, 0x30, 0x31, 0x46, 0xb0,
	0x65, 0x5b, 0xae, 0x1d, 0x12, 0xc2, 0xf1, 0x80, 0x26, 0x11, 0x89, 0x87, 0xc2, 0xfc, 0x0f, 0x94,
	0x29, 0xe1, 0xde, 0xad, 0x06, 0xda, 0xa0, 0x23, 0x3b, 0x15, 0x4a, 0xf8, 0x28, 0x2b, 0xde, 0x69,
	0xe5, 0x8f, 0xe2, 0x58, 0xfd, 0x0b, 0xab, 0x44, 0x2c, 0x6a, 0x92, 0xa8, 0x6e, 0x94, 0xf1, 0x00,
	0x60, 0xcb, 0xb5, 0xec, 0xef, 0xd6, 0x1a, 0x54, 0xf8, 0x62, 0x32, 0xc1, 0x9c, 0x0b, 0xf3, 0x9a,
	0x93, 0x49, 0xb5, 0x05, 0x65, 0xca, 0xa2, 0x7b, 0x2c, 0xfc, 0xeb, 0x4e, 0x2a, 0x3e, 0x51, 0xa4,
	0x22, 0x94, 0x4a, 0x21, 0x8a, 0xbc, 0x85, 0x72, 0x02, 0x9b, 0xb6, 0xe5, 0x0e, 0x28, 0x8e, 0xcf,
	0xd7, 0xd1, 0x7f, 0x98, 0xd0, 0x78, 0x04, 0xb0, 0xe9, 0x5a, 0xf6, 0xae, 0xfd, 0x72, 0xd1, 0xbe,
	0x94, 0xc3, 0xfa, 0x0f, 0x6b, 0xe2, 0xe4, 0x5e, 0x84, 0x36, 0xb8, 0x8a, 0xd0, 0x17, 0x48, 0xdd,
	0x87, 0x4a, 0xca, 0xc8, 0x35, 0xb9, 0x2d, 0x75, 0x7e, 0x5b, 0xff, 0xd2, 0xef, 0xd2, 0x15, 0x2f,
	0xca, 0x5d, 0xcd, 0xc9, 0xe6, 0x0c, 0x07, 0x36, 0x5c, 0xcb, 0xbe, 0xc4, 0xcb, 0x1c, 0x8b, 0x0e,
	0x7f, 0xf9, 0x8c, 0x79, 0x59, 0x1e, 0xa9, 0x23, 0xf7, 0xca, 0x8d, 0x92, 0xa3, 0xf8, 0x8c, 0x0d,
	0xd7, 0x58, 0xb9, 0xfe, 0x3a, 0xda, 0x97, 0xfe, 0xd8, 0x38, 0x84, 0x9a, 0x6b, 0xd9, 0x67, 0x08,
	0x09, 0xcf, 0xbe, 0x1f, 0xa3, 0x80, 0x90, 0xeb, 0xd4, 0x3b, 0x4f, 0x0f, 0xb6, 0xe8, 0x7b, 0xed,
	0xe7, 0x95, 0x0e, 0x5e, 0x56, 0x3a, 0x78, 0x5d, 0xe9, 0xe0, 0xe9, 0x4d, 0x2f, 0xf5, 0xc1, 0x55,
	0x3d, 0xff, 0x93, 0x05, 0x55, 0x91, 0xe6, 0xe0, 0x3d, 0x00, 0x00, 0xff, 0xff, 0x3f, 0x25, 0x3b,
	0x53, 0xee, 0x02, 0x00, 0x00,
}
