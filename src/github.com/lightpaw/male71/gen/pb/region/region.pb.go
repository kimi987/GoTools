// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/gen/pb/region/region.proto
// DO NOT EDIT!

/*
	Package region is a generated protocol buffer package.

	It is generated from these files:
		github.com/lightpaw/male7/gen/pb/region/region.proto

	It has these top-level messages:
		S2CUpdateMapRadiusProto
		C2SUpdateSelfViewProto
		S2CUpdateSelfViewProto
		S2CAddBaseUnitProto
		S2CUpdateNpcBaseInfoProto
		S2CUpdateBaseProgressProto
		S2CRemoveBaseUnitProto
		C2SPreInvasionTargetProto
		S2CPreInvasionTargetProto
		C2SWatchBaseUnitProto
		S2CWatchBaseUnitProto
		S2CUpdateWatchBaseProsperityProto
		S2CUpdateStopLostProsperityProto
		S2CAddTroopUnitProto
		S2CRemoveTroopUnitProto
		C2SRequestTroopUnitProto
		S2CRequestTroopUnitProto
		S2CAddRuinsBaseProto
		S2CRemoveRuinsBaseProto
		C2SRequestRuinsBaseProto
		S2CRequestRuinsBaseProto
		S2CUpdateSelfMianDisappearTimeProto
		C2SUseMianGoodsProto
		S2CUseMianGoodsProto
		S2CUpdateNewHeroMianDisappearTimeProto
		S2CSelfUpdateBaseLevelProto
		S2CUpdateWhiteFlagProto
		C2SWhiteFlagDetailProto
		S2CWhiteFlagDetailProto
		S2CSelfBaseDestroyProto
		S2CProsperityBufProto
		S2CShowWordsProto
		S2CGetBuyProsperityCostProto
		S2CBuyProsperityProto
		S2CSelfBeenAttackRobChangedProto
		S2CGuildBeenAttackRobChangedProto
		C2SSwitchActionProto
		S2CSwitchActionProto
		C2SRequestMilitaryPushProto
		S2CRequestMilitaryPushProto
		S2CUpdateMilitaryInfoProto
		S2CRemoveMilitaryInfoProto
		S2CUpdateSelfMilitaryInfoProto
		S2CRemoveSelfMilitaryInfoProto
		S2CNpcBaseInfoProto
		C2SCreateBaseProto
		S2CCreateBaseProto
		C2SFastMoveBaseProto
		S2CFastMoveBaseProto
		C2SInvasionProto
		S2CInvasionProto
		S2CUpdateSelfTroopsProto
		S2CUpdateSelfTroopsOutsideProto
		C2SCancelInvasionProto
		S2CCancelInvasionProto
		C2SRepatriateProto
		S2CRepatriateProto
		C2SBaozRepatriateProto
		S2CBaozRepatriateProto
		C2SSpeedUpProto
		S2CSpeedUpProto
		C2SExpelProto
		S2CExpelProto
		C2SFavoritePosProto
		S2CFavoritePosProto
		S2CFavoritePosListProto
		C2SGetPrevInvestigateProto
		S2CGetPrevInvestigateProto
		C2SInvestigateProto
		S2CInvestigateProto
		C2SInvestigateInvadeProto
		S2CInvestigateInvadeProto
		S2CUpdateMultiLevelNpcPassLevelProto
		S2CUpdateMultiLevelNpcHateProto
		S2CUpdateMultiLevelNpcTimesProto
		C2SUseMultiLevelNpcTimesGoodsProto
		S2CUseMultiLevelNpcTimesGoodsProto
		S2CUpdateInvaseHeroTimesProto
		S2CUpdateJunTuanNpcTimesProto
		C2SUseInvaseHeroTimesGoodsProto
		S2CUseInvaseHeroTimesGoodsProto
		C2SCalcMoveSpeedProto
		S2CCalcMoveSpeedProto
		S2CListEnemyPosProto
		C2SSearchBaozNpcProto
		S2CSearchBaozNpcProto
		S2CHomeAstDefendingInfoProto
		C2SCreateAssemblyProto
		S2CCreateAssemblyProto
		C2SShowAssemblyProto
		S2CShowAssemblyProto
		S2CShowAssemblyChangedProto
		C2SJoinAssemblyProto
		S2CJoinAssemblyProto
		C2SCreateGuildWorkshopProto
		S2CCreateGuildWorkshopProto
		C2SShowGuildWorkshopProto
		S2CShowGuildWorkshopProto
		C2SHurtGuildWorkshopProto
		S2CHurtGuildWorkshopProto
		S2CUpdateGuildWorkshopPrizeCountProto
		S2CUpdateHeroBuildWorkshopTimesProto
		S2CUpdateHeroOutputWorkshopTimesProto
		C2SCatchGuildWorkshopLogsProto
		S2CCatchGuildWorkshopLogsProto
		S2CGetSelfBaozProto
*/
package region

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import proto1 "github.com/lightpaw/male7/pb/shared_proto"
import proto8 "github.com/lightpaw/male7/pb/shared_proto"
import proto9 "github.com/lightpaw/male7/pb/shared_proto"
import proto2 "github.com/lightpaw/male7/pb/shared_proto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type S2CUpdateMapRadiusProto struct {
	CenterX int32 `protobuf:"varint,1,opt,name=center_x,json=centerX,proto3" json:"center_x,omitempty"`
	CenterY int32 `protobuf:"varint,2,opt,name=center_y,json=centerY,proto3" json:"center_y,omitempty"`
	Radius  int32 `protobuf:"varint,3,opt,name=radius,proto3" json:"radius,omitempty"`
}

func (m *S2CUpdateMapRadiusProto) Reset()                    { *m = S2CUpdateMapRadiusProto{} }
func (m *S2CUpdateMapRadiusProto) String() string            { return proto.CompactTextString(m) }
func (*S2CUpdateMapRadiusProto) ProtoMessage()               {}
func (*S2CUpdateMapRadiusProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{0} }

func (m *S2CUpdateMapRadiusProto) GetCenterX() int32 {
	if m != nil {
		return m.CenterX
	}
	return 0
}

func (m *S2CUpdateMapRadiusProto) GetCenterY() int32 {
	if m != nil {
		return m.CenterY
	}
	return 0
}

func (m *S2CUpdateMapRadiusProto) GetRadius() int32 {
	if m != nil {
		return m.Radius
	}
	return 0
}

type C2SUpdateSelfViewProto struct {
	PosX int32 `protobuf:"varint,1,opt,name=pos_x,json=posX,proto3" json:"pos_x,omitempty"`
	PosY int32 `protobuf:"varint,2,opt,name=pos_y,json=posY,proto3" json:"pos_y,omitempty"`
	LenX int32 `protobuf:"varint,3,opt,name=len_x,json=lenX,proto3" json:"len_x,omitempty"`
	LenY int32 `protobuf:"varint,4,opt,name=len_y,json=lenY,proto3" json:"len_y,omitempty"`
}

func (m *C2SUpdateSelfViewProto) Reset()                    { *m = C2SUpdateSelfViewProto{} }
func (m *C2SUpdateSelfViewProto) String() string            { return proto.CompactTextString(m) }
func (*C2SUpdateSelfViewProto) ProtoMessage()               {}
func (*C2SUpdateSelfViewProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{1} }

func (m *C2SUpdateSelfViewProto) GetPosX() int32 {
	if m != nil {
		return m.PosX
	}
	return 0
}

func (m *C2SUpdateSelfViewProto) GetPosY() int32 {
	if m != nil {
		return m.PosY
	}
	return 0
}

func (m *C2SUpdateSelfViewProto) GetLenX() int32 {
	if m != nil {
		return m.LenX
	}
	return 0
}

func (m *C2SUpdateSelfViewProto) GetLenY() int32 {
	if m != nil {
		return m.LenY
	}
	return 0
}

type S2CUpdateSelfViewProto struct {
	MinX int32 `protobuf:"varint,1,opt,name=min_x,json=minX,proto3" json:"min_x,omitempty"`
	MinY int32 `protobuf:"varint,2,opt,name=min_y,json=minY,proto3" json:"min_y,omitempty"`
	MaxX int32 `protobuf:"varint,3,opt,name=max_x,json=maxX,proto3" json:"max_x,omitempty"`
	MaxY int32 `protobuf:"varint,4,opt,name=max_y,json=maxY,proto3" json:"max_y,omitempty"`
}

func (m *S2CUpdateSelfViewProto) Reset()                    { *m = S2CUpdateSelfViewProto{} }
func (m *S2CUpdateSelfViewProto) String() string            { return proto.CompactTextString(m) }
func (*S2CUpdateSelfViewProto) ProtoMessage()               {}
func (*S2CUpdateSelfViewProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{2} }

func (m *S2CUpdateSelfViewProto) GetMinX() int32 {
	if m != nil {
		return m.MinX
	}
	return 0
}

func (m *S2CUpdateSelfViewProto) GetMinY() int32 {
	if m != nil {
		return m.MinY
	}
	return 0
}

func (m *S2CUpdateSelfViewProto) GetMaxX() int32 {
	if m != nil {
		return m.MaxX
	}
	return 0
}

func (m *S2CUpdateSelfViewProto) GetMaxY() int32 {
	if m != nil {
		return m.MaxY
	}
	return 0
}

type S2CAddBaseUnitProto struct {
	AddType int32  `protobuf:"varint,1,opt,name=add_type,json=addType,proto3" json:"add_type,omitempty"`
	Data    []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *S2CAddBaseUnitProto) Reset()                    { *m = S2CAddBaseUnitProto{} }
func (m *S2CAddBaseUnitProto) String() string            { return proto.CompactTextString(m) }
func (*S2CAddBaseUnitProto) ProtoMessage()               {}
func (*S2CAddBaseUnitProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{3} }

func (m *S2CAddBaseUnitProto) GetAddType() int32 {
	if m != nil {
		return m.AddType
	}
	return 0
}

func (m *S2CAddBaseUnitProto) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type S2CUpdateNpcBaseInfoProto struct {
	MapId             int32  `protobuf:"varint,1,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	NpcId             []byte `protobuf:"bytes,2,opt,name=npc_id,json=npcId,proto3" json:"npc_id,omitempty"`
	BaseX             int32  `protobuf:"varint,3,opt,name=base_x,json=baseX,proto3" json:"base_x,omitempty"`
	BaseY             int32  `protobuf:"varint,4,opt,name=base_y,json=baseY,proto3" json:"base_y,omitempty"`
	DataId            int32  `protobuf:"varint,5,opt,name=data_id,json=dataId,proto3" json:"data_id,omitempty"`
	DataType          int32  `protobuf:"varint,6,opt,name=data_type,json=dataType,proto3" json:"data_type,omitempty"`
	GuildId           int32  `protobuf:"varint,7,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	GuildName         string `protobuf:"bytes,16,opt,name=guild_name,json=guildName,proto3" json:"guild_name,omitempty"`
	GuildFlagName     string `protobuf:"bytes,17,opt,name=guild_flag_name,json=guildFlagName,proto3" json:"guild_flag_name,omitempty"`
	Country           int32  `protobuf:"varint,18,opt,name=country,proto3" json:"country,omitempty"`
	MianDisappearTime int32  `protobuf:"varint,8,opt,name=mian_disappear_time,json=mianDisappearTime,proto3" json:"mian_disappear_time,omitempty"`
	Prosperity        int32  `protobuf:"varint,9,opt,name=prosperity,proto3" json:"prosperity,omitempty"`
	HasDefenser       bool   `protobuf:"varint,11,opt,name=has_defenser,json=hasDefenser,proto3" json:"has_defenser,omitempty"`
	Hero              []byte `protobuf:"bytes,22,opt,name=hero,proto3" json:"hero,omitempty"`
	HeroEndTime       int32  `protobuf:"varint,23,opt,name=hero_end_time,json=heroEndTime,proto3" json:"hero_end_time,omitempty"`
	HeroType          int32  `protobuf:"varint,24,opt,name=hero_type,json=heroType,proto3" json:"hero_type,omitempty"`
	Progress          int32  `protobuf:"varint,14,opt,name=progress,proto3" json:"progress,omitempty"`
	TotalProgress     int32  `protobuf:"varint,15,opt,name=total_progress,json=totalProgress,proto3" json:"total_progress,omitempty"`
	ProgressType      int32  `protobuf:"varint,19,opt,name=progress_type,json=progressType,proto3" json:"progress_type,omitempty"`
}

func (m *S2CUpdateNpcBaseInfoProto) Reset()                    { *m = S2CUpdateNpcBaseInfoProto{} }
func (m *S2CUpdateNpcBaseInfoProto) String() string            { return proto.CompactTextString(m) }
func (*S2CUpdateNpcBaseInfoProto) ProtoMessage()               {}
func (*S2CUpdateNpcBaseInfoProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{4} }

func (m *S2CUpdateNpcBaseInfoProto) GetMapId() int32 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *S2CUpdateNpcBaseInfoProto) GetNpcId() []byte {
	if m != nil {
		return m.NpcId
	}
	return nil
}

func (m *S2CUpdateNpcBaseInfoProto) GetBaseX() int32 {
	if m != nil {
		return m.BaseX
	}
	return 0
}

func (m *S2CUpdateNpcBaseInfoProto) GetBaseY() int32 {
	if m != nil {
		return m.BaseY
	}
	return 0
}

func (m *S2CUpdateNpcBaseInfoProto) GetDataId() int32 {
	if m != nil {
		return m.DataId
	}
	return 0
}

func (m *S2CUpdateNpcBaseInfoProto) GetDataType() int32 {
	if m != nil {
		return m.DataType
	}
	return 0
}

func (m *S2CUpdateNpcBaseInfoProto) GetGuildId() int32 {
	if m != nil {
		return m.GuildId
	}
	return 0
}

func (m *S2CUpdateNpcBaseInfoProto) GetGuildName() string {
	if m != nil {
		return m.GuildName
	}
	return ""
}

func (m *S2CUpdateNpcBaseInfoProto) GetGuildFlagName() string {
	if m != nil {
		return m.GuildFlagName
	}
	return ""
}

func (m *S2CUpdateNpcBaseInfoProto) GetCountry() int32 {
	if m != nil {
		return m.Country
	}
	return 0
}

func (m *S2CUpdateNpcBaseInfoProto) GetMianDisappearTime() int32 {
	if m != nil {
		return m.MianDisappearTime
	}
	return 0
}

func (m *S2CUpdateNpcBaseInfoProto) GetProsperity() int32 {
	if m != nil {
		return m.Prosperity
	}
	return 0
}

func (m *S2CUpdateNpcBaseInfoProto) GetHasDefenser() bool {
	if m != nil {
		return m.HasDefenser
	}
	return false
}

func (m *S2CUpdateNpcBaseInfoProto) GetHero() []byte {
	if m != nil {
		return m.Hero
	}
	return nil
}

func (m *S2CUpdateNpcBaseInfoProto) GetHeroEndTime() int32 {
	if m != nil {
		return m.HeroEndTime
	}
	return 0
}

func (m *S2CUpdateNpcBaseInfoProto) GetHeroType() int32 {
	if m != nil {
		return m.HeroType
	}
	return 0
}

func (m *S2CUpdateNpcBaseInfoProto) GetProgress() int32 {
	if m != nil {
		return m.Progress
	}
	return 0
}

func (m *S2CUpdateNpcBaseInfoProto) GetTotalProgress() int32 {
	if m != nil {
		return m.TotalProgress
	}
	return 0
}

func (m *S2CUpdateNpcBaseInfoProto) GetProgressType() int32 {
	if m != nil {
		return m.ProgressType
	}
	return 0
}

type S2CUpdateBaseProgressProto struct {
	Id            []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Progress      int32  `protobuf:"varint,2,opt,name=progress,proto3" json:"progress,omitempty"`
	TotalProgress int32  `protobuf:"varint,3,opt,name=total_progress,json=totalProgress,proto3" json:"total_progress,omitempty"`
	ProgressType  int32  `protobuf:"varint,4,opt,name=progress_type,json=progressType,proto3" json:"progress_type,omitempty"`
}

func (m *S2CUpdateBaseProgressProto) Reset()                    { *m = S2CUpdateBaseProgressProto{} }
func (m *S2CUpdateBaseProgressProto) String() string            { return proto.CompactTextString(m) }
func (*S2CUpdateBaseProgressProto) ProtoMessage()               {}
func (*S2CUpdateBaseProgressProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{5} }

func (m *S2CUpdateBaseProgressProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *S2CUpdateBaseProgressProto) GetProgress() int32 {
	if m != nil {
		return m.Progress
	}
	return 0
}

func (m *S2CUpdateBaseProgressProto) GetTotalProgress() int32 {
	if m != nil {
		return m.TotalProgress
	}
	return 0
}

func (m *S2CUpdateBaseProgressProto) GetProgressType() int32 {
	if m != nil {
		return m.ProgressType
	}
	return 0
}

type S2CRemoveBaseUnitProto struct {
	RemoveType int32  `protobuf:"varint,1,opt,name=remove_type,json=removeType,proto3" json:"remove_type,omitempty"`
	HeroId     []byte `protobuf:"bytes,2,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
}

func (m *S2CRemoveBaseUnitProto) Reset()                    { *m = S2CRemoveBaseUnitProto{} }
func (m *S2CRemoveBaseUnitProto) String() string            { return proto.CompactTextString(m) }
func (*S2CRemoveBaseUnitProto) ProtoMessage()               {}
func (*S2CRemoveBaseUnitProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{6} }

func (m *S2CRemoveBaseUnitProto) GetRemoveType() int32 {
	if m != nil {
		return m.RemoveType
	}
	return 0
}

func (m *S2CRemoveBaseUnitProto) GetHeroId() []byte {
	if m != nil {
		return m.HeroId
	}
	return nil
}

type C2SPreInvasionTargetProto struct {
	MapId  int32  `protobuf:"varint,1,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	Target []byte `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
}

func (m *C2SPreInvasionTargetProto) Reset()                    { *m = C2SPreInvasionTargetProto{} }
func (m *C2SPreInvasionTargetProto) String() string            { return proto.CompactTextString(m) }
func (*C2SPreInvasionTargetProto) ProtoMessage()               {}
func (*C2SPreInvasionTargetProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{7} }

func (m *C2SPreInvasionTargetProto) GetMapId() int32 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *C2SPreInvasionTargetProto) GetTarget() []byte {
	if m != nil {
		return m.Target
	}
	return nil
}

type S2CPreInvasionTargetProto struct {
	Head          string `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	Level         int32  `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	MaxTowerFloor int32  `protobuf:"varint,3,opt,name=max_tower_floor,json=maxTowerFloor,proto3" json:"max_tower_floor,omitempty"`
	JunXianLevel  int32  `protobuf:"varint,4,opt,name=jun_xian_level,json=junXianLevel,proto3" json:"jun_xian_level,omitempty"`
}

func (m *S2CPreInvasionTargetProto) Reset()                    { *m = S2CPreInvasionTargetProto{} }
func (m *S2CPreInvasionTargetProto) String() string            { return proto.CompactTextString(m) }
func (*S2CPreInvasionTargetProto) ProtoMessage()               {}
func (*S2CPreInvasionTargetProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{8} }

func (m *S2CPreInvasionTargetProto) GetHead() string {
	if m != nil {
		return m.Head
	}
	return ""
}

func (m *S2CPreInvasionTargetProto) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *S2CPreInvasionTargetProto) GetMaxTowerFloor() int32 {
	if m != nil {
		return m.MaxTowerFloor
	}
	return 0
}

func (m *S2CPreInvasionTargetProto) GetJunXianLevel() int32 {
	if m != nil {
		return m.JunXianLevel
	}
	return 0
}

type C2SWatchBaseUnitProto struct {
	Target []byte `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
}

func (m *C2SWatchBaseUnitProto) Reset()                    { *m = C2SWatchBaseUnitProto{} }
func (m *C2SWatchBaseUnitProto) String() string            { return proto.CompactTextString(m) }
func (*C2SWatchBaseUnitProto) ProtoMessage()               {}
func (*C2SWatchBaseUnitProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{9} }

func (m *C2SWatchBaseUnitProto) GetTarget() []byte {
	if m != nil {
		return m.Target
	}
	return nil
}

type S2CWatchBaseUnitProto struct {
	Target           []byte  `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	GuildName        string  `protobuf:"bytes,12,opt,name=guild_name,json=guildName,proto3" json:"guild_name,omitempty"`
	FightAmount      int32   `protobuf:"varint,2,opt,name=fight_amount,json=fightAmount,proto3" json:"fight_amount,omitempty"`
	Prosprity        int32   `protobuf:"varint,3,opt,name=prosprity,proto3" json:"prosprity,omitempty"`
	ProsprityCapcity int32   `protobuf:"varint,4,opt,name=prosprity_capcity,json=prosprityCapcity,proto3" json:"prosprity_capcity,omitempty"`
	Head             string  `protobuf:"bytes,5,opt,name=head,proto3" json:"head,omitempty"`
	Level            int32   `protobuf:"varint,6,opt,name=level,proto3" json:"level,omitempty"`
	MaxTowerFloor    int32   `protobuf:"varint,7,opt,name=max_tower_floor,json=maxTowerFloor,proto3" json:"max_tower_floor,omitempty"`
	JunXianLevel     int32   `protobuf:"varint,8,opt,name=jun_xian_level,json=junXianLevel,proto3" json:"jun_xian_level,omitempty"`
	Soldier          int32   `protobuf:"varint,9,opt,name=soldier,proto3" json:"soldier,omitempty"`
	CaptainSoldier   []int32 `protobuf:"varint,11,rep,name=captain_soldier,json=captainSoldier" json:"captain_soldier,omitempty"`
	Hero             []byte  `protobuf:"bytes,14,opt,name=hero,proto3" json:"hero,omitempty"`
	HeroEndTime      int32   `protobuf:"varint,15,opt,name=hero_end_time,json=heroEndTime,proto3" json:"hero_end_time,omitempty"`
	HeroType         int32   `protobuf:"varint,16,opt,name=hero_type,json=heroType,proto3" json:"hero_type,omitempty"`
}

func (m *S2CWatchBaseUnitProto) Reset()                    { *m = S2CWatchBaseUnitProto{} }
func (m *S2CWatchBaseUnitProto) String() string            { return proto.CompactTextString(m) }
func (*S2CWatchBaseUnitProto) ProtoMessage()               {}
func (*S2CWatchBaseUnitProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{10} }

func (m *S2CWatchBaseUnitProto) GetTarget() []byte {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *S2CWatchBaseUnitProto) GetGuildName() string {
	if m != nil {
		return m.GuildName
	}
	return ""
}

func (m *S2CWatchBaseUnitProto) GetFightAmount() int32 {
	if m != nil {
		return m.FightAmount
	}
	return 0
}

func (m *S2CWatchBaseUnitProto) GetProsprity() int32 {
	if m != nil {
		return m.Prosprity
	}
	return 0
}

func (m *S2CWatchBaseUnitProto) GetProsprityCapcity() int32 {
	if m != nil {
		return m.ProsprityCapcity
	}
	return 0
}

func (m *S2CWatchBaseUnitProto) GetHead() string {
	if m != nil {
		return m.Head
	}
	return ""
}

func (m *S2CWatchBaseUnitProto) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *S2CWatchBaseUnitProto) GetMaxTowerFloor() int32 {
	if m != nil {
		return m.MaxTowerFloor
	}
	return 0
}

func (m *S2CWatchBaseUnitProto) GetJunXianLevel() int32 {
	if m != nil {
		return m.JunXianLevel
	}
	return 0
}

func (m *S2CWatchBaseUnitProto) GetSoldier() int32 {
	if m != nil {
		return m.Soldier
	}
	return 0
}

func (m *S2CWatchBaseUnitProto) GetCaptainSoldier() []int32 {
	if m != nil {
		return m.CaptainSoldier
	}
	return nil
}

func (m *S2CWatchBaseUnitProto) GetHero() []byte {
	if m != nil {
		return m.Hero
	}
	return nil
}

func (m *S2CWatchBaseUnitProto) GetHeroEndTime() int32 {
	if m != nil {
		return m.HeroEndTime
	}
	return 0
}

func (m *S2CWatchBaseUnitProto) GetHeroType() int32 {
	if m != nil {
		return m.HeroType
	}
	return 0
}

type S2CUpdateWatchBaseProsperityProto struct {
	Target           []byte `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Prosprity        int32  `protobuf:"varint,2,opt,name=prosprity,proto3" json:"prosprity,omitempty"`
	ProsprityCapcity int32  `protobuf:"varint,3,opt,name=prosprity_capcity,json=prosprityCapcity,proto3" json:"prosprity_capcity,omitempty"`
}

func (m *S2CUpdateWatchBaseProsperityProto) Reset()         { *m = S2CUpdateWatchBaseProsperityProto{} }
func (m *S2CUpdateWatchBaseProsperityProto) String() string { return proto.CompactTextString(m) }
func (*S2CUpdateWatchBaseProsperityProto) ProtoMessage()    {}
func (*S2CUpdateWatchBaseProsperityProto) Descriptor() ([]byte, []int) {
	return fileDescriptorRegion, []int{11}
}

func (m *S2CUpdateWatchBaseProsperityProto) GetTarget() []byte {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *S2CUpdateWatchBaseProsperityProto) GetProsprity() int32 {
	if m != nil {
		return m.Prosprity
	}
	return 0
}

func (m *S2CUpdateWatchBaseProsperityProto) GetProsprityCapcity() int32 {
	if m != nil {
		return m.ProsprityCapcity
	}
	return 0
}

type S2CUpdateStopLostProsperityProto struct {
	Target []byte `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
}

func (m *S2CUpdateStopLostProsperityProto) Reset()         { *m = S2CUpdateStopLostProsperityProto{} }
func (m *S2CUpdateStopLostProsperityProto) String() string { return proto.CompactTextString(m) }
func (*S2CUpdateStopLostProsperityProto) ProtoMessage()    {}
func (*S2CUpdateStopLostProsperityProto) Descriptor() ([]byte, []int) {
	return fileDescriptorRegion, []int{12}
}

func (m *S2CUpdateStopLostProsperityProto) GetTarget() []byte {
	if m != nil {
		return m.Target
	}
	return nil
}

type S2CAddTroopUnitProto struct {
	AddType int32  `protobuf:"varint,1,opt,name=add_type,json=addType,proto3" json:"add_type,omitempty"`
	Data    []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *S2CAddTroopUnitProto) Reset()                    { *m = S2CAddTroopUnitProto{} }
func (m *S2CAddTroopUnitProto) String() string            { return proto.CompactTextString(m) }
func (*S2CAddTroopUnitProto) ProtoMessage()               {}
func (*S2CAddTroopUnitProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{13} }

func (m *S2CAddTroopUnitProto) GetAddType() int32 {
	if m != nil {
		return m.AddType
	}
	return 0
}

func (m *S2CAddTroopUnitProto) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type S2CRemoveTroopUnitProto struct {
	RemoveType int32  `protobuf:"varint,1,opt,name=remove_type,json=removeType,proto3" json:"remove_type,omitempty"`
	TroopId    []byte `protobuf:"bytes,2,opt,name=troop_id,json=troopId,proto3" json:"troop_id,omitempty"`
}

func (m *S2CRemoveTroopUnitProto) Reset()                    { *m = S2CRemoveTroopUnitProto{} }
func (m *S2CRemoveTroopUnitProto) String() string            { return proto.CompactTextString(m) }
func (*S2CRemoveTroopUnitProto) ProtoMessage()               {}
func (*S2CRemoveTroopUnitProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{14} }

func (m *S2CRemoveTroopUnitProto) GetRemoveType() int32 {
	if m != nil {
		return m.RemoveType
	}
	return 0
}

func (m *S2CRemoveTroopUnitProto) GetTroopId() []byte {
	if m != nil {
		return m.TroopId
	}
	return nil
}

type C2SRequestTroopUnitProto struct {
	TroopId []byte `protobuf:"bytes,1,opt,name=troop_id,json=troopId,proto3" json:"troop_id,omitempty"`
}

func (m *C2SRequestTroopUnitProto) Reset()                    { *m = C2SRequestTroopUnitProto{} }
func (m *C2SRequestTroopUnitProto) String() string            { return proto.CompactTextString(m) }
func (*C2SRequestTroopUnitProto) ProtoMessage()               {}
func (*C2SRequestTroopUnitProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{15} }

func (m *C2SRequestTroopUnitProto) GetTroopId() []byte {
	if m != nil {
		return m.TroopId
	}
	return nil
}

type S2CRequestTroopUnitProto struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *S2CRequestTroopUnitProto) Reset()                    { *m = S2CRequestTroopUnitProto{} }
func (m *S2CRequestTroopUnitProto) String() string            { return proto.CompactTextString(m) }
func (*S2CRequestTroopUnitProto) ProtoMessage()               {}
func (*S2CRequestTroopUnitProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{16} }

func (m *S2CRequestTroopUnitProto) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type S2CAddRuinsBaseProto struct {
	PosX int32 `protobuf:"varint,1,opt,name=pos_x,json=posX,proto3" json:"pos_x,omitempty"`
	PosY int32 `protobuf:"varint,2,opt,name=pos_y,json=posY,proto3" json:"pos_y,omitempty"`
}

func (m *S2CAddRuinsBaseProto) Reset()                    { *m = S2CAddRuinsBaseProto{} }
func (m *S2CAddRuinsBaseProto) String() string            { return proto.CompactTextString(m) }
func (*S2CAddRuinsBaseProto) ProtoMessage()               {}
func (*S2CAddRuinsBaseProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{17} }

func (m *S2CAddRuinsBaseProto) GetPosX() int32 {
	if m != nil {
		return m.PosX
	}
	return 0
}

func (m *S2CAddRuinsBaseProto) GetPosY() int32 {
	if m != nil {
		return m.PosY
	}
	return 0
}

type S2CRemoveRuinsBaseProto struct {
	PosX int32 `protobuf:"varint,1,opt,name=pos_x,json=posX,proto3" json:"pos_x,omitempty"`
	PosY int32 `protobuf:"varint,2,opt,name=pos_y,json=posY,proto3" json:"pos_y,omitempty"`
}

func (m *S2CRemoveRuinsBaseProto) Reset()                    { *m = S2CRemoveRuinsBaseProto{} }
func (m *S2CRemoveRuinsBaseProto) String() string            { return proto.CompactTextString(m) }
func (*S2CRemoveRuinsBaseProto) ProtoMessage()               {}
func (*S2CRemoveRuinsBaseProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{18} }

func (m *S2CRemoveRuinsBaseProto) GetPosX() int32 {
	if m != nil {
		return m.PosX
	}
	return 0
}

func (m *S2CRemoveRuinsBaseProto) GetPosY() int32 {
	if m != nil {
		return m.PosY
	}
	return 0
}

type C2SRequestRuinsBaseProto struct {
	RealmId int32 `protobuf:"varint,1,opt,name=realm_id,json=realmId,proto3" json:"realm_id,omitempty"`
	PosX    int32 `protobuf:"varint,2,opt,name=pos_x,json=posX,proto3" json:"pos_x,omitempty"`
	PosY    int32 `protobuf:"varint,3,opt,name=pos_y,json=posY,proto3" json:"pos_y,omitempty"`
}

func (m *C2SRequestRuinsBaseProto) Reset()                    { *m = C2SRequestRuinsBaseProto{} }
func (m *C2SRequestRuinsBaseProto) String() string            { return proto.CompactTextString(m) }
func (*C2SRequestRuinsBaseProto) ProtoMessage()               {}
func (*C2SRequestRuinsBaseProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{19} }

func (m *C2SRequestRuinsBaseProto) GetRealmId() int32 {
	if m != nil {
		return m.RealmId
	}
	return 0
}

func (m *C2SRequestRuinsBaseProto) GetPosX() int32 {
	if m != nil {
		return m.PosX
	}
	return 0
}

func (m *C2SRequestRuinsBaseProto) GetPosY() int32 {
	if m != nil {
		return m.PosY
	}
	return 0
}

type S2CRequestRuinsBaseProto struct {
	RealmId   int32  `protobuf:"varint,1,opt,name=realm_id,json=realmId,proto3" json:"realm_id,omitempty"`
	PosX      int32  `protobuf:"varint,2,opt,name=pos_x,json=posX,proto3" json:"pos_x,omitempty"`
	PosY      int32  `protobuf:"varint,3,opt,name=pos_y,json=posY,proto3" json:"pos_y,omitempty"`
	HeroBasic []byte `protobuf:"bytes,4,opt,name=hero_basic,json=heroBasic,proto3" json:"hero_basic,omitempty"`
}

func (m *S2CRequestRuinsBaseProto) Reset()                    { *m = S2CRequestRuinsBaseProto{} }
func (m *S2CRequestRuinsBaseProto) String() string            { return proto.CompactTextString(m) }
func (*S2CRequestRuinsBaseProto) ProtoMessage()               {}
func (*S2CRequestRuinsBaseProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{20} }

func (m *S2CRequestRuinsBaseProto) GetRealmId() int32 {
	if m != nil {
		return m.RealmId
	}
	return 0
}

func (m *S2CRequestRuinsBaseProto) GetPosX() int32 {
	if m != nil {
		return m.PosX
	}
	return 0
}

func (m *S2CRequestRuinsBaseProto) GetPosY() int32 {
	if m != nil {
		return m.PosY
	}
	return 0
}

func (m *S2CRequestRuinsBaseProto) GetHeroBasic() []byte {
	if m != nil {
		return m.HeroBasic
	}
	return nil
}

type S2CUpdateSelfMianDisappearTimeProto struct {
	MianDisappearTime int32 `protobuf:"varint,1,opt,name=mian_disappear_time,json=mianDisappearTime,proto3" json:"mian_disappear_time,omitempty"`
	MianStartTime     int32 `protobuf:"varint,2,opt,name=mian_start_time,json=mianStartTime,proto3" json:"mian_start_time,omitempty"`
}

func (m *S2CUpdateSelfMianDisappearTimeProto) Reset()         { *m = S2CUpdateSelfMianDisappearTimeProto{} }
func (m *S2CUpdateSelfMianDisappearTimeProto) String() string { return proto.CompactTextString(m) }
func (*S2CUpdateSelfMianDisappearTimeProto) ProtoMessage()    {}
func (*S2CUpdateSelfMianDisappearTimeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorRegion, []int{21}
}

func (m *S2CUpdateSelfMianDisappearTimeProto) GetMianDisappearTime() int32 {
	if m != nil {
		return m.MianDisappearTime
	}
	return 0
}

func (m *S2CUpdateSelfMianDisappearTimeProto) GetMianStartTime() int32 {
	if m != nil {
		return m.MianStartTime
	}
	return 0
}

type C2SUseMianGoodsProto struct {
	Id  int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Buy bool  `protobuf:"varint,2,opt,name=buy,proto3" json:"buy,omitempty"`
}

func (m *C2SUseMianGoodsProto) Reset()                    { *m = C2SUseMianGoodsProto{} }
func (m *C2SUseMianGoodsProto) String() string            { return proto.CompactTextString(m) }
func (*C2SUseMianGoodsProto) ProtoMessage()               {}
func (*C2SUseMianGoodsProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{22} }

func (m *C2SUseMianGoodsProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *C2SUseMianGoodsProto) GetBuy() bool {
	if m != nil {
		return m.Buy
	}
	return false
}

type S2CUseMianGoodsProto struct {
	Id       int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Cooldown int32 `protobuf:"varint,2,opt,name=cooldown,proto3" json:"cooldown,omitempty"`
}

func (m *S2CUseMianGoodsProto) Reset()                    { *m = S2CUseMianGoodsProto{} }
func (m *S2CUseMianGoodsProto) String() string            { return proto.CompactTextString(m) }
func (*S2CUseMianGoodsProto) ProtoMessage()               {}
func (*S2CUseMianGoodsProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{23} }

func (m *S2CUseMianGoodsProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *S2CUseMianGoodsProto) GetCooldown() int32 {
	if m != nil {
		return m.Cooldown
	}
	return 0
}

type S2CUpdateNewHeroMianDisappearTimeProto struct {
	DisappearTime int32 `protobuf:"varint,1,opt,name=disappear_time,json=disappearTime,proto3" json:"disappear_time,omitempty"`
}

func (m *S2CUpdateNewHeroMianDisappearTimeProto) Reset() {
	*m = S2CUpdateNewHeroMianDisappearTimeProto{}
}
func (m *S2CUpdateNewHeroMianDisappearTimeProto) String() string { return proto.CompactTextString(m) }
func (*S2CUpdateNewHeroMianDisappearTimeProto) ProtoMessage()    {}
func (*S2CUpdateNewHeroMianDisappearTimeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorRegion, []int{24}
}

func (m *S2CUpdateNewHeroMianDisappearTimeProto) GetDisappearTime() int32 {
	if m != nil {
		return m.DisappearTime
	}
	return 0
}

type S2CSelfUpdateBaseLevelProto struct {
	Level int32 `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
}

func (m *S2CSelfUpdateBaseLevelProto) Reset()         { *m = S2CSelfUpdateBaseLevelProto{} }
func (m *S2CSelfUpdateBaseLevelProto) String() string { return proto.CompactTextString(m) }
func (*S2CSelfUpdateBaseLevelProto) ProtoMessage()    {}
func (*S2CSelfUpdateBaseLevelProto) Descriptor() ([]byte, []int) {
	return fileDescriptorRegion, []int{25}
}

func (m *S2CSelfUpdateBaseLevelProto) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

type S2CUpdateWhiteFlagProto struct {
	HeroId                 []byte `protobuf:"bytes,1,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
	WhiteFlagGuildId       int32  `protobuf:"varint,2,opt,name=white_flag_guild_id,json=whiteFlagGuildId,proto3" json:"white_flag_guild_id,omitempty"`
	WhiteFlagFlagName      string `protobuf:"bytes,3,opt,name=white_flag_flag_name,json=whiteFlagFlagName,proto3" json:"white_flag_flag_name,omitempty"`
	WhiteFlagDisappearTime int32  `protobuf:"varint,4,opt,name=white_flag_disappear_time,json=whiteFlagDisappearTime,proto3" json:"white_flag_disappear_time,omitempty"`
}

func (m *S2CUpdateWhiteFlagProto) Reset()                    { *m = S2CUpdateWhiteFlagProto{} }
func (m *S2CUpdateWhiteFlagProto) String() string            { return proto.CompactTextString(m) }
func (*S2CUpdateWhiteFlagProto) ProtoMessage()               {}
func (*S2CUpdateWhiteFlagProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{26} }

func (m *S2CUpdateWhiteFlagProto) GetHeroId() []byte {
	if m != nil {
		return m.HeroId
	}
	return nil
}

func (m *S2CUpdateWhiteFlagProto) GetWhiteFlagGuildId() int32 {
	if m != nil {
		return m.WhiteFlagGuildId
	}
	return 0
}

func (m *S2CUpdateWhiteFlagProto) GetWhiteFlagFlagName() string {
	if m != nil {
		return m.WhiteFlagFlagName
	}
	return ""
}

func (m *S2CUpdateWhiteFlagProto) GetWhiteFlagDisappearTime() int32 {
	if m != nil {
		return m.WhiteFlagDisappearTime
	}
	return 0
}

type C2SWhiteFlagDetailProto struct {
	HeroId []byte `protobuf:"bytes,1,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
}

func (m *C2SWhiteFlagDetailProto) Reset()                    { *m = C2SWhiteFlagDetailProto{} }
func (m *C2SWhiteFlagDetailProto) String() string            { return proto.CompactTextString(m) }
func (*C2SWhiteFlagDetailProto) ProtoMessage()               {}
func (*C2SWhiteFlagDetailProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{27} }

func (m *C2SWhiteFlagDetailProto) GetHeroId() []byte {
	if m != nil {
		return m.HeroId
	}
	return nil
}

type S2CWhiteFlagDetailProto struct {
	HeroId                 []byte `protobuf:"bytes,1,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
	WhiteFlagHeroId        []byte `protobuf:"bytes,2,opt,name=white_flag_hero_id,json=whiteFlagHeroId,proto3" json:"white_flag_hero_id,omitempty"`
	WhiteFlagHeroName      string `protobuf:"bytes,3,opt,name=white_flag_hero_name,json=whiteFlagHeroName,proto3" json:"white_flag_hero_name,omitempty"`
	WhiteFlagGuildId       int32  `protobuf:"varint,4,opt,name=white_flag_guild_id,json=whiteFlagGuildId,proto3" json:"white_flag_guild_id,omitempty"`
	WhiteFlagGuildName     string `protobuf:"bytes,5,opt,name=white_flag_guild_name,json=whiteFlagGuildName,proto3" json:"white_flag_guild_name,omitempty"`
	WhiteFlagDisappearTime int32  `protobuf:"varint,6,opt,name=white_flag_disappear_time,json=whiteFlagDisappearTime,proto3" json:"white_flag_disappear_time,omitempty"`
	WhiteFlagCountry       int32  `protobuf:"varint,7,opt,name=white_flag_country,json=whiteFlagCountry,proto3" json:"white_flag_country,omitempty"`
}

func (m *S2CWhiteFlagDetailProto) Reset()                    { *m = S2CWhiteFlagDetailProto{} }
func (m *S2CWhiteFlagDetailProto) String() string            { return proto.CompactTextString(m) }
func (*S2CWhiteFlagDetailProto) ProtoMessage()               {}
func (*S2CWhiteFlagDetailProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{28} }

func (m *S2CWhiteFlagDetailProto) GetHeroId() []byte {
	if m != nil {
		return m.HeroId
	}
	return nil
}

func (m *S2CWhiteFlagDetailProto) GetWhiteFlagHeroId() []byte {
	if m != nil {
		return m.WhiteFlagHeroId
	}
	return nil
}

func (m *S2CWhiteFlagDetailProto) GetWhiteFlagHeroName() string {
	if m != nil {
		return m.WhiteFlagHeroName
	}
	return ""
}

func (m *S2CWhiteFlagDetailProto) GetWhiteFlagGuildId() int32 {
	if m != nil {
		return m.WhiteFlagGuildId
	}
	return 0
}

func (m *S2CWhiteFlagDetailProto) GetWhiteFlagGuildName() string {
	if m != nil {
		return m.WhiteFlagGuildName
	}
	return ""
}

func (m *S2CWhiteFlagDetailProto) GetWhiteFlagDisappearTime() int32 {
	if m != nil {
		return m.WhiteFlagDisappearTime
	}
	return 0
}

func (m *S2CWhiteFlagDetailProto) GetWhiteFlagCountry() int32 {
	if m != nil {
		return m.WhiteFlagCountry
	}
	return 0
}

type S2CSelfBaseDestroyProto struct {
	IsTent      bool  `protobuf:"varint,1,opt,name=is_tent,json=isTent,proto3" json:"is_tent,omitempty"`
	DestroyType int32 `protobuf:"varint,2,opt,name=destroy_type,json=destroyType,proto3" json:"destroy_type,omitempty"`
}

func (m *S2CSelfBaseDestroyProto) Reset()                    { *m = S2CSelfBaseDestroyProto{} }
func (m *S2CSelfBaseDestroyProto) String() string            { return proto.CompactTextString(m) }
func (*S2CSelfBaseDestroyProto) ProtoMessage()               {}
func (*S2CSelfBaseDestroyProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{29} }

func (m *S2CSelfBaseDestroyProto) GetIsTent() bool {
	if m != nil {
		return m.IsTent
	}
	return false
}

func (m *S2CSelfBaseDestroyProto) GetDestroyType() int32 {
	if m != nil {
		return m.DestroyType
	}
	return 0
}

type S2CProsperityBufProto struct {
	EndTime int32 `protobuf:"varint,1,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (m *S2CProsperityBufProto) Reset()                    { *m = S2CProsperityBufProto{} }
func (m *S2CProsperityBufProto) String() string            { return proto.CompactTextString(m) }
func (*S2CProsperityBufProto) ProtoMessage()               {}
func (*S2CProsperityBufProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{30} }

func (m *S2CProsperityBufProto) GetEndTime() int32 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

type S2CShowWordsProto struct {
	BaseId     []byte `protobuf:"bytes,1,opt,name=base_id,json=baseId,proto3" json:"base_id,omitempty"`
	TroopId    []byte `protobuf:"bytes,2,opt,name=troop_id,json=troopId,proto3" json:"troop_id,omitempty"`
	Prosperity int32  `protobuf:"varint,3,opt,name=prosperity,proto3" json:"prosperity,omitempty"`
	Gold       int32  `protobuf:"varint,4,opt,name=gold,proto3" json:"gold,omitempty"`
	Food       int32  `protobuf:"varint,5,opt,name=food,proto3" json:"food,omitempty"`
	Wood       int32  `protobuf:"varint,6,opt,name=wood,proto3" json:"wood,omitempty"`
	Stone      int32  `protobuf:"varint,7,opt,name=stone,proto3" json:"stone,omitempty"`
	Jade       int32  `protobuf:"varint,8,opt,name=jade,proto3" json:"jade,omitempty"`
	JadeOre    int32  `protobuf:"varint,9,opt,name=jade_ore,json=jadeOre,proto3" json:"jade_ore,omitempty"`
}

func (m *S2CShowWordsProto) Reset()                    { *m = S2CShowWordsProto{} }
func (m *S2CShowWordsProto) String() string            { return proto.CompactTextString(m) }
func (*S2CShowWordsProto) ProtoMessage()               {}
func (*S2CShowWordsProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{31} }

func (m *S2CShowWordsProto) GetBaseId() []byte {
	if m != nil {
		return m.BaseId
	}
	return nil
}

func (m *S2CShowWordsProto) GetTroopId() []byte {
	if m != nil {
		return m.TroopId
	}
	return nil
}

func (m *S2CShowWordsProto) GetProsperity() int32 {
	if m != nil {
		return m.Prosperity
	}
	return 0
}

func (m *S2CShowWordsProto) GetGold() int32 {
	if m != nil {
		return m.Gold
	}
	return 0
}

func (m *S2CShowWordsProto) GetFood() int32 {
	if m != nil {
		return m.Food
	}
	return 0
}

func (m *S2CShowWordsProto) GetWood() int32 {
	if m != nil {
		return m.Wood
	}
	return 0
}

func (m *S2CShowWordsProto) GetStone() int32 {
	if m != nil {
		return m.Stone
	}
	return 0
}

func (m *S2CShowWordsProto) GetJade() int32 {
	if m != nil {
		return m.Jade
	}
	return 0
}

func (m *S2CShowWordsProto) GetJadeOre() int32 {
	if m != nil {
		return m.JadeOre
	}
	return 0
}

type S2CGetBuyProsperityCostProto struct {
	Cost int32 `protobuf:"varint,1,opt,name=cost,proto3" json:"cost,omitempty"`
}

func (m *S2CGetBuyProsperityCostProto) Reset()         { *m = S2CGetBuyProsperityCostProto{} }
func (m *S2CGetBuyProsperityCostProto) String() string { return proto.CompactTextString(m) }
func (*S2CGetBuyProsperityCostProto) ProtoMessage()    {}
func (*S2CGetBuyProsperityCostProto) Descriptor() ([]byte, []int) {
	return fileDescriptorRegion, []int{32}
}

func (m *S2CGetBuyProsperityCostProto) GetCost() int32 {
	if m != nil {
		return m.Cost
	}
	return 0
}

type S2CBuyProsperityProto struct {
	AddProsperity int32 `protobuf:"varint,1,opt,name=add_prosperity,json=addProsperity,proto3" json:"add_prosperity,omitempty"`
}

func (m *S2CBuyProsperityProto) Reset()                    { *m = S2CBuyProsperityProto{} }
func (m *S2CBuyProsperityProto) String() string            { return proto.CompactTextString(m) }
func (*S2CBuyProsperityProto) ProtoMessage()               {}
func (*S2CBuyProsperityProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{33} }

func (m *S2CBuyProsperityProto) GetAddProsperity() int32 {
	if m != nil {
		return m.AddProsperity
	}
	return 0
}

type S2CSelfBeenAttackRobChangedProto struct {
	BeenAttack int32 `protobuf:"varint,1,opt,name=been_attack,json=beenAttack,proto3" json:"been_attack,omitempty"`
	BeenRob    int32 `protobuf:"varint,2,opt,name=been_rob,json=beenRob,proto3" json:"been_rob,omitempty"`
}

func (m *S2CSelfBeenAttackRobChangedProto) Reset()         { *m = S2CSelfBeenAttackRobChangedProto{} }
func (m *S2CSelfBeenAttackRobChangedProto) String() string { return proto.CompactTextString(m) }
func (*S2CSelfBeenAttackRobChangedProto) ProtoMessage()    {}
func (*S2CSelfBeenAttackRobChangedProto) Descriptor() ([]byte, []int) {
	return fileDescriptorRegion, []int{34}
}

func (m *S2CSelfBeenAttackRobChangedProto) GetBeenAttack() int32 {
	if m != nil {
		return m.BeenAttack
	}
	return 0
}

func (m *S2CSelfBeenAttackRobChangedProto) GetBeenRob() int32 {
	if m != nil {
		return m.BeenRob
	}
	return 0
}

type S2CGuildBeenAttackRobChangedProto struct {
	Total int32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
}

func (m *S2CGuildBeenAttackRobChangedProto) Reset()         { *m = S2CGuildBeenAttackRobChangedProto{} }
func (m *S2CGuildBeenAttackRobChangedProto) String() string { return proto.CompactTextString(m) }
func (*S2CGuildBeenAttackRobChangedProto) ProtoMessage()    {}
func (*S2CGuildBeenAttackRobChangedProto) Descriptor() ([]byte, []int) {
	return fileDescriptorRegion, []int{35}
}

func (m *S2CGuildBeenAttackRobChangedProto) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

type C2SSwitchActionProto struct {
	Open      bool   `protobuf:"varint,1,opt,name=open,proto3" json:"open,omitempty"`
	Condition []byte `protobuf:"bytes,2,opt,name=condition,proto3" json:"condition,omitempty"`
}

func (m *C2SSwitchActionProto) Reset()                    { *m = C2SSwitchActionProto{} }
func (m *C2SSwitchActionProto) String() string            { return proto.CompactTextString(m) }
func (*C2SSwitchActionProto) ProtoMessage()               {}
func (*C2SSwitchActionProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{36} }

func (m *C2SSwitchActionProto) GetOpen() bool {
	if m != nil {
		return m.Open
	}
	return false
}

func (m *C2SSwitchActionProto) GetCondition() []byte {
	if m != nil {
		return m.Condition
	}
	return nil
}

type S2CSwitchActionProto struct {
	Open bool `protobuf:"varint,1,opt,name=open,proto3" json:"open,omitempty"`
}

func (m *S2CSwitchActionProto) Reset()                    { *m = S2CSwitchActionProto{} }
func (m *S2CSwitchActionProto) String() string            { return proto.CompactTextString(m) }
func (*S2CSwitchActionProto) ProtoMessage()               {}
func (*S2CSwitchActionProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{37} }

func (m *S2CSwitchActionProto) GetOpen() bool {
	if m != nil {
		return m.Open
	}
	return false
}

type C2SRequestMilitaryPushProto struct {
	MainMilitary  bool   `protobuf:"varint,1,opt,name=main_military,json=mainMilitary,proto3" json:"main_military,omitempty"`
	GuildMilitary bool   `protobuf:"varint,2,opt,name=guild_military,json=guildMilitary,proto3" json:"guild_military,omitempty"`
	ToTarget      []byte `protobuf:"bytes,3,opt,name=to_target,json=toTarget,proto3" json:"to_target,omitempty"`
	ToTargetBase  bool   `protobuf:"varint,4,opt,name=to_target_base,json=toTargetBase,proto3" json:"to_target_base,omitempty"`
	FromTarget    []byte `protobuf:"bytes,5,opt,name=from_target,json=fromTarget,proto3" json:"from_target,omitempty"`
}

func (m *C2SRequestMilitaryPushProto) Reset()         { *m = C2SRequestMilitaryPushProto{} }
func (m *C2SRequestMilitaryPushProto) String() string { return proto.CompactTextString(m) }
func (*C2SRequestMilitaryPushProto) ProtoMessage()    {}
func (*C2SRequestMilitaryPushProto) Descriptor() ([]byte, []int) {
	return fileDescriptorRegion, []int{38}
}

func (m *C2SRequestMilitaryPushProto) GetMainMilitary() bool {
	if m != nil {
		return m.MainMilitary
	}
	return false
}

func (m *C2SRequestMilitaryPushProto) GetGuildMilitary() bool {
	if m != nil {
		return m.GuildMilitary
	}
	return false
}

func (m *C2SRequestMilitaryPushProto) GetToTarget() []byte {
	if m != nil {
		return m.ToTarget
	}
	return nil
}

func (m *C2SRequestMilitaryPushProto) GetToTargetBase() bool {
	if m != nil {
		return m.ToTargetBase
	}
	return false
}

func (m *C2SRequestMilitaryPushProto) GetFromTarget() []byte {
	if m != nil {
		return m.FromTarget
	}
	return nil
}

type S2CRequestMilitaryPushProto struct {
	MainMilitary  bool   `protobuf:"varint,1,opt,name=main_military,json=mainMilitary,proto3" json:"main_military,omitempty"`
	GuildMilitary bool   `protobuf:"varint,2,opt,name=guild_military,json=guildMilitary,proto3" json:"guild_military,omitempty"`
	ToTarget      []byte `protobuf:"bytes,3,opt,name=to_target,json=toTarget,proto3" json:"to_target,omitempty"`
	ToTargetBase  bool   `protobuf:"varint,4,opt,name=to_target_base,json=toTargetBase,proto3" json:"to_target_base,omitempty"`
	FromTarget    []byte `protobuf:"bytes,5,opt,name=from_target,json=fromTarget,proto3" json:"from_target,omitempty"`
}

func (m *S2CRequestMilitaryPushProto) Reset()         { *m = S2CRequestMilitaryPushProto{} }
func (m *S2CRequestMilitaryPushProto) String() string { return proto.CompactTextString(m) }
func (*S2CRequestMilitaryPushProto) ProtoMessage()    {}
func (*S2CRequestMilitaryPushProto) Descriptor() ([]byte, []int) {
	return fileDescriptorRegion, []int{39}
}

func (m *S2CRequestMilitaryPushProto) GetMainMilitary() bool {
	if m != nil {
		return m.MainMilitary
	}
	return false
}

func (m *S2CRequestMilitaryPushProto) GetGuildMilitary() bool {
	if m != nil {
		return m.GuildMilitary
	}
	return false
}

func (m *S2CRequestMilitaryPushProto) GetToTarget() []byte {
	if m != nil {
		return m.ToTarget
	}
	return nil
}

func (m *S2CRequestMilitaryPushProto) GetToTargetBase() bool {
	if m != nil {
		return m.ToTargetBase
	}
	return false
}

func (m *S2CRequestMilitaryPushProto) GetFromTarget() []byte {
	if m != nil {
		return m.FromTarget
	}
	return nil
}

type S2CUpdateMilitaryInfoProto struct {
	Data   []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Region bool   `protobuf:"varint,2,opt,name=region,proto3" json:"region,omitempty"`
	Ma     bool   `protobuf:"varint,3,opt,name=ma,proto3" json:"ma,omitempty"`
}

func (m *S2CUpdateMilitaryInfoProto) Reset()         { *m = S2CUpdateMilitaryInfoProto{} }
func (m *S2CUpdateMilitaryInfoProto) String() string { return proto.CompactTextString(m) }
func (*S2CUpdateMilitaryInfoProto) ProtoMessage()    {}
func (*S2CUpdateMilitaryInfoProto) Descriptor() ([]byte, []int) {
	return fileDescriptorRegion, []int{40}
}

func (m *S2CUpdateMilitaryInfoProto) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *S2CUpdateMilitaryInfoProto) GetRegion() bool {
	if m != nil {
		return m.Region
	}
	return false
}

func (m *S2CUpdateMilitaryInfoProto) GetMa() bool {
	if m != nil {
		return m.Ma
	}
	return false
}

type S2CRemoveMilitaryInfoProto struct {
	Id     []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Region bool   `protobuf:"varint,2,opt,name=region,proto3" json:"region,omitempty"`
	Ma     bool   `protobuf:"varint,3,opt,name=ma,proto3" json:"ma,omitempty"`
}

func (m *S2CRemoveMilitaryInfoProto) Reset()         { *m = S2CRemoveMilitaryInfoProto{} }
func (m *S2CRemoveMilitaryInfoProto) String() string { return proto.CompactTextString(m) }
func (*S2CRemoveMilitaryInfoProto) ProtoMessage()    {}
func (*S2CRemoveMilitaryInfoProto) Descriptor() ([]byte, []int) {
	return fileDescriptorRegion, []int{41}
}

func (m *S2CRemoveMilitaryInfoProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *S2CRemoveMilitaryInfoProto) GetRegion() bool {
	if m != nil {
		return m.Region
	}
	return false
}

func (m *S2CRemoveMilitaryInfoProto) GetMa() bool {
	if m != nil {
		return m.Ma
	}
	return false
}

type S2CUpdateSelfMilitaryInfoProto struct {
	TroopIndex int32  `protobuf:"varint,2,opt,name=troop_index,json=troopIndex,proto3" json:"troop_index,omitempty"`
	TroopId    []byte `protobuf:"bytes,3,opt,name=troop_id,json=troopId,proto3" json:"troop_id,omitempty"`
	Data       []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *S2CUpdateSelfMilitaryInfoProto) Reset()         { *m = S2CUpdateSelfMilitaryInfoProto{} }
func (m *S2CUpdateSelfMilitaryInfoProto) String() string { return proto.CompactTextString(m) }
func (*S2CUpdateSelfMilitaryInfoProto) ProtoMessage()    {}
func (*S2CUpdateSelfMilitaryInfoProto) Descriptor() ([]byte, []int) {
	return fileDescriptorRegion, []int{42}
}

func (m *S2CUpdateSelfMilitaryInfoProto) GetTroopIndex() int32 {
	if m != nil {
		return m.TroopIndex
	}
	return 0
}

func (m *S2CUpdateSelfMilitaryInfoProto) GetTroopId() []byte {
	if m != nil {
		return m.TroopId
	}
	return nil
}

func (m *S2CUpdateSelfMilitaryInfoProto) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type S2CRemoveSelfMilitaryInfoProto struct {
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *S2CRemoveSelfMilitaryInfoProto) Reset()         { *m = S2CRemoveSelfMilitaryInfoProto{} }
func (m *S2CRemoveSelfMilitaryInfoProto) String() string { return proto.CompactTextString(m) }
func (*S2CRemoveSelfMilitaryInfoProto) ProtoMessage()    {}
func (*S2CRemoveSelfMilitaryInfoProto) Descriptor() ([]byte, []int) {
	return fileDescriptorRegion, []int{43}
}

func (m *S2CRemoveSelfMilitaryInfoProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type S2CNpcBaseInfoProto struct {
	MapId  int32    `protobuf:"varint,1,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	NpcId  [][]byte `protobuf:"bytes,2,rep,name=npc_id,json=npcId" json:"npc_id,omitempty"`
	BaseX  []int32  `protobuf:"varint,3,rep,name=base_x,json=baseX" json:"base_x,omitempty"`
	BaseY  []int32  `protobuf:"varint,4,rep,name=base_y,json=baseY" json:"base_y,omitempty"`
	DataId []int32  `protobuf:"varint,5,rep,name=data_id,json=dataId" json:"data_id,omitempty"`
}

func (m *S2CNpcBaseInfoProto) Reset()                    { *m = S2CNpcBaseInfoProto{} }
func (m *S2CNpcBaseInfoProto) String() string            { return proto.CompactTextString(m) }
func (*S2CNpcBaseInfoProto) ProtoMessage()               {}
func (*S2CNpcBaseInfoProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{44} }

func (m *S2CNpcBaseInfoProto) GetMapId() int32 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *S2CNpcBaseInfoProto) GetNpcId() [][]byte {
	if m != nil {
		return m.NpcId
	}
	return nil
}

func (m *S2CNpcBaseInfoProto) GetBaseX() []int32 {
	if m != nil {
		return m.BaseX
	}
	return nil
}

func (m *S2CNpcBaseInfoProto) GetBaseY() []int32 {
	if m != nil {
		return m.BaseY
	}
	return nil
}

func (m *S2CNpcBaseInfoProto) GetDataId() []int32 {
	if m != nil {
		return m.DataId
	}
	return nil
}

type C2SCreateBaseProto struct {
	MapId int32 `protobuf:"varint,4,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	NewX  int32 `protobuf:"varint,5,opt,name=new_x,json=newX,proto3" json:"new_x,omitempty"`
	NewY  int32 `protobuf:"varint,6,opt,name=new_y,json=newY,proto3" json:"new_y,omitempty"`
}

func (m *C2SCreateBaseProto) Reset()                    { *m = C2SCreateBaseProto{} }
func (m *C2SCreateBaseProto) String() string            { return proto.CompactTextString(m) }
func (*C2SCreateBaseProto) ProtoMessage()               {}
func (*C2SCreateBaseProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{45} }

func (m *C2SCreateBaseProto) GetMapId() int32 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *C2SCreateBaseProto) GetNewX() int32 {
	if m != nil {
		return m.NewX
	}
	return 0
}

func (m *C2SCreateBaseProto) GetNewY() int32 {
	if m != nil {
		return m.NewY
	}
	return 0
}

type S2CCreateBaseProto struct {
	MapId      int32 `protobuf:"varint,5,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	NewX       int32 `protobuf:"varint,6,opt,name=new_x,json=newX,proto3" json:"new_x,omitempty"`
	NewY       int32 `protobuf:"varint,7,opt,name=new_y,json=newY,proto3" json:"new_y,omitempty"`
	Level      int32 `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Prosperity int32 `protobuf:"varint,8,opt,name=prosperity,proto3" json:"prosperity,omitempty"`
}

func (m *S2CCreateBaseProto) Reset()                    { *m = S2CCreateBaseProto{} }
func (m *S2CCreateBaseProto) String() string            { return proto.CompactTextString(m) }
func (*S2CCreateBaseProto) ProtoMessage()               {}
func (*S2CCreateBaseProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{46} }

func (m *S2CCreateBaseProto) GetMapId() int32 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *S2CCreateBaseProto) GetNewX() int32 {
	if m != nil {
		return m.NewX
	}
	return 0
}

func (m *S2CCreateBaseProto) GetNewY() int32 {
	if m != nil {
		return m.NewY
	}
	return 0
}

func (m *S2CCreateBaseProto) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *S2CCreateBaseProto) GetProsperity() int32 {
	if m != nil {
		return m.Prosperity
	}
	return 0
}

type C2SFastMoveBaseProto struct {
	MapId   int32 `protobuf:"varint,3,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	NewX    int32 `protobuf:"varint,1,opt,name=new_x,json=newX,proto3" json:"new_x,omitempty"`
	NewY    int32 `protobuf:"varint,2,opt,name=new_y,json=newY,proto3" json:"new_y,omitempty"`
	GoodsId int32 `protobuf:"varint,4,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`
	IsTent  bool  `protobuf:"varint,5,opt,name=is_tent,json=isTent,proto3" json:"is_tent,omitempty"`
	Free    bool  `protobuf:"varint,6,opt,name=free,proto3" json:"free,omitempty"`
}

func (m *C2SFastMoveBaseProto) Reset()                    { *m = C2SFastMoveBaseProto{} }
func (m *C2SFastMoveBaseProto) String() string            { return proto.CompactTextString(m) }
func (*C2SFastMoveBaseProto) ProtoMessage()               {}
func (*C2SFastMoveBaseProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{47} }

func (m *C2SFastMoveBaseProto) GetMapId() int32 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *C2SFastMoveBaseProto) GetNewX() int32 {
	if m != nil {
		return m.NewX
	}
	return 0
}

func (m *C2SFastMoveBaseProto) GetNewY() int32 {
	if m != nil {
		return m.NewY
	}
	return 0
}

func (m *C2SFastMoveBaseProto) GetGoodsId() int32 {
	if m != nil {
		return m.GoodsId
	}
	return 0
}

func (m *C2SFastMoveBaseProto) GetIsTent() bool {
	if m != nil {
		return m.IsTent
	}
	return false
}

func (m *C2SFastMoveBaseProto) GetFree() bool {
	if m != nil {
		return m.Free
	}
	return false
}

type S2CFastMoveBaseProto struct {
	MapId  int32 `protobuf:"varint,3,opt,name=map_id,json=mapId,proto3" json:"map_id,omitempty"`
	NewX   int32 `protobuf:"varint,1,opt,name=new_x,json=newX,proto3" json:"new_x,omitempty"`
	NewY   int32 `protobuf:"varint,2,opt,name=new_y,json=newY,proto3" json:"new_y,omitempty"`
	IsTent bool  `protobuf:"varint,4,opt,name=is_tent,json=isTent,proto3" json:"is_tent,omitempty"`
}

func (m *S2CFastMoveBaseProto) Reset()                    { *m = S2CFastMoveBaseProto{} }
func (m *S2CFastMoveBaseProto) String() string            { return proto.CompactTextString(m) }
func (*S2CFastMoveBaseProto) ProtoMessage()               {}
func (*S2CFastMoveBaseProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{48} }

func (m *S2CFastMoveBaseProto) GetMapId() int32 {
	if m != nil {
		return m.MapId
	}
	return 0
}

func (m *S2CFastMoveBaseProto) GetNewX() int32 {
	if m != nil {
		return m.NewX
	}
	return 0
}

func (m *S2CFastMoveBaseProto) GetNewY() int32 {
	if m != nil {
		return m.NewY
	}
	return 0
}

func (m *S2CFastMoveBaseProto) GetIsTent() bool {
	if m != nil {
		return m.IsTent
	}
	return false
}

type C2SInvasionProto struct {
	Operate                int32  `protobuf:"varint,10,opt,name=operate,proto3" json:"operate,omitempty"`
	Target                 []byte `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	TroopIndex             int32  `protobuf:"varint,6,opt,name=troop_index,json=troopIndex,proto3" json:"troop_index,omitempty"`
	TargetLevel            int32  `protobuf:"varint,7,opt,name=target_level,json=targetLevel,proto3" json:"target_level,omitempty"`
	GoodsId                int32  `protobuf:"varint,8,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`
	AutoBuy                bool   `protobuf:"varint,9,opt,name=auto_buy,json=autoBuy,proto3" json:"auto_buy,omitempty"`
	MultiLevelMonsterCount int32  `protobuf:"varint,12,opt,name=multi_level_monster_count,json=multiLevelMonsterCount,proto3" json:"multi_level_monster_count,omitempty"`
}

func (m *C2SInvasionProto) Reset()                    { *m = C2SInvasionProto{} }
func (m *C2SInvasionProto) String() string            { return proto.CompactTextString(m) }
func (*C2SInvasionProto) ProtoMessage()               {}
func (*C2SInvasionProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{49} }

func (m *C2SInvasionProto) GetOperate() int32 {
	if m != nil {
		return m.Operate
	}
	return 0
}

func (m *C2SInvasionProto) GetTarget() []byte {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *C2SInvasionProto) GetTroopIndex() int32 {
	if m != nil {
		return m.TroopIndex
	}
	return 0
}

func (m *C2SInvasionProto) GetTargetLevel() int32 {
	if m != nil {
		return m.TargetLevel
	}
	return 0
}

func (m *C2SInvasionProto) GetGoodsId() int32 {
	if m != nil {
		return m.GoodsId
	}
	return 0
}

func (m *C2SInvasionProto) GetAutoBuy() bool {
	if m != nil {
		return m.AutoBuy
	}
	return false
}

func (m *C2SInvasionProto) GetMultiLevelMonsterCount() int32 {
	if m != nil {
		return m.MultiLevelMonsterCount
	}
	return 0
}

type S2CInvasionProto struct {
	Target     []byte `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	TroopIndex int32  `protobuf:"varint,4,opt,name=troop_index,json=troopIndex,proto3" json:"troop_index,omitempty"`
}

func (m *S2CInvasionProto) Reset()                    { *m = S2CInvasionProto{} }
func (m *S2CInvasionProto) String() string            { return proto.CompactTextString(m) }
func (*S2CInvasionProto) ProtoMessage()               {}
func (*S2CInvasionProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{50} }

func (m *S2CInvasionProto) GetTarget() []byte {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *S2CInvasionProto) GetTroopIndex() int32 {
	if m != nil {
		return m.TroopIndex
	}
	return 0
}

type S2CUpdateSelfTroopsProto struct {
	Id             []int32 `protobuf:"varint,1,rep,name=id" json:"id,omitempty"`
	Soldier        []int32 `protobuf:"varint,2,rep,name=soldier" json:"soldier,omitempty"`
	FightAmount    []int32 `protobuf:"varint,3,rep,name=fight_amount,json=fightAmount" json:"fight_amount,omitempty"`
	WoundedSoldier int32   `protobuf:"varint,4,opt,name=wounded_soldier,json=woundedSoldier,proto3" json:"wounded_soldier,omitempty"`
	RemoveOutside  bool    `protobuf:"varint,5,opt,name=remove_outside,json=removeOutside,proto3" json:"remove_outside,omitempty"`
	TroopIndex     int32   `protobuf:"varint,6,opt,name=troop_index,json=troopIndex,proto3" json:"troop_index,omitempty"`
}

func (m *S2CUpdateSelfTroopsProto) Reset()                    { *m = S2CUpdateSelfTroopsProto{} }
func (m *S2CUpdateSelfTroopsProto) String() string            { return proto.CompactTextString(m) }
func (*S2CUpdateSelfTroopsProto) ProtoMessage()               {}
func (*S2CUpdateSelfTroopsProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{51} }

func (m *S2CUpdateSelfTroopsProto) GetId() []int32 {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *S2CUpdateSelfTroopsProto) GetSoldier() []int32 {
	if m != nil {
		return m.Soldier
	}
	return nil
}

func (m *S2CUpdateSelfTroopsProto) GetFightAmount() []int32 {
	if m != nil {
		return m.FightAmount
	}
	return nil
}

func (m *S2CUpdateSelfTroopsProto) GetWoundedSoldier() int32 {
	if m != nil {
		return m.WoundedSoldier
	}
	return 0
}

func (m *S2CUpdateSelfTroopsProto) GetRemoveOutside() bool {
	if m != nil {
		return m.RemoveOutside
	}
	return false
}

func (m *S2CUpdateSelfTroopsProto) GetTroopIndex() int32 {
	if m != nil {
		return m.TroopIndex
	}
	return 0
}

type S2CUpdateSelfTroopsOutsideProto struct {
	TroopIndex int32 `protobuf:"varint,1,opt,name=troop_index,json=troopIndex,proto3" json:"troop_index,omitempty"`
	Outside    bool  `protobuf:"varint,2,opt,name=outside,proto3" json:"outside,omitempty"`
}

func (m *S2CUpdateSelfTroopsOutsideProto) Reset()         { *m = S2CUpdateSelfTroopsOutsideProto{} }
func (m *S2CUpdateSelfTroopsOutsideProto) String() string { return proto.CompactTextString(m) }
func (*S2CUpdateSelfTroopsOutsideProto) ProtoMessage()    {}
func (*S2CUpdateSelfTroopsOutsideProto) Descriptor() ([]byte, []int) {
	return fileDescriptorRegion, []int{52}
}

func (m *S2CUpdateSelfTroopsOutsideProto) GetTroopIndex() int32 {
	if m != nil {
		return m.TroopIndex
	}
	return 0
}

func (m *S2CUpdateSelfTroopsOutsideProto) GetOutside() bool {
	if m != nil {
		return m.Outside
	}
	return false
}

type C2SCancelInvasionProto struct {
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SCancelInvasionProto) Reset()                    { *m = C2SCancelInvasionProto{} }
func (m *C2SCancelInvasionProto) String() string            { return proto.CompactTextString(m) }
func (*C2SCancelInvasionProto) ProtoMessage()               {}
func (*C2SCancelInvasionProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{53} }

func (m *C2SCancelInvasionProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type S2CCancelInvasionProto struct {
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *S2CCancelInvasionProto) Reset()                    { *m = S2CCancelInvasionProto{} }
func (m *S2CCancelInvasionProto) String() string            { return proto.CompactTextString(m) }
func (*S2CCancelInvasionProto) ProtoMessage()               {}
func (*S2CCancelInvasionProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{54} }

func (m *S2CCancelInvasionProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type C2SRepatriateProto struct {
	Id     []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	IsTent bool   `protobuf:"varint,2,opt,name=is_tent,json=isTent,proto3" json:"is_tent,omitempty"`
}

func (m *C2SRepatriateProto) Reset()                    { *m = C2SRepatriateProto{} }
func (m *C2SRepatriateProto) String() string            { return proto.CompactTextString(m) }
func (*C2SRepatriateProto) ProtoMessage()               {}
func (*C2SRepatriateProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{55} }

func (m *C2SRepatriateProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *C2SRepatriateProto) GetIsTent() bool {
	if m != nil {
		return m.IsTent
	}
	return false
}

type S2CRepatriateProto struct {
	Id     []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	IsTent bool   `protobuf:"varint,2,opt,name=is_tent,json=isTent,proto3" json:"is_tent,omitempty"`
}

func (m *S2CRepatriateProto) Reset()                    { *m = S2CRepatriateProto{} }
func (m *S2CRepatriateProto) String() string            { return proto.CompactTextString(m) }
func (*S2CRepatriateProto) ProtoMessage()               {}
func (*S2CRepatriateProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{56} }

func (m *S2CRepatriateProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *S2CRepatriateProto) GetIsTent() bool {
	if m != nil {
		return m.IsTent
	}
	return false
}

type C2SBaozRepatriateProto struct {
	BaseId  []byte `protobuf:"bytes,1,opt,name=base_id,json=baseId,proto3" json:"base_id,omitempty"`
	TroopId []byte `protobuf:"bytes,2,opt,name=troop_id,json=troopId,proto3" json:"troop_id,omitempty"`
}

func (m *C2SBaozRepatriateProto) Reset()                    { *m = C2SBaozRepatriateProto{} }
func (m *C2SBaozRepatriateProto) String() string            { return proto.CompactTextString(m) }
func (*C2SBaozRepatriateProto) ProtoMessage()               {}
func (*C2SBaozRepatriateProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{57} }

func (m *C2SBaozRepatriateProto) GetBaseId() []byte {
	if m != nil {
		return m.BaseId
	}
	return nil
}

func (m *C2SBaozRepatriateProto) GetTroopId() []byte {
	if m != nil {
		return m.TroopId
	}
	return nil
}

type S2CBaozRepatriateProto struct {
	BaseId  []byte `protobuf:"bytes,1,opt,name=base_id,json=baseId,proto3" json:"base_id,omitempty"`
	TroopId []byte `protobuf:"bytes,2,opt,name=troop_id,json=troopId,proto3" json:"troop_id,omitempty"`
}

func (m *S2CBaozRepatriateProto) Reset()                    { *m = S2CBaozRepatriateProto{} }
func (m *S2CBaozRepatriateProto) String() string            { return proto.CompactTextString(m) }
func (*S2CBaozRepatriateProto) ProtoMessage()               {}
func (*S2CBaozRepatriateProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{58} }

func (m *S2CBaozRepatriateProto) GetBaseId() []byte {
	if m != nil {
		return m.BaseId
	}
	return nil
}

func (m *S2CBaozRepatriateProto) GetTroopId() []byte {
	if m != nil {
		return m.TroopId
	}
	return nil
}

type C2SSpeedUpProto struct {
	Id      []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OtherId []byte `protobuf:"bytes,6,opt,name=other_id,json=otherId,proto3" json:"other_id,omitempty"`
	GoodsId int32  `protobuf:"varint,2,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`
	Money   bool   `protobuf:"varint,5,opt,name=money,proto3" json:"money,omitempty"`
}

func (m *C2SSpeedUpProto) Reset()                    { *m = C2SSpeedUpProto{} }
func (m *C2SSpeedUpProto) String() string            { return proto.CompactTextString(m) }
func (*C2SSpeedUpProto) ProtoMessage()               {}
func (*C2SSpeedUpProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{59} }

func (m *C2SSpeedUpProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *C2SSpeedUpProto) GetOtherId() []byte {
	if m != nil {
		return m.OtherId
	}
	return nil
}

func (m *C2SSpeedUpProto) GetGoodsId() int32 {
	if m != nil {
		return m.GoodsId
	}
	return 0
}

func (m *C2SSpeedUpProto) GetMoney() bool {
	if m != nil {
		return m.Money
	}
	return false
}

type S2CSpeedUpProto struct {
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *S2CSpeedUpProto) Reset()                    { *m = S2CSpeedUpProto{} }
func (m *S2CSpeedUpProto) String() string            { return proto.CompactTextString(m) }
func (*S2CSpeedUpProto) ProtoMessage()               {}
func (*S2CSpeedUpProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{60} }

func (m *S2CSpeedUpProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type C2SExpelProto struct {
	Id         []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Mapid      int32  `protobuf:"varint,3,opt,name=mapid,proto3" json:"mapid,omitempty"`
	TroopIndex int32  `protobuf:"varint,4,opt,name=troop_index,json=troopIndex,proto3" json:"troop_index,omitempty"`
}

func (m *C2SExpelProto) Reset()                    { *m = C2SExpelProto{} }
func (m *C2SExpelProto) String() string            { return proto.CompactTextString(m) }
func (*C2SExpelProto) ProtoMessage()               {}
func (*C2SExpelProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{61} }

func (m *C2SExpelProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *C2SExpelProto) GetMapid() int32 {
	if m != nil {
		return m.Mapid
	}
	return 0
}

func (m *C2SExpelProto) GetTroopIndex() int32 {
	if m != nil {
		return m.TroopIndex
	}
	return 0
}

type S2CExpelProto struct {
	Id       []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Cooldown int32  `protobuf:"varint,2,opt,name=cooldown,proto3" json:"cooldown,omitempty"`
	Link     string `protobuf:"bytes,3,opt,name=link,proto3" json:"link,omitempty"`
}

func (m *S2CExpelProto) Reset()                    { *m = S2CExpelProto{} }
func (m *S2CExpelProto) String() string            { return proto.CompactTextString(m) }
func (*S2CExpelProto) ProtoMessage()               {}
func (*S2CExpelProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{62} }

func (m *S2CExpelProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *S2CExpelProto) GetCooldown() int32 {
	if m != nil {
		return m.Cooldown
	}
	return 0
}

func (m *S2CExpelProto) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

type C2SFavoritePosProto struct {
	Add  bool  `protobuf:"varint,1,opt,name=add,proto3" json:"add,omitempty"`
	Id   int32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	PosX int32 `protobuf:"varint,5,opt,name=pos_x,json=posX,proto3" json:"pos_x,omitempty"`
	PosY int32 `protobuf:"varint,6,opt,name=pos_y,json=posY,proto3" json:"pos_y,omitempty"`
}

func (m *C2SFavoritePosProto) Reset()                    { *m = C2SFavoritePosProto{} }
func (m *C2SFavoritePosProto) String() string            { return proto.CompactTextString(m) }
func (*C2SFavoritePosProto) ProtoMessage()               {}
func (*C2SFavoritePosProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{63} }

func (m *C2SFavoritePosProto) GetAdd() bool {
	if m != nil {
		return m.Add
	}
	return false
}

func (m *C2SFavoritePosProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *C2SFavoritePosProto) GetPosX() int32 {
	if m != nil {
		return m.PosX
	}
	return 0
}

func (m *C2SFavoritePosProto) GetPosY() int32 {
	if m != nil {
		return m.PosY
	}
	return 0
}

type S2CFavoritePosProto struct {
	Add  bool  `protobuf:"varint,1,opt,name=add,proto3" json:"add,omitempty"`
	Id   int32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	PosX int32 `protobuf:"varint,5,opt,name=pos_x,json=posX,proto3" json:"pos_x,omitempty"`
	PosY int32 `protobuf:"varint,6,opt,name=pos_y,json=posY,proto3" json:"pos_y,omitempty"`
}

func (m *S2CFavoritePosProto) Reset()                    { *m = S2CFavoritePosProto{} }
func (m *S2CFavoritePosProto) String() string            { return proto.CompactTextString(m) }
func (*S2CFavoritePosProto) ProtoMessage()               {}
func (*S2CFavoritePosProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{64} }

func (m *S2CFavoritePosProto) GetAdd() bool {
	if m != nil {
		return m.Add
	}
	return false
}

func (m *S2CFavoritePosProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *S2CFavoritePosProto) GetPosX() int32 {
	if m != nil {
		return m.PosX
	}
	return 0
}

func (m *S2CFavoritePosProto) GetPosY() int32 {
	if m != nil {
		return m.PosY
	}
	return 0
}

type S2CFavoritePosListProto struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *S2CFavoritePosListProto) Reset()                    { *m = S2CFavoritePosListProto{} }
func (m *S2CFavoritePosListProto) String() string            { return proto.CompactTextString(m) }
func (*S2CFavoritePosListProto) ProtoMessage()               {}
func (*S2CFavoritePosListProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{65} }

func (m *S2CFavoritePosListProto) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type C2SGetPrevInvestigateProto struct {
	HeroId []byte `protobuf:"bytes,1,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
}

func (m *C2SGetPrevInvestigateProto) Reset()         { *m = C2SGetPrevInvestigateProto{} }
func (m *C2SGetPrevInvestigateProto) String() string { return proto.CompactTextString(m) }
func (*C2SGetPrevInvestigateProto) ProtoMessage()    {}
func (*C2SGetPrevInvestigateProto) Descriptor() ([]byte, []int) {
	return fileDescriptorRegion, []int{66}
}

func (m *C2SGetPrevInvestigateProto) GetHeroId() []byte {
	if m != nil {
		return m.HeroId
	}
	return nil
}

type S2CGetPrevInvestigateProto struct {
	HeroId     []byte `protobuf:"bytes,1,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
	MailId     []byte `protobuf:"bytes,2,opt,name=mail_id,json=mailId,proto3" json:"mail_id,omitempty"`
	ExpireTime int32  `protobuf:"varint,3,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
}

func (m *S2CGetPrevInvestigateProto) Reset()         { *m = S2CGetPrevInvestigateProto{} }
func (m *S2CGetPrevInvestigateProto) String() string { return proto.CompactTextString(m) }
func (*S2CGetPrevInvestigateProto) ProtoMessage()    {}
func (*S2CGetPrevInvestigateProto) Descriptor() ([]byte, []int) {
	return fileDescriptorRegion, []int{67}
}

func (m *S2CGetPrevInvestigateProto) GetHeroId() []byte {
	if m != nil {
		return m.HeroId
	}
	return nil
}

func (m *S2CGetPrevInvestigateProto) GetMailId() []byte {
	if m != nil {
		return m.MailId
	}
	return nil
}

func (m *S2CGetPrevInvestigateProto) GetExpireTime() int32 {
	if m != nil {
		return m.ExpireTime
	}
	return 0
}

type C2SInvestigateProto struct {
	HeroId []byte `protobuf:"bytes,1,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
	Cost   bool   `protobuf:"varint,3,opt,name=cost,proto3" json:"cost,omitempty"`
}

func (m *C2SInvestigateProto) Reset()                    { *m = C2SInvestigateProto{} }
func (m *C2SInvestigateProto) String() string            { return proto.CompactTextString(m) }
func (*C2SInvestigateProto) ProtoMessage()               {}
func (*C2SInvestigateProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{68} }

func (m *C2SInvestigateProto) GetHeroId() []byte {
	if m != nil {
		return m.HeroId
	}
	return nil
}

func (m *C2SInvestigateProto) GetCost() bool {
	if m != nil {
		return m.Cost
	}
	return false
}

type S2CInvestigateProto struct {
	HeroId              []byte `protobuf:"bytes,1,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
	NextInvestigateTime int32  `protobuf:"varint,2,opt,name=next_investigate_time,json=nextInvestigateTime,proto3" json:"next_investigate_time,omitempty"`
}

func (m *S2CInvestigateProto) Reset()                    { *m = S2CInvestigateProto{} }
func (m *S2CInvestigateProto) String() string            { return proto.CompactTextString(m) }
func (*S2CInvestigateProto) ProtoMessage()               {}
func (*S2CInvestigateProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{69} }

func (m *S2CInvestigateProto) GetHeroId() []byte {
	if m != nil {
		return m.HeroId
	}
	return nil
}

func (m *S2CInvestigateProto) GetNextInvestigateTime() int32 {
	if m != nil {
		return m.NextInvestigateTime
	}
	return 0
}

type C2SInvestigateInvadeProto struct {
	HeroId []byte `protobuf:"bytes,1,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
}

func (m *C2SInvestigateInvadeProto) Reset()                    { *m = C2SInvestigateInvadeProto{} }
func (m *C2SInvestigateInvadeProto) String() string            { return proto.CompactTextString(m) }
func (*C2SInvestigateInvadeProto) ProtoMessage()               {}
func (*C2SInvestigateInvadeProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{70} }

func (m *C2SInvestigateInvadeProto) GetHeroId() []byte {
	if m != nil {
		return m.HeroId
	}
	return nil
}

type S2CInvestigateInvadeProto struct {
	Target []byte `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
}

func (m *S2CInvestigateInvadeProto) Reset()                    { *m = S2CInvestigateInvadeProto{} }
func (m *S2CInvestigateInvadeProto) String() string            { return proto.CompactTextString(m) }
func (*S2CInvestigateInvadeProto) ProtoMessage()               {}
func (*S2CInvestigateInvadeProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{71} }

func (m *S2CInvestigateInvadeProto) GetTarget() []byte {
	if m != nil {
		return m.Target
	}
	return nil
}

type S2CUpdateMultiLevelNpcPassLevelProto struct {
	NpcType int32 `protobuf:"varint,1,opt,name=npc_type,json=npcType,proto3" json:"npc_type,omitempty"`
	Level   int32 `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
}

func (m *S2CUpdateMultiLevelNpcPassLevelProto) Reset()         { *m = S2CUpdateMultiLevelNpcPassLevelProto{} }
func (m *S2CUpdateMultiLevelNpcPassLevelProto) String() string { return proto.CompactTextString(m) }
func (*S2CUpdateMultiLevelNpcPassLevelProto) ProtoMessage()    {}
func (*S2CUpdateMultiLevelNpcPassLevelProto) Descriptor() ([]byte, []int) {
	return fileDescriptorRegion, []int{72}
}

func (m *S2CUpdateMultiLevelNpcPassLevelProto) GetNpcType() int32 {
	if m != nil {
		return m.NpcType
	}
	return 0
}

func (m *S2CUpdateMultiLevelNpcPassLevelProto) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

type S2CUpdateMultiLevelNpcHateProto struct {
	NpcType int32 `protobuf:"varint,1,opt,name=npc_type,json=npcType,proto3" json:"npc_type,omitempty"`
	Hate    int32 `protobuf:"varint,2,opt,name=hate,proto3" json:"hate,omitempty"`
}

func (m *S2CUpdateMultiLevelNpcHateProto) Reset()         { *m = S2CUpdateMultiLevelNpcHateProto{} }
func (m *S2CUpdateMultiLevelNpcHateProto) String() string { return proto.CompactTextString(m) }
func (*S2CUpdateMultiLevelNpcHateProto) ProtoMessage()    {}
func (*S2CUpdateMultiLevelNpcHateProto) Descriptor() ([]byte, []int) {
	return fileDescriptorRegion, []int{73}
}

func (m *S2CUpdateMultiLevelNpcHateProto) GetNpcType() int32 {
	if m != nil {
		return m.NpcType
	}
	return 0
}

func (m *S2CUpdateMultiLevelNpcHateProto) GetHate() int32 {
	if m != nil {
		return m.Hate
	}
	return 0
}

type S2CUpdateMultiLevelNpcTimesProto struct {
	StartRecoveyTime int32                                       `protobuf:"varint,1,opt,name=start_recovey_time,json=startRecoveyTime,proto3" json:"start_recovey_time,omitempty"`
	Times            *proto1.RecoverableTimesWithExtraTimesProto `protobuf:"bytes,3,opt,name=times" json:"times,omitempty"`
}

func (m *S2CUpdateMultiLevelNpcTimesProto) Reset()         { *m = S2CUpdateMultiLevelNpcTimesProto{} }
func (m *S2CUpdateMultiLevelNpcTimesProto) String() string { return proto.CompactTextString(m) }
func (*S2CUpdateMultiLevelNpcTimesProto) ProtoMessage()    {}
func (*S2CUpdateMultiLevelNpcTimesProto) Descriptor() ([]byte, []int) {
	return fileDescriptorRegion, []int{74}
}

func (m *S2CUpdateMultiLevelNpcTimesProto) GetStartRecoveyTime() int32 {
	if m != nil {
		return m.StartRecoveyTime
	}
	return 0
}

func (m *S2CUpdateMultiLevelNpcTimesProto) GetTimes() *proto1.RecoverableTimesWithExtraTimesProto {
	if m != nil {
		return m.Times
	}
	return nil
}

type C2SUseMultiLevelNpcTimesGoodsProto struct {
	Id  int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Buy bool  `protobuf:"varint,2,opt,name=buy,proto3" json:"buy,omitempty"`
}

func (m *C2SUseMultiLevelNpcTimesGoodsProto) Reset()         { *m = C2SUseMultiLevelNpcTimesGoodsProto{} }
func (m *C2SUseMultiLevelNpcTimesGoodsProto) String() string { return proto.CompactTextString(m) }
func (*C2SUseMultiLevelNpcTimesGoodsProto) ProtoMessage()    {}
func (*C2SUseMultiLevelNpcTimesGoodsProto) Descriptor() ([]byte, []int) {
	return fileDescriptorRegion, []int{75}
}

func (m *C2SUseMultiLevelNpcTimesGoodsProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *C2SUseMultiLevelNpcTimesGoodsProto) GetBuy() bool {
	if m != nil {
		return m.Buy
	}
	return false
}

type S2CUseMultiLevelNpcTimesGoodsProto struct {
	Id  int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Buy bool  `protobuf:"varint,2,opt,name=buy,proto3" json:"buy,omitempty"`
}

func (m *S2CUseMultiLevelNpcTimesGoodsProto) Reset()         { *m = S2CUseMultiLevelNpcTimesGoodsProto{} }
func (m *S2CUseMultiLevelNpcTimesGoodsProto) String() string { return proto.CompactTextString(m) }
func (*S2CUseMultiLevelNpcTimesGoodsProto) ProtoMessage()    {}
func (*S2CUseMultiLevelNpcTimesGoodsProto) Descriptor() ([]byte, []int) {
	return fileDescriptorRegion, []int{76}
}

func (m *S2CUseMultiLevelNpcTimesGoodsProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *S2CUseMultiLevelNpcTimesGoodsProto) GetBuy() bool {
	if m != nil {
		return m.Buy
	}
	return false
}

type S2CUpdateInvaseHeroTimesProto struct {
	StartRecoveyTime int32                                       `protobuf:"varint,1,opt,name=start_recovey_time,json=startRecoveyTime,proto3" json:"start_recovey_time,omitempty"`
	Times            *proto1.RecoverableTimesWithExtraTimesProto `protobuf:"bytes,2,opt,name=times" json:"times,omitempty"`
}

func (m *S2CUpdateInvaseHeroTimesProto) Reset()         { *m = S2CUpdateInvaseHeroTimesProto{} }
func (m *S2CUpdateInvaseHeroTimesProto) String() string { return proto.CompactTextString(m) }
func (*S2CUpdateInvaseHeroTimesProto) ProtoMessage()    {}
func (*S2CUpdateInvaseHeroTimesProto) Descriptor() ([]byte, []int) {
	return fileDescriptorRegion, []int{77}
}

func (m *S2CUpdateInvaseHeroTimesProto) GetStartRecoveyTime() int32 {
	if m != nil {
		return m.StartRecoveyTime
	}
	return 0
}

func (m *S2CUpdateInvaseHeroTimesProto) GetTimes() *proto1.RecoverableTimesWithExtraTimesProto {
	if m != nil {
		return m.Times
	}
	return nil
}

type S2CUpdateJunTuanNpcTimesProto struct {
	StartRecoveyTime int32                                       `protobuf:"varint,1,opt,name=start_recovey_time,json=startRecoveyTime,proto3" json:"start_recovey_time,omitempty"`
	Times            *proto1.RecoverableTimesWithExtraTimesProto `protobuf:"bytes,2,opt,name=times" json:"times,omitempty"`
}

func (m *S2CUpdateJunTuanNpcTimesProto) Reset()         { *m = S2CUpdateJunTuanNpcTimesProto{} }
func (m *S2CUpdateJunTuanNpcTimesProto) String() string { return proto.CompactTextString(m) }
func (*S2CUpdateJunTuanNpcTimesProto) ProtoMessage()    {}
func (*S2CUpdateJunTuanNpcTimesProto) Descriptor() ([]byte, []int) {
	return fileDescriptorRegion, []int{78}
}

func (m *S2CUpdateJunTuanNpcTimesProto) GetStartRecoveyTime() int32 {
	if m != nil {
		return m.StartRecoveyTime
	}
	return 0
}

func (m *S2CUpdateJunTuanNpcTimesProto) GetTimes() *proto1.RecoverableTimesWithExtraTimesProto {
	if m != nil {
		return m.Times
	}
	return nil
}

type C2SUseInvaseHeroTimesGoodsProto struct {
	Id  int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Buy bool  `protobuf:"varint,2,opt,name=buy,proto3" json:"buy,omitempty"`
}

func (m *C2SUseInvaseHeroTimesGoodsProto) Reset()         { *m = C2SUseInvaseHeroTimesGoodsProto{} }
func (m *C2SUseInvaseHeroTimesGoodsProto) String() string { return proto.CompactTextString(m) }
func (*C2SUseInvaseHeroTimesGoodsProto) ProtoMessage()    {}
func (*C2SUseInvaseHeroTimesGoodsProto) Descriptor() ([]byte, []int) {
	return fileDescriptorRegion, []int{79}
}

func (m *C2SUseInvaseHeroTimesGoodsProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *C2SUseInvaseHeroTimesGoodsProto) GetBuy() bool {
	if m != nil {
		return m.Buy
	}
	return false
}

type S2CUseInvaseHeroTimesGoodsProto struct {
	Id  int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Buy bool  `protobuf:"varint,2,opt,name=buy,proto3" json:"buy,omitempty"`
}

func (m *S2CUseInvaseHeroTimesGoodsProto) Reset()         { *m = S2CUseInvaseHeroTimesGoodsProto{} }
func (m *S2CUseInvaseHeroTimesGoodsProto) String() string { return proto.CompactTextString(m) }
func (*S2CUseInvaseHeroTimesGoodsProto) ProtoMessage()    {}
func (*S2CUseInvaseHeroTimesGoodsProto) Descriptor() ([]byte, []int) {
	return fileDescriptorRegion, []int{80}
}

func (m *S2CUseInvaseHeroTimesGoodsProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *S2CUseInvaseHeroTimesGoodsProto) GetBuy() bool {
	if m != nil {
		return m.Buy
	}
	return false
}

type C2SCalcMoveSpeedProto struct {
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SCalcMoveSpeedProto) Reset()                    { *m = C2SCalcMoveSpeedProto{} }
func (m *C2SCalcMoveSpeedProto) String() string            { return proto.CompactTextString(m) }
func (*C2SCalcMoveSpeedProto) ProtoMessage()               {}
func (*C2SCalcMoveSpeedProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{81} }

func (m *C2SCalcMoveSpeedProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type S2CCalcMoveSpeedProto struct {
	Id    []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Speed int32  `protobuf:"varint,2,opt,name=speed,proto3" json:"speed,omitempty"`
}

func (m *S2CCalcMoveSpeedProto) Reset()                    { *m = S2CCalcMoveSpeedProto{} }
func (m *S2CCalcMoveSpeedProto) String() string            { return proto.CompactTextString(m) }
func (*S2CCalcMoveSpeedProto) ProtoMessage()               {}
func (*S2CCalcMoveSpeedProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{82} }

func (m *S2CCalcMoveSpeedProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *S2CCalcMoveSpeedProto) GetSpeed() int32 {
	if m != nil {
		return m.Speed
	}
	return 0
}

type S2CListEnemyPosProto struct {
	PosX []int32 `protobuf:"varint,1,rep,name=pos_x,json=posX" json:"pos_x,omitempty"`
	PosY []int32 `protobuf:"varint,2,rep,name=pos_y,json=posY" json:"pos_y,omitempty"`
}

func (m *S2CListEnemyPosProto) Reset()                    { *m = S2CListEnemyPosProto{} }
func (m *S2CListEnemyPosProto) String() string            { return proto.CompactTextString(m) }
func (*S2CListEnemyPosProto) ProtoMessage()               {}
func (*S2CListEnemyPosProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{83} }

func (m *S2CListEnemyPosProto) GetPosX() []int32 {
	if m != nil {
		return m.PosX
	}
	return nil
}

func (m *S2CListEnemyPosProto) GetPosY() []int32 {
	if m != nil {
		return m.PosY
	}
	return nil
}

type C2SSearchBaozNpcProto struct {
	DataId int32 `protobuf:"varint,1,opt,name=data_id,json=dataId,proto3" json:"data_id,omitempty"`
}

func (m *C2SSearchBaozNpcProto) Reset()                    { *m = C2SSearchBaozNpcProto{} }
func (m *C2SSearchBaozNpcProto) String() string            { return proto.CompactTextString(m) }
func (*C2SSearchBaozNpcProto) ProtoMessage()               {}
func (*C2SSearchBaozNpcProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{84} }

func (m *C2SSearchBaozNpcProto) GetDataId() int32 {
	if m != nil {
		return m.DataId
	}
	return 0
}

type S2CSearchBaozNpcProto struct {
	DataId int32    `protobuf:"varint,1,opt,name=data_id,json=dataId,proto3" json:"data_id,omitempty"`
	BaseId [][]byte `protobuf:"bytes,2,rep,name=base_id,json=baseId" json:"base_id,omitempty"`
	BaseX  []int32  `protobuf:"varint,3,rep,name=base_x,json=baseX" json:"base_x,omitempty"`
	BaseY  []int32  `protobuf:"varint,4,rep,name=base_y,json=baseY" json:"base_y,omitempty"`
}

func (m *S2CSearchBaozNpcProto) Reset()                    { *m = S2CSearchBaozNpcProto{} }
func (m *S2CSearchBaozNpcProto) String() string            { return proto.CompactTextString(m) }
func (*S2CSearchBaozNpcProto) ProtoMessage()               {}
func (*S2CSearchBaozNpcProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{85} }

func (m *S2CSearchBaozNpcProto) GetDataId() int32 {
	if m != nil {
		return m.DataId
	}
	return 0
}

func (m *S2CSearchBaozNpcProto) GetBaseId() [][]byte {
	if m != nil {
		return m.BaseId
	}
	return nil
}

func (m *S2CSearchBaozNpcProto) GetBaseX() []int32 {
	if m != nil {
		return m.BaseX
	}
	return nil
}

func (m *S2CSearchBaozNpcProto) GetBaseY() []int32 {
	if m != nil {
		return m.BaseY
	}
	return nil
}

type S2CHomeAstDefendingInfoProto struct {
	Heros []*proto2.HeroBasicProto    `protobuf:"bytes,1,rep,name=heros" json:"heros,omitempty"`
	Logs  []*proto9.AstDefendLogProto `protobuf:"bytes,3,rep,name=logs" json:"logs,omitempty"`
}

func (m *S2CHomeAstDefendingInfoProto) Reset()         { *m = S2CHomeAstDefendingInfoProto{} }
func (m *S2CHomeAstDefendingInfoProto) String() string { return proto.CompactTextString(m) }
func (*S2CHomeAstDefendingInfoProto) ProtoMessage()    {}
func (*S2CHomeAstDefendingInfoProto) Descriptor() ([]byte, []int) {
	return fileDescriptorRegion, []int{86}
}

func (m *S2CHomeAstDefendingInfoProto) GetHeros() []*proto2.HeroBasicProto {
	if m != nil {
		return m.Heros
	}
	return nil
}

func (m *S2CHomeAstDefendingInfoProto) GetLogs() []*proto9.AstDefendLogProto {
	if m != nil {
		return m.Logs
	}
	return nil
}

type C2SCreateAssemblyProto struct {
	TroopIndex  int32  `protobuf:"varint,1,opt,name=troop_index,json=troopIndex,proto3" json:"troop_index,omitempty"`
	Target      []byte `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	TargetLevel int32  `protobuf:"varint,3,opt,name=target_level,json=targetLevel,proto3" json:"target_level,omitempty"`
	WaitIndex   int32  `protobuf:"varint,4,opt,name=wait_index,json=waitIndex,proto3" json:"wait_index,omitempty"`
	GoodsId     int32  `protobuf:"varint,5,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`
	AutoBuy     bool   `protobuf:"varint,6,opt,name=auto_buy,json=autoBuy,proto3" json:"auto_buy,omitempty"`
}

func (m *C2SCreateAssemblyProto) Reset()                    { *m = C2SCreateAssemblyProto{} }
func (m *C2SCreateAssemblyProto) String() string            { return proto.CompactTextString(m) }
func (*C2SCreateAssemblyProto) ProtoMessage()               {}
func (*C2SCreateAssemblyProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{87} }

func (m *C2SCreateAssemblyProto) GetTroopIndex() int32 {
	if m != nil {
		return m.TroopIndex
	}
	return 0
}

func (m *C2SCreateAssemblyProto) GetTarget() []byte {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *C2SCreateAssemblyProto) GetTargetLevel() int32 {
	if m != nil {
		return m.TargetLevel
	}
	return 0
}

func (m *C2SCreateAssemblyProto) GetWaitIndex() int32 {
	if m != nil {
		return m.WaitIndex
	}
	return 0
}

func (m *C2SCreateAssemblyProto) GetGoodsId() int32 {
	if m != nil {
		return m.GoodsId
	}
	return 0
}

func (m *C2SCreateAssemblyProto) GetAutoBuy() bool {
	if m != nil {
		return m.AutoBuy
	}
	return false
}

type S2CCreateAssemblyProto struct {
	TroopIndex int32  `protobuf:"varint,1,opt,name=troop_index,json=troopIndex,proto3" json:"troop_index,omitempty"`
	Target     []byte `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	Id         []byte `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *S2CCreateAssemblyProto) Reset()                    { *m = S2CCreateAssemblyProto{} }
func (m *S2CCreateAssemblyProto) String() string            { return proto.CompactTextString(m) }
func (*S2CCreateAssemblyProto) ProtoMessage()               {}
func (*S2CCreateAssemblyProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{88} }

func (m *S2CCreateAssemblyProto) GetTroopIndex() int32 {
	if m != nil {
		return m.TroopIndex
	}
	return 0
}

func (m *S2CCreateAssemblyProto) GetTarget() []byte {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *S2CCreateAssemblyProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type C2SShowAssemblyProto struct {
	Id      []byte `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Version int32  `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *C2SShowAssemblyProto) Reset()                    { *m = C2SShowAssemblyProto{} }
func (m *C2SShowAssemblyProto) String() string            { return proto.CompactTextString(m) }
func (*C2SShowAssemblyProto) ProtoMessage()               {}
func (*C2SShowAssemblyProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{89} }

func (m *C2SShowAssemblyProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *C2SShowAssemblyProto) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type S2CShowAssemblyProto struct {
	NotExist bool   `protobuf:"varint,5,opt,name=not_exist,json=notExist,proto3" json:"not_exist,omitempty"`
	Id       []byte `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Version  int32  `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	Data     []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *S2CShowAssemblyProto) Reset()                    { *m = S2CShowAssemblyProto{} }
func (m *S2CShowAssemblyProto) String() string            { return proto.CompactTextString(m) }
func (*S2CShowAssemblyProto) ProtoMessage()               {}
func (*S2CShowAssemblyProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{90} }

func (m *S2CShowAssemblyProto) GetNotExist() bool {
	if m != nil {
		return m.NotExist
	}
	return false
}

func (m *S2CShowAssemblyProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *S2CShowAssemblyProto) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *S2CShowAssemblyProto) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type S2CShowAssemblyChangedProto struct {
	Id []byte `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *S2CShowAssemblyChangedProto) Reset()         { *m = S2CShowAssemblyChangedProto{} }
func (m *S2CShowAssemblyChangedProto) String() string { return proto.CompactTextString(m) }
func (*S2CShowAssemblyChangedProto) ProtoMessage()    {}
func (*S2CShowAssemblyChangedProto) Descriptor() ([]byte, []int) {
	return fileDescriptorRegion, []int{91}
}

func (m *S2CShowAssemblyChangedProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type C2SJoinAssemblyProto struct {
	Id         []byte `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	TroopIndex int32  `protobuf:"varint,3,opt,name=troop_index,json=troopIndex,proto3" json:"troop_index,omitempty"`
	GoodsId    int32  `protobuf:"varint,4,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`
	AutoBuy    bool   `protobuf:"varint,5,opt,name=auto_buy,json=autoBuy,proto3" json:"auto_buy,omitempty"`
}

func (m *C2SJoinAssemblyProto) Reset()                    { *m = C2SJoinAssemblyProto{} }
func (m *C2SJoinAssemblyProto) String() string            { return proto.CompactTextString(m) }
func (*C2SJoinAssemblyProto) ProtoMessage()               {}
func (*C2SJoinAssemblyProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{92} }

func (m *C2SJoinAssemblyProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *C2SJoinAssemblyProto) GetTroopIndex() int32 {
	if m != nil {
		return m.TroopIndex
	}
	return 0
}

func (m *C2SJoinAssemblyProto) GetGoodsId() int32 {
	if m != nil {
		return m.GoodsId
	}
	return 0
}

func (m *C2SJoinAssemblyProto) GetAutoBuy() bool {
	if m != nil {
		return m.AutoBuy
	}
	return false
}

type S2CJoinAssemblyProto struct {
	Id         []byte `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	TroopIndex int32  `protobuf:"varint,3,opt,name=troop_index,json=troopIndex,proto3" json:"troop_index,omitempty"`
}

func (m *S2CJoinAssemblyProto) Reset()                    { *m = S2CJoinAssemblyProto{} }
func (m *S2CJoinAssemblyProto) String() string            { return proto.CompactTextString(m) }
func (*S2CJoinAssemblyProto) ProtoMessage()               {}
func (*S2CJoinAssemblyProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{93} }

func (m *S2CJoinAssemblyProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *S2CJoinAssemblyProto) GetTroopIndex() int32 {
	if m != nil {
		return m.TroopIndex
	}
	return 0
}

type C2SCreateGuildWorkshopProto struct {
	PosX int32 `protobuf:"varint,1,opt,name=pos_x,json=posX,proto3" json:"pos_x,omitempty"`
	PosY int32 `protobuf:"varint,2,opt,name=pos_y,json=posY,proto3" json:"pos_y,omitempty"`
}

func (m *C2SCreateGuildWorkshopProto) Reset()         { *m = C2SCreateGuildWorkshopProto{} }
func (m *C2SCreateGuildWorkshopProto) String() string { return proto.CompactTextString(m) }
func (*C2SCreateGuildWorkshopProto) ProtoMessage()    {}
func (*C2SCreateGuildWorkshopProto) Descriptor() ([]byte, []int) {
	return fileDescriptorRegion, []int{94}
}

func (m *C2SCreateGuildWorkshopProto) GetPosX() int32 {
	if m != nil {
		return m.PosX
	}
	return 0
}

func (m *C2SCreateGuildWorkshopProto) GetPosY() int32 {
	if m != nil {
		return m.PosY
	}
	return 0
}

type S2CCreateGuildWorkshopProto struct {
	PosX int32 `protobuf:"varint,1,opt,name=pos_x,json=posX,proto3" json:"pos_x,omitempty"`
	PosY int32 `protobuf:"varint,2,opt,name=pos_y,json=posY,proto3" json:"pos_y,omitempty"`
}

func (m *S2CCreateGuildWorkshopProto) Reset()         { *m = S2CCreateGuildWorkshopProto{} }
func (m *S2CCreateGuildWorkshopProto) String() string { return proto.CompactTextString(m) }
func (*S2CCreateGuildWorkshopProto) ProtoMessage()    {}
func (*S2CCreateGuildWorkshopProto) Descriptor() ([]byte, []int) {
	return fileDescriptorRegion, []int{95}
}

func (m *S2CCreateGuildWorkshopProto) GetPosX() int32 {
	if m != nil {
		return m.PosX
	}
	return 0
}

func (m *S2CCreateGuildWorkshopProto) GetPosY() int32 {
	if m != nil {
		return m.PosY
	}
	return 0
}

type C2SShowGuildWorkshopProto struct {
	BaseId []byte `protobuf:"bytes,1,opt,name=base_id,json=baseId,proto3" json:"base_id,omitempty"`
}

func (m *C2SShowGuildWorkshopProto) Reset()                    { *m = C2SShowGuildWorkshopProto{} }
func (m *C2SShowGuildWorkshopProto) String() string            { return proto.CompactTextString(m) }
func (*C2SShowGuildWorkshopProto) ProtoMessage()               {}
func (*C2SShowGuildWorkshopProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{96} }

func (m *C2SShowGuildWorkshopProto) GetBaseId() []byte {
	if m != nil {
		return m.BaseId
	}
	return nil
}

type S2CShowGuildWorkshopProto struct {
	BaseId        []byte `protobuf:"bytes,1,opt,name=base_id,json=baseId,proto3" json:"base_id,omitempty"`
	GuildId       int32  `protobuf:"varint,2,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	Output        int32  `protobuf:"varint,3,opt,name=output,proto3" json:"output,omitempty"`
	TotalOutput   int32  `protobuf:"varint,4,opt,name=total_output,json=totalOutput,proto3" json:"total_output,omitempty"`
	PrizeCount    int32  `protobuf:"varint,5,opt,name=prize_count,json=prizeCount,proto3" json:"prize_count,omitempty"`
	BeenHurtTimes int32  `protobuf:"varint,6,opt,name=been_hurt_times,json=beenHurtTimes,proto3" json:"been_hurt_times,omitempty"`
}

func (m *S2CShowGuildWorkshopProto) Reset()                    { *m = S2CShowGuildWorkshopProto{} }
func (m *S2CShowGuildWorkshopProto) String() string            { return proto.CompactTextString(m) }
func (*S2CShowGuildWorkshopProto) ProtoMessage()               {}
func (*S2CShowGuildWorkshopProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{97} }

func (m *S2CShowGuildWorkshopProto) GetBaseId() []byte {
	if m != nil {
		return m.BaseId
	}
	return nil
}

func (m *S2CShowGuildWorkshopProto) GetGuildId() int32 {
	if m != nil {
		return m.GuildId
	}
	return 0
}

func (m *S2CShowGuildWorkshopProto) GetOutput() int32 {
	if m != nil {
		return m.Output
	}
	return 0
}

func (m *S2CShowGuildWorkshopProto) GetTotalOutput() int32 {
	if m != nil {
		return m.TotalOutput
	}
	return 0
}

func (m *S2CShowGuildWorkshopProto) GetPrizeCount() int32 {
	if m != nil {
		return m.PrizeCount
	}
	return 0
}

func (m *S2CShowGuildWorkshopProto) GetBeenHurtTimes() int32 {
	if m != nil {
		return m.BeenHurtTimes
	}
	return 0
}

type C2SHurtGuildWorkshopProto struct {
	BaseId []byte `protobuf:"bytes,1,opt,name=base_id,json=baseId,proto3" json:"base_id,omitempty"`
}

func (m *C2SHurtGuildWorkshopProto) Reset()                    { *m = C2SHurtGuildWorkshopProto{} }
func (m *C2SHurtGuildWorkshopProto) String() string            { return proto.CompactTextString(m) }
func (*C2SHurtGuildWorkshopProto) ProtoMessage()               {}
func (*C2SHurtGuildWorkshopProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{98} }

func (m *C2SHurtGuildWorkshopProto) GetBaseId() []byte {
	if m != nil {
		return m.BaseId
	}
	return nil
}

type S2CHurtGuildWorkshopProto struct {
	BaseId   []byte `protobuf:"bytes,1,opt,name=base_id,json=baseId,proto3" json:"base_id,omitempty"`
	NextTime int32  `protobuf:"varint,2,opt,name=next_time,json=nextTime,proto3" json:"next_time,omitempty"`
	Times    int32  `protobuf:"varint,3,opt,name=times,proto3" json:"times,omitempty"`
}

func (m *S2CHurtGuildWorkshopProto) Reset()                    { *m = S2CHurtGuildWorkshopProto{} }
func (m *S2CHurtGuildWorkshopProto) String() string            { return proto.CompactTextString(m) }
func (*S2CHurtGuildWorkshopProto) ProtoMessage()               {}
func (*S2CHurtGuildWorkshopProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{99} }

func (m *S2CHurtGuildWorkshopProto) GetBaseId() []byte {
	if m != nil {
		return m.BaseId
	}
	return nil
}

func (m *S2CHurtGuildWorkshopProto) GetNextTime() int32 {
	if m != nil {
		return m.NextTime
	}
	return 0
}

func (m *S2CHurtGuildWorkshopProto) GetTimes() int32 {
	if m != nil {
		return m.Times
	}
	return 0
}

type S2CUpdateGuildWorkshopPrizeCountProto struct {
	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *S2CUpdateGuildWorkshopPrizeCountProto) Reset()         { *m = S2CUpdateGuildWorkshopPrizeCountProto{} }
func (m *S2CUpdateGuildWorkshopPrizeCountProto) String() string { return proto.CompactTextString(m) }
func (*S2CUpdateGuildWorkshopPrizeCountProto) ProtoMessage()    {}
func (*S2CUpdateGuildWorkshopPrizeCountProto) Descriptor() ([]byte, []int) {
	return fileDescriptorRegion, []int{100}
}

func (m *S2CUpdateGuildWorkshopPrizeCountProto) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type S2CUpdateHeroBuildWorkshopTimesProto struct {
	Times int32 `protobuf:"varint,1,opt,name=times,proto3" json:"times,omitempty"`
}

func (m *S2CUpdateHeroBuildWorkshopTimesProto) Reset()         { *m = S2CUpdateHeroBuildWorkshopTimesProto{} }
func (m *S2CUpdateHeroBuildWorkshopTimesProto) String() string { return proto.CompactTextString(m) }
func (*S2CUpdateHeroBuildWorkshopTimesProto) ProtoMessage()    {}
func (*S2CUpdateHeroBuildWorkshopTimesProto) Descriptor() ([]byte, []int) {
	return fileDescriptorRegion, []int{101}
}

func (m *S2CUpdateHeroBuildWorkshopTimesProto) GetTimes() int32 {
	if m != nil {
		return m.Times
	}
	return 0
}

type S2CUpdateHeroOutputWorkshopTimesProto struct {
	StartRecoveyTime int32 `protobuf:"varint,1,opt,name=start_recovey_time,json=startRecoveyTime,proto3" json:"start_recovey_time,omitempty"`
}

func (m *S2CUpdateHeroOutputWorkshopTimesProto) Reset()         { *m = S2CUpdateHeroOutputWorkshopTimesProto{} }
func (m *S2CUpdateHeroOutputWorkshopTimesProto) String() string { return proto.CompactTextString(m) }
func (*S2CUpdateHeroOutputWorkshopTimesProto) ProtoMessage()    {}
func (*S2CUpdateHeroOutputWorkshopTimesProto) Descriptor() ([]byte, []int) {
	return fileDescriptorRegion, []int{102}
}

func (m *S2CUpdateHeroOutputWorkshopTimesProto) GetStartRecoveyTime() int32 {
	if m != nil {
		return m.StartRecoveyTime
	}
	return 0
}

type C2SCatchGuildWorkshopLogsProto struct {
	Version int32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *C2SCatchGuildWorkshopLogsProto) Reset()         { *m = C2SCatchGuildWorkshopLogsProto{} }
func (m *C2SCatchGuildWorkshopLogsProto) String() string { return proto.CompactTextString(m) }
func (*C2SCatchGuildWorkshopLogsProto) ProtoMessage()    {}
func (*C2SCatchGuildWorkshopLogsProto) Descriptor() ([]byte, []int) {
	return fileDescriptorRegion, []int{103}
}

func (m *C2SCatchGuildWorkshopLogsProto) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type S2CCatchGuildWorkshopLogsProto struct {
	Version int32                           `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	Logs    []*proto8.GuildWorkshopLogProto `protobuf:"bytes,1,rep,name=logs" json:"logs,omitempty"`
}

func (m *S2CCatchGuildWorkshopLogsProto) Reset()         { *m = S2CCatchGuildWorkshopLogsProto{} }
func (m *S2CCatchGuildWorkshopLogsProto) String() string { return proto.CompactTextString(m) }
func (*S2CCatchGuildWorkshopLogsProto) ProtoMessage()    {}
func (*S2CCatchGuildWorkshopLogsProto) Descriptor() ([]byte, []int) {
	return fileDescriptorRegion, []int{104}
}

func (m *S2CCatchGuildWorkshopLogsProto) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *S2CCatchGuildWorkshopLogsProto) GetLogs() []*proto8.GuildWorkshopLogProto {
	if m != nil {
		return m.Logs
	}
	return nil
}

type S2CGetSelfBaozProto struct {
	Exist      bool   `protobuf:"varint,1,opt,name=exist,proto3" json:"exist,omitempty"`
	BaseId     []byte `protobuf:"bytes,2,opt,name=base_id,json=baseId,proto3" json:"base_id,omitempty"`
	BaseX      int32  `protobuf:"varint,3,opt,name=base_x,json=baseX,proto3" json:"base_x,omitempty"`
	BaseY      int32  `protobuf:"varint,4,opt,name=base_y,json=baseY,proto3" json:"base_y,omitempty"`
	ExpireTime int32  `protobuf:"varint,5,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
}

func (m *S2CGetSelfBaozProto) Reset()                    { *m = S2CGetSelfBaozProto{} }
func (m *S2CGetSelfBaozProto) String() string            { return proto.CompactTextString(m) }
func (*S2CGetSelfBaozProto) ProtoMessage()               {}
func (*S2CGetSelfBaozProto) Descriptor() ([]byte, []int) { return fileDescriptorRegion, []int{105} }

func (m *S2CGetSelfBaozProto) GetExist() bool {
	if m != nil {
		return m.Exist
	}
	return false
}

func (m *S2CGetSelfBaozProto) GetBaseId() []byte {
	if m != nil {
		return m.BaseId
	}
	return nil
}

func (m *S2CGetSelfBaozProto) GetBaseX() int32 {
	if m != nil {
		return m.BaseX
	}
	return 0
}

func (m *S2CGetSelfBaozProto) GetBaseY() int32 {
	if m != nil {
		return m.BaseY
	}
	return 0
}

func (m *S2CGetSelfBaozProto) GetExpireTime() int32 {
	if m != nil {
		return m.ExpireTime
	}
	return 0
}

func init() {
	proto.RegisterType((*S2CUpdateMapRadiusProto)(nil), "proto.S2CUpdateMapRadiusProto")
	proto.RegisterType((*C2SUpdateSelfViewProto)(nil), "proto.C2SUpdateSelfViewProto")
	proto.RegisterType((*S2CUpdateSelfViewProto)(nil), "proto.S2CUpdateSelfViewProto")
	proto.RegisterType((*S2CAddBaseUnitProto)(nil), "proto.S2CAddBaseUnitProto")
	proto.RegisterType((*S2CUpdateNpcBaseInfoProto)(nil), "proto.S2CUpdateNpcBaseInfoProto")
	proto.RegisterType((*S2CUpdateBaseProgressProto)(nil), "proto.S2CUpdateBaseProgressProto")
	proto.RegisterType((*S2CRemoveBaseUnitProto)(nil), "proto.S2CRemoveBaseUnitProto")
	proto.RegisterType((*C2SPreInvasionTargetProto)(nil), "proto.C2SPreInvasionTargetProto")
	proto.RegisterType((*S2CPreInvasionTargetProto)(nil), "proto.S2CPreInvasionTargetProto")
	proto.RegisterType((*C2SWatchBaseUnitProto)(nil), "proto.C2SWatchBaseUnitProto")
	proto.RegisterType((*S2CWatchBaseUnitProto)(nil), "proto.S2CWatchBaseUnitProto")
	proto.RegisterType((*S2CUpdateWatchBaseProsperityProto)(nil), "proto.S2CUpdateWatchBaseProsperityProto")
	proto.RegisterType((*S2CUpdateStopLostProsperityProto)(nil), "proto.S2CUpdateStopLostProsperityProto")
	proto.RegisterType((*S2CAddTroopUnitProto)(nil), "proto.S2CAddTroopUnitProto")
	proto.RegisterType((*S2CRemoveTroopUnitProto)(nil), "proto.S2CRemoveTroopUnitProto")
	proto.RegisterType((*C2SRequestTroopUnitProto)(nil), "proto.C2SRequestTroopUnitProto")
	proto.RegisterType((*S2CRequestTroopUnitProto)(nil), "proto.S2CRequestTroopUnitProto")
	proto.RegisterType((*S2CAddRuinsBaseProto)(nil), "proto.S2CAddRuinsBaseProto")
	proto.RegisterType((*S2CRemoveRuinsBaseProto)(nil), "proto.S2CRemoveRuinsBaseProto")
	proto.RegisterType((*C2SRequestRuinsBaseProto)(nil), "proto.C2SRequestRuinsBaseProto")
	proto.RegisterType((*S2CRequestRuinsBaseProto)(nil), "proto.S2CRequestRuinsBaseProto")
	proto.RegisterType((*S2CUpdateSelfMianDisappearTimeProto)(nil), "proto.S2CUpdateSelfMianDisappearTimeProto")
	proto.RegisterType((*C2SUseMianGoodsProto)(nil), "proto.C2SUseMianGoodsProto")
	proto.RegisterType((*S2CUseMianGoodsProto)(nil), "proto.S2CUseMianGoodsProto")
	proto.RegisterType((*S2CUpdateNewHeroMianDisappearTimeProto)(nil), "proto.S2CUpdateNewHeroMianDisappearTimeProto")
	proto.RegisterType((*S2CSelfUpdateBaseLevelProto)(nil), "proto.S2CSelfUpdateBaseLevelProto")
	proto.RegisterType((*S2CUpdateWhiteFlagProto)(nil), "proto.S2CUpdateWhiteFlagProto")
	proto.RegisterType((*C2SWhiteFlagDetailProto)(nil), "proto.C2SWhiteFlagDetailProto")
	proto.RegisterType((*S2CWhiteFlagDetailProto)(nil), "proto.S2CWhiteFlagDetailProto")
	proto.RegisterType((*S2CSelfBaseDestroyProto)(nil), "proto.S2CSelfBaseDestroyProto")
	proto.RegisterType((*S2CProsperityBufProto)(nil), "proto.S2CProsperityBufProto")
	proto.RegisterType((*S2CShowWordsProto)(nil), "proto.S2CShowWordsProto")
	proto.RegisterType((*S2CGetBuyProsperityCostProto)(nil), "proto.S2CGetBuyProsperityCostProto")
	proto.RegisterType((*S2CBuyProsperityProto)(nil), "proto.S2CBuyProsperityProto")
	proto.RegisterType((*S2CSelfBeenAttackRobChangedProto)(nil), "proto.S2CSelfBeenAttackRobChangedProto")
	proto.RegisterType((*S2CGuildBeenAttackRobChangedProto)(nil), "proto.S2CGuildBeenAttackRobChangedProto")
	proto.RegisterType((*C2SSwitchActionProto)(nil), "proto.C2SSwitchActionProto")
	proto.RegisterType((*S2CSwitchActionProto)(nil), "proto.S2CSwitchActionProto")
	proto.RegisterType((*C2SRequestMilitaryPushProto)(nil), "proto.C2SRequestMilitaryPushProto")
	proto.RegisterType((*S2CRequestMilitaryPushProto)(nil), "proto.S2CRequestMilitaryPushProto")
	proto.RegisterType((*S2CUpdateMilitaryInfoProto)(nil), "proto.S2CUpdateMilitaryInfoProto")
	proto.RegisterType((*S2CRemoveMilitaryInfoProto)(nil), "proto.S2CRemoveMilitaryInfoProto")
	proto.RegisterType((*S2CUpdateSelfMilitaryInfoProto)(nil), "proto.S2CUpdateSelfMilitaryInfoProto")
	proto.RegisterType((*S2CRemoveSelfMilitaryInfoProto)(nil), "proto.S2CRemoveSelfMilitaryInfoProto")
	proto.RegisterType((*S2CNpcBaseInfoProto)(nil), "proto.S2CNpcBaseInfoProto")
	proto.RegisterType((*C2SCreateBaseProto)(nil), "proto.C2SCreateBaseProto")
	proto.RegisterType((*S2CCreateBaseProto)(nil), "proto.S2CCreateBaseProto")
	proto.RegisterType((*C2SFastMoveBaseProto)(nil), "proto.C2SFastMoveBaseProto")
	proto.RegisterType((*S2CFastMoveBaseProto)(nil), "proto.S2CFastMoveBaseProto")
	proto.RegisterType((*C2SInvasionProto)(nil), "proto.C2SInvasionProto")
	proto.RegisterType((*S2CInvasionProto)(nil), "proto.S2CInvasionProto")
	proto.RegisterType((*S2CUpdateSelfTroopsProto)(nil), "proto.S2CUpdateSelfTroopsProto")
	proto.RegisterType((*S2CUpdateSelfTroopsOutsideProto)(nil), "proto.S2CUpdateSelfTroopsOutsideProto")
	proto.RegisterType((*C2SCancelInvasionProto)(nil), "proto.C2SCancelInvasionProto")
	proto.RegisterType((*S2CCancelInvasionProto)(nil), "proto.S2CCancelInvasionProto")
	proto.RegisterType((*C2SRepatriateProto)(nil), "proto.C2SRepatriateProto")
	proto.RegisterType((*S2CRepatriateProto)(nil), "proto.S2CRepatriateProto")
	proto.RegisterType((*C2SBaozRepatriateProto)(nil), "proto.C2SBaozRepatriateProto")
	proto.RegisterType((*S2CBaozRepatriateProto)(nil), "proto.S2CBaozRepatriateProto")
	proto.RegisterType((*C2SSpeedUpProto)(nil), "proto.C2SSpeedUpProto")
	proto.RegisterType((*S2CSpeedUpProto)(nil), "proto.S2CSpeedUpProto")
	proto.RegisterType((*C2SExpelProto)(nil), "proto.C2SExpelProto")
	proto.RegisterType((*S2CExpelProto)(nil), "proto.S2CExpelProto")
	proto.RegisterType((*C2SFavoritePosProto)(nil), "proto.C2SFavoritePosProto")
	proto.RegisterType((*S2CFavoritePosProto)(nil), "proto.S2CFavoritePosProto")
	proto.RegisterType((*S2CFavoritePosListProto)(nil), "proto.S2CFavoritePosListProto")
	proto.RegisterType((*C2SGetPrevInvestigateProto)(nil), "proto.C2SGetPrevInvestigateProto")
	proto.RegisterType((*S2CGetPrevInvestigateProto)(nil), "proto.S2CGetPrevInvestigateProto")
	proto.RegisterType((*C2SInvestigateProto)(nil), "proto.C2SInvestigateProto")
	proto.RegisterType((*S2CInvestigateProto)(nil), "proto.S2CInvestigateProto")
	proto.RegisterType((*C2SInvestigateInvadeProto)(nil), "proto.C2SInvestigateInvadeProto")
	proto.RegisterType((*S2CInvestigateInvadeProto)(nil), "proto.S2CInvestigateInvadeProto")
	proto.RegisterType((*S2CUpdateMultiLevelNpcPassLevelProto)(nil), "proto.S2CUpdateMultiLevelNpcPassLevelProto")
	proto.RegisterType((*S2CUpdateMultiLevelNpcHateProto)(nil), "proto.S2CUpdateMultiLevelNpcHateProto")
	proto.RegisterType((*S2CUpdateMultiLevelNpcTimesProto)(nil), "proto.S2CUpdateMultiLevelNpcTimesProto")
	proto.RegisterType((*C2SUseMultiLevelNpcTimesGoodsProto)(nil), "proto.C2SUseMultiLevelNpcTimesGoodsProto")
	proto.RegisterType((*S2CUseMultiLevelNpcTimesGoodsProto)(nil), "proto.S2CUseMultiLevelNpcTimesGoodsProto")
	proto.RegisterType((*S2CUpdateInvaseHeroTimesProto)(nil), "proto.S2CUpdateInvaseHeroTimesProto")
	proto.RegisterType((*S2CUpdateJunTuanNpcTimesProto)(nil), "proto.S2CUpdateJunTuanNpcTimesProto")
	proto.RegisterType((*C2SUseInvaseHeroTimesGoodsProto)(nil), "proto.C2SUseInvaseHeroTimesGoodsProto")
	proto.RegisterType((*S2CUseInvaseHeroTimesGoodsProto)(nil), "proto.S2CUseInvaseHeroTimesGoodsProto")
	proto.RegisterType((*C2SCalcMoveSpeedProto)(nil), "proto.C2SCalcMoveSpeedProto")
	proto.RegisterType((*S2CCalcMoveSpeedProto)(nil), "proto.S2CCalcMoveSpeedProto")
	proto.RegisterType((*S2CListEnemyPosProto)(nil), "proto.S2CListEnemyPosProto")
	proto.RegisterType((*C2SSearchBaozNpcProto)(nil), "proto.C2SSearchBaozNpcProto")
	proto.RegisterType((*S2CSearchBaozNpcProto)(nil), "proto.S2CSearchBaozNpcProto")
	proto.RegisterType((*S2CHomeAstDefendingInfoProto)(nil), "proto.S2CHomeAstDefendingInfoProto")
	proto.RegisterType((*C2SCreateAssemblyProto)(nil), "proto.C2SCreateAssemblyProto")
	proto.RegisterType((*S2CCreateAssemblyProto)(nil), "proto.S2CCreateAssemblyProto")
	proto.RegisterType((*C2SShowAssemblyProto)(nil), "proto.C2SShowAssemblyProto")
	proto.RegisterType((*S2CShowAssemblyProto)(nil), "proto.S2CShowAssemblyProto")
	proto.RegisterType((*S2CShowAssemblyChangedProto)(nil), "proto.S2CShowAssemblyChangedProto")
	proto.RegisterType((*C2SJoinAssemblyProto)(nil), "proto.C2SJoinAssemblyProto")
	proto.RegisterType((*S2CJoinAssemblyProto)(nil), "proto.S2CJoinAssemblyProto")
	proto.RegisterType((*C2SCreateGuildWorkshopProto)(nil), "proto.C2SCreateGuildWorkshopProto")
	proto.RegisterType((*S2CCreateGuildWorkshopProto)(nil), "proto.S2CCreateGuildWorkshopProto")
	proto.RegisterType((*C2SShowGuildWorkshopProto)(nil), "proto.C2SShowGuildWorkshopProto")
	proto.RegisterType((*S2CShowGuildWorkshopProto)(nil), "proto.S2CShowGuildWorkshopProto")
	proto.RegisterType((*C2SHurtGuildWorkshopProto)(nil), "proto.C2SHurtGuildWorkshopProto")
	proto.RegisterType((*S2CHurtGuildWorkshopProto)(nil), "proto.S2CHurtGuildWorkshopProto")
	proto.RegisterType((*S2CUpdateGuildWorkshopPrizeCountProto)(nil), "proto.S2CUpdateGuildWorkshopPrizeCountProto")
	proto.RegisterType((*S2CUpdateHeroBuildWorkshopTimesProto)(nil), "proto.S2CUpdateHeroBuildWorkshopTimesProto")
	proto.RegisterType((*S2CUpdateHeroOutputWorkshopTimesProto)(nil), "proto.S2CUpdateHeroOutputWorkshopTimesProto")
	proto.RegisterType((*C2SCatchGuildWorkshopLogsProto)(nil), "proto.C2SCatchGuildWorkshopLogsProto")
	proto.RegisterType((*S2CCatchGuildWorkshopLogsProto)(nil), "proto.S2CCatchGuildWorkshopLogsProto")
	proto.RegisterType((*S2CGetSelfBaozProto)(nil), "proto.S2CGetSelfBaozProto")
}
func (m *S2CUpdateMapRadiusProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateMapRadiusProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CenterX != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.CenterX))
	}
	if m.CenterY != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.CenterY))
	}
	if m.Radius != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.Radius))
	}
	return i, nil
}

func (m *C2SUpdateSelfViewProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SUpdateSelfViewProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PosX != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.PosX))
	}
	if m.PosY != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.PosY))
	}
	if m.LenX != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.LenX))
	}
	if m.LenY != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.LenY))
	}
	return i, nil
}

func (m *S2CUpdateSelfViewProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateSelfViewProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MinX != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.MinX))
	}
	if m.MinY != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.MinY))
	}
	if m.MaxX != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.MaxX))
	}
	if m.MaxY != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.MaxY))
	}
	return i, nil
}

func (m *S2CAddBaseUnitProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CAddBaseUnitProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AddType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.AddType))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *S2CUpdateNpcBaseInfoProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateNpcBaseInfoProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MapId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.MapId))
	}
	if len(m.NpcId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.NpcId)))
		i += copy(dAtA[i:], m.NpcId)
	}
	if m.BaseX != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.BaseX))
	}
	if m.BaseY != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.BaseY))
	}
	if m.DataId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.DataId))
	}
	if m.DataType != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.DataType))
	}
	if m.GuildId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.GuildId))
	}
	if m.MianDisappearTime != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.MianDisappearTime))
	}
	if m.Prosperity != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.Prosperity))
	}
	if m.HasDefenser {
		dAtA[i] = 0x58
		i++
		if m.HasDefenser {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Progress != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.Progress))
	}
	if m.TotalProgress != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.TotalProgress))
	}
	if len(m.GuildName) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.GuildName)))
		i += copy(dAtA[i:], m.GuildName)
	}
	if len(m.GuildFlagName) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.GuildFlagName)))
		i += copy(dAtA[i:], m.GuildFlagName)
	}
	if m.Country != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.Country))
	}
	if m.ProgressType != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.ProgressType))
	}
	if len(m.Hero) > 0 {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.Hero)))
		i += copy(dAtA[i:], m.Hero)
	}
	if m.HeroEndTime != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.HeroEndTime))
	}
	if m.HeroType != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.HeroType))
	}
	return i, nil
}

func (m *S2CUpdateBaseProgressProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateBaseProgressProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Progress != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.Progress))
	}
	if m.TotalProgress != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.TotalProgress))
	}
	if m.ProgressType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.ProgressType))
	}
	return i, nil
}

func (m *S2CRemoveBaseUnitProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CRemoveBaseUnitProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RemoveType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.RemoveType))
	}
	if len(m.HeroId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.HeroId)))
		i += copy(dAtA[i:], m.HeroId)
	}
	return i, nil
}

func (m *C2SPreInvasionTargetProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SPreInvasionTargetProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MapId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.MapId))
	}
	if len(m.Target) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.Target)))
		i += copy(dAtA[i:], m.Target)
	}
	return i, nil
}

func (m *S2CPreInvasionTargetProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CPreInvasionTargetProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Head) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.Head)))
		i += copy(dAtA[i:], m.Head)
	}
	if m.Level != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.Level))
	}
	if m.MaxTowerFloor != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.MaxTowerFloor))
	}
	if m.JunXianLevel != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.JunXianLevel))
	}
	return i, nil
}

func (m *C2SWatchBaseUnitProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SWatchBaseUnitProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Target) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.Target)))
		i += copy(dAtA[i:], m.Target)
	}
	return i, nil
}

func (m *S2CWatchBaseUnitProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CWatchBaseUnitProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Target) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.Target)))
		i += copy(dAtA[i:], m.Target)
	}
	if m.FightAmount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.FightAmount))
	}
	if m.Prosprity != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.Prosprity))
	}
	if m.ProsprityCapcity != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.ProsprityCapcity))
	}
	if len(m.Head) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.Head)))
		i += copy(dAtA[i:], m.Head)
	}
	if m.Level != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.Level))
	}
	if m.MaxTowerFloor != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.MaxTowerFloor))
	}
	if m.JunXianLevel != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.JunXianLevel))
	}
	if m.Soldier != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.Soldier))
	}
	if len(m.CaptainSoldier) > 0 {
		for _, num := range m.CaptainSoldier {
			dAtA[i] = 0x58
			i++
			i = encodeVarintRegion(dAtA, i, uint64(num))
		}
	}
	if len(m.GuildName) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.GuildName)))
		i += copy(dAtA[i:], m.GuildName)
	}
	if len(m.Hero) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.Hero)))
		i += copy(dAtA[i:], m.Hero)
	}
	if m.HeroEndTime != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.HeroEndTime))
	}
	if m.HeroType != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.HeroType))
	}
	return i, nil
}

func (m *S2CUpdateWatchBaseProsperityProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateWatchBaseProsperityProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Target) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.Target)))
		i += copy(dAtA[i:], m.Target)
	}
	if m.Prosprity != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.Prosprity))
	}
	if m.ProsprityCapcity != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.ProsprityCapcity))
	}
	return i, nil
}

func (m *S2CUpdateStopLostProsperityProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateStopLostProsperityProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Target) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.Target)))
		i += copy(dAtA[i:], m.Target)
	}
	return i, nil
}

func (m *S2CAddTroopUnitProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CAddTroopUnitProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AddType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.AddType))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *S2CRemoveTroopUnitProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CRemoveTroopUnitProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RemoveType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.RemoveType))
	}
	if len(m.TroopId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.TroopId)))
		i += copy(dAtA[i:], m.TroopId)
	}
	return i, nil
}

func (m *C2SRequestTroopUnitProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SRequestTroopUnitProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TroopId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.TroopId)))
		i += copy(dAtA[i:], m.TroopId)
	}
	return i, nil
}

func (m *S2CRequestTroopUnitProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CRequestTroopUnitProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *S2CAddRuinsBaseProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CAddRuinsBaseProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PosX != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.PosX))
	}
	if m.PosY != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.PosY))
	}
	return i, nil
}

func (m *S2CRemoveRuinsBaseProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CRemoveRuinsBaseProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PosX != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.PosX))
	}
	if m.PosY != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.PosY))
	}
	return i, nil
}

func (m *C2SRequestRuinsBaseProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SRequestRuinsBaseProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RealmId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.RealmId))
	}
	if m.PosX != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.PosX))
	}
	if m.PosY != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.PosY))
	}
	return i, nil
}

func (m *S2CRequestRuinsBaseProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CRequestRuinsBaseProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RealmId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.RealmId))
	}
	if m.PosX != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.PosX))
	}
	if m.PosY != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.PosY))
	}
	if len(m.HeroBasic) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.HeroBasic)))
		i += copy(dAtA[i:], m.HeroBasic)
	}
	return i, nil
}

func (m *S2CUpdateSelfMianDisappearTimeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateSelfMianDisappearTimeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MianDisappearTime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.MianDisappearTime))
	}
	if m.MianStartTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.MianStartTime))
	}
	return i, nil
}

func (m *C2SUseMianGoodsProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SUseMianGoodsProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.Id))
	}
	if m.Buy {
		dAtA[i] = 0x10
		i++
		if m.Buy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CUseMianGoodsProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUseMianGoodsProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.Id))
	}
	if m.Cooldown != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.Cooldown))
	}
	return i, nil
}

func (m *S2CUpdateNewHeroMianDisappearTimeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateNewHeroMianDisappearTimeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DisappearTime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.DisappearTime))
	}
	return i, nil
}

func (m *S2CSelfUpdateBaseLevelProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSelfUpdateBaseLevelProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Level != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.Level))
	}
	return i, nil
}

func (m *S2CUpdateWhiteFlagProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateWhiteFlagProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HeroId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.HeroId)))
		i += copy(dAtA[i:], m.HeroId)
	}
	if m.WhiteFlagGuildId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.WhiteFlagGuildId))
	}
	if len(m.WhiteFlagFlagName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.WhiteFlagFlagName)))
		i += copy(dAtA[i:], m.WhiteFlagFlagName)
	}
	if m.WhiteFlagDisappearTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.WhiteFlagDisappearTime))
	}
	return i, nil
}

func (m *C2SWhiteFlagDetailProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SWhiteFlagDetailProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HeroId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.HeroId)))
		i += copy(dAtA[i:], m.HeroId)
	}
	return i, nil
}

func (m *S2CWhiteFlagDetailProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CWhiteFlagDetailProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HeroId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.HeroId)))
		i += copy(dAtA[i:], m.HeroId)
	}
	if len(m.WhiteFlagHeroId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.WhiteFlagHeroId)))
		i += copy(dAtA[i:], m.WhiteFlagHeroId)
	}
	if len(m.WhiteFlagHeroName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.WhiteFlagHeroName)))
		i += copy(dAtA[i:], m.WhiteFlagHeroName)
	}
	if m.WhiteFlagGuildId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.WhiteFlagGuildId))
	}
	if len(m.WhiteFlagGuildName) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.WhiteFlagGuildName)))
		i += copy(dAtA[i:], m.WhiteFlagGuildName)
	}
	if m.WhiteFlagDisappearTime != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.WhiteFlagDisappearTime))
	}
	if m.WhiteFlagCountry != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.WhiteFlagCountry))
	}
	return i, nil
}

func (m *S2CSelfBaseDestroyProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSelfBaseDestroyProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsTent {
		dAtA[i] = 0x8
		i++
		if m.IsTent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DestroyType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.DestroyType))
	}
	return i, nil
}

func (m *S2CProsperityBufProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CProsperityBufProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EndTime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.EndTime))
	}
	return i, nil
}

func (m *S2CShowWordsProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CShowWordsProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BaseId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.BaseId)))
		i += copy(dAtA[i:], m.BaseId)
	}
	if len(m.TroopId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.TroopId)))
		i += copy(dAtA[i:], m.TroopId)
	}
	if m.Prosperity != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.Prosperity))
	}
	if m.Gold != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.Gold))
	}
	if m.Food != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.Food))
	}
	if m.Wood != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.Wood))
	}
	if m.Stone != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.Stone))
	}
	if m.Jade != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.Jade))
	}
	if m.JadeOre != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.JadeOre))
	}
	return i, nil
}

func (m *S2CGetBuyProsperityCostProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CGetBuyProsperityCostProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Cost != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.Cost))
	}
	return i, nil
}

func (m *S2CBuyProsperityProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CBuyProsperityProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AddProsperity != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.AddProsperity))
	}
	return i, nil
}

func (m *S2CSelfBeenAttackRobChangedProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSelfBeenAttackRobChangedProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BeenAttack != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.BeenAttack))
	}
	if m.BeenRob != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.BeenRob))
	}
	return i, nil
}

func (m *S2CGuildBeenAttackRobChangedProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CGuildBeenAttackRobChangedProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.Total))
	}
	return i, nil
}

func (m *C2SSwitchActionProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SSwitchActionProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Open {
		dAtA[i] = 0x8
		i++
		if m.Open {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Condition) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.Condition)))
		i += copy(dAtA[i:], m.Condition)
	}
	return i, nil
}

func (m *S2CSwitchActionProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSwitchActionProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Open {
		dAtA[i] = 0x8
		i++
		if m.Open {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *C2SRequestMilitaryPushProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SRequestMilitaryPushProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MainMilitary {
		dAtA[i] = 0x8
		i++
		if m.MainMilitary {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.GuildMilitary {
		dAtA[i] = 0x10
		i++
		if m.GuildMilitary {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.ToTarget) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.ToTarget)))
		i += copy(dAtA[i:], m.ToTarget)
	}
	if m.ToTargetBase {
		dAtA[i] = 0x20
		i++
		if m.ToTargetBase {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.FromTarget) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.FromTarget)))
		i += copy(dAtA[i:], m.FromTarget)
	}
	return i, nil
}

func (m *S2CRequestMilitaryPushProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CRequestMilitaryPushProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MainMilitary {
		dAtA[i] = 0x8
		i++
		if m.MainMilitary {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.GuildMilitary {
		dAtA[i] = 0x10
		i++
		if m.GuildMilitary {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.ToTarget) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.ToTarget)))
		i += copy(dAtA[i:], m.ToTarget)
	}
	if m.ToTargetBase {
		dAtA[i] = 0x20
		i++
		if m.ToTargetBase {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.FromTarget) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.FromTarget)))
		i += copy(dAtA[i:], m.FromTarget)
	}
	return i, nil
}

func (m *S2CUpdateMilitaryInfoProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateMilitaryInfoProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.Region {
		dAtA[i] = 0x10
		i++
		if m.Region {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Ma {
		dAtA[i] = 0x18
		i++
		if m.Ma {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CRemoveMilitaryInfoProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CRemoveMilitaryInfoProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Region {
		dAtA[i] = 0x10
		i++
		if m.Region {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Ma {
		dAtA[i] = 0x18
		i++
		if m.Ma {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CUpdateSelfMilitaryInfoProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateSelfMilitaryInfoProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.TroopIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.TroopIndex))
	}
	if len(m.TroopId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.TroopId)))
		i += copy(dAtA[i:], m.TroopId)
	}
	return i, nil
}

func (m *S2CRemoveSelfMilitaryInfoProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CRemoveSelfMilitaryInfoProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *S2CNpcBaseInfoProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CNpcBaseInfoProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MapId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.MapId))
	}
	if len(m.NpcId) > 0 {
		for _, b := range m.NpcId {
			dAtA[i] = 0x12
			i++
			i = encodeVarintRegion(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.BaseX) > 0 {
		for _, num := range m.BaseX {
			dAtA[i] = 0x18
			i++
			i = encodeVarintRegion(dAtA, i, uint64(num))
		}
	}
	if len(m.BaseY) > 0 {
		for _, num := range m.BaseY {
			dAtA[i] = 0x20
			i++
			i = encodeVarintRegion(dAtA, i, uint64(num))
		}
	}
	if len(m.DataId) > 0 {
		for _, num := range m.DataId {
			dAtA[i] = 0x28
			i++
			i = encodeVarintRegion(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *C2SCreateBaseProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCreateBaseProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MapId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.MapId))
	}
	if m.NewX != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.NewX))
	}
	if m.NewY != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.NewY))
	}
	return i, nil
}

func (m *S2CCreateBaseProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCreateBaseProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Level != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.Level))
	}
	if m.MapId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.MapId))
	}
	if m.NewX != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.NewX))
	}
	if m.NewY != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.NewY))
	}
	if m.Prosperity != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.Prosperity))
	}
	return i, nil
}

func (m *C2SFastMoveBaseProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SFastMoveBaseProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NewX != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.NewX))
	}
	if m.NewY != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.NewY))
	}
	if m.MapId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.MapId))
	}
	if m.GoodsId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.GoodsId))
	}
	if m.IsTent {
		dAtA[i] = 0x28
		i++
		if m.IsTent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Free {
		dAtA[i] = 0x30
		i++
		if m.Free {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CFastMoveBaseProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CFastMoveBaseProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NewX != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.NewX))
	}
	if m.NewY != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.NewY))
	}
	if m.MapId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.MapId))
	}
	if m.IsTent {
		dAtA[i] = 0x20
		i++
		if m.IsTent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *C2SInvasionProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SInvasionProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Target) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.Target)))
		i += copy(dAtA[i:], m.Target)
	}
	if m.TroopIndex != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.TroopIndex))
	}
	if m.TargetLevel != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.TargetLevel))
	}
	if m.GoodsId != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.GoodsId))
	}
	if m.AutoBuy {
		dAtA[i] = 0x48
		i++
		if m.AutoBuy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Operate != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.Operate))
	}
	if m.MultiLevelMonsterCount != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.MultiLevelMonsterCount))
	}
	return i, nil
}

func (m *S2CInvasionProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CInvasionProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Target) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.Target)))
		i += copy(dAtA[i:], m.Target)
	}
	if m.TroopIndex != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.TroopIndex))
	}
	return i, nil
}

func (m *S2CUpdateSelfTroopsProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateSelfTroopsProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		for _, num := range m.Id {
			dAtA[i] = 0x8
			i++
			i = encodeVarintRegion(dAtA, i, uint64(num))
		}
	}
	if len(m.Soldier) > 0 {
		for _, num := range m.Soldier {
			dAtA[i] = 0x10
			i++
			i = encodeVarintRegion(dAtA, i, uint64(num))
		}
	}
	if len(m.FightAmount) > 0 {
		for _, num := range m.FightAmount {
			dAtA[i] = 0x18
			i++
			i = encodeVarintRegion(dAtA, i, uint64(num))
		}
	}
	if m.WoundedSoldier != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.WoundedSoldier))
	}
	if m.RemoveOutside {
		dAtA[i] = 0x28
		i++
		if m.RemoveOutside {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TroopIndex != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.TroopIndex))
	}
	return i, nil
}

func (m *S2CUpdateSelfTroopsOutsideProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateSelfTroopsOutsideProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TroopIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.TroopIndex))
	}
	if m.Outside {
		dAtA[i] = 0x10
		i++
		if m.Outside {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *C2SCancelInvasionProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCancelInvasionProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *S2CCancelInvasionProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCancelInvasionProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *C2SRepatriateProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SRepatriateProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.IsTent {
		dAtA[i] = 0x10
		i++
		if m.IsTent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CRepatriateProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CRepatriateProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.IsTent {
		dAtA[i] = 0x10
		i++
		if m.IsTent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *C2SBaozRepatriateProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SBaozRepatriateProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BaseId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.BaseId)))
		i += copy(dAtA[i:], m.BaseId)
	}
	if len(m.TroopId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.TroopId)))
		i += copy(dAtA[i:], m.TroopId)
	}
	return i, nil
}

func (m *S2CBaozRepatriateProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CBaozRepatriateProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BaseId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.BaseId)))
		i += copy(dAtA[i:], m.BaseId)
	}
	if len(m.TroopId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.TroopId)))
		i += copy(dAtA[i:], m.TroopId)
	}
	return i, nil
}

func (m *C2SSpeedUpProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SSpeedUpProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.GoodsId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.GoodsId))
	}
	if m.Money {
		dAtA[i] = 0x28
		i++
		if m.Money {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.OtherId) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.OtherId)))
		i += copy(dAtA[i:], m.OtherId)
	}
	return i, nil
}

func (m *S2CSpeedUpProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSpeedUpProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *C2SExpelProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SExpelProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Mapid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.Mapid))
	}
	if m.TroopIndex != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.TroopIndex))
	}
	return i, nil
}

func (m *S2CExpelProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CExpelProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Cooldown != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.Cooldown))
	}
	if len(m.Link) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.Link)))
		i += copy(dAtA[i:], m.Link)
	}
	return i, nil
}

func (m *C2SFavoritePosProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SFavoritePosProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Add {
		dAtA[i] = 0x8
		i++
		if m.Add {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.Id))
	}
	if m.PosX != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.PosX))
	}
	if m.PosY != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.PosY))
	}
	return i, nil
}

func (m *S2CFavoritePosProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CFavoritePosProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Add {
		dAtA[i] = 0x8
		i++
		if m.Add {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.Id))
	}
	if m.PosX != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.PosX))
	}
	if m.PosY != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.PosY))
	}
	return i, nil
}

func (m *S2CFavoritePosListProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CFavoritePosListProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *C2SGetPrevInvestigateProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SGetPrevInvestigateProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HeroId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.HeroId)))
		i += copy(dAtA[i:], m.HeroId)
	}
	return i, nil
}

func (m *S2CGetPrevInvestigateProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CGetPrevInvestigateProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HeroId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.HeroId)))
		i += copy(dAtA[i:], m.HeroId)
	}
	if len(m.MailId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.MailId)))
		i += copy(dAtA[i:], m.MailId)
	}
	if m.ExpireTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.ExpireTime))
	}
	return i, nil
}

func (m *C2SInvestigateProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SInvestigateProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HeroId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.HeroId)))
		i += copy(dAtA[i:], m.HeroId)
	}
	if m.Cost {
		dAtA[i] = 0x18
		i++
		if m.Cost {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CInvestigateProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CInvestigateProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HeroId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.HeroId)))
		i += copy(dAtA[i:], m.HeroId)
	}
	if m.NextInvestigateTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.NextInvestigateTime))
	}
	return i, nil
}

func (m *C2SInvestigateInvadeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SInvestigateInvadeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HeroId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.HeroId)))
		i += copy(dAtA[i:], m.HeroId)
	}
	return i, nil
}

func (m *S2CInvestigateInvadeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CInvestigateInvadeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Target) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.Target)))
		i += copy(dAtA[i:], m.Target)
	}
	return i, nil
}

func (m *S2CUpdateMultiLevelNpcPassLevelProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateMultiLevelNpcPassLevelProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NpcType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.NpcType))
	}
	if m.Level != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.Level))
	}
	return i, nil
}

func (m *S2CUpdateMultiLevelNpcHateProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateMultiLevelNpcHateProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NpcType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.NpcType))
	}
	if m.Hate != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.Hate))
	}
	return i, nil
}

func (m *S2CUpdateMultiLevelNpcTimesProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateMultiLevelNpcTimesProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StartRecoveyTime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.StartRecoveyTime))
	}
	if m.Times != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.Times.Size()))
		n1, err := m.Times.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *C2SUseMultiLevelNpcTimesGoodsProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SUseMultiLevelNpcTimesGoodsProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.Id))
	}
	if m.Buy {
		dAtA[i] = 0x10
		i++
		if m.Buy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CUseMultiLevelNpcTimesGoodsProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUseMultiLevelNpcTimesGoodsProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.Id))
	}
	if m.Buy {
		dAtA[i] = 0x10
		i++
		if m.Buy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CUpdateInvaseHeroTimesProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateInvaseHeroTimesProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StartRecoveyTime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.StartRecoveyTime))
	}
	if m.Times != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.Times.Size()))
		n2, err := m.Times.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *S2CUpdateJunTuanNpcTimesProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateJunTuanNpcTimesProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StartRecoveyTime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.StartRecoveyTime))
	}
	if m.Times != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.Times.Size()))
		n3, err := m.Times.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *C2SUseInvaseHeroTimesGoodsProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SUseInvaseHeroTimesGoodsProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.Id))
	}
	if m.Buy {
		dAtA[i] = 0x10
		i++
		if m.Buy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CUseInvaseHeroTimesGoodsProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUseInvaseHeroTimesGoodsProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.Id))
	}
	if m.Buy {
		dAtA[i] = 0x10
		i++
		if m.Buy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *C2SCalcMoveSpeedProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCalcMoveSpeedProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *S2CCalcMoveSpeedProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCalcMoveSpeedProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Speed != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.Speed))
	}
	return i, nil
}

func (m *S2CListEnemyPosProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CListEnemyPosProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PosX) > 0 {
		for _, num := range m.PosX {
			dAtA[i] = 0x8
			i++
			i = encodeVarintRegion(dAtA, i, uint64(num))
		}
	}
	if len(m.PosY) > 0 {
		for _, num := range m.PosY {
			dAtA[i] = 0x10
			i++
			i = encodeVarintRegion(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *C2SSearchBaozNpcProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SSearchBaozNpcProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DataId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.DataId))
	}
	return i, nil
}

func (m *S2CSearchBaozNpcProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSearchBaozNpcProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DataId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.DataId))
	}
	if len(m.BaseId) > 0 {
		for _, b := range m.BaseId {
			dAtA[i] = 0x12
			i++
			i = encodeVarintRegion(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.BaseX) > 0 {
		for _, num := range m.BaseX {
			dAtA[i] = 0x18
			i++
			i = encodeVarintRegion(dAtA, i, uint64(num))
		}
	}
	if len(m.BaseY) > 0 {
		for _, num := range m.BaseY {
			dAtA[i] = 0x20
			i++
			i = encodeVarintRegion(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *S2CHomeAstDefendingInfoProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CHomeAstDefendingInfoProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Heros) > 0 {
		for _, msg := range m.Heros {
			dAtA[i] = 0xa
			i++
			i = encodeVarintRegion(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Logs) > 0 {
		for _, msg := range m.Logs {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintRegion(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *C2SCreateAssemblyProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCreateAssemblyProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TroopIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.TroopIndex))
	}
	if len(m.Target) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.Target)))
		i += copy(dAtA[i:], m.Target)
	}
	if m.TargetLevel != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.TargetLevel))
	}
	if m.WaitIndex != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.WaitIndex))
	}
	if m.GoodsId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.GoodsId))
	}
	if m.AutoBuy {
		dAtA[i] = 0x30
		i++
		if m.AutoBuy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CCreateAssemblyProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCreateAssemblyProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TroopIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.TroopIndex))
	}
	if len(m.Target) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.Target)))
		i += copy(dAtA[i:], m.Target)
	}
	if len(m.Id) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *C2SShowAssemblyProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SShowAssemblyProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Version != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.Version))
	}
	return i, nil
}

func (m *S2CShowAssemblyProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CShowAssemblyProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Version != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.Version))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.NotExist {
		dAtA[i] = 0x28
		i++
		if m.NotExist {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CShowAssemblyChangedProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CShowAssemblyChangedProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *C2SJoinAssemblyProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SJoinAssemblyProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.TroopIndex != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.TroopIndex))
	}
	if m.GoodsId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.GoodsId))
	}
	if m.AutoBuy {
		dAtA[i] = 0x28
		i++
		if m.AutoBuy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CJoinAssemblyProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CJoinAssemblyProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.TroopIndex != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.TroopIndex))
	}
	return i, nil
}

func (m *C2SCreateGuildWorkshopProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCreateGuildWorkshopProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PosX != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.PosX))
	}
	if m.PosY != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.PosY))
	}
	return i, nil
}

func (m *S2CCreateGuildWorkshopProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCreateGuildWorkshopProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PosX != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.PosX))
	}
	if m.PosY != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.PosY))
	}
	return i, nil
}

func (m *C2SShowGuildWorkshopProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SShowGuildWorkshopProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BaseId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.BaseId)))
		i += copy(dAtA[i:], m.BaseId)
	}
	return i, nil
}

func (m *S2CShowGuildWorkshopProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CShowGuildWorkshopProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BaseId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.BaseId)))
		i += copy(dAtA[i:], m.BaseId)
	}
	if m.GuildId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.GuildId))
	}
	if m.Output != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.Output))
	}
	if m.TotalOutput != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.TotalOutput))
	}
	if m.PrizeCount != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.PrizeCount))
	}
	if m.BeenHurtTimes != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.BeenHurtTimes))
	}
	return i, nil
}

func (m *C2SHurtGuildWorkshopProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SHurtGuildWorkshopProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BaseId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.BaseId)))
		i += copy(dAtA[i:], m.BaseId)
	}
	return i, nil
}

func (m *S2CHurtGuildWorkshopProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CHurtGuildWorkshopProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BaseId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.BaseId)))
		i += copy(dAtA[i:], m.BaseId)
	}
	if m.NextTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.NextTime))
	}
	if m.Times != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.Times))
	}
	return i, nil
}

func (m *S2CUpdateGuildWorkshopPrizeCountProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateGuildWorkshopPrizeCountProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *S2CUpdateHeroBuildWorkshopTimesProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateHeroBuildWorkshopTimesProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Times != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.Times))
	}
	return i, nil
}

func (m *S2CUpdateHeroOutputWorkshopTimesProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpdateHeroOutputWorkshopTimesProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StartRecoveyTime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.StartRecoveyTime))
	}
	return i, nil
}

func (m *C2SCatchGuildWorkshopLogsProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCatchGuildWorkshopLogsProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.Version))
	}
	return i, nil
}

func (m *S2CCatchGuildWorkshopLogsProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCatchGuildWorkshopLogsProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Logs) > 0 {
		for _, msg := range m.Logs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintRegion(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Version != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.Version))
	}
	return i, nil
}

func (m *S2CGetSelfBaozProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CGetSelfBaozProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Exist {
		dAtA[i] = 0x8
		i++
		if m.Exist {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.BaseId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRegion(dAtA, i, uint64(len(m.BaseId)))
		i += copy(dAtA[i:], m.BaseId)
	}
	if m.BaseX != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.BaseX))
	}
	if m.BaseY != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.BaseY))
	}
	if m.ExpireTime != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRegion(dAtA, i, uint64(m.ExpireTime))
	}
	return i, nil
}

func encodeFixed64Region(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Region(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintRegion(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *S2CUpdateMapRadiusProto) Size() (n int) {
	var l int
	_ = l
	if m.CenterX != 0 {
		n += 1 + sovRegion(uint64(m.CenterX))
	}
	if m.CenterY != 0 {
		n += 1 + sovRegion(uint64(m.CenterY))
	}
	if m.Radius != 0 {
		n += 1 + sovRegion(uint64(m.Radius))
	}
	return n
}

func (m *C2SUpdateSelfViewProto) Size() (n int) {
	var l int
	_ = l
	if m.PosX != 0 {
		n += 1 + sovRegion(uint64(m.PosX))
	}
	if m.PosY != 0 {
		n += 1 + sovRegion(uint64(m.PosY))
	}
	if m.LenX != 0 {
		n += 1 + sovRegion(uint64(m.LenX))
	}
	if m.LenY != 0 {
		n += 1 + sovRegion(uint64(m.LenY))
	}
	return n
}

func (m *S2CUpdateSelfViewProto) Size() (n int) {
	var l int
	_ = l
	if m.MinX != 0 {
		n += 1 + sovRegion(uint64(m.MinX))
	}
	if m.MinY != 0 {
		n += 1 + sovRegion(uint64(m.MinY))
	}
	if m.MaxX != 0 {
		n += 1 + sovRegion(uint64(m.MaxX))
	}
	if m.MaxY != 0 {
		n += 1 + sovRegion(uint64(m.MaxY))
	}
	return n
}

func (m *S2CAddBaseUnitProto) Size() (n int) {
	var l int
	_ = l
	if m.AddType != 0 {
		n += 1 + sovRegion(uint64(m.AddType))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	return n
}

func (m *S2CUpdateNpcBaseInfoProto) Size() (n int) {
	var l int
	_ = l
	if m.MapId != 0 {
		n += 1 + sovRegion(uint64(m.MapId))
	}
	l = len(m.NpcId)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	if m.BaseX != 0 {
		n += 1 + sovRegion(uint64(m.BaseX))
	}
	if m.BaseY != 0 {
		n += 1 + sovRegion(uint64(m.BaseY))
	}
	if m.DataId != 0 {
		n += 1 + sovRegion(uint64(m.DataId))
	}
	if m.DataType != 0 {
		n += 1 + sovRegion(uint64(m.DataType))
	}
	if m.GuildId != 0 {
		n += 1 + sovRegion(uint64(m.GuildId))
	}
	if m.MianDisappearTime != 0 {
		n += 1 + sovRegion(uint64(m.MianDisappearTime))
	}
	if m.Prosperity != 0 {
		n += 1 + sovRegion(uint64(m.Prosperity))
	}
	if m.HasDefenser {
		n += 2
	}
	if m.Progress != 0 {
		n += 1 + sovRegion(uint64(m.Progress))
	}
	if m.TotalProgress != 0 {
		n += 1 + sovRegion(uint64(m.TotalProgress))
	}
	l = len(m.GuildName)
	if l > 0 {
		n += 2 + l + sovRegion(uint64(l))
	}
	l = len(m.GuildFlagName)
	if l > 0 {
		n += 2 + l + sovRegion(uint64(l))
	}
	if m.Country != 0 {
		n += 2 + sovRegion(uint64(m.Country))
	}
	if m.ProgressType != 0 {
		n += 2 + sovRegion(uint64(m.ProgressType))
	}
	l = len(m.Hero)
	if l > 0 {
		n += 2 + l + sovRegion(uint64(l))
	}
	if m.HeroEndTime != 0 {
		n += 2 + sovRegion(uint64(m.HeroEndTime))
	}
	if m.HeroType != 0 {
		n += 2 + sovRegion(uint64(m.HeroType))
	}
	return n
}

func (m *S2CUpdateBaseProgressProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	if m.Progress != 0 {
		n += 1 + sovRegion(uint64(m.Progress))
	}
	if m.TotalProgress != 0 {
		n += 1 + sovRegion(uint64(m.TotalProgress))
	}
	if m.ProgressType != 0 {
		n += 1 + sovRegion(uint64(m.ProgressType))
	}
	return n
}

func (m *S2CRemoveBaseUnitProto) Size() (n int) {
	var l int
	_ = l
	if m.RemoveType != 0 {
		n += 1 + sovRegion(uint64(m.RemoveType))
	}
	l = len(m.HeroId)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	return n
}

func (m *C2SPreInvasionTargetProto) Size() (n int) {
	var l int
	_ = l
	if m.MapId != 0 {
		n += 1 + sovRegion(uint64(m.MapId))
	}
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	return n
}

func (m *S2CPreInvasionTargetProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Head)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovRegion(uint64(m.Level))
	}
	if m.MaxTowerFloor != 0 {
		n += 1 + sovRegion(uint64(m.MaxTowerFloor))
	}
	if m.JunXianLevel != 0 {
		n += 1 + sovRegion(uint64(m.JunXianLevel))
	}
	return n
}

func (m *C2SWatchBaseUnitProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	return n
}

func (m *S2CWatchBaseUnitProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	if m.FightAmount != 0 {
		n += 1 + sovRegion(uint64(m.FightAmount))
	}
	if m.Prosprity != 0 {
		n += 1 + sovRegion(uint64(m.Prosprity))
	}
	if m.ProsprityCapcity != 0 {
		n += 1 + sovRegion(uint64(m.ProsprityCapcity))
	}
	l = len(m.Head)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovRegion(uint64(m.Level))
	}
	if m.MaxTowerFloor != 0 {
		n += 1 + sovRegion(uint64(m.MaxTowerFloor))
	}
	if m.JunXianLevel != 0 {
		n += 1 + sovRegion(uint64(m.JunXianLevel))
	}
	if m.Soldier != 0 {
		n += 1 + sovRegion(uint64(m.Soldier))
	}
	if len(m.CaptainSoldier) > 0 {
		for _, e := range m.CaptainSoldier {
			n += 1 + sovRegion(uint64(e))
		}
	}
	l = len(m.GuildName)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	l = len(m.Hero)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	if m.HeroEndTime != 0 {
		n += 1 + sovRegion(uint64(m.HeroEndTime))
	}
	if m.HeroType != 0 {
		n += 2 + sovRegion(uint64(m.HeroType))
	}
	return n
}

func (m *S2CUpdateWatchBaseProsperityProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	if m.Prosprity != 0 {
		n += 1 + sovRegion(uint64(m.Prosprity))
	}
	if m.ProsprityCapcity != 0 {
		n += 1 + sovRegion(uint64(m.ProsprityCapcity))
	}
	return n
}

func (m *S2CUpdateStopLostProsperityProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	return n
}

func (m *S2CAddTroopUnitProto) Size() (n int) {
	var l int
	_ = l
	if m.AddType != 0 {
		n += 1 + sovRegion(uint64(m.AddType))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	return n
}

func (m *S2CRemoveTroopUnitProto) Size() (n int) {
	var l int
	_ = l
	if m.RemoveType != 0 {
		n += 1 + sovRegion(uint64(m.RemoveType))
	}
	l = len(m.TroopId)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	return n
}

func (m *C2SRequestTroopUnitProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.TroopId)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	return n
}

func (m *S2CRequestTroopUnitProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	return n
}

func (m *S2CAddRuinsBaseProto) Size() (n int) {
	var l int
	_ = l
	if m.PosX != 0 {
		n += 1 + sovRegion(uint64(m.PosX))
	}
	if m.PosY != 0 {
		n += 1 + sovRegion(uint64(m.PosY))
	}
	return n
}

func (m *S2CRemoveRuinsBaseProto) Size() (n int) {
	var l int
	_ = l
	if m.PosX != 0 {
		n += 1 + sovRegion(uint64(m.PosX))
	}
	if m.PosY != 0 {
		n += 1 + sovRegion(uint64(m.PosY))
	}
	return n
}

func (m *C2SRequestRuinsBaseProto) Size() (n int) {
	var l int
	_ = l
	if m.RealmId != 0 {
		n += 1 + sovRegion(uint64(m.RealmId))
	}
	if m.PosX != 0 {
		n += 1 + sovRegion(uint64(m.PosX))
	}
	if m.PosY != 0 {
		n += 1 + sovRegion(uint64(m.PosY))
	}
	return n
}

func (m *S2CRequestRuinsBaseProto) Size() (n int) {
	var l int
	_ = l
	if m.RealmId != 0 {
		n += 1 + sovRegion(uint64(m.RealmId))
	}
	if m.PosX != 0 {
		n += 1 + sovRegion(uint64(m.PosX))
	}
	if m.PosY != 0 {
		n += 1 + sovRegion(uint64(m.PosY))
	}
	l = len(m.HeroBasic)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	return n
}

func (m *S2CUpdateSelfMianDisappearTimeProto) Size() (n int) {
	var l int
	_ = l
	if m.MianDisappearTime != 0 {
		n += 1 + sovRegion(uint64(m.MianDisappearTime))
	}
	if m.MianStartTime != 0 {
		n += 1 + sovRegion(uint64(m.MianStartTime))
	}
	return n
}

func (m *C2SUseMianGoodsProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovRegion(uint64(m.Id))
	}
	if m.Buy {
		n += 2
	}
	return n
}

func (m *S2CUseMianGoodsProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovRegion(uint64(m.Id))
	}
	if m.Cooldown != 0 {
		n += 1 + sovRegion(uint64(m.Cooldown))
	}
	return n
}

func (m *S2CUpdateNewHeroMianDisappearTimeProto) Size() (n int) {
	var l int
	_ = l
	if m.DisappearTime != 0 {
		n += 1 + sovRegion(uint64(m.DisappearTime))
	}
	return n
}

func (m *S2CSelfUpdateBaseLevelProto) Size() (n int) {
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovRegion(uint64(m.Level))
	}
	return n
}

func (m *S2CUpdateWhiteFlagProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.HeroId)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	if m.WhiteFlagGuildId != 0 {
		n += 1 + sovRegion(uint64(m.WhiteFlagGuildId))
	}
	l = len(m.WhiteFlagFlagName)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	if m.WhiteFlagDisappearTime != 0 {
		n += 1 + sovRegion(uint64(m.WhiteFlagDisappearTime))
	}
	return n
}

func (m *C2SWhiteFlagDetailProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.HeroId)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	return n
}

func (m *S2CWhiteFlagDetailProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.HeroId)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	l = len(m.WhiteFlagHeroId)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	l = len(m.WhiteFlagHeroName)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	if m.WhiteFlagGuildId != 0 {
		n += 1 + sovRegion(uint64(m.WhiteFlagGuildId))
	}
	l = len(m.WhiteFlagGuildName)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	if m.WhiteFlagDisappearTime != 0 {
		n += 1 + sovRegion(uint64(m.WhiteFlagDisappearTime))
	}
	if m.WhiteFlagCountry != 0 {
		n += 1 + sovRegion(uint64(m.WhiteFlagCountry))
	}
	return n
}

func (m *S2CSelfBaseDestroyProto) Size() (n int) {
	var l int
	_ = l
	if m.IsTent {
		n += 2
	}
	if m.DestroyType != 0 {
		n += 1 + sovRegion(uint64(m.DestroyType))
	}
	return n
}

func (m *S2CProsperityBufProto) Size() (n int) {
	var l int
	_ = l
	if m.EndTime != 0 {
		n += 1 + sovRegion(uint64(m.EndTime))
	}
	return n
}

func (m *S2CShowWordsProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.BaseId)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	l = len(m.TroopId)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	if m.Prosperity != 0 {
		n += 1 + sovRegion(uint64(m.Prosperity))
	}
	if m.Gold != 0 {
		n += 1 + sovRegion(uint64(m.Gold))
	}
	if m.Food != 0 {
		n += 1 + sovRegion(uint64(m.Food))
	}
	if m.Wood != 0 {
		n += 1 + sovRegion(uint64(m.Wood))
	}
	if m.Stone != 0 {
		n += 1 + sovRegion(uint64(m.Stone))
	}
	if m.Jade != 0 {
		n += 1 + sovRegion(uint64(m.Jade))
	}
	if m.JadeOre != 0 {
		n += 1 + sovRegion(uint64(m.JadeOre))
	}
	return n
}

func (m *S2CGetBuyProsperityCostProto) Size() (n int) {
	var l int
	_ = l
	if m.Cost != 0 {
		n += 1 + sovRegion(uint64(m.Cost))
	}
	return n
}

func (m *S2CBuyProsperityProto) Size() (n int) {
	var l int
	_ = l
	if m.AddProsperity != 0 {
		n += 1 + sovRegion(uint64(m.AddProsperity))
	}
	return n
}

func (m *S2CSelfBeenAttackRobChangedProto) Size() (n int) {
	var l int
	_ = l
	if m.BeenAttack != 0 {
		n += 1 + sovRegion(uint64(m.BeenAttack))
	}
	if m.BeenRob != 0 {
		n += 1 + sovRegion(uint64(m.BeenRob))
	}
	return n
}

func (m *S2CGuildBeenAttackRobChangedProto) Size() (n int) {
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovRegion(uint64(m.Total))
	}
	return n
}

func (m *C2SSwitchActionProto) Size() (n int) {
	var l int
	_ = l
	if m.Open {
		n += 2
	}
	l = len(m.Condition)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	return n
}

func (m *S2CSwitchActionProto) Size() (n int) {
	var l int
	_ = l
	if m.Open {
		n += 2
	}
	return n
}

func (m *C2SRequestMilitaryPushProto) Size() (n int) {
	var l int
	_ = l
	if m.MainMilitary {
		n += 2
	}
	if m.GuildMilitary {
		n += 2
	}
	l = len(m.ToTarget)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	if m.ToTargetBase {
		n += 2
	}
	l = len(m.FromTarget)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	return n
}

func (m *S2CRequestMilitaryPushProto) Size() (n int) {
	var l int
	_ = l
	if m.MainMilitary {
		n += 2
	}
	if m.GuildMilitary {
		n += 2
	}
	l = len(m.ToTarget)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	if m.ToTargetBase {
		n += 2
	}
	l = len(m.FromTarget)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	return n
}

func (m *S2CUpdateMilitaryInfoProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	if m.Region {
		n += 2
	}
	if m.Ma {
		n += 2
	}
	return n
}

func (m *S2CRemoveMilitaryInfoProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	if m.Region {
		n += 2
	}
	if m.Ma {
		n += 2
	}
	return n
}

func (m *S2CUpdateSelfMilitaryInfoProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	if m.TroopIndex != 0 {
		n += 1 + sovRegion(uint64(m.TroopIndex))
	}
	l = len(m.TroopId)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	return n
}

func (m *S2CRemoveSelfMilitaryInfoProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	return n
}

func (m *S2CNpcBaseInfoProto) Size() (n int) {
	var l int
	_ = l
	if m.MapId != 0 {
		n += 1 + sovRegion(uint64(m.MapId))
	}
	if len(m.NpcId) > 0 {
		for _, b := range m.NpcId {
			l = len(b)
			n += 1 + l + sovRegion(uint64(l))
		}
	}
	if len(m.BaseX) > 0 {
		for _, e := range m.BaseX {
			n += 1 + sovRegion(uint64(e))
		}
	}
	if len(m.BaseY) > 0 {
		for _, e := range m.BaseY {
			n += 1 + sovRegion(uint64(e))
		}
	}
	if len(m.DataId) > 0 {
		for _, e := range m.DataId {
			n += 1 + sovRegion(uint64(e))
		}
	}
	return n
}

func (m *C2SCreateBaseProto) Size() (n int) {
	var l int
	_ = l
	if m.MapId != 0 {
		n += 1 + sovRegion(uint64(m.MapId))
	}
	if m.NewX != 0 {
		n += 1 + sovRegion(uint64(m.NewX))
	}
	if m.NewY != 0 {
		n += 1 + sovRegion(uint64(m.NewY))
	}
	return n
}

func (m *S2CCreateBaseProto) Size() (n int) {
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovRegion(uint64(m.Level))
	}
	if m.MapId != 0 {
		n += 1 + sovRegion(uint64(m.MapId))
	}
	if m.NewX != 0 {
		n += 1 + sovRegion(uint64(m.NewX))
	}
	if m.NewY != 0 {
		n += 1 + sovRegion(uint64(m.NewY))
	}
	if m.Prosperity != 0 {
		n += 1 + sovRegion(uint64(m.Prosperity))
	}
	return n
}

func (m *C2SFastMoveBaseProto) Size() (n int) {
	var l int
	_ = l
	if m.NewX != 0 {
		n += 1 + sovRegion(uint64(m.NewX))
	}
	if m.NewY != 0 {
		n += 1 + sovRegion(uint64(m.NewY))
	}
	if m.MapId != 0 {
		n += 1 + sovRegion(uint64(m.MapId))
	}
	if m.GoodsId != 0 {
		n += 1 + sovRegion(uint64(m.GoodsId))
	}
	if m.IsTent {
		n += 2
	}
	if m.Free {
		n += 2
	}
	return n
}

func (m *S2CFastMoveBaseProto) Size() (n int) {
	var l int
	_ = l
	if m.NewX != 0 {
		n += 1 + sovRegion(uint64(m.NewX))
	}
	if m.NewY != 0 {
		n += 1 + sovRegion(uint64(m.NewY))
	}
	if m.MapId != 0 {
		n += 1 + sovRegion(uint64(m.MapId))
	}
	if m.IsTent {
		n += 2
	}
	return n
}

func (m *C2SInvasionProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	if m.TroopIndex != 0 {
		n += 1 + sovRegion(uint64(m.TroopIndex))
	}
	if m.TargetLevel != 0 {
		n += 1 + sovRegion(uint64(m.TargetLevel))
	}
	if m.GoodsId != 0 {
		n += 1 + sovRegion(uint64(m.GoodsId))
	}
	if m.AutoBuy {
		n += 2
	}
	if m.Operate != 0 {
		n += 1 + sovRegion(uint64(m.Operate))
	}
	if m.MultiLevelMonsterCount != 0 {
		n += 1 + sovRegion(uint64(m.MultiLevelMonsterCount))
	}
	return n
}

func (m *S2CInvasionProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	if m.TroopIndex != 0 {
		n += 1 + sovRegion(uint64(m.TroopIndex))
	}
	return n
}

func (m *S2CUpdateSelfTroopsProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Id) > 0 {
		for _, e := range m.Id {
			n += 1 + sovRegion(uint64(e))
		}
	}
	if len(m.Soldier) > 0 {
		for _, e := range m.Soldier {
			n += 1 + sovRegion(uint64(e))
		}
	}
	if len(m.FightAmount) > 0 {
		for _, e := range m.FightAmount {
			n += 1 + sovRegion(uint64(e))
		}
	}
	if m.WoundedSoldier != 0 {
		n += 1 + sovRegion(uint64(m.WoundedSoldier))
	}
	if m.RemoveOutside {
		n += 2
	}
	if m.TroopIndex != 0 {
		n += 1 + sovRegion(uint64(m.TroopIndex))
	}
	return n
}

func (m *S2CUpdateSelfTroopsOutsideProto) Size() (n int) {
	var l int
	_ = l
	if m.TroopIndex != 0 {
		n += 1 + sovRegion(uint64(m.TroopIndex))
	}
	if m.Outside {
		n += 2
	}
	return n
}

func (m *C2SCancelInvasionProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	return n
}

func (m *S2CCancelInvasionProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	return n
}

func (m *C2SRepatriateProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	if m.IsTent {
		n += 2
	}
	return n
}

func (m *S2CRepatriateProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	if m.IsTent {
		n += 2
	}
	return n
}

func (m *C2SBaozRepatriateProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.BaseId)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	l = len(m.TroopId)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	return n
}

func (m *S2CBaozRepatriateProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.BaseId)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	l = len(m.TroopId)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	return n
}

func (m *C2SSpeedUpProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	if m.GoodsId != 0 {
		n += 1 + sovRegion(uint64(m.GoodsId))
	}
	if m.Money {
		n += 2
	}
	l = len(m.OtherId)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	return n
}

func (m *S2CSpeedUpProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	return n
}

func (m *C2SExpelProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	if m.Mapid != 0 {
		n += 1 + sovRegion(uint64(m.Mapid))
	}
	if m.TroopIndex != 0 {
		n += 1 + sovRegion(uint64(m.TroopIndex))
	}
	return n
}

func (m *S2CExpelProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	if m.Cooldown != 0 {
		n += 1 + sovRegion(uint64(m.Cooldown))
	}
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	return n
}

func (m *C2SFavoritePosProto) Size() (n int) {
	var l int
	_ = l
	if m.Add {
		n += 2
	}
	if m.Id != 0 {
		n += 1 + sovRegion(uint64(m.Id))
	}
	if m.PosX != 0 {
		n += 1 + sovRegion(uint64(m.PosX))
	}
	if m.PosY != 0 {
		n += 1 + sovRegion(uint64(m.PosY))
	}
	return n
}

func (m *S2CFavoritePosProto) Size() (n int) {
	var l int
	_ = l
	if m.Add {
		n += 2
	}
	if m.Id != 0 {
		n += 1 + sovRegion(uint64(m.Id))
	}
	if m.PosX != 0 {
		n += 1 + sovRegion(uint64(m.PosX))
	}
	if m.PosY != 0 {
		n += 1 + sovRegion(uint64(m.PosY))
	}
	return n
}

func (m *S2CFavoritePosListProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	return n
}

func (m *C2SGetPrevInvestigateProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.HeroId)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	return n
}

func (m *S2CGetPrevInvestigateProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.HeroId)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	l = len(m.MailId)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	if m.ExpireTime != 0 {
		n += 1 + sovRegion(uint64(m.ExpireTime))
	}
	return n
}

func (m *C2SInvestigateProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.HeroId)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	if m.Cost {
		n += 2
	}
	return n
}

func (m *S2CInvestigateProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.HeroId)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	if m.NextInvestigateTime != 0 {
		n += 1 + sovRegion(uint64(m.NextInvestigateTime))
	}
	return n
}

func (m *C2SInvestigateInvadeProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.HeroId)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	return n
}

func (m *S2CInvestigateInvadeProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	return n
}

func (m *S2CUpdateMultiLevelNpcPassLevelProto) Size() (n int) {
	var l int
	_ = l
	if m.NpcType != 0 {
		n += 1 + sovRegion(uint64(m.NpcType))
	}
	if m.Level != 0 {
		n += 1 + sovRegion(uint64(m.Level))
	}
	return n
}

func (m *S2CUpdateMultiLevelNpcHateProto) Size() (n int) {
	var l int
	_ = l
	if m.NpcType != 0 {
		n += 1 + sovRegion(uint64(m.NpcType))
	}
	if m.Hate != 0 {
		n += 1 + sovRegion(uint64(m.Hate))
	}
	return n
}

func (m *S2CUpdateMultiLevelNpcTimesProto) Size() (n int) {
	var l int
	_ = l
	if m.StartRecoveyTime != 0 {
		n += 1 + sovRegion(uint64(m.StartRecoveyTime))
	}
	if m.Times != nil {
		l = m.Times.Size()
		n += 1 + l + sovRegion(uint64(l))
	}
	return n
}

func (m *C2SUseMultiLevelNpcTimesGoodsProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovRegion(uint64(m.Id))
	}
	if m.Buy {
		n += 2
	}
	return n
}

func (m *S2CUseMultiLevelNpcTimesGoodsProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovRegion(uint64(m.Id))
	}
	if m.Buy {
		n += 2
	}
	return n
}

func (m *S2CUpdateInvaseHeroTimesProto) Size() (n int) {
	var l int
	_ = l
	if m.StartRecoveyTime != 0 {
		n += 1 + sovRegion(uint64(m.StartRecoveyTime))
	}
	if m.Times != nil {
		l = m.Times.Size()
		n += 1 + l + sovRegion(uint64(l))
	}
	return n
}

func (m *S2CUpdateJunTuanNpcTimesProto) Size() (n int) {
	var l int
	_ = l
	if m.StartRecoveyTime != 0 {
		n += 1 + sovRegion(uint64(m.StartRecoveyTime))
	}
	if m.Times != nil {
		l = m.Times.Size()
		n += 1 + l + sovRegion(uint64(l))
	}
	return n
}

func (m *C2SUseInvaseHeroTimesGoodsProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovRegion(uint64(m.Id))
	}
	if m.Buy {
		n += 2
	}
	return n
}

func (m *S2CUseInvaseHeroTimesGoodsProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovRegion(uint64(m.Id))
	}
	if m.Buy {
		n += 2
	}
	return n
}

func (m *C2SCalcMoveSpeedProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	return n
}

func (m *S2CCalcMoveSpeedProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	if m.Speed != 0 {
		n += 1 + sovRegion(uint64(m.Speed))
	}
	return n
}

func (m *S2CListEnemyPosProto) Size() (n int) {
	var l int
	_ = l
	if len(m.PosX) > 0 {
		for _, e := range m.PosX {
			n += 1 + sovRegion(uint64(e))
		}
	}
	if len(m.PosY) > 0 {
		for _, e := range m.PosY {
			n += 1 + sovRegion(uint64(e))
		}
	}
	return n
}

func (m *C2SSearchBaozNpcProto) Size() (n int) {
	var l int
	_ = l
	if m.DataId != 0 {
		n += 1 + sovRegion(uint64(m.DataId))
	}
	return n
}

func (m *S2CSearchBaozNpcProto) Size() (n int) {
	var l int
	_ = l
	if m.DataId != 0 {
		n += 1 + sovRegion(uint64(m.DataId))
	}
	if len(m.BaseId) > 0 {
		for _, b := range m.BaseId {
			l = len(b)
			n += 1 + l + sovRegion(uint64(l))
		}
	}
	if len(m.BaseX) > 0 {
		for _, e := range m.BaseX {
			n += 1 + sovRegion(uint64(e))
		}
	}
	if len(m.BaseY) > 0 {
		for _, e := range m.BaseY {
			n += 1 + sovRegion(uint64(e))
		}
	}
	return n
}

func (m *S2CHomeAstDefendingInfoProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Heros) > 0 {
		for _, e := range m.Heros {
			l = e.Size()
			n += 1 + l + sovRegion(uint64(l))
		}
	}
	if len(m.Logs) > 0 {
		for _, e := range m.Logs {
			l = e.Size()
			n += 1 + l + sovRegion(uint64(l))
		}
	}
	return n
}

func (m *C2SCreateAssemblyProto) Size() (n int) {
	var l int
	_ = l
	if m.TroopIndex != 0 {
		n += 1 + sovRegion(uint64(m.TroopIndex))
	}
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	if m.TargetLevel != 0 {
		n += 1 + sovRegion(uint64(m.TargetLevel))
	}
	if m.WaitIndex != 0 {
		n += 1 + sovRegion(uint64(m.WaitIndex))
	}
	if m.GoodsId != 0 {
		n += 1 + sovRegion(uint64(m.GoodsId))
	}
	if m.AutoBuy {
		n += 2
	}
	return n
}

func (m *S2CCreateAssemblyProto) Size() (n int) {
	var l int
	_ = l
	if m.TroopIndex != 0 {
		n += 1 + sovRegion(uint64(m.TroopIndex))
	}
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	return n
}

func (m *C2SShowAssemblyProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovRegion(uint64(m.Version))
	}
	return n
}

func (m *S2CShowAssemblyProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovRegion(uint64(m.Version))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	if m.NotExist {
		n += 2
	}
	return n
}

func (m *S2CShowAssemblyChangedProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	return n
}

func (m *C2SJoinAssemblyProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	if m.TroopIndex != 0 {
		n += 1 + sovRegion(uint64(m.TroopIndex))
	}
	if m.GoodsId != 0 {
		n += 1 + sovRegion(uint64(m.GoodsId))
	}
	if m.AutoBuy {
		n += 2
	}
	return n
}

func (m *S2CJoinAssemblyProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	if m.TroopIndex != 0 {
		n += 1 + sovRegion(uint64(m.TroopIndex))
	}
	return n
}

func (m *C2SCreateGuildWorkshopProto) Size() (n int) {
	var l int
	_ = l
	if m.PosX != 0 {
		n += 1 + sovRegion(uint64(m.PosX))
	}
	if m.PosY != 0 {
		n += 1 + sovRegion(uint64(m.PosY))
	}
	return n
}

func (m *S2CCreateGuildWorkshopProto) Size() (n int) {
	var l int
	_ = l
	if m.PosX != 0 {
		n += 1 + sovRegion(uint64(m.PosX))
	}
	if m.PosY != 0 {
		n += 1 + sovRegion(uint64(m.PosY))
	}
	return n
}

func (m *C2SShowGuildWorkshopProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.BaseId)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	return n
}

func (m *S2CShowGuildWorkshopProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.BaseId)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	if m.GuildId != 0 {
		n += 1 + sovRegion(uint64(m.GuildId))
	}
	if m.Output != 0 {
		n += 1 + sovRegion(uint64(m.Output))
	}
	if m.TotalOutput != 0 {
		n += 1 + sovRegion(uint64(m.TotalOutput))
	}
	if m.PrizeCount != 0 {
		n += 1 + sovRegion(uint64(m.PrizeCount))
	}
	if m.BeenHurtTimes != 0 {
		n += 1 + sovRegion(uint64(m.BeenHurtTimes))
	}
	return n
}

func (m *C2SHurtGuildWorkshopProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.BaseId)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	return n
}

func (m *S2CHurtGuildWorkshopProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.BaseId)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	if m.NextTime != 0 {
		n += 1 + sovRegion(uint64(m.NextTime))
	}
	if m.Times != 0 {
		n += 1 + sovRegion(uint64(m.Times))
	}
	return n
}

func (m *S2CUpdateGuildWorkshopPrizeCountProto) Size() (n int) {
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovRegion(uint64(m.Count))
	}
	return n
}

func (m *S2CUpdateHeroBuildWorkshopTimesProto) Size() (n int) {
	var l int
	_ = l
	if m.Times != 0 {
		n += 1 + sovRegion(uint64(m.Times))
	}
	return n
}

func (m *S2CUpdateHeroOutputWorkshopTimesProto) Size() (n int) {
	var l int
	_ = l
	if m.StartRecoveyTime != 0 {
		n += 1 + sovRegion(uint64(m.StartRecoveyTime))
	}
	return n
}

func (m *C2SCatchGuildWorkshopLogsProto) Size() (n int) {
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovRegion(uint64(m.Version))
	}
	return n
}

func (m *S2CCatchGuildWorkshopLogsProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Logs) > 0 {
		for _, e := range m.Logs {
			l = e.Size()
			n += 1 + l + sovRegion(uint64(l))
		}
	}
	if m.Version != 0 {
		n += 1 + sovRegion(uint64(m.Version))
	}
	return n
}

func (m *S2CGetSelfBaozProto) Size() (n int) {
	var l int
	_ = l
	if m.Exist {
		n += 2
	}
	l = len(m.BaseId)
	if l > 0 {
		n += 1 + l + sovRegion(uint64(l))
	}
	if m.BaseX != 0 {
		n += 1 + sovRegion(uint64(m.BaseX))
	}
	if m.BaseY != 0 {
		n += 1 + sovRegion(uint64(m.BaseY))
	}
	if m.ExpireTime != 0 {
		n += 1 + sovRegion(uint64(m.ExpireTime))
	}
	return n
}

func sovRegion(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRegion(x uint64) (n int) {
	return sovRegion(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *S2CUpdateMapRadiusProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateMapRadiusProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateMapRadiusProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CenterX", wireType)
			}
			m.CenterX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CenterX |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CenterY", wireType)
			}
			m.CenterY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CenterY |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Radius", wireType)
			}
			m.Radius = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Radius |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SUpdateSelfViewProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SUpdateSelfViewProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SUpdateSelfViewProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosX", wireType)
			}
			m.PosX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosX |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosY", wireType)
			}
			m.PosY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosY |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LenX", wireType)
			}
			m.LenX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LenX |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LenY", wireType)
			}
			m.LenY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LenY |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateSelfViewProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateSelfViewProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateSelfViewProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinX", wireType)
			}
			m.MinX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinX |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinY", wireType)
			}
			m.MinY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinY |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxX", wireType)
			}
			m.MaxX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxX |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxY", wireType)
			}
			m.MaxY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxY |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CAddBaseUnitProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CAddBaseUnitProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CAddBaseUnitProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddType", wireType)
			}
			m.AddType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateNpcBaseInfoProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateNpcBaseInfoProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateNpcBaseInfoProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NpcId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NpcId = append(m.NpcId[:0], dAtA[iNdEx:postIndex]...)
			if m.NpcId == nil {
				m.NpcId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseX", wireType)
			}
			m.BaseX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaseX |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseY", wireType)
			}
			m.BaseY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaseY |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataId", wireType)
			}
			m.DataId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataType", wireType)
			}
			m.DataType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildId", wireType)
			}
			m.GuildId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuildId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MianDisappearTime", wireType)
			}
			m.MianDisappearTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MianDisappearTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prosperity", wireType)
			}
			m.Prosperity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Prosperity |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasDefenser", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasDefenser = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			m.Progress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Progress |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalProgress", wireType)
			}
			m.TotalProgress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalProgress |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildFlagName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildFlagName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			m.Country = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Country |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgressType", wireType)
			}
			m.ProgressType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProgressType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hero", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hero = append(m.Hero[:0], dAtA[iNdEx:postIndex]...)
			if m.Hero == nil {
				m.Hero = []byte{}
			}
			iNdEx = postIndex
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroEndTime", wireType)
			}
			m.HeroEndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroEndTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroType", wireType)
			}
			m.HeroType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateBaseProgressProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateBaseProgressProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateBaseProgressProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			m.Progress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Progress |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalProgress", wireType)
			}
			m.TotalProgress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalProgress |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProgressType", wireType)
			}
			m.ProgressType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProgressType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CRemoveBaseUnitProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CRemoveBaseUnitProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CRemoveBaseUnitProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveType", wireType)
			}
			m.RemoveType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemoveType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeroId = append(m.HeroId[:0], dAtA[iNdEx:postIndex]...)
			if m.HeroId == nil {
				m.HeroId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SPreInvasionTargetProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SPreInvasionTargetProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SPreInvasionTargetProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = append(m.Target[:0], dAtA[iNdEx:postIndex]...)
			if m.Target == nil {
				m.Target = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CPreInvasionTargetProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CPreInvasionTargetProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CPreInvasionTargetProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Head = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTowerFloor", wireType)
			}
			m.MaxTowerFloor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxTowerFloor |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JunXianLevel", wireType)
			}
			m.JunXianLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JunXianLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SWatchBaseUnitProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SWatchBaseUnitProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SWatchBaseUnitProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = append(m.Target[:0], dAtA[iNdEx:postIndex]...)
			if m.Target == nil {
				m.Target = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CWatchBaseUnitProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CWatchBaseUnitProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CWatchBaseUnitProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = append(m.Target[:0], dAtA[iNdEx:postIndex]...)
			if m.Target == nil {
				m.Target = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FightAmount", wireType)
			}
			m.FightAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FightAmount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prosprity", wireType)
			}
			m.Prosprity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Prosprity |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProsprityCapcity", wireType)
			}
			m.ProsprityCapcity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProsprityCapcity |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Head = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTowerFloor", wireType)
			}
			m.MaxTowerFloor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxTowerFloor |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JunXianLevel", wireType)
			}
			m.JunXianLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JunXianLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Soldier", wireType)
			}
			m.Soldier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Soldier |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRegion
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CaptainSoldier = append(m.CaptainSoldier, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRegion
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRegion
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRegion
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CaptainSoldier = append(m.CaptainSoldier, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainSoldier", wireType)
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hero", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hero = append(m.Hero[:0], dAtA[iNdEx:postIndex]...)
			if m.Hero == nil {
				m.Hero = []byte{}
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroEndTime", wireType)
			}
			m.HeroEndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroEndTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroType", wireType)
			}
			m.HeroType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateWatchBaseProsperityProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateWatchBaseProsperityProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateWatchBaseProsperityProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = append(m.Target[:0], dAtA[iNdEx:postIndex]...)
			if m.Target == nil {
				m.Target = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prosprity", wireType)
			}
			m.Prosprity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Prosprity |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProsprityCapcity", wireType)
			}
			m.ProsprityCapcity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProsprityCapcity |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateStopLostProsperityProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateStopLostProsperityProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateStopLostProsperityProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = append(m.Target[:0], dAtA[iNdEx:postIndex]...)
			if m.Target == nil {
				m.Target = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CAddTroopUnitProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CAddTroopUnitProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CAddTroopUnitProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddType", wireType)
			}
			m.AddType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CRemoveTroopUnitProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CRemoveTroopUnitProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CRemoveTroopUnitProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveType", wireType)
			}
			m.RemoveType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemoveType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TroopId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TroopId = append(m.TroopId[:0], dAtA[iNdEx:postIndex]...)
			if m.TroopId == nil {
				m.TroopId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SRequestTroopUnitProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SRequestTroopUnitProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SRequestTroopUnitProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TroopId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TroopId = append(m.TroopId[:0], dAtA[iNdEx:postIndex]...)
			if m.TroopId == nil {
				m.TroopId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CRequestTroopUnitProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CRequestTroopUnitProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CRequestTroopUnitProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CAddRuinsBaseProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CAddRuinsBaseProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CAddRuinsBaseProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosX", wireType)
			}
			m.PosX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosX |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosY", wireType)
			}
			m.PosY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosY |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CRemoveRuinsBaseProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CRemoveRuinsBaseProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CRemoveRuinsBaseProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosX", wireType)
			}
			m.PosX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosX |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosY", wireType)
			}
			m.PosY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosY |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SRequestRuinsBaseProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SRequestRuinsBaseProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SRequestRuinsBaseProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealmId", wireType)
			}
			m.RealmId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RealmId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosX", wireType)
			}
			m.PosX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosX |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosY", wireType)
			}
			m.PosY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosY |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CRequestRuinsBaseProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CRequestRuinsBaseProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CRequestRuinsBaseProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealmId", wireType)
			}
			m.RealmId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RealmId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosX", wireType)
			}
			m.PosX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosX |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosY", wireType)
			}
			m.PosY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosY |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroBasic", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeroBasic = append(m.HeroBasic[:0], dAtA[iNdEx:postIndex]...)
			if m.HeroBasic == nil {
				m.HeroBasic = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateSelfMianDisappearTimeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateSelfMianDisappearTimeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateSelfMianDisappearTimeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MianDisappearTime", wireType)
			}
			m.MianDisappearTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MianDisappearTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MianStartTime", wireType)
			}
			m.MianStartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MianStartTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SUseMianGoodsProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SUseMianGoodsProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SUseMianGoodsProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Buy = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUseMianGoodsProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUseMianGoodsProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUseMianGoodsProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cooldown", wireType)
			}
			m.Cooldown = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cooldown |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateNewHeroMianDisappearTimeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateNewHeroMianDisappearTimeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateNewHeroMianDisappearTimeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisappearTime", wireType)
			}
			m.DisappearTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisappearTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSelfUpdateBaseLevelProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSelfUpdateBaseLevelProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSelfUpdateBaseLevelProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateWhiteFlagProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateWhiteFlagProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateWhiteFlagProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeroId = append(m.HeroId[:0], dAtA[iNdEx:postIndex]...)
			if m.HeroId == nil {
				m.HeroId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhiteFlagGuildId", wireType)
			}
			m.WhiteFlagGuildId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WhiteFlagGuildId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhiteFlagFlagName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WhiteFlagFlagName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhiteFlagDisappearTime", wireType)
			}
			m.WhiteFlagDisappearTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WhiteFlagDisappearTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SWhiteFlagDetailProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SWhiteFlagDetailProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SWhiteFlagDetailProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeroId = append(m.HeroId[:0], dAtA[iNdEx:postIndex]...)
			if m.HeroId == nil {
				m.HeroId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CWhiteFlagDetailProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CWhiteFlagDetailProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CWhiteFlagDetailProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeroId = append(m.HeroId[:0], dAtA[iNdEx:postIndex]...)
			if m.HeroId == nil {
				m.HeroId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhiteFlagHeroId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WhiteFlagHeroId = append(m.WhiteFlagHeroId[:0], dAtA[iNdEx:postIndex]...)
			if m.WhiteFlagHeroId == nil {
				m.WhiteFlagHeroId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhiteFlagHeroName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WhiteFlagHeroName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhiteFlagGuildId", wireType)
			}
			m.WhiteFlagGuildId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WhiteFlagGuildId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhiteFlagGuildName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WhiteFlagGuildName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhiteFlagDisappearTime", wireType)
			}
			m.WhiteFlagDisappearTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WhiteFlagDisappearTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhiteFlagCountry", wireType)
			}
			m.WhiteFlagCountry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WhiteFlagCountry |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSelfBaseDestroyProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSelfBaseDestroyProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSelfBaseDestroyProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsTent = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestroyType", wireType)
			}
			m.DestroyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestroyType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CProsperityBufProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CProsperityBufProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CProsperityBufProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CShowWordsProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CShowWordsProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CShowWordsProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseId = append(m.BaseId[:0], dAtA[iNdEx:postIndex]...)
			if m.BaseId == nil {
				m.BaseId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TroopId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TroopId = append(m.TroopId[:0], dAtA[iNdEx:postIndex]...)
			if m.TroopId == nil {
				m.TroopId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prosperity", wireType)
			}
			m.Prosperity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Prosperity |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gold", wireType)
			}
			m.Gold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gold |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Food", wireType)
			}
			m.Food = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Food |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wood", wireType)
			}
			m.Wood = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wood |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stone", wireType)
			}
			m.Stone = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stone |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jade", wireType)
			}
			m.Jade = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Jade |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JadeOre", wireType)
			}
			m.JadeOre = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JadeOre |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CGetBuyProsperityCostProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CGetBuyProsperityCostProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CGetBuyProsperityCostProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cost", wireType)
			}
			m.Cost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cost |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CBuyProsperityProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CBuyProsperityProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CBuyProsperityProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddProsperity", wireType)
			}
			m.AddProsperity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddProsperity |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSelfBeenAttackRobChangedProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSelfBeenAttackRobChangedProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSelfBeenAttackRobChangedProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeenAttack", wireType)
			}
			m.BeenAttack = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeenAttack |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeenRob", wireType)
			}
			m.BeenRob = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeenRob |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CGuildBeenAttackRobChangedProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CGuildBeenAttackRobChangedProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CGuildBeenAttackRobChangedProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SSwitchActionProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SSwitchActionProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SSwitchActionProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Open", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Open = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Condition", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Condition = append(m.Condition[:0], dAtA[iNdEx:postIndex]...)
			if m.Condition == nil {
				m.Condition = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSwitchActionProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSwitchActionProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSwitchActionProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Open", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Open = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SRequestMilitaryPushProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SRequestMilitaryPushProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SRequestMilitaryPushProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainMilitary", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MainMilitary = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildMilitary", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GuildMilitary = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToTarget", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToTarget = append(m.ToTarget[:0], dAtA[iNdEx:postIndex]...)
			if m.ToTarget == nil {
				m.ToTarget = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToTargetBase", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ToTargetBase = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromTarget", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromTarget = append(m.FromTarget[:0], dAtA[iNdEx:postIndex]...)
			if m.FromTarget == nil {
				m.FromTarget = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CRequestMilitaryPushProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CRequestMilitaryPushProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CRequestMilitaryPushProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainMilitary", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MainMilitary = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildMilitary", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GuildMilitary = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToTarget", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToTarget = append(m.ToTarget[:0], dAtA[iNdEx:postIndex]...)
			if m.ToTarget == nil {
				m.ToTarget = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToTargetBase", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ToTargetBase = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromTarget", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromTarget = append(m.FromTarget[:0], dAtA[iNdEx:postIndex]...)
			if m.FromTarget == nil {
				m.FromTarget = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateMilitaryInfoProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateMilitaryInfoProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateMilitaryInfoProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Region = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ma", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ma = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CRemoveMilitaryInfoProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CRemoveMilitaryInfoProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CRemoveMilitaryInfoProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Region = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ma", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ma = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateSelfMilitaryInfoProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateSelfMilitaryInfoProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateSelfMilitaryInfoProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TroopIndex", wireType)
			}
			m.TroopIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TroopIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TroopId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TroopId = append(m.TroopId[:0], dAtA[iNdEx:postIndex]...)
			if m.TroopId == nil {
				m.TroopId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CRemoveSelfMilitaryInfoProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CRemoveSelfMilitaryInfoProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CRemoveSelfMilitaryInfoProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CNpcBaseInfoProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CNpcBaseInfoProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CNpcBaseInfoProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NpcId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NpcId = append(m.NpcId, make([]byte, postIndex-iNdEx))
			copy(m.NpcId[len(m.NpcId)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRegion
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BaseX = append(m.BaseX, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRegion
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRegion
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRegion
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BaseX = append(m.BaseX, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseX", wireType)
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRegion
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BaseY = append(m.BaseY, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRegion
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRegion
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRegion
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BaseY = append(m.BaseY, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseY", wireType)
			}
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRegion
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DataId = append(m.DataId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRegion
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRegion
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRegion
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DataId = append(m.DataId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DataId", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SCreateBaseProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCreateBaseProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCreateBaseProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewX", wireType)
			}
			m.NewX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewX |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewY", wireType)
			}
			m.NewY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewY |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCreateBaseProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCreateBaseProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCreateBaseProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewX", wireType)
			}
			m.NewX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewX |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewY", wireType)
			}
			m.NewY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewY |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prosperity", wireType)
			}
			m.Prosperity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Prosperity |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SFastMoveBaseProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SFastMoveBaseProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SFastMoveBaseProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewX", wireType)
			}
			m.NewX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewX |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewY", wireType)
			}
			m.NewY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewY |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			m.GoodsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsTent = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Free", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Free = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CFastMoveBaseProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CFastMoveBaseProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CFastMoveBaseProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewX", wireType)
			}
			m.NewX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewX |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewY", wireType)
			}
			m.NewY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewY |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapId", wireType)
			}
			m.MapId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsTent = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SInvasionProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SInvasionProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SInvasionProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = append(m.Target[:0], dAtA[iNdEx:postIndex]...)
			if m.Target == nil {
				m.Target = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TroopIndex", wireType)
			}
			m.TroopIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TroopIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetLevel", wireType)
			}
			m.TargetLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			m.GoodsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoBuy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutoBuy = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operate", wireType)
			}
			m.Operate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Operate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiLevelMonsterCount", wireType)
			}
			m.MultiLevelMonsterCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MultiLevelMonsterCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CInvasionProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CInvasionProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CInvasionProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = append(m.Target[:0], dAtA[iNdEx:postIndex]...)
			if m.Target == nil {
				m.Target = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TroopIndex", wireType)
			}
			m.TroopIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TroopIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateSelfTroopsProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateSelfTroopsProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateSelfTroopsProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRegion
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRegion
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRegion
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRegion
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRegion
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Soldier = append(m.Soldier, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRegion
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRegion
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRegion
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Soldier = append(m.Soldier, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Soldier", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRegion
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.FightAmount = append(m.FightAmount, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRegion
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRegion
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRegion
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.FightAmount = append(m.FightAmount, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field FightAmount", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WoundedSoldier", wireType)
			}
			m.WoundedSoldier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WoundedSoldier |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveOutside", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RemoveOutside = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TroopIndex", wireType)
			}
			m.TroopIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TroopIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateSelfTroopsOutsideProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateSelfTroopsOutsideProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateSelfTroopsOutsideProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TroopIndex", wireType)
			}
			m.TroopIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TroopIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outside", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Outside = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SCancelInvasionProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCancelInvasionProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCancelInvasionProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCancelInvasionProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCancelInvasionProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCancelInvasionProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SRepatriateProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SRepatriateProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SRepatriateProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsTent = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CRepatriateProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CRepatriateProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CRepatriateProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsTent = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SBaozRepatriateProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SBaozRepatriateProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SBaozRepatriateProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseId = append(m.BaseId[:0], dAtA[iNdEx:postIndex]...)
			if m.BaseId == nil {
				m.BaseId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TroopId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TroopId = append(m.TroopId[:0], dAtA[iNdEx:postIndex]...)
			if m.TroopId == nil {
				m.TroopId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CBaozRepatriateProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CBaozRepatriateProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CBaozRepatriateProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseId = append(m.BaseId[:0], dAtA[iNdEx:postIndex]...)
			if m.BaseId == nil {
				m.BaseId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TroopId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TroopId = append(m.TroopId[:0], dAtA[iNdEx:postIndex]...)
			if m.TroopId == nil {
				m.TroopId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SSpeedUpProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SSpeedUpProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SSpeedUpProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			m.GoodsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Money", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Money = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OtherId = append(m.OtherId[:0], dAtA[iNdEx:postIndex]...)
			if m.OtherId == nil {
				m.OtherId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSpeedUpProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSpeedUpProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSpeedUpProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SExpelProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SExpelProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SExpelProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mapid", wireType)
			}
			m.Mapid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mapid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TroopIndex", wireType)
			}
			m.TroopIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TroopIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CExpelProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CExpelProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CExpelProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cooldown", wireType)
			}
			m.Cooldown = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cooldown |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SFavoritePosProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SFavoritePosProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SFavoritePosProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Add", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Add = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosX", wireType)
			}
			m.PosX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosX |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosY", wireType)
			}
			m.PosY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosY |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CFavoritePosProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CFavoritePosProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CFavoritePosProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Add", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Add = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosX", wireType)
			}
			m.PosX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosX |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosY", wireType)
			}
			m.PosY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosY |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CFavoritePosListProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CFavoritePosListProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CFavoritePosListProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SGetPrevInvestigateProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SGetPrevInvestigateProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SGetPrevInvestigateProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeroId = append(m.HeroId[:0], dAtA[iNdEx:postIndex]...)
			if m.HeroId == nil {
				m.HeroId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CGetPrevInvestigateProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CGetPrevInvestigateProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CGetPrevInvestigateProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeroId = append(m.HeroId[:0], dAtA[iNdEx:postIndex]...)
			if m.HeroId == nil {
				m.HeroId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MailId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MailId = append(m.MailId[:0], dAtA[iNdEx:postIndex]...)
			if m.MailId == nil {
				m.MailId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireTime", wireType)
			}
			m.ExpireTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SInvestigateProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SInvestigateProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SInvestigateProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeroId = append(m.HeroId[:0], dAtA[iNdEx:postIndex]...)
			if m.HeroId == nil {
				m.HeroId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cost", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Cost = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CInvestigateProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CInvestigateProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CInvestigateProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeroId = append(m.HeroId[:0], dAtA[iNdEx:postIndex]...)
			if m.HeroId == nil {
				m.HeroId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextInvestigateTime", wireType)
			}
			m.NextInvestigateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextInvestigateTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SInvestigateInvadeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SInvestigateInvadeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SInvestigateInvadeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeroId = append(m.HeroId[:0], dAtA[iNdEx:postIndex]...)
			if m.HeroId == nil {
				m.HeroId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CInvestigateInvadeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CInvestigateInvadeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CInvestigateInvadeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = append(m.Target[:0], dAtA[iNdEx:postIndex]...)
			if m.Target == nil {
				m.Target = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateMultiLevelNpcPassLevelProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateMultiLevelNpcPassLevelProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateMultiLevelNpcPassLevelProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NpcType", wireType)
			}
			m.NpcType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NpcType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateMultiLevelNpcHateProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateMultiLevelNpcHateProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateMultiLevelNpcHateProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NpcType", wireType)
			}
			m.NpcType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NpcType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hate", wireType)
			}
			m.Hate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateMultiLevelNpcTimesProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateMultiLevelNpcTimesProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateMultiLevelNpcTimesProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartRecoveyTime", wireType)
			}
			m.StartRecoveyTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartRecoveyTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Times", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Times == nil {
				m.Times = &proto1.RecoverableTimesWithExtraTimesProto{}
			}
			if err := m.Times.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SUseMultiLevelNpcTimesGoodsProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SUseMultiLevelNpcTimesGoodsProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SUseMultiLevelNpcTimesGoodsProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Buy = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUseMultiLevelNpcTimesGoodsProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUseMultiLevelNpcTimesGoodsProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUseMultiLevelNpcTimesGoodsProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Buy = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateInvaseHeroTimesProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateInvaseHeroTimesProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateInvaseHeroTimesProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartRecoveyTime", wireType)
			}
			m.StartRecoveyTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartRecoveyTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Times", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Times == nil {
				m.Times = &proto1.RecoverableTimesWithExtraTimesProto{}
			}
			if err := m.Times.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateJunTuanNpcTimesProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateJunTuanNpcTimesProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateJunTuanNpcTimesProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartRecoveyTime", wireType)
			}
			m.StartRecoveyTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartRecoveyTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Times", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Times == nil {
				m.Times = &proto1.RecoverableTimesWithExtraTimesProto{}
			}
			if err := m.Times.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SUseInvaseHeroTimesGoodsProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SUseInvaseHeroTimesGoodsProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SUseInvaseHeroTimesGoodsProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Buy = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUseInvaseHeroTimesGoodsProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUseInvaseHeroTimesGoodsProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUseInvaseHeroTimesGoodsProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Buy = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SCalcMoveSpeedProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCalcMoveSpeedProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCalcMoveSpeedProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCalcMoveSpeedProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCalcMoveSpeedProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCalcMoveSpeedProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Speed", wireType)
			}
			m.Speed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Speed |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CListEnemyPosProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CListEnemyPosProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CListEnemyPosProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRegion
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PosX = append(m.PosX, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRegion
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRegion
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRegion
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PosX = append(m.PosX, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PosX", wireType)
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRegion
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PosY = append(m.PosY, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRegion
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRegion
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRegion
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PosY = append(m.PosY, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PosY", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SSearchBaozNpcProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SSearchBaozNpcProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SSearchBaozNpcProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataId", wireType)
			}
			m.DataId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CSearchBaozNpcProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSearchBaozNpcProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSearchBaozNpcProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataId", wireType)
			}
			m.DataId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseId = append(m.BaseId, make([]byte, postIndex-iNdEx))
			copy(m.BaseId[len(m.BaseId)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRegion
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BaseX = append(m.BaseX, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRegion
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRegion
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRegion
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BaseX = append(m.BaseX, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseX", wireType)
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRegion
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BaseY = append(m.BaseY, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRegion
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRegion
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRegion
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BaseY = append(m.BaseY, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseY", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CHomeAstDefendingInfoProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CHomeAstDefendingInfoProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CHomeAstDefendingInfoProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Heros", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Heros = append(m.Heros, &proto2.HeroBasicProto{})
			if err := m.Heros[len(m.Heros)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logs = append(m.Logs, &proto9.AstDefendLogProto{})
			if err := m.Logs[len(m.Logs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SCreateAssemblyProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCreateAssemblyProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCreateAssemblyProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TroopIndex", wireType)
			}
			m.TroopIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TroopIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = append(m.Target[:0], dAtA[iNdEx:postIndex]...)
			if m.Target == nil {
				m.Target = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetLevel", wireType)
			}
			m.TargetLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaitIndex", wireType)
			}
			m.WaitIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WaitIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			m.GoodsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoBuy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutoBuy = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCreateAssemblyProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCreateAssemblyProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCreateAssemblyProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TroopIndex", wireType)
			}
			m.TroopIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TroopIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = append(m.Target[:0], dAtA[iNdEx:postIndex]...)
			if m.Target == nil {
				m.Target = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SShowAssemblyProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SShowAssemblyProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SShowAssemblyProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CShowAssemblyProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CShowAssemblyProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CShowAssemblyProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotExist", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NotExist = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CShowAssemblyChangedProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CShowAssemblyChangedProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CShowAssemblyChangedProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SJoinAssemblyProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SJoinAssemblyProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SJoinAssemblyProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TroopIndex", wireType)
			}
			m.TroopIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TroopIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			m.GoodsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoBuy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutoBuy = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CJoinAssemblyProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CJoinAssemblyProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CJoinAssemblyProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TroopIndex", wireType)
			}
			m.TroopIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TroopIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SCreateGuildWorkshopProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCreateGuildWorkshopProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCreateGuildWorkshopProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosX", wireType)
			}
			m.PosX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosX |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosY", wireType)
			}
			m.PosY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosY |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCreateGuildWorkshopProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCreateGuildWorkshopProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCreateGuildWorkshopProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosX", wireType)
			}
			m.PosX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosX |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosY", wireType)
			}
			m.PosY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosY |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SShowGuildWorkshopProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SShowGuildWorkshopProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SShowGuildWorkshopProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseId = append(m.BaseId[:0], dAtA[iNdEx:postIndex]...)
			if m.BaseId == nil {
				m.BaseId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CShowGuildWorkshopProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CShowGuildWorkshopProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CShowGuildWorkshopProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseId = append(m.BaseId[:0], dAtA[iNdEx:postIndex]...)
			if m.BaseId == nil {
				m.BaseId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildId", wireType)
			}
			m.GuildId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuildId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			m.Output = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Output |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalOutput", wireType)
			}
			m.TotalOutput = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalOutput |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrizeCount", wireType)
			}
			m.PrizeCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrizeCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeenHurtTimes", wireType)
			}
			m.BeenHurtTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeenHurtTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SHurtGuildWorkshopProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SHurtGuildWorkshopProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SHurtGuildWorkshopProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseId = append(m.BaseId[:0], dAtA[iNdEx:postIndex]...)
			if m.BaseId == nil {
				m.BaseId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CHurtGuildWorkshopProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CHurtGuildWorkshopProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CHurtGuildWorkshopProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseId = append(m.BaseId[:0], dAtA[iNdEx:postIndex]...)
			if m.BaseId == nil {
				m.BaseId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextTime", wireType)
			}
			m.NextTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Times", wireType)
			}
			m.Times = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Times |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateGuildWorkshopPrizeCountProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateGuildWorkshopPrizeCountProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateGuildWorkshopPrizeCountProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateHeroBuildWorkshopTimesProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateHeroBuildWorkshopTimesProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateHeroBuildWorkshopTimesProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Times", wireType)
			}
			m.Times = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Times |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpdateHeroOutputWorkshopTimesProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpdateHeroOutputWorkshopTimesProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpdateHeroOutputWorkshopTimesProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartRecoveyTime", wireType)
			}
			m.StartRecoveyTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartRecoveyTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SCatchGuildWorkshopLogsProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCatchGuildWorkshopLogsProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCatchGuildWorkshopLogsProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCatchGuildWorkshopLogsProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCatchGuildWorkshopLogsProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCatchGuildWorkshopLogsProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logs = append(m.Logs, &proto8.GuildWorkshopLogProto{})
			if err := m.Logs[len(m.Logs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CGetSelfBaozProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CGetSelfBaozProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CGetSelfBaozProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exist", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Exist = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRegion
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseId = append(m.BaseId[:0], dAtA[iNdEx:postIndex]...)
			if m.BaseId == nil {
				m.BaseId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseX", wireType)
			}
			m.BaseX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaseX |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseY", wireType)
			}
			m.BaseY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaseY |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireTime", wireType)
			}
			m.ExpireTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRegion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRegion(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRegion
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRegion
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRegion
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRegion
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRegion(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRegion = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRegion   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/gen/pb/region/region.proto", fileDescriptorRegion)
}

var fileDescriptorRegion = []byte{
	// 3396 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x3a, 0xcd, 0x6f, 0x1b, 0xc7,
	0xf5, 0x59, 0x52, 0x94, 0xa8, 0xd1, 0xa7, 0x57, 0xb6, 0x45, 0xc9, 0x8e, 0x3f, 0x26, 0x71, 0x62,
	0xc4, 0x89, 0x95, 0x1f, 0x93, 0xfc, 0x7e, 0x49, 0xf0, 0x4b, 0x11, 0x8b, 0xb6, 0x25, 0xa5, 0x76,
	0x2c, 0x90, 0x72, 0x2c, 0x15, 0x45, 0x89, 0x11, 0x77, 0x44, 0x6e, 0xc2, 0xdd, 0xd9, 0xec, 0x0e,
	0x45, 0xd1, 0x40, 0xda, 0x5b, 0x2f, 0x3d, 0x14, 0x68, 0x8a, 0xa2, 0xb7, 0xfe, 0x3b, 0xed, 0xa1,
	0x40, 0x80, 0x9e, 0x8a, 0x5e, 0x8a, 0xb4, 0x87, 0xfe, 0x0b, 0xbd, 0x15, 0xef, 0xcd, 0xcc, 0xee,
	0x2c, 0x45, 0x7d, 0xda, 0x39, 0xf4, 0xc4, 0x9d, 0x37, 0x6f, 0xde, 0xd7, 0xcc, 0xbc, 0xaf, 0x21,
	0x79, 0xbf, 0xed, 0xcb, 0x4e, 0x6f, 0xf7, 0x6e, 0x4b, 0x04, 0x2b, 0x5d, 0xbf, 0xdd, 0x91, 0x11,
	0xeb, 0xaf, 0x04, 0xac, 0xcb, 0xff, 0x6f, 0xa5, 0xcd, 0xc3, 0x95, 0x68, 0x77, 0x25, 0xe6, 0x6d,
	0x5f, 0x84, 0xfa, 0xe7, 0x6e, 0x14, 0x0b, 0x29, 0xdc, 0x12, 0xfe, 0x2c, 0x1f, 0xb3, 0x38, 0xda,
	0x5d, 0x49, 0x3a, 0x2c, 0xe6, 0x5e, 0x13, 0x51, 0x57, 0x76, 0x59, 0xc2, 0xd5, 0xe2, 0xe5, 0x0f,
	0x4e, 0xbf, 0xaa, 0xdd, 0xf3, 0xbb, 0x9e, 0x5e, 0xf6, 0xbf, 0xa7, 0x5f, 0x66, 0xcb, 0xba, 0xfc,
	0xe1, 0xe9, 0xd7, 0x25, 0x21, 0x8b, 0x92, 0x8e, 0x90, 0x6a, 0x25, 0x6d, 0x93, 0xc5, 0x46, 0xb5,
	0xf6, 0x34, 0xf2, 0x98, 0xe4, 0x8f, 0x59, 0x54, 0x67, 0x9e, 0xdf, 0x4b, 0x36, 0xd1, 0x00, 0x4b,
	0xa4, 0xdc, 0xe2, 0xa1, 0xe4, 0x71, 0xf3, 0xa0, 0xe2, 0xdc, 0x70, 0x6e, 0x97, 0xea, 0x13, 0x6a,
	0xbc, 0x6d, 0x4d, 0x0d, 0x2a, 0x05, 0x7b, 0x6a, 0xc7, 0xbd, 0x4c, 0xc6, 0x63, 0x24, 0x52, 0x29,
	0xe2, 0x84, 0x1e, 0xd1, 0x2e, 0xb9, 0x5c, 0xab, 0x36, 0x14, 0xa3, 0x06, 0xef, 0xee, 0x7d, 0xe1,
	0xf3, 0xbe, 0xe2, 0xb3, 0x40, 0x4a, 0x91, 0x48, 0x52, 0x26, 0x63, 0x91, 0x48, 0xb6, 0x0d, 0xd0,
	0x90, 0x07, 0xe0, 0x0e, 0x00, 0xbb, 0x3c, 0x6c, 0x1e, 0x68, 0xd2, 0x63, 0x5d, 0x1e, 0x6e, 0x1b,
	0xe0, 0xa0, 0x32, 0x96, 0x02, 0x77, 0x80, 0x5b, 0xaa, 0xd6, 0x21, 0x6e, 0x81, 0x1f, 0x66, 0xdc,
	0x02, 0x5f, 0xd1, 0x00, 0x60, 0xca, 0x2d, 0xf0, 0x43, 0xe4, 0x16, 0xb0, 0x83, 0x8c, 0x5b, 0xc0,
	0x0e, 0xb6, 0x0d, 0x30, 0xe5, 0x16, 0xb0, 0x83, 0x1d, 0x7a, 0x9f, 0x2c, 0x34, 0xaa, 0xb5, 0x7b,
	0x9e, 0xb7, 0xca, 0x12, 0xfe, 0x34, 0xf4, 0x65, 0x6a, 0x40, 0xe6, 0x79, 0x4d, 0x39, 0x88, 0xb8,
	0x31, 0x20, 0xf3, 0xbc, 0xad, 0x41, 0xc4, 0x5d, 0x97, 0x8c, 0x79, 0x4c, 0x32, 0xe4, 0x37, 0x5d,
	0xc7, 0x6f, 0xfa, 0xd7, 0x31, 0xb2, 0x94, 0x0a, 0xfd, 0x79, 0xd4, 0x02, 0x62, 0x1b, 0xe1, 0x9e,
	0x50, 0xc4, 0x2e, 0x91, 0xf1, 0x80, 0x45, 0x4d, 0xdf, 0xd3, 0xa4, 0x4a, 0x01, 0x8b, 0x36, 0x3c,
	0x00, 0x87, 0x51, 0x0b, 0xc0, 0x8a, 0x54, 0x29, 0x8c, 0x5a, 0x0a, 0x0c, 0xa7, 0x31, 0x15, 0xbe,
	0x04, 0xa3, 0xed, 0x14, 0x6c, 0xc4, 0x47, 0xf0, 0x8e, 0xbb, 0x48, 0x26, 0x40, 0x02, 0xa0, 0x52,
	0x52, 0x9b, 0x06, 0xc3, 0x0d, 0xcf, 0xbd, 0x42, 0x26, 0x71, 0x02, 0x55, 0x18, 0xc7, 0xa9, 0x32,
	0x00, 0x50, 0x87, 0x25, 0x52, 0xc6, 0xb3, 0x0b, 0xcb, 0x26, 0x94, 0x7a, 0x38, 0xde, 0xf0, 0xdc,
	0xbb, 0x64, 0x21, 0xf0, 0x59, 0xd8, 0xf4, 0xfc, 0x84, 0x45, 0x11, 0x67, 0x71, 0x53, 0xfa, 0x01,
	0xaf, 0x94, 0x11, 0xeb, 0x02, 0x4c, 0xdd, 0x37, 0x33, 0x5b, 0x7e, 0xc0, 0xdd, 0x6b, 0x84, 0x44,
	0xb1, 0x48, 0x22, 0x1e, 0xfb, 0x72, 0x50, 0x99, 0x44, 0x34, 0x0b, 0xe2, 0xde, 0x24, 0xd3, 0x1d,
	0x96, 0x34, 0x3d, 0xbe, 0xc7, 0xc3, 0x84, 0xc7, 0x95, 0xa9, 0x1b, 0xce, 0xed, 0x72, 0x7d, 0xaa,
	0xc3, 0x92, 0xfb, 0x1a, 0xe4, 0x2e, 0x93, 0x72, 0x14, 0x8b, 0x76, 0xcc, 0x93, 0xa4, 0x32, 0xab,
	0x24, 0x35, 0x63, 0xf7, 0x16, 0x99, 0x95, 0x42, 0xb2, 0x6e, 0x33, 0xc5, 0x98, 0x43, 0x8c, 0x19,
	0x84, 0x6e, 0x1a, 0xb4, 0x57, 0x09, 0x51, 0x0a, 0x85, 0x2c, 0xe0, 0x95, 0xf9, 0x1b, 0xce, 0xed,
	0xc9, 0xfa, 0x24, 0x42, 0x3e, 0x67, 0x01, 0x77, 0xdf, 0x20, 0x73, 0x6a, 0x7a, 0xaf, 0xcb, 0xda,
	0x0a, 0xe7, 0x02, 0xe2, 0xcc, 0x20, 0xf8, 0x61, 0x97, 0xb5, 0x11, 0xaf, 0x42, 0x26, 0x5a, 0xa2,
	0x17, 0xca, 0x78, 0x50, 0x71, 0xf5, 0xdd, 0x50, 0x43, 0xf7, 0x35, 0x32, 0x63, 0x24, 0x50, 0x26,
	0x5d, 0xc0, 0xf9, 0x69, 0x03, 0x34, 0x47, 0xa3, 0xc3, 0x63, 0x51, 0xb9, 0xac, 0x8e, 0x06, 0x7c,
	0xbb, 0x94, 0xcc, 0xc0, 0x6f, 0x93, 0x87, 0x9e, 0xb2, 0xe4, 0x22, 0x2e, 0x9c, 0x02, 0xe0, 0x83,
	0xd0, 0x43, 0x1b, 0x5e, 0x21, 0x93, 0x88, 0x83, 0x84, 0x2b, 0xca, 0x02, 0x00, 0x00, 0xa2, 0xf4,
	0xb7, 0x0e, 0x59, 0x4e, 0xcf, 0x16, 0x1c, 0x2c, 0xa3, 0xb4, 0x3a, 0x5c, 0xb3, 0xa4, 0xa0, 0x0f,
	0xd6, 0x74, 0xbd, 0xe0, 0x7b, 0x39, 0x63, 0x16, 0x4e, 0x34, 0x66, 0x71, 0x94, 0x31, 0x0f, 0xe9,
	0x3a, 0x76, 0x58, 0x57, 0x5a, 0xc7, 0x6b, 0x5a, 0xe7, 0x81, 0xd8, 0xe7, 0xf9, 0xbb, 0x73, 0x9d,
	0x4c, 0xc5, 0x08, 0xb6, 0xaf, 0x0f, 0x51, 0x20, 0x34, 0xd3, 0x22, 0x99, 0x40, 0x75, 0xd3, 0x93,
	0x3f, 0x0e, 0xc3, 0x0d, 0x8f, 0x7e, 0x46, 0x96, 0x6a, 0xd5, 0xc6, 0x66, 0xcc, 0x37, 0xc2, 0x7d,
	0x96, 0xf8, 0x22, 0xdc, 0x62, 0x71, 0x9b, 0xcb, 0x63, 0x6f, 0xd1, 0x65, 0x32, 0x2e, 0x11, 0xcb,
	0xd0, 0x52, 0x23, 0xfa, 0xad, 0x83, 0x57, 0xf2, 0x08, 0x62, 0xb8, 0x53, 0x4c, 0x91, 0x9a, 0xac,
	0xe3, 0xb7, 0x7b, 0x11, 0xbc, 0xd1, 0x3e, 0xef, 0x6a, 0xb3, 0xa9, 0x01, 0x1c, 0x1d, 0xf0, 0x1a,
	0x52, 0xf4, 0x79, 0xdc, 0xdc, 0xeb, 0x0a, 0x11, 0x1b, 0xa3, 0x05, 0xec, 0x60, 0x0b, 0xa0, 0x0f,
	0x01, 0xe8, 0xbe, 0x4e, 0x66, 0xbf, 0xec, 0x85, 0xcd, 0x03, 0xb8, 0x3b, 0x8a, 0x8c, 0xb6, 0xda,
	0x97, 0xbd, 0x70, 0xdb, 0x67, 0xe1, 0x23, 0x80, 0xd1, 0x15, 0x72, 0xa9, 0x56, 0x6d, 0x3c, 0x63,
	0xb2, 0xd5, 0xc9, 0x1b, 0x2d, 0x53, 0xc3, 0xc9, 0xa9, 0xf1, 0x5d, 0x91, 0x5c, 0x6a, 0x54, 0x6b,
	0xa7, 0x5f, 0x01, 0x17, 0x6e, 0x0f, 0xe2, 0x48, 0x93, 0x05, 0x70, 0x76, 0xb5, 0x36, 0x53, 0x08,
	0xbb, 0x87, 0x20, 0xf7, 0x2a, 0x99, 0xc4, 0x1b, 0x8a, 0x57, 0x56, 0x69, 0x93, 0x01, 0xdc, 0x3b,
	0xe4, 0x42, 0x3a, 0x68, 0xb6, 0x58, 0xd4, 0x02, 0x2c, 0xa5, 0xcc, 0x7c, 0x3a, 0x51, 0x53, 0xf0,
	0xd4, 0x90, 0xa5, 0x51, 0x86, 0x1c, 0x3f, 0xc1, 0x90, 0x13, 0xa7, 0x33, 0x64, 0xf9, 0xb0, 0x21,
	0xe1, 0xa6, 0x26, 0xa2, 0xeb, 0xf9, 0x3c, 0xd6, 0x3e, 0xc7, 0x0c, 0xdd, 0x3b, 0x64, 0xae, 0xc5,
	0x22, 0xc9, 0xfc, 0xb0, 0x69, 0x30, 0xa6, 0x6e, 0x14, 0x6f, 0x97, 0x56, 0x0b, 0xf3, 0xaf, 0xd4,
	0x67, 0xf5, 0x54, 0x43, 0x23, 0xe7, 0xfd, 0xc6, 0xf4, 0xb0, 0xdf, 0x30, 0x17, 0x7a, 0xf6, 0xb8,
	0x0b, 0x3d, 0x77, 0xc2, 0x85, 0x9e, 0x1f, 0xba, 0xd0, 0xbf, 0x74, 0xc8, 0xcd, 0xf4, 0x42, 0xa7,
	0x1b, 0xbb, 0x99, 0xba, 0xcc, 0xe3, 0xb7, 0x37, 0xb7, 0x77, 0x85, 0x53, 0xed, 0x5d, 0x71, 0xf4,
	0xde, 0xd1, 0x8f, 0xc9, 0x8d, 0x2c, 0xd2, 0x4a, 0x11, 0x3d, 0x12, 0x89, 0x3c, 0xa5, 0x18, 0xf4,
	0x01, 0xb9, 0xa8, 0xe2, 0xe6, 0x56, 0x2c, 0x44, 0x74, 0xee, 0xc0, 0xf9, 0x14, 0x73, 0x18, 0xe5,
	0x45, 0x86, 0x28, 0x9d, 0xe8, 0x46, 0x96, 0x48, 0x59, 0xc2, 0x92, 0xcc, 0x8f, 0x4c, 0xe0, 0x78,
	0xc3, 0xa3, 0x1f, 0x90, 0x4a, 0xad, 0xda, 0xa8, 0xf3, 0xaf, 0x7b, 0x3c, 0x91, 0x87, 0x25, 0x4c,
	0x97, 0x39, 0xf9, 0x65, 0x77, 0x49, 0x05, 0xa5, 0x19, 0xb5, 0xcc, 0x48, 0xef, 0x58, 0xd2, 0x7f,
	0x6a, 0x8c, 0x50, 0xef, 0xf9, 0x61, 0xa2, 0x77, 0xf1, 0x2c, 0x69, 0x11, 0xad, 0x59, 0xfa, 0x9f,
	0x9b, 0x48, 0xd3, 0xd6, 0x76, 0x88, 0xca, 0x12, 0x29, 0xc7, 0x9c, 0x75, 0x83, 0xcc, 0x6f, 0x4e,
	0xe0, 0x78, 0xc3, 0xcb, 0x18, 0x14, 0x46, 0x31, 0x28, 0x5a, 0x0c, 0x7e, 0x6e, 0xdb, 0xe5, 0x07,
	0x60, 0x00, 0xd7, 0x10, 0xef, 0xcb, 0x2e, 0x4b, 0xfc, 0x16, 0xfa, 0x9a, 0xe9, 0x3a, 0xde, 0xa0,
	0x55, 0x00, 0xd0, 0x6f, 0xc8, 0x6b, 0xb9, 0x94, 0xf0, 0xf1, 0x70, 0x16, 0xa2, 0x44, 0x39, 0x22,
	0x75, 0x71, 0x8e, 0x4a, 0x5d, 0xc0, 0x23, 0x01, 0x7e, 0x22, 0x59, 0x2c, 0x15, 0x6e, 0x41, 0x7b,
	0x24, 0x9f, 0x85, 0x0d, 0x80, 0x02, 0x1e, 0xfd, 0x90, 0x5c, 0x84, 0xfc, 0x37, 0xe1, 0xc0, 0x77,
	0x4d, 0x08, 0xef, 0x50, 0xe8, 0x2d, 0x61, 0xe8, 0x9d, 0x27, 0xc5, 0xdd, 0x9e, 0xda, 0x9a, 0x72,
	0x1d, 0x3e, 0xe9, 0x2a, 0x1e, 0x90, 0x93, 0x57, 0x2e, 0x93, 0x72, 0x4b, 0x88, 0xae, 0x27, 0xfa,
	0xa1, 0x09, 0xda, 0x66, 0x4c, 0x9f, 0x90, 0x37, 0xb2, 0xd4, 0x92, 0xf7, 0xd7, 0x79, 0x2c, 0x8e,
	0xd0, 0xff, 0x16, 0x99, 0x1d, 0xa9, 0xfa, 0x8c, 0x67, 0xe3, 0xd2, 0xf7, 0xc8, 0x95, 0x46, 0xb5,
	0x06, 0x76, 0xcc, 0x72, 0x0a, 0x74, 0xaa, 0x8a, 0x4a, 0xea, 0xbd, 0x1d, 0xcb, 0x7b, 0xd3, 0x3f,
	0x3b, 0x56, 0xb5, 0xf1, 0xac, 0xe3, 0x4b, 0x0e, 0x49, 0x93, 0x5a, 0x61, 0xc5, 0x73, 0xc7, 0x8e,
	0xe7, 0xee, 0x3b, 0x64, 0xa1, 0x0f, 0xa8, 0x2a, 0xed, 0x4a, 0x33, 0x4e, 0xa5, 0xe1, 0x7c, 0xdf,
	0x50, 0x59, 0xd3, 0xa9, 0xe7, 0x0a, 0xb9, 0x68, 0xa1, 0x67, 0xa9, 0x5a, 0x11, 0xdd, 0xf2, 0x85,
	0x14, 0x3f, 0x4d, 0xd7, 0x3e, 0x22, 0x4b, 0xd6, 0x82, 0x21, 0xdd, 0x55, 0xc4, 0xba, 0x9c, 0xae,
	0xca, 0x19, 0x8c, 0x56, 0xc9, 0x22, 0x04, 0xe2, 0x74, 0x92, 0x4b, 0xe6, 0x77, 0x8f, 0x57, 0x87,
	0xfe, 0xad, 0x80, 0x36, 0x38, 0xd3, 0x22, 0xf7, 0x0e, 0x71, 0x2d, 0x19, 0xf3, 0x79, 0xcf, 0x5c,
	0x2a, 0xdc, 0xba, 0x42, 0xce, 0x5b, 0x00, 0x91, 0x47, 0x5a, 0x00, 0xd0, 0xd1, 0x02, 0x47, 0x58,
	0x78, 0xec, 0x08, 0x0b, 0xff, 0x0f, 0xb9, 0x74, 0x08, 0x1d, 0x19, 0xa8, 0xf0, 0xed, 0xe6, 0x17,
	0x9c, 0x6c, 0xe3, 0xf1, 0xe3, 0x6c, 0xec, 0xbe, 0x9d, 0x53, 0xdd, 0x24, 0xd6, 0x13, 0x43, 0xb2,
	0xd5, 0x14, 0x5c, 0x87, 0x02, 0x38, 0x96, 0x70, 0x20, 0xef, 0xf3, 0x44, 0xc6, 0x62, 0x90, 0x1a,
	0xd7, 0x4f, 0x9a, 0x92, 0x87, 0x2a, 0x0a, 0x95, 0xeb, 0xe3, 0x7e, 0xb2, 0xc5, 0x43, 0xcc, 0x75,
	0x3c, 0x85, 0xa8, 0x82, 0x84, 0xce, 0x75, 0x34, 0x0c, 0xa3, 0x6d, 0x15, 0xf3, 0xa7, 0x2c, 0xac,
	0xad, 0xf6, 0xf6, 0x52, 0xc7, 0x95, 0x86, 0x70, 0xed, 0xb8, 0xb8, 0x0a, 0xdf, 0xf4, 0x5f, 0x0e,
	0xb9, 0x00, 0xb2, 0x74, 0x44, 0xff, 0x99, 0x88, 0xcd, 0xa5, 0x5d, 0x24, 0x13, 0x58, 0x81, 0x65,
	0x5b, 0x0c, 0xc3, 0x0d, 0xef, 0x98, 0x40, 0x34, 0x54, 0x1d, 0x15, 0x0f, 0x55, 0x47, 0x2e, 0x19,
	0x6b, 0x8b, 0xae, 0xd9, 0x30, 0xfc, 0x06, 0xd8, 0x9e, 0x10, 0xa6, 0x9e, 0xc3, 0x6f, 0x80, 0xf5,
	0x01, 0xa6, 0x0c, 0x8e, 0xdf, 0x70, 0x51, 0x13, 0x29, 0x42, 0xae, 0x2d, 0xaa, 0x06, 0x80, 0xf9,
	0x25, 0xf3, 0x4c, 0xc1, 0x86, 0xdf, 0x20, 0x20, 0xfc, 0x36, 0x45, 0xcc, 0x4d, 0xb6, 0x04, 0xe3,
	0x27, 0x31, 0x98, 0xe7, 0x6a, 0xa3, 0x5a, 0x5b, 0xe3, 0x72, 0xb5, 0x37, 0xc8, 0x8c, 0x54, 0x53,
	0x99, 0x80, 0x0a, 0x7b, 0x2d, 0x91, 0x48, 0x13, 0x84, 0xe0, 0x9b, 0xfe, 0x08, 0x4d, 0x9a, 0x5b,
	0x90, 0x3a, 0x20, 0x08, 0xfe, 0x96, 0xc6, 0xda, 0x01, 0x31, 0xcf, 0xcb, 0x70, 0xe9, 0xcf, 0x30,
	0xef, 0xc0, 0x9d, 0xe6, 0x3c, 0xbc, 0x27, 0x25, 0x6b, 0x7d, 0x55, 0x17, 0xbb, 0xb5, 0x0e, 0x0b,
	0xdb, 0xdc, 0x4b, 0xa3, 0xff, 0x2e, 0xe7, 0x61, 0x93, 0xe1, 0xac, 0x89, 0xfe, 0xbb, 0x29, 0x3e,
	0xe8, 0x84, 0x08, 0xb1, 0xd8, 0x35, 0x7d, 0x0c, 0x18, 0xd7, 0xc5, 0x2e, 0xfd, 0x08, 0xf3, 0x2b,
	0x3c, 0xc2, 0x47, 0x33, 0xb8, 0x48, 0x4a, 0x58, 0xf5, 0x18, 0x37, 0x87, 0x03, 0xba, 0x8e, 0xae,
	0xbe, 0xd1, 0xf7, 0x65, 0xab, 0x73, 0xaf, 0x25, 0x7d, 0x11, 0xa6, 0x66, 0x10, 0x11, 0x0f, 0xf5,
	0xf1, 0xc3, 0x6f, 0xc8, 0xc4, 0x5a, 0x22, 0xf4, 0x7c, 0xc0, 0xd2, 0xfb, 0x9e, 0x01, 0xe8, 0x5b,
	0xe8, 0xfa, 0x4f, 0x45, 0x09, 0x9c, 0xeb, 0x95, 0x2c, 0x82, 0x3f, 0xf6, 0xbb, 0xbe, 0x64, 0xf1,
	0x60, 0xb3, 0x97, 0x74, 0xd4, 0x9a, 0xd7, 0xc8, 0x4c, 0x00, 0xf9, 0x6c, 0xa0, 0x67, 0xf4, 0xe2,
	0x69, 0x00, 0x1a, 0x6c, 0x30, 0xbe, 0xba, 0xd0, 0x29, 0x96, 0x0a, 0x44, 0xaa, 0xc4, 0x4d, 0xd1,
	0xae, 0x90, 0x49, 0x29, 0x9a, 0x3a, 0xa7, 0x2b, 0xa2, 0xd4, 0x65, 0x29, 0x54, 0x6d, 0x04, 0xb9,
	0x77, 0x3a, 0x09, 0xc1, 0x58, 0x79, 0xd1, 0x72, 0x7d, 0xda, 0x60, 0xc0, 0xd5, 0x84, 0xbd, 0xd9,
	0x8b, 0x45, 0x60, 0x88, 0x94, 0x90, 0x08, 0x01, 0x90, 0x42, 0x42, 0x7d, 0xb2, 0x84, 0xe1, 0xbf,
	0x5f, 0x9f, 0x6d, 0xab, 0x02, 0x37, 0x8c, 0xb3, 0xf6, 0xce, 0x88, 0xcc, 0x10, 0x5b, 0x69, 0xd8,
	0xe5, 0xd3, 0x42, 0xeb, 0x11, 0x04, 0xfe, 0x80, 0xa1, 0x98, 0xe5, 0x7a, 0x21, 0x60, 0x74, 0x0b,
	0x29, 0xab, 0xfc, 0xef, 0x30, 0xe5, 0xe1, 0xda, 0xfe, 0xb4, 0x54, 0x23, 0x72, 0x6d, 0x28, 0x5f,
	0x3a, 0x8d, 0xcc, 0xd7, 0xc9, 0x94, 0x76, 0x63, 0xa1, 0xc7, 0x4d, 0xd2, 0x46, 0x94, 0x27, 0x03,
	0x48, 0xce, 0xcf, 0x15, 0xf3, 0x99, 0xf3, 0xbb, 0xc8, 0x51, 0xe9, 0x31, 0x9a, 0xe3, 0x90, 0x2e,
	0xf4, 0x77, 0x0e, 0x76, 0xde, 0xce, 0xd3, 0x2c, 0x2b, 0x66, 0xcd, 0xb2, 0x25, 0xab, 0x59, 0x66,
	0x6a, 0x3c, 0xdd, 0x30, 0x5b, 0xb2, 0x1a, 0x66, 0xb9, 0xa9, 0x1d, 0xf7, 0x8a, 0xdd, 0x34, 0x33,
	0x73, 0xba, 0x71, 0x46, 0x9f, 0x12, 0xb7, 0x56, 0x6d, 0xd4, 0x62, 0x9e, 0xb5, 0x5b, 0x72, 0x62,
	0x8d, 0xd9, 0x62, 0x2d, 0x90, 0x52, 0xc8, 0xfb, 0xcd, 0x03, 0xe3, 0xac, 0x43, 0xde, 0xdf, 0x36,
	0xc0, 0x81, 0xf1, 0xd6, 0x21, 0xef, 0xef, 0xd0, 0x5f, 0x39, 0xc4, 0x6d, 0x54, 0x6b, 0xc3, 0x74,
	0x47, 0x66, 0x5b, 0x16, 0xb7, 0xd2, 0x48, 0x6e, 0xe3, 0xa3, 0xb8, 0x4d, 0x64, 0xdc, 0x86, 0xe2,
	0x4e, 0x79, 0x38, 0xee, 0xd0, 0x3f, 0x38, 0xe8, 0xe8, 0x1e, 0xb2, 0x44, 0x3e, 0xd6, 0x0d, 0x9c,
	0xb4, 0xea, 0x50, 0x2c, 0x9c, 0x51, 0x2c, 0x0a, 0x16, 0x8b, 0x4c, 0xc6, 0xa2, 0x2d, 0xe3, 0x12,
	0x29, 0xb7, 0x21, 0xd1, 0xcd, 0x4c, 0x35, 0x81, 0xe3, 0x0d, 0xcf, 0x0e, 0xe3, 0xa5, 0x5c, 0x18,
	0x87, 0x88, 0x17, 0x73, 0x95, 0x4e, 0x94, 0xeb, 0xf8, 0x4d, 0x23, 0xf4, 0x9f, 0x3f, 0x80, 0x80,
	0x96, 0x14, 0x63, 0xb6, 0x14, 0xf4, 0xdf, 0x0e, 0x99, 0xaf, 0x55, 0x1b, 0xa6, 0x5d, 0x74, 0x7c,
	0x19, 0x3e, 0x74, 0x59, 0xc6, 0x0f, 0x5d, 0x96, 0x9b, 0x64, 0x5a, 0xfb, 0x1d, 0xb5, 0xbf, 0x6a,
	0x77, 0xa6, 0x14, 0x4c, 0xf5, 0x30, 0x6c, 0x53, 0x95, 0xf3, 0xa6, 0x82, 0x32, 0xba, 0x27, 0x45,
	0x13, 0xea, 0x89, 0x49, 0x94, 0x72, 0x02, 0xc6, 0xab, 0xbd, 0x81, 0x5b, 0x21, 0x13, 0x22, 0xe2,
	0x31, 0x93, 0xbc, 0x42, 0xd4, 0x22, 0x3d, 0x84, 0x54, 0x2d, 0xe8, 0x75, 0xa5, 0xaf, 0x38, 0x36,
	0x03, 0x11, 0x26, 0x92, 0xc7, 0x2a, 0xf1, 0xc2, 0xde, 0x46, 0xa9, 0x7e, 0x19, 0x11, 0x90, 0xfd,
	0x63, 0x35, 0x8d, 0xe9, 0x17, 0xfd, 0x31, 0x99, 0x6f, 0x54, 0x6b, 0xe7, 0x52, 0x7d, 0x6c, 0x58,
	0x75, 0xfa, 0x4f, 0x07, 0xeb, 0xc5, 0xcc, 0xff, 0x60, 0x29, 0x9d, 0x18, 0xcf, 0xa3, 0xfc, 0x80,
	0xb9, 0x76, 0xe0, 0xd7, 0xae, 0x66, 0xcd, 0x9c, 0x42, 0x3a, 0x91, 0x36, 0x74, 0x6e, 0x0d, 0x35,
	0xb4, 0xb2, 0x9b, 0x9e, 0x6b, 0x6a, 0xbd, 0x49, 0xe6, 0xfa, 0xa2, 0x17, 0x7a, 0xdc, 0x4b, 0xfb,
	0x3e, 0x4a, 0xb4, 0x59, 0x0d, 0x6e, 0xa4, 0xf4, 0x66, 0x75, 0x63, 0x41, 0xf4, 0x64, 0xe2, 0x7b,
	0x5c, 0x9f, 0xc6, 0x19, 0x05, 0x7d, 0xa2, 0x80, 0x27, 0xee, 0x30, 0xfd, 0x29, 0xb9, 0x3e, 0x42,
	0x4b, 0xbd, 0x3c, 0xcd, 0x62, 0x6c, 0x1a, 0xce, 0xa1, 0x53, 0x02, 0x9b, 0xa9, 0x85, 0x50, 0x2e,
	0xdd, 0x0c, 0xe9, 0x6d, 0x7c, 0x74, 0xa9, 0xb1, 0xb0, 0xc5, 0xbb, 0xf9, 0x7d, 0x19, 0xf6, 0xa4,
	0xb7, 0xb1, 0x13, 0x7b, 0x1a, 0xcc, 0x4f, 0xd0, 0xb5, 0xd5, 0x79, 0xc4, 0x64, 0xec, 0x33, 0xc9,
	0x47, 0x47, 0x19, 0xeb, 0x82, 0x14, 0x72, 0x17, 0xe4, 0x13, 0xf4, 0x60, 0xe7, 0x5e, 0xfe, 0x08,
	0x35, 0x5a, 0x65, 0xe2, 0xf9, 0x30, 0x89, 0x73, 0x64, 0xd6, 0x40, 0x0d, 0x92, 0xd0, 0x97, 0x44,
	0x2d, 0x20, 0x73, 0x90, 0xf7, 0x45, 0x9c, 0x7b, 0x4f, 0xa3, 0xd1, 0x7a, 0xd9, 0xb7, 0xb5, 0x90,
	0xbf, 0xad, 0x17, 0x49, 0x29, 0x10, 0x21, 0x1f, 0xe8, 0x83, 0xa4, 0x06, 0xb0, 0x40, 0xc8, 0x0e,
	0x8f, 0x61, 0xc1, 0xb8, 0x62, 0x87, 0xe3, 0x0d, 0x8f, 0xde, 0x24, 0x73, 0x90, 0x1c, 0x1e, 0xc3,
	0x8e, 0x7e, 0x41, 0x66, 0x6a, 0xd5, 0xc6, 0x83, 0x83, 0xc8, 0xd4, 0xe5, 0xc3, 0xf2, 0x00, 0x53,
	0x16, 0xe5, 0xbc, 0x9b, 0xef, 0x9d, 0x7c, 0x39, 0x9f, 0x90, 0x99, 0x46, 0xb5, 0x76, 0x0c, 0xdd,
	0x63, 0x7a, 0x11, 0xe0, 0xa8, 0xbb, 0x7e, 0xf8, 0x95, 0xae, 0x47, 0xf1, 0x9b, 0x32, 0xb2, 0x80,
	0x91, 0x64, 0x5f, 0xc4, 0xbe, 0xe4, 0x9b, 0x42, 0xdf, 0xf3, 0x79, 0x52, 0x64, 0x9e, 0xa7, 0x33,
	0x3b, 0xf8, 0xd4, 0x8c, 0x0a, 0x69, 0xd3, 0x23, 0x6d, 0x0f, 0x95, 0x46, 0xb5, 0x87, 0xc6, 0xad,
	0xfe, 0x13, 0xc3, 0x54, 0xe1, 0x07, 0x65, 0xf1, 0x0e, 0x56, 0x9f, 0x16, 0x8b, 0x47, 0x7e, 0x72,
	0x4c, 0xe7, 0xef, 0x03, 0xb2, 0x5c, 0xab, 0x36, 0xd6, 0xb8, 0xdc, 0x8c, 0xf9, 0xfe, 0x46, 0xb8,
	0xcf, 0x13, 0xe9, 0xb7, 0xed, 0x13, 0x38, 0xba, 0x83, 0x20, 0x30, 0xdd, 0x3b, 0xeb, 0x32, 0x98,
	0x08, 0x98, 0xdf, 0xb5, 0x1e, 0x4c, 0x60, 0xb8, 0x81, 0xbb, 0xcd, 0x0f, 0x22, 0x3f, 0xe6, 0xaa,
	0x8c, 0xd5, 0xf5, 0xa5, 0x02, 0x61, 0x25, 0xbb, 0x8a, 0x9b, 0x73, 0x7a, 0x4e, 0xa6, 0xdc, 0x53,
	0xb9, 0xa4, 0x2a, 0xf7, 0x76, 0xd1, 0xfa, 0xa7, 0xa7, 0x51, 0x25, 0x97, 0x42, 0x7e, 0x20, 0x9b,
	0x7e, 0xb6, 0xc2, 0x6e, 0xae, 0x2d, 0xc0, 0xa4, 0x45, 0x0d, 0xe5, 0x7c, 0x1f, 0x5f, 0x7e, 0x2c,
	0x28, 0x38, 0x32, 0xef, 0x24, 0x73, 0xbe, 0x87, 0x4f, 0x3c, 0x47, 0xac, 0x3a, 0xaa, 0x73, 0xfd,
	0x8c, 0xbc, 0x9e, 0x25, 0xf3, 0x69, 0x34, 0xfc, 0x3c, 0x6a, 0x6d, 0xb2, 0x24, 0xb1, 0xfa, 0x60,
	0x4b, 0xa4, 0x0c, 0x19, 0xa7, 0xdd, 0xc9, 0x0e, 0xa3, 0x16, 0x76, 0x9e, 0x47, 0xbe, 0x14, 0xd1,
	0x4d, 0x2b, 0x1e, 0xe4, 0x08, 0xaf, 0xa7, 0x36, 0x3b, 0x86, 0xa6, 0x4b, 0xc6, 0x3a, 0x10, 0xd3,
	0x75, 0x06, 0x03, 0xdf, 0xf4, 0x37, 0x8e, 0xd5, 0xa1, 0xcf, 0x91, 0x04, 0xa3, 0xe9, 0x5b, 0xf0,
	0x36, 0x71, 0x55, 0x03, 0x33, 0xe6, 0x2d, 0xb1, 0xcf, 0x07, 0x76, 0x47, 0x63, 0x1e, 0x67, 0xea,
	0x6a, 0x02, 0x7b, 0x32, 0x9f, 0x92, 0x12, 0xcc, 0xab, 0x97, 0xbf, 0xa9, 0xea, 0x5b, 0xea, 0xbf,
	0x04, 0x77, 0x15, 0x4a, 0xcc, 0x76, 0xbb, 0xb8, 0x1f, 0xc9, 0x33, 0x5f, 0x76, 0x1e, 0x1c, 0xc8,
	0x98, 0x65, 0x8c, 0xea, 0x6a, 0x21, 0x7d, 0x48, 0xa8, 0xee, 0x86, 0x1e, 0x12, 0xe8, 0x4c, 0xbd,
	0xd1, 0x87, 0x84, 0xea, 0xde, 0xe8, 0x8b, 0xd1, 0xf9, 0xb5, 0x43, 0x5e, 0x4d, 0x8d, 0x84, 0xf1,
	0x8f, 0xaf, 0xf3, 0x58, 0xbc, 0xb8, 0x85, 0x0a, 0xe7, 0xb5, 0x50, 0x4e, 0xa2, 0xcf, 0x7a, 0xe1,
	0x56, 0x8f, 0x85, 0x2f, 0x65, 0xcf, 0xce, 0x2d, 0x51, 0x8d, 0x5c, 0x57, 0x7b, 0x36, 0x64, 0x9f,
	0x33, 0x19, 0xba, 0xa6, 0xce, 0xf7, 0x8b, 0x11, 0x79, 0x13, 0x1f, 0x40, 0x6b, 0xac, 0xdb, 0x82,
	0xb4, 0x1e, 0x23, 0xe0, 0x51, 0xb9, 0xca, 0x25, 0xcc, 0x6a, 0x4e, 0x42, 0xc4, 0x36, 0x18, 0xcc,
	0x9a, 0xcb, 0x88, 0x03, 0xba, 0x8e, 0xe5, 0x03, 0x38, 0xf1, 0x07, 0x21, 0x0f, 0x06, 0x69, 0xcc,
	0x58, 0xcc, 0x5e, 0x55, 0x4c, 0x16, 0xa9, 0xa2, 0xc2, 0x62, 0xf6, 0xb2, 0x62, 0x4f, 0xec, 0xd0,
	0x77, 0x51, 0xe2, 0x06, 0x67, 0x71, 0xab, 0x03, 0xe9, 0x06, 0x78, 0x0a, 0xe3, 0x96, 0x4c, 0x15,
	0xe9, 0xd8, 0x7f, 0xbd, 0xa0, 0xbf, 0x40, 0xd1, 0xcf, 0xb0, 0xc2, 0x4e, 0x59, 0x54, 0x79, 0x9b,
	0xa5, 0x2c, 0xe7, 0xa8, 0x6f, 0xe9, 0x00, 0x9b, 0x7a, 0xeb, 0x22, 0xe0, 0xf7, 0x12, 0x89, 0x7f,
	0xb3, 0xf0, 0xfc, 0xb0, 0x9d, 0xd5, 0xd8, 0x77, 0x48, 0x09, 0x3c, 0x68, 0x82, 0x46, 0x98, 0xaa,
	0x5e, 0xd2, 0x07, 0x6a, 0xdd, 0x3c, 0xb8, 0xe8, 0xb3, 0x83, 0x38, 0xee, 0xdb, 0x64, 0xac, 0x2b,
	0xda, 0x09, 0x0a, 0x30, 0x55, 0xad, 0x68, 0xdc, 0x94, 0xf0, 0x23, 0xa1, 0x5e, 0x01, 0xea, 0x88,
	0x45, 0xff, 0xe4, 0xa8, 0xbc, 0x15, 0xcb, 0xdc, 0x7b, 0x49, 0xc2, 0x83, 0xdd, 0xee, 0xe0, 0x94,
	0xc9, 0xf0, 0x11, 0x4f, 0xf9, 0x87, 0x4a, 0xa9, 0xe2, 0xe1, 0x52, 0xea, 0x55, 0x42, 0xfa, 0xcc,
	0x97, 0xb9, 0xac, 0x67, 0x12, 0x20, 0x69, 0xe7, 0x22, 0xcd, 0xdd, 0x4a, 0x47, 0x57, 0x5a, 0xe3,
	0xb9, 0x4a, 0x8b, 0x32, 0x95, 0x58, 0xbf, 0x4c, 0x55, 0xd4, 0xe1, 0x2d, 0xa6, 0xa7, 0xfc, 0x53,
	0xd5, 0x6f, 0xec, 0x88, 0x7e, 0x9e, 0x41, 0x96, 0xc8, 0xa8, 0x43, 0x5e, 0x21, 0x13, 0xfb, 0x3c,
	0x86, 0xcc, 0x5e, 0x6b, 0x6f, 0x86, 0xf4, 0x6b, 0xd5, 0x67, 0x3c, 0x3f, 0x85, 0x34, 0xbf, 0x19,
	0xb3, 0x7a, 0x41, 0x57, 0xc8, 0x64, 0x28, 0x64, 0x93, 0x1f, 0xf8, 0x89, 0x29, 0xd6, 0xcb, 0xa1,
	0x90, 0x0f, 0x60, 0x4c, 0xdf, 0x51, 0x0f, 0x48, 0x16, 0xcb, 0x5c, 0x67, 0x75, 0x88, 0x33, 0xfd,
	0x06, 0x75, 0xfc, 0x4c, 0xf8, 0xe1, 0xf1, 0x12, 0x0e, 0x19, 0xb5, 0x38, 0xaa, 0xff, 0x74, 0x54,
	0x6b, 0xc1, 0xde, 0xc5, 0x52, 0x7e, 0x17, 0xd7, 0xd0, 0x40, 0x2f, 0xce, 0x9e, 0xae, 0x61, 0x93,
	0x56, 0x1d, 0x07, 0x6c, 0x2e, 0x3f, 0x13, 0xf1, 0x57, 0x49, 0x47, 0x44, 0x67, 0x7d, 0xaf, 0x5d,
	0x43, 0xfb, 0xbd, 0x04, 0x42, 0x2a, 0x6b, 0x82, 0x8d, 0x18, 0x41, 0xe6, 0xa8, 0x32, 0x88, 0xfe,
	0x45, 0xfd, 0x33, 0xe6, 0x8c, 0xcb, 0x72, 0xff, 0x19, 0x2b, 0xe4, 0xff, 0x33, 0x76, 0x99, 0x8c,
	0x8b, 0x9e, 0x8c, 0x7a, 0xd2, 0xfc, 0x71, 0x50, 0x8d, 0xf0, 0xe2, 0xe2, 0xff, 0x8d, 0xf4, 0xec,
	0x98, 0xbe, 0xb8, 0x00, 0x7b, 0xa2, 0x50, 0xae, 0x93, 0xa9, 0x28, 0xf6, 0x9f, 0x73, 0xdd, 0xa5,
	0x28, 0x99, 0x4e, 0x95, 0xff, 0x9c, 0x63, 0x67, 0xc2, 0x7d, 0x83, 0xcc, 0x61, 0x9f, 0xbf, 0xd3,
	0xd3, 0x6f, 0xb4, 0x89, 0xce, 0xdb, 0x67, 0x00, 0xbc, 0xde, 0x53, 0x6f, 0xb4, 0x89, 0xb6, 0x05,
	0x8c, 0xcf, 0x62, 0x8b, 0x36, 0x9a, 0xe2, 0x8c, 0xab, 0xf0, 0x76, 0x40, 0x86, 0x6b, 0x65, 0xb5,
	0x65, 0x00, 0x60, 0xb4, 0xbe, 0x68, 0x67, 0x58, 0x25, 0x13, 0x81, 0x3f, 0x21, 0xb7, 0xd2, 0x94,
	0x60, 0x88, 0x95, 0x51, 0x35, 0x6d, 0x08, 0x2a, 0x53, 0xe8, 0x86, 0x20, 0x0e, 0xe8, 0xff, 0x5b,
	0x49, 0x2b, 0xba, 0x69, 0x9b, 0x84, 0x95, 0x58, 0xa4, 0xcc, 0x1d, 0x9b, 0xf9, 0x53, 0x8b, 0x39,
	0xac, 0x56, 0xb6, 0x1f, 0xb1, 0xfc, 0x4c, 0x79, 0x09, 0xfd, 0x98, 0x5c, 0xc3, 0x58, 0x2e, 0x5b,
	0x9d, 0x9c, 0x4a, 0x8f, 0x44, 0x5b, 0xd3, 0xb3, 0x9c, 0x8e, 0x93, 0x77, 0x5b, 0x5d, 0x6c, 0x18,
	0x1f, 0xb7, 0xf6, 0x5d, 0x1d, 0x77, 0x54, 0x8c, 0xba, 0xaa, 0xe3, 0xce, 0x30, 0xb2, 0x15, 0x7b,
	0x6c, 0x6e, 0x85, 0x3c, 0xb7, 0x6f, 0x55, 0xb3, 0x79, 0x8d, 0x4b, 0xf5, 0xbe, 0x28, 0x9e, 0xa7,
	0xe6, 0x52, 0x2e, 0x4e, 0xd5, 0x90, 0x6a, 0x90, 0x8f, 0xc6, 0xf6, 0xbe, 0x9f, 0xed, 0xaf, 0x99,
	0x43, 0xc5, 0x59, 0x69, 0xb8, 0x38, 0x5b, 0x5d, 0xfe, 0xe3, 0xf7, 0xd7, 0x9c, 0xef, 0xbe, 0xbf,
	0xe6, 0xfc, 0xfd, 0xfb, 0x6b, 0xce, 0xef, 0xff, 0x71, 0xed, 0x95, 0x75, 0xe7, 0x27, 0xba, 0xa5,
	0xbf, 0x3b, 0x8e, 0xea, 0xbe, 0xf7, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc7, 0x83, 0x4f, 0xbf,
	0x01, 0x2d, 0x00, 0x00,
}
