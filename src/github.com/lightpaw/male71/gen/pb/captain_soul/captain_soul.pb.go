// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/gen/pb/captain_soul/captain_soul.proto
// DO NOT EDIT!

/*
	Package captain_soul is a generated protocol buffer package.

	It is generated from these files:
		github.com/lightpaw/male7/gen/pb/captain_soul/captain_soul.proto

	It has these top-level messages:
		S2CSoulActivatedProto
		C2SCollectFettersPrizeProto
		S2CCollectFettersPrizeProto
		C2SActivateFettersProto
		S2CActivateFettersProto
		C2SFuShenProto
		S2CFuShenProto
		C2SUpgradeProto
		S2CUpgradeProto
		C2SUpgradeV2Proto
		S2CUpgradeV2Proto
		S2CLevelUpgradeProto
		C2SUnlockSpellProto
		S2CUnlockSpellProto
		C2SMarkProto
		S2CMarkProto
		C2SRebornPreviewProto
		S2CRebornPreviewProto
		C2SRebornProto
		S2CRebornProto
*/
package captain_soul

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type S2CSoulActivatedProto struct {
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *S2CSoulActivatedProto) Reset()                    { *m = S2CSoulActivatedProto{} }
func (m *S2CSoulActivatedProto) String() string            { return proto.CompactTextString(m) }
func (*S2CSoulActivatedProto) ProtoMessage()               {}
func (*S2CSoulActivatedProto) Descriptor() ([]byte, []int) { return fileDescriptorCaptainSoul, []int{0} }

func (m *S2CSoulActivatedProto) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type C2SCollectFettersPrizeProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SCollectFettersPrizeProto) Reset()         { *m = C2SCollectFettersPrizeProto{} }
func (m *C2SCollectFettersPrizeProto) String() string { return proto.CompactTextString(m) }
func (*C2SCollectFettersPrizeProto) ProtoMessage()    {}
func (*C2SCollectFettersPrizeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorCaptainSoul, []int{1}
}

func (m *C2SCollectFettersPrizeProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type S2CCollectFettersPrizeProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *S2CCollectFettersPrizeProto) Reset()         { *m = S2CCollectFettersPrizeProto{} }
func (m *S2CCollectFettersPrizeProto) String() string { return proto.CompactTextString(m) }
func (*S2CCollectFettersPrizeProto) ProtoMessage()    {}
func (*S2CCollectFettersPrizeProto) Descriptor() ([]byte, []int) {
	return fileDescriptorCaptainSoul, []int{2}
}

func (m *S2CCollectFettersPrizeProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type C2SActivateFettersProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *C2SActivateFettersProto) Reset()         { *m = C2SActivateFettersProto{} }
func (m *C2SActivateFettersProto) String() string { return proto.CompactTextString(m) }
func (*C2SActivateFettersProto) ProtoMessage()    {}
func (*C2SActivateFettersProto) Descriptor() ([]byte, []int) {
	return fileDescriptorCaptainSoul, []int{3}
}

func (m *C2SActivateFettersProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type S2CActivateFettersProto struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *S2CActivateFettersProto) Reset()         { *m = S2CActivateFettersProto{} }
func (m *S2CActivateFettersProto) String() string { return proto.CompactTextString(m) }
func (*S2CActivateFettersProto) ProtoMessage()    {}
func (*S2CActivateFettersProto) Descriptor() ([]byte, []int) {
	return fileDescriptorCaptainSoul, []int{4}
}

func (m *S2CActivateFettersProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type C2SFuShenProto struct {
	Captain int32 `protobuf:"varint,1,opt,name=captain,proto3" json:"captain,omitempty"`
	Up      bool  `protobuf:"varint,2,opt,name=up,proto3" json:"up,omitempty"`
	SoulId  int32 `protobuf:"varint,4,opt,name=soul_id,json=soulId,proto3" json:"soul_id,omitempty"`
	Inherit bool  `protobuf:"varint,5,opt,name=inherit,proto3" json:"inherit,omitempty"`
}

func (m *C2SFuShenProto) Reset()                    { *m = C2SFuShenProto{} }
func (m *C2SFuShenProto) String() string            { return proto.CompactTextString(m) }
func (*C2SFuShenProto) ProtoMessage()               {}
func (*C2SFuShenProto) Descriptor() ([]byte, []int) { return fileDescriptorCaptainSoul, []int{5} }

func (m *C2SFuShenProto) GetCaptain() int32 {
	if m != nil {
		return m.Captain
	}
	return 0
}

func (m *C2SFuShenProto) GetUp() bool {
	if m != nil {
		return m.Up
	}
	return false
}

func (m *C2SFuShenProto) GetSoulId() int32 {
	if m != nil {
		return m.SoulId
	}
	return 0
}

func (m *C2SFuShenProto) GetInherit() bool {
	if m != nil {
		return m.Inherit
	}
	return false
}

type S2CFuShenProto struct {
	Captain            int32 `protobuf:"varint,1,opt,name=captain,proto3" json:"captain,omitempty"`
	UpSoulId           int32 `protobuf:"varint,3,opt,name=up_soul_id,json=upSoulId,proto3" json:"up_soul_id,omitempty"`
	ReplaceSoulCaptain int32 `protobuf:"varint,4,opt,name=replace_soul_captain,json=replaceSoulCaptain,proto3" json:"replace_soul_captain,omitempty"`
}

func (m *S2CFuShenProto) Reset()                    { *m = S2CFuShenProto{} }
func (m *S2CFuShenProto) String() string            { return proto.CompactTextString(m) }
func (*S2CFuShenProto) ProtoMessage()               {}
func (*S2CFuShenProto) Descriptor() ([]byte, []int) { return fileDescriptorCaptainSoul, []int{6} }

func (m *S2CFuShenProto) GetCaptain() int32 {
	if m != nil {
		return m.Captain
	}
	return 0
}

func (m *S2CFuShenProto) GetUpSoulId() int32 {
	if m != nil {
		return m.UpSoulId
	}
	return 0
}

func (m *S2CFuShenProto) GetReplaceSoulCaptain() int32 {
	if m != nil {
		return m.ReplaceSoulCaptain
	}
	return 0
}

type C2SUpgradeProto struct {
	CaptainSoulId int32 `protobuf:"varint,1,opt,name=captain_soul_id,json=captainSoulId,proto3" json:"captain_soul_id,omitempty"`
}

func (m *C2SUpgradeProto) Reset()                    { *m = C2SUpgradeProto{} }
func (m *C2SUpgradeProto) String() string            { return proto.CompactTextString(m) }
func (*C2SUpgradeProto) ProtoMessage()               {}
func (*C2SUpgradeProto) Descriptor() ([]byte, []int) { return fileDescriptorCaptainSoul, []int{7} }

func (m *C2SUpgradeProto) GetCaptainSoulId() int32 {
	if m != nil {
		return m.CaptainSoulId
	}
	return 0
}

type S2CUpgradeProto struct {
	CaptainSoulId    int32 `protobuf:"varint,1,opt,name=captain_soul_id,json=captainSoulId,proto3" json:"captain_soul_id,omitempty"`
	CaptainSoulLevel int32 `protobuf:"varint,2,opt,name=captain_soul_level,json=captainSoulLevel,proto3" json:"captain_soul_level,omitempty"`
}

func (m *S2CUpgradeProto) Reset()                    { *m = S2CUpgradeProto{} }
func (m *S2CUpgradeProto) String() string            { return proto.CompactTextString(m) }
func (*S2CUpgradeProto) ProtoMessage()               {}
func (*S2CUpgradeProto) Descriptor() ([]byte, []int) { return fileDescriptorCaptainSoul, []int{8} }

func (m *S2CUpgradeProto) GetCaptainSoulId() int32 {
	if m != nil {
		return m.CaptainSoulId
	}
	return 0
}

func (m *S2CUpgradeProto) GetCaptainSoulLevel() int32 {
	if m != nil {
		return m.CaptainSoulLevel
	}
	return 0
}

type C2SUpgradeV2Proto struct {
	CaptainSoul int32   `protobuf:"varint,1,opt,name=captain_soul,json=captainSoul,proto3" json:"captain_soul,omitempty"`
	GoodsId     []int32 `protobuf:"varint,2,rep,name=goods_id,json=goodsId" json:"goods_id,omitempty"`
	Count       []int32 `protobuf:"varint,3,rep,name=count" json:"count,omitempty"`
}

func (m *C2SUpgradeV2Proto) Reset()                    { *m = C2SUpgradeV2Proto{} }
func (m *C2SUpgradeV2Proto) String() string            { return proto.CompactTextString(m) }
func (*C2SUpgradeV2Proto) ProtoMessage()               {}
func (*C2SUpgradeV2Proto) Descriptor() ([]byte, []int) { return fileDescriptorCaptainSoul, []int{9} }

func (m *C2SUpgradeV2Proto) GetCaptainSoul() int32 {
	if m != nil {
		return m.CaptainSoul
	}
	return 0
}

func (m *C2SUpgradeV2Proto) GetGoodsId() []int32 {
	if m != nil {
		return m.GoodsId
	}
	return nil
}

func (m *C2SUpgradeV2Proto) GetCount() []int32 {
	if m != nil {
		return m.Count
	}
	return nil
}

type S2CUpgradeV2Proto struct {
	CaptainSoul int32 `protobuf:"varint,1,opt,name=captain_soul,json=captainSoul,proto3" json:"captain_soul,omitempty"`
	Exp         int32 `protobuf:"varint,3,opt,name=exp,proto3" json:"exp,omitempty"`
}

func (m *S2CUpgradeV2Proto) Reset()                    { *m = S2CUpgradeV2Proto{} }
func (m *S2CUpgradeV2Proto) String() string            { return proto.CompactTextString(m) }
func (*S2CUpgradeV2Proto) ProtoMessage()               {}
func (*S2CUpgradeV2Proto) Descriptor() ([]byte, []int) { return fileDescriptorCaptainSoul, []int{10} }

func (m *S2CUpgradeV2Proto) GetCaptainSoul() int32 {
	if m != nil {
		return m.CaptainSoul
	}
	return 0
}

func (m *S2CUpgradeV2Proto) GetExp() int32 {
	if m != nil {
		return m.Exp
	}
	return 0
}

type S2CLevelUpgradeProto struct {
	CaptainSoul      int32  `protobuf:"varint,1,opt,name=captain_soul,json=captainSoul,proto3" json:"captain_soul,omitempty"`
	CaptainSoulLevel int32  `protobuf:"varint,2,opt,name=captain_soul_level,json=captainSoulLevel,proto3" json:"captain_soul_level,omitempty"`
	Stat             []byte `protobuf:"bytes,3,opt,name=stat,proto3" json:"stat,omitempty"`
}

func (m *S2CLevelUpgradeProto) Reset()                    { *m = S2CLevelUpgradeProto{} }
func (m *S2CLevelUpgradeProto) String() string            { return proto.CompactTextString(m) }
func (*S2CLevelUpgradeProto) ProtoMessage()               {}
func (*S2CLevelUpgradeProto) Descriptor() ([]byte, []int) { return fileDescriptorCaptainSoul, []int{11} }

func (m *S2CLevelUpgradeProto) GetCaptainSoul() int32 {
	if m != nil {
		return m.CaptainSoul
	}
	return 0
}

func (m *S2CLevelUpgradeProto) GetCaptainSoulLevel() int32 {
	if m != nil {
		return m.CaptainSoulLevel
	}
	return 0
}

func (m *S2CLevelUpgradeProto) GetStat() []byte {
	if m != nil {
		return m.Stat
	}
	return nil
}

type C2SUnlockSpellProto struct {
	CaptainSoul int32 `protobuf:"varint,1,opt,name=captain_soul,json=captainSoul,proto3" json:"captain_soul,omitempty"`
	Index       int32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *C2SUnlockSpellProto) Reset()                    { *m = C2SUnlockSpellProto{} }
func (m *C2SUnlockSpellProto) String() string            { return proto.CompactTextString(m) }
func (*C2SUnlockSpellProto) ProtoMessage()               {}
func (*C2SUnlockSpellProto) Descriptor() ([]byte, []int) { return fileDescriptorCaptainSoul, []int{12} }

func (m *C2SUnlockSpellProto) GetCaptainSoul() int32 {
	if m != nil {
		return m.CaptainSoul
	}
	return 0
}

func (m *C2SUnlockSpellProto) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

type S2CUnlockSpellProto struct {
	CaptainSoul int32  `protobuf:"varint,1,opt,name=captain_soul,json=captainSoul,proto3" json:"captain_soul,omitempty"`
	Index       int32  `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Stat        []byte `protobuf:"bytes,3,opt,name=stat,proto3" json:"stat,omitempty"`
}

func (m *S2CUnlockSpellProto) Reset()                    { *m = S2CUnlockSpellProto{} }
func (m *S2CUnlockSpellProto) String() string            { return proto.CompactTextString(m) }
func (*S2CUnlockSpellProto) ProtoMessage()               {}
func (*S2CUnlockSpellProto) Descriptor() ([]byte, []int) { return fileDescriptorCaptainSoul, []int{13} }

func (m *S2CUnlockSpellProto) GetCaptainSoul() int32 {
	if m != nil {
		return m.CaptainSoul
	}
	return 0
}

func (m *S2CUnlockSpellProto) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *S2CUnlockSpellProto) GetStat() []byte {
	if m != nil {
		return m.Stat
	}
	return nil
}

type C2SMarkProto struct {
	CaptainSoul int32 `protobuf:"varint,1,opt,name=captain_soul,json=captainSoul,proto3" json:"captain_soul,omitempty"`
}

func (m *C2SMarkProto) Reset()                    { *m = C2SMarkProto{} }
func (m *C2SMarkProto) String() string            { return proto.CompactTextString(m) }
func (*C2SMarkProto) ProtoMessage()               {}
func (*C2SMarkProto) Descriptor() ([]byte, []int) { return fileDescriptorCaptainSoul, []int{14} }

func (m *C2SMarkProto) GetCaptainSoul() int32 {
	if m != nil {
		return m.CaptainSoul
	}
	return 0
}

type S2CMarkProto struct {
	CaptainSoul int32 `protobuf:"varint,1,opt,name=captain_soul,json=captainSoul,proto3" json:"captain_soul,omitempty"`
}

func (m *S2CMarkProto) Reset()                    { *m = S2CMarkProto{} }
func (m *S2CMarkProto) String() string            { return proto.CompactTextString(m) }
func (*S2CMarkProto) ProtoMessage()               {}
func (*S2CMarkProto) Descriptor() ([]byte, []int) { return fileDescriptorCaptainSoul, []int{15} }

func (m *S2CMarkProto) GetCaptainSoul() int32 {
	if m != nil {
		return m.CaptainSoul
	}
	return 0
}

type C2SRebornPreviewProto struct {
	CaptainSoul int32 `protobuf:"varint,1,opt,name=captain_soul,json=captainSoul,proto3" json:"captain_soul,omitempty"`
}

func (m *C2SRebornPreviewProto) Reset()         { *m = C2SRebornPreviewProto{} }
func (m *C2SRebornPreviewProto) String() string { return proto.CompactTextString(m) }
func (*C2SRebornPreviewProto) ProtoMessage()    {}
func (*C2SRebornPreviewProto) Descriptor() ([]byte, []int) {
	return fileDescriptorCaptainSoul, []int{16}
}

func (m *C2SRebornPreviewProto) GetCaptainSoul() int32 {
	if m != nil {
		return m.CaptainSoul
	}
	return 0
}

type S2CRebornPreviewProto struct {
	CaptainSoul int32  `protobuf:"varint,1,opt,name=captain_soul,json=captainSoul,proto3" json:"captain_soul,omitempty"`
	Prize       []byte `protobuf:"bytes,4,opt,name=prize,proto3" json:"prize,omitempty"`
}

func (m *S2CRebornPreviewProto) Reset()         { *m = S2CRebornPreviewProto{} }
func (m *S2CRebornPreviewProto) String() string { return proto.CompactTextString(m) }
func (*S2CRebornPreviewProto) ProtoMessage()    {}
func (*S2CRebornPreviewProto) Descriptor() ([]byte, []int) {
	return fileDescriptorCaptainSoul, []int{17}
}

func (m *S2CRebornPreviewProto) GetCaptainSoul() int32 {
	if m != nil {
		return m.CaptainSoul
	}
	return 0
}

func (m *S2CRebornPreviewProto) GetPrize() []byte {
	if m != nil {
		return m.Prize
	}
	return nil
}

type C2SRebornProto struct {
	CaptainSoul int32 `protobuf:"varint,1,opt,name=captain_soul,json=captainSoul,proto3" json:"captain_soul,omitempty"`
}

func (m *C2SRebornProto) Reset()                    { *m = C2SRebornProto{} }
func (m *C2SRebornProto) String() string            { return proto.CompactTextString(m) }
func (*C2SRebornProto) ProtoMessage()               {}
func (*C2SRebornProto) Descriptor() ([]byte, []int) { return fileDescriptorCaptainSoul, []int{18} }

func (m *C2SRebornProto) GetCaptainSoul() int32 {
	if m != nil {
		return m.CaptainSoul
	}
	return 0
}

type S2CRebornProto struct {
	CaptainSoul int32 `protobuf:"varint,1,opt,name=captain_soul,json=captainSoul,proto3" json:"captain_soul,omitempty"`
}

func (m *S2CRebornProto) Reset()                    { *m = S2CRebornProto{} }
func (m *S2CRebornProto) String() string            { return proto.CompactTextString(m) }
func (*S2CRebornProto) ProtoMessage()               {}
func (*S2CRebornProto) Descriptor() ([]byte, []int) { return fileDescriptorCaptainSoul, []int{19} }

func (m *S2CRebornProto) GetCaptainSoul() int32 {
	if m != nil {
		return m.CaptainSoul
	}
	return 0
}

func init() {
	proto.RegisterType((*S2CSoulActivatedProto)(nil), "proto.S2CSoulActivatedProto")
	proto.RegisterType((*C2SCollectFettersPrizeProto)(nil), "proto.C2SCollectFettersPrizeProto")
	proto.RegisterType((*S2CCollectFettersPrizeProto)(nil), "proto.S2CCollectFettersPrizeProto")
	proto.RegisterType((*C2SActivateFettersProto)(nil), "proto.C2SActivateFettersProto")
	proto.RegisterType((*S2CActivateFettersProto)(nil), "proto.S2CActivateFettersProto")
	proto.RegisterType((*C2SFuShenProto)(nil), "proto.C2SFuShenProto")
	proto.RegisterType((*S2CFuShenProto)(nil), "proto.S2CFuShenProto")
	proto.RegisterType((*C2SUpgradeProto)(nil), "proto.C2SUpgradeProto")
	proto.RegisterType((*S2CUpgradeProto)(nil), "proto.S2CUpgradeProto")
	proto.RegisterType((*C2SUpgradeV2Proto)(nil), "proto.C2SUpgradeV2Proto")
	proto.RegisterType((*S2CUpgradeV2Proto)(nil), "proto.S2CUpgradeV2Proto")
	proto.RegisterType((*S2CLevelUpgradeProto)(nil), "proto.S2CLevelUpgradeProto")
	proto.RegisterType((*C2SUnlockSpellProto)(nil), "proto.C2SUnlockSpellProto")
	proto.RegisterType((*S2CUnlockSpellProto)(nil), "proto.S2CUnlockSpellProto")
	proto.RegisterType((*C2SMarkProto)(nil), "proto.C2SMarkProto")
	proto.RegisterType((*S2CMarkProto)(nil), "proto.S2CMarkProto")
	proto.RegisterType((*C2SRebornPreviewProto)(nil), "proto.C2SRebornPreviewProto")
	proto.RegisterType((*S2CRebornPreviewProto)(nil), "proto.S2CRebornPreviewProto")
	proto.RegisterType((*C2SRebornProto)(nil), "proto.C2SRebornProto")
	proto.RegisterType((*S2CRebornProto)(nil), "proto.S2CRebornProto")
}
func (m *S2CSoulActivatedProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CSoulActivatedProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *C2SCollectFettersPrizeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SCollectFettersPrizeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *S2CCollectFettersPrizeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CCollectFettersPrizeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *C2SActivateFettersProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SActivateFettersProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *S2CActivateFettersProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CActivateFettersProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *C2SFuShenProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SFuShenProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Captain != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(m.Captain))
	}
	if m.Up {
		dAtA[i] = 0x10
		i++
		if m.Up {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SoulId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(m.SoulId))
	}
	if m.Inherit {
		dAtA[i] = 0x28
		i++
		if m.Inherit {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CFuShenProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CFuShenProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Captain != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(m.Captain))
	}
	if m.UpSoulId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(m.UpSoulId))
	}
	if m.ReplaceSoulCaptain != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(m.ReplaceSoulCaptain))
	}
	return i, nil
}

func (m *C2SUpgradeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SUpgradeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CaptainSoulId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(m.CaptainSoulId))
	}
	return i, nil
}

func (m *S2CUpgradeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpgradeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CaptainSoulId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(m.CaptainSoulId))
	}
	if m.CaptainSoulLevel != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(m.CaptainSoulLevel))
	}
	return i, nil
}

func (m *C2SUpgradeV2Proto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SUpgradeV2Proto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CaptainSoul != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(m.CaptainSoul))
	}
	if len(m.GoodsId) > 0 {
		for _, num := range m.GoodsId {
			dAtA[i] = 0x10
			i++
			i = encodeVarintCaptainSoul(dAtA, i, uint64(num))
		}
	}
	if len(m.Count) > 0 {
		for _, num := range m.Count {
			dAtA[i] = 0x18
			i++
			i = encodeVarintCaptainSoul(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *S2CUpgradeV2Proto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUpgradeV2Proto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CaptainSoul != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(m.CaptainSoul))
	}
	if m.Exp != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(m.Exp))
	}
	return i, nil
}

func (m *S2CLevelUpgradeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CLevelUpgradeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CaptainSoul != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(m.CaptainSoul))
	}
	if m.CaptainSoulLevel != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(m.CaptainSoulLevel))
	}
	if len(m.Stat) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(len(m.Stat)))
		i += copy(dAtA[i:], m.Stat)
	}
	return i, nil
}

func (m *C2SUnlockSpellProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SUnlockSpellProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CaptainSoul != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(m.CaptainSoul))
	}
	if m.Index != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(m.Index))
	}
	return i, nil
}

func (m *S2CUnlockSpellProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUnlockSpellProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CaptainSoul != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(m.CaptainSoul))
	}
	if m.Index != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(m.Index))
	}
	if len(m.Stat) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(len(m.Stat)))
		i += copy(dAtA[i:], m.Stat)
	}
	return i, nil
}

func (m *C2SMarkProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SMarkProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CaptainSoul != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(m.CaptainSoul))
	}
	return i, nil
}

func (m *S2CMarkProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CMarkProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CaptainSoul != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(m.CaptainSoul))
	}
	return i, nil
}

func (m *C2SRebornPreviewProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SRebornPreviewProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CaptainSoul != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(m.CaptainSoul))
	}
	return i, nil
}

func (m *S2CRebornPreviewProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CRebornPreviewProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CaptainSoul != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(m.CaptainSoul))
	}
	if len(m.Prize) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(len(m.Prize)))
		i += copy(dAtA[i:], m.Prize)
	}
	return i, nil
}

func (m *C2SRebornProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SRebornProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CaptainSoul != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(m.CaptainSoul))
	}
	return i, nil
}

func (m *S2CRebornProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CRebornProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CaptainSoul != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(m.CaptainSoul))
	}
	return i, nil
}

func encodeFixed64CaptainSoul(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32CaptainSoul(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintCaptainSoul(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *S2CSoulActivatedProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovCaptainSoul(uint64(l))
	}
	return n
}

func (m *C2SCollectFettersPrizeProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCaptainSoul(uint64(m.Id))
	}
	return n
}

func (m *S2CCollectFettersPrizeProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCaptainSoul(uint64(m.Id))
	}
	return n
}

func (m *C2SActivateFettersProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCaptainSoul(uint64(m.Id))
	}
	return n
}

func (m *S2CActivateFettersProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCaptainSoul(uint64(m.Id))
	}
	return n
}

func (m *C2SFuShenProto) Size() (n int) {
	var l int
	_ = l
	if m.Captain != 0 {
		n += 1 + sovCaptainSoul(uint64(m.Captain))
	}
	if m.Up {
		n += 2
	}
	if m.SoulId != 0 {
		n += 1 + sovCaptainSoul(uint64(m.SoulId))
	}
	if m.Inherit {
		n += 2
	}
	return n
}

func (m *S2CFuShenProto) Size() (n int) {
	var l int
	_ = l
	if m.Captain != 0 {
		n += 1 + sovCaptainSoul(uint64(m.Captain))
	}
	if m.UpSoulId != 0 {
		n += 1 + sovCaptainSoul(uint64(m.UpSoulId))
	}
	if m.ReplaceSoulCaptain != 0 {
		n += 1 + sovCaptainSoul(uint64(m.ReplaceSoulCaptain))
	}
	return n
}

func (m *C2SUpgradeProto) Size() (n int) {
	var l int
	_ = l
	if m.CaptainSoulId != 0 {
		n += 1 + sovCaptainSoul(uint64(m.CaptainSoulId))
	}
	return n
}

func (m *S2CUpgradeProto) Size() (n int) {
	var l int
	_ = l
	if m.CaptainSoulId != 0 {
		n += 1 + sovCaptainSoul(uint64(m.CaptainSoulId))
	}
	if m.CaptainSoulLevel != 0 {
		n += 1 + sovCaptainSoul(uint64(m.CaptainSoulLevel))
	}
	return n
}

func (m *C2SUpgradeV2Proto) Size() (n int) {
	var l int
	_ = l
	if m.CaptainSoul != 0 {
		n += 1 + sovCaptainSoul(uint64(m.CaptainSoul))
	}
	if len(m.GoodsId) > 0 {
		for _, e := range m.GoodsId {
			n += 1 + sovCaptainSoul(uint64(e))
		}
	}
	if len(m.Count) > 0 {
		for _, e := range m.Count {
			n += 1 + sovCaptainSoul(uint64(e))
		}
	}
	return n
}

func (m *S2CUpgradeV2Proto) Size() (n int) {
	var l int
	_ = l
	if m.CaptainSoul != 0 {
		n += 1 + sovCaptainSoul(uint64(m.CaptainSoul))
	}
	if m.Exp != 0 {
		n += 1 + sovCaptainSoul(uint64(m.Exp))
	}
	return n
}

func (m *S2CLevelUpgradeProto) Size() (n int) {
	var l int
	_ = l
	if m.CaptainSoul != 0 {
		n += 1 + sovCaptainSoul(uint64(m.CaptainSoul))
	}
	if m.CaptainSoulLevel != 0 {
		n += 1 + sovCaptainSoul(uint64(m.CaptainSoulLevel))
	}
	l = len(m.Stat)
	if l > 0 {
		n += 1 + l + sovCaptainSoul(uint64(l))
	}
	return n
}

func (m *C2SUnlockSpellProto) Size() (n int) {
	var l int
	_ = l
	if m.CaptainSoul != 0 {
		n += 1 + sovCaptainSoul(uint64(m.CaptainSoul))
	}
	if m.Index != 0 {
		n += 1 + sovCaptainSoul(uint64(m.Index))
	}
	return n
}

func (m *S2CUnlockSpellProto) Size() (n int) {
	var l int
	_ = l
	if m.CaptainSoul != 0 {
		n += 1 + sovCaptainSoul(uint64(m.CaptainSoul))
	}
	if m.Index != 0 {
		n += 1 + sovCaptainSoul(uint64(m.Index))
	}
	l = len(m.Stat)
	if l > 0 {
		n += 1 + l + sovCaptainSoul(uint64(l))
	}
	return n
}

func (m *C2SMarkProto) Size() (n int) {
	var l int
	_ = l
	if m.CaptainSoul != 0 {
		n += 1 + sovCaptainSoul(uint64(m.CaptainSoul))
	}
	return n
}

func (m *S2CMarkProto) Size() (n int) {
	var l int
	_ = l
	if m.CaptainSoul != 0 {
		n += 1 + sovCaptainSoul(uint64(m.CaptainSoul))
	}
	return n
}

func (m *C2SRebornPreviewProto) Size() (n int) {
	var l int
	_ = l
	if m.CaptainSoul != 0 {
		n += 1 + sovCaptainSoul(uint64(m.CaptainSoul))
	}
	return n
}

func (m *S2CRebornPreviewProto) Size() (n int) {
	var l int
	_ = l
	if m.CaptainSoul != 0 {
		n += 1 + sovCaptainSoul(uint64(m.CaptainSoul))
	}
	l = len(m.Prize)
	if l > 0 {
		n += 1 + l + sovCaptainSoul(uint64(l))
	}
	return n
}

func (m *C2SRebornProto) Size() (n int) {
	var l int
	_ = l
	if m.CaptainSoul != 0 {
		n += 1 + sovCaptainSoul(uint64(m.CaptainSoul))
	}
	return n
}

func (m *S2CRebornProto) Size() (n int) {
	var l int
	_ = l
	if m.CaptainSoul != 0 {
		n += 1 + sovCaptainSoul(uint64(m.CaptainSoul))
	}
	return n
}

func sovCaptainSoul(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCaptainSoul(x uint64) (n int) {
	return sovCaptainSoul(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *S2CSoulActivatedProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCaptainSoul
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CSoulActivatedProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CSoulActivatedProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCaptainSoul
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCaptainSoul(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCaptainSoul
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SCollectFettersPrizeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCaptainSoul
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SCollectFettersPrizeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SCollectFettersPrizeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCaptainSoul(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCaptainSoul
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CCollectFettersPrizeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCaptainSoul
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CCollectFettersPrizeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CCollectFettersPrizeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCaptainSoul(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCaptainSoul
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SActivateFettersProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCaptainSoul
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SActivateFettersProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SActivateFettersProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCaptainSoul(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCaptainSoul
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CActivateFettersProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCaptainSoul
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CActivateFettersProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CActivateFettersProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCaptainSoul(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCaptainSoul
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SFuShenProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCaptainSoul
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SFuShenProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SFuShenProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Captain", wireType)
			}
			m.Captain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Captain |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Up", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Up = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoulId", wireType)
			}
			m.SoulId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SoulId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inherit", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Inherit = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCaptainSoul(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCaptainSoul
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CFuShenProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCaptainSoul
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CFuShenProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CFuShenProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Captain", wireType)
			}
			m.Captain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Captain |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpSoulId", wireType)
			}
			m.UpSoulId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpSoulId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplaceSoulCaptain", wireType)
			}
			m.ReplaceSoulCaptain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplaceSoulCaptain |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCaptainSoul(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCaptainSoul
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SUpgradeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCaptainSoul
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SUpgradeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SUpgradeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainSoulId", wireType)
			}
			m.CaptainSoulId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainSoulId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCaptainSoul(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCaptainSoul
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpgradeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCaptainSoul
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpgradeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpgradeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainSoulId", wireType)
			}
			m.CaptainSoulId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainSoulId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainSoulLevel", wireType)
			}
			m.CaptainSoulLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainSoulLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCaptainSoul(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCaptainSoul
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SUpgradeV2Proto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCaptainSoul
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SUpgradeV2Proto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SUpgradeV2Proto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainSoul", wireType)
			}
			m.CaptainSoul = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainSoul |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCaptainSoul
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GoodsId = append(m.GoodsId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCaptainSoul
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCaptainSoul
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCaptainSoul
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GoodsId = append(m.GoodsId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCaptainSoul
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Count = append(m.Count, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCaptainSoul
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCaptainSoul
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCaptainSoul
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Count = append(m.Count, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCaptainSoul(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCaptainSoul
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUpgradeV2Proto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCaptainSoul
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUpgradeV2Proto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUpgradeV2Proto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainSoul", wireType)
			}
			m.CaptainSoul = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainSoul |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			m.Exp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCaptainSoul(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCaptainSoul
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CLevelUpgradeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCaptainSoul
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CLevelUpgradeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CLevelUpgradeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainSoul", wireType)
			}
			m.CaptainSoul = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainSoul |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainSoulLevel", wireType)
			}
			m.CaptainSoulLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainSoulLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stat", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCaptainSoul
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stat = append(m.Stat[:0], dAtA[iNdEx:postIndex]...)
			if m.Stat == nil {
				m.Stat = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCaptainSoul(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCaptainSoul
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SUnlockSpellProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCaptainSoul
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SUnlockSpellProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SUnlockSpellProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainSoul", wireType)
			}
			m.CaptainSoul = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainSoul |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCaptainSoul(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCaptainSoul
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUnlockSpellProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCaptainSoul
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUnlockSpellProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUnlockSpellProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainSoul", wireType)
			}
			m.CaptainSoul = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainSoul |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stat", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCaptainSoul
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stat = append(m.Stat[:0], dAtA[iNdEx:postIndex]...)
			if m.Stat == nil {
				m.Stat = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCaptainSoul(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCaptainSoul
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SMarkProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCaptainSoul
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SMarkProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SMarkProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainSoul", wireType)
			}
			m.CaptainSoul = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainSoul |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCaptainSoul(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCaptainSoul
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CMarkProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCaptainSoul
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CMarkProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CMarkProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainSoul", wireType)
			}
			m.CaptainSoul = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainSoul |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCaptainSoul(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCaptainSoul
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SRebornPreviewProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCaptainSoul
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SRebornPreviewProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SRebornPreviewProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainSoul", wireType)
			}
			m.CaptainSoul = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainSoul |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCaptainSoul(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCaptainSoul
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CRebornPreviewProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCaptainSoul
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CRebornPreviewProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CRebornPreviewProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainSoul", wireType)
			}
			m.CaptainSoul = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainSoul |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prize", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCaptainSoul
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prize = append(m.Prize[:0], dAtA[iNdEx:postIndex]...)
			if m.Prize == nil {
				m.Prize = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCaptainSoul(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCaptainSoul
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SRebornProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCaptainSoul
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SRebornProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SRebornProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainSoul", wireType)
			}
			m.CaptainSoul = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainSoul |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCaptainSoul(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCaptainSoul
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CRebornProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCaptainSoul
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CRebornProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CRebornProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainSoul", wireType)
			}
			m.CaptainSoul = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainSoul |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCaptainSoul(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCaptainSoul
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCaptainSoul(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCaptainSoul
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCaptainSoul
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCaptainSoul
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCaptainSoul(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCaptainSoul = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCaptainSoul   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/gen/pb/captain_soul/captain_soul.proto", fileDescriptorCaptainSoul)
}

var fileDescriptorCaptainSoul = []byte{
	// 578 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xd1, 0x6e, 0xd3, 0x3c,
	0x14, 0x5e, 0xd2, 0x65, 0x9b, 0xce, 0xdf, 0x7f, 0xeb, 0xb2, 0x4e, 0x8b, 0x04, 0x54, 0x25, 0x17,
	0xa8, 0x08, 0x58, 0xc1, 0xbd, 0x40, 0x70, 0x05, 0xb3, 0x34, 0x0d, 0x09, 0x50, 0x15, 0x0b, 0x2e,
	0xb8, 0xa9, 0xd2, 0xc4, 0x4a, 0xad, 0xb9, 0xb1, 0x95, 0x3a, 0xdd, 0x34, 0x5e, 0x84, 0x47, 0xe2,
	0x92, 0x47, 0x40, 0xe5, 0x45, 0x90, 0x9d, 0xa4, 0x6b, 0x25, 0x90, 0xd2, 0x89, 0xab, 0xf8, 0x9c,
	0xf3, 0x7d, 0xe7, 0x3b, 0xfe, 0xac, 0x1c, 0x78, 0x93, 0x30, 0x35, 0xc9, 0xc7, 0xa7, 0x91, 0x98,
	0xf6, 0x39, 0x4b, 0x26, 0x4a, 0x86, 0x57, 0xfd, 0x69, 0xc8, 0xe9, 0xcb, 0x7e, 0x42, 0xd3, 0xbe,
	0x1c, 0xf7, 0xa3, 0x50, 0xaa, 0x90, 0xa5, 0xa3, 0x99, 0xc8, 0xf9, 0x5a, 0x70, 0x2a, 0x33, 0xa1,
	0x84, 0xeb, 0x98, 0x8f, 0xff, 0x04, 0x8e, 0x09, 0xc2, 0x44, 0xe4, 0xfc, 0x6d, 0xa4, 0xd8, 0x3c,
	0x54, 0x34, 0x1e, 0x9a, 0xba, 0x0b, 0xdb, 0x71, 0xa8, 0x42, 0xcf, 0xee, 0x5a, 0xbd, 0x66, 0x60,
	0xce, 0xfe, 0x33, 0xb8, 0x87, 0x11, 0xc1, 0x82, 0x73, 0x1a, 0xa9, 0x73, 0xaa, 0x14, 0xcd, 0x66,
	0xc3, 0x8c, 0xdd, 0xd0, 0x82, 0xb2, 0x0f, 0x36, 0x8b, 0x3d, 0xab, 0x6b, 0xf5, 0x9c, 0xc0, 0x66,
	0xb1, 0x86, 0x13, 0x84, 0x6b, 0xc3, 0x1f, 0xc3, 0x09, 0x46, 0xa4, 0x1a, 0x63, 0x89, 0xff, 0x0b,
	0x94, 0x20, 0x5c, 0x0b, 0x3a, 0x85, 0x7d, 0x8c, 0xc8, 0x79, 0x4e, 0x26, 0x34, 0x2d, 0x10, 0x1e,
	0xec, 0x96, 0x7e, 0x94, 0xb0, 0x2a, 0xd4, 0xdc, 0x5c, 0x9a, 0x1b, 0xef, 0x05, 0x76, 0x2e, 0xdd,
	0x13, 0xd8, 0xd5, 0x8e, 0x8d, 0x58, 0xec, 0x6d, 0x1b, 0xe4, 0x8e, 0x0e, 0xdf, 0xc5, 0xba, 0x05,
	0x4b, 0x27, 0x34, 0x63, 0xca, 0x73, 0x0c, 0xba, 0x0a, 0xfd, 0x1b, 0xd8, 0x27, 0x08, 0xd7, 0x93,
	0xbb, 0x0f, 0x90, 0xcb, 0x51, 0xa5, 0xd0, 0x30, 0xc5, 0xbd, 0x5c, 0x92, 0x42, 0xe3, 0x39, 0xb4,
	0x33, 0x2a, 0x79, 0x18, 0xd1, 0x02, 0x52, 0x35, 0x29, 0x26, 0x71, 0xcb, 0x9a, 0x06, 0xe3, 0xa2,
	0xe2, 0xbf, 0x82, 0x03, 0x8c, 0xc8, 0x27, 0x99, 0x64, 0x61, 0x5c, 0x7a, 0xfc, 0x08, 0x0e, 0x56,
	0xdf, 0x7e, 0xb4, 0xb4, 0xe6, 0xff, 0x32, 0x5d, 0x88, 0xf9, 0x09, 0x1c, 0x10, 0x84, 0xef, 0x42,
	0x75, 0x9f, 0x82, 0xbb, 0x86, 0xe3, 0x74, 0x4e, 0xb9, 0x31, 0xd1, 0x09, 0x5a, 0x2b, 0xd0, 0xf7,
	0x3a, 0xef, 0x0b, 0x38, 0xbc, 0x9d, 0xf1, 0x33, 0x2a, 0xa4, 0x1e, 0x42, 0x73, 0xb5, 0x45, 0xa9,
	0xf3, 0xdf, 0x0a, 0xd9, 0x7d, 0x00, 0x7b, 0x89, 0x10, 0xf1, 0x4c, 0x8f, 0x61, 0x77, 0x1b, 0x3d,
	0xe7, 0xcc, 0x6e, 0x6d, 0x05, 0xbb, 0x26, 0x67, 0x1e, 0xc4, 0x89, 0x44, 0x9e, 0x2a, 0xaf, 0xb1,
	0xac, 0x15, 0x09, 0xff, 0x02, 0x0e, 0x6f, 0x6f, 0xb6, 0x81, 0x60, 0x0b, 0x1a, 0xf4, 0x5a, 0x96,
	0xaf, 0xa2, 0x8f, 0xfe, 0x57, 0x68, 0x13, 0x84, 0xcd, 0x35, 0xd6, 0x8c, 0xaa, 0xd1, 0x6c, 0x23,
	0x8f, 0xf4, 0xaf, 0x37, 0x53, 0xa1, 0x32, 0xda, 0xcd, 0xc0, 0x9c, 0xfd, 0x8f, 0x70, 0xa4, 0x7d,
	0x4b, 0xb9, 0x88, 0x2e, 0x89, 0xa4, 0x9c, 0xd7, 0xd6, 0x6e, 0x83, 0xc3, 0xd2, 0x98, 0x5e, 0x97,
	0x72, 0x45, 0xe0, 0x8f, 0xe1, 0x48, 0xdb, 0xf2, 0xaf, 0xfa, 0xfd, 0x71, 0xe6, 0x17, 0xd0, 0xc4,
	0x88, 0x7c, 0x08, 0xb3, 0xcb, 0xba, 0xcd, 0x35, 0x85, 0x20, 0xbc, 0x11, 0xe5, 0x35, 0x1c, 0x63,
	0x44, 0x02, 0x3a, 0x16, 0x59, 0x3a, 0xcc, 0xe8, 0x9c, 0xd1, 0xab, 0xda, 0xdc, 0xa1, 0xd9, 0x7e,
	0x77, 0xe2, 0x6a, 0x1f, 0xa4, 0x5e, 0x66, 0xe6, 0x87, 0x6c, 0x06, 0x45, 0xe0, 0x0f, 0xcc, 0xba,
	0xa9, 0x3a, 0xd6, 0x1c, 0x63, 0x60, 0x96, 0xc6, 0x66, 0xa4, 0xb3, 0xee, 0xf7, 0x45, 0xc7, 0xfa,
	0xb1, 0xe8, 0x58, 0x3f, 0x17, 0x1d, 0xeb, 0xdb, 0xaf, 0xce, 0xd6, 0x85, 0xf5, 0x65, 0x8d, 0x34,
	0xde, 0x31, 0x2b, 0x7e, 0xf0, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xa1, 0x60, 0xed, 0xd1, 0x2d, 0x06,
	0x00, 0x00,
}
