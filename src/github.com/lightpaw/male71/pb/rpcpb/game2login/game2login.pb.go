// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/pb/rpcpb/game2login/game2login.proto
// DO NOT EDIT!

/*
	Package game2login is a generated protocol buffer package.

	It is generated from these files:
		github.com/lightpaw/male7/pb/rpcpb/game2login/game2login.proto

	It has these top-level messages:
		C2SVerifyLoginTokenProto
		S2CVerifyLoginTokenProto
		C2SWriteTlogProto
		S2CWriteTlogProto
		C2SPushProto
		S2CPushProto
		C2SPushMultiProto
		S2CPushMultiProto
*/
package game2login

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type C2SVerifyLoginTokenProto struct {
	HeroId   int64  `protobuf:"varint,1,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
	Token    string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	ClientIp string `protobuf:"bytes,3,opt,name=client_ip,json=clientIp,proto3" json:"client_ip,omitempty"`
	Pf       uint32 `protobuf:"varint,4,opt,name=pf,proto3" json:"pf,omitempty"`
}

func (m *C2SVerifyLoginTokenProto) Reset()         { *m = C2SVerifyLoginTokenProto{} }
func (m *C2SVerifyLoginTokenProto) String() string { return proto.CompactTextString(m) }
func (*C2SVerifyLoginTokenProto) ProtoMessage()    {}
func (*C2SVerifyLoginTokenProto) Descriptor() ([]byte, []int) {
	return fileDescriptorGame2Login, []int{0}
}

func (m *C2SVerifyLoginTokenProto) GetHeroId() int64 {
	if m != nil {
		return m.HeroId
	}
	return 0
}

func (m *C2SVerifyLoginTokenProto) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *C2SVerifyLoginTokenProto) GetClientIp() string {
	if m != nil {
		return m.ClientIp
	}
	return ""
}

func (m *C2SVerifyLoginTokenProto) GetPf() uint32 {
	if m != nil {
		return m.Pf
	}
	return 0
}

type S2CVerifyLoginTokenProto struct {
	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrMsg  string `protobuf:"bytes,2,opt,name=err_msg,json=errMsg,proto3" json:"err_msg,omitempty"`
}

func (m *S2CVerifyLoginTokenProto) Reset()         { *m = S2CVerifyLoginTokenProto{} }
func (m *S2CVerifyLoginTokenProto) String() string { return proto.CompactTextString(m) }
func (*S2CVerifyLoginTokenProto) ProtoMessage()    {}
func (*S2CVerifyLoginTokenProto) Descriptor() ([]byte, []int) {
	return fileDescriptorGame2Login, []int{1}
}

func (m *S2CVerifyLoginTokenProto) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *S2CVerifyLoginTokenProto) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type C2SWriteTlogProto struct {
	HeroId int64 `protobuf:"varint,1,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
}

func (m *C2SWriteTlogProto) Reset()                    { *m = C2SWriteTlogProto{} }
func (m *C2SWriteTlogProto) String() string            { return proto.CompactTextString(m) }
func (*C2SWriteTlogProto) ProtoMessage()               {}
func (*C2SWriteTlogProto) Descriptor() ([]byte, []int) { return fileDescriptorGame2Login, []int{2} }

func (m *C2SWriteTlogProto) GetHeroId() int64 {
	if m != nil {
		return m.HeroId
	}
	return 0
}

type S2CWriteTlogProto struct {
	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrMsg  string `protobuf:"bytes,2,opt,name=err_msg,json=errMsg,proto3" json:"err_msg,omitempty"`
}

func (m *S2CWriteTlogProto) Reset()                    { *m = S2CWriteTlogProto{} }
func (m *S2CWriteTlogProto) String() string            { return proto.CompactTextString(m) }
func (*S2CWriteTlogProto) ProtoMessage()               {}
func (*S2CWriteTlogProto) Descriptor() ([]byte, []int) { return fileDescriptorGame2Login, []int{3} }

func (m *S2CWriteTlogProto) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *S2CWriteTlogProto) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type C2SPushProto struct {
	HeroId     int64  `protobuf:"varint,1,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
	Sid        uint32 `protobuf:"varint,2,opt,name=sid,proto3" json:"sid,omitempty"`
	Title      string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Content    string `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	StartTime  int64  `protobuf:"varint,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	ExpireTime int64  `protobuf:"varint,6,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
}

func (m *C2SPushProto) Reset()                    { *m = C2SPushProto{} }
func (m *C2SPushProto) String() string            { return proto.CompactTextString(m) }
func (*C2SPushProto) ProtoMessage()               {}
func (*C2SPushProto) Descriptor() ([]byte, []int) { return fileDescriptorGame2Login, []int{4} }

func (m *C2SPushProto) GetHeroId() int64 {
	if m != nil {
		return m.HeroId
	}
	return 0
}

func (m *C2SPushProto) GetSid() uint32 {
	if m != nil {
		return m.Sid
	}
	return 0
}

func (m *C2SPushProto) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *C2SPushProto) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *C2SPushProto) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *C2SPushProto) GetExpireTime() int64 {
	if m != nil {
		return m.ExpireTime
	}
	return 0
}

type S2CPushProto struct {
	Success  bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrMsg   string `protobuf:"bytes,2,opt,name=err_msg,json=errMsg,proto3" json:"err_msg,omitempty"`
	DontPush bool   `protobuf:"varint,3,opt,name=dont_push,json=dontPush,proto3" json:"dont_push,omitempty"`
}

func (m *S2CPushProto) Reset()                    { *m = S2CPushProto{} }
func (m *S2CPushProto) String() string            { return proto.CompactTextString(m) }
func (*S2CPushProto) ProtoMessage()               {}
func (*S2CPushProto) Descriptor() ([]byte, []int) { return fileDescriptorGame2Login, []int{5} }

func (m *S2CPushProto) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *S2CPushProto) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *S2CPushProto) GetDontPush() bool {
	if m != nil {
		return m.DontPush
	}
	return false
}

type C2SPushMultiProto struct {
	HeroIds    []int64 `protobuf:"varint,1,rep,name=hero_ids,json=heroIds" json:"hero_ids,omitempty"`
	Sid        uint32  `protobuf:"varint,2,opt,name=sid,proto3" json:"sid,omitempty"`
	Title      string  `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Content    string  `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	StartTime  int64   `protobuf:"varint,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	ExpireTime int64   `protobuf:"varint,6,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
}

func (m *C2SPushMultiProto) Reset()                    { *m = C2SPushMultiProto{} }
func (m *C2SPushMultiProto) String() string            { return proto.CompactTextString(m) }
func (*C2SPushMultiProto) ProtoMessage()               {}
func (*C2SPushMultiProto) Descriptor() ([]byte, []int) { return fileDescriptorGame2Login, []int{6} }

func (m *C2SPushMultiProto) GetHeroIds() []int64 {
	if m != nil {
		return m.HeroIds
	}
	return nil
}

func (m *C2SPushMultiProto) GetSid() uint32 {
	if m != nil {
		return m.Sid
	}
	return 0
}

func (m *C2SPushMultiProto) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *C2SPushMultiProto) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *C2SPushMultiProto) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *C2SPushMultiProto) GetExpireTime() int64 {
	if m != nil {
		return m.ExpireTime
	}
	return 0
}

type S2CPushMultiProto struct {
	Success         bool    `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrMsg          string  `protobuf:"bytes,2,opt,name=err_msg,json=errMsg,proto3" json:"err_msg,omitempty"`
	DontPushHeroIds []int64 `protobuf:"varint,3,rep,name=dont_push_hero_ids,json=dontPushHeroIds" json:"dont_push_hero_ids,omitempty"`
}

func (m *S2CPushMultiProto) Reset()                    { *m = S2CPushMultiProto{} }
func (m *S2CPushMultiProto) String() string            { return proto.CompactTextString(m) }
func (*S2CPushMultiProto) ProtoMessage()               {}
func (*S2CPushMultiProto) Descriptor() ([]byte, []int) { return fileDescriptorGame2Login, []int{7} }

func (m *S2CPushMultiProto) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *S2CPushMultiProto) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *S2CPushMultiProto) GetDontPushHeroIds() []int64 {
	if m != nil {
		return m.DontPushHeroIds
	}
	return nil
}

func init() {
	proto.RegisterType((*C2SVerifyLoginTokenProto)(nil), "proto.C2SVerifyLoginTokenProto")
	proto.RegisterType((*S2CVerifyLoginTokenProto)(nil), "proto.S2CVerifyLoginTokenProto")
	proto.RegisterType((*C2SWriteTlogProto)(nil), "proto.C2SWriteTlogProto")
	proto.RegisterType((*S2CWriteTlogProto)(nil), "proto.S2CWriteTlogProto")
	proto.RegisterType((*C2SPushProto)(nil), "proto.C2SPushProto")
	proto.RegisterType((*S2CPushProto)(nil), "proto.S2CPushProto")
	proto.RegisterType((*C2SPushMultiProto)(nil), "proto.C2SPushMultiProto")
	proto.RegisterType((*S2CPushMultiProto)(nil), "proto.S2CPushMultiProto")
}
func (m *C2SVerifyLoginTokenProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SVerifyLoginTokenProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame2Login(dAtA, i, uint64(m.HeroId))
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGame2Login(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if len(m.ClientIp) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGame2Login(dAtA, i, uint64(len(m.ClientIp)))
		i += copy(dAtA[i:], m.ClientIp)
	}
	if m.Pf != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGame2Login(dAtA, i, uint64(m.Pf))
	}
	return i, nil
}

func (m *S2CVerifyLoginTokenProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CVerifyLoginTokenProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Success {
		dAtA[i] = 0x8
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.ErrMsg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGame2Login(dAtA, i, uint64(len(m.ErrMsg)))
		i += copy(dAtA[i:], m.ErrMsg)
	}
	return i, nil
}

func (m *C2SWriteTlogProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SWriteTlogProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame2Login(dAtA, i, uint64(m.HeroId))
	}
	return i, nil
}

func (m *S2CWriteTlogProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CWriteTlogProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Success {
		dAtA[i] = 0x8
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.ErrMsg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGame2Login(dAtA, i, uint64(len(m.ErrMsg)))
		i += copy(dAtA[i:], m.ErrMsg)
	}
	return i, nil
}

func (m *C2SPushProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SPushProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame2Login(dAtA, i, uint64(m.HeroId))
	}
	if m.Sid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGame2Login(dAtA, i, uint64(m.Sid))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGame2Login(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGame2Login(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if m.StartTime != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGame2Login(dAtA, i, uint64(m.StartTime))
	}
	if m.ExpireTime != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGame2Login(dAtA, i, uint64(m.ExpireTime))
	}
	return i, nil
}

func (m *S2CPushProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CPushProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Success {
		dAtA[i] = 0x8
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.ErrMsg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGame2Login(dAtA, i, uint64(len(m.ErrMsg)))
		i += copy(dAtA[i:], m.ErrMsg)
	}
	if m.DontPush {
		dAtA[i] = 0x18
		i++
		if m.DontPush {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *C2SPushMultiProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SPushMultiProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HeroIds) > 0 {
		for _, num := range m.HeroIds {
			dAtA[i] = 0x8
			i++
			i = encodeVarintGame2Login(dAtA, i, uint64(num))
		}
	}
	if m.Sid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGame2Login(dAtA, i, uint64(m.Sid))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGame2Login(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGame2Login(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if m.StartTime != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGame2Login(dAtA, i, uint64(m.StartTime))
	}
	if m.ExpireTime != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGame2Login(dAtA, i, uint64(m.ExpireTime))
	}
	return i, nil
}

func (m *S2CPushMultiProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CPushMultiProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Success {
		dAtA[i] = 0x8
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.ErrMsg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGame2Login(dAtA, i, uint64(len(m.ErrMsg)))
		i += copy(dAtA[i:], m.ErrMsg)
	}
	if len(m.DontPushHeroIds) > 0 {
		for _, num := range m.DontPushHeroIds {
			dAtA[i] = 0x18
			i++
			i = encodeVarintGame2Login(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func encodeFixed64Game2Login(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Game2Login(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintGame2Login(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *C2SVerifyLoginTokenProto) Size() (n int) {
	var l int
	_ = l
	if m.HeroId != 0 {
		n += 1 + sovGame2Login(uint64(m.HeroId))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovGame2Login(uint64(l))
	}
	l = len(m.ClientIp)
	if l > 0 {
		n += 1 + l + sovGame2Login(uint64(l))
	}
	if m.Pf != 0 {
		n += 1 + sovGame2Login(uint64(m.Pf))
	}
	return n
}

func (m *S2CVerifyLoginTokenProto) Size() (n int) {
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	l = len(m.ErrMsg)
	if l > 0 {
		n += 1 + l + sovGame2Login(uint64(l))
	}
	return n
}

func (m *C2SWriteTlogProto) Size() (n int) {
	var l int
	_ = l
	if m.HeroId != 0 {
		n += 1 + sovGame2Login(uint64(m.HeroId))
	}
	return n
}

func (m *S2CWriteTlogProto) Size() (n int) {
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	l = len(m.ErrMsg)
	if l > 0 {
		n += 1 + l + sovGame2Login(uint64(l))
	}
	return n
}

func (m *C2SPushProto) Size() (n int) {
	var l int
	_ = l
	if m.HeroId != 0 {
		n += 1 + sovGame2Login(uint64(m.HeroId))
	}
	if m.Sid != 0 {
		n += 1 + sovGame2Login(uint64(m.Sid))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovGame2Login(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovGame2Login(uint64(l))
	}
	if m.StartTime != 0 {
		n += 1 + sovGame2Login(uint64(m.StartTime))
	}
	if m.ExpireTime != 0 {
		n += 1 + sovGame2Login(uint64(m.ExpireTime))
	}
	return n
}

func (m *S2CPushProto) Size() (n int) {
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	l = len(m.ErrMsg)
	if l > 0 {
		n += 1 + l + sovGame2Login(uint64(l))
	}
	if m.DontPush {
		n += 2
	}
	return n
}

func (m *C2SPushMultiProto) Size() (n int) {
	var l int
	_ = l
	if len(m.HeroIds) > 0 {
		for _, e := range m.HeroIds {
			n += 1 + sovGame2Login(uint64(e))
		}
	}
	if m.Sid != 0 {
		n += 1 + sovGame2Login(uint64(m.Sid))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovGame2Login(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovGame2Login(uint64(l))
	}
	if m.StartTime != 0 {
		n += 1 + sovGame2Login(uint64(m.StartTime))
	}
	if m.ExpireTime != 0 {
		n += 1 + sovGame2Login(uint64(m.ExpireTime))
	}
	return n
}

func (m *S2CPushMultiProto) Size() (n int) {
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	l = len(m.ErrMsg)
	if l > 0 {
		n += 1 + l + sovGame2Login(uint64(l))
	}
	if len(m.DontPushHeroIds) > 0 {
		for _, e := range m.DontPushHeroIds {
			n += 1 + sovGame2Login(uint64(e))
		}
	}
	return n
}

func sovGame2Login(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGame2Login(x uint64) (n int) {
	return sovGame2Login(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *C2SVerifyLoginTokenProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame2Login
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SVerifyLoginTokenProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SVerifyLoginTokenProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroId", wireType)
			}
			m.HeroId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame2Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame2Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame2Login
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame2Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame2Login
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pf", wireType)
			}
			m.Pf = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame2Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pf |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame2Login(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame2Login
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CVerifyLoginTokenProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame2Login
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CVerifyLoginTokenProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CVerifyLoginTokenProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame2Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame2Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame2Login
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame2Login(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame2Login
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SWriteTlogProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame2Login
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SWriteTlogProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SWriteTlogProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroId", wireType)
			}
			m.HeroId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame2Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame2Login(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame2Login
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CWriteTlogProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame2Login
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CWriteTlogProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CWriteTlogProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame2Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame2Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame2Login
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame2Login(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame2Login
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SPushProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame2Login
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SPushProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SPushProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroId", wireType)
			}
			m.HeroId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame2Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame2Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame2Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame2Login
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame2Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame2Login
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame2Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireTime", wireType)
			}
			m.ExpireTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame2Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame2Login(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame2Login
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CPushProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame2Login
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CPushProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CPushProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame2Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame2Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame2Login
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DontPush", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame2Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DontPush = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGame2Login(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame2Login
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SPushMultiProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame2Login
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SPushMultiProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SPushMultiProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame2Login
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.HeroIds = append(m.HeroIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame2Login
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGame2Login
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGame2Login
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.HeroIds = append(m.HeroIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIds", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame2Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame2Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame2Login
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame2Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame2Login
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame2Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireTime", wireType)
			}
			m.ExpireTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame2Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame2Login(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame2Login
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CPushMultiProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame2Login
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CPushMultiProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CPushMultiProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame2Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame2Login
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame2Login
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame2Login
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DontPushHeroIds = append(m.DontPushHeroIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGame2Login
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGame2Login
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGame2Login
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DontPushHeroIds = append(m.DontPushHeroIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DontPushHeroIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame2Login(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame2Login
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGame2Login(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGame2Login
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGame2Login
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGame2Login
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGame2Login
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGame2Login
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGame2Login(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGame2Login = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGame2Login   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/pb/rpcpb/game2login/game2login.proto", fileDescriptorGame2Login)
}

var fileDescriptorGame2Login = []byte{
	// 459 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x93, 0x4f, 0x8b, 0xd3, 0x40,
	0x18, 0xc6, 0x77, 0x1a, 0xdb, 0xa6, 0xaf, 0xbb, 0xba, 0x1b, 0x04, 0x03, 0xb2, 0xb1, 0xe4, 0xd4,
	0x83, 0x6c, 0x20, 0x1e, 0xbc, 0x79, 0xd8, 0x80, 0xec, 0x82, 0x85, 0x25, 0x29, 0x0a, 0x1e, 0x0c,
	0x6d, 0xfa, 0x36, 0x19, 0x4c, 0x32, 0xc3, 0xcc, 0xc4, 0xd5, 0x6f, 0xe2, 0x57, 0xf0, 0xee, 0x87,
	0xf0, 0xe8, 0x47, 0x90, 0xfa, 0x45, 0x64, 0x66, 0xda, 0xae, 0x2c, 0xa2, 0xd8, 0x93, 0xa7, 0xbe,
	0xff, 0x3a, 0xcf, 0xf3, 0xfe, 0x26, 0x03, 0xcf, 0x4b, 0xaa, 0xaa, 0x6e, 0x71, 0x56, 0xb0, 0x26,
	0xaa, 0x69, 0x59, 0x29, 0x3e, 0xbf, 0x8e, 0x9a, 0x79, 0x8d, 0xcf, 0x22, 0xbe, 0x88, 0x04, 0x2f,
	0xf8, 0x22, 0x2a, 0xe7, 0x0d, 0xc6, 0x35, 0x2b, 0x69, 0xfb, 0x4b, 0x78, 0xc6, 0x05, 0x53, 0xcc,
	0xeb, 0x9b, 0x9f, 0xf0, 0x3d, 0xf8, 0x49, 0x9c, 0xbd, 0x42, 0x41, 0x57, 0x1f, 0x5f, 0xea, 0xf6,
	0x8c, 0xbd, 0xc3, 0xf6, 0xca, 0x8c, 0x3c, 0x84, 0x61, 0x85, 0x82, 0xe5, 0x74, 0xe9, 0x93, 0x31,
	0x99, 0x38, 0xe9, 0x40, 0xa7, 0x97, 0x4b, 0xef, 0x01, 0xf4, 0x95, 0x1e, 0xf3, 0x7b, 0x63, 0x32,
	0x19, 0xa5, 0x36, 0xf1, 0x1e, 0xc1, 0xa8, 0xa8, 0x29, 0xb6, 0x2a, 0xa7, 0xdc, 0x77, 0x4c, 0xc7,
	0xb5, 0x85, 0x4b, 0xee, 0xdd, 0x83, 0x1e, 0x5f, 0xf9, 0x77, 0xc6, 0x64, 0x72, 0x94, 0xf6, 0xf8,
	0x2a, 0x9c, 0x82, 0x9f, 0xc5, 0xc9, 0xef, 0x75, 0x7d, 0x18, 0xca, 0xae, 0x28, 0x50, 0x4a, 0xa3,
	0xeb, 0xa6, 0xdb, 0x54, 0x3b, 0x42, 0x21, 0xf2, 0x46, 0x96, 0x1b, 0xe9, 0x01, 0x0a, 0x31, 0x95,
	0x65, 0xf8, 0x04, 0x4e, 0x92, 0x38, 0x7b, 0x2d, 0xa8, 0xc2, 0x59, 0xcd, 0xca, 0x3f, 0xfb, 0x0f,
	0x5f, 0xc0, 0x49, 0x16, 0x27, 0xb7, 0xa6, 0xf7, 0x50, 0xfd, 0x4c, 0xe0, 0x30, 0x89, 0xb3, 0xab,
	0x4e, 0x56, 0x7f, 0x21, 0x76, 0x0c, 0x8e, 0xa4, 0x4b, 0xf3, 0xf7, 0xa3, 0x54, 0x87, 0x86, 0x21,
	0x55, 0x35, 0x6e, 0x48, 0xd9, 0x44, 0x9b, 0x28, 0x58, 0xab, 0xb0, 0x55, 0x86, 0xd5, 0x28, 0xdd,
	0xa6, 0xde, 0x29, 0x80, 0x54, 0x73, 0xa1, 0x72, 0x45, 0x1b, 0xf4, 0xfb, 0xe6, 0xf4, 0x91, 0xa9,
	0xcc, 0x68, 0x83, 0xde, 0x63, 0xb8, 0x8b, 0x1f, 0x38, 0x15, 0x68, 0xfb, 0x03, 0xd3, 0x07, 0x5b,
	0xd2, 0x03, 0xe1, 0x5b, 0x38, 0xcc, 0xe2, 0xe4, 0xc6, 0xea, 0xbf, 0xaf, 0xab, 0x2f, 0x78, 0xc9,
	0x5a, 0x95, 0xf3, 0x4e, 0x56, 0xc6, 0xb6, 0x9b, 0xba, 0xba, 0xa0, 0x0f, 0x0d, 0xbf, 0x10, 0x73,
	0x05, 0x3a, 0x9e, 0x76, 0xb5, 0xa2, 0x56, 0xe5, 0x14, 0xdc, 0x0d, 0x10, 0x2d, 0xe3, 0x4c, 0x9c,
	0xf3, 0xde, 0xf1, 0x41, 0x3a, 0xb4, 0x54, 0xe4, 0x7f, 0x80, 0xe5, 0xda, 0x7c, 0x0a, 0xb7, 0x5c,
	0xef, 0xc1, 0x26, 0x02, 0x6f, 0xc7, 0x26, 0xdf, 0xad, 0xec, 0xec, 0x56, 0xbe, 0xbf, 0x05, 0x75,
	0x61, 0x57, 0x3f, 0x0f, 0xbe, 0xae, 0x03, 0xf2, 0x6d, 0x1d, 0x90, 0xef, 0xeb, 0x80, 0x7c, 0xfa,
	0x11, 0x1c, 0x5c, 0x90, 0x37, 0x70, 0xf3, 0x4a, 0x17, 0x03, 0xf3, 0x3e, 0x9f, 0xfe, 0x0c, 0x00,
	0x00, 0xff, 0xff, 0xd2, 0x83, 0x98, 0x5d, 0xe8, 0x03, 0x00, 0x00,
}
