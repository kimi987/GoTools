// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/pb/rpcpb/game2tss/game2tss.proto
// DO NOT EDIT!

/*
	Package game2tss is a generated protocol buffer package.

	It is generated from these files:
		github.com/lightpaw/male7/pb/rpcpb/game2tss/game2tss.proto

	It has these top-level messages:
		C2SUicJudgeUserInputNameV2Proto
		S2CUicJudgeUserInputNameV2Proto
		C2SUicJudgeUserInputChatV2Proto
		S2CUicJudgeUserInputChatV2Proto
		C2SUicChatCallbackProto
		S2CUicChatCallbackProto
*/
package game2tss

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type C2SUicJudgeUserInputNameV2Proto struct {
	Msg       string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	IfReplace bool   `protobuf:"varint,2,opt,name=if_replace,json=ifReplace,proto3" json:"if_replace,omitempty"`
}

func (m *C2SUicJudgeUserInputNameV2Proto) Reset()         { *m = C2SUicJudgeUserInputNameV2Proto{} }
func (m *C2SUicJudgeUserInputNameV2Proto) String() string { return proto.CompactTextString(m) }
func (*C2SUicJudgeUserInputNameV2Proto) ProtoMessage()    {}
func (*C2SUicJudgeUserInputNameV2Proto) Descriptor() ([]byte, []int) {
	return fileDescriptorGame2Tss, []int{0}
}

func (m *C2SUicJudgeUserInputNameV2Proto) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *C2SUicJudgeUserInputNameV2Proto) GetIfReplace() bool {
	if m != nil {
		return m.IfReplace
	}
	return false
}

type S2CUicJudgeUserInputNameV2Proto struct {
	Ret           int32  `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`
	RetMsg        string `protobuf:"bytes,2,opt,name=ret_msg,json=retMsg,proto3" json:"ret_msg,omitempty"`
	MsgResultFlag int32  `protobuf:"varint,3,opt,name=msg_result_flag,json=msgResultFlag,proto3" json:"msg_result_flag,omitempty"`
	ReplaceMsg    string `protobuf:"bytes,4,opt,name=replace_msg,json=replaceMsg,proto3" json:"replace_msg,omitempty"`
}

func (m *S2CUicJudgeUserInputNameV2Proto) Reset()         { *m = S2CUicJudgeUserInputNameV2Proto{} }
func (m *S2CUicJudgeUserInputNameV2Proto) String() string { return proto.CompactTextString(m) }
func (*S2CUicJudgeUserInputNameV2Proto) ProtoMessage()    {}
func (*S2CUicJudgeUserInputNameV2Proto) Descriptor() ([]byte, []int) {
	return fileDescriptorGame2Tss, []int{1}
}

func (m *S2CUicJudgeUserInputNameV2Proto) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

func (m *S2CUicJudgeUserInputNameV2Proto) GetRetMsg() string {
	if m != nil {
		return m.RetMsg
	}
	return ""
}

func (m *S2CUicJudgeUserInputNameV2Proto) GetMsgResultFlag() int32 {
	if m != nil {
		return m.MsgResultFlag
	}
	return 0
}

func (m *S2CUicJudgeUserInputNameV2Proto) GetReplaceMsg() string {
	if m != nil {
		return m.ReplaceMsg
	}
	return ""
}

type C2SUicJudgeUserInputChatV2Proto struct {
	Openid       string `protobuf:"bytes,1,opt,name=openid,proto3" json:"openid,omitempty"`
	Platid       int32  `protobuf:"varint,2,opt,name=platid,proto3" json:"platid,omitempty"`
	WorldId      int64  `protobuf:"varint,3,opt,name=world_id,json=worldId,proto3" json:"world_id,omitempty"`
	MsgCategory  int32  `protobuf:"varint,4,opt,name=msg_category,json=msgCategory,proto3" json:"msg_category,omitempty"`
	ChannelId    int64  `protobuf:"varint,5,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	ClientIp     int32  `protobuf:"varint,6,opt,name=client_ip,json=clientIp,proto3" json:"client_ip,omitempty"`
	RoldId       int64  `protobuf:"varint,7,opt,name=rold_id,json=roldId,proto3" json:"rold_id,omitempty"`
	RoleName     string `protobuf:"bytes,8,opt,name=role_name,json=roleName,proto3" json:"role_name,omitempty"`
	RoleLevel    int32  `protobuf:"varint,9,opt,name=role_level,json=roleLevel,proto3" json:"role_level,omitempty"`
	Msg          string `protobuf:"bytes,10,opt,name=msg,proto3" json:"msg,omitempty"`
	CallbackData []byte `protobuf:"bytes,11,opt,name=callback_data,json=callbackData,proto3" json:"callback_data,omitempty"`
	CallbackAddr string `protobuf:"bytes,12,opt,name=callback_addr,json=callbackAddr,proto3" json:"callback_addr,omitempty"`
}

func (m *C2SUicJudgeUserInputChatV2Proto) Reset()         { *m = C2SUicJudgeUserInputChatV2Proto{} }
func (m *C2SUicJudgeUserInputChatV2Proto) String() string { return proto.CompactTextString(m) }
func (*C2SUicJudgeUserInputChatV2Proto) ProtoMessage()    {}
func (*C2SUicJudgeUserInputChatV2Proto) Descriptor() ([]byte, []int) {
	return fileDescriptorGame2Tss, []int{2}
}

func (m *C2SUicJudgeUserInputChatV2Proto) GetOpenid() string {
	if m != nil {
		return m.Openid
	}
	return ""
}

func (m *C2SUicJudgeUserInputChatV2Proto) GetPlatid() int32 {
	if m != nil {
		return m.Platid
	}
	return 0
}

func (m *C2SUicJudgeUserInputChatV2Proto) GetWorldId() int64 {
	if m != nil {
		return m.WorldId
	}
	return 0
}

func (m *C2SUicJudgeUserInputChatV2Proto) GetMsgCategory() int32 {
	if m != nil {
		return m.MsgCategory
	}
	return 0
}

func (m *C2SUicJudgeUserInputChatV2Proto) GetChannelId() int64 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *C2SUicJudgeUserInputChatV2Proto) GetClientIp() int32 {
	if m != nil {
		return m.ClientIp
	}
	return 0
}

func (m *C2SUicJudgeUserInputChatV2Proto) GetRoldId() int64 {
	if m != nil {
		return m.RoldId
	}
	return 0
}

func (m *C2SUicJudgeUserInputChatV2Proto) GetRoleName() string {
	if m != nil {
		return m.RoleName
	}
	return ""
}

func (m *C2SUicJudgeUserInputChatV2Proto) GetRoleLevel() int32 {
	if m != nil {
		return m.RoleLevel
	}
	return 0
}

func (m *C2SUicJudgeUserInputChatV2Proto) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *C2SUicJudgeUserInputChatV2Proto) GetCallbackData() []byte {
	if m != nil {
		return m.CallbackData
	}
	return nil
}

func (m *C2SUicJudgeUserInputChatV2Proto) GetCallbackAddr() string {
	if m != nil {
		return m.CallbackAddr
	}
	return ""
}

type S2CUicJudgeUserInputChatV2Proto struct {
	Ret    int32  `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`
	RetMsg string `protobuf:"bytes,2,opt,name=ret_msg,json=retMsg,proto3" json:"ret_msg,omitempty"`
}

func (m *S2CUicJudgeUserInputChatV2Proto) Reset()         { *m = S2CUicJudgeUserInputChatV2Proto{} }
func (m *S2CUicJudgeUserInputChatV2Proto) String() string { return proto.CompactTextString(m) }
func (*S2CUicJudgeUserInputChatV2Proto) ProtoMessage()    {}
func (*S2CUicJudgeUserInputChatV2Proto) Descriptor() ([]byte, []int) {
	return fileDescriptorGame2Tss, []int{3}
}

func (m *S2CUicJudgeUserInputChatV2Proto) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

func (m *S2CUicJudgeUserInputChatV2Proto) GetRetMsg() string {
	if m != nil {
		return m.RetMsg
	}
	return ""
}

type C2SUicChatCallbackProto struct {
	Openid        string `protobuf:"bytes,1,opt,name=openid,proto3" json:"openid,omitempty"`
	Platid        int32  `protobuf:"varint,2,opt,name=platid,proto3" json:"platid,omitempty"`
	WorldId       int64  `protobuf:"varint,3,opt,name=world_id,json=worldId,proto3" json:"world_id,omitempty"`
	RoldId        int64  `protobuf:"varint,4,opt,name=rold_id,json=roldId,proto3" json:"rold_id,omitempty"`
	MsgResultFlag int32  `protobuf:"varint,5,opt,name=msg_result_flag,json=msgResultFlag,proto3" json:"msg_result_flag,omitempty"`
	ReplaceMsg    string `protobuf:"bytes,6,opt,name=replace_msg,json=replaceMsg,proto3" json:"replace_msg,omitempty"`
	CallbackData  []byte `protobuf:"bytes,7,opt,name=callback_data,json=callbackData,proto3" json:"callback_data,omitempty"`
}

func (m *C2SUicChatCallbackProto) Reset()                    { *m = C2SUicChatCallbackProto{} }
func (m *C2SUicChatCallbackProto) String() string            { return proto.CompactTextString(m) }
func (*C2SUicChatCallbackProto) ProtoMessage()               {}
func (*C2SUicChatCallbackProto) Descriptor() ([]byte, []int) { return fileDescriptorGame2Tss, []int{4} }

func (m *C2SUicChatCallbackProto) GetOpenid() string {
	if m != nil {
		return m.Openid
	}
	return ""
}

func (m *C2SUicChatCallbackProto) GetPlatid() int32 {
	if m != nil {
		return m.Platid
	}
	return 0
}

func (m *C2SUicChatCallbackProto) GetWorldId() int64 {
	if m != nil {
		return m.WorldId
	}
	return 0
}

func (m *C2SUicChatCallbackProto) GetRoldId() int64 {
	if m != nil {
		return m.RoldId
	}
	return 0
}

func (m *C2SUicChatCallbackProto) GetMsgResultFlag() int32 {
	if m != nil {
		return m.MsgResultFlag
	}
	return 0
}

func (m *C2SUicChatCallbackProto) GetReplaceMsg() string {
	if m != nil {
		return m.ReplaceMsg
	}
	return ""
}

func (m *C2SUicChatCallbackProto) GetCallbackData() []byte {
	if m != nil {
		return m.CallbackData
	}
	return nil
}

type S2CUicChatCallbackProto struct {
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (m *S2CUicChatCallbackProto) Reset()                    { *m = S2CUicChatCallbackProto{} }
func (m *S2CUicChatCallbackProto) String() string            { return proto.CompactTextString(m) }
func (*S2CUicChatCallbackProto) ProtoMessage()               {}
func (*S2CUicChatCallbackProto) Descriptor() ([]byte, []int) { return fileDescriptorGame2Tss, []int{5} }

func (m *S2CUicChatCallbackProto) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*C2SUicJudgeUserInputNameV2Proto)(nil), "proto.C2SUicJudgeUserInputNameV2Proto")
	proto.RegisterType((*S2CUicJudgeUserInputNameV2Proto)(nil), "proto.S2CUicJudgeUserInputNameV2Proto")
	proto.RegisterType((*C2SUicJudgeUserInputChatV2Proto)(nil), "proto.C2SUicJudgeUserInputChatV2Proto")
	proto.RegisterType((*S2CUicJudgeUserInputChatV2Proto)(nil), "proto.S2CUicJudgeUserInputChatV2Proto")
	proto.RegisterType((*C2SUicChatCallbackProto)(nil), "proto.C2SUicChatCallbackProto")
	proto.RegisterType((*S2CUicChatCallbackProto)(nil), "proto.S2CUicChatCallbackProto")
}
func (m *C2SUicJudgeUserInputNameV2Proto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SUicJudgeUserInputNameV2Proto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGame2Tss(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.IfReplace {
		dAtA[i] = 0x10
		i++
		if m.IfReplace {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *S2CUicJudgeUserInputNameV2Proto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUicJudgeUserInputNameV2Proto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ret != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame2Tss(dAtA, i, uint64(m.Ret))
	}
	if len(m.RetMsg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGame2Tss(dAtA, i, uint64(len(m.RetMsg)))
		i += copy(dAtA[i:], m.RetMsg)
	}
	if m.MsgResultFlag != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGame2Tss(dAtA, i, uint64(m.MsgResultFlag))
	}
	if len(m.ReplaceMsg) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGame2Tss(dAtA, i, uint64(len(m.ReplaceMsg)))
		i += copy(dAtA[i:], m.ReplaceMsg)
	}
	return i, nil
}

func (m *C2SUicJudgeUserInputChatV2Proto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SUicJudgeUserInputChatV2Proto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Openid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGame2Tss(dAtA, i, uint64(len(m.Openid)))
		i += copy(dAtA[i:], m.Openid)
	}
	if m.Platid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGame2Tss(dAtA, i, uint64(m.Platid))
	}
	if m.WorldId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGame2Tss(dAtA, i, uint64(m.WorldId))
	}
	if m.MsgCategory != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGame2Tss(dAtA, i, uint64(m.MsgCategory))
	}
	if m.ChannelId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGame2Tss(dAtA, i, uint64(m.ChannelId))
	}
	if m.ClientIp != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGame2Tss(dAtA, i, uint64(m.ClientIp))
	}
	if m.RoldId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintGame2Tss(dAtA, i, uint64(m.RoldId))
	}
	if len(m.RoleName) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintGame2Tss(dAtA, i, uint64(len(m.RoleName)))
		i += copy(dAtA[i:], m.RoleName)
	}
	if m.RoleLevel != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintGame2Tss(dAtA, i, uint64(m.RoleLevel))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintGame2Tss(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if len(m.CallbackData) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintGame2Tss(dAtA, i, uint64(len(m.CallbackData)))
		i += copy(dAtA[i:], m.CallbackData)
	}
	if len(m.CallbackAddr) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintGame2Tss(dAtA, i, uint64(len(m.CallbackAddr)))
		i += copy(dAtA[i:], m.CallbackAddr)
	}
	return i, nil
}

func (m *S2CUicJudgeUserInputChatV2Proto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUicJudgeUserInputChatV2Proto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ret != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame2Tss(dAtA, i, uint64(m.Ret))
	}
	if len(m.RetMsg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGame2Tss(dAtA, i, uint64(len(m.RetMsg)))
		i += copy(dAtA[i:], m.RetMsg)
	}
	return i, nil
}

func (m *C2SUicChatCallbackProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *C2SUicChatCallbackProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Openid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGame2Tss(dAtA, i, uint64(len(m.Openid)))
		i += copy(dAtA[i:], m.Openid)
	}
	if m.Platid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGame2Tss(dAtA, i, uint64(m.Platid))
	}
	if m.WorldId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGame2Tss(dAtA, i, uint64(m.WorldId))
	}
	if m.RoldId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGame2Tss(dAtA, i, uint64(m.RoldId))
	}
	if m.MsgResultFlag != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGame2Tss(dAtA, i, uint64(m.MsgResultFlag))
	}
	if len(m.ReplaceMsg) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintGame2Tss(dAtA, i, uint64(len(m.ReplaceMsg)))
		i += copy(dAtA[i:], m.ReplaceMsg)
	}
	if len(m.CallbackData) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintGame2Tss(dAtA, i, uint64(len(m.CallbackData)))
		i += copy(dAtA[i:], m.CallbackData)
	}
	return i, nil
}

func (m *S2CUicChatCallbackProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *S2CUicChatCallbackProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Success {
		dAtA[i] = 0x8
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeFixed64Game2Tss(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Game2Tss(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintGame2Tss(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *C2SUicJudgeUserInputNameV2Proto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovGame2Tss(uint64(l))
	}
	if m.IfReplace {
		n += 2
	}
	return n
}

func (m *S2CUicJudgeUserInputNameV2Proto) Size() (n int) {
	var l int
	_ = l
	if m.Ret != 0 {
		n += 1 + sovGame2Tss(uint64(m.Ret))
	}
	l = len(m.RetMsg)
	if l > 0 {
		n += 1 + l + sovGame2Tss(uint64(l))
	}
	if m.MsgResultFlag != 0 {
		n += 1 + sovGame2Tss(uint64(m.MsgResultFlag))
	}
	l = len(m.ReplaceMsg)
	if l > 0 {
		n += 1 + l + sovGame2Tss(uint64(l))
	}
	return n
}

func (m *C2SUicJudgeUserInputChatV2Proto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Openid)
	if l > 0 {
		n += 1 + l + sovGame2Tss(uint64(l))
	}
	if m.Platid != 0 {
		n += 1 + sovGame2Tss(uint64(m.Platid))
	}
	if m.WorldId != 0 {
		n += 1 + sovGame2Tss(uint64(m.WorldId))
	}
	if m.MsgCategory != 0 {
		n += 1 + sovGame2Tss(uint64(m.MsgCategory))
	}
	if m.ChannelId != 0 {
		n += 1 + sovGame2Tss(uint64(m.ChannelId))
	}
	if m.ClientIp != 0 {
		n += 1 + sovGame2Tss(uint64(m.ClientIp))
	}
	if m.RoldId != 0 {
		n += 1 + sovGame2Tss(uint64(m.RoldId))
	}
	l = len(m.RoleName)
	if l > 0 {
		n += 1 + l + sovGame2Tss(uint64(l))
	}
	if m.RoleLevel != 0 {
		n += 1 + sovGame2Tss(uint64(m.RoleLevel))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovGame2Tss(uint64(l))
	}
	l = len(m.CallbackData)
	if l > 0 {
		n += 1 + l + sovGame2Tss(uint64(l))
	}
	l = len(m.CallbackAddr)
	if l > 0 {
		n += 1 + l + sovGame2Tss(uint64(l))
	}
	return n
}

func (m *S2CUicJudgeUserInputChatV2Proto) Size() (n int) {
	var l int
	_ = l
	if m.Ret != 0 {
		n += 1 + sovGame2Tss(uint64(m.Ret))
	}
	l = len(m.RetMsg)
	if l > 0 {
		n += 1 + l + sovGame2Tss(uint64(l))
	}
	return n
}

func (m *C2SUicChatCallbackProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Openid)
	if l > 0 {
		n += 1 + l + sovGame2Tss(uint64(l))
	}
	if m.Platid != 0 {
		n += 1 + sovGame2Tss(uint64(m.Platid))
	}
	if m.WorldId != 0 {
		n += 1 + sovGame2Tss(uint64(m.WorldId))
	}
	if m.RoldId != 0 {
		n += 1 + sovGame2Tss(uint64(m.RoldId))
	}
	if m.MsgResultFlag != 0 {
		n += 1 + sovGame2Tss(uint64(m.MsgResultFlag))
	}
	l = len(m.ReplaceMsg)
	if l > 0 {
		n += 1 + l + sovGame2Tss(uint64(l))
	}
	l = len(m.CallbackData)
	if l > 0 {
		n += 1 + l + sovGame2Tss(uint64(l))
	}
	return n
}

func (m *S2CUicChatCallbackProto) Size() (n int) {
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	return n
}

func sovGame2Tss(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGame2Tss(x uint64) (n int) {
	return sovGame2Tss(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *C2SUicJudgeUserInputNameV2Proto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame2Tss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SUicJudgeUserInputNameV2Proto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SUicJudgeUserInputNameV2Proto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame2Tss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame2Tss
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IfReplace", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame2Tss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IfReplace = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGame2Tss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame2Tss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUicJudgeUserInputNameV2Proto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame2Tss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUicJudgeUserInputNameV2Proto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUicJudgeUserInputNameV2Proto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ret", wireType)
			}
			m.Ret = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame2Tss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ret |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame2Tss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame2Tss
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RetMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgResultFlag", wireType)
			}
			m.MsgResultFlag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame2Tss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgResultFlag |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplaceMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame2Tss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame2Tss
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplaceMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame2Tss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame2Tss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SUicJudgeUserInputChatV2Proto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame2Tss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SUicJudgeUserInputChatV2Proto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SUicJudgeUserInputChatV2Proto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Openid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame2Tss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame2Tss
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Openid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platid", wireType)
			}
			m.Platid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame2Tss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Platid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorldId", wireType)
			}
			m.WorldId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame2Tss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorldId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgCategory", wireType)
			}
			m.MsgCategory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame2Tss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgCategory |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame2Tss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIp", wireType)
			}
			m.ClientIp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame2Tss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientIp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoldId", wireType)
			}
			m.RoldId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame2Tss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoldId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame2Tss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame2Tss
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleLevel", wireType)
			}
			m.RoleLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame2Tss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoleLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame2Tss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame2Tss
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallbackData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame2Tss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGame2Tss
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallbackData = append(m.CallbackData[:0], dAtA[iNdEx:postIndex]...)
			if m.CallbackData == nil {
				m.CallbackData = []byte{}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallbackAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame2Tss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame2Tss
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallbackAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame2Tss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame2Tss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUicJudgeUserInputChatV2Proto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame2Tss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUicJudgeUserInputChatV2Proto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUicJudgeUserInputChatV2Proto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ret", wireType)
			}
			m.Ret = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame2Tss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ret |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame2Tss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame2Tss
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RetMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame2Tss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame2Tss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *C2SUicChatCallbackProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame2Tss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: C2SUicChatCallbackProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: C2SUicChatCallbackProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Openid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame2Tss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame2Tss
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Openid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platid", wireType)
			}
			m.Platid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame2Tss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Platid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorldId", wireType)
			}
			m.WorldId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame2Tss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorldId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoldId", wireType)
			}
			m.RoldId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame2Tss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoldId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgResultFlag", wireType)
			}
			m.MsgResultFlag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame2Tss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgResultFlag |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplaceMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame2Tss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame2Tss
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplaceMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallbackData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame2Tss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGame2Tss
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallbackData = append(m.CallbackData[:0], dAtA[iNdEx:postIndex]...)
			if m.CallbackData == nil {
				m.CallbackData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame2Tss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame2Tss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *S2CUicChatCallbackProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame2Tss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S2CUicChatCallbackProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S2CUicChatCallbackProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame2Tss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGame2Tss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame2Tss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGame2Tss(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGame2Tss
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGame2Tss
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGame2Tss
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGame2Tss
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGame2Tss
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGame2Tss(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGame2Tss = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGame2Tss   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/pb/rpcpb/game2tss/game2tss.proto", fileDescriptorGame2Tss)
}

var fileDescriptorGame2Tss = []byte{
	// 537 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xc1, 0x8e, 0xd3, 0x3c,
	0x10, 0xfe, 0xd3, 0x6e, 0xd2, 0xd4, 0xed, 0xea, 0x47, 0x39, 0xd0, 0x20, 0xa0, 0x2d, 0x41, 0x42,
	0x3d, 0x6d, 0xa5, 0xee, 0x01, 0x89, 0x1b, 0x14, 0x21, 0x8a, 0x76, 0x11, 0xf2, 0x6a, 0x39, 0x70,
	0x89, 0x5c, 0xdb, 0x75, 0x23, 0x9c, 0xc4, 0xb2, 0x5d, 0x56, 0x3c, 0x08, 0x12, 0x8f, 0xc4, 0x91,
	0x47, 0x40, 0xe5, 0xc8, 0x2b, 0x70, 0x40, 0x9e, 0x24, 0xcb, 0x2e, 0xad, 0xc4, 0x1e, 0x38, 0x65,
	0xe6, 0xcb, 0xcc, 0x37, 0x33, 0xdf, 0x8c, 0x8c, 0x9e, 0x88, 0xcc, 0xae, 0x37, 0xcb, 0x23, 0x5a,
	0xe6, 0x53, 0x99, 0x89, 0xb5, 0x55, 0xe4, 0x62, 0x9a, 0x13, 0xc9, 0x1f, 0x4f, 0xd5, 0x72, 0xaa,
	0x15, 0x55, 0xcb, 0xa9, 0x20, 0x39, 0x9f, 0x59, 0x63, 0x2e, 0x8d, 0x23, 0xa5, 0x4b, 0x5b, 0x46,
	0x3e, 0x7c, 0x12, 0x8c, 0x46, 0xf3, 0xd9, 0xd9, 0x79, 0x46, 0x5f, 0x6d, 0x98, 0xe0, 0xe7, 0x86,
	0xeb, 0x45, 0xa1, 0x36, 0xf6, 0x35, 0xc9, 0xf9, 0xdb, 0xd9, 0x1b, 0x88, 0xbc, 0x85, 0xda, 0xb9,
	0x11, 0xb1, 0x37, 0xf6, 0x26, 0x5d, 0xec, 0xcc, 0xe8, 0x3e, 0x42, 0xd9, 0x2a, 0xd5, 0x5c, 0x49,
	0x42, 0x79, 0xdc, 0x1a, 0x7b, 0x93, 0x10, 0x77, 0xb3, 0x15, 0xae, 0x80, 0xe4, 0x93, 0x87, 0x46,
	0x67, 0xb3, 0xf9, 0xdf, 0x48, 0x35, 0xb7, 0x40, 0xea, 0x63, 0x67, 0x46, 0x03, 0xd4, 0xd1, 0xdc,
	0xa6, 0xae, 0x54, 0x0b, 0x4a, 0x05, 0x9a, 0xdb, 0x53, 0x23, 0xa2, 0x47, 0xe8, 0xff, 0xdc, 0x88,
	0x54, 0x73, 0xb3, 0x91, 0x36, 0x5d, 0x49, 0x22, 0xe2, 0x36, 0xa4, 0x1d, 0xe6, 0x46, 0x60, 0x40,
	0x5f, 0x48, 0x22, 0xa2, 0x11, 0xea, 0xd5, 0x2d, 0x01, 0xc9, 0x01, 0x90, 0xa0, 0x1a, 0x3a, 0x35,
	0x22, 0xf9, 0xd9, 0xda, 0x3f, 0xec, 0x7c, 0x4d, 0x6c, 0xd3, 0xd7, 0x6d, 0x14, 0x94, 0x8a, 0x17,
	0x19, 0xab, 0xe7, 0xad, 0x3d, 0x87, 0x2b, 0x49, 0x6c, 0xc6, 0xa0, 0x39, 0x1f, 0xd7, 0x5e, 0x74,
	0x07, 0x85, 0x17, 0xa5, 0x96, 0x2c, 0xcd, 0x18, 0x74, 0xd5, 0xc6, 0x1d, 0xf0, 0x17, 0x2c, 0x7a,
	0x80, 0xfa, 0xae, 0x6f, 0x4a, 0x2c, 0x17, 0xa5, 0xfe, 0x08, 0x0d, 0xf9, 0xb8, 0x97, 0x1b, 0x31,
	0xaf, 0x21, 0x27, 0x24, 0x5d, 0x93, 0xa2, 0xe0, 0xd2, 0xe5, 0xfb, 0x90, 0xdf, 0xad, 0x91, 0x05,
	0x8b, 0xee, 0xa2, 0x2e, 0x95, 0x19, 0x2f, 0x6c, 0x9a, 0xa9, 0x38, 0x80, 0xf4, 0xb0, 0x02, 0x16,
	0x0a, 0xf4, 0x2a, 0xab, 0xc2, 0x1d, 0x48, 0x0c, 0x9c, 0x5b, 0x65, 0xe9, 0x52, 0xf2, 0xb4, 0x20,
	0x39, 0x8f, 0x43, 0x98, 0x22, 0x74, 0x80, 0x93, 0xdf, 0x55, 0x84, 0x9f, 0x92, 0x7f, 0xe0, 0x32,
	0xee, 0x02, 0x27, 0x84, 0x9f, 0x38, 0xa0, 0xd9, 0x35, 0xfa, 0xbd, 0xeb, 0x87, 0xe8, 0x90, 0x12,
	0x29, 0x97, 0x84, 0xbe, 0x4f, 0x19, 0xb1, 0x24, 0xee, 0x8d, 0xbd, 0x49, 0x1f, 0xf7, 0x1b, 0xf0,
	0x39, 0xb1, 0xe4, 0x5a, 0x10, 0x61, 0x4c, 0xc7, 0x7d, 0x20, 0xb8, 0x0c, 0x7a, 0xca, 0x98, 0x4e,
	0x4e, 0xf6, 0x5f, 0xc5, 0x55, 0xf5, 0x6f, 0x7e, 0x15, 0xc9, 0x0f, 0x0f, 0x0d, 0xaa, 0x65, 0x3a,
	0x82, 0x79, 0x5d, 0xe8, 0x9f, 0x2f, 0xf1, 0x8a, 0xca, 0x07, 0xd7, 0x54, 0xde, 0x73, 0x95, 0xfe,
	0x0d, 0xae, 0x32, 0xf8, 0xf3, 0x2a, 0x77, 0x05, 0xee, 0xec, 0x0a, 0x9c, 0x1c, 0xa3, 0x41, 0xa5,
	0xdd, 0xee, 0xb0, 0x31, 0xea, 0x98, 0x0d, 0xa5, 0xdc, 0x18, 0x98, 0x36, 0xc4, 0x8d, 0xfb, 0xec,
	0xde, 0x97, 0xed, 0xd0, 0xfb, 0xba, 0x1d, 0x7a, 0xdf, 0xb6, 0x43, 0xef, 0xf3, 0xf7, 0xe1, 0x7f,
	0x2f, 0xbd, 0x77, 0x61, 0xf3, 0x0c, 0x2c, 0x03, 0x78, 0x00, 0x8e, 0x7f, 0x05, 0x00, 0x00, 0xff,
	0xff, 0xc2, 0x18, 0x86, 0x7c, 0x45, 0x04, 0x00, 0x00,
}
