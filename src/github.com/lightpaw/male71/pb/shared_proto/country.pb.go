// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/pb/shared_proto/country.proto
// DO NOT EDIT!

package shared_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 废弃，早期版本国家
type CountryMiscProto struct {
	InvalidName    []string   `protobuf:"bytes,1,rep,name=invalid_name,json=invalidName" json:"invalid_name,omitempty"`
	FlagColors     []int32    `protobuf:"varint,2,rep,name=flag_colors,json=flagColors" json:"flag_colors,omitempty"`
	ChangeNameCd   int32      `protobuf:"varint,3,opt,name=change_name_cd,json=changeNameCd,proto3" json:"change_name_cd,omitempty"`
	ChangeNameCost *CostProto `protobuf:"bytes,4,opt,name=change_name_cost,json=changeNameCost" json:"change_name_cost,omitempty"`
}

func (m *CountryMiscProto) Reset()                    { *m = CountryMiscProto{} }
func (m *CountryMiscProto) String() string            { return proto.CompactTextString(m) }
func (*CountryMiscProto) ProtoMessage()               {}
func (*CountryMiscProto) Descriptor() ([]byte, []int) { return fileDescriptorCountry, []int{0} }

func (m *CountryMiscProto) GetInvalidName() []string {
	if m != nil {
		return m.InvalidName
	}
	return nil
}

func (m *CountryMiscProto) GetFlagColors() []int32 {
	if m != nil {
		return m.FlagColors
	}
	return nil
}

func (m *CountryMiscProto) GetChangeNameCd() int32 {
	if m != nil {
		return m.ChangeNameCd
	}
	return 0
}

func (m *CountryMiscProto) GetChangeNameCost() *CostProto {
	if m != nil {
		return m.ChangeNameCost
	}
	return nil
}

// 废弃，默认国家，早期版本国家
type DefaultCountryProto struct {
	Id              int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name            string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Desc            string `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc,omitempty"`
	FlagColor       int32  `protobuf:"varint,3,opt,name=flag_color,json=flagColor,proto3" json:"flag_color,omitempty"`
	DefaultPrestige int32  `protobuf:"varint,4,opt,name=default_prestige,json=defaultPrestige,proto3" json:"default_prestige,omitempty"`
	Icon            string `protobuf:"bytes,5,opt,name=icon,proto3" json:"icon,omitempty"`
}

func (m *DefaultCountryProto) Reset()                    { *m = DefaultCountryProto{} }
func (m *DefaultCountryProto) String() string            { return proto.CompactTextString(m) }
func (*DefaultCountryProto) ProtoMessage()               {}
func (*DefaultCountryProto) Descriptor() ([]byte, []int) { return fileDescriptorCountry, []int{1} }

func (m *DefaultCountryProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DefaultCountryProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DefaultCountryProto) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *DefaultCountryProto) GetFlagColor() int32 {
	if m != nil {
		return m.FlagColor
	}
	return 0
}

func (m *DefaultCountryProto) GetDefaultPrestige() int32 {
	if m != nil {
		return m.DefaultPrestige
	}
	return 0
}

func (m *DefaultCountryProto) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

// 当前的国家简单数据
type CountryProto struct {
	Id        int32           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Prestige  int32           `protobuf:"varint,2,opt,name=prestige,proto3" json:"prestige,omitempty"`
	Name      string          `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Destroyed bool            `protobuf:"varint,4,opt,name=destroyed,proto3" json:"destroyed,omitempty"`
	King      *HeroBasicProto `protobuf:"bytes,5,opt,name=king" json:"king,omitempty"`
}

func (m *CountryProto) Reset()                    { *m = CountryProto{} }
func (m *CountryProto) String() string            { return proto.CompactTextString(m) }
func (*CountryProto) ProtoMessage()               {}
func (*CountryProto) Descriptor() ([]byte, []int) { return fileDescriptorCountry, []int{2} }

func (m *CountryProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CountryProto) GetPrestige() int32 {
	if m != nil {
		return m.Prestige
	}
	return 0
}

func (m *CountryProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CountryProto) GetDestroyed() bool {
	if m != nil {
		return m.Destroyed
	}
	return false
}

func (m *CountryProto) GetKing() *HeroBasicProto {
	if m != nil {
		return m.King
	}
	return nil
}

// 当前的国家全部数据
type CountryDetailProto struct {
	Basic              *CountryProto               `protobuf:"bytes,1,opt,name=basic" json:"basic,omitempty"`
	Officials          []*CountryOfficialProto     `protobuf:"bytes,2,rep,name=officials" json:"officials,omitempty"`
	Vote               *CountryChangeNameVoteProto `protobuf:"bytes,3,opt,name=vote" json:"vote,omitempty"`
	NextChangeNameTime int32                       `protobuf:"varint,4,opt,name=next_change_name_time,json=nextChangeNameTime,proto3" json:"next_change_name_time,omitempty"`
}

func (m *CountryDetailProto) Reset()                    { *m = CountryDetailProto{} }
func (m *CountryDetailProto) String() string            { return proto.CompactTextString(m) }
func (*CountryDetailProto) ProtoMessage()               {}
func (*CountryDetailProto) Descriptor() ([]byte, []int) { return fileDescriptorCountry, []int{3} }

func (m *CountryDetailProto) GetBasic() *CountryProto {
	if m != nil {
		return m.Basic
	}
	return nil
}

func (m *CountryDetailProto) GetOfficials() []*CountryOfficialProto {
	if m != nil {
		return m.Officials
	}
	return nil
}

func (m *CountryDetailProto) GetVote() *CountryChangeNameVoteProto {
	if m != nil {
		return m.Vote
	}
	return nil
}

func (m *CountryDetailProto) GetNextChangeNameTime() int32 {
	if m != nil {
		return m.NextChangeNameTime
	}
	return 0
}

// 改名投票
type CountryChangeNameVoteProto struct {
	Id            int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NewName       string `protobuf:"bytes,2,opt,name=new_name,json=newName,proto3" json:"new_name,omitempty"`
	EndTime       int32  `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	AgreeCount    int32  `protobuf:"varint,4,opt,name=agree_count,json=agreeCount,proto3" json:"agree_count,omitempty"`
	DisagreeCount int32  `protobuf:"varint,5,opt,name=disagree_count,json=disagreeCount,proto3" json:"disagree_count,omitempty"`
}

func (m *CountryChangeNameVoteProto) Reset()         { *m = CountryChangeNameVoteProto{} }
func (m *CountryChangeNameVoteProto) String() string { return proto.CompactTextString(m) }
func (*CountryChangeNameVoteProto) ProtoMessage()    {}
func (*CountryChangeNameVoteProto) Descriptor() ([]byte, []int) {
	return fileDescriptorCountry, []int{4}
}

func (m *CountryChangeNameVoteProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CountryChangeNameVoteProto) GetNewName() string {
	if m != nil {
		return m.NewName
	}
	return ""
}

func (m *CountryChangeNameVoteProto) GetEndTime() int32 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *CountryChangeNameVoteProto) GetAgreeCount() int32 {
	if m != nil {
		return m.AgreeCount
	}
	return 0
}

func (m *CountryChangeNameVoteProto) GetDisagreeCount() int32 {
	if m != nil {
		return m.DisagreeCount
	}
	return 0
}

// 当前所有的国家
type CountriesProto struct {
	Countries []*CountryProto `protobuf:"bytes,1,rep,name=countries" json:"countries,omitempty"`
}

func (m *CountriesProto) Reset()                    { *m = CountriesProto{} }
func (m *CountriesProto) String() string            { return proto.CompactTextString(m) }
func (*CountriesProto) ProtoMessage()               {}
func (*CountriesProto) Descriptor() ([]byte, []int) { return fileDescriptorCountry, []int{5} }

func (m *CountriesProto) GetCountries() []*CountryProto {
	if m != nil {
		return m.Countries
	}
	return nil
}

// 国家官职
type CountryOfficialProto struct {
	Type  CountryOfficialType         `protobuf:"varint,1,opt,name=type,proto3,enum=proto.CountryOfficialType" json:"type,omitempty"`
	Heros []*CountryOfficialHeroProto `protobuf:"bytes,2,rep,name=heros" json:"heros,omitempty"`
}

func (m *CountryOfficialProto) Reset()                    { *m = CountryOfficialProto{} }
func (m *CountryOfficialProto) String() string            { return proto.CompactTextString(m) }
func (*CountryOfficialProto) ProtoMessage()               {}
func (*CountryOfficialProto) Descriptor() ([]byte, []int) { return fileDescriptorCountry, []int{6} }

func (m *CountryOfficialProto) GetType() CountryOfficialType {
	if m != nil {
		return m.Type
	}
	return CountryOfficialType_COT_NO_OFFICIAL
}

func (m *CountryOfficialProto) GetHeros() []*CountryOfficialHeroProto {
	if m != nil {
		return m.Heros
	}
	return nil
}

type CountryOfficialHeroProto struct {
	Hero        *HeroBasicProto `protobuf:"bytes,1,opt,name=hero" json:"hero,omitempty"`
	AppointTime int32           `protobuf:"varint,2,opt,name=appoint_time,json=appointTime,proto3" json:"appoint_time,omitempty"`
	Pos         int32           `protobuf:"varint,3,opt,name=pos,proto3" json:"pos,omitempty"`
}

func (m *CountryOfficialHeroProto) Reset()                    { *m = CountryOfficialHeroProto{} }
func (m *CountryOfficialHeroProto) String() string            { return proto.CompactTextString(m) }
func (*CountryOfficialHeroProto) ProtoMessage()               {}
func (*CountryOfficialHeroProto) Descriptor() ([]byte, []int) { return fileDescriptorCountry, []int{7} }

func (m *CountryOfficialHeroProto) GetHero() *HeroBasicProto {
	if m != nil {
		return m.Hero
	}
	return nil
}

func (m *CountryOfficialHeroProto) GetAppointTime() int32 {
	if m != nil {
		return m.AppointTime
	}
	return 0
}

func (m *CountryOfficialHeroProto) GetPos() int32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

// 玩家的一部分国家数据
// 另一部分在 HeroCountryGenProto 中
// 转国后需要客户端重置数据
type HeroCountryMiscProto struct {
	OfficialType CountryOfficialType             `protobuf:"varint,1,opt,name=official_type,json=officialType,proto3,enum=proto.CountryOfficialType" json:"official_type,omitempty"`
	AppointTime  int32                           `protobuf:"varint,3,opt,name=appoint_time,json=appointTime,proto3" json:"appoint_time,omitempty"`
	Vote         *HeroCountryChangeNameVoteProto `protobuf:"bytes,2,opt,name=vote" json:"vote,omitempty"`
}

func (m *HeroCountryMiscProto) Reset()                    { *m = HeroCountryMiscProto{} }
func (m *HeroCountryMiscProto) String() string            { return proto.CompactTextString(m) }
func (*HeroCountryMiscProto) ProtoMessage()               {}
func (*HeroCountryMiscProto) Descriptor() ([]byte, []int) { return fileDescriptorCountry, []int{8} }

func (m *HeroCountryMiscProto) GetOfficialType() CountryOfficialType {
	if m != nil {
		return m.OfficialType
	}
	return CountryOfficialType_COT_NO_OFFICIAL
}

func (m *HeroCountryMiscProto) GetAppointTime() int32 {
	if m != nil {
		return m.AppointTime
	}
	return 0
}

func (m *HeroCountryMiscProto) GetVote() *HeroCountryChangeNameVoteProto {
	if m != nil {
		return m.Vote
	}
	return nil
}

type HeroCountryChangeNameVoteProto struct {
	Id    int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Votes int32 `protobuf:"varint,2,opt,name=votes,proto3" json:"votes,omitempty"`
	Agree bool  `protobuf:"varint,3,opt,name=agree,proto3" json:"agree,omitempty"`
}

func (m *HeroCountryChangeNameVoteProto) Reset()         { *m = HeroCountryChangeNameVoteProto{} }
func (m *HeroCountryChangeNameVoteProto) String() string { return proto.CompactTextString(m) }
func (*HeroCountryChangeNameVoteProto) ProtoMessage()    {}
func (*HeroCountryChangeNameVoteProto) Descriptor() ([]byte, []int) {
	return fileDescriptorCountry, []int{9}
}

func (m *HeroCountryChangeNameVoteProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *HeroCountryChangeNameVoteProto) GetVotes() int32 {
	if m != nil {
		return m.Votes
	}
	return 0
}

func (m *HeroCountryChangeNameVoteProto) GetAgree() bool {
	if m != nil {
		return m.Agree
	}
	return false
}

func init() {
	proto.RegisterType((*CountryMiscProto)(nil), "proto.CountryMiscProto")
	proto.RegisterType((*DefaultCountryProto)(nil), "proto.DefaultCountryProto")
	proto.RegisterType((*CountryProto)(nil), "proto.CountryProto")
	proto.RegisterType((*CountryDetailProto)(nil), "proto.CountryDetailProto")
	proto.RegisterType((*CountryChangeNameVoteProto)(nil), "proto.CountryChangeNameVoteProto")
	proto.RegisterType((*CountriesProto)(nil), "proto.CountriesProto")
	proto.RegisterType((*CountryOfficialProto)(nil), "proto.CountryOfficialProto")
	proto.RegisterType((*CountryOfficialHeroProto)(nil), "proto.CountryOfficialHeroProto")
	proto.RegisterType((*HeroCountryMiscProto)(nil), "proto.HeroCountryMiscProto")
	proto.RegisterType((*HeroCountryChangeNameVoteProto)(nil), "proto.HeroCountryChangeNameVoteProto")
}
func (m *CountryMiscProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountryMiscProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.InvalidName) > 0 {
		for _, s := range m.InvalidName {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.FlagColors) > 0 {
		for _, num := range m.FlagColors {
			dAtA[i] = 0x10
			i++
			i = encodeVarintCountry(dAtA, i, uint64(num))
		}
	}
	if m.ChangeNameCd != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.ChangeNameCd))
	}
	if m.ChangeNameCost != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.ChangeNameCost.Size()))
		n1, err := m.ChangeNameCost.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *DefaultCountryProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DefaultCountryProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCountry(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.FlagColor != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.FlagColor))
	}
	if m.DefaultPrestige != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.DefaultPrestige))
	}
	if len(m.Icon) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCountry(dAtA, i, uint64(len(m.Icon)))
		i += copy(dAtA[i:], m.Icon)
	}
	if len(m.Desc) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCountry(dAtA, i, uint64(len(m.Desc)))
		i += copy(dAtA[i:], m.Desc)
	}
	return i, nil
}

func (m *CountryProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountryProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.Id))
	}
	if m.Prestige != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.Prestige))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCountry(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Destroyed {
		dAtA[i] = 0x20
		i++
		if m.Destroyed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.King != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.King.Size()))
		n2, err := m.King.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *CountryDetailProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountryDetailProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Basic != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.Basic.Size()))
		n3, err := m.Basic.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.Officials) > 0 {
		for _, msg := range m.Officials {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCountry(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Vote != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.Vote.Size()))
		n4, err := m.Vote.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.NextChangeNameTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.NextChangeNameTime))
	}
	return i, nil
}

func (m *CountryChangeNameVoteProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountryChangeNameVoteProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.Id))
	}
	if len(m.NewName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCountry(dAtA, i, uint64(len(m.NewName)))
		i += copy(dAtA[i:], m.NewName)
	}
	if m.EndTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.EndTime))
	}
	if m.AgreeCount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.AgreeCount))
	}
	if m.DisagreeCount != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.DisagreeCount))
	}
	return i, nil
}

func (m *CountriesProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountriesProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Countries) > 0 {
		for _, msg := range m.Countries {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCountry(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CountryOfficialProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountryOfficialProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.Type))
	}
	if len(m.Heros) > 0 {
		for _, msg := range m.Heros {
			dAtA[i] = 0x12
			i++
			i = encodeVarintCountry(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CountryOfficialHeroProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountryOfficialHeroProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Hero != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.Hero.Size()))
		n5, err := m.Hero.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.AppointTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.AppointTime))
	}
	if m.Pos != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.Pos))
	}
	return i, nil
}

func (m *HeroCountryMiscProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeroCountryMiscProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OfficialType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.OfficialType))
	}
	if m.Vote != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.Vote.Size()))
		n6, err := m.Vote.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.AppointTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.AppointTime))
	}
	return i, nil
}

func (m *HeroCountryChangeNameVoteProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeroCountryChangeNameVoteProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.Id))
	}
	if m.Votes != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.Votes))
	}
	if m.Agree {
		dAtA[i] = 0x18
		i++
		if m.Agree {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeFixed64Country(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Country(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintCountry(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CountryMiscProto) Size() (n int) {
	var l int
	_ = l
	if len(m.InvalidName) > 0 {
		for _, s := range m.InvalidName {
			l = len(s)
			n += 1 + l + sovCountry(uint64(l))
		}
	}
	if len(m.FlagColors) > 0 {
		for _, e := range m.FlagColors {
			n += 1 + sovCountry(uint64(e))
		}
	}
	if m.ChangeNameCd != 0 {
		n += 1 + sovCountry(uint64(m.ChangeNameCd))
	}
	if m.ChangeNameCost != nil {
		l = m.ChangeNameCost.Size()
		n += 1 + l + sovCountry(uint64(l))
	}
	return n
}

func (m *DefaultCountryProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCountry(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCountry(uint64(l))
	}
	if m.FlagColor != 0 {
		n += 1 + sovCountry(uint64(m.FlagColor))
	}
	if m.DefaultPrestige != 0 {
		n += 1 + sovCountry(uint64(m.DefaultPrestige))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovCountry(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovCountry(uint64(l))
	}
	return n
}

func (m *CountryProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCountry(uint64(m.Id))
	}
	if m.Prestige != 0 {
		n += 1 + sovCountry(uint64(m.Prestige))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCountry(uint64(l))
	}
	if m.Destroyed {
		n += 2
	}
	if m.King != nil {
		l = m.King.Size()
		n += 1 + l + sovCountry(uint64(l))
	}
	return n
}

func (m *CountryDetailProto) Size() (n int) {
	var l int
	_ = l
	if m.Basic != nil {
		l = m.Basic.Size()
		n += 1 + l + sovCountry(uint64(l))
	}
	if len(m.Officials) > 0 {
		for _, e := range m.Officials {
			l = e.Size()
			n += 1 + l + sovCountry(uint64(l))
		}
	}
	if m.Vote != nil {
		l = m.Vote.Size()
		n += 1 + l + sovCountry(uint64(l))
	}
	if m.NextChangeNameTime != 0 {
		n += 1 + sovCountry(uint64(m.NextChangeNameTime))
	}
	return n
}

func (m *CountryChangeNameVoteProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCountry(uint64(m.Id))
	}
	l = len(m.NewName)
	if l > 0 {
		n += 1 + l + sovCountry(uint64(l))
	}
	if m.EndTime != 0 {
		n += 1 + sovCountry(uint64(m.EndTime))
	}
	if m.AgreeCount != 0 {
		n += 1 + sovCountry(uint64(m.AgreeCount))
	}
	if m.DisagreeCount != 0 {
		n += 1 + sovCountry(uint64(m.DisagreeCount))
	}
	return n
}

func (m *CountriesProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Countries) > 0 {
		for _, e := range m.Countries {
			l = e.Size()
			n += 1 + l + sovCountry(uint64(l))
		}
	}
	return n
}

func (m *CountryOfficialProto) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovCountry(uint64(m.Type))
	}
	if len(m.Heros) > 0 {
		for _, e := range m.Heros {
			l = e.Size()
			n += 1 + l + sovCountry(uint64(l))
		}
	}
	return n
}

func (m *CountryOfficialHeroProto) Size() (n int) {
	var l int
	_ = l
	if m.Hero != nil {
		l = m.Hero.Size()
		n += 1 + l + sovCountry(uint64(l))
	}
	if m.AppointTime != 0 {
		n += 1 + sovCountry(uint64(m.AppointTime))
	}
	if m.Pos != 0 {
		n += 1 + sovCountry(uint64(m.Pos))
	}
	return n
}

func (m *HeroCountryMiscProto) Size() (n int) {
	var l int
	_ = l
	if m.OfficialType != 0 {
		n += 1 + sovCountry(uint64(m.OfficialType))
	}
	if m.Vote != nil {
		l = m.Vote.Size()
		n += 1 + l + sovCountry(uint64(l))
	}
	if m.AppointTime != 0 {
		n += 1 + sovCountry(uint64(m.AppointTime))
	}
	return n
}

func (m *HeroCountryChangeNameVoteProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCountry(uint64(m.Id))
	}
	if m.Votes != 0 {
		n += 1 + sovCountry(uint64(m.Votes))
	}
	if m.Agree {
		n += 2
	}
	return n
}

func sovCountry(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCountry(x uint64) (n int) {
	return sovCountry(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CountryMiscProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCountry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountryMiscProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountryMiscProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvalidName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCountry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvalidName = append(m.InvalidName, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCountry
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.FlagColors = append(m.FlagColors, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCountry
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCountry
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCountry
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.FlagColors = append(m.FlagColors, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field FlagColors", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeNameCd", wireType)
			}
			m.ChangeNameCd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChangeNameCd |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeNameCost", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCountry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChangeNameCost == nil {
				m.ChangeNameCost = &CostProto{}
			}
			if err := m.ChangeNameCost.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCountry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCountry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DefaultCountryProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCountry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DefaultCountryProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DefaultCountryProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCountry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlagColor", wireType)
			}
			m.FlagColor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlagColor |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultPrestige", wireType)
			}
			m.DefaultPrestige = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefaultPrestige |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCountry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCountry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCountry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCountry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountryProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCountry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountryProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountryProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prestige", wireType)
			}
			m.Prestige = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Prestige |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCountry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destroyed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Destroyed = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field King", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCountry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.King == nil {
				m.King = &HeroBasicProto{}
			}
			if err := m.King.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCountry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCountry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountryDetailProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCountry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountryDetailProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountryDetailProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Basic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCountry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Basic == nil {
				m.Basic = &CountryProto{}
			}
			if err := m.Basic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Officials", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCountry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Officials = append(m.Officials, &CountryOfficialProto{})
			if err := m.Officials[len(m.Officials)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCountry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vote == nil {
				m.Vote = &CountryChangeNameVoteProto{}
			}
			if err := m.Vote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextChangeNameTime", wireType)
			}
			m.NextChangeNameTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextChangeNameTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCountry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCountry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountryChangeNameVoteProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCountry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountryChangeNameVoteProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountryChangeNameVoteProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCountry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgreeCount", wireType)
			}
			m.AgreeCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AgreeCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisagreeCount", wireType)
			}
			m.DisagreeCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisagreeCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCountry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCountry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountriesProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCountry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountriesProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountriesProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Countries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCountry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Countries = append(m.Countries, &CountryProto{})
			if err := m.Countries[len(m.Countries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCountry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCountry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountryOfficialProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCountry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountryOfficialProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountryOfficialProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (CountryOfficialType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Heros", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCountry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Heros = append(m.Heros, &CountryOfficialHeroProto{})
			if err := m.Heros[len(m.Heros)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCountry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCountry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountryOfficialHeroProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCountry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountryOfficialHeroProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountryOfficialHeroProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hero", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCountry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hero == nil {
				m.Hero = &HeroBasicProto{}
			}
			if err := m.Hero.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppointTime", wireType)
			}
			m.AppointTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppointTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			m.Pos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCountry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCountry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeroCountryMiscProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCountry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroCountryMiscProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroCountryMiscProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfficialType", wireType)
			}
			m.OfficialType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OfficialType |= (CountryOfficialType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCountry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vote == nil {
				m.Vote = &HeroCountryChangeNameVoteProto{}
			}
			if err := m.Vote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppointTime", wireType)
			}
			m.AppointTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppointTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCountry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCountry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeroCountryChangeNameVoteProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCountry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroCountryChangeNameVoteProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroCountryChangeNameVoteProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Votes", wireType)
			}
			m.Votes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Votes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agree", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Agree = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCountry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCountry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCountry(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCountry
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCountry
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCountry
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCountry(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCountry = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCountry   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/pb/shared_proto/country.proto", fileDescriptorCountry)
}

var fileDescriptorCountry = []byte{
	// 766 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0xdd, 0x6e, 0xe2, 0x46,
	0x14, 0x8e, 0x01, 0x27, 0x70, 0x4c, 0x28, 0x9a, 0x24, 0x92, 0x43, 0x5b, 0x42, 0xdc, 0x46, 0x22,
	0x37, 0xa0, 0xd0, 0x46, 0x69, 0x7a, 0x53, 0x29, 0xe4, 0x22, 0x37, 0x6d, 0x23, 0x2b, 0xea, 0x45,
	0x55, 0xc9, 0x1a, 0xec, 0x01, 0x46, 0x35, 0x1e, 0xcb, 0x33, 0x24, 0xa5, 0x52, 0x9f, 0xa3, 0xfb,
	0x0c, 0xbb, 0xd7, 0x7b, 0xb7, 0x0f, 0xb0, 0x97, 0xfb, 0x08, 0xab, 0xec, 0x3e, 0xc8, 0x6a, 0x7e,
	0x00, 0x67, 0x09, 0xd9, 0x5c, 0x31, 0xf3, 0xf9, 0x3b, 0xe7, 0x7c, 0xe7, 0x9c, 0xcf, 0x06, 0xce,
	0x46, 0x54, 0x8c, 0xa7, 0x83, 0x4e, 0xc8, 0x26, 0xdd, 0x98, 0x8e, 0xc6, 0x22, 0xc5, 0x77, 0xdd,
	0x09, 0x8e, 0xc9, 0x59, 0x37, 0x1d, 0x74, 0xf9, 0x18, 0x67, 0x24, 0x0a, 0xd2, 0x8c, 0x09, 0xd6,
	0x0d, 0xd9, 0x34, 0x11, 0xd9, 0xac, 0xa3, 0x6e, 0xc8, 0x56, 0x3f, 0x8d, 0x1f, 0x9f, 0x1f, 0x3f,
	0xc0, 0x9c, 0xe8, 0xe0, 0xc6, 0x4f, 0xcf, 0x8f, 0xe2, 0x09, 0x4e, 0xf9, 0x98, 0x09, 0x1d, 0xe9,
	0xbd, 0xb1, 0xa0, 0xde, 0xd7, 0x42, 0x7e, 0xa5, 0x3c, 0xbc, 0x56, 0x5a, 0x0e, 0xa1, 0x4a, 0x93,
	0x5b, 0x1c, 0xd3, 0x28, 0x48, 0xf0, 0x84, 0xb8, 0x56, 0xab, 0xd8, 0xae, 0xf8, 0x8e, 0xc1, 0x7e,
	0xc3, 0x13, 0x82, 0xbe, 0x03, 0x67, 0x18, 0xe3, 0x51, 0x10, 0xb2, 0x98, 0x65, 0xdc, 0x2d, 0xb4,
	0x8a, 0x6d, 0xfb, 0xa2, 0x50, 0xdf, 0xf0, 0x41, 0xc2, 0x7d, 0x85, 0xa2, 0xef, 0xa1, 0x16, 0x8e,
	0x71, 0x32, 0x22, 0x2a, 0x4d, 0x10, 0x46, 0x6e, 0xb1, 0x65, 0xb5, 0x6d, 0xbf, 0xaa, 0x51, 0x99,
	0xa8, 0x1f, 0xa1, 0x9f, 0xa1, 0xfe, 0x80, 0xc5, 0xb8, 0x70, 0x4b, 0x2d, 0xab, 0xed, 0xf4, 0xea,
	0x5a, 0x64, 0xa7, 0xcf, 0xb8, 0x50, 0xca, 0xfc, 0x5a, 0x2e, 0x92, 0x71, 0xe1, 0xbd, 0xb2, 0x60,
	0xe7, 0x92, 0x0c, 0xf1, 0x34, 0x16, 0xa6, 0x0b, 0xdd, 0x41, 0x0d, 0x0a, 0x34, 0x72, 0x2d, 0x55,
	0xad, 0x40, 0x23, 0x84, 0xa0, 0xa4, 0x3a, 0x29, 0xb4, 0xac, 0x76, 0xc5, 0x57, 0x67, 0xf4, 0x2d,
	0xc0, 0xb2, 0x05, 0xa3, 0xac, 0xb2, 0x50, 0x8f, 0x8e, 0xa1, 0x1e, 0xe9, 0xcc, 0x41, 0x9a, 0x11,
	0x2e, 0xe8, 0x88, 0x28, 0x59, 0xb6, 0xff, 0x95, 0xc1, 0xaf, 0x0d, 0x2c, 0xb3, 0xd3, 0x90, 0x25,
	0xae, 0xad, 0xb3, 0xcb, 0xb3, 0xc4, 0x22, 0xc2, 0x43, 0x77, 0x53, 0x63, 0xf2, 0xec, 0xfd, 0x6f,
	0x41, 0xf5, 0x49, 0x99, 0x0d, 0x28, 0x2f, 0x6a, 0x15, 0x14, 0xba, 0xb8, 0x2f, 0x5a, 0x28, 0xe6,
	0x5a, 0xf8, 0x06, 0x2a, 0x11, 0xe1, 0x22, 0x63, 0x33, 0x12, 0x29, 0x71, 0x65, 0x7f, 0x09, 0xa0,
	0x63, 0x28, 0xfd, 0x4d, 0x93, 0x91, 0x92, 0xe5, 0xf4, 0xf6, 0xcc, 0x30, 0xaf, 0x48, 0xc6, 0x2e,
	0x30, 0xa7, 0x7a, 0xd7, 0xbe, 0xa2, 0x78, 0x1f, 0x2d, 0x40, 0x46, 0xd9, 0x25, 0x11, 0x98, 0xc6,
	0x5a, 0xdf, 0x31, 0xd8, 0x03, 0x49, 0x55, 0x12, 0x9d, 0xde, 0xce, 0x62, 0x1f, 0xcb, 0x1e, 0x7c,
	0xcd, 0x40, 0xe7, 0x50, 0x61, 0xc3, 0x21, 0x0d, 0x29, 0x8e, 0xb5, 0x1d, 0x9c, 0xde, 0xd7, 0x0f,
	0xe9, 0xbf, 0x9b, 0xc7, 0x3a, 0x6c, 0xc9, 0x46, 0xa7, 0x50, 0xba, 0x65, 0x42, 0x77, 0xe6, 0xf4,
	0x0e, 0x1f, 0x46, 0xf5, 0x17, 0x0b, 0xff, 0x83, 0x09, 0x62, 0x34, 0x4b, 0x3a, 0x3a, 0x81, 0xbd,
	0x84, 0xfc, 0x23, 0x82, 0xbc, 0x79, 0x04, 0x9d, 0xcc, 0xb7, 0x84, 0xe4, 0xc3, 0x65, 0xf4, 0x0d,
	0x9d, 0x10, 0xef, 0xa5, 0x05, 0x8d, 0xf5, 0x79, 0x57, 0xd6, 0xb1, 0x0f, 0xe5, 0x84, 0xdc, 0x05,
	0x39, 0xe7, 0x6c, 0x25, 0xe4, 0x4e, 0xf9, 0x7f, 0x1f, 0xca, 0x24, 0x89, 0x74, 0x3d, 0x6d, 0x9d,
	0x2d, 0x92, 0x44, 0xb2, 0x08, 0x3a, 0x00, 0x07, 0x8f, 0x32, 0x22, 0x9d, 0x3c, 0x4d, 0x84, 0x51,
	0x03, 0x0a, 0x52, 0xb5, 0xd1, 0x11, 0xd4, 0x22, 0xca, 0xf3, 0x1c, 0x5b, 0x71, 0xb6, 0xe7, 0xa8,
	0xa2, 0x79, 0x7d, 0xa8, 0x69, 0xad, 0x94, 0x70, 0xad, 0xef, 0x04, 0x2a, 0xe1, 0x1c, 0x51, 0x2f,
	0xe5, 0x9a, 0x95, 0x2c, 0x59, 0xde, 0x7f, 0xb0, 0xfb, 0xd8, 0xf8, 0x51, 0x07, 0x4a, 0x62, 0x96,
	0x12, 0xd5, 0x6c, 0xad, 0xd7, 0x78, 0x7c, 0x53, 0x37, 0xb3, 0x94, 0xf8, 0x8a, 0x87, 0x4e, 0xc1,
	0x1e, 0x93, 0x8c, 0xcd, 0x57, 0x7b, 0xf0, 0x78, 0x80, 0xf4, 0x96, 0x71, 0x85, 0x62, 0x7b, 0xff,
	0x82, 0xbb, 0x8e, 0x22, 0xed, 0x29, 0x49, 0xc6, 0x5b, 0xeb, 0xec, 0x29, 0x29, 0xf2, 0x83, 0x84,
	0xd3, 0x94, 0xd1, 0x44, 0xe8, 0x89, 0xeb, 0x77, 0xc3, 0x31, 0x98, 0x9a, 0x7a, 0x1d, 0x8a, 0x29,
	0xe3, 0x66, 0x17, 0xf2, 0xe8, 0xbd, 0xb6, 0x60, 0x57, 0x66, 0x5b, 0xf9, 0xbc, 0xfd, 0x02, 0xdb,
	0x73, 0xf3, 0x05, 0xcf, 0x1c, 0x42, 0x95, 0xe5, 0x6e, 0xe8, 0xdc, 0x18, 0xb6, 0xa0, 0x94, 0x1f,
	0xe5, 0x94, 0x7f, 0xd1, 0xb4, 0x9f, 0x77, 0x52, 0x5c, 0xe9, 0xc4, 0xfb, 0x0b, 0x9a, 0x4f, 0xa7,
	0x5a, 0xf1, 0xe9, 0x2e, 0xd8, 0x32, 0x39, 0x37, 0x73, 0xd1, 0x17, 0x89, 0x2a, 0x37, 0xa9, 0x1a,
	0x65, 0x5f, 0x5f, 0x2e, 0x5a, 0x6f, 0xef, 0x9b, 0xd6, 0xbb, 0xfb, 0xa6, 0xf5, 0xfe, 0xbe, 0x69,
	0xbd, 0xf8, 0xd0, 0xdc, 0xb8, 0xb2, 0xfe, 0xac, 0xe6, 0xff, 0x21, 0x06, 0x9b, 0xea, 0xe7, 0x87,
	0x4f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa5, 0x42, 0xbb, 0x5f, 0xcb, 0x06, 0x00, 0x00,
}
