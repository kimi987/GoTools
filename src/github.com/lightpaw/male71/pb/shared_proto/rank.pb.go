// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/pb/shared_proto/rank.proto
// DO NOT EDIT!

package shared_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RankType int32

const (
	RankType_Country      RankType = 0
	RankType_Guild        RankType = 1
	RankType_Tower        RankType = 2
	RankType_BaiZhan      RankType = 3
	RankType_RankStarTask RankType = 4
	RankType_RankXuanyuan RankType = 5
)

var RankType_name = map[int32]string{
	0: "Country",
	1: "Guild",
	2: "Tower",
	3: "BaiZhan",
	4: "RankStarTask",
	5: "RankXuanyuan",
}
var RankType_value = map[string]int32{
	"Country":      0,
	"Guild":        1,
	"Tower":        2,
	"BaiZhan":      3,
	"RankStarTask": 4,
	"RankXuanyuan": 5,
}

func (x RankType) String() string {
	return proto.EnumName(RankType_name, int32(x))
}
func (RankType) EnumDescriptor() ([]byte, []int) { return fileDescriptorRank, []int{0} }

// 排行其他数据
type RankMiscProto struct {
	RankCountPerPage int32 `protobuf:"varint,1,opt,name=rank_count_per_page,json=rankCountPerPage,proto3" json:"rank_count_per_page,omitempty"`
}

func (m *RankMiscProto) Reset()                    { *m = RankMiscProto{} }
func (m *RankMiscProto) String() string            { return proto.CompactTextString(m) }
func (*RankMiscProto) ProtoMessage()               {}
func (*RankMiscProto) Descriptor() ([]byte, []int) { return fileDescriptorRank, []int{0} }

func (m *RankMiscProto) GetRankCountPerPage() int32 {
	if m != nil {
		return m.RankCountPerPage
	}
	return 0
}

// 排行榜信息
type RankProto struct {
	Type         RankType             `protobuf:"varint,1,opt,name=type,proto3,enum=proto.RankType" json:"type,omitempty"`
	SubType      int32                `protobuf:"varint,6,opt,name=sub_type,json=subType,proto3" json:"sub_type,omitempty"`
	JunXianLevel int32                `protobuf:"varint,2,opt,name=jun_xian_level,json=junXianLevel,proto3" json:"jun_xian_level,omitempty"`
	RankCount    int32                `protobuf:"varint,3,opt,name=rank_count,json=rankCount,proto3" json:"rank_count,omitempty"`
	StartRank    int32                `protobuf:"varint,4,opt,name=start_rank,json=startRank,proto3" json:"start_rank,omitempty"`
	Self         bool                 `protobuf:"varint,5,opt,name=self,proto3" json:"self,omitempty"`
	Country      []*CountryRankProto  `protobuf:"bytes,10,rep,name=country" json:"country,omitempty"`
	Guild        []*GuildRankProto    `protobuf:"bytes,11,rep,name=guild" json:"guild,omitempty"`
	Tower        []*TowerRankProto    `protobuf:"bytes,12,rep,name=tower" json:"tower,omitempty"`
	BaiZhan      []*BaiZhanRankProto  `protobuf:"bytes,13,rep,name=bai_zhan,json=baiZhan" json:"bai_zhan,omitempty"`
	StarTask     []*StarTaskRankProto `protobuf:"bytes,14,rep,name=star_task,json=starTask" json:"star_task,omitempty"`
	Xuanyuan     []*XuanyRankProto    `protobuf:"bytes,15,rep,name=xuanyuan" json:"xuanyuan,omitempty"`
}

func (m *RankProto) Reset()                    { *m = RankProto{} }
func (m *RankProto) String() string            { return proto.CompactTextString(m) }
func (*RankProto) ProtoMessage()               {}
func (*RankProto) Descriptor() ([]byte, []int) { return fileDescriptorRank, []int{1} }

func (m *RankProto) GetType() RankType {
	if m != nil {
		return m.Type
	}
	return RankType_Country
}

func (m *RankProto) GetSubType() int32 {
	if m != nil {
		return m.SubType
	}
	return 0
}

func (m *RankProto) GetJunXianLevel() int32 {
	if m != nil {
		return m.JunXianLevel
	}
	return 0
}

func (m *RankProto) GetRankCount() int32 {
	if m != nil {
		return m.RankCount
	}
	return 0
}

func (m *RankProto) GetStartRank() int32 {
	if m != nil {
		return m.StartRank
	}
	return 0
}

func (m *RankProto) GetSelf() bool {
	if m != nil {
		return m.Self
	}
	return false
}

func (m *RankProto) GetCountry() []*CountryRankProto {
	if m != nil {
		return m.Country
	}
	return nil
}

func (m *RankProto) GetGuild() []*GuildRankProto {
	if m != nil {
		return m.Guild
	}
	return nil
}

func (m *RankProto) GetTower() []*TowerRankProto {
	if m != nil {
		return m.Tower
	}
	return nil
}

func (m *RankProto) GetBaiZhan() []*BaiZhanRankProto {
	if m != nil {
		return m.BaiZhan
	}
	return nil
}

func (m *RankProto) GetStarTask() []*StarTaskRankProto {
	if m != nil {
		return m.StarTask
	}
	return nil
}

func (m *RankProto) GetXuanyuan() []*XuanyRankProto {
	if m != nil {
		return m.Xuanyuan
	}
	return nil
}

type CountryRankProto struct {
	Name       string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ColorIndex int32           `protobuf:"varint,2,opt,name=color_index,json=colorIndex,proto3" json:"color_index,omitempty"`
	Leader     *HeroBasicProto `protobuf:"bytes,3,opt,name=leader" json:"leader,omitempty"`
	CityCount  int32           `protobuf:"varint,4,opt,name=city_count,json=cityCount,proto3" json:"city_count,omitempty"`
	CityOutput int32           `protobuf:"varint,5,opt,name=city_output,json=cityOutput,proto3" json:"city_output,omitempty"`
}

func (m *CountryRankProto) Reset()                    { *m = CountryRankProto{} }
func (m *CountryRankProto) String() string            { return proto.CompactTextString(m) }
func (*CountryRankProto) ProtoMessage()               {}
func (*CountryRankProto) Descriptor() ([]byte, []int) { return fileDescriptorRank, []int{2} }

func (m *CountryRankProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CountryRankProto) GetColorIndex() int32 {
	if m != nil {
		return m.ColorIndex
	}
	return 0
}

func (m *CountryRankProto) GetLeader() *HeroBasicProto {
	if m != nil {
		return m.Leader
	}
	return nil
}

func (m *CountryRankProto) GetCityCount() int32 {
	if m != nil {
		return m.CityCount
	}
	return 0
}

func (m *CountryRankProto) GetCityOutput() int32 {
	if m != nil {
		return m.CityOutput
	}
	return 0
}

type GuildRankProto struct {
	Leader         *HeroBasicProto `protobuf:"bytes,1,opt,name=leader" json:"leader,omitempty"`
	Level          int32           `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	UpgradeEndTime int32           `protobuf:"varint,3,opt,name=upgrade_end_time,json=upgradeEndTime,proto3" json:"upgrade_end_time,omitempty"`
	Prestige       int32           `protobuf:"varint,4,opt,name=prestige,proto3" json:"prestige,omitempty"`
	Country        int32           `protobuf:"varint,5,opt,name=country,proto3" json:"country,omitempty"`
	CityCount      int32           `protobuf:"varint,6,opt,name=city_count,json=cityCount,proto3" json:"city_count,omitempty"`
	MemberCount    int32           `protobuf:"varint,7,opt,name=member_count,json=memberCount,proto3" json:"member_count,omitempty"`
}

func (m *GuildRankProto) Reset()                    { *m = GuildRankProto{} }
func (m *GuildRankProto) String() string            { return proto.CompactTextString(m) }
func (*GuildRankProto) ProtoMessage()               {}
func (*GuildRankProto) Descriptor() ([]byte, []int) { return fileDescriptorRank, []int{3} }

func (m *GuildRankProto) GetLeader() *HeroBasicProto {
	if m != nil {
		return m.Leader
	}
	return nil
}

func (m *GuildRankProto) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *GuildRankProto) GetUpgradeEndTime() int32 {
	if m != nil {
		return m.UpgradeEndTime
	}
	return 0
}

func (m *GuildRankProto) GetPrestige() int32 {
	if m != nil {
		return m.Prestige
	}
	return 0
}

func (m *GuildRankProto) GetCountry() int32 {
	if m != nil {
		return m.Country
	}
	return 0
}

func (m *GuildRankProto) GetCityCount() int32 {
	if m != nil {
		return m.CityCount
	}
	return 0
}

func (m *GuildRankProto) GetMemberCount() int32 {
	if m != nil {
		return m.MemberCount
	}
	return 0
}

type TowerRankProto struct {
	Hero  *HeroBasicProto `protobuf:"bytes,1,opt,name=hero" json:"hero,omitempty"`
	Floor int32           `protobuf:"varint,2,opt,name=floor,proto3" json:"floor,omitempty"`
	Time  int32           `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (m *TowerRankProto) Reset()                    { *m = TowerRankProto{} }
func (m *TowerRankProto) String() string            { return proto.CompactTextString(m) }
func (*TowerRankProto) ProtoMessage()               {}
func (*TowerRankProto) Descriptor() ([]byte, []int) { return fileDescriptorRank, []int{4} }

func (m *TowerRankProto) GetHero() *HeroBasicProto {
	if m != nil {
		return m.Hero
	}
	return nil
}

func (m *TowerRankProto) GetFloor() int32 {
	if m != nil {
		return m.Floor
	}
	return 0
}

func (m *TowerRankProto) GetTime() int32 {
	if m != nil {
		return m.Time
	}
	return 0
}

type BaiZhanRankProto struct {
	Hero            *HeroBasicProto `protobuf:"bytes,1,opt,name=hero" json:"hero,omitempty"`
	Level           int32           `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	Point           int32           `protobuf:"varint,3,opt,name=point,proto3" json:"point,omitempty"`
	FightAmount     int32           `protobuf:"varint,4,opt,name=fight_amount,json=fightAmount,proto3" json:"fight_amount,omitempty"`
	LevelChangeType LevelChangeType `protobuf:"varint,5,opt,name=level_change_type,json=levelChangeType,proto3,enum=proto.LevelChangeType" json:"level_change_type,omitempty"`
}

func (m *BaiZhanRankProto) Reset()                    { *m = BaiZhanRankProto{} }
func (m *BaiZhanRankProto) String() string            { return proto.CompactTextString(m) }
func (*BaiZhanRankProto) ProtoMessage()               {}
func (*BaiZhanRankProto) Descriptor() ([]byte, []int) { return fileDescriptorRank, []int{5} }

func (m *BaiZhanRankProto) GetHero() *HeroBasicProto {
	if m != nil {
		return m.Hero
	}
	return nil
}

func (m *BaiZhanRankProto) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *BaiZhanRankProto) GetPoint() int32 {
	if m != nil {
		return m.Point
	}
	return 0
}

func (m *BaiZhanRankProto) GetFightAmount() int32 {
	if m != nil {
		return m.FightAmount
	}
	return 0
}

func (m *BaiZhanRankProto) GetLevelChangeType() LevelChangeType {
	if m != nil {
		return m.LevelChangeType
	}
	return LevelChangeType_LEVEL_UP
}

type StarTaskRankProto struct {
	Hero *HeroBasicProto `protobuf:"bytes,1,opt,name=hero" json:"hero,omitempty"`
	Star int32           `protobuf:"varint,2,opt,name=star,proto3" json:"star,omitempty"`
}

func (m *StarTaskRankProto) Reset()                    { *m = StarTaskRankProto{} }
func (m *StarTaskRankProto) String() string            { return proto.CompactTextString(m) }
func (*StarTaskRankProto) ProtoMessage()               {}
func (*StarTaskRankProto) Descriptor() ([]byte, []int) { return fileDescriptorRank, []int{6} }

func (m *StarTaskRankProto) GetHero() *HeroBasicProto {
	if m != nil {
		return m.Hero
	}
	return nil
}

func (m *StarTaskRankProto) GetStar() int32 {
	if m != nil {
		return m.Star
	}
	return 0
}

type XuanyRankProto struct {
	Hero  *HeroBasicProto `protobuf:"bytes,1,opt,name=hero" json:"hero,omitempty"`
	Point int32           `protobuf:"varint,3,opt,name=point,proto3" json:"point,omitempty"`
	Win   int32           `protobuf:"varint,4,opt,name=win,proto3" json:"win,omitempty"`
	Lose  int32           `protobuf:"varint,5,opt,name=lose,proto3" json:"lose,omitempty"`
}

func (m *XuanyRankProto) Reset()                    { *m = XuanyRankProto{} }
func (m *XuanyRankProto) String() string            { return proto.CompactTextString(m) }
func (*XuanyRankProto) ProtoMessage()               {}
func (*XuanyRankProto) Descriptor() ([]byte, []int) { return fileDescriptorRank, []int{7} }

func (m *XuanyRankProto) GetHero() *HeroBasicProto {
	if m != nil {
		return m.Hero
	}
	return nil
}

func (m *XuanyRankProto) GetPoint() int32 {
	if m != nil {
		return m.Point
	}
	return 0
}

func (m *XuanyRankProto) GetWin() int32 {
	if m != nil {
		return m.Win
	}
	return 0
}

func (m *XuanyRankProto) GetLose() int32 {
	if m != nil {
		return m.Lose
	}
	return 0
}

func init() {
	proto.RegisterType((*RankMiscProto)(nil), "proto.RankMiscProto")
	proto.RegisterType((*RankProto)(nil), "proto.RankProto")
	proto.RegisterType((*CountryRankProto)(nil), "proto.CountryRankProto")
	proto.RegisterType((*GuildRankProto)(nil), "proto.GuildRankProto")
	proto.RegisterType((*TowerRankProto)(nil), "proto.TowerRankProto")
	proto.RegisterType((*BaiZhanRankProto)(nil), "proto.BaiZhanRankProto")
	proto.RegisterType((*StarTaskRankProto)(nil), "proto.StarTaskRankProto")
	proto.RegisterType((*XuanyRankProto)(nil), "proto.XuanyRankProto")
	proto.RegisterEnum("proto.RankType", RankType_name, RankType_value)
}
func (m *RankMiscProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankMiscProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RankCountPerPage != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.RankCountPerPage))
	}
	return i, nil
}

func (m *RankProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.Type))
	}
	if m.JunXianLevel != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.JunXianLevel))
	}
	if m.RankCount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.RankCount))
	}
	if m.StartRank != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.StartRank))
	}
	if m.Self {
		dAtA[i] = 0x28
		i++
		if m.Self {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SubType != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.SubType))
	}
	if len(m.Country) > 0 {
		for _, msg := range m.Country {
			dAtA[i] = 0x52
			i++
			i = encodeVarintRank(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Guild) > 0 {
		for _, msg := range m.Guild {
			dAtA[i] = 0x5a
			i++
			i = encodeVarintRank(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Tower) > 0 {
		for _, msg := range m.Tower {
			dAtA[i] = 0x62
			i++
			i = encodeVarintRank(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.BaiZhan) > 0 {
		for _, msg := range m.BaiZhan {
			dAtA[i] = 0x6a
			i++
			i = encodeVarintRank(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.StarTask) > 0 {
		for _, msg := range m.StarTask {
			dAtA[i] = 0x72
			i++
			i = encodeVarintRank(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Xuanyuan) > 0 {
		for _, msg := range m.Xuanyuan {
			dAtA[i] = 0x7a
			i++
			i = encodeVarintRank(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CountryRankProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountryRankProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRank(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.ColorIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.ColorIndex))
	}
	if m.Leader != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.Leader.Size()))
		n1, err := m.Leader.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.CityCount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.CityCount))
	}
	if m.CityOutput != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.CityOutput))
	}
	return i, nil
}

func (m *GuildRankProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildRankProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Leader != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.Leader.Size()))
		n2, err := m.Leader.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Level != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.Level))
	}
	if m.UpgradeEndTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.UpgradeEndTime))
	}
	if m.Prestige != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.Prestige))
	}
	if m.Country != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.Country))
	}
	if m.CityCount != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.CityCount))
	}
	if m.MemberCount != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.MemberCount))
	}
	return i, nil
}

func (m *TowerRankProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TowerRankProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Hero != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.Hero.Size()))
		n3, err := m.Hero.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Floor != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.Floor))
	}
	if m.Time != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.Time))
	}
	return i, nil
}

func (m *BaiZhanRankProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaiZhanRankProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Hero != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.Hero.Size()))
		n4, err := m.Hero.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Level != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.Level))
	}
	if m.Point != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.Point))
	}
	if m.FightAmount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.FightAmount))
	}
	if m.LevelChangeType != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.LevelChangeType))
	}
	return i, nil
}

func (m *StarTaskRankProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StarTaskRankProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Hero != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.Hero.Size()))
		n5, err := m.Hero.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Star != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.Star))
	}
	return i, nil
}

func (m *XuanyRankProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XuanyRankProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Hero != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.Hero.Size()))
		n6, err := m.Hero.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.Point != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.Point))
	}
	if m.Win != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.Win))
	}
	if m.Lose != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.Lose))
	}
	return i, nil
}

func encodeFixed64Rank(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Rank(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintRank(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RankMiscProto) Size() (n int) {
	var l int
	_ = l
	if m.RankCountPerPage != 0 {
		n += 1 + sovRank(uint64(m.RankCountPerPage))
	}
	return n
}

func (m *RankProto) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovRank(uint64(m.Type))
	}
	if m.JunXianLevel != 0 {
		n += 1 + sovRank(uint64(m.JunXianLevel))
	}
	if m.RankCount != 0 {
		n += 1 + sovRank(uint64(m.RankCount))
	}
	if m.StartRank != 0 {
		n += 1 + sovRank(uint64(m.StartRank))
	}
	if m.Self {
		n += 2
	}
	if m.SubType != 0 {
		n += 1 + sovRank(uint64(m.SubType))
	}
	if len(m.Country) > 0 {
		for _, e := range m.Country {
			l = e.Size()
			n += 1 + l + sovRank(uint64(l))
		}
	}
	if len(m.Guild) > 0 {
		for _, e := range m.Guild {
			l = e.Size()
			n += 1 + l + sovRank(uint64(l))
		}
	}
	if len(m.Tower) > 0 {
		for _, e := range m.Tower {
			l = e.Size()
			n += 1 + l + sovRank(uint64(l))
		}
	}
	if len(m.BaiZhan) > 0 {
		for _, e := range m.BaiZhan {
			l = e.Size()
			n += 1 + l + sovRank(uint64(l))
		}
	}
	if len(m.StarTask) > 0 {
		for _, e := range m.StarTask {
			l = e.Size()
			n += 1 + l + sovRank(uint64(l))
		}
	}
	if len(m.Xuanyuan) > 0 {
		for _, e := range m.Xuanyuan {
			l = e.Size()
			n += 1 + l + sovRank(uint64(l))
		}
	}
	return n
}

func (m *CountryRankProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRank(uint64(l))
	}
	if m.ColorIndex != 0 {
		n += 1 + sovRank(uint64(m.ColorIndex))
	}
	if m.Leader != nil {
		l = m.Leader.Size()
		n += 1 + l + sovRank(uint64(l))
	}
	if m.CityCount != 0 {
		n += 1 + sovRank(uint64(m.CityCount))
	}
	if m.CityOutput != 0 {
		n += 1 + sovRank(uint64(m.CityOutput))
	}
	return n
}

func (m *GuildRankProto) Size() (n int) {
	var l int
	_ = l
	if m.Leader != nil {
		l = m.Leader.Size()
		n += 1 + l + sovRank(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovRank(uint64(m.Level))
	}
	if m.UpgradeEndTime != 0 {
		n += 1 + sovRank(uint64(m.UpgradeEndTime))
	}
	if m.Prestige != 0 {
		n += 1 + sovRank(uint64(m.Prestige))
	}
	if m.Country != 0 {
		n += 1 + sovRank(uint64(m.Country))
	}
	if m.CityCount != 0 {
		n += 1 + sovRank(uint64(m.CityCount))
	}
	if m.MemberCount != 0 {
		n += 1 + sovRank(uint64(m.MemberCount))
	}
	return n
}

func (m *TowerRankProto) Size() (n int) {
	var l int
	_ = l
	if m.Hero != nil {
		l = m.Hero.Size()
		n += 1 + l + sovRank(uint64(l))
	}
	if m.Floor != 0 {
		n += 1 + sovRank(uint64(m.Floor))
	}
	if m.Time != 0 {
		n += 1 + sovRank(uint64(m.Time))
	}
	return n
}

func (m *BaiZhanRankProto) Size() (n int) {
	var l int
	_ = l
	if m.Hero != nil {
		l = m.Hero.Size()
		n += 1 + l + sovRank(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovRank(uint64(m.Level))
	}
	if m.Point != 0 {
		n += 1 + sovRank(uint64(m.Point))
	}
	if m.FightAmount != 0 {
		n += 1 + sovRank(uint64(m.FightAmount))
	}
	if m.LevelChangeType != 0 {
		n += 1 + sovRank(uint64(m.LevelChangeType))
	}
	return n
}

func (m *StarTaskRankProto) Size() (n int) {
	var l int
	_ = l
	if m.Hero != nil {
		l = m.Hero.Size()
		n += 1 + l + sovRank(uint64(l))
	}
	if m.Star != 0 {
		n += 1 + sovRank(uint64(m.Star))
	}
	return n
}

func (m *XuanyRankProto) Size() (n int) {
	var l int
	_ = l
	if m.Hero != nil {
		l = m.Hero.Size()
		n += 1 + l + sovRank(uint64(l))
	}
	if m.Point != 0 {
		n += 1 + sovRank(uint64(m.Point))
	}
	if m.Win != 0 {
		n += 1 + sovRank(uint64(m.Win))
	}
	if m.Lose != 0 {
		n += 1 + sovRank(uint64(m.Lose))
	}
	return n
}

func sovRank(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRank(x uint64) (n int) {
	return sovRank(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RankMiscProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RankMiscProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RankMiscProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankCountPerPage", wireType)
			}
			m.RankCountPerPage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RankCountPerPage |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RankProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RankProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RankProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (RankType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JunXianLevel", wireType)
			}
			m.JunXianLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JunXianLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankCount", wireType)
			}
			m.RankCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RankCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartRank", wireType)
			}
			m.StartRank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartRank |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Self", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Self = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubType", wireType)
			}
			m.SubType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = append(m.Country, &CountryRankProto{})
			if err := m.Country[len(m.Country)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Guild", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Guild = append(m.Guild, &GuildRankProto{})
			if err := m.Guild[len(m.Guild)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tower", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tower = append(m.Tower, &TowerRankProto{})
			if err := m.Tower[len(m.Tower)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaiZhan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaiZhan = append(m.BaiZhan, &BaiZhanRankProto{})
			if err := m.BaiZhan[len(m.BaiZhan)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StarTask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StarTask = append(m.StarTask, &StarTaskRankProto{})
			if err := m.StarTask[len(m.StarTask)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Xuanyuan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Xuanyuan = append(m.Xuanyuan, &XuanyRankProto{})
			if err := m.Xuanyuan[len(m.Xuanyuan)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountryRankProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountryRankProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountryRankProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColorIndex", wireType)
			}
			m.ColorIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColorIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Leader == nil {
				m.Leader = &HeroBasicProto{}
			}
			if err := m.Leader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityCount", wireType)
			}
			m.CityCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityOutput", wireType)
			}
			m.CityOutput = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityOutput |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildRankProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildRankProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildRankProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Leader == nil {
				m.Leader = &HeroBasicProto{}
			}
			if err := m.Leader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgradeEndTime", wireType)
			}
			m.UpgradeEndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpgradeEndTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prestige", wireType)
			}
			m.Prestige = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Prestige |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			m.Country = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Country |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityCount", wireType)
			}
			m.CityCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberCount", wireType)
			}
			m.MemberCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemberCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TowerRankProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TowerRankProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TowerRankProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hero", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hero == nil {
				m.Hero = &HeroBasicProto{}
			}
			if err := m.Hero.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Floor", wireType)
			}
			m.Floor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Floor |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BaiZhanRankProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaiZhanRankProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaiZhanRankProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hero", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hero == nil {
				m.Hero = &HeroBasicProto{}
			}
			if err := m.Hero.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Point", wireType)
			}
			m.Point = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Point |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FightAmount", wireType)
			}
			m.FightAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FightAmount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelChangeType", wireType)
			}
			m.LevelChangeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LevelChangeType |= (LevelChangeType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StarTaskRankProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StarTaskRankProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StarTaskRankProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hero", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hero == nil {
				m.Hero = &HeroBasicProto{}
			}
			if err := m.Hero.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Star", wireType)
			}
			m.Star = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Star |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XuanyRankProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XuanyRankProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XuanyRankProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hero", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hero == nil {
				m.Hero = &HeroBasicProto{}
			}
			if err := m.Hero.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Point", wireType)
			}
			m.Point = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Point |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Win", wireType)
			}
			m.Win = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Win |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lose", wireType)
			}
			m.Lose = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lose |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRank(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRank
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRank
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRank
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRank
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRank
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRank(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRank = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRank   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/pb/shared_proto/rank.proto", fileDescriptorRank)
}

var fileDescriptorRank = []byte{
	// 808 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0x4f, 0x6f, 0xe3, 0x44,
	0x14, 0x5f, 0x6f, 0xe2, 0x36, 0x7d, 0xc9, 0xa6, 0xde, 0x61, 0x01, 0xb3, 0x12, 0xa5, 0x18, 0x0e,
	0x05, 0xb4, 0x89, 0xb6, 0x80, 0xe0, 0x84, 0x44, 0x2a, 0xc4, 0x22, 0x81, 0xa8, 0x4c, 0x0e, 0xd5,
	0x1e, 0xb0, 0xc6, 0xc9, 0xd4, 0x9e, 0x8d, 0x3d, 0xb6, 0xc6, 0x63, 0xd2, 0xf0, 0x49, 0xf8, 0x24,
	0x7c, 0x06, 0x8e, 0xfb, 0x11, 0x50, 0xb9, 0x73, 0xe5, 0x8a, 0xe6, 0xcd, 0x38, 0xb1, 0xcb, 0x0a,
	0x6d, 0x4e, 0x99, 0xf9, 0xbd, 0xdf, 0xf3, 0xfb, 0xbd, 0x3f, 0xf3, 0x02, 0x9f, 0x25, 0x5c, 0xa5,
	0x75, 0x3c, 0x59, 0x14, 0xf9, 0x34, 0xe3, 0x49, 0xaa, 0x4a, 0xba, 0x9e, 0xe6, 0x34, 0x63, 0x5f,
	0x4c, 0xcb, 0x78, 0x5a, 0xa5, 0x54, 0xb2, 0x65, 0x54, 0xca, 0x42, 0x15, 0x53, 0x49, 0xc5, 0x6a,
	0x82, 0x47, 0xe2, 0xe2, 0xcf, 0xe3, 0x2f, 0x5f, 0xdf, 0xb9, 0x12, 0xb4, 0xac, 0xd2, 0x42, 0x4d,
	0xf6, 0xf6, 0x8c, 0x29, 0x8f, 0x7e, 0x4d, 0xa9, 0x30, 0x9e, 0xc1, 0x57, 0xf0, 0x20, 0xa4, 0x62,
	0xf5, 0x03, 0xaf, 0x16, 0x97, 0xa8, 0xe5, 0x09, 0xbc, 0xa1, 0x95, 0x45, 0x8b, 0xa2, 0x16, 0x2a,
	0x2a, 0x99, 0x8c, 0x4a, 0x9a, 0x30, 0xdf, 0x39, 0x75, 0xce, 0xdc, 0xd0, 0xd3, 0xa6, 0x0b, 0x6d,
	0xb9, 0x64, 0xf2, 0x92, 0x26, 0x2c, 0xf8, 0xbb, 0x07, 0x47, 0xfa, 0x03, 0xc6, 0xf9, 0x03, 0xe8,
	0xab, 0x4d, 0x69, 0xd8, 0xe3, 0xf3, 0x63, 0x13, 0x63, 0xa2, 0xed, 0xf3, 0x4d, 0xc9, 0x42, 0x34,
	0x92, 0x0f, 0x61, 0xfc, 0xa2, 0x16, 0xd1, 0x0d, 0xa7, 0x22, 0xca, 0xd8, 0x2f, 0x2c, 0xf3, 0xef,
	0xe3, 0xc7, 0x47, 0x2f, 0x6a, 0x71, 0xc5, 0xa9, 0xf8, 0x5e, 0x63, 0xe4, 0x5d, 0x80, 0x9d, 0x0e,
	0xbf, 0x87, 0x8c, 0xa3, 0x6d, 0x78, 0x6d, 0xae, 0x14, 0x95, 0x2a, 0xd2, 0x90, 0xdf, 0x37, 0x66,
	0x44, 0x74, 0x34, 0x42, 0xa0, 0x5f, 0xb1, 0xec, 0xda, 0x77, 0x4f, 0x9d, 0xb3, 0x41, 0x88, 0x67,
	0xf2, 0x0e, 0x0c, 0xaa, 0x3a, 0x8e, 0x50, 0xe0, 0x01, 0x3a, 0x1c, 0x56, 0x75, 0xac, 0x85, 0x91,
	0xa7, 0x70, 0x88, 0x71, 0xe4, 0xc6, 0x87, 0xd3, 0xde, 0xd9, 0xf0, 0xfc, 0x6d, 0x2b, 0xfd, 0xc2,
	0xa0, 0xdb, 0x0c, 0xc3, 0x86, 0x47, 0x3e, 0x01, 0x37, 0xa9, 0x79, 0xb6, 0xf4, 0x87, 0xe8, 0xf0,
	0xa6, 0x75, 0xf8, 0x56, 0x63, 0x3b, 0xba, 0xe1, 0x68, 0xb2, 0x2a, 0xd6, 0x4c, 0xfa, 0xa3, 0x0e,
	0x79, 0xae, 0xb1, 0x16, 0x19, 0x39, 0xe4, 0x1c, 0x06, 0x4d, 0x93, 0xfc, 0x07, 0x1d, 0x35, 0x33,
	0xca, 0x9f, 0xa7, 0x54, 0xb4, 0xd4, 0xc4, 0x06, 0x21, 0x9f, 0x03, 0x26, 0x1f, 0x29, 0x5a, 0xad,
	0xfc, 0x31, 0x3a, 0xf9, 0xd6, 0xe9, 0x27, 0x45, 0xe5, 0x9c, 0x56, 0xab, 0x9d, 0xd7, 0xa0, 0xb2,
	0x10, 0x79, 0x0a, 0x83, 0x9b, 0x9a, 0x8a, 0x4d, 0x4d, 0x85, 0x7f, 0xdc, 0x91, 0x76, 0xa5, 0xe1,
	0x96, 0x4b, 0x43, 0x0b, 0x7e, 0x77, 0xc0, 0xbb, 0x5b, 0x15, 0x5d, 0x6e, 0x41, 0x73, 0xd3, 0xf7,
	0xa3, 0x10, 0xcf, 0xe4, 0x3d, 0x18, 0x2e, 0x8a, 0xac, 0x90, 0x11, 0x17, 0x4b, 0x76, 0x63, 0x7b,
	0x0c, 0x08, 0x7d, 0xa7, 0x11, 0xf2, 0x04, 0x0e, 0x32, 0x46, 0x97, 0x4c, 0x62, 0x77, 0x77, 0xa1,
	0x9f, 0x31, 0x59, 0xcc, 0x68, 0xc5, 0xcd, 0x40, 0x86, 0x96, 0xa4, 0x3b, 0xbe, 0xe0, 0x6a, 0x63,
	0x07, 0xc2, 0x76, 0x5c, 0x23, 0x66, 0x20, 0x74, 0x38, 0x6d, 0x2e, 0x6a, 0x55, 0xd6, 0x0a, 0x1b,
	0xaf, 0xc3, 0x71, 0xb5, 0xf9, 0x11, 0x91, 0xe0, 0x1f, 0x07, 0xc6, 0xdd, 0xee, 0xb4, 0x14, 0x38,
	0xaf, 0xa3, 0xe0, 0x11, 0xb8, 0xed, 0x79, 0x35, 0x17, 0x72, 0x06, 0x5e, 0x5d, 0x26, 0x92, 0x2e,
	0x59, 0xc4, 0xc4, 0x32, 0x52, 0x3c, 0x67, 0x76, 0x5c, 0xc7, 0x16, 0xff, 0x46, 0x2c, 0xe7, 0x3c,
	0x67, 0xe4, 0x31, 0x0c, 0x4a, 0xc9, 0x2a, 0xc5, 0x13, 0x66, 0xf5, 0x6f, 0xef, 0xc4, 0xdf, 0x4d,
	0xa0, 0x91, 0xbe, 0x1d, 0xb4, 0x6e, 0xde, 0x07, 0x77, 0xf3, 0x7e, 0x1f, 0x46, 0x39, 0xcb, 0x63,
	0x26, 0x2d, 0xe1, 0x10, 0x09, 0x43, 0x83, 0x21, 0x25, 0x60, 0x30, 0xee, 0x4e, 0x1a, 0xf9, 0x08,
	0xfa, 0x29, 0x93, 0xc5, 0xff, 0xa7, 0x8d, 0x14, 0x9d, 0xf4, 0x75, 0x56, 0x14, 0xb2, 0x49, 0x1a,
	0x2f, 0xba, 0xe1, 0xad, 0x44, 0xf1, 0x1c, 0xbc, 0x74, 0xc0, 0xbb, 0x3b, 0xa1, 0x7b, 0x46, 0x7a,
	0x45, 0x79, 0x1f, 0x81, 0x5b, 0x16, 0x7c, 0xbb, 0x02, 0xcc, 0x45, 0x67, 0x7d, 0xad, 0xf7, 0x5c,
	0x44, 0xf3, 0xd6, 0x38, 0x0c, 0x11, 0xfb, 0x1a, 0x21, 0x32, 0x83, 0x87, 0xf8, 0x85, 0x68, 0x91,
	0x52, 0x91, 0x30, 0xf3, 0xee, 0x5d, 0x5c, 0x4c, 0x6f, 0x59, 0x19, 0xb8, 0x69, 0x2e, 0xd0, 0x8c,
	0xfb, 0xe9, 0x38, 0xeb, 0x02, 0x41, 0x08, 0x0f, 0xff, 0xf3, 0x7c, 0xf6, 0x49, 0x49, 0xaf, 0x21,
	0x45, 0x9b, 0xda, 0xe1, 0x39, 0x58, 0xc3, 0xb8, 0xfb, 0xb8, 0xf6, 0xac, 0xd1, 0x2b, 0xaa, 0xe1,
	0x41, 0x6f, 0xcd, 0x85, 0x2d, 0x82, 0x3e, 0xea, 0xc0, 0x59, 0x51, 0x31, 0x3b, 0x4b, 0x78, 0xfe,
	0xf8, 0x67, 0x18, 0x34, 0x9b, 0x98, 0x0c, 0xe1, 0xd0, 0x3e, 0x62, 0xef, 0x1e, 0x39, 0x02, 0x17,
	0x1f, 0x86, 0xe7, 0xe8, 0x23, 0x8e, 0x8a, 0x77, 0x5f, 0x53, 0x6c, 0x37, 0xbd, 0x1e, 0xf1, 0x60,
	0xa4, 0x7d, 0x9b, 0x62, 0x78, 0xfd, 0x06, 0xb9, 0xb2, 0x7b, 0xc1, 0x73, 0x67, 0xa7, 0x7f, 0xdc,
	0x9e, 0x38, 0x2f, 0x6f, 0x4f, 0x9c, 0x3f, 0x6f, 0x4f, 0x9c, 0xdf, 0xfe, 0x3a, 0xb9, 0xf7, 0xcc,
	0x79, 0x3e, 0x6a, 0xff, 0xf7, 0xc4, 0x07, 0xf8, 0xf3, 0xe9, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff,
	0xe9, 0xcf, 0xee, 0x51, 0x26, 0x07, 0x00, 0x00,
}
