// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/pb/shared_proto/red_packet.proto
// DO NOT EDIT!

package shared_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 自己的红包数据
type HeroRedPacketProto struct {
	RedPackets []*BoughtRedPacketProto `protobuf:"bytes,1,rep,name=red_packets,json=redPackets" json:"red_packets,omitempty"`
}

func (m *HeroRedPacketProto) Reset()                    { *m = HeroRedPacketProto{} }
func (m *HeroRedPacketProto) String() string            { return proto.CompactTextString(m) }
func (*HeroRedPacketProto) ProtoMessage()               {}
func (*HeroRedPacketProto) Descriptor() ([]byte, []int) { return fileDescriptorRedPacket, []int{0} }

func (m *HeroRedPacketProto) GetRedPackets() []*BoughtRedPacketProto {
	if m != nil {
		return m.RedPackets
	}
	return nil
}

// 买过的红包
type BoughtRedPacketProto struct {
	DataId int32 `protobuf:"varint,1,opt,name=data_id,json=dataId,proto3" json:"data_id,omitempty"`
	Count  int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *BoughtRedPacketProto) Reset()                    { *m = BoughtRedPacketProto{} }
func (m *BoughtRedPacketProto) String() string            { return proto.CompactTextString(m) }
func (*BoughtRedPacketProto) ProtoMessage()               {}
func (*BoughtRedPacketProto) Descriptor() ([]byte, []int) { return fileDescriptorRedPacket, []int{1} }

func (m *BoughtRedPacketProto) GetDataId() int32 {
	if m != nil {
		return m.DataId
	}
	return 0
}

func (m *BoughtRedPacketProto) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type RedPacketProto struct {
	Id           []byte                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DataId       int32                 `protobuf:"varint,2,opt,name=data_id,json=dataId,proto3" json:"data_id,omitempty"`
	CreateTime   int32                 `protobuf:"varint,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	CreateHero   *HeroBasicProto       `protobuf:"bytes,4,opt,name=create_hero,json=createHero" json:"create_hero,omitempty"`
	Text         string                `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	ChatType     ChatType              `protobuf:"varint,6,opt,name=chat_type,json=chatType,proto3,enum=proto.ChatType" json:"chat_type,omitempty"`
	Count        int32                 `protobuf:"varint,7,opt,name=count,proto3" json:"count,omitempty"`
	AllGrabbed   bool                  `protobuf:"varint,8,opt,name=all_grabbed,json=allGrabbed,proto3" json:"all_grabbed,omitempty"`
	GrabbedParts []*RedPacketPartProto `protobuf:"bytes,9,rep,name=grabbed_parts,json=grabbedParts" json:"grabbed_parts,omitempty"`
}

func (m *RedPacketProto) Reset()                    { *m = RedPacketProto{} }
func (m *RedPacketProto) String() string            { return proto.CompactTextString(m) }
func (*RedPacketProto) ProtoMessage()               {}
func (*RedPacketProto) Descriptor() ([]byte, []int) { return fileDescriptorRedPacket, []int{2} }

func (m *RedPacketProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *RedPacketProto) GetDataId() int32 {
	if m != nil {
		return m.DataId
	}
	return 0
}

func (m *RedPacketProto) GetCreateTime() int32 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *RedPacketProto) GetCreateHero() *HeroBasicProto {
	if m != nil {
		return m.CreateHero
	}
	return nil
}

func (m *RedPacketProto) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *RedPacketProto) GetChatType() ChatType {
	if m != nil {
		return m.ChatType
	}
	return ChatType_ChatWorld
}

func (m *RedPacketProto) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *RedPacketProto) GetAllGrabbed() bool {
	if m != nil {
		return m.AllGrabbed
	}
	return false
}

func (m *RedPacketProto) GetGrabbedParts() []*RedPacketPartProto {
	if m != nil {
		return m.GrabbedParts
	}
	return nil
}

// 每个小红包
type RedPacketPartProto struct {
	Money       int32           `protobuf:"varint,1,opt,name=money,proto3" json:"money,omitempty"`
	GrabbedTime int32           `protobuf:"varint,2,opt,name=grabbed_time,json=grabbedTime,proto3" json:"grabbed_time,omitempty"`
	GrabbedHero *HeroBasicProto `protobuf:"bytes,3,opt,name=grabbed_hero,json=grabbedHero" json:"grabbed_hero,omitempty"`
}

func (m *RedPacketPartProto) Reset()                    { *m = RedPacketPartProto{} }
func (m *RedPacketPartProto) String() string            { return proto.CompactTextString(m) }
func (*RedPacketPartProto) ProtoMessage()               {}
func (*RedPacketPartProto) Descriptor() ([]byte, []int) { return fileDescriptorRedPacket, []int{3} }

func (m *RedPacketPartProto) GetMoney() int32 {
	if m != nil {
		return m.Money
	}
	return 0
}

func (m *RedPacketPartProto) GetGrabbedTime() int32 {
	if m != nil {
		return m.GrabbedTime
	}
	return 0
}

func (m *RedPacketPartProto) GetGrabbedHero() *HeroBasicProto {
	if m != nil {
		return m.GrabbedHero
	}
	return nil
}

// 红包状态
type RedPacketStateProto struct {
	State []*SingleRedPacketStateProto `protobuf:"bytes,1,rep,name=state" json:"state,omitempty"`
}

func (m *RedPacketStateProto) Reset()                    { *m = RedPacketStateProto{} }
func (m *RedPacketStateProto) String() string            { return proto.CompactTextString(m) }
func (*RedPacketStateProto) ProtoMessage()               {}
func (*RedPacketStateProto) Descriptor() ([]byte, []int) { return fileDescriptorRedPacket, []int{4} }

func (m *RedPacketStateProto) GetState() []*SingleRedPacketStateProto {
	if m != nil {
		return m.State
	}
	return nil
}

// 单个红包状态
type SingleRedPacketStateProto struct {
	RedPacketId []byte `protobuf:"bytes,1,opt,name=red_packet_id,json=redPacketId,proto3" json:"red_packet_id,omitempty"`
	AllGrabbed  bool   `protobuf:"varint,2,opt,name=all_grabbed,json=allGrabbed,proto3" json:"all_grabbed,omitempty"`
	Expired     bool   `protobuf:"varint,3,opt,name=expired,proto3" json:"expired,omitempty"`
	NotExist    bool   `protobuf:"varint,4,opt,name=not_exist,json=notExist,proto3" json:"not_exist,omitempty"`
}

func (m *SingleRedPacketStateProto) Reset()         { *m = SingleRedPacketStateProto{} }
func (m *SingleRedPacketStateProto) String() string { return proto.CompactTextString(m) }
func (*SingleRedPacketStateProto) ProtoMessage()    {}
func (*SingleRedPacketStateProto) Descriptor() ([]byte, []int) {
	return fileDescriptorRedPacket, []int{5}
}

func (m *SingleRedPacketStateProto) GetRedPacketId() []byte {
	if m != nil {
		return m.RedPacketId
	}
	return nil
}

func (m *SingleRedPacketStateProto) GetAllGrabbed() bool {
	if m != nil {
		return m.AllGrabbed
	}
	return false
}

func (m *SingleRedPacketStateProto) GetExpired() bool {
	if m != nil {
		return m.Expired
	}
	return false
}

func (m *SingleRedPacketStateProto) GetNotExist() bool {
	if m != nil {
		return m.NotExist
	}
	return false
}

func init() {
	proto.RegisterType((*HeroRedPacketProto)(nil), "proto.HeroRedPacketProto")
	proto.RegisterType((*BoughtRedPacketProto)(nil), "proto.BoughtRedPacketProto")
	proto.RegisterType((*RedPacketProto)(nil), "proto.RedPacketProto")
	proto.RegisterType((*RedPacketPartProto)(nil), "proto.RedPacketPartProto")
	proto.RegisterType((*RedPacketStateProto)(nil), "proto.RedPacketStateProto")
	proto.RegisterType((*SingleRedPacketStateProto)(nil), "proto.SingleRedPacketStateProto")
}
func (m *HeroRedPacketProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeroRedPacketProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RedPackets) > 0 {
		for _, msg := range m.RedPackets {
			dAtA[i] = 0xa
			i++
			i = encodeVarintRedPacket(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *BoughtRedPacketProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BoughtRedPacketProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DataId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRedPacket(dAtA, i, uint64(m.DataId))
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRedPacket(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *RedPacketProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedPacketProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRedPacket(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.DataId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRedPacket(dAtA, i, uint64(m.DataId))
	}
	if m.CreateTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRedPacket(dAtA, i, uint64(m.CreateTime))
	}
	if m.CreateHero != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRedPacket(dAtA, i, uint64(m.CreateHero.Size()))
		n1, err := m.CreateHero.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Text) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRedPacket(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	if m.ChatType != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintRedPacket(dAtA, i, uint64(m.ChatType))
	}
	if m.Count != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintRedPacket(dAtA, i, uint64(m.Count))
	}
	if m.AllGrabbed {
		dAtA[i] = 0x40
		i++
		if m.AllGrabbed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.GrabbedParts) > 0 {
		for _, msg := range m.GrabbedParts {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintRedPacket(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RedPacketPartProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedPacketPartProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Money != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRedPacket(dAtA, i, uint64(m.Money))
	}
	if m.GrabbedTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRedPacket(dAtA, i, uint64(m.GrabbedTime))
	}
	if m.GrabbedHero != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRedPacket(dAtA, i, uint64(m.GrabbedHero.Size()))
		n2, err := m.GrabbedHero.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *RedPacketStateProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedPacketStateProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.State) > 0 {
		for _, msg := range m.State {
			dAtA[i] = 0xa
			i++
			i = encodeVarintRedPacket(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SingleRedPacketStateProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SingleRedPacketStateProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RedPacketId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRedPacket(dAtA, i, uint64(len(m.RedPacketId)))
		i += copy(dAtA[i:], m.RedPacketId)
	}
	if m.AllGrabbed {
		dAtA[i] = 0x10
		i++
		if m.AllGrabbed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Expired {
		dAtA[i] = 0x18
		i++
		if m.Expired {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.NotExist {
		dAtA[i] = 0x20
		i++
		if m.NotExist {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeFixed64RedPacket(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32RedPacket(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintRedPacket(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *HeroRedPacketProto) Size() (n int) {
	var l int
	_ = l
	if len(m.RedPackets) > 0 {
		for _, e := range m.RedPackets {
			l = e.Size()
			n += 1 + l + sovRedPacket(uint64(l))
		}
	}
	return n
}

func (m *BoughtRedPacketProto) Size() (n int) {
	var l int
	_ = l
	if m.DataId != 0 {
		n += 1 + sovRedPacket(uint64(m.DataId))
	}
	if m.Count != 0 {
		n += 1 + sovRedPacket(uint64(m.Count))
	}
	return n
}

func (m *RedPacketProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRedPacket(uint64(l))
	}
	if m.DataId != 0 {
		n += 1 + sovRedPacket(uint64(m.DataId))
	}
	if m.CreateTime != 0 {
		n += 1 + sovRedPacket(uint64(m.CreateTime))
	}
	if m.CreateHero != nil {
		l = m.CreateHero.Size()
		n += 1 + l + sovRedPacket(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovRedPacket(uint64(l))
	}
	if m.ChatType != 0 {
		n += 1 + sovRedPacket(uint64(m.ChatType))
	}
	if m.Count != 0 {
		n += 1 + sovRedPacket(uint64(m.Count))
	}
	if m.AllGrabbed {
		n += 2
	}
	if len(m.GrabbedParts) > 0 {
		for _, e := range m.GrabbedParts {
			l = e.Size()
			n += 1 + l + sovRedPacket(uint64(l))
		}
	}
	return n
}

func (m *RedPacketPartProto) Size() (n int) {
	var l int
	_ = l
	if m.Money != 0 {
		n += 1 + sovRedPacket(uint64(m.Money))
	}
	if m.GrabbedTime != 0 {
		n += 1 + sovRedPacket(uint64(m.GrabbedTime))
	}
	if m.GrabbedHero != nil {
		l = m.GrabbedHero.Size()
		n += 1 + l + sovRedPacket(uint64(l))
	}
	return n
}

func (m *RedPacketStateProto) Size() (n int) {
	var l int
	_ = l
	if len(m.State) > 0 {
		for _, e := range m.State {
			l = e.Size()
			n += 1 + l + sovRedPacket(uint64(l))
		}
	}
	return n
}

func (m *SingleRedPacketStateProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.RedPacketId)
	if l > 0 {
		n += 1 + l + sovRedPacket(uint64(l))
	}
	if m.AllGrabbed {
		n += 2
	}
	if m.Expired {
		n += 2
	}
	if m.NotExist {
		n += 2
	}
	return n
}

func sovRedPacket(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRedPacket(x uint64) (n int) {
	return sovRedPacket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HeroRedPacketProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRedPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroRedPacketProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroRedPacketProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedPackets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRedPacket
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedPackets = append(m.RedPackets, &BoughtRedPacketProto{})
			if err := m.RedPackets[len(m.RedPackets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRedPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRedPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BoughtRedPacketProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRedPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BoughtRedPacketProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BoughtRedPacketProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataId", wireType)
			}
			m.DataId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRedPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRedPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RedPacketProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRedPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RedPacketProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RedPacketProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRedPacket
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataId", wireType)
			}
			m.DataId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateHero", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRedPacket
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreateHero == nil {
				m.CreateHero = &HeroBasicProto{}
			}
			if err := m.CreateHero.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRedPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatType", wireType)
			}
			m.ChatType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatType |= (ChatType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllGrabbed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllGrabbed = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrabbedParts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRedPacket
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GrabbedParts = append(m.GrabbedParts, &RedPacketPartProto{})
			if err := m.GrabbedParts[len(m.GrabbedParts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRedPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRedPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RedPacketPartProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRedPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RedPacketPartProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RedPacketPartProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Money", wireType)
			}
			m.Money = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Money |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrabbedTime", wireType)
			}
			m.GrabbedTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GrabbedTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrabbedHero", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRedPacket
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GrabbedHero == nil {
				m.GrabbedHero = &HeroBasicProto{}
			}
			if err := m.GrabbedHero.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRedPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRedPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RedPacketStateProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRedPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RedPacketStateProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RedPacketStateProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRedPacket
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = append(m.State, &SingleRedPacketStateProto{})
			if err := m.State[len(m.State)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRedPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRedPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SingleRedPacketStateProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRedPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SingleRedPacketStateProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SingleRedPacketStateProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedPacketId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRedPacket
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedPacketId = append(m.RedPacketId[:0], dAtA[iNdEx:postIndex]...)
			if m.RedPacketId == nil {
				m.RedPacketId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllGrabbed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllGrabbed = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expired", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Expired = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotExist", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NotExist = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRedPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRedPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRedPacket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRedPacket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRedPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRedPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRedPacket
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRedPacket
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRedPacket(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRedPacket = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRedPacket   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/pb/shared_proto/red_packet.proto", fileDescriptorRedPacket)
}

var fileDescriptorRedPacket = []byte{
	// 535 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x66, 0x9d, 0x26, 0x71, 0xc6, 0x69, 0x90, 0x96, 0x22, 0xdc, 0x56, 0x0a, 0xc6, 0x27, 0x1f,
	0x50, 0x22, 0x05, 0x54, 0x2a, 0x84, 0x38, 0x04, 0x55, 0x94, 0x03, 0x52, 0xb5, 0xed, 0x89, 0x8b,
	0xb5, 0xb1, 0x47, 0xb1, 0x85, 0xe3, 0xb5, 0xec, 0x8d, 0x48, 0x9e, 0x80, 0x47, 0x80, 0x47, 0x42,
	0xe2, 0xc2, 0x23, 0xa0, 0xf0, 0x22, 0xc8, 0xbb, 0x9b, 0x9f, 0xd2, 0x52, 0xf5, 0xb4, 0x3b, 0xdf,
	0x7e, 0xdf, 0x78, 0xe6, 0x9b, 0x31, 0xbc, 0x9e, 0xa6, 0x32, 0x99, 0x4f, 0x06, 0x91, 0x98, 0x0d,
	0xb3, 0x74, 0x9a, 0xc8, 0x82, 0x7f, 0x19, 0xce, 0x78, 0x86, 0xaf, 0x86, 0xc5, 0x64, 0x58, 0x25,
	0xbc, 0xc4, 0x38, 0x2c, 0x4a, 0x21, 0xc5, 0x50, 0xdd, 0x78, 0xf4, 0x19, 0xe5, 0x40, 0x01, 0xb4,
	0xa9, 0x8e, 0xa3, 0x97, 0xf7, 0x4f, 0x11, 0x25, 0xdc, 0x88, 0x8f, 0x4e, 0xef, 0xaf, 0xaa, 0x72,
	0x5e, 0x54, 0x89, 0x30, 0x4a, 0x9f, 0x01, 0x3d, 0xc7, 0x52, 0x30, 0x8c, 0x2f, 0x54, 0x35, 0x17,
	0xaa, 0x98, 0x37, 0xe0, 0x6c, 0x0b, 0xac, 0x5c, 0xe2, 0x35, 0x02, 0x67, 0x74, 0xac, 0x25, 0x83,
	0xb1, 0x98, 0x4f, 0x13, 0x79, 0x5d, 0xc1, 0xa0, 0x5c, 0xc7, 0x95, 0x7f, 0x06, 0x07, 0xb7, 0x71,
	0xe8, 0x13, 0x68, 0xc7, 0x5c, 0xf2, 0x30, 0x8d, 0x5d, 0xe2, 0x91, 0xa0, 0xc9, 0x5a, 0x75, 0xf8,
	0x21, 0xa6, 0x07, 0xd0, 0x8c, 0xc4, 0x3c, 0x97, 0xae, 0xa5, 0x60, 0x1d, 0xf8, 0x3f, 0x2d, 0xe8,
	0xfd, 0x93, 0xa1, 0x07, 0x96, 0x11, 0x77, 0x99, 0x95, 0xc6, 0xbb, 0x19, 0xad, 0x6b, 0x19, 0x9f,
	0x82, 0x13, 0x95, 0xc8, 0x25, 0x86, 0x32, 0x9d, 0xa1, 0xdb, 0x50, 0x8f, 0xa0, 0xa1, 0xab, 0x74,
	0x86, 0xf4, 0x64, 0x43, 0x48, 0xb0, 0x14, 0xee, 0x9e, 0x47, 0x02, 0x67, 0xf4, 0xd8, 0x74, 0x58,
	0x3b, 0x32, 0xe6, 0x55, 0x1a, 0x99, 0xde, 0x34, 0xb3, 0x46, 0x29, 0x85, 0x3d, 0x89, 0x0b, 0xe9,
	0x36, 0x3d, 0x12, 0x74, 0x98, 0xba, 0xd3, 0xe7, 0xd0, 0xa9, 0x67, 0x11, 0xca, 0x65, 0x81, 0x6e,
	0xcb, 0x23, 0x41, 0x6f, 0xf4, 0xd0, 0x64, 0x7a, 0x97, 0x70, 0x79, 0xb5, 0x2c, 0x90, 0xd9, 0x91,
	0xb9, 0x6d, 0x9b, 0x6d, 0xef, 0x34, 0x5b, 0x17, 0xcc, 0xb3, 0x2c, 0x9c, 0x96, 0x7c, 0x32, 0xc1,
	0xd8, 0xb5, 0x3d, 0x12, 0xd8, 0x0c, 0x78, 0x96, 0xbd, 0xd7, 0x08, 0x7d, 0x0b, 0xfb, 0xe6, 0x31,
	0x2c, 0x78, 0x29, 0x2b, 0xb7, 0xa3, 0x86, 0x72, 0x68, 0x3e, 0xb4, 0x35, 0x8a, 0x97, 0x66, 0x24,
	0x5d, 0xc3, 0xaf, 0x91, 0xca, 0xff, 0x4a, 0x80, 0xde, 0x24, 0xd5, 0xd5, 0xcc, 0x44, 0x8e, 0x4b,
	0x33, 0x11, 0x1d, 0xd0, 0x67, 0xb0, 0x16, 0x6b, 0xff, 0xb4, 0xb9, 0x8e, 0xc1, 0x94, 0x81, 0xa7,
	0x5b, 0x8a, 0x72, 0xb0, 0x71, 0x97, 0x83, 0x6b, 0x65, 0x0d, 0xfb, 0x1f, 0xe1, 0xd1, 0xa6, 0x90,
	0x4b, 0xc9, 0x25, 0xea, 0x4a, 0x4e, 0xa0, 0x59, 0xd5, 0x91, 0xd9, 0x36, 0xcf, 0x64, 0xba, 0x4c,
	0xf3, 0x69, 0x86, 0xb7, 0x08, 0x98, 0xa6, 0xfb, 0xdf, 0x08, 0x1c, 0xfe, 0x97, 0x44, 0x7d, 0xd8,
	0xdf, 0x6e, 0x72, 0xb8, 0x59, 0x1e, 0x67, 0xb3, 0xae, 0x7a, 0x59, 0x76, 0xbd, 0xb7, 0x6e, 0x78,
	0xef, 0x42, 0x1b, 0x17, 0x45, 0x5a, 0x62, 0xac, 0xda, 0xb4, 0xd9, 0x3a, 0xa4, 0xc7, 0xd0, 0xc9,
	0x85, 0x0c, 0x71, 0x91, 0x56, 0x52, 0x2d, 0x91, 0xcd, 0xec, 0x5c, 0xc8, 0xb3, 0x3a, 0x1e, 0x7b,
	0x3f, 0x56, 0x7d, 0xf2, 0x6b, 0xd5, 0x27, 0xbf, 0x57, 0x7d, 0xf2, 0xfd, 0x4f, 0xff, 0xc1, 0x39,
	0xf9, 0xd4, 0xdd, 0xfd, 0x19, 0x27, 0x2d, 0x75, 0xbc, 0xf8, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x01,
	0x44, 0x37, 0xa0, 0x39, 0x04, 0x00, 0x00,
}
