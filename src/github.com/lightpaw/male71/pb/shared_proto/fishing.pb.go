// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/pb/shared_proto/fishing.proto
// DO NOT EDIT!

package shared_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type FishingCostProto struct {
	Times         int32      `protobuf:"varint,1,opt,name=times,proto3" json:"times,omitempty"`
	Cost          *CostProto `protobuf:"bytes,2,opt,name=cost" json:"cost,omitempty"`
	FreeTimes     int32      `protobuf:"varint,3,opt,name=free_times,json=freeTimes,proto3" json:"free_times,omitempty"`
	DiscountTimes int32      `protobuf:"varint,4,opt,name=discount_times,json=discountTimes,proto3" json:"discount_times,omitempty"`
	DiscountCost  *CostProto `protobuf:"bytes,5,opt,name=discount_cost,json=discountCost" json:"discount_cost,omitempty"`
	FishType      int32      `protobuf:"varint,11,opt,name=fish_type,json=fishType,proto3" json:"fish_type,omitempty"`
	DailyTimes    int32      `protobuf:"varint,12,opt,name=daily_times,json=dailyTimes,proto3" json:"daily_times,omitempty"`
}

func (m *FishingCostProto) Reset()                    { *m = FishingCostProto{} }
func (m *FishingCostProto) String() string            { return proto.CompactTextString(m) }
func (*FishingCostProto) ProtoMessage()               {}
func (*FishingCostProto) Descriptor() ([]byte, []int) { return fileDescriptorFishing, []int{0} }

func (m *FishingCostProto) GetTimes() int32 {
	if m != nil {
		return m.Times
	}
	return 0
}

func (m *FishingCostProto) GetCost() *CostProto {
	if m != nil {
		return m.Cost
	}
	return nil
}

func (m *FishingCostProto) GetFreeTimes() int32 {
	if m != nil {
		return m.FreeTimes
	}
	return 0
}

func (m *FishingCostProto) GetDiscountTimes() int32 {
	if m != nil {
		return m.DiscountTimes
	}
	return 0
}

func (m *FishingCostProto) GetDiscountCost() *CostProto {
	if m != nil {
		return m.DiscountCost
	}
	return nil
}

func (m *FishingCostProto) GetFishType() int32 {
	if m != nil {
		return m.FishType
	}
	return 0
}

func (m *FishingCostProto) GetDailyTimes() int32 {
	if m != nil {
		return m.DailyTimes
	}
	return 0
}

type FishingShowProto struct {
	Desc            string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	GoodsData       int32  `protobuf:"varint,3,opt,name=goods_data,json=goodsData,proto3" json:"goods_data,omitempty"`
	GemData         int32  `protobuf:"varint,4,opt,name=gem_data,json=gemData,proto3" json:"gem_data,omitempty"`
	EquipmentData   int32  `protobuf:"varint,5,opt,name=equipment_data,json=equipmentData,proto3" json:"equipment_data,omitempty"`
	CaptainSoulData int32  `protobuf:"varint,6,opt,name=captain_soul_data,json=captainSoulData,proto3" json:"captain_soul_data,omitempty"`
	FishType        int32  `protobuf:"varint,11,opt,name=fish_type,json=fishType,proto3" json:"fish_type,omitempty"`
	Out             bool   `protobuf:"varint,12,opt,name=out,proto3" json:"out,omitempty"`
	ShowType        int32  `protobuf:"varint,13,opt,name=show_type,json=showType,proto3" json:"show_type,omitempty"`
}

func (m *FishingShowProto) Reset()                    { *m = FishingShowProto{} }
func (m *FishingShowProto) String() string            { return proto.CompactTextString(m) }
func (*FishingShowProto) ProtoMessage()               {}
func (*FishingShowProto) Descriptor() ([]byte, []int) { return fileDescriptorFishing, []int{1} }

func (m *FishingShowProto) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *FishingShowProto) GetGoodsData() int32 {
	if m != nil {
		return m.GoodsData
	}
	return 0
}

func (m *FishingShowProto) GetGemData() int32 {
	if m != nil {
		return m.GemData
	}
	return 0
}

func (m *FishingShowProto) GetEquipmentData() int32 {
	if m != nil {
		return m.EquipmentData
	}
	return 0
}

func (m *FishingShowProto) GetCaptainSoulData() int32 {
	if m != nil {
		return m.CaptainSoulData
	}
	return 0
}

func (m *FishingShowProto) GetFishType() int32 {
	if m != nil {
		return m.FishType
	}
	return 0
}

func (m *FishingShowProto) GetOut() bool {
	if m != nil {
		return m.Out
	}
	return false
}

func (m *FishingShowProto) GetShowType() int32 {
	if m != nil {
		return m.ShowType
	}
	return 0
}

// 玩家钓鱼
type HeroFishingProto struct {
	Times        []int32 `protobuf:"varint,1,rep,name=times" json:"times,omitempty"`
	FishingTimes []int32 `protobuf:"varint,2,rep,name=fishing_times,json=fishingTimes" json:"fishing_times,omitempty"`
	FishType     []int32 `protobuf:"varint,3,rep,name=fish_type,json=fishType" json:"fish_type,omitempty"`
	Countdown    []int32 `protobuf:"varint,4,rep,name=countdown" json:"countdown,omitempty"`
	CaptainSet   int32   `protobuf:"varint,5,opt,name=captain_set,json=captainSet,proto3" json:"captain_set,omitempty"`
}

func (m *HeroFishingProto) Reset()                    { *m = HeroFishingProto{} }
func (m *HeroFishingProto) String() string            { return proto.CompactTextString(m) }
func (*HeroFishingProto) ProtoMessage()               {}
func (*HeroFishingProto) Descriptor() ([]byte, []int) { return fileDescriptorFishing, []int{2} }

func (m *HeroFishingProto) GetTimes() []int32 {
	if m != nil {
		return m.Times
	}
	return nil
}

func (m *HeroFishingProto) GetFishingTimes() []int32 {
	if m != nil {
		return m.FishingTimes
	}
	return nil
}

func (m *HeroFishingProto) GetFishType() []int32 {
	if m != nil {
		return m.FishType
	}
	return nil
}

func (m *HeroFishingProto) GetCountdown() []int32 {
	if m != nil {
		return m.Countdown
	}
	return nil
}

func (m *HeroFishingProto) GetCaptainSet() int32 {
	if m != nil {
		return m.CaptainSet
	}
	return 0
}

func init() {
	proto.RegisterType((*FishingCostProto)(nil), "proto.FishingCostProto")
	proto.RegisterType((*FishingShowProto)(nil), "proto.FishingShowProto")
	proto.RegisterType((*HeroFishingProto)(nil), "proto.HeroFishingProto")
}
func (m *FishingCostProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FishingCostProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Times != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFishing(dAtA, i, uint64(m.Times))
	}
	if m.Cost != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFishing(dAtA, i, uint64(m.Cost.Size()))
		n1, err := m.Cost.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.FreeTimes != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFishing(dAtA, i, uint64(m.FreeTimes))
	}
	if m.DiscountTimes != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintFishing(dAtA, i, uint64(m.DiscountTimes))
	}
	if m.DiscountCost != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintFishing(dAtA, i, uint64(m.DiscountCost.Size()))
		n2, err := m.DiscountCost.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.FishType != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintFishing(dAtA, i, uint64(m.FishType))
	}
	if m.DailyTimes != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintFishing(dAtA, i, uint64(m.DailyTimes))
	}
	return i, nil
}

func (m *FishingShowProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FishingShowProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Desc) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFishing(dAtA, i, uint64(len(m.Desc)))
		i += copy(dAtA[i:], m.Desc)
	}
	if m.GoodsData != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFishing(dAtA, i, uint64(m.GoodsData))
	}
	if m.GemData != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintFishing(dAtA, i, uint64(m.GemData))
	}
	if m.EquipmentData != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintFishing(dAtA, i, uint64(m.EquipmentData))
	}
	if m.CaptainSoulData != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintFishing(dAtA, i, uint64(m.CaptainSoulData))
	}
	if m.FishType != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintFishing(dAtA, i, uint64(m.FishType))
	}
	if m.Out {
		dAtA[i] = 0x60
		i++
		if m.Out {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ShowType != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintFishing(dAtA, i, uint64(m.ShowType))
	}
	return i, nil
}

func (m *HeroFishingProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeroFishingProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Times) > 0 {
		for _, num := range m.Times {
			dAtA[i] = 0x8
			i++
			i = encodeVarintFishing(dAtA, i, uint64(num))
		}
	}
	if len(m.FishingTimes) > 0 {
		for _, num := range m.FishingTimes {
			dAtA[i] = 0x10
			i++
			i = encodeVarintFishing(dAtA, i, uint64(num))
		}
	}
	if len(m.FishType) > 0 {
		for _, num := range m.FishType {
			dAtA[i] = 0x18
			i++
			i = encodeVarintFishing(dAtA, i, uint64(num))
		}
	}
	if len(m.Countdown) > 0 {
		for _, num := range m.Countdown {
			dAtA[i] = 0x20
			i++
			i = encodeVarintFishing(dAtA, i, uint64(num))
		}
	}
	if m.CaptainSet != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintFishing(dAtA, i, uint64(m.CaptainSet))
	}
	return i, nil
}

func encodeFixed64Fishing(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Fishing(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintFishing(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *FishingCostProto) Size() (n int) {
	var l int
	_ = l
	if m.Times != 0 {
		n += 1 + sovFishing(uint64(m.Times))
	}
	if m.Cost != nil {
		l = m.Cost.Size()
		n += 1 + l + sovFishing(uint64(l))
	}
	if m.FreeTimes != 0 {
		n += 1 + sovFishing(uint64(m.FreeTimes))
	}
	if m.DiscountTimes != 0 {
		n += 1 + sovFishing(uint64(m.DiscountTimes))
	}
	if m.DiscountCost != nil {
		l = m.DiscountCost.Size()
		n += 1 + l + sovFishing(uint64(l))
	}
	if m.FishType != 0 {
		n += 1 + sovFishing(uint64(m.FishType))
	}
	if m.DailyTimes != 0 {
		n += 1 + sovFishing(uint64(m.DailyTimes))
	}
	return n
}

func (m *FishingShowProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovFishing(uint64(l))
	}
	if m.GoodsData != 0 {
		n += 1 + sovFishing(uint64(m.GoodsData))
	}
	if m.GemData != 0 {
		n += 1 + sovFishing(uint64(m.GemData))
	}
	if m.EquipmentData != 0 {
		n += 1 + sovFishing(uint64(m.EquipmentData))
	}
	if m.CaptainSoulData != 0 {
		n += 1 + sovFishing(uint64(m.CaptainSoulData))
	}
	if m.FishType != 0 {
		n += 1 + sovFishing(uint64(m.FishType))
	}
	if m.Out {
		n += 2
	}
	if m.ShowType != 0 {
		n += 1 + sovFishing(uint64(m.ShowType))
	}
	return n
}

func (m *HeroFishingProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Times) > 0 {
		for _, e := range m.Times {
			n += 1 + sovFishing(uint64(e))
		}
	}
	if len(m.FishingTimes) > 0 {
		for _, e := range m.FishingTimes {
			n += 1 + sovFishing(uint64(e))
		}
	}
	if len(m.FishType) > 0 {
		for _, e := range m.FishType {
			n += 1 + sovFishing(uint64(e))
		}
	}
	if len(m.Countdown) > 0 {
		for _, e := range m.Countdown {
			n += 1 + sovFishing(uint64(e))
		}
	}
	if m.CaptainSet != 0 {
		n += 1 + sovFishing(uint64(m.CaptainSet))
	}
	return n
}

func sovFishing(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozFishing(x uint64) (n int) {
	return sovFishing(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FishingCostProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFishing
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FishingCostProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FishingCostProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Times", wireType)
			}
			m.Times = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFishing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Times |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cost", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFishing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFishing
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cost == nil {
				m.Cost = &CostProto{}
			}
			if err := m.Cost.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreeTimes", wireType)
			}
			m.FreeTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFishing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FreeTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscountTimes", wireType)
			}
			m.DiscountTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFishing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiscountTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscountCost", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFishing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFishing
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DiscountCost == nil {
				m.DiscountCost = &CostProto{}
			}
			if err := m.DiscountCost.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FishType", wireType)
			}
			m.FishType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFishing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FishType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DailyTimes", wireType)
			}
			m.DailyTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFishing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DailyTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFishing(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFishing
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FishingShowProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFishing
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FishingShowProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FishingShowProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFishing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFishing
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsData", wireType)
			}
			m.GoodsData = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFishing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodsData |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GemData", wireType)
			}
			m.GemData = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFishing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GemData |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipmentData", wireType)
			}
			m.EquipmentData = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFishing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EquipmentData |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainSoulData", wireType)
			}
			m.CaptainSoulData = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFishing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainSoulData |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FishType", wireType)
			}
			m.FishType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFishing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FishType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Out", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFishing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Out = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowType", wireType)
			}
			m.ShowType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFishing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShowType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFishing(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFishing
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeroFishingProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFishing
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroFishingProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroFishingProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFishing
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Times = append(m.Times, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFishing
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFishing
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFishing
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Times = append(m.Times, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Times", wireType)
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFishing
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.FishingTimes = append(m.FishingTimes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFishing
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFishing
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFishing
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.FishingTimes = append(m.FishingTimes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field FishingTimes", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFishing
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.FishType = append(m.FishType, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFishing
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFishing
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFishing
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.FishType = append(m.FishType, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field FishType", wireType)
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFishing
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Countdown = append(m.Countdown, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFishing
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFishing
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFishing
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Countdown = append(m.Countdown, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Countdown", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainSet", wireType)
			}
			m.CaptainSet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFishing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainSet |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFishing(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFishing
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFishing(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFishing
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFishing
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFishing
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthFishing
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFishing
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFishing(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFishing = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFishing   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/pb/shared_proto/fishing.proto", fileDescriptorFishing)
}

var fileDescriptorFishing = []byte{
	// 468 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xcf, 0x8e, 0xd3, 0x30,
	0x10, 0xc6, 0xd7, 0x6d, 0xb3, 0xb4, 0xd3, 0x76, 0x09, 0x11, 0x87, 0x00, 0xa2, 0x5b, 0x55, 0xac,
	0xa8, 0x38, 0x34, 0x12, 0x7f, 0xb4, 0xf7, 0x05, 0xa1, 0x3d, 0xa2, 0xee, 0x9e, 0xb8, 0x44, 0x6e,
	0xe2, 0x4d, 0x2c, 0x25, 0x71, 0xa8, 0x1d, 0x45, 0x7d, 0x04, 0xde, 0x80, 0x57, 0xe1, 0x0d, 0x38,
	0xf2, 0x08, 0xa8, 0x3c, 0x08, 0xc8, 0x33, 0x49, 0xda, 0x0b, 0x68, 0x4f, 0xb6, 0xbf, 0xf9, 0x79,
	0xc6, 0xf3, 0x79, 0xe0, 0x32, 0x91, 0x26, 0xad, 0x36, 0xab, 0x48, 0xe5, 0x41, 0x26, 0x93, 0xd4,
	0x94, 0xbc, 0x0e, 0x72, 0x9e, 0x89, 0xcb, 0xa0, 0xdc, 0x04, 0x3a, 0xe5, 0x5b, 0x11, 0x87, 0xe5,
	0x56, 0x19, 0x15, 0xdc, 0x49, 0x9d, 0xca, 0x22, 0x59, 0xe1, 0xc9, 0x73, 0x70, 0x79, 0xfa, 0xf6,
	0xfe, 0xf7, 0x37, 0x5c, 0x0b, 0xba, 0xbc, 0xf8, 0xda, 0x03, 0xf7, 0x23, 0xa5, 0x7b, 0xaf, 0xb4,
	0xf9, 0x84, 0x19, 0x1f, 0x83, 0x63, 0x64, 0x2e, 0xb4, 0xcf, 0xe6, 0x6c, 0xe9, 0xac, 0xe9, 0xe0,
	0xbd, 0x80, 0x41, 0xa4, 0xb4, 0xf1, 0x7b, 0x73, 0xb6, 0x1c, 0xbf, 0x76, 0x29, 0xc1, 0xaa, 0xbb,
	0xb5, 0xc6, 0xa8, 0xf7, 0x1c, 0xe0, 0x6e, 0x2b, 0x44, 0x48, 0x09, 0xfa, 0x98, 0x60, 0x64, 0x95,
	0x5b, 0x4c, 0x72, 0x01, 0x67, 0xb1, 0xd4, 0x91, 0xaa, 0x0a, 0xd3, 0x20, 0x03, 0x44, 0xa6, 0xad,
	0x4a, 0xd8, 0x3b, 0xe8, 0x84, 0x10, 0x8b, 0x3a, 0xff, 0x28, 0x3a, 0x69, 0x31, 0x2b, 0x79, 0xcf,
	0x60, 0x64, 0xbd, 0x09, 0xcd, 0xae, 0x14, 0xfe, 0x18, 0x13, 0x0f, 0xad, 0x70, 0xbb, 0x2b, 0x85,
	0x77, 0x0e, 0xe3, 0x98, 0xcb, 0x6c, 0xd7, 0xd4, 0x9d, 0x60, 0x18, 0x50, 0xc2, 0xa2, 0x8b, 0x3f,
	0xac, 0xf3, 0xe2, 0x26, 0x55, 0x35, 0x79, 0xe1, 0xc1, 0x20, 0x16, 0x3a, 0xc2, 0xae, 0x47, 0x6b,
	0xdc, 0xdb, 0x1e, 0x13, 0xa5, 0x62, 0x1d, 0xc6, 0xdc, 0xf0, 0xb6, 0x47, 0x54, 0x3e, 0x70, 0xc3,
	0xbd, 0x27, 0x30, 0x4c, 0x44, 0x4e, 0x41, 0xea, 0xee, 0x41, 0x22, 0x72, 0x0c, 0x5d, 0xc0, 0x99,
	0xf8, 0x52, 0xc9, 0x32, 0x17, 0x85, 0x21, 0xc0, 0xa1, 0xf6, 0x3b, 0x15, 0xb1, 0x57, 0xf0, 0x28,
	0xe2, 0xa5, 0xe1, 0xb2, 0x08, 0xb5, 0xaa, 0x32, 0x22, 0x4f, 0x91, 0x7c, 0xd8, 0x04, 0x6e, 0x54,
	0x95, 0x21, 0xfb, 0xdf, 0x9e, 0x5d, 0xe8, 0xab, 0xca, 0x60, 0xaf, 0xc3, 0xb5, 0xdd, 0x5a, 0x5c,
	0xa7, 0xaa, 0x26, 0x7c, 0x4a, 0xb8, 0x15, 0x2c, 0xbe, 0xf8, 0xce, 0xc0, 0xbd, 0x16, 0x5b, 0xd5,
	0xb8, 0x40, 0x0e, 0xf8, 0x87, 0x69, 0xe8, 0x2f, 0x9d, 0xab, 0x9e, 0x7b, 0xd2, 0x4e, 0xc4, 0x4b,
	0x98, 0x36, 0xa3, 0xd8, 0x78, 0xda, 0xeb, 0x88, 0x49, 0x13, 0xa0, 0xef, 0x3c, 0x3f, 0x7e, 0x63,
	0xbf, 0x83, 0x0e, 0xef, 0x9c, 0xc3, 0x08, 0x7f, 0x31, 0x56, 0x75, 0xe1, 0x0f, 0x3a, 0xe0, 0x20,
	0xda, 0xdf, 0xeb, 0x2c, 0x11, 0xa6, 0xb1, 0x0d, 0x5a, 0x33, 0x84, 0xb9, 0x9a, 0xff, 0xd8, 0xcf,
	0xd8, 0xcf, 0xfd, 0x8c, 0xfd, 0xda, 0xcf, 0xd8, 0xb7, 0xdf, 0xb3, 0x93, 0x6b, 0xf6, 0x79, 0x72,
	0x3c, 0xf6, 0x9b, 0x53, 0x5c, 0xde, 0xfc, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x2a, 0x1c, 0x89, 0x11,
	0x6a, 0x03, 0x00, 0x00,
}
