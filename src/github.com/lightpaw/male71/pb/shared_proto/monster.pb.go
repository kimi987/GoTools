// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/pb/shared_proto/monster.proto
// DO NOT EDIT!

package shared_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// npc城池数据
type NpcBaseDataProto struct {
	Id                     int32                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                   string                  `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	Npc                    *MonsterMasterDataProto `protobuf:"bytes,2,opt,name=npc" json:"npc,omitempty"`
	BaseLevel              int32                   `protobuf:"varint,3,opt,name=base_level,json=baseLevel,proto3" json:"base_level,omitempty"`
	Model                  string                  `protobuf:"bytes,7,opt,name=model,proto3" json:"model,omitempty"`
	DefModel               string                  `protobuf:"bytes,12,opt,name=def_model,json=defModel,proto3" json:"def_model,omitempty"`
	ProsperityCapcity      int32                   `protobuf:"varint,4,opt,name=prosperity_capcity,json=prosperityCapcity,proto3" json:"prosperity_capcity,omitempty"`
	IsTent                 bool                    `protobuf:"varint,5,opt,name=is_tent,json=isTent,proto3" json:"is_tent,omitempty"`
	ShowPrize              *PrizeProto             `protobuf:"bytes,6,opt,name=show_prize,json=showPrize" json:"show_prize,omitempty"`
	ShowSubPrize           *PrizeProto             `protobuf:"bytes,10,opt,name=show_sub_prize,json=showSubPrize" json:"show_sub_prize,omitempty"`
	RobMaxDuration         int32                   `protobuf:"varint,8,opt,name=rob_max_duration,json=robMaxDuration,proto3" json:"rob_max_duration,omitempty"`
	TickDuration           int32                   `protobuf:"varint,9,opt,name=tick_duration,json=tickDuration,proto3" json:"tick_duration,omitempty"`
	TickIcon               []string                `protobuf:"bytes,14,rep,name=tick_icon,json=tickIcon" json:"tick_icon,omitempty"`
	LostProsperityDuration int32                   `protobuf:"varint,13,opt,name=lost_prosperity_duration,json=lostProsperityDuration,proto3" json:"lost_prosperity_duration,omitempty"`
}

func (m *NpcBaseDataProto) Reset()                    { *m = NpcBaseDataProto{} }
func (m *NpcBaseDataProto) String() string            { return proto.CompactTextString(m) }
func (*NpcBaseDataProto) ProtoMessage()               {}
func (*NpcBaseDataProto) Descriptor() ([]byte, []int) { return fileDescriptorMonster, []int{0} }

func (m *NpcBaseDataProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *NpcBaseDataProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NpcBaseDataProto) GetNpc() *MonsterMasterDataProto {
	if m != nil {
		return m.Npc
	}
	return nil
}

func (m *NpcBaseDataProto) GetBaseLevel() int32 {
	if m != nil {
		return m.BaseLevel
	}
	return 0
}

func (m *NpcBaseDataProto) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *NpcBaseDataProto) GetDefModel() string {
	if m != nil {
		return m.DefModel
	}
	return ""
}

func (m *NpcBaseDataProto) GetProsperityCapcity() int32 {
	if m != nil {
		return m.ProsperityCapcity
	}
	return 0
}

func (m *NpcBaseDataProto) GetIsTent() bool {
	if m != nil {
		return m.IsTent
	}
	return false
}

func (m *NpcBaseDataProto) GetShowPrize() *PrizeProto {
	if m != nil {
		return m.ShowPrize
	}
	return nil
}

func (m *NpcBaseDataProto) GetShowSubPrize() *PrizeProto {
	if m != nil {
		return m.ShowSubPrize
	}
	return nil
}

func (m *NpcBaseDataProto) GetRobMaxDuration() int32 {
	if m != nil {
		return m.RobMaxDuration
	}
	return 0
}

func (m *NpcBaseDataProto) GetTickDuration() int32 {
	if m != nil {
		return m.TickDuration
	}
	return 0
}

func (m *NpcBaseDataProto) GetTickIcon() []string {
	if m != nil {
		return m.TickIcon
	}
	return nil
}

func (m *NpcBaseDataProto) GetLostProsperityDuration() int32 {
	if m != nil {
		return m.LostProsperityDuration
	}
	return 0
}

type MonsterMasterDataProto struct {
	Id     int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IconId string `protobuf:"bytes,6,opt,name=icon_id,json=iconId,proto3" json:"icon_id,omitempty"`
	Male   bool   `protobuf:"varint,4,opt,name=male,proto3" json:"male,omitempty"`
	Level  int32  `protobuf:"varint,5,opt,name=level,proto3" json:"level,omitempty"`
	// 防守武将信息
	Captains []*MonsterCaptainDataProto `protobuf:"bytes,21,rep,name=captains" json:"captains,omitempty"`
}

func (m *MonsterMasterDataProto) Reset()                    { *m = MonsterMasterDataProto{} }
func (m *MonsterMasterDataProto) String() string            { return proto.CompactTextString(m) }
func (*MonsterMasterDataProto) ProtoMessage()               {}
func (*MonsterMasterDataProto) Descriptor() ([]byte, []int) { return fileDescriptorMonster, []int{1} }

func (m *MonsterMasterDataProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MonsterMasterDataProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MonsterMasterDataProto) GetIconId() string {
	if m != nil {
		return m.IconId
	}
	return ""
}

func (m *MonsterMasterDataProto) GetMale() bool {
	if m != nil {
		return m.Male
	}
	return false
}

func (m *MonsterMasterDataProto) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *MonsterMasterDataProto) GetCaptains() []*MonsterCaptainDataProto {
	if m != nil {
		return m.Captains
	}
	return nil
}

type MonsterCaptainDataProto struct {
	Id           int32             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         *CaptainNameProto `protobuf:"bytes,12,opt,name=name" json:"name,omitempty"`
	IconId       string            `protobuf:"bytes,11,opt,name=icon_id,json=iconId,proto3" json:"icon_id,omitempty"`
	Male         bool              `protobuf:"varint,10,opt,name=male,proto3" json:"male,omitempty"`
	Race         Race              `protobuf:"varint,4,opt,name=race,proto3,enum=proto.Race" json:"race,omitempty"`
	Quality      Quality           `protobuf:"varint,5,opt,name=quality,proto3,enum=proto.Quality" json:"quality,omitempty"`
	Soldier      int32             `protobuf:"varint,6,opt,name=soldier,proto3" json:"soldier,omitempty"`
	FightAmount  int32             `protobuf:"varint,7,opt,name=fight_amount,json=fightAmount,proto3" json:"fight_amount,omitempty"`
	Level        int32             `protobuf:"varint,8,opt,name=level,proto3" json:"level,omitempty"`
	SoldierLevel int32             `protobuf:"varint,9,opt,name=soldier_level,json=soldierLevel,proto3" json:"soldier_level,omitempty"`
	RebirthLevel int32             `protobuf:"varint,13,opt,name=rebirth_level,json=rebirthLevel,proto3" json:"rebirth_level,omitempty"`
	TotalStat    *SpriteStatProto  `protobuf:"bytes,14,opt,name=total_stat,json=totalStat" json:"total_stat,omitempty"`
	// tip，用于做一些特殊的表示，比如千重楼里的首领
	Label            int32 `protobuf:"varint,31,opt,name=label,proto3" json:"label,omitempty"`
	Index            int32 `protobuf:"varint,15,opt,name=index,proto3" json:"index,omitempty"`
	XIndex           int32 `protobuf:"varint,16,opt,name=x_index,json=xIndex,proto3" json:"x_index,omitempty"`
	CaptainId        int32 `protobuf:"varint,17,opt,name=captain_id,json=captainId,proto3" json:"captain_id,omitempty"`
	IsNameless       bool  `protobuf:"varint,18,opt,name=is_nameless,json=isNameless,proto3" json:"is_nameless,omitempty"`
	Star             int32 `protobuf:"varint,19,opt,name=star,proto3" json:"star,omitempty"`
	UnlockSpellCount int32 `protobuf:"varint,20,opt,name=unlock_spell_count,json=unlockSpellCount,proto3" json:"unlock_spell_count,omitempty"`
}

func (m *MonsterCaptainDataProto) Reset()                    { *m = MonsterCaptainDataProto{} }
func (m *MonsterCaptainDataProto) String() string            { return proto.CompactTextString(m) }
func (*MonsterCaptainDataProto) ProtoMessage()               {}
func (*MonsterCaptainDataProto) Descriptor() ([]byte, []int) { return fileDescriptorMonster, []int{2} }

func (m *MonsterCaptainDataProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MonsterCaptainDataProto) GetName() *CaptainNameProto {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *MonsterCaptainDataProto) GetIconId() string {
	if m != nil {
		return m.IconId
	}
	return ""
}

func (m *MonsterCaptainDataProto) GetMale() bool {
	if m != nil {
		return m.Male
	}
	return false
}

func (m *MonsterCaptainDataProto) GetRace() Race {
	if m != nil {
		return m.Race
	}
	return Race_InvalidRace
}

func (m *MonsterCaptainDataProto) GetQuality() Quality {
	if m != nil {
		return m.Quality
	}
	return Quality_InvalidQuality
}

func (m *MonsterCaptainDataProto) GetSoldier() int32 {
	if m != nil {
		return m.Soldier
	}
	return 0
}

func (m *MonsterCaptainDataProto) GetFightAmount() int32 {
	if m != nil {
		return m.FightAmount
	}
	return 0
}

func (m *MonsterCaptainDataProto) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *MonsterCaptainDataProto) GetSoldierLevel() int32 {
	if m != nil {
		return m.SoldierLevel
	}
	return 0
}

func (m *MonsterCaptainDataProto) GetRebirthLevel() int32 {
	if m != nil {
		return m.RebirthLevel
	}
	return 0
}

func (m *MonsterCaptainDataProto) GetTotalStat() *SpriteStatProto {
	if m != nil {
		return m.TotalStat
	}
	return nil
}

func (m *MonsterCaptainDataProto) GetLabel() int32 {
	if m != nil {
		return m.Label
	}
	return 0
}

func (m *MonsterCaptainDataProto) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *MonsterCaptainDataProto) GetXIndex() int32 {
	if m != nil {
		return m.XIndex
	}
	return 0
}

func (m *MonsterCaptainDataProto) GetCaptainId() int32 {
	if m != nil {
		return m.CaptainId
	}
	return 0
}

func (m *MonsterCaptainDataProto) GetIsNameless() bool {
	if m != nil {
		return m.IsNameless
	}
	return false
}

func (m *MonsterCaptainDataProto) GetStar() int32 {
	if m != nil {
		return m.Star
	}
	return 0
}

func (m *MonsterCaptainDataProto) GetUnlockSpellCount() int32 {
	if m != nil {
		return m.UnlockSpellCount
	}
	return 0
}

func init() {
	proto.RegisterType((*NpcBaseDataProto)(nil), "proto.NpcBaseDataProto")
	proto.RegisterType((*MonsterMasterDataProto)(nil), "proto.MonsterMasterDataProto")
	proto.RegisterType((*MonsterCaptainDataProto)(nil), "proto.MonsterCaptainDataProto")
}
func (m *NpcBaseDataProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NpcBaseDataProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMonster(dAtA, i, uint64(m.Id))
	}
	if m.Npc != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMonster(dAtA, i, uint64(m.Npc.Size()))
		n1, err := m.Npc.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.BaseLevel != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMonster(dAtA, i, uint64(m.BaseLevel))
	}
	if m.ProsperityCapcity != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMonster(dAtA, i, uint64(m.ProsperityCapcity))
	}
	if m.IsTent {
		dAtA[i] = 0x28
		i++
		if m.IsTent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ShowPrize != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintMonster(dAtA, i, uint64(m.ShowPrize.Size()))
		n2, err := m.ShowPrize.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Model) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintMonster(dAtA, i, uint64(len(m.Model)))
		i += copy(dAtA[i:], m.Model)
	}
	if m.RobMaxDuration != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintMonster(dAtA, i, uint64(m.RobMaxDuration))
	}
	if m.TickDuration != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintMonster(dAtA, i, uint64(m.TickDuration))
	}
	if m.ShowSubPrize != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintMonster(dAtA, i, uint64(m.ShowSubPrize.Size()))
		n3, err := m.ShowSubPrize.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintMonster(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.DefModel) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintMonster(dAtA, i, uint64(len(m.DefModel)))
		i += copy(dAtA[i:], m.DefModel)
	}
	if m.LostProsperityDuration != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintMonster(dAtA, i, uint64(m.LostProsperityDuration))
	}
	if len(m.TickIcon) > 0 {
		for _, s := range m.TickIcon {
			dAtA[i] = 0x72
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *MonsterMasterDataProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MonsterMasterDataProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMonster(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMonster(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Male {
		dAtA[i] = 0x20
		i++
		if m.Male {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Level != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMonster(dAtA, i, uint64(m.Level))
	}
	if len(m.IconId) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintMonster(dAtA, i, uint64(len(m.IconId)))
		i += copy(dAtA[i:], m.IconId)
	}
	if len(m.Captains) > 0 {
		for _, msg := range m.Captains {
			dAtA[i] = 0xaa
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintMonster(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MonsterCaptainDataProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MonsterCaptainDataProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMonster(dAtA, i, uint64(m.Id))
	}
	if m.Race != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMonster(dAtA, i, uint64(m.Race))
	}
	if m.Quality != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMonster(dAtA, i, uint64(m.Quality))
	}
	if m.Soldier != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintMonster(dAtA, i, uint64(m.Soldier))
	}
	if m.FightAmount != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintMonster(dAtA, i, uint64(m.FightAmount))
	}
	if m.Level != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintMonster(dAtA, i, uint64(m.Level))
	}
	if m.SoldierLevel != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintMonster(dAtA, i, uint64(m.SoldierLevel))
	}
	if m.Male {
		dAtA[i] = 0x50
		i++
		if m.Male {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.IconId) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintMonster(dAtA, i, uint64(len(m.IconId)))
		i += copy(dAtA[i:], m.IconId)
	}
	if m.Name != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintMonster(dAtA, i, uint64(m.Name.Size()))
		n4, err := m.Name.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.RebirthLevel != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintMonster(dAtA, i, uint64(m.RebirthLevel))
	}
	if m.TotalStat != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintMonster(dAtA, i, uint64(m.TotalStat.Size()))
		n5, err := m.TotalStat.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Index != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintMonster(dAtA, i, uint64(m.Index))
	}
	if m.XIndex != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMonster(dAtA, i, uint64(m.XIndex))
	}
	if m.CaptainId != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMonster(dAtA, i, uint64(m.CaptainId))
	}
	if m.IsNameless {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		if m.IsNameless {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Star != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMonster(dAtA, i, uint64(m.Star))
	}
	if m.UnlockSpellCount != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMonster(dAtA, i, uint64(m.UnlockSpellCount))
	}
	if m.Label != 0 {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMonster(dAtA, i, uint64(m.Label))
	}
	return i, nil
}

func encodeFixed64Monster(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Monster(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintMonster(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *NpcBaseDataProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMonster(uint64(m.Id))
	}
	if m.Npc != nil {
		l = m.Npc.Size()
		n += 1 + l + sovMonster(uint64(l))
	}
	if m.BaseLevel != 0 {
		n += 1 + sovMonster(uint64(m.BaseLevel))
	}
	if m.ProsperityCapcity != 0 {
		n += 1 + sovMonster(uint64(m.ProsperityCapcity))
	}
	if m.IsTent {
		n += 2
	}
	if m.ShowPrize != nil {
		l = m.ShowPrize.Size()
		n += 1 + l + sovMonster(uint64(l))
	}
	l = len(m.Model)
	if l > 0 {
		n += 1 + l + sovMonster(uint64(l))
	}
	if m.RobMaxDuration != 0 {
		n += 1 + sovMonster(uint64(m.RobMaxDuration))
	}
	if m.TickDuration != 0 {
		n += 1 + sovMonster(uint64(m.TickDuration))
	}
	if m.ShowSubPrize != nil {
		l = m.ShowSubPrize.Size()
		n += 1 + l + sovMonster(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMonster(uint64(l))
	}
	l = len(m.DefModel)
	if l > 0 {
		n += 1 + l + sovMonster(uint64(l))
	}
	if m.LostProsperityDuration != 0 {
		n += 1 + sovMonster(uint64(m.LostProsperityDuration))
	}
	if len(m.TickIcon) > 0 {
		for _, s := range m.TickIcon {
			l = len(s)
			n += 1 + l + sovMonster(uint64(l))
		}
	}
	return n
}

func (m *MonsterMasterDataProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMonster(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMonster(uint64(l))
	}
	if m.Male {
		n += 2
	}
	if m.Level != 0 {
		n += 1 + sovMonster(uint64(m.Level))
	}
	l = len(m.IconId)
	if l > 0 {
		n += 1 + l + sovMonster(uint64(l))
	}
	if len(m.Captains) > 0 {
		for _, e := range m.Captains {
			l = e.Size()
			n += 2 + l + sovMonster(uint64(l))
		}
	}
	return n
}

func (m *MonsterCaptainDataProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMonster(uint64(m.Id))
	}
	if m.Race != 0 {
		n += 1 + sovMonster(uint64(m.Race))
	}
	if m.Quality != 0 {
		n += 1 + sovMonster(uint64(m.Quality))
	}
	if m.Soldier != 0 {
		n += 1 + sovMonster(uint64(m.Soldier))
	}
	if m.FightAmount != 0 {
		n += 1 + sovMonster(uint64(m.FightAmount))
	}
	if m.Level != 0 {
		n += 1 + sovMonster(uint64(m.Level))
	}
	if m.SoldierLevel != 0 {
		n += 1 + sovMonster(uint64(m.SoldierLevel))
	}
	if m.Male {
		n += 2
	}
	l = len(m.IconId)
	if l > 0 {
		n += 1 + l + sovMonster(uint64(l))
	}
	if m.Name != nil {
		l = m.Name.Size()
		n += 1 + l + sovMonster(uint64(l))
	}
	if m.RebirthLevel != 0 {
		n += 1 + sovMonster(uint64(m.RebirthLevel))
	}
	if m.TotalStat != nil {
		l = m.TotalStat.Size()
		n += 1 + l + sovMonster(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovMonster(uint64(m.Index))
	}
	if m.XIndex != 0 {
		n += 2 + sovMonster(uint64(m.XIndex))
	}
	if m.CaptainId != 0 {
		n += 2 + sovMonster(uint64(m.CaptainId))
	}
	if m.IsNameless {
		n += 3
	}
	if m.Star != 0 {
		n += 2 + sovMonster(uint64(m.Star))
	}
	if m.UnlockSpellCount != 0 {
		n += 2 + sovMonster(uint64(m.UnlockSpellCount))
	}
	if m.Label != 0 {
		n += 2 + sovMonster(uint64(m.Label))
	}
	return n
}

func sovMonster(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMonster(x uint64) (n int) {
	return sovMonster(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NpcBaseDataProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMonster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NpcBaseDataProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NpcBaseDataProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Npc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMonster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Npc == nil {
				m.Npc = &MonsterMasterDataProto{}
			}
			if err := m.Npc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseLevel", wireType)
			}
			m.BaseLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaseLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProsperityCapcity", wireType)
			}
			m.ProsperityCapcity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProsperityCapcity |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsTent = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowPrize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMonster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShowPrize == nil {
				m.ShowPrize = &PrizeProto{}
			}
			if err := m.ShowPrize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Model = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RobMaxDuration", wireType)
			}
			m.RobMaxDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RobMaxDuration |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TickDuration", wireType)
			}
			m.TickDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TickDuration |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowSubPrize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMonster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShowSubPrize == nil {
				m.ShowSubPrize = &PrizeProto{}
			}
			if err := m.ShowSubPrize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefModel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefModel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LostProsperityDuration", wireType)
			}
			m.LostProsperityDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LostProsperityDuration |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TickIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TickIcon = append(m.TickIcon, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMonster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMonster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MonsterMasterDataProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMonster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MonsterMasterDataProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MonsterMasterDataProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Male", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Male = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Captains", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMonster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Captains = append(m.Captains, &MonsterCaptainDataProto{})
			if err := m.Captains[len(m.Captains)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMonster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMonster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MonsterCaptainDataProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMonster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MonsterCaptainDataProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MonsterCaptainDataProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Race", wireType)
			}
			m.Race = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Race |= (Race(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quality", wireType)
			}
			m.Quality = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quality |= (Quality(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Soldier", wireType)
			}
			m.Soldier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Soldier |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FightAmount", wireType)
			}
			m.FightAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FightAmount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoldierLevel", wireType)
			}
			m.SoldierLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SoldierLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Male", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Male = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMonster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Name == nil {
				m.Name = &CaptainNameProto{}
			}
			if err := m.Name.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RebirthLevel", wireType)
			}
			m.RebirthLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RebirthLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalStat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMonster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TotalStat == nil {
				m.TotalStat = &SpriteStatProto{}
			}
			if err := m.TotalStat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XIndex", wireType)
			}
			m.XIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainId", wireType)
			}
			m.CaptainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNameless", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsNameless = bool(v != 0)
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Star", wireType)
			}
			m.Star = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Star |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockSpellCount", wireType)
			}
			m.UnlockSpellCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnlockSpellCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			m.Label = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Label |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMonster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMonster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMonster(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMonster
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMonster
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMonster
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMonster
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMonster
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMonster(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMonster = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMonster   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/pb/shared_proto/monster.proto", fileDescriptorMonster)
}

var fileDescriptorMonster = []byte{
	// 791 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xdd, 0x6e, 0x23, 0x35,
	0x14, 0x66, 0xda, 0x4c, 0x7e, 0x4e, 0x7e, 0x48, 0xcd, 0xd2, 0x5a, 0xbb, 0x6a, 0x36, 0xb4, 0x37,
	0x91, 0x80, 0x06, 0x15, 0x50, 0x57, 0xdc, 0xb1, 0xdd, 0x0b, 0x22, 0x91, 0xaa, 0x4c, 0xb8, 0xe2,
	0xc6, 0xf2, 0xcc, 0xb8, 0x1b, 0x6b, 0x67, 0xc6, 0x83, 0xed, 0xb0, 0x29, 0x8f, 0xc1, 0x15, 0xef,
	0xc2, 0x0b, 0x70, 0xc9, 0x23, 0xa0, 0x72, 0xc5, 0x5b, 0x20, 0x1f, 0x3b, 0x3f, 0xab, 0x65, 0x25,
	0xb8, 0x49, 0x7c, 0xbe, 0xf3, 0x1d, 0xfb, 0xf3, 0x39, 0x9f, 0x07, 0xae, 0x5e, 0x4a, 0xbb, 0x5c,
	0xa5, 0x17, 0x99, 0x2a, 0xa7, 0x85, 0x7c, 0xb9, 0xb4, 0x35, 0x7f, 0x3d, 0x2d, 0x79, 0x21, 0xae,
	0xa6, 0x75, 0x3a, 0x35, 0x4b, 0xae, 0x45, 0xce, 0x6a, 0xad, 0xac, 0x9a, 0x96, 0xaa, 0x32, 0x56,
	0xe8, 0x0b, 0x8c, 0x48, 0x8c, 0x7f, 0x8f, 0xbf, 0xf8, 0xef, 0xf5, 0x29, 0x37, 0xc2, 0x17, 0x3f,
	0x7e, 0xf6, 0x3f, 0x4e, 0x95, 0x85, 0xb4, 0x5c, 0xdf, 0xfb, 0xca, 0xb3, 0x5f, 0x1a, 0x30, 0xbc,
	0xa9, 0xb3, 0xe7, 0xdc, 0x88, 0x17, 0xdc, 0xf2, 0x5b, 0xd4, 0x32, 0x80, 0x03, 0x99, 0xd3, 0x68,
	0x1c, 0x4d, 0xe2, 0xe4, 0x40, 0xe6, 0x64, 0x0a, 0x87, 0x55, 0x9d, 0xd1, 0x83, 0x71, 0x34, 0xe9,
	0x5e, 0x9e, 0xfa, 0xca, 0x8b, 0xb9, 0x97, 0x3f, 0xe7, 0xee, 0x77, 0x5b, 0x9b, 0x38, 0x26, 0x39,
	0x05, 0x70, 0xea, 0x58, 0x21, 0x7e, 0x12, 0x05, 0x3d, 0xc4, 0x8d, 0x3a, 0x0e, 0xf9, 0xd6, 0x01,
	0xe4, 0x53, 0x20, 0xb5, 0x56, 0xa6, 0x16, 0x5a, 0xda, 0x7b, 0x96, 0xf1, 0x3a, 0x93, 0xf6, 0x9e,
	0x36, 0x90, 0x76, 0xb4, 0xcb, 0x5c, 0xfb, 0x04, 0x39, 0x81, 0x96, 0x34, 0xcc, 0x8a, 0xca, 0xd2,
	0x78, 0x1c, 0x4d, 0xda, 0x49, 0x53, 0x9a, 0xef, 0x45, 0x65, 0xc9, 0x67, 0x00, 0x66, 0xa9, 0x5e,
	0xb3, 0x5a, 0xcb, 0x9f, 0x05, 0x6d, 0xa2, 0xbc, 0xa3, 0x20, 0xef, 0xd6, 0x61, 0x5e, 0x52, 0xc7,
	0x91, 0x30, 0x26, 0x8f, 0x20, 0x2e, 0x55, 0x2e, 0x0a, 0xda, 0x1a, 0x47, 0x93, 0x4e, 0xe2, 0x03,
	0x32, 0x81, 0xa1, 0x56, 0x29, 0x2b, 0xf9, 0x9a, 0xe5, 0x2b, 0xcd, 0xad, 0x54, 0x15, 0x6d, 0xa3,
	0x9a, 0x81, 0x56, 0xe9, 0x9c, 0xaf, 0x5f, 0x04, 0x94, 0x9c, 0x43, 0xdf, 0xca, 0xec, 0xd5, 0x8e,
	0xd6, 0x41, 0x5a, 0xcf, 0x81, 0x5b, 0xd2, 0x15, 0x0c, 0x50, 0x96, 0x59, 0xa5, 0x41, 0x1a, 0xbc,
	0x4b, 0x5a, 0xcf, 0x11, 0x17, 0xab, 0xd4, 0xab, 0x23, 0xd0, 0xa8, 0x78, 0x29, 0x68, 0x17, 0xc5,
	0xe1, 0x9a, 0x3c, 0x81, 0x4e, 0x2e, 0xee, 0x98, 0x57, 0xdd, 0xc3, 0x44, 0x3b, 0x17, 0x77, 0x73,
	0x14, 0xfe, 0x0c, 0x68, 0xa1, 0x8c, 0x65, 0x7b, 0xdd, 0xdc, 0x2a, 0xeb, 0xa3, 0xb2, 0x63, 0x97,
	0xbf, 0xdd, 0xa6, 0xb7, 0x1a, 0x9f, 0x40, 0x07, 0x2f, 0x22, 0x33, 0x55, 0xd1, 0xc1, 0xf8, 0xd0,
	0x6d, 0xeb, 0x80, 0x59, 0xa6, 0xaa, 0xb3, 0xdf, 0x22, 0x38, 0xfe, 0xf7, 0xf1, 0xbe, 0x65, 0x8d,
	0x8d, 0xe4, 0x83, 0x3d, 0xc9, 0x04, 0x1a, 0xce, 0x7b, 0x38, 0xd0, 0x76, 0x82, 0x6b, 0xd7, 0x78,
	0x6f, 0x86, 0x18, 0x4b, 0x7d, 0x80, 0x93, 0xcd, 0x54, 0xc5, 0x64, 0x8e, 0xd3, 0xeb, 0x24, 0x4d,
	0x17, 0xce, 0x72, 0xf2, 0x15, 0xb4, 0x33, 0x5e, 0x5b, 0x2e, 0x2b, 0x43, 0x3f, 0x1c, 0x1f, 0x4e,
	0xba, 0x97, 0xa3, 0x37, 0x6d, 0x77, 0xed, 0xb3, 0x3b, 0xdf, 0x6d, 0xf9, 0x67, 0x7f, 0x37, 0xe0,
	0xe4, 0x1d, 0xac, 0xb7, 0xe4, 0x3f, 0x85, 0x86, 0xe6, 0x99, 0x97, 0x3a, 0xb8, 0xec, 0x86, 0x33,
	0x12, 0x9e, 0x89, 0x04, 0x13, 0x64, 0x02, 0xad, 0x1f, 0x57, 0xbc, 0x70, 0xfe, 0x8c, 0x91, 0x33,
	0x08, 0x9c, 0xef, 0x3c, 0x9a, 0x6c, 0xd2, 0x84, 0x42, 0xcb, 0xa8, 0x22, 0x97, 0x42, 0xe3, 0x5d,
	0xe2, 0x64, 0x13, 0x92, 0x8f, 0xa0, 0x77, 0xe7, 0x1e, 0x25, 0xe3, 0xa5, 0x5a, 0x55, 0x16, 0xbd,
	0x17, 0x27, 0x5d, 0xc4, 0xbe, 0x46, 0x68, 0xd7, 0x9e, 0xf6, 0x7e, 0x7b, 0xce, 0xa1, 0x1f, 0xf6,
	0x08, 0x2f, 0x29, 0xb8, 0x2d, 0x80, 0xfe, 0x31, 0x6d, 0xba, 0x0d, 0x7b, 0xdd, 0xde, 0xeb, 0x6b,
	0xf7, 0x8d, 0xbe, 0x7e, 0x1c, 0xc6, 0xd5, 0x43, 0x43, 0x9e, 0x84, 0xbb, 0x84, 0x36, 0xdd, 0xf0,
	0x32, 0xd8, 0xd2, 0xcf, 0xf1, 0x1c, 0xfa, 0x5a, 0xa4, 0x52, 0xdb, 0x65, 0x38, 0xde, 0x5b, 0xaa,
	0x17, 0x40, 0x7f, 0xfc, 0x97, 0x00, 0x56, 0x59, 0x5e, 0x30, 0x63, 0xb9, 0xa5, 0x03, 0xdc, 0xf7,
	0x38, 0xec, 0xbb, 0xa8, 0xb5, 0xb4, 0x62, 0x61, 0xb9, 0x0d, 0x0f, 0x11, 0x99, 0x2e, 0x76, 0x17,
	0x96, 0x55, 0x2e, 0xd6, 0xf4, 0x7d, 0x7f, 0x61, 0x0c, 0x9c, 0xee, 0x35, 0xf3, 0xf8, 0x10, 0xf1,
	0xe6, 0x7a, 0x86, 0x89, 0x53, 0x80, 0x30, 0x5f, 0x77, 0xa7, 0x23, 0xff, 0x41, 0x09, 0xc8, 0xcc,
	0x8d, 0xb1, 0x2b, 0x0d, 0x73, 0xa2, 0x0b, 0x61, 0x0c, 0x25, 0xd8, 0x0a, 0x90, 0xe6, 0x26, 0x20,
	0xae, 0x49, 0xc6, 0x72, 0x4d, 0x3f, 0xc0, 0x4a, 0x5c, 0x93, 0x4f, 0x80, 0xac, 0xaa, 0x42, 0x65,
	0xaf, 0x98, 0xa9, 0x45, 0x51, 0xb0, 0x0c, 0x87, 0xf3, 0x08, 0x19, 0x43, 0x9f, 0x59, 0xb8, 0xc4,
	0xf5, 0x76, 0x42, 0x3c, 0x15, 0x05, 0x7d, 0x1a, 0x26, 0xe4, 0x82, 0xe7, 0xe3, 0xdf, 0x1f, 0x46,
	0xd1, 0x1f, 0x0f, 0xa3, 0xe8, 0xcf, 0x87, 0x51, 0xf4, 0xeb, 0x5f, 0xa3, 0xf7, 0xbe, 0x89, 0x7e,
	0xe8, 0xed, 0x7f, 0x6f, 0xd3, 0x26, 0xfe, 0x7d, 0xfe, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8b,
	0x57, 0xf0, 0xe1, 0x19, 0x06, 0x00, 0x00,
}
