// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/pb/shared_proto/teach.proto
// DO NOT EDIT!

package shared_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type HeroTeachProto struct {
	PassedChapterIds    []int32 `protobuf:"varint,1,rep,name=passed_chapter_ids,json=passedChapterIds" json:"passed_chapter_ids,omitempty"`
	CollectedChapterIds []int32 `protobuf:"varint,2,rep,name=collected_chapter_ids,json=collectedChapterIds" json:"collected_chapter_ids,omitempty"`
}

func (m *HeroTeachProto) Reset()                    { *m = HeroTeachProto{} }
func (m *HeroTeachProto) String() string            { return proto.CompactTextString(m) }
func (*HeroTeachProto) ProtoMessage()               {}
func (*HeroTeachProto) Descriptor() ([]byte, []int) { return fileDescriptorTeach, []int{0} }

func (m *HeroTeachProto) GetPassedChapterIds() []int32 {
	if m != nil {
		return m.PassedChapterIds
	}
	return nil
}

func (m *HeroTeachProto) GetCollectedChapterIds() []int32 {
	if m != nil {
		return m.CollectedChapterIds
	}
	return nil
}

// 教学/关卡.txt
type TeachChapterDataProto struct {
	Id                int32                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Prize             *PrizeProto             `protobuf:"bytes,2,opt,name=prize" json:"prize,omitempty"`
	MinHeroLevel      int32                   `protobuf:"varint,3,opt,name=min_hero_level,json=minHeroLevel,proto3" json:"min_hero_level,omitempty"`
	PassBaYeTaskStage int32                   `protobuf:"varint,4,opt,name=pass_ba_ye_task_stage,json=passBaYeTaskStage,proto3" json:"pass_ba_ye_task_stage,omitempty"`
	PassDungeonId     int32                   `protobuf:"varint,11,opt,name=pass_dungeon_id,json=passDungeonId,proto3" json:"pass_dungeon_id,omitempty"`
	Title             string                  `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	Desc              string                  `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc,omitempty"`
	Image             string                  `protobuf:"bytes,7,opt,name=image,proto3" json:"image,omitempty"`
	AtkStartMonster   *MonsterMasterDataProto `protobuf:"bytes,8,opt,name=atk_start_monster,json=atkStartMonster" json:"atk_start_monster,omitempty"`
	AtkEndMonster     *MonsterMasterDataProto `protobuf:"bytes,9,opt,name=atk_end_monster,json=atkEndMonster" json:"atk_end_monster,omitempty"`
	DefMonster        *MonsterMasterDataProto `protobuf:"bytes,10,opt,name=def_monster,json=defMonster" json:"def_monster,omitempty"`
}

func (m *TeachChapterDataProto) Reset()                    { *m = TeachChapterDataProto{} }
func (m *TeachChapterDataProto) String() string            { return proto.CompactTextString(m) }
func (*TeachChapterDataProto) ProtoMessage()               {}
func (*TeachChapterDataProto) Descriptor() ([]byte, []int) { return fileDescriptorTeach, []int{1} }

func (m *TeachChapterDataProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TeachChapterDataProto) GetPrize() *PrizeProto {
	if m != nil {
		return m.Prize
	}
	return nil
}

func (m *TeachChapterDataProto) GetMinHeroLevel() int32 {
	if m != nil {
		return m.MinHeroLevel
	}
	return 0
}

func (m *TeachChapterDataProto) GetPassBaYeTaskStage() int32 {
	if m != nil {
		return m.PassBaYeTaskStage
	}
	return 0
}

func (m *TeachChapterDataProto) GetPassDungeonId() int32 {
	if m != nil {
		return m.PassDungeonId
	}
	return 0
}

func (m *TeachChapterDataProto) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *TeachChapterDataProto) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *TeachChapterDataProto) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *TeachChapterDataProto) GetAtkStartMonster() *MonsterMasterDataProto {
	if m != nil {
		return m.AtkStartMonster
	}
	return nil
}

func (m *TeachChapterDataProto) GetAtkEndMonster() *MonsterMasterDataProto {
	if m != nil {
		return m.AtkEndMonster
	}
	return nil
}

func (m *TeachChapterDataProto) GetDefMonster() *MonsterMasterDataProto {
	if m != nil {
		return m.DefMonster
	}
	return nil
}

func init() {
	proto.RegisterType((*HeroTeachProto)(nil), "proto.HeroTeachProto")
	proto.RegisterType((*TeachChapterDataProto)(nil), "proto.TeachChapterDataProto")
}
func (m *HeroTeachProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeroTeachProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PassedChapterIds) > 0 {
		for _, num := range m.PassedChapterIds {
			dAtA[i] = 0x8
			i++
			i = encodeVarintTeach(dAtA, i, uint64(num))
		}
	}
	if len(m.CollectedChapterIds) > 0 {
		for _, num := range m.CollectedChapterIds {
			dAtA[i] = 0x10
			i++
			i = encodeVarintTeach(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *TeachChapterDataProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeachChapterDataProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTeach(dAtA, i, uint64(m.Id))
	}
	if m.Prize != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTeach(dAtA, i, uint64(m.Prize.Size()))
		n1, err := m.Prize.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.MinHeroLevel != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTeach(dAtA, i, uint64(m.MinHeroLevel))
	}
	if m.PassBaYeTaskStage != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTeach(dAtA, i, uint64(m.PassBaYeTaskStage))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTeach(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Desc) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTeach(dAtA, i, uint64(len(m.Desc)))
		i += copy(dAtA[i:], m.Desc)
	}
	if len(m.Image) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTeach(dAtA, i, uint64(len(m.Image)))
		i += copy(dAtA[i:], m.Image)
	}
	if m.AtkStartMonster != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTeach(dAtA, i, uint64(m.AtkStartMonster.Size()))
		n2, err := m.AtkStartMonster.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.AtkEndMonster != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTeach(dAtA, i, uint64(m.AtkEndMonster.Size()))
		n3, err := m.AtkEndMonster.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.DefMonster != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTeach(dAtA, i, uint64(m.DefMonster.Size()))
		n4, err := m.DefMonster.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.PassDungeonId != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTeach(dAtA, i, uint64(m.PassDungeonId))
	}
	return i, nil
}

func encodeFixed64Teach(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Teach(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintTeach(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *HeroTeachProto) Size() (n int) {
	var l int
	_ = l
	if len(m.PassedChapterIds) > 0 {
		for _, e := range m.PassedChapterIds {
			n += 1 + sovTeach(uint64(e))
		}
	}
	if len(m.CollectedChapterIds) > 0 {
		for _, e := range m.CollectedChapterIds {
			n += 1 + sovTeach(uint64(e))
		}
	}
	return n
}

func (m *TeachChapterDataProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTeach(uint64(m.Id))
	}
	if m.Prize != nil {
		l = m.Prize.Size()
		n += 1 + l + sovTeach(uint64(l))
	}
	if m.MinHeroLevel != 0 {
		n += 1 + sovTeach(uint64(m.MinHeroLevel))
	}
	if m.PassBaYeTaskStage != 0 {
		n += 1 + sovTeach(uint64(m.PassBaYeTaskStage))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovTeach(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovTeach(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovTeach(uint64(l))
	}
	if m.AtkStartMonster != nil {
		l = m.AtkStartMonster.Size()
		n += 1 + l + sovTeach(uint64(l))
	}
	if m.AtkEndMonster != nil {
		l = m.AtkEndMonster.Size()
		n += 1 + l + sovTeach(uint64(l))
	}
	if m.DefMonster != nil {
		l = m.DefMonster.Size()
		n += 1 + l + sovTeach(uint64(l))
	}
	if m.PassDungeonId != 0 {
		n += 1 + sovTeach(uint64(m.PassDungeonId))
	}
	return n
}

func sovTeach(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTeach(x uint64) (n int) {
	return sovTeach(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HeroTeachProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeach
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroTeachProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroTeachProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTeach
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PassedChapterIds = append(m.PassedChapterIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTeach
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTeach
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTeach
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PassedChapterIds = append(m.PassedChapterIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PassedChapterIds", wireType)
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTeach
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CollectedChapterIds = append(m.CollectedChapterIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTeach
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTeach
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTeach
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CollectedChapterIds = append(m.CollectedChapterIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectedChapterIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTeach(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeach
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeachChapterDataProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeach
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeachChapterDataProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeachChapterDataProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeach
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeach
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTeach
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Prize == nil {
				m.Prize = &PrizeProto{}
			}
			if err := m.Prize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinHeroLevel", wireType)
			}
			m.MinHeroLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeach
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinHeroLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassBaYeTaskStage", wireType)
			}
			m.PassBaYeTaskStage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeach
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PassBaYeTaskStage |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeach
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeach
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeach
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeach
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeach
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeach
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AtkStartMonster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeach
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTeach
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AtkStartMonster == nil {
				m.AtkStartMonster = &MonsterMasterDataProto{}
			}
			if err := m.AtkStartMonster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AtkEndMonster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeach
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTeach
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AtkEndMonster == nil {
				m.AtkEndMonster = &MonsterMasterDataProto{}
			}
			if err := m.AtkEndMonster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefMonster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeach
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTeach
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefMonster == nil {
				m.DefMonster = &MonsterMasterDataProto{}
			}
			if err := m.DefMonster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassDungeonId", wireType)
			}
			m.PassDungeonId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeach
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PassDungeonId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTeach(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeach
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTeach(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTeach
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTeach
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTeach
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTeach
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTeach
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTeach(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTeach = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTeach   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/pb/shared_proto/teach.proto", fileDescriptorTeach)
}

var fileDescriptorTeach = []byte{
	// 456 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x4d, 0x6f, 0x13, 0x31,
	0x10, 0xad, 0x93, 0x6e, 0xa1, 0x4e, 0x9b, 0x36, 0x86, 0x48, 0x56, 0x25, 0xa2, 0x55, 0x85, 0x20,
	0xa7, 0x6c, 0xc5, 0x57, 0x6f, 0x1c, 0x42, 0x2b, 0x35, 0x12, 0x95, 0xaa, 0xa5, 0x17, 0xb8, 0x58,
	0xb3, 0xeb, 0x69, 0xd6, 0xca, 0x7e, 0xc9, 0x76, 0x41, 0xf4, 0x97, 0xf0, 0x93, 0x38, 0xf2, 0x13,
	0x50, 0xf8, 0x23, 0xc8, 0x76, 0x1a, 0x2a, 0x4e, 0x39, 0xd9, 0x7e, 0x6f, 0xde, 0x9b, 0x37, 0xb3,
	0x4b, 0xdf, 0xce, 0x95, 0x2d, 0x6e, 0xb3, 0x49, 0xde, 0x54, 0x49, 0xa9, 0xe6, 0x85, 0x6d, 0xe1,
	0x5b, 0x52, 0x41, 0x89, 0xa7, 0x49, 0x9b, 0x25, 0xa6, 0x00, 0x8d, 0x52, 0xb4, 0xba, 0xb1, 0x4d,
	0x62, 0x11, 0xf2, 0x62, 0xe2, 0xef, 0x2c, 0xf2, 0xc7, 0xd1, 0x9b, 0xcd, 0xd5, 0x19, 0x18, 0x0c,
	0xe2, 0xa3, 0xd3, 0xcd, 0x55, 0x55, 0x53, 0x1b, 0x8b, 0x3a, 0x08, 0x8f, 0xef, 0x68, 0xff, 0x02,
	0x75, 0x73, 0xed, 0x82, 0x5c, 0xf9, 0x1c, 0x27, 0x94, 0xb5, 0x60, 0x0c, 0x4a, 0x91, 0x17, 0xd0,
	0x5a, 0xd4, 0x42, 0x49, 0xc3, 0x49, 0xdc, 0x1d, 0x47, 0xd3, 0xce, 0xe1, 0x56, 0x7a, 0x18, 0xd8,
	0x0f, 0x81, 0x9c, 0x49, 0xc3, 0xde, 0xd1, 0x61, 0xde, 0x94, 0x25, 0xe6, 0xf6, 0x3f, 0x51, 0x67,
	0x2d, 0x7a, 0xb2, 0x2e, 0xf8, 0xa7, 0x3b, 0x5e, 0x76, 0xe9, 0xd0, 0x37, 0x5e, 0x61, 0x67, 0x60,
	0x21, 0x64, 0xe8, 0xd3, 0x8e, 0x92, 0x9c, 0xc4, 0x64, 0x1c, 0xa5, 0x1d, 0x25, 0xd9, 0x4b, 0x1a,
	0xb5, 0x5a, 0xdd, 0x21, 0xef, 0xc4, 0x64, 0xdc, 0x7b, 0x35, 0x08, 0xe1, 0x27, 0x57, 0x0e, 0xf3,
	0x8a, 0x34, 0xf0, 0xec, 0x39, 0xed, 0x57, 0xaa, 0x16, 0x05, 0xea, 0x46, 0x94, 0xf8, 0x15, 0x4b,
	0xde, 0xf5, 0x26, 0x7b, 0x95, 0xaa, 0xdd, 0x9c, 0x1f, 0x1d, 0xc6, 0x4e, 0xe8, 0xd0, 0x0d, 0x21,
	0x32, 0x10, 0xdf, 0x51, 0x58, 0x30, 0x0b, 0x61, 0x2c, 0xcc, 0x91, 0x6f, 0xfb, 0xe2, 0x81, 0x23,
	0xa7, 0xf0, 0x19, 0xaf, 0xc1, 0x2c, 0x3e, 0x39, 0x82, 0x3d, 0xa5, 0x91, 0x55, 0xb6, 0x44, 0x1e,
	0xc5, 0x64, 0xbc, 0x9b, 0x86, 0x07, 0x63, 0x74, 0x5b, 0xa2, 0xc9, 0xf9, 0x8e, 0x07, 0xfd, 0xdd,
	0x55, 0xaa, 0xca, 0x79, 0x3d, 0x0a, 0x95, 0xfe, 0xc1, 0x66, 0x74, 0x00, 0xd6, 0x77, 0xd1, 0x56,
	0xac, 0xbe, 0x00, 0x7f, 0xec, 0x87, 0x79, 0xb6, 0x1a, 0xe6, 0x32, 0xa0, 0x97, 0x60, 0x1e, 0xae,
	0x22, 0x3d, 0x00, 0xeb, 0x32, 0x68, 0xbb, 0xe2, 0xd9, 0x39, 0x75, 0x90, 0xc0, 0x5a, 0xae, 0x8d,
	0x76, 0x37, 0x31, 0xda, 0x07, 0xbb, 0x38, 0xaf, 0xe5, 0xbd, 0xcd, 0x7b, 0xda, 0x93, 0x78, 0xb3,
	0xb6, 0xa0, 0x9b, 0x58, 0x50, 0x89, 0x37, 0xf7, 0xfa, 0x17, 0xf4, 0xc0, 0xef, 0x50, 0xde, 0xd6,
	0x73, 0x6c, 0x6a, 0xa1, 0x24, 0xef, 0xf9, 0xed, 0xed, 0x3b, 0xf8, 0x2c, 0xa0, 0x33, 0x39, 0x8d,
	0x7f, 0x2e, 0x47, 0xe4, 0xd7, 0x72, 0x44, 0x7e, 0x2f, 0x47, 0xe4, 0xc7, 0x9f, 0xd1, 0xd6, 0x05,
	0xf9, 0xb2, 0xf7, 0xf0, 0x87, 0xcc, 0x76, 0xfc, 0xf1, 0xfa, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x2c, 0xdf, 0xab, 0x8b, 0x38, 0x03, 0x00, 0x00,
}
