// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/pb/shared_proto/guild.proto
// DO NOT EDIT!

package shared_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 联盟目标类型
type GuildTargetType int32

const (
	GuildTargetType_InvalidGuildTargetType GuildTargetType = 0
	GuildTargetType_GuildLevelUp           GuildTargetType = 1
	GuildTargetType_PrestigeUp             GuildTargetType = 2
	GuildTargetType_ImpeachNpcLeader       GuildTargetType = 3
	GuildTargetType_ImpeachUserLeader      GuildTargetType = 4
	GuildTargetType_UpdateMemverClass      GuildTargetType = 5
	GuildTargetType_UserLeaderUseless      GuildTargetType = 6
	GuildTargetType_GuildChangeCountry     GuildTargetType = 7
)

var GuildTargetType_name = map[int32]string{
	0: "InvalidGuildTargetType",
	1: "GuildLevelUp",
	2: "PrestigeUp",
	3: "ImpeachNpcLeader",
	4: "ImpeachUserLeader",
	5: "UpdateMemverClass",
	6: "UserLeaderUseless",
	7: "GuildChangeCountry",
}
var GuildTargetType_value = map[string]int32{
	"InvalidGuildTargetType": 0,
	"GuildLevelUp":           1,
	"PrestigeUp":             2,
	"ImpeachNpcLeader":       3,
	"ImpeachUserLeader":      4,
	"UpdateMemverClass":      5,
	"UserLeaderUseless":      6,
	"GuildChangeCountry":     7,
}

func (x GuildTargetType) String() string {
	return proto.EnumName(GuildTargetType_name, int32(x))
}
func (GuildTargetType) EnumDescriptor() ([]byte, []int) { return fileDescriptorGuild, []int{0} }

type GuildBigEventType int32

const (
	GuildBigEventType_Statue  GuildBigEventType = 0
	GuildBigEventType_LevelUp GuildBigEventType = 1
	GuildBigEventType_Impeach GuildBigEventType = 2
	GuildBigEventType_Demise  GuildBigEventType = 3
)

var GuildBigEventType_name = map[int32]string{
	0: "Statue",
	1: "LevelUp",
	2: "Impeach",
	3: "Demise",
}
var GuildBigEventType_value = map[string]int32{
	"Statue":  0,
	"LevelUp": 1,
	"Impeach": 2,
	"Demise":  3,
}

func (x GuildBigEventType) String() string {
	return proto.EnumName(GuildBigEventType_name, int32(x))
}
func (GuildBigEventType) EnumDescriptor() ([]byte, []int) { return fileDescriptorGuild, []int{1} }

type GuildDynamicType int32

const (
	GuildDynamicType_Attack      GuildDynamicType = 0
	GuildDynamicType_Been_Attack GuildDynamicType = 1
	GuildDynamicType_Join        GuildDynamicType = 2
)

var GuildDynamicType_name = map[int32]string{
	0: "Attack",
	1: "Been_Attack",
	2: "Join",
}
var GuildDynamicType_value = map[string]int32{
	"Attack":      0,
	"Been_Attack": 1,
	"Join":        2,
}

func (x GuildDynamicType) String() string {
	return proto.EnumName(GuildDynamicType_name, int32(x))
}
func (GuildDynamicType) EnumDescriptor() ([]byte, []int) { return fileDescriptorGuild, []int{2} }

// 联盟礼包触发类型
type GuildEventPrizeType int32

const (
	GuildEventPrizeType_GEPInvalidType GuildEventPrizeType = 0
	GuildEventPrizeType_GEPRecharge    GuildEventPrizeType = 1
	GuildEventPrizeType_GEPHeroLevel   GuildEventPrizeType = 2
	GuildEventPrizeType_GEPBaseLevel   GuildEventPrizeType = 3
	GuildEventPrizeType_GEPActivity    GuildEventPrizeType = 4
	GuildEventPrizeType_GEPDungeon     GuildEventPrizeType = 5
)

var GuildEventPrizeType_name = map[int32]string{
	0: "GEPInvalidType",
	1: "GEPRecharge",
	2: "GEPHeroLevel",
	3: "GEPBaseLevel",
	4: "GEPActivity",
	5: "GEPDungeon",
}
var GuildEventPrizeType_value = map[string]int32{
	"GEPInvalidType": 0,
	"GEPRecharge":    1,
	"GEPHeroLevel":   2,
	"GEPBaseLevel":   3,
	"GEPActivity":    4,
	"GEPDungeon":     5,
}

func (x GuildEventPrizeType) String() string {
	return proto.EnumName(GuildEventPrizeType_name, int32(x))
}
func (GuildEventPrizeType) EnumDescriptor() ([]byte, []int) { return fileDescriptorGuild, []int{3} }

type GuildLogType int32

const (
	GuildLogType_GLTInvalidType  GuildLogType = 0
	GuildLogType_GLTDaily        GuildLogType = 1
	GuildLogType_GLTFight        GuildLogType = 2
	GuildLogType_GLTPrestige     GuildLogType = 3
	GuildLogType_GLT_Memorabilia GuildLogType = 4
	GuildLogType_GLTYinliang     GuildLogType = 5
)

var GuildLogType_name = map[int32]string{
	0: "GLTInvalidType",
	1: "GLTDaily",
	2: "GLTFight",
	3: "GLTPrestige",
	4: "GLT_Memorabilia",
	5: "GLTYinliang",
}
var GuildLogType_value = map[string]int32{
	"GLTInvalidType":  0,
	"GLTDaily":        1,
	"GLTFight":        2,
	"GLTPrestige":     3,
	"GLT_Memorabilia": 4,
	"GLTYinliang":     5,
}

func (x GuildLogType) String() string {
	return proto.EnumName(GuildLogType_name, int32(x))
}
func (GuildLogType) EnumDescriptor() ([]byte, []int) { return fileDescriptorGuild, []int{4} }

type GuildPermissionType int32

const (
	GuildPermissionType_PermInvalidType                 GuildPermissionType = 0
	GuildPermissionType_PermInvateOther                 GuildPermissionType = 1
	GuildPermissionType_PermAgreeJoin                   GuildPermissionType = 2
	GuildPermissionType_PermUpdateText                  GuildPermissionType = 3
	GuildPermissionType_PermUpdateInternalText          GuildPermissionType = 4
	GuildPermissionType_PermUpdateLabel                 GuildPermissionType = 5
	GuildPermissionType_PermUpdateFriendGuild           GuildPermissionType = 6
	GuildPermissionType_PermUpdateEnemyGuild            GuildPermissionType = 7
	GuildPermissionType_PermUpdateClassName             GuildPermissionType = 8
	GuildPermissionType_PermUpdateFlagType              GuildPermissionType = 9
	GuildPermissionType_PermUpdateLowerMemberClassLevel GuildPermissionType = 10
	GuildPermissionType_PermUpdateClassTitle            GuildPermissionType = 11
	GuildPermissionType_PermKickLowerMember             GuildPermissionType = 12
	GuildPermissionType_PermUpdateJoinCondition         GuildPermissionType = 13
	GuildPermissionType_PermImpeachNpcLeader            GuildPermissionType = 14
	GuildPermissionType_PermUpgradeLevel                GuildPermissionType = 15
	GuildPermissionType_PermUpgradeLevelCdr             GuildPermissionType = 16
	GuildPermissionType_PermUpgradeBuilding             GuildPermissionType = 17
	GuildPermissionType_PermUpgradeTechnology           GuildPermissionType = 18
	GuildPermissionType_PermUpdatePrestigeTarget        GuildPermissionType = 19
	GuildPermissionType_PermOpenResistXiongNu           GuildPermissionType = 20
	GuildPermissionType_PermSendToAllMembers            GuildPermissionType = 21
	GuildPermissionType_PermUpgradeTechnologyCdr        GuildPermissionType = 22
	GuildPermissionType_PermUpdateName                  GuildPermissionType = 23
	GuildPermissionType_PermUpdateFlagName              GuildPermissionType = 24
	GuildPermissionType_PermLeaveGuild                  GuildPermissionType = 25
	GuildPermissionType_PermDismissGuild                GuildPermissionType = 26
	GuildPermissionType_PermChangeLeader                GuildPermissionType = 27
	GuildPermissionType_PermUpdateMark                  GuildPermissionType = 28
	GuildPermissionType_PermChangeYinliang              GuildPermissionType = 29
	GuildPermissionType_PermConveneMember               GuildPermissionType = 30
	GuildPermissionType_PermGetOnlineInfo               GuildPermissionType = 31
	GuildPermissionType_PermWorkshop                    GuildPermissionType = 32
	GuildPermissionType_PermRecommendMcBuild            GuildPermissionType = 33
)

var GuildPermissionType_name = map[int32]string{
	0:  "PermInvalidType",
	1:  "PermInvateOther",
	2:  "PermAgreeJoin",
	3:  "PermUpdateText",
	4:  "PermUpdateInternalText",
	5:  "PermUpdateLabel",
	6:  "PermUpdateFriendGuild",
	7:  "PermUpdateEnemyGuild",
	8:  "PermUpdateClassName",
	9:  "PermUpdateFlagType",
	10: "PermUpdateLowerMemberClassLevel",
	11: "PermUpdateClassTitle",
	12: "PermKickLowerMember",
	13: "PermUpdateJoinCondition",
	14: "PermImpeachNpcLeader",
	15: "PermUpgradeLevel",
	16: "PermUpgradeLevelCdr",
	17: "PermUpgradeBuilding",
	18: "PermUpgradeTechnology",
	19: "PermUpdatePrestigeTarget",
	20: "PermOpenResistXiongNu",
	21: "PermSendToAllMembers",
	22: "PermUpgradeTechnologyCdr",
	23: "PermUpdateName",
	24: "PermUpdateFlagName",
	25: "PermLeaveGuild",
	26: "PermDismissGuild",
	27: "PermChangeLeader",
	28: "PermUpdateMark",
	29: "PermChangeYinliang",
	30: "PermConveneMember",
	31: "PermGetOnlineInfo",
	32: "PermWorkshop",
	33: "PermRecommendMcBuild",
}
var GuildPermissionType_value = map[string]int32{
	"PermInvalidType":                 0,
	"PermInvateOther":                 1,
	"PermAgreeJoin":                   2,
	"PermUpdateText":                  3,
	"PermUpdateInternalText":          4,
	"PermUpdateLabel":                 5,
	"PermUpdateFriendGuild":           6,
	"PermUpdateEnemyGuild":            7,
	"PermUpdateClassName":             8,
	"PermUpdateFlagType":              9,
	"PermUpdateLowerMemberClassLevel": 10,
	"PermUpdateClassTitle":            11,
	"PermKickLowerMember":             12,
	"PermUpdateJoinCondition":         13,
	"PermImpeachNpcLeader":            14,
	"PermUpgradeLevel":                15,
	"PermUpgradeLevelCdr":             16,
	"PermUpgradeBuilding":             17,
	"PermUpgradeTechnology":           18,
	"PermUpdatePrestigeTarget":        19,
	"PermOpenResistXiongNu":           20,
	"PermSendToAllMembers":            21,
	"PermUpgradeTechnologyCdr":        22,
	"PermUpdateName":                  23,
	"PermUpdateFlagName":              24,
	"PermLeaveGuild":                  25,
	"PermDismissGuild":                26,
	"PermChangeLeader":                27,
	"PermUpdateMark":                  28,
	"PermChangeYinliang":              29,
	"PermConveneMember":               30,
	"PermGetOnlineInfo":               31,
	"PermWorkshop":                    32,
	"PermRecommendMcBuild":            33,
}

func (x GuildPermissionType) String() string {
	return proto.EnumName(GuildPermissionType_name, int32(x))
}
func (GuildPermissionType) EnumDescriptor() ([]byte, []int) { return fileDescriptorGuild, []int{5} }

// 名城战参与类型
type McWarActionType int32

const (
	McWarActionType_MC_WAR_A_INVALID McWarActionType = 0
	McWarActionType_MC_WAR_A_ATK     McWarActionType = 1
	McWarActionType_MC_WAR_A_DEF     McWarActionType = 2
	McWarActionType_MC_WAR_A_AST_ATK McWarActionType = 3
	McWarActionType_MC_WAR_A_AST_DEF McWarActionType = 4
)

var McWarActionType_name = map[int32]string{
	0: "MC_WAR_A_INVALID",
	1: "MC_WAR_A_ATK",
	2: "MC_WAR_A_DEF",
	3: "MC_WAR_A_AST_ATK",
	4: "MC_WAR_A_AST_DEF",
}
var McWarActionType_value = map[string]int32{
	"MC_WAR_A_INVALID": 0,
	"MC_WAR_A_ATK":     1,
	"MC_WAR_A_DEF":     2,
	"MC_WAR_A_AST_ATK": 3,
	"MC_WAR_A_AST_DEF": 4,
}

func (x McWarActionType) String() string {
	return proto.EnumName(McWarActionType_name, int32(x))
}
func (McWarActionType) EnumDescriptor() ([]byte, []int) { return fileDescriptorGuild, []int{6} }

// 联盟工坊日志
type GuildWorkshopLogProto struct {
	Time int32  `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Text string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (m *GuildWorkshopLogProto) Reset()                    { *m = GuildWorkshopLogProto{} }
func (m *GuildWorkshopLogProto) String() string            { return proto.CompactTextString(m) }
func (*GuildWorkshopLogProto) ProtoMessage()               {}
func (*GuildWorkshopLogProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{0} }

func (m *GuildWorkshopLogProto) GetTime() int32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *GuildWorkshopLogProto) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

// 联盟科技
type GuildTechnologyDataProto struct {
	Id                int32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name              string                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Desc              []string              `protobuf:"bytes,3,rep,name=desc" json:"desc,omitempty"`
	Icon              string                `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
	Group             int32                 `protobuf:"varint,5,opt,name=group,proto3" json:"group,omitempty"`
	Level             int32                 `protobuf:"varint,6,opt,name=level,proto3" json:"level,omitempty"`
	RequireGuildLevel int32                 `protobuf:"varint,7,opt,name=require_guild_level,json=requireGuildLevel,proto3" json:"require_guild_level,omitempty"`
	UpgradeBuilding   int32                 `protobuf:"varint,8,opt,name=upgrade_building,json=upgradeBuilding,proto3" json:"upgrade_building,omitempty"`
	UpgradeDuration   int32                 `protobuf:"varint,9,opt,name=upgrade_duration,json=upgradeDuration,proto3" json:"upgrade_duration,omitempty"`
	Cdrs              []*GuildLevelCdrProto `protobuf:"bytes,10,rep,name=cdrs" json:"cdrs,omitempty"`
	HelpCdr           int32                 `protobuf:"varint,13,opt,name=help_cdr,json=helpCdr,proto3" json:"help_cdr,omitempty"`
	// 升级效果，一种是建筑效果，一种是宝箱等级（2选1，判断标准是，如果宝箱id==0或者null，为建筑效果，否则为宝箱）
	Effect *DomesticEffectProto `protobuf:"bytes,11,opt,name=effect" json:"effect,omitempty"`
	BigBox int32                `protobuf:"varint,12,opt,name=big_box,json=bigBox,proto3" json:"big_box,omitempty"`
}

func (m *GuildTechnologyDataProto) Reset()                    { *m = GuildTechnologyDataProto{} }
func (m *GuildTechnologyDataProto) String() string            { return proto.CompactTextString(m) }
func (*GuildTechnologyDataProto) ProtoMessage()               {}
func (*GuildTechnologyDataProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{1} }

func (m *GuildTechnologyDataProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GuildTechnologyDataProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GuildTechnologyDataProto) GetDesc() []string {
	if m != nil {
		return m.Desc
	}
	return nil
}

func (m *GuildTechnologyDataProto) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *GuildTechnologyDataProto) GetGroup() int32 {
	if m != nil {
		return m.Group
	}
	return 0
}

func (m *GuildTechnologyDataProto) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *GuildTechnologyDataProto) GetRequireGuildLevel() int32 {
	if m != nil {
		return m.RequireGuildLevel
	}
	return 0
}

func (m *GuildTechnologyDataProto) GetUpgradeBuilding() int32 {
	if m != nil {
		return m.UpgradeBuilding
	}
	return 0
}

func (m *GuildTechnologyDataProto) GetUpgradeDuration() int32 {
	if m != nil {
		return m.UpgradeDuration
	}
	return 0
}

func (m *GuildTechnologyDataProto) GetCdrs() []*GuildLevelCdrProto {
	if m != nil {
		return m.Cdrs
	}
	return nil
}

func (m *GuildTechnologyDataProto) GetHelpCdr() int32 {
	if m != nil {
		return m.HelpCdr
	}
	return 0
}

func (m *GuildTechnologyDataProto) GetEffect() *DomesticEffectProto {
	if m != nil {
		return m.Effect
	}
	return nil
}

func (m *GuildTechnologyDataProto) GetBigBox() int32 {
	if m != nil {
		return m.BigBox
	}
	return 0
}

// 联盟盟友礼包
type GuildEventPrizeDataProto struct {
	Id               int32                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name             string                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Desc             string                  `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	Quality          Quality                 `protobuf:"varint,4,opt,name=quality,proto3,enum=proto.Quality" json:"quality,omitempty"`
	IconId           string                  `protobuf:"bytes,5,opt,name=icon_id,json=iconId,proto3" json:"icon_id,omitempty"`
	Prize            *PrizeProto             `protobuf:"bytes,6,opt,name=prize" json:"prize,omitempty"`
	Energy           int32                   `protobuf:"varint,7,opt,name=energy,proto3" json:"energy,omitempty"`
	FromShop         bool                    `protobuf:"varint,8,opt,name=from_shop,json=fromShop,proto3" json:"from_shop,omitempty"`
	GuildLevelPrizes []*GuildLevelPrizeProto `protobuf:"bytes,11,rep,name=guild_level_prizes,json=guildLevelPrizes" json:"guild_level_prizes,omitempty"`
}

func (m *GuildEventPrizeDataProto) Reset()                    { *m = GuildEventPrizeDataProto{} }
func (m *GuildEventPrizeDataProto) String() string            { return proto.CompactTextString(m) }
func (*GuildEventPrizeDataProto) ProtoMessage()               {}
func (*GuildEventPrizeDataProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{2} }

func (m *GuildEventPrizeDataProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GuildEventPrizeDataProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GuildEventPrizeDataProto) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *GuildEventPrizeDataProto) GetQuality() Quality {
	if m != nil {
		return m.Quality
	}
	return Quality_InvalidQuality
}

func (m *GuildEventPrizeDataProto) GetIconId() string {
	if m != nil {
		return m.IconId
	}
	return ""
}

func (m *GuildEventPrizeDataProto) GetPrize() *PrizeProto {
	if m != nil {
		return m.Prize
	}
	return nil
}

func (m *GuildEventPrizeDataProto) GetEnergy() int32 {
	if m != nil {
		return m.Energy
	}
	return 0
}

func (m *GuildEventPrizeDataProto) GetFromShop() bool {
	if m != nil {
		return m.FromShop
	}
	return false
}

func (m *GuildEventPrizeDataProto) GetGuildLevelPrizes() []*GuildLevelPrizeProto {
	if m != nil {
		return m.GuildLevelPrizes
	}
	return nil
}

// 联盟声望礼包奖励
type GuildPrestigePrizeDataProto struct {
	Prestige       int32 `protobuf:"varint,1,opt,name=prestige,proto3" json:"prestige,omitempty"`
	EventPrize     int32 `protobuf:"varint,2,opt,name=event_prize,json=eventPrize,proto3" json:"event_prize,omitempty"`
	BuildingAmount int32 `protobuf:"varint,3,opt,name=building_amount,json=buildingAmount,proto3" json:"building_amount,omitempty"`
	Hufu           int32 `protobuf:"varint,4,opt,name=hufu,proto3" json:"hufu,omitempty"`
}

func (m *GuildPrestigePrizeDataProto) Reset()                    { *m = GuildPrestigePrizeDataProto{} }
func (m *GuildPrestigePrizeDataProto) String() string            { return proto.CompactTextString(m) }
func (*GuildPrestigePrizeDataProto) ProtoMessage()               {}
func (*GuildPrestigePrizeDataProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{3} }

func (m *GuildPrestigePrizeDataProto) GetPrestige() int32 {
	if m != nil {
		return m.Prestige
	}
	return 0
}

func (m *GuildPrestigePrizeDataProto) GetEventPrize() int32 {
	if m != nil {
		return m.EventPrize
	}
	return 0
}

func (m *GuildPrestigePrizeDataProto) GetBuildingAmount() int32 {
	if m != nil {
		return m.BuildingAmount
	}
	return 0
}

func (m *GuildPrestigePrizeDataProto) GetHufu() int32 {
	if m != nil {
		return m.Hufu
	}
	return 0
}

// 逼格宝箱
type GuildBigBoxDataProto struct {
	Id               int32                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Prize            *PrizeProto             `protobuf:"bytes,6,opt,name=prize" json:"prize,omitempty"`
	UnlockEnergy     int32                   `protobuf:"varint,7,opt,name=unlock_energy,json=unlockEnergy,proto3" json:"unlock_energy,omitempty"`
	GuildLevelPrizes []*GuildLevelPrizeProto `protobuf:"bytes,11,rep,name=guild_level_prizes,json=guildLevelPrizes" json:"guild_level_prizes,omitempty"`
	TechLevel        int32                   `protobuf:"varint,12,opt,name=tech_level,json=techLevel,proto3" json:"tech_level,omitempty"`
}

func (m *GuildBigBoxDataProto) Reset()                    { *m = GuildBigBoxDataProto{} }
func (m *GuildBigBoxDataProto) String() string            { return proto.CompactTextString(m) }
func (*GuildBigBoxDataProto) ProtoMessage()               {}
func (*GuildBigBoxDataProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{4} }

func (m *GuildBigBoxDataProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GuildBigBoxDataProto) GetPrize() *PrizeProto {
	if m != nil {
		return m.Prize
	}
	return nil
}

func (m *GuildBigBoxDataProto) GetUnlockEnergy() int32 {
	if m != nil {
		return m.UnlockEnergy
	}
	return 0
}

func (m *GuildBigBoxDataProto) GetGuildLevelPrizes() []*GuildLevelPrizeProto {
	if m != nil {
		return m.GuildLevelPrizes
	}
	return nil
}

func (m *GuildBigBoxDataProto) GetTechLevel() int32 {
	if m != nil {
		return m.TechLevel
	}
	return 0
}

type GuildLevelCdrProto struct {
	Times int32 `protobuf:"varint,2,opt,name=times,proto3" json:"times,omitempty"`
	Cost  int32 `protobuf:"varint,3,opt,name=cost,proto3" json:"cost,omitempty"`
	Cdr   int32 `protobuf:"varint,4,opt,name=cdr,proto3" json:"cdr,omitempty"`
}

func (m *GuildLevelCdrProto) Reset()                    { *m = GuildLevelCdrProto{} }
func (m *GuildLevelCdrProto) String() string            { return proto.CompactTextString(m) }
func (*GuildLevelCdrProto) ProtoMessage()               {}
func (*GuildLevelCdrProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{5} }

func (m *GuildLevelCdrProto) GetTimes() int32 {
	if m != nil {
		return m.Times
	}
	return 0
}

func (m *GuildLevelCdrProto) GetCost() int32 {
	if m != nil {
		return m.Cost
	}
	return 0
}

func (m *GuildLevelCdrProto) GetCdr() int32 {
	if m != nil {
		return m.Cdr
	}
	return 0
}

type GuildLevelProto struct {
	Level            int32                 `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	MemberCount      int32                 `protobuf:"varint,2,opt,name=member_count,json=memberCount,proto3" json:"member_count,omitempty"`
	ClassMemberCount []int32               `protobuf:"varint,3,rep,name=class_member_count,json=classMemberCount" json:"class_member_count,omitempty"`
	UpgradeBuilding  int32                 `protobuf:"varint,4,opt,name=upgrade_building,json=upgradeBuilding,proto3" json:"upgrade_building,omitempty"`
	UpgradeDuration  int32                 `protobuf:"varint,5,opt,name=upgrade_duration,json=upgradeDuration,proto3" json:"upgrade_duration,omitempty"`
	Cdrs             []*GuildLevelCdrProto `protobuf:"bytes,6,rep,name=cdrs" json:"cdrs,omitempty"`
}

func (m *GuildLevelProto) Reset()                    { *m = GuildLevelProto{} }
func (m *GuildLevelProto) String() string            { return proto.CompactTextString(m) }
func (*GuildLevelProto) ProtoMessage()               {}
func (*GuildLevelProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{6} }

func (m *GuildLevelProto) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *GuildLevelProto) GetMemberCount() int32 {
	if m != nil {
		return m.MemberCount
	}
	return 0
}

func (m *GuildLevelProto) GetClassMemberCount() []int32 {
	if m != nil {
		return m.ClassMemberCount
	}
	return nil
}

func (m *GuildLevelProto) GetUpgradeBuilding() int32 {
	if m != nil {
		return m.UpgradeBuilding
	}
	return 0
}

func (m *GuildLevelProto) GetUpgradeDuration() int32 {
	if m != nil {
		return m.UpgradeDuration
	}
	return 0
}

func (m *GuildLevelProto) GetCdrs() []*GuildLevelCdrProto {
	if m != nil {
		return m.Cdrs
	}
	return nil
}

type GuildClassTitleDataProto struct {
	Id         int32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Permission *GuildPermissionProto `protobuf:"bytes,4,opt,name=permission" json:"permission,omitempty"`
}

func (m *GuildClassTitleDataProto) Reset()                    { *m = GuildClassTitleDataProto{} }
func (m *GuildClassTitleDataProto) String() string            { return proto.CompactTextString(m) }
func (*GuildClassTitleDataProto) ProtoMessage()               {}
func (*GuildClassTitleDataProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{7} }

func (m *GuildClassTitleDataProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GuildClassTitleDataProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GuildClassTitleDataProto) GetPermission() *GuildPermissionProto {
	if m != nil {
		return m.Permission
	}
	return nil
}

type GuildClassLevelProto struct {
	Level      int32                 `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Name       string                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Count      int32                 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Permission *GuildPermissionProto `protobuf:"bytes,4,opt,name=permission" json:"permission,omitempty"`
	VoteScore  int32                 `protobuf:"varint,20,opt,name=vote_score,json=voteScore,proto3" json:"vote_score,omitempty"`
}

func (m *GuildClassLevelProto) Reset()                    { *m = GuildClassLevelProto{} }
func (m *GuildClassLevelProto) String() string            { return proto.CompactTextString(m) }
func (*GuildClassLevelProto) ProtoMessage()               {}
func (*GuildClassLevelProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{8} }

func (m *GuildClassLevelProto) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *GuildClassLevelProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GuildClassLevelProto) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *GuildClassLevelProto) GetPermission() *GuildPermissionProto {
	if m != nil {
		return m.Permission
	}
	return nil
}

func (m *GuildClassLevelProto) GetVoteScore() int32 {
	if m != nil {
		return m.VoteScore
	}
	return 0
}

type GuildPermissionProto struct {
	InvateOther                 bool `protobuf:"varint,4,opt,name=invate_other,json=invateOther,proto3" json:"invate_other,omitempty"`
	AgreeJoin                   bool `protobuf:"varint,5,opt,name=agree_join,json=agreeJoin,proto3" json:"agree_join,omitempty"`
	UpdateText                  bool `protobuf:"varint,6,opt,name=update_text,json=updateText,proto3" json:"update_text,omitempty"`
	UpdateInternalText          bool `protobuf:"varint,11,opt,name=update_internal_text,json=updateInternalText,proto3" json:"update_internal_text,omitempty"`
	UpdateLabel                 bool `protobuf:"varint,13,opt,name=update_label,json=updateLabel,proto3" json:"update_label,omitempty"`
	UpdateClassName             bool `protobuf:"varint,7,opt,name=update_class_name,json=updateClassName,proto3" json:"update_class_name,omitempty"`
	UpdateFlagType              bool `protobuf:"varint,8,opt,name=update_flag_type,json=updateFlagType,proto3" json:"update_flag_type,omitempty"`
	UpdateLowerMemberClassLevel bool `protobuf:"varint,9,opt,name=update_lower_member_class_level,json=updateLowerMemberClassLevel,proto3" json:"update_lower_member_class_level,omitempty"`
	UpdateClassTitle            bool `protobuf:"varint,14,opt,name=update_class_title,json=updateClassTitle,proto3" json:"update_class_title,omitempty"`
	KickLowerMember             bool `protobuf:"varint,10,opt,name=kick_lower_member,json=kickLowerMember,proto3" json:"kick_lower_member,omitempty"`
	UpdateJoinCondition         bool `protobuf:"varint,12,opt,name=update_join_condition,json=updateJoinCondition,proto3" json:"update_join_condition,omitempty"`
	ImpeachNpcLeader            bool `protobuf:"varint,15,opt,name=impeach_npc_leader,json=impeachNpcLeader,proto3" json:"impeach_npc_leader,omitempty"`
	UpgradeLevel                bool `protobuf:"varint,16,opt,name=upgrade_level,json=upgradeLevel,proto3" json:"upgrade_level,omitempty"`
	UpgradeLevelCdr             bool `protobuf:"varint,19,opt,name=upgrade_level_cdr,json=upgradeLevelCdr,proto3" json:"upgrade_level_cdr,omitempty"`
	UpgradeBuilding             bool `protobuf:"varint,17,opt,name=upgrade_building,json=upgradeBuilding,proto3" json:"upgrade_building,omitempty"`
	UpgradeTechnology           bool `protobuf:"varint,18,opt,name=upgrade_technology,json=upgradeTechnology,proto3" json:"upgrade_technology,omitempty"`
	UpdateFriendGuild           bool `protobuf:"varint,20,opt,name=update_friend_guild,json=updateFriendGuild,proto3" json:"update_friend_guild,omitempty"`
	UpdateEnemyGuild            bool `protobuf:"varint,21,opt,name=update_enemy_guild,json=updateEnemyGuild,proto3" json:"update_enemy_guild,omitempty"`
	UpdatePrestigeTarget        bool `protobuf:"varint,25,opt,name=update_prestige_target,json=updatePrestigeTarget,proto3" json:"update_prestige_target,omitempty"`
	OpenResistXiongNu           bool `protobuf:"varint,26,opt,name=open_resist_xiong_nu,json=openResistXiongNu,proto3" json:"open_resist_xiong_nu,omitempty"`
	SendToAllMembers            bool `protobuf:"varint,27,opt,name=send_to_all_members,json=sendToAllMembers,proto3" json:"send_to_all_members,omitempty"`
	UpgradeTechnologyCdr        bool `protobuf:"varint,28,opt,name=upgrade_technology_cdr,json=upgradeTechnologyCdr,proto3" json:"upgrade_technology_cdr,omitempty"`
	UpdateName                  bool `protobuf:"varint,29,opt,name=update_name,json=updateName,proto3" json:"update_name,omitempty"`
	UpdateFlagName              bool `protobuf:"varint,30,opt,name=update_flag_name,json=updateFlagName,proto3" json:"update_flag_name,omitempty"`
	LeaveGuild                  bool `protobuf:"varint,31,opt,name=leave_guild,json=leaveGuild,proto3" json:"leave_guild,omitempty"`
	DismissGuild                bool `protobuf:"varint,32,opt,name=dismiss_guild,json=dismissGuild,proto3" json:"dismiss_guild,omitempty"`
	ChangeLeader                bool `protobuf:"varint,33,opt,name=change_leader,json=changeLeader,proto3" json:"change_leader,omitempty"`
	UpdateMark                  bool `protobuf:"varint,34,opt,name=update_mark,json=updateMark,proto3" json:"update_mark,omitempty"`
	ChangeYinliang              bool `protobuf:"varint,35,opt,name=change_yinliang,json=changeYinliang,proto3" json:"change_yinliang,omitempty"`
	ConveneMember               bool `protobuf:"varint,36,opt,name=convene_member,json=conveneMember,proto3" json:"convene_member,omitempty"`
	GetOnlineInfo               bool `protobuf:"varint,37,opt,name=get_online_info,json=getOnlineInfo,proto3" json:"get_online_info,omitempty"`
	Workshop                    bool `protobuf:"varint,38,opt,name=workshop,proto3" json:"workshop,omitempty"`
	RecommendMcBuild            bool `protobuf:"varint,39,opt,name=recommend_mc_build,json=recommendMcBuild,proto3" json:"recommend_mc_build,omitempty"`
}

func (m *GuildPermissionProto) Reset()                    { *m = GuildPermissionProto{} }
func (m *GuildPermissionProto) String() string            { return proto.CompactTextString(m) }
func (*GuildPermissionProto) ProtoMessage()               {}
func (*GuildPermissionProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{9} }

func (m *GuildPermissionProto) GetInvateOther() bool {
	if m != nil {
		return m.InvateOther
	}
	return false
}

func (m *GuildPermissionProto) GetAgreeJoin() bool {
	if m != nil {
		return m.AgreeJoin
	}
	return false
}

func (m *GuildPermissionProto) GetUpdateText() bool {
	if m != nil {
		return m.UpdateText
	}
	return false
}

func (m *GuildPermissionProto) GetUpdateInternalText() bool {
	if m != nil {
		return m.UpdateInternalText
	}
	return false
}

func (m *GuildPermissionProto) GetUpdateLabel() bool {
	if m != nil {
		return m.UpdateLabel
	}
	return false
}

func (m *GuildPermissionProto) GetUpdateClassName() bool {
	if m != nil {
		return m.UpdateClassName
	}
	return false
}

func (m *GuildPermissionProto) GetUpdateFlagType() bool {
	if m != nil {
		return m.UpdateFlagType
	}
	return false
}

func (m *GuildPermissionProto) GetUpdateLowerMemberClassLevel() bool {
	if m != nil {
		return m.UpdateLowerMemberClassLevel
	}
	return false
}

func (m *GuildPermissionProto) GetUpdateClassTitle() bool {
	if m != nil {
		return m.UpdateClassTitle
	}
	return false
}

func (m *GuildPermissionProto) GetKickLowerMember() bool {
	if m != nil {
		return m.KickLowerMember
	}
	return false
}

func (m *GuildPermissionProto) GetUpdateJoinCondition() bool {
	if m != nil {
		return m.UpdateJoinCondition
	}
	return false
}

func (m *GuildPermissionProto) GetImpeachNpcLeader() bool {
	if m != nil {
		return m.ImpeachNpcLeader
	}
	return false
}

func (m *GuildPermissionProto) GetUpgradeLevel() bool {
	if m != nil {
		return m.UpgradeLevel
	}
	return false
}

func (m *GuildPermissionProto) GetUpgradeLevelCdr() bool {
	if m != nil {
		return m.UpgradeLevelCdr
	}
	return false
}

func (m *GuildPermissionProto) GetUpgradeBuilding() bool {
	if m != nil {
		return m.UpgradeBuilding
	}
	return false
}

func (m *GuildPermissionProto) GetUpgradeTechnology() bool {
	if m != nil {
		return m.UpgradeTechnology
	}
	return false
}

func (m *GuildPermissionProto) GetUpdateFriendGuild() bool {
	if m != nil {
		return m.UpdateFriendGuild
	}
	return false
}

func (m *GuildPermissionProto) GetUpdateEnemyGuild() bool {
	if m != nil {
		return m.UpdateEnemyGuild
	}
	return false
}

func (m *GuildPermissionProto) GetUpdatePrestigeTarget() bool {
	if m != nil {
		return m.UpdatePrestigeTarget
	}
	return false
}

func (m *GuildPermissionProto) GetOpenResistXiongNu() bool {
	if m != nil {
		return m.OpenResistXiongNu
	}
	return false
}

func (m *GuildPermissionProto) GetSendToAllMembers() bool {
	if m != nil {
		return m.SendToAllMembers
	}
	return false
}

func (m *GuildPermissionProto) GetUpgradeTechnologyCdr() bool {
	if m != nil {
		return m.UpgradeTechnologyCdr
	}
	return false
}

func (m *GuildPermissionProto) GetUpdateName() bool {
	if m != nil {
		return m.UpdateName
	}
	return false
}

func (m *GuildPermissionProto) GetUpdateFlagName() bool {
	if m != nil {
		return m.UpdateFlagName
	}
	return false
}

func (m *GuildPermissionProto) GetLeaveGuild() bool {
	if m != nil {
		return m.LeaveGuild
	}
	return false
}

func (m *GuildPermissionProto) GetDismissGuild() bool {
	if m != nil {
		return m.DismissGuild
	}
	return false
}

func (m *GuildPermissionProto) GetChangeLeader() bool {
	if m != nil {
		return m.ChangeLeader
	}
	return false
}

func (m *GuildPermissionProto) GetUpdateMark() bool {
	if m != nil {
		return m.UpdateMark
	}
	return false
}

func (m *GuildPermissionProto) GetChangeYinliang() bool {
	if m != nil {
		return m.ChangeYinliang
	}
	return false
}

func (m *GuildPermissionProto) GetConveneMember() bool {
	if m != nil {
		return m.ConveneMember
	}
	return false
}

func (m *GuildPermissionProto) GetGetOnlineInfo() bool {
	if m != nil {
		return m.GetOnlineInfo
	}
	return false
}

func (m *GuildPermissionProto) GetWorkshop() bool {
	if m != nil {
		return m.Workshop
	}
	return false
}

func (m *GuildPermissionProto) GetRecommendMcBuild() bool {
	if m != nil {
		return m.RecommendMcBuild
	}
	return false
}

type GuildDonateProto struct {
	Sequence             int32      `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Times                int32      `protobuf:"varint,2,opt,name=times,proto3" json:"times,omitempty"`
	Cost                 *CostProto `protobuf:"bytes,3,opt,name=cost" json:"cost,omitempty"`
	GuildBuildingAmount  int32      `protobuf:"varint,4,opt,name=guild_building_amount,json=guildBuildingAmount,proto3" json:"guild_building_amount,omitempty"`
	ContributionAmount   int32      `protobuf:"varint,5,opt,name=contribution_amount,json=contributionAmount,proto3" json:"contribution_amount,omitempty"`
	DonationAmount       int32      `protobuf:"varint,6,opt,name=donation_amount,json=donationAmount,proto3" json:"donation_amount,omitempty"`
	ContributionCoin     int32      `protobuf:"varint,7,opt,name=contribution_coin,json=contributionCoin,proto3" json:"contribution_coin,omitempty"`
	RecommandGuanfuLevel int32      `protobuf:"varint,8,opt,name=recommand_guanfu_level,json=recommandGuanfuLevel,proto3" json:"recommand_guanfu_level,omitempty"`
}

func (m *GuildDonateProto) Reset()                    { *m = GuildDonateProto{} }
func (m *GuildDonateProto) String() string            { return proto.CompactTextString(m) }
func (*GuildDonateProto) ProtoMessage()               {}
func (*GuildDonateProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{10} }

func (m *GuildDonateProto) GetSequence() int32 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *GuildDonateProto) GetTimes() int32 {
	if m != nil {
		return m.Times
	}
	return 0
}

func (m *GuildDonateProto) GetCost() *CostProto {
	if m != nil {
		return m.Cost
	}
	return nil
}

func (m *GuildDonateProto) GetGuildBuildingAmount() int32 {
	if m != nil {
		return m.GuildBuildingAmount
	}
	return 0
}

func (m *GuildDonateProto) GetContributionAmount() int32 {
	if m != nil {
		return m.ContributionAmount
	}
	return 0
}

func (m *GuildDonateProto) GetDonationAmount() int32 {
	if m != nil {
		return m.DonationAmount
	}
	return 0
}

func (m *GuildDonateProto) GetContributionCoin() int32 {
	if m != nil {
		return m.ContributionCoin
	}
	return 0
}

func (m *GuildDonateProto) GetRecommandGuanfuLevel() int32 {
	if m != nil {
		return m.RecommandGuanfuLevel
	}
	return 0
}

type GuildProto struct {
	Id             int32             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	FlagName       string            `protobuf:"bytes,3,opt,name=flagName,proto3" json:"flagName,omitempty"`
	FlagType       int32             `protobuf:"varint,4,opt,name=flagType,proto3" json:"flagType,omitempty"`
	Level          int32             `protobuf:"varint,5,opt,name=level,proto3" json:"level,omitempty"`
	BuildingAmount int32             `protobuf:"varint,41,opt,name=building_amount,json=buildingAmount,proto3" json:"building_amount,omitempty"`
	UpgradeEndTime int32             `protobuf:"varint,42,opt,name=upgrade_end_time,json=upgradeEndTime,proto3" json:"upgrade_end_time,omitempty"`
	CdrTimes       int32             `protobuf:"varint,43,opt,name=cdr_times,json=cdrTimes,proto3" json:"cdr_times,omitempty"`
	MemberCount    int32             `protobuf:"varint,6,opt,name=member_count,json=memberCount,proto3" json:"member_count,omitempty"`
	Leader         *GuildMemberProto `protobuf:"bytes,7,opt,name=leader" json:"leader,omitempty"`
	Text           string            `protobuf:"bytes,8,opt,name=text,proto3" json:"text,omitempty"`
	InternalText   string            `protobuf:"bytes,9,opt,name=internal_text,json=internalText,proto3" json:"internal_text,omitempty"`
	Labels         []string          `protobuf:"bytes,10,rep,name=labels" json:"labels,omitempty"`
	// 入盟条件
	RejectAutoJoin               bool                      `protobuf:"varint,11,opt,name=reject_auto_join,json=rejectAutoJoin,proto3" json:"reject_auto_join,omitempty"`
	RequiredHeroLevel            int32                     `protobuf:"varint,12,opt,name=required_hero_level,json=requiredHeroLevel,proto3" json:"required_hero_level,omitempty"`
	RequiredJunXianLevel         int32                     `protobuf:"varint,13,opt,name=required_jun_xian_level,json=requiredJunXianLevel,proto3" json:"required_jun_xian_level,omitempty"`
	RequiredTowerMaxFloor        int32                     `protobuf:"varint,14,opt,name=required_tower_max_floor,json=requiredTowerMaxFloor,proto3" json:"required_tower_max_floor,omitempty"`
	ClassNames                   []string                  `protobuf:"bytes,21,rep,name=class_names,json=classNames" json:"class_names,omitempty"`
	Members                      []*GuildMemberProto       `protobuf:"bytes,22,rep,name=members" json:"members,omitempty"`
	KickMemberCount              int32                     `protobuf:"varint,32,opt,name=kick_member_count,json=kickMemberCount,proto3" json:"kick_member_count,omitempty"`
	ChangeLeaderId               []byte                    `protobuf:"bytes,23,opt,name=change_leader_id,json=changeLeaderId,proto3" json:"change_leader_id,omitempty"`
	ChangeLeaderTime             int32                     `protobuf:"varint,24,opt,name=change_leader_time,json=changeLeaderTime,proto3" json:"change_leader_time,omitempty"`
	NextChangeNameTime           int32                     `protobuf:"varint,25,opt,name=next_change_name_time,json=nextChangeNameTime,proto3" json:"next_change_name_time,omitempty"`
	FreeChangeName               bool                      `protobuf:"varint,31,opt,name=free_change_name,json=freeChangeName,proto3" json:"free_change_name,omitempty"`
	ImpeachLeader                *GuildImpeachProto        `protobuf:"bytes,26,opt,name=impeach_leader,json=impeachLeader" json:"impeach_leader,omitempty"`
	InvateHero                   []*HeroBasicSnapshotProto `protobuf:"bytes,27,rep,name=invate_hero,json=invateHero" json:"invate_hero,omitempty"`
	RequestJoinHero              []*HeroBasicSnapshotProto `protobuf:"bytes,29,rep,name=request_join_hero,json=requestJoinHero" json:"request_join_hero,omitempty"`
	ClassTitle                   *GuildClassTitleProto     `protobuf:"bytes,33,opt,name=class_title,json=classTitle" json:"class_title,omitempty"`
	Prestige                     int32                     `protobuf:"varint,35,opt,name=prestige,proto3" json:"prestige,omitempty"`
	HistoryMaxPrestige           int32                     `protobuf:"varint,37,opt,name=history_max_prestige,json=historyMaxPrestige,proto3" json:"history_max_prestige,omitempty"`
	PrestigeTarget               int32                     `protobuf:"varint,34,opt,name=prestige_target,json=prestigeTarget,proto3" json:"prestige_target,omitempty"`
	Hufu                         int32                     `protobuf:"varint,46,opt,name=hufu,proto3" json:"hufu,omitempty"`
	Yinliang                     int32                     `protobuf:"varint,47,opt,name=yinliang,proto3" json:"yinliang,omitempty"`
	FriendGuildText              string                    `protobuf:"bytes,50,opt,name=friend_guild_text,json=friendGuildText,proto3" json:"friend_guild_text,omitempty"`
	EnemyGuildText               string                    `protobuf:"bytes,51,opt,name=enemy_guild_text,json=enemyGuildText,proto3" json:"enemy_guild_text,omitempty"`
	DonateRecords                []*GuildDonateRecordProto `protobuf:"bytes,55,rep,name=donate_records,json=donateRecords" json:"donate_records,omitempty"`
	BigEvents                    []*GuildBigEventProto     `protobuf:"bytes,56,rep,name=big_events,json=bigEvents" json:"big_events,omitempty"`
	Dynamics                     []*GuildDynamicProto      `protobuf:"bytes,57,rep,name=dynamics" json:"dynamics,omitempty"`
	GuildTargetId                []int32                   `protobuf:"varint,66,rep,name=guild_target_id,json=guildTargetId" json:"guild_target_id,omitempty"`
	GuildTargetStartTime         []int32                   `protobuf:"varint,75,rep,name=guild_target_start_time,json=guildTargetStartTime" json:"guild_target_start_time,omitempty"`
	GuildTargetEndTime           []int32                   `protobuf:"varint,67,rep,name=guild_target_end_time,json=guildTargetEndTime" json:"guild_target_end_time,omitempty"`
	Rank                         int32                     `protobuf:"varint,59,opt,name=rank,proto3" json:"rank,omitempty"`
	RankByCountry                int32                     `protobuf:"varint,58,opt,name=rank_by_country,json=rankByCountry,proto3" json:"rank_by_country,omitempty"`
	BigBoxId                     int32                     `protobuf:"varint,60,opt,name=big_box_id,json=bigBoxId,proto3" json:"big_box_id,omitempty"`
	BigBoxEnergy                 int32                     `protobuf:"varint,61,opt,name=big_box_energy,json=bigBoxEnergy,proto3" json:"big_box_energy,omitempty"`
	Technologys                  []int32                   `protobuf:"varint,62,rep,name=technologys" json:"technologys,omitempty"`
	UpgradeTechnology            int32                     `protobuf:"varint,65,opt,name=upgrade_technology,json=upgradeTechnology,proto3" json:"upgrade_technology,omitempty"`
	TechUpgradeEndTime           int32                     `protobuf:"varint,63,opt,name=tech_upgrade_end_time,json=techUpgradeEndTime,proto3" json:"tech_upgrade_end_time,omitempty"`
	TechCdrTimes                 int32                     `protobuf:"varint,64,opt,name=tech_cdr_times,json=techCdrTimes,proto3" json:"tech_cdr_times,omitempty"`
	NextUpdatePrestigeTargetTime int32                     `protobuf:"varint,68,opt,name=next_update_prestige_target_time,json=nextUpdatePrestigeTargetTime,proto3" json:"next_update_prestige_target_time,omitempty"`
	IsStartResistXiongNuToday    bool                      `protobuf:"varint,69,opt,name=is_start_resist_xiong_nu_today,json=isStartResistXiongNuToday,proto3" json:"is_start_resist_xiong_nu_today,omitempty"`
	ResistXiongNuDefenders       [][]byte                  `protobuf:"bytes,74,rep,name=resist_xiong_nu_defenders,json=resistXiongNuDefenders" json:"resist_xiong_nu_defenders,omitempty"`
	UnlockResistXiongNuLevel     int32                     `protobuf:"varint,71,opt,name=unlock_resist_xiong_nu_level,json=unlockResistXiongNuLevel,proto3" json:"unlock_resist_xiong_nu_level,omitempty"`
	HasLastResistXiongNu         bool                      `protobuf:"varint,72,opt,name=has_last_resist_xiong_nu,json=hasLastResistXiongNu,proto3" json:"has_last_resist_xiong_nu,omitempty"`
	LastResistXiongNu            *LastResistXiongNuProto   `protobuf:"bytes,73,opt,name=last_resist_xiong_nu,json=lastResistXiongNu" json:"last_resist_xiong_nu,omitempty"`
	MingcHostCount               int32                     `protobuf:"varint,76,opt,name=mingc_host_count,json=mingcHostCount,proto3" json:"mingc_host_count,omitempty"`
	WorkshopX                    int32                     `protobuf:"varint,77,opt,name=workshop_x,json=workshopX,proto3" json:"workshop_x,omitempty"`
	WorkshopY                    int32                     `protobuf:"varint,78,opt,name=workshop_y,json=workshopY,proto3" json:"workshop_y,omitempty"`
	RecommendMcBuilds            []int32                   `protobuf:"varint,79,rep,name=recommend_mc_builds,json=recommendMcBuilds" json:"recommend_mc_builds,omitempty"`
	DailyMcBuildId               []int32                   `protobuf:"varint,80,rep,name=daily_mc_build_id,json=dailyMcBuildId" json:"daily_mc_build_id,omitempty"`
	DailyMcBuildCount            []int32                   `protobuf:"varint,81,rep,name=daily_mc_build_count,json=dailyMcBuildCount" json:"daily_mc_build_count,omitempty"`
	// 联盟转国
	ChangeCountryWaitEndTime int32 `protobuf:"varint,82,opt,name=change_country_wait_end_time,json=changeCountryWaitEndTime,proto3" json:"change_country_wait_end_time,omitempty"`
	ChangeCountryTarget      int32 `protobuf:"varint,83,opt,name=change_country_target,json=changeCountryTarget,proto3" json:"change_country_target,omitempty"`
	ChangeCountryNextTime    int32 `protobuf:"varint,84,opt,name=change_country_next_time,json=changeCountryNextTime,proto3" json:"change_country_next_time,omitempty"`
}

func (m *GuildProto) Reset()                    { *m = GuildProto{} }
func (m *GuildProto) String() string            { return proto.CompactTextString(m) }
func (*GuildProto) ProtoMessage()               {}
func (*GuildProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{11} }

func (m *GuildProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GuildProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GuildProto) GetFlagName() string {
	if m != nil {
		return m.FlagName
	}
	return ""
}

func (m *GuildProto) GetFlagType() int32 {
	if m != nil {
		return m.FlagType
	}
	return 0
}

func (m *GuildProto) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *GuildProto) GetBuildingAmount() int32 {
	if m != nil {
		return m.BuildingAmount
	}
	return 0
}

func (m *GuildProto) GetUpgradeEndTime() int32 {
	if m != nil {
		return m.UpgradeEndTime
	}
	return 0
}

func (m *GuildProto) GetCdrTimes() int32 {
	if m != nil {
		return m.CdrTimes
	}
	return 0
}

func (m *GuildProto) GetMemberCount() int32 {
	if m != nil {
		return m.MemberCount
	}
	return 0
}

func (m *GuildProto) GetLeader() *GuildMemberProto {
	if m != nil {
		return m.Leader
	}
	return nil
}

func (m *GuildProto) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *GuildProto) GetInternalText() string {
	if m != nil {
		return m.InternalText
	}
	return ""
}

func (m *GuildProto) GetLabels() []string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *GuildProto) GetRejectAutoJoin() bool {
	if m != nil {
		return m.RejectAutoJoin
	}
	return false
}

func (m *GuildProto) GetRequiredHeroLevel() int32 {
	if m != nil {
		return m.RequiredHeroLevel
	}
	return 0
}

func (m *GuildProto) GetRequiredJunXianLevel() int32 {
	if m != nil {
		return m.RequiredJunXianLevel
	}
	return 0
}

func (m *GuildProto) GetRequiredTowerMaxFloor() int32 {
	if m != nil {
		return m.RequiredTowerMaxFloor
	}
	return 0
}

func (m *GuildProto) GetClassNames() []string {
	if m != nil {
		return m.ClassNames
	}
	return nil
}

func (m *GuildProto) GetMembers() []*GuildMemberProto {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *GuildProto) GetKickMemberCount() int32 {
	if m != nil {
		return m.KickMemberCount
	}
	return 0
}

func (m *GuildProto) GetChangeLeaderId() []byte {
	if m != nil {
		return m.ChangeLeaderId
	}
	return nil
}

func (m *GuildProto) GetChangeLeaderTime() int32 {
	if m != nil {
		return m.ChangeLeaderTime
	}
	return 0
}

func (m *GuildProto) GetNextChangeNameTime() int32 {
	if m != nil {
		return m.NextChangeNameTime
	}
	return 0
}

func (m *GuildProto) GetFreeChangeName() bool {
	if m != nil {
		return m.FreeChangeName
	}
	return false
}

func (m *GuildProto) GetImpeachLeader() *GuildImpeachProto {
	if m != nil {
		return m.ImpeachLeader
	}
	return nil
}

func (m *GuildProto) GetInvateHero() []*HeroBasicSnapshotProto {
	if m != nil {
		return m.InvateHero
	}
	return nil
}

func (m *GuildProto) GetRequestJoinHero() []*HeroBasicSnapshotProto {
	if m != nil {
		return m.RequestJoinHero
	}
	return nil
}

func (m *GuildProto) GetClassTitle() *GuildClassTitleProto {
	if m != nil {
		return m.ClassTitle
	}
	return nil
}

func (m *GuildProto) GetPrestige() int32 {
	if m != nil {
		return m.Prestige
	}
	return 0
}

func (m *GuildProto) GetHistoryMaxPrestige() int32 {
	if m != nil {
		return m.HistoryMaxPrestige
	}
	return 0
}

func (m *GuildProto) GetPrestigeTarget() int32 {
	if m != nil {
		return m.PrestigeTarget
	}
	return 0
}

func (m *GuildProto) GetHufu() int32 {
	if m != nil {
		return m.Hufu
	}
	return 0
}

func (m *GuildProto) GetYinliang() int32 {
	if m != nil {
		return m.Yinliang
	}
	return 0
}

func (m *GuildProto) GetFriendGuildText() string {
	if m != nil {
		return m.FriendGuildText
	}
	return ""
}

func (m *GuildProto) GetEnemyGuildText() string {
	if m != nil {
		return m.EnemyGuildText
	}
	return ""
}

func (m *GuildProto) GetDonateRecords() []*GuildDonateRecordProto {
	if m != nil {
		return m.DonateRecords
	}
	return nil
}

func (m *GuildProto) GetBigEvents() []*GuildBigEventProto {
	if m != nil {
		return m.BigEvents
	}
	return nil
}

func (m *GuildProto) GetDynamics() []*GuildDynamicProto {
	if m != nil {
		return m.Dynamics
	}
	return nil
}

func (m *GuildProto) GetGuildTargetId() []int32 {
	if m != nil {
		return m.GuildTargetId
	}
	return nil
}

func (m *GuildProto) GetGuildTargetStartTime() []int32 {
	if m != nil {
		return m.GuildTargetStartTime
	}
	return nil
}

func (m *GuildProto) GetGuildTargetEndTime() []int32 {
	if m != nil {
		return m.GuildTargetEndTime
	}
	return nil
}

func (m *GuildProto) GetRank() int32 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *GuildProto) GetRankByCountry() int32 {
	if m != nil {
		return m.RankByCountry
	}
	return 0
}

func (m *GuildProto) GetBigBoxId() int32 {
	if m != nil {
		return m.BigBoxId
	}
	return 0
}

func (m *GuildProto) GetBigBoxEnergy() int32 {
	if m != nil {
		return m.BigBoxEnergy
	}
	return 0
}

func (m *GuildProto) GetTechnologys() []int32 {
	if m != nil {
		return m.Technologys
	}
	return nil
}

func (m *GuildProto) GetUpgradeTechnology() int32 {
	if m != nil {
		return m.UpgradeTechnology
	}
	return 0
}

func (m *GuildProto) GetTechUpgradeEndTime() int32 {
	if m != nil {
		return m.TechUpgradeEndTime
	}
	return 0
}

func (m *GuildProto) GetTechCdrTimes() int32 {
	if m != nil {
		return m.TechCdrTimes
	}
	return 0
}

func (m *GuildProto) GetNextUpdatePrestigeTargetTime() int32 {
	if m != nil {
		return m.NextUpdatePrestigeTargetTime
	}
	return 0
}

func (m *GuildProto) GetIsStartResistXiongNuToday() bool {
	if m != nil {
		return m.IsStartResistXiongNuToday
	}
	return false
}

func (m *GuildProto) GetResistXiongNuDefenders() [][]byte {
	if m != nil {
		return m.ResistXiongNuDefenders
	}
	return nil
}

func (m *GuildProto) GetUnlockResistXiongNuLevel() int32 {
	if m != nil {
		return m.UnlockResistXiongNuLevel
	}
	return 0
}

func (m *GuildProto) GetHasLastResistXiongNu() bool {
	if m != nil {
		return m.HasLastResistXiongNu
	}
	return false
}

func (m *GuildProto) GetLastResistXiongNu() *LastResistXiongNuProto {
	if m != nil {
		return m.LastResistXiongNu
	}
	return nil
}

func (m *GuildProto) GetMingcHostCount() int32 {
	if m != nil {
		return m.MingcHostCount
	}
	return 0
}

func (m *GuildProto) GetWorkshopX() int32 {
	if m != nil {
		return m.WorkshopX
	}
	return 0
}

func (m *GuildProto) GetWorkshopY() int32 {
	if m != nil {
		return m.WorkshopY
	}
	return 0
}

func (m *GuildProto) GetRecommendMcBuilds() []int32 {
	if m != nil {
		return m.RecommendMcBuilds
	}
	return nil
}

func (m *GuildProto) GetDailyMcBuildId() []int32 {
	if m != nil {
		return m.DailyMcBuildId
	}
	return nil
}

func (m *GuildProto) GetDailyMcBuildCount() []int32 {
	if m != nil {
		return m.DailyMcBuildCount
	}
	return nil
}

func (m *GuildProto) GetChangeCountryWaitEndTime() int32 {
	if m != nil {
		return m.ChangeCountryWaitEndTime
	}
	return 0
}

func (m *GuildProto) GetChangeCountryTarget() int32 {
	if m != nil {
		return m.ChangeCountryTarget
	}
	return 0
}

func (m *GuildProto) GetChangeCountryNextTime() int32 {
	if m != nil {
		return m.ChangeCountryNextTime
	}
	return 0
}

type GuildBasicProto struct {
	Id       int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	FlagName string `protobuf:"bytes,3,opt,name=flagName,proto3" json:"flagName,omitempty"`
	Level    int32  `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
	Country  int32  `protobuf:"varint,5,opt,name=country,proto3" json:"country,omitempty"`
}

func (m *GuildBasicProto) Reset()                    { *m = GuildBasicProto{} }
func (m *GuildBasicProto) String() string            { return proto.CompactTextString(m) }
func (*GuildBasicProto) ProtoMessage()               {}
func (*GuildBasicProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{12} }

func (m *GuildBasicProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GuildBasicProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GuildBasicProto) GetFlagName() string {
	if m != nil {
		return m.FlagName
	}
	return ""
}

func (m *GuildBasicProto) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *GuildBasicProto) GetCountry() int32 {
	if m != nil {
		return m.Country
	}
	return 0
}

type GuildSnapshotProto struct {
	Id          int32                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	FlagName    string                  `protobuf:"bytes,3,opt,name=flagName,proto3" json:"flagName,omitempty"`
	FlagType    int32                   `protobuf:"varint,4,opt,name=flagType,proto3" json:"flagType,omitempty"`
	Level       int32                   `protobuf:"varint,5,opt,name=level,proto3" json:"level,omitempty"`
	MemberCount int32                   `protobuf:"varint,6,opt,name=member_count,json=memberCount,proto3" json:"member_count,omitempty"`
	Leader      *HeroBasicSnapshotProto `protobuf:"bytes,7,opt,name=leader" json:"leader,omitempty"`
	Text        string                  `protobuf:"bytes,8,opt,name=text,proto3" json:"text,omitempty"`
	// 入盟条件
	RejectAutoJoin        bool  `protobuf:"varint,11,opt,name=reject_auto_join,json=rejectAutoJoin,proto3" json:"reject_auto_join,omitempty"`
	RequiredHeroLevel     int32 `protobuf:"varint,12,opt,name=required_hero_level,json=requiredHeroLevel,proto3" json:"required_hero_level,omitempty"`
	RequiredJunXianLevel  int32 `protobuf:"varint,13,opt,name=required_jun_xian_level,json=requiredJunXianLevel,proto3" json:"required_jun_xian_level,omitempty"`
	RequiredTowerMaxFloor int32 `protobuf:"varint,14,opt,name=required_tower_max_floor,json=requiredTowerMaxFloor,proto3" json:"required_tower_max_floor,omitempty"`
	Prestige              int32 `protobuf:"varint,35,opt,name=prestige,proto3" json:"prestige,omitempty"`
	PrestigeTarget        int32 `protobuf:"varint,34,opt,name=prestige_target,json=prestigeTarget,proto3" json:"prestige_target,omitempty"`
}

func (m *GuildSnapshotProto) Reset()                    { *m = GuildSnapshotProto{} }
func (m *GuildSnapshotProto) String() string            { return proto.CompactTextString(m) }
func (*GuildSnapshotProto) ProtoMessage()               {}
func (*GuildSnapshotProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{13} }

func (m *GuildSnapshotProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GuildSnapshotProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GuildSnapshotProto) GetFlagName() string {
	if m != nil {
		return m.FlagName
	}
	return ""
}

func (m *GuildSnapshotProto) GetFlagType() int32 {
	if m != nil {
		return m.FlagType
	}
	return 0
}

func (m *GuildSnapshotProto) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *GuildSnapshotProto) GetMemberCount() int32 {
	if m != nil {
		return m.MemberCount
	}
	return 0
}

func (m *GuildSnapshotProto) GetLeader() *HeroBasicSnapshotProto {
	if m != nil {
		return m.Leader
	}
	return nil
}

func (m *GuildSnapshotProto) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *GuildSnapshotProto) GetRejectAutoJoin() bool {
	if m != nil {
		return m.RejectAutoJoin
	}
	return false
}

func (m *GuildSnapshotProto) GetRequiredHeroLevel() int32 {
	if m != nil {
		return m.RequiredHeroLevel
	}
	return 0
}

func (m *GuildSnapshotProto) GetRequiredJunXianLevel() int32 {
	if m != nil {
		return m.RequiredJunXianLevel
	}
	return 0
}

func (m *GuildSnapshotProto) GetRequiredTowerMaxFloor() int32 {
	if m != nil {
		return m.RequiredTowerMaxFloor
	}
	return 0
}

func (m *GuildSnapshotProto) GetPrestige() int32 {
	if m != nil {
		return m.Prestige
	}
	return 0
}

func (m *GuildSnapshotProto) GetPrestigeTarget() int32 {
	if m != nil {
		return m.PrestigeTarget
	}
	return 0
}

type GuildMemberProto struct {
	Hero                    *HeroBasicSnapshotProto `protobuf:"bytes,101,opt,name=hero" json:"hero,omitempty"`
	IsTodayJoinStart        bool                    `protobuf:"varint,102,opt,name=is_today_join_start,json=isTodayJoinStart,proto3" json:"is_today_join_start,omitempty"`
	ClassLevel              int32                   `protobuf:"varint,21,opt,name=class_level,json=classLevel,proto3" json:"class_level,omitempty"`
	HufuAmount              int32                   `protobuf:"varint,28,opt,name=hufu_amount,json=hufuAmount,proto3" json:"hufu_amount,omitempty"`
	HufuTotalAmount         int32                   `protobuf:"varint,29,opt,name=hufu_total_amount,json=hufuTotalAmount,proto3" json:"hufu_total_amount,omitempty"`
	HufuAmount7             int32                   `protobuf:"varint,30,opt,name=hufu_amount7,json=hufuAmount7,proto3" json:"hufu_amount7,omitempty"`
	ContributionAmount      int32                   `protobuf:"varint,31,opt,name=contribution_amount,json=contributionAmount,proto3" json:"contribution_amount,omitempty"`
	ContributionTotalAmount int32                   `protobuf:"varint,32,opt,name=contribution_total_amount,json=contributionTotalAmount,proto3" json:"contribution_total_amount,omitempty"`
	ContributionAmount7     int32                   `protobuf:"varint,33,opt,name=contribution_amount7,json=contributionAmount7,proto3" json:"contribution_amount7,omitempty"`
	DonationAmount          int32                   `protobuf:"varint,34,opt,name=donation_amount,json=donationAmount,proto3" json:"donation_amount,omitempty"`
	DonationTotalAmount     int32                   `protobuf:"varint,35,opt,name=donation_total_amount,json=donationTotalAmount,proto3" json:"donation_total_amount,omitempty"`
	DonationAmount7         int32                   `protobuf:"varint,36,opt,name=donation_amount7,json=donationAmount7,proto3" json:"donation_amount7,omitempty"`
	DonationTotalYuanbao    int32                   `protobuf:"varint,38,opt,name=donation_total_yuanbao,json=donationTotalYuanbao,proto3" json:"donation_total_yuanbao,omitempty"`
	CreateTime              int32                   `protobuf:"varint,39,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	Salary                  int32                   `protobuf:"varint,40,opt,name=salary,proto3" json:"salary,omitempty"`
	HistorySalary           int32                   `protobuf:"varint,41,opt,name=history_salary,json=historySalary,proto3" json:"history_salary,omitempty"`
}

func (m *GuildMemberProto) Reset()                    { *m = GuildMemberProto{} }
func (m *GuildMemberProto) String() string            { return proto.CompactTextString(m) }
func (*GuildMemberProto) ProtoMessage()               {}
func (*GuildMemberProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{14} }

func (m *GuildMemberProto) GetHero() *HeroBasicSnapshotProto {
	if m != nil {
		return m.Hero
	}
	return nil
}

func (m *GuildMemberProto) GetIsTodayJoinStart() bool {
	if m != nil {
		return m.IsTodayJoinStart
	}
	return false
}

func (m *GuildMemberProto) GetClassLevel() int32 {
	if m != nil {
		return m.ClassLevel
	}
	return 0
}

func (m *GuildMemberProto) GetHufuAmount() int32 {
	if m != nil {
		return m.HufuAmount
	}
	return 0
}

func (m *GuildMemberProto) GetHufuTotalAmount() int32 {
	if m != nil {
		return m.HufuTotalAmount
	}
	return 0
}

func (m *GuildMemberProto) GetHufuAmount7() int32 {
	if m != nil {
		return m.HufuAmount7
	}
	return 0
}

func (m *GuildMemberProto) GetContributionAmount() int32 {
	if m != nil {
		return m.ContributionAmount
	}
	return 0
}

func (m *GuildMemberProto) GetContributionTotalAmount() int32 {
	if m != nil {
		return m.ContributionTotalAmount
	}
	return 0
}

func (m *GuildMemberProto) GetContributionAmount7() int32 {
	if m != nil {
		return m.ContributionAmount7
	}
	return 0
}

func (m *GuildMemberProto) GetDonationAmount() int32 {
	if m != nil {
		return m.DonationAmount
	}
	return 0
}

func (m *GuildMemberProto) GetDonationTotalAmount() int32 {
	if m != nil {
		return m.DonationTotalAmount
	}
	return 0
}

func (m *GuildMemberProto) GetDonationAmount7() int32 {
	if m != nil {
		return m.DonationAmount7
	}
	return 0
}

func (m *GuildMemberProto) GetDonationTotalYuanbao() int32 {
	if m != nil {
		return m.DonationTotalYuanbao
	}
	return 0
}

func (m *GuildMemberProto) GetCreateTime() int32 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *GuildMemberProto) GetSalary() int32 {
	if m != nil {
		return m.Salary
	}
	return 0
}

func (m *GuildMemberProto) GetHistorySalary() int32 {
	if m != nil {
		return m.HistorySalary
	}
	return 0
}

// 弹劾盟主
type GuildImpeachProto struct {
	ImpeachEndTime  int32    `protobuf:"varint,1,opt,name=impeach_end_time,json=impeachEndTime,proto3" json:"impeach_end_time,omitempty"`
	Candidates      [][]byte `protobuf:"bytes,2,rep,name=candidates" json:"candidates,omitempty"`
	Points          []int32  `protobuf:"varint,3,rep,name=points" json:"points,omitempty"`
	VoteHeros       [][]byte `protobuf:"bytes,4,rep,name=vote_heros,json=voteHeros" json:"vote_heros,omitempty"`
	VoteTarget      [][]byte `protobuf:"bytes,5,rep,name=vote_target,json=voteTarget" json:"vote_target,omitempty"`
	ImpeachMemberId []byte   `protobuf:"bytes,6,opt,name=impeach_member_id,json=impeachMemberId,proto3" json:"impeach_member_id,omitempty"`
}

func (m *GuildImpeachProto) Reset()                    { *m = GuildImpeachProto{} }
func (m *GuildImpeachProto) String() string            { return proto.CompactTextString(m) }
func (*GuildImpeachProto) ProtoMessage()               {}
func (*GuildImpeachProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{15} }

func (m *GuildImpeachProto) GetImpeachEndTime() int32 {
	if m != nil {
		return m.ImpeachEndTime
	}
	return 0
}

func (m *GuildImpeachProto) GetCandidates() [][]byte {
	if m != nil {
		return m.Candidates
	}
	return nil
}

func (m *GuildImpeachProto) GetPoints() []int32 {
	if m != nil {
		return m.Points
	}
	return nil
}

func (m *GuildImpeachProto) GetVoteHeros() [][]byte {
	if m != nil {
		return m.VoteHeros
	}
	return nil
}

func (m *GuildImpeachProto) GetVoteTarget() [][]byte {
	if m != nil {
		return m.VoteTarget
	}
	return nil
}

func (m *GuildImpeachProto) GetImpeachMemberId() []byte {
	if m != nil {
		return m.ImpeachMemberId
	}
	return nil
}

// 职称
type GuildClassTitleProto struct {
	SystemClassTitleId       []int32  `protobuf:"varint,1,rep,name=system_class_title_id,json=systemClassTitleId" json:"system_class_title_id,omitempty"`
	SystemClassTitleMemberId [][]byte `protobuf:"bytes,2,rep,name=system_class_title_member_id,json=systemClassTitleMemberId" json:"system_class_title_member_id,omitempty"`
	// 自定义职称
	CustomClassTitleName     []string           `protobuf:"bytes,11,rep,name=custom_class_title_name,json=customClassTitleName" json:"custom_class_title_name,omitempty"`
	CustomClassTitleMemberId []*BytesArrayProto `protobuf:"bytes,12,rep,name=custom_class_title_member_id,json=customClassTitleMemberId" json:"custom_class_title_member_id,omitempty"`
}

func (m *GuildClassTitleProto) Reset()                    { *m = GuildClassTitleProto{} }
func (m *GuildClassTitleProto) String() string            { return proto.CompactTextString(m) }
func (*GuildClassTitleProto) ProtoMessage()               {}
func (*GuildClassTitleProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{16} }

func (m *GuildClassTitleProto) GetSystemClassTitleId() []int32 {
	if m != nil {
		return m.SystemClassTitleId
	}
	return nil
}

func (m *GuildClassTitleProto) GetSystemClassTitleMemberId() [][]byte {
	if m != nil {
		return m.SystemClassTitleMemberId
	}
	return nil
}

func (m *GuildClassTitleProto) GetCustomClassTitleName() []string {
	if m != nil {
		return m.CustomClassTitleName
	}
	return nil
}

func (m *GuildClassTitleProto) GetCustomClassTitleMemberId() []*BytesArrayProto {
	if m != nil {
		return m.CustomClassTitleMemberId
	}
	return nil
}

type HeroUpgradeClassLevelProto struct {
	Level int32 `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
}

func (m *HeroUpgradeClassLevelProto) Reset()                    { *m = HeroUpgradeClassLevelProto{} }
func (m *HeroUpgradeClassLevelProto) String() string            { return proto.CompactTextString(m) }
func (*HeroUpgradeClassLevelProto) ProtoMessage()               {}
func (*HeroUpgradeClassLevelProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{17} }

func (m *HeroUpgradeClassLevelProto) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

type GuildTargetProto struct {
	// 目标id
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 目标名字
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 目标描述
	Desc string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	// 目标图标
	Icon string `protobuf:"bytes,6,opt,name=icon,proto3" json:"icon,omitempty"`
	// 按钮文字
	ButtonText string `protobuf:"bytes,7,opt,name=button_text,json=buttonText,proto3" json:"button_text,omitempty"`
	// 目标类型
	TargetType GuildTargetType `protobuf:"varint,4,opt,name=target_type,json=targetType,proto3,enum=proto.GuildTargetType" json:"target_type,omitempty"`
	// （1）	有1名玩家升级到副盟主（仅NPC联盟有），通过 target 去找 GuildClassLevelProto
	// （2）	由玩家弹劾NPC盟主（仅NPC联盟有）
	// （3）	联盟升级到x级, 通过 target 去找 GuildLevelProto
	// （4）	联盟成员达到n人
	// （5）	建立联盟雕像
	// （6）	加入一个国家（0.2版本不做）
	Target int32 `protobuf:"varint,5,opt,name=target,proto3" json:"target,omitempty"`
}

func (m *GuildTargetProto) Reset()                    { *m = GuildTargetProto{} }
func (m *GuildTargetProto) String() string            { return proto.CompactTextString(m) }
func (*GuildTargetProto) ProtoMessage()               {}
func (*GuildTargetProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{18} }

func (m *GuildTargetProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GuildTargetProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GuildTargetProto) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *GuildTargetProto) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *GuildTargetProto) GetButtonText() string {
	if m != nil {
		return m.ButtonText
	}
	return ""
}

func (m *GuildTargetProto) GetTargetType() GuildTargetType {
	if m != nil {
		return m.TargetType
	}
	return GuildTargetType_InvalidGuildTargetType
}

func (m *GuildTargetProto) GetTarget() int32 {
	if m != nil {
		return m.Target
	}
	return 0
}

// 联盟捐献记录
type GuildDonateRecordProto struct {
	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Sequence   int32  `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Times      int32  `protobuf:"varint,3,opt,name=times,proto3" json:"times,omitempty"`
	DonateTime int32  `protobuf:"varint,4,opt,name=donate_time,json=donateTime,proto3" json:"donate_time,omitempty"`
}

func (m *GuildDonateRecordProto) Reset()                    { *m = GuildDonateRecordProto{} }
func (m *GuildDonateRecordProto) String() string            { return proto.CompactTextString(m) }
func (*GuildDonateRecordProto) ProtoMessage()               {}
func (*GuildDonateRecordProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{19} }

func (m *GuildDonateRecordProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GuildDonateRecordProto) GetSequence() int32 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *GuildDonateRecordProto) GetTimes() int32 {
	if m != nil {
		return m.Times
	}
	return 0
}

func (m *GuildDonateRecordProto) GetDonateTime() int32 {
	if m != nil {
		return m.DonateTime
	}
	return 0
}

// 联盟大事记
type GuildBigEventProto struct {
	Time int32             `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Type GuildBigEventType `protobuf:"varint,2,opt,name=type,proto3,enum=proto.GuildBigEventType" json:"type,omitempty"`
	// 雕像
	Statue *StatueProto `protobuf:"bytes,10,opt,name=statue" json:"statue,omitempty"`
	// 升级
	LevelUp *LevelUpProto `protobuf:"bytes,11,opt,name=level_up,json=levelUp" json:"level_up,omitempty"`
	// 弹劾
	Impeach *ImpeachProto `protobuf:"bytes,12,opt,name=impeach" json:"impeach,omitempty"`
	// 禅让
	Demise *DemiseProto `protobuf:"bytes,13,opt,name=demise" json:"demise,omitempty"`
}

func (m *GuildBigEventProto) Reset()                    { *m = GuildBigEventProto{} }
func (m *GuildBigEventProto) String() string            { return proto.CompactTextString(m) }
func (*GuildBigEventProto) ProtoMessage()               {}
func (*GuildBigEventProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{20} }

func (m *GuildBigEventProto) GetTime() int32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *GuildBigEventProto) GetType() GuildBigEventType {
	if m != nil {
		return m.Type
	}
	return GuildBigEventType_Statue
}

func (m *GuildBigEventProto) GetStatue() *StatueProto {
	if m != nil {
		return m.Statue
	}
	return nil
}

func (m *GuildBigEventProto) GetLevelUp() *LevelUpProto {
	if m != nil {
		return m.LevelUp
	}
	return nil
}

func (m *GuildBigEventProto) GetImpeach() *ImpeachProto {
	if m != nil {
		return m.Impeach
	}
	return nil
}

func (m *GuildBigEventProto) GetDemise() *DemiseProto {
	if m != nil {
		return m.Demise
	}
	return nil
}

// 联盟雕像事件
type StatueProto struct {
	LeaderId    []byte `protobuf:"bytes,1,opt,name=leader_id,json=leaderId,proto3" json:"leader_id,omitempty"`
	LeaderName  string `protobuf:"bytes,2,opt,name=leader_name,json=leaderName,proto3" json:"leader_name,omitempty"`
	RegionLevel int32  `protobuf:"varint,3,opt,name=region_level,json=regionLevel,proto3" json:"region_level,omitempty"`
	RegionId    int32  `protobuf:"varint,4,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
}

func (m *StatueProto) Reset()                    { *m = StatueProto{} }
func (m *StatueProto) String() string            { return proto.CompactTextString(m) }
func (*StatueProto) ProtoMessage()               {}
func (*StatueProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{21} }

func (m *StatueProto) GetLeaderId() []byte {
	if m != nil {
		return m.LeaderId
	}
	return nil
}

func (m *StatueProto) GetLeaderName() string {
	if m != nil {
		return m.LeaderName
	}
	return ""
}

func (m *StatueProto) GetRegionLevel() int32 {
	if m != nil {
		return m.RegionLevel
	}
	return 0
}

func (m *StatueProto) GetRegionId() int32 {
	if m != nil {
		return m.RegionId
	}
	return 0
}

// 联盟升级事件
type LevelUpProto struct {
	Level int32 `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
}

func (m *LevelUpProto) Reset()                    { *m = LevelUpProto{} }
func (m *LevelUpProto) String() string            { return proto.CompactTextString(m) }
func (*LevelUpProto) ProtoMessage()               {}
func (*LevelUpProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{22} }

func (m *LevelUpProto) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

// 联盟弹劾事件
type ImpeachProto struct {
	OldLeaderId   []byte `protobuf:"bytes,1,opt,name=old_leader_id,json=oldLeaderId,proto3" json:"old_leader_id,omitempty"`
	OldLeaderName string `protobuf:"bytes,2,opt,name=old_leader_name,json=oldLeaderName,proto3" json:"old_leader_name,omitempty"`
	NewLeaderId   []byte `protobuf:"bytes,3,opt,name=new_leader_id,json=newLeaderId,proto3" json:"new_leader_id,omitempty"`
	NewLeaderName string `protobuf:"bytes,4,opt,name=new_leader_name,json=newLeaderName,proto3" json:"new_leader_name,omitempty"`
}

func (m *ImpeachProto) Reset()                    { *m = ImpeachProto{} }
func (m *ImpeachProto) String() string            { return proto.CompactTextString(m) }
func (*ImpeachProto) ProtoMessage()               {}
func (*ImpeachProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{23} }

func (m *ImpeachProto) GetOldLeaderId() []byte {
	if m != nil {
		return m.OldLeaderId
	}
	return nil
}

func (m *ImpeachProto) GetOldLeaderName() string {
	if m != nil {
		return m.OldLeaderName
	}
	return ""
}

func (m *ImpeachProto) GetNewLeaderId() []byte {
	if m != nil {
		return m.NewLeaderId
	}
	return nil
}

func (m *ImpeachProto) GetNewLeaderName() string {
	if m != nil {
		return m.NewLeaderName
	}
	return ""
}

// 联盟禅让事件
type DemiseProto struct {
	OldLeaderId   []byte `protobuf:"bytes,1,opt,name=old_leader_id,json=oldLeaderId,proto3" json:"old_leader_id,omitempty"`
	OldLeaderName string `protobuf:"bytes,2,opt,name=old_leader_name,json=oldLeaderName,proto3" json:"old_leader_name,omitempty"`
	NewLeaderId   []byte `protobuf:"bytes,3,opt,name=new_leader_id,json=newLeaderId,proto3" json:"new_leader_id,omitempty"`
	NewLeaderName string `protobuf:"bytes,4,opt,name=new_leader_name,json=newLeaderName,proto3" json:"new_leader_name,omitempty"`
}

func (m *DemiseProto) Reset()                    { *m = DemiseProto{} }
func (m *DemiseProto) String() string            { return proto.CompactTextString(m) }
func (*DemiseProto) ProtoMessage()               {}
func (*DemiseProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{24} }

func (m *DemiseProto) GetOldLeaderId() []byte {
	if m != nil {
		return m.OldLeaderId
	}
	return nil
}

func (m *DemiseProto) GetOldLeaderName() string {
	if m != nil {
		return m.OldLeaderName
	}
	return ""
}

func (m *DemiseProto) GetNewLeaderId() []byte {
	if m != nil {
		return m.NewLeaderId
	}
	return nil
}

func (m *DemiseProto) GetNewLeaderName() string {
	if m != nil {
		return m.NewLeaderName
	}
	return ""
}

// 联盟动态
type GuildDynamicProto struct {
	Time int32            `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Type GuildDynamicType `protobuf:"varint,2,opt,name=type,proto3,enum=proto.GuildDynamicType" json:"type,omitempty"`
	// 攻击，里面的进攻方是本盟的
	Attack *FightProto `protobuf:"bytes,10,opt,name=attack" json:"attack,omitempty"`
	// 被攻击，里面的被进攻方是本盟的
	BeenAttack *FightProto `protobuf:"bytes,11,opt,name=been_attack,json=beenAttack" json:"been_attack,omitempty"`
	// 加入了
	Join *JoinProto `protobuf:"bytes,12,opt,name=join" json:"join,omitempty"`
}

func (m *GuildDynamicProto) Reset()                    { *m = GuildDynamicProto{} }
func (m *GuildDynamicProto) String() string            { return proto.CompactTextString(m) }
func (*GuildDynamicProto) ProtoMessage()               {}
func (*GuildDynamicProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{25} }

func (m *GuildDynamicProto) GetTime() int32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *GuildDynamicProto) GetType() GuildDynamicType {
	if m != nil {
		return m.Type
	}
	return GuildDynamicType_Attack
}

func (m *GuildDynamicProto) GetAttack() *FightProto {
	if m != nil {
		return m.Attack
	}
	return nil
}

func (m *GuildDynamicProto) GetBeenAttack() *FightProto {
	if m != nil {
		return m.BeenAttack
	}
	return nil
}

func (m *GuildDynamicProto) GetJoin() *JoinProto {
	if m != nil {
		return m.Join
	}
	return nil
}

// 战斗记录
type FightProto struct {
	// 攻击方id
	AttackerId []byte `protobuf:"bytes,1,opt,name=attacker_id,json=attackerId,proto3" json:"attacker_id,omitempty"`
	// 攻击方名字
	AttackerName string `protobuf:"bytes,2,opt,name=attacker_name,json=attackerName,proto3" json:"attacker_name,omitempty"`
	// 攻击方头像 通过 config.Icons去获得图标
	AttackerHead string `protobuf:"bytes,5,opt,name=attacker_head,json=attackerHead,proto3" json:"attacker_head,omitempty"`
	// 被攻击方id
	BeenAttackerId []byte `protobuf:"bytes,3,opt,name=been_attacker_id,json=beenAttackerId,proto3" json:"been_attacker_id,omitempty"`
	// 被攻击方名字
	BeenAttackerName string `protobuf:"bytes,4,opt,name=been_attacker_name,json=beenAttackerName,proto3" json:"been_attacker_name,omitempty"`
	// 被攻击方头像 通过 config.Icons去获得图标
	BeenAttackerHead string `protobuf:"bytes,6,opt,name=been_attacker_head,json=beenAttackerHead,proto3" json:"been_attacker_head,omitempty"`
}

func (m *FightProto) Reset()                    { *m = FightProto{} }
func (m *FightProto) String() string            { return proto.CompactTextString(m) }
func (*FightProto) ProtoMessage()               {}
func (*FightProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{26} }

func (m *FightProto) GetAttackerId() []byte {
	if m != nil {
		return m.AttackerId
	}
	return nil
}

func (m *FightProto) GetAttackerName() string {
	if m != nil {
		return m.AttackerName
	}
	return ""
}

func (m *FightProto) GetAttackerHead() string {
	if m != nil {
		return m.AttackerHead
	}
	return ""
}

func (m *FightProto) GetBeenAttackerId() []byte {
	if m != nil {
		return m.BeenAttackerId
	}
	return nil
}

func (m *FightProto) GetBeenAttackerName() string {
	if m != nil {
		return m.BeenAttackerName
	}
	return ""
}

func (m *FightProto) GetBeenAttackerHead() string {
	if m != nil {
		return m.BeenAttackerHead
	}
	return ""
}

// 加入了联盟
type JoinProto struct {
	// id
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 名字
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 头像 通过 config.Icons去获得图标
	Head string `protobuf:"bytes,5,opt,name=head,proto3" json:"head,omitempty"`
}

func (m *JoinProto) Reset()                    { *m = JoinProto{} }
func (m *JoinProto) String() string            { return proto.CompactTextString(m) }
func (*JoinProto) ProtoMessage()               {}
func (*JoinProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{27} }

func (m *JoinProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *JoinProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *JoinProto) GetHead() string {
	if m != nil {
		return m.Head
	}
	return ""
}

// 联盟求助
type GuildSeekHelpProto struct {
	Id                    string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	HeroId                []byte   `protobuf:"bytes,11,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
	HeroName              string   `protobuf:"bytes,12,opt,name=hero_name,json=heroName,proto3" json:"hero_name,omitempty"`
	HeroHead              string   `protobuf:"bytes,13,opt,name=hero_head,json=heroHead,proto3" json:"hero_head,omitempty"`
	HelpType              int32    `protobuf:"varint,3,opt,name=help_type,json=helpType,proto3" json:"help_type,omitempty"`
	WorkerPos             int32    `protobuf:"varint,4,opt,name=worker_pos,json=workerPos,proto3" json:"worker_pos,omitempty"`
	HelpHeroIds           [][]byte `protobuf:"bytes,5,rep,name=help_hero_ids,json=helpHeroIds" json:"help_hero_ids,omitempty"`
	ReduceSecondsPerCount int32    `protobuf:"varint,6,opt,name=reduce_seconds_per_count,json=reduceSecondsPerCount,proto3" json:"reduce_seconds_per_count,omitempty"`
	HelpMaxHeroCount      int32    `protobuf:"varint,7,opt,name=help_max_hero_count,json=helpMaxHeroCount,proto3" json:"help_max_hero_count,omitempty"`
}

func (m *GuildSeekHelpProto) Reset()                    { *m = GuildSeekHelpProto{} }
func (m *GuildSeekHelpProto) String() string            { return proto.CompactTextString(m) }
func (*GuildSeekHelpProto) ProtoMessage()               {}
func (*GuildSeekHelpProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{28} }

func (m *GuildSeekHelpProto) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GuildSeekHelpProto) GetHeroId() []byte {
	if m != nil {
		return m.HeroId
	}
	return nil
}

func (m *GuildSeekHelpProto) GetHeroName() string {
	if m != nil {
		return m.HeroName
	}
	return ""
}

func (m *GuildSeekHelpProto) GetHeroHead() string {
	if m != nil {
		return m.HeroHead
	}
	return ""
}

func (m *GuildSeekHelpProto) GetHelpType() int32 {
	if m != nil {
		return m.HelpType
	}
	return 0
}

func (m *GuildSeekHelpProto) GetWorkerPos() int32 {
	if m != nil {
		return m.WorkerPos
	}
	return 0
}

func (m *GuildSeekHelpProto) GetHelpHeroIds() [][]byte {
	if m != nil {
		return m.HelpHeroIds
	}
	return nil
}

func (m *GuildSeekHelpProto) GetReduceSecondsPerCount() int32 {
	if m != nil {
		return m.ReduceSecondsPerCount
	}
	return 0
}

func (m *GuildSeekHelpProto) GetHelpMaxHeroCount() int32 {
	if m != nil {
		return m.HelpMaxHeroCount
	}
	return 0
}

type GuildLogProto struct {
	Id     int32        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Icon   string       `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`
	Time   int32        `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	Text   string       `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	Type   GuildLogType `protobuf:"varint,5,opt,name=type,proto3,enum=proto.GuildLogType" json:"type,omitempty"`
	DataId string       `protobuf:"bytes,6,opt,name=data_id,json=dataId,proto3" json:"data_id,omitempty"`
	HeroId []byte       `protobuf:"bytes,11,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
	FightX int32        `protobuf:"varint,12,opt,name=fight_x,json=fightX,proto3" json:"fight_x,omitempty"`
	FightY int32        `protobuf:"varint,13,opt,name=fight_y,json=fightY,proto3" json:"fight_y,omitempty"`
}

func (m *GuildLogProto) Reset()                    { *m = GuildLogProto{} }
func (m *GuildLogProto) String() string            { return proto.CompactTextString(m) }
func (*GuildLogProto) ProtoMessage()               {}
func (*GuildLogProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{29} }

func (m *GuildLogProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GuildLogProto) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *GuildLogProto) GetTime() int32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *GuildLogProto) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *GuildLogProto) GetType() GuildLogType {
	if m != nil {
		return m.Type
	}
	return GuildLogType_GLTInvalidType
}

func (m *GuildLogProto) GetDataId() string {
	if m != nil {
		return m.DataId
	}
	return ""
}

func (m *GuildLogProto) GetHeroId() []byte {
	if m != nil {
		return m.HeroId
	}
	return nil
}

func (m *GuildLogProto) GetFightX() int32 {
	if m != nil {
		return m.FightX
	}
	return 0
}

func (m *GuildLogProto) GetFightY() int32 {
	if m != nil {
		return m.FightY
	}
	return 0
}

type GuildPermissionShowProto struct {
	PermType   GuildPermissionType `protobuf:"varint,1,opt,name=perm_type,json=permType,proto3,enum=proto.GuildPermissionType" json:"perm_type,omitempty"`
	Name       string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ClassLevel []int32             `protobuf:"varint,3,rep,name=class_level,json=classLevel" json:"class_level,omitempty"`
	IsShow     bool                `protobuf:"varint,4,opt,name=is_show,json=isShow,proto3" json:"is_show,omitempty"`
}

func (m *GuildPermissionShowProto) Reset()                    { *m = GuildPermissionShowProto{} }
func (m *GuildPermissionShowProto) String() string            { return proto.CompactTextString(m) }
func (*GuildPermissionShowProto) ProtoMessage()               {}
func (*GuildPermissionShowProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{30} }

func (m *GuildPermissionShowProto) GetPermType() GuildPermissionType {
	if m != nil {
		return m.PermType
	}
	return GuildPermissionType_PermInvalidType
}

func (m *GuildPermissionShowProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GuildPermissionShowProto) GetClassLevel() []int32 {
	if m != nil {
		return m.ClassLevel
	}
	return nil
}

func (m *GuildPermissionShowProto) GetIsShow() bool {
	if m != nil {
		return m.IsShow
	}
	return false
}

// 推荐入盟玩家列表
type GuildRecommendInviteHeros struct {
	Hero []*HeroBasicSnapshotProto `protobuf:"bytes,1,rep,name=hero" json:"hero,omitempty"`
}

func (m *GuildRecommendInviteHeros) Reset()                    { *m = GuildRecommendInviteHeros{} }
func (m *GuildRecommendInviteHeros) String() string            { return proto.CompactTextString(m) }
func (*GuildRecommendInviteHeros) ProtoMessage()               {}
func (*GuildRecommendInviteHeros) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{31} }

func (m *GuildRecommendInviteHeros) GetHero() []*HeroBasicSnapshotProto {
	if m != nil {
		return m.Hero
	}
	return nil
}

type GuildMarkProto struct {
	Index int32  `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	PosX  int32  `protobuf:"varint,2,opt,name=pos_x,json=posX,proto3" json:"pos_x,omitempty"`
	PosY  int32  `protobuf:"varint,3,opt,name=pos_y,json=posY,proto3" json:"pos_y,omitempty"`
	Msg   string `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *GuildMarkProto) Reset()                    { *m = GuildMarkProto{} }
func (m *GuildMarkProto) String() string            { return proto.CompactTextString(m) }
func (*GuildMarkProto) ProtoMessage()               {}
func (*GuildMarkProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{32} }

func (m *GuildMarkProto) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *GuildMarkProto) GetPosX() int32 {
	if m != nil {
		return m.PosX
	}
	return 0
}

func (m *GuildMarkProto) GetPosY() int32 {
	if m != nil {
		return m.PosY
	}
	return 0
}

func (m *GuildMarkProto) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

// 单条名城战历史战绩
type McWarRecordProto struct {
	WarId       int32            `protobuf:"varint,9,opt,name=war_id,json=warId,proto3" json:"war_id,omitempty"`
	Time        int32            `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Atk         *GuildBasicProto `protobuf:"bytes,2,opt,name=atk" json:"atk,omitempty"`
	Def         *GuildBasicProto `protobuf:"bytes,3,opt,name=def" json:"def,omitempty"`
	Type        McWarActionType  `protobuf:"varint,4,opt,name=type,proto3,enum=proto.McWarActionType" json:"type,omitempty"`
	AtkWin      bool             `protobuf:"varint,5,opt,name=atk_win,json=atkWin,proto3" json:"atk_win,omitempty"`
	AtkYinliang int32            `protobuf:"varint,6,opt,name=atk_yinliang,json=atkYinliang,proto3" json:"atk_yinliang,omitempty"`
	McId        int32            `protobuf:"varint,7,opt,name=mc_id,json=mcId,proto3" json:"mc_id,omitempty"`
	McCountryId int32            `protobuf:"varint,8,opt,name=mc_country_id,json=mcCountryId,proto3" json:"mc_country_id,omitempty"`
}

func (m *McWarRecordProto) Reset()                    { *m = McWarRecordProto{} }
func (m *McWarRecordProto) String() string            { return proto.CompactTextString(m) }
func (*McWarRecordProto) ProtoMessage()               {}
func (*McWarRecordProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{33} }

func (m *McWarRecordProto) GetWarId() int32 {
	if m != nil {
		return m.WarId
	}
	return 0
}

func (m *McWarRecordProto) GetTime() int32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *McWarRecordProto) GetAtk() *GuildBasicProto {
	if m != nil {
		return m.Atk
	}
	return nil
}

func (m *McWarRecordProto) GetDef() *GuildBasicProto {
	if m != nil {
		return m.Def
	}
	return nil
}

func (m *McWarRecordProto) GetType() McWarActionType {
	if m != nil {
		return m.Type
	}
	return McWarActionType_MC_WAR_A_INVALID
}

func (m *McWarRecordProto) GetAtkWin() bool {
	if m != nil {
		return m.AtkWin
	}
	return false
}

func (m *McWarRecordProto) GetAtkYinliang() int32 {
	if m != nil {
		return m.AtkYinliang
	}
	return 0
}

func (m *McWarRecordProto) GetMcId() int32 {
	if m != nil {
		return m.McId
	}
	return 0
}

func (m *McWarRecordProto) GetMcCountryId() int32 {
	if m != nil {
		return m.McCountryId
	}
	return 0
}

// 名城战历史战绩列表，按时间正序排列
type McWarAllRecordProto struct {
	Record []*McWarRecordProto `protobuf:"bytes,1,rep,name=record" json:"record,omitempty"`
}

func (m *McWarAllRecordProto) Reset()                    { *m = McWarAllRecordProto{} }
func (m *McWarAllRecordProto) String() string            { return proto.CompactTextString(m) }
func (*McWarAllRecordProto) ProtoMessage()               {}
func (*McWarAllRecordProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{34} }

func (m *McWarAllRecordProto) GetRecord() []*McWarRecordProto {
	if m != nil {
		return m.Record
	}
	return nil
}

// 名城战历史战绩列表，按时间正序排列
type McWarAllRecordWithJoinedProto struct {
	Record   []*McWarRecordProto `protobuf:"bytes,1,rep,name=record" json:"record,omitempty"`
	IsJoined []bool              `protobuf:"varint,2,rep,name=is_joined,json=isJoined" json:"is_joined,omitempty"`
}

func (m *McWarAllRecordWithJoinedProto) Reset()         { *m = McWarAllRecordWithJoinedProto{} }
func (m *McWarAllRecordWithJoinedProto) String() string { return proto.CompactTextString(m) }
func (*McWarAllRecordWithJoinedProto) ProtoMessage()    {}
func (*McWarAllRecordWithJoinedProto) Descriptor() ([]byte, []int) {
	return fileDescriptorGuild, []int{35}
}

func (m *McWarAllRecordWithJoinedProto) GetRecord() []*McWarRecordProto {
	if m != nil {
		return m.Record
	}
	return nil
}

func (m *McWarAllRecordWithJoinedProto) GetIsJoined() []bool {
	if m != nil {
		return m.IsJoined
	}
	return nil
}

// 名城银两记录
type GuildAllYinliangRecordProto struct {
	Record []*GuildYinliangRecordProto `protobuf:"bytes,1,rep,name=record" json:"record,omitempty"`
}

func (m *GuildAllYinliangRecordProto) Reset()         { *m = GuildAllYinliangRecordProto{} }
func (m *GuildAllYinliangRecordProto) String() string { return proto.CompactTextString(m) }
func (*GuildAllYinliangRecordProto) ProtoMessage()    {}
func (*GuildAllYinliangRecordProto) Descriptor() ([]byte, []int) {
	return fileDescriptorGuild, []int{36}
}

func (m *GuildAllYinliangRecordProto) GetRecord() []*GuildYinliangRecordProto {
	if m != nil {
		return m.Record
	}
	return nil
}

// 名城银两记录
type GuildYinliangRecordProto struct {
	Time int32  `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Text string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (m *GuildYinliangRecordProto) Reset()                    { *m = GuildYinliangRecordProto{} }
func (m *GuildYinliangRecordProto) String() string            { return proto.CompactTextString(m) }
func (*GuildYinliangRecordProto) ProtoMessage()               {}
func (*GuildYinliangRecordProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{37} }

func (m *GuildYinliangRecordProto) GetTime() int32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *GuildYinliangRecordProto) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

// 银两赠送联盟记录
type GuildAllYinliangSendToGuildProto struct {
	Guilds []*GuildYinliangSendToGuildProto `protobuf:"bytes,1,rep,name=guilds" json:"guilds,omitempty"`
}

func (m *GuildAllYinliangSendToGuildProto) Reset()         { *m = GuildAllYinliangSendToGuildProto{} }
func (m *GuildAllYinliangSendToGuildProto) String() string { return proto.CompactTextString(m) }
func (*GuildAllYinliangSendToGuildProto) ProtoMessage()    {}
func (*GuildAllYinliangSendToGuildProto) Descriptor() ([]byte, []int) {
	return fileDescriptorGuild, []int{38}
}

func (m *GuildAllYinliangSendToGuildProto) GetGuilds() []*GuildYinliangSendToGuildProto {
	if m != nil {
		return m.Guilds
	}
	return nil
}

// 单条银两赠送联盟记录
type GuildYinliangSendToGuildProto struct {
	Send  *GuildYinliangSendProto `protobuf:"bytes,1,opt,name=send" json:"send,omitempty"`
	Guild *GuildBasicProto        `protobuf:"bytes,2,opt,name=guild" json:"guild,omitempty"`
}

func (m *GuildYinliangSendToGuildProto) Reset()         { *m = GuildYinliangSendToGuildProto{} }
func (m *GuildYinliangSendToGuildProto) String() string { return proto.CompactTextString(m) }
func (*GuildYinliangSendToGuildProto) ProtoMessage()    {}
func (*GuildYinliangSendToGuildProto) Descriptor() ([]byte, []int) {
	return fileDescriptorGuild, []int{39}
}

func (m *GuildYinliangSendToGuildProto) GetSend() *GuildYinliangSendProto {
	if m != nil {
		return m.Send
	}
	return nil
}

func (m *GuildYinliangSendToGuildProto) GetGuild() *GuildBasicProto {
	if m != nil {
		return m.Guild
	}
	return nil
}

// 具体赠送数据
type GuildYinliangSendProto struct {
	Time       int32 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Send       int32 `protobuf:"varint,2,opt,name=send,proto3" json:"send,omitempty"`
	WeeklySend int32 `protobuf:"varint,3,opt,name=weekly_send,json=weeklySend,proto3" json:"weekly_send,omitempty"`
	AllSend    int32 `protobuf:"varint,4,opt,name=all_send,json=allSend,proto3" json:"all_send,omitempty"`
}

func (m *GuildYinliangSendProto) Reset()                    { *m = GuildYinliangSendProto{} }
func (m *GuildYinliangSendProto) String() string            { return proto.CompactTextString(m) }
func (*GuildYinliangSendProto) ProtoMessage()               {}
func (*GuildYinliangSendProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{40} }

func (m *GuildYinliangSendProto) GetTime() int32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *GuildYinliangSendProto) GetSend() int32 {
	if m != nil {
		return m.Send
	}
	return 0
}

func (m *GuildYinliangSendProto) GetWeeklySend() int32 {
	if m != nil {
		return m.WeeklySend
	}
	return 0
}

func (m *GuildYinliangSendProto) GetAllSend() int32 {
	if m != nil {
		return m.AllSend
	}
	return 0
}

// 联盟任务评价
type GuildTaskEvaluateDataProto struct {
	Id       int32         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Complete int32         `protobuf:"varint,3,opt,name=complete,proto3" json:"complete,omitempty"`
	Prizes   []*PrizeProto `protobuf:"bytes,4,rep,name=prizes" json:"prizes,omitempty"`
}

func (m *GuildTaskEvaluateDataProto) Reset()                    { *m = GuildTaskEvaluateDataProto{} }
func (m *GuildTaskEvaluateDataProto) String() string            { return proto.CompactTextString(m) }
func (*GuildTaskEvaluateDataProto) ProtoMessage()               {}
func (*GuildTaskEvaluateDataProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{41} }

func (m *GuildTaskEvaluateDataProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GuildTaskEvaluateDataProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GuildTaskEvaluateDataProto) GetComplete() int32 {
	if m != nil {
		return m.Complete
	}
	return 0
}

func (m *GuildTaskEvaluateDataProto) GetPrizes() []*PrizeProto {
	if m != nil {
		return m.Prizes
	}
	return nil
}

// 联盟任务
type GuildTaskDataProto struct {
	Id     int32         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name   string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Desc   string        `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	Icon   string        `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
	Stages []int32       `protobuf:"varint,5,rep,name=stages" json:"stages,omitempty"`
	Prizes []*PrizeProto `protobuf:"bytes,6,rep,name=prizes" json:"prizes,omitempty"`
}

func (m *GuildTaskDataProto) Reset()                    { *m = GuildTaskDataProto{} }
func (m *GuildTaskDataProto) String() string            { return proto.CompactTextString(m) }
func (*GuildTaskDataProto) ProtoMessage()               {}
func (*GuildTaskDataProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{42} }

func (m *GuildTaskDataProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GuildTaskDataProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GuildTaskDataProto) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *GuildTaskDataProto) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *GuildTaskDataProto) GetStages() []int32 {
	if m != nil {
		return m.Stages
	}
	return nil
}

func (m *GuildTaskDataProto) GetPrizes() []*PrizeProto {
	if m != nil {
		return m.Prizes
	}
	return nil
}

func init() {
	proto.RegisterType((*GuildWorkshopLogProto)(nil), "proto.GuildWorkshopLogProto")
	proto.RegisterType((*GuildTechnologyDataProto)(nil), "proto.GuildTechnologyDataProto")
	proto.RegisterType((*GuildEventPrizeDataProto)(nil), "proto.GuildEventPrizeDataProto")
	proto.RegisterType((*GuildPrestigePrizeDataProto)(nil), "proto.GuildPrestigePrizeDataProto")
	proto.RegisterType((*GuildBigBoxDataProto)(nil), "proto.GuildBigBoxDataProto")
	proto.RegisterType((*GuildLevelCdrProto)(nil), "proto.GuildLevelCdrProto")
	proto.RegisterType((*GuildLevelProto)(nil), "proto.GuildLevelProto")
	proto.RegisterType((*GuildClassTitleDataProto)(nil), "proto.GuildClassTitleDataProto")
	proto.RegisterType((*GuildClassLevelProto)(nil), "proto.GuildClassLevelProto")
	proto.RegisterType((*GuildPermissionProto)(nil), "proto.GuildPermissionProto")
	proto.RegisterType((*GuildDonateProto)(nil), "proto.GuildDonateProto")
	proto.RegisterType((*GuildProto)(nil), "proto.GuildProto")
	proto.RegisterType((*GuildBasicProto)(nil), "proto.GuildBasicProto")
	proto.RegisterType((*GuildSnapshotProto)(nil), "proto.GuildSnapshotProto")
	proto.RegisterType((*GuildMemberProto)(nil), "proto.GuildMemberProto")
	proto.RegisterType((*GuildImpeachProto)(nil), "proto.GuildImpeachProto")
	proto.RegisterType((*GuildClassTitleProto)(nil), "proto.GuildClassTitleProto")
	proto.RegisterType((*HeroUpgradeClassLevelProto)(nil), "proto.HeroUpgradeClassLevelProto")
	proto.RegisterType((*GuildTargetProto)(nil), "proto.GuildTargetProto")
	proto.RegisterType((*GuildDonateRecordProto)(nil), "proto.GuildDonateRecordProto")
	proto.RegisterType((*GuildBigEventProto)(nil), "proto.GuildBigEventProto")
	proto.RegisterType((*StatueProto)(nil), "proto.StatueProto")
	proto.RegisterType((*LevelUpProto)(nil), "proto.LevelUpProto")
	proto.RegisterType((*ImpeachProto)(nil), "proto.ImpeachProto")
	proto.RegisterType((*DemiseProto)(nil), "proto.DemiseProto")
	proto.RegisterType((*GuildDynamicProto)(nil), "proto.GuildDynamicProto")
	proto.RegisterType((*FightProto)(nil), "proto.FightProto")
	proto.RegisterType((*JoinProto)(nil), "proto.JoinProto")
	proto.RegisterType((*GuildSeekHelpProto)(nil), "proto.GuildSeekHelpProto")
	proto.RegisterType((*GuildLogProto)(nil), "proto.GuildLogProto")
	proto.RegisterType((*GuildPermissionShowProto)(nil), "proto.GuildPermissionShowProto")
	proto.RegisterType((*GuildRecommendInviteHeros)(nil), "proto.GuildRecommendInviteHeros")
	proto.RegisterType((*GuildMarkProto)(nil), "proto.GuildMarkProto")
	proto.RegisterType((*McWarRecordProto)(nil), "proto.McWarRecordProto")
	proto.RegisterType((*McWarAllRecordProto)(nil), "proto.McWarAllRecordProto")
	proto.RegisterType((*McWarAllRecordWithJoinedProto)(nil), "proto.McWarAllRecordWithJoinedProto")
	proto.RegisterType((*GuildAllYinliangRecordProto)(nil), "proto.GuildAllYinliangRecordProto")
	proto.RegisterType((*GuildYinliangRecordProto)(nil), "proto.GuildYinliangRecordProto")
	proto.RegisterType((*GuildAllYinliangSendToGuildProto)(nil), "proto.GuildAllYinliangSendToGuildProto")
	proto.RegisterType((*GuildYinliangSendToGuildProto)(nil), "proto.GuildYinliangSendToGuildProto")
	proto.RegisterType((*GuildYinliangSendProto)(nil), "proto.GuildYinliangSendProto")
	proto.RegisterType((*GuildTaskEvaluateDataProto)(nil), "proto.GuildTaskEvaluateDataProto")
	proto.RegisterType((*GuildTaskDataProto)(nil), "proto.GuildTaskDataProto")
	proto.RegisterEnum("proto.GuildTargetType", GuildTargetType_name, GuildTargetType_value)
	proto.RegisterEnum("proto.GuildBigEventType", GuildBigEventType_name, GuildBigEventType_value)
	proto.RegisterEnum("proto.GuildDynamicType", GuildDynamicType_name, GuildDynamicType_value)
	proto.RegisterEnum("proto.GuildEventPrizeType", GuildEventPrizeType_name, GuildEventPrizeType_value)
	proto.RegisterEnum("proto.GuildLogType", GuildLogType_name, GuildLogType_value)
	proto.RegisterEnum("proto.GuildPermissionType", GuildPermissionType_name, GuildPermissionType_value)
	proto.RegisterEnum("proto.McWarActionType", McWarActionType_name, McWarActionType_value)
}
func (m *GuildWorkshopLogProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildWorkshopLogProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Time))
	}
	if len(m.Text) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	return i, nil
}

func (m *GuildTechnologyDataProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildTechnologyDataProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Desc) > 0 {
		for _, s := range m.Desc {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Icon) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Icon)))
		i += copy(dAtA[i:], m.Icon)
	}
	if m.Group != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Group))
	}
	if m.Level != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Level))
	}
	if m.RequireGuildLevel != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.RequireGuildLevel))
	}
	if m.UpgradeBuilding != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.UpgradeBuilding))
	}
	if m.UpgradeDuration != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.UpgradeDuration))
	}
	if len(m.Cdrs) > 0 {
		for _, msg := range m.Cdrs {
			dAtA[i] = 0x52
			i++
			i = encodeVarintGuild(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Effect != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Effect.Size()))
		n1, err := m.Effect.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.BigBox != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.BigBox))
	}
	if m.HelpCdr != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.HelpCdr))
	}
	return i, nil
}

func (m *GuildEventPrizeDataProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildEventPrizeDataProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Desc) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Desc)))
		i += copy(dAtA[i:], m.Desc)
	}
	if m.Quality != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Quality))
	}
	if len(m.IconId) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.IconId)))
		i += copy(dAtA[i:], m.IconId)
	}
	if m.Prize != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Prize.Size()))
		n2, err := m.Prize.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Energy != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Energy))
	}
	if m.FromShop {
		dAtA[i] = 0x40
		i++
		if m.FromShop {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.GuildLevelPrizes) > 0 {
		for _, msg := range m.GuildLevelPrizes {
			dAtA[i] = 0x5a
			i++
			i = encodeVarintGuild(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GuildPrestigePrizeDataProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildPrestigePrizeDataProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Prestige != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Prestige))
	}
	if m.EventPrize != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.EventPrize))
	}
	if m.BuildingAmount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.BuildingAmount))
	}
	if m.Hufu != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Hufu))
	}
	return i, nil
}

func (m *GuildBigBoxDataProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildBigBoxDataProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Id))
	}
	if m.Prize != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Prize.Size()))
		n3, err := m.Prize.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.UnlockEnergy != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.UnlockEnergy))
	}
	if len(m.GuildLevelPrizes) > 0 {
		for _, msg := range m.GuildLevelPrizes {
			dAtA[i] = 0x5a
			i++
			i = encodeVarintGuild(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.TechLevel != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.TechLevel))
	}
	return i, nil
}

func (m *GuildLevelCdrProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildLevelCdrProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Times != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Times))
	}
	if m.Cost != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Cost))
	}
	if m.Cdr != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Cdr))
	}
	return i, nil
}

func (m *GuildLevelProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildLevelProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Level != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Level))
	}
	if m.MemberCount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.MemberCount))
	}
	if len(m.ClassMemberCount) > 0 {
		for _, num := range m.ClassMemberCount {
			dAtA[i] = 0x18
			i++
			i = encodeVarintGuild(dAtA, i, uint64(num))
		}
	}
	if m.UpgradeBuilding != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.UpgradeBuilding))
	}
	if m.UpgradeDuration != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.UpgradeDuration))
	}
	if len(m.Cdrs) > 0 {
		for _, msg := range m.Cdrs {
			dAtA[i] = 0x32
			i++
			i = encodeVarintGuild(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GuildClassTitleDataProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildClassTitleDataProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Permission != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Permission.Size()))
		n4, err := m.Permission.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *GuildClassLevelProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildClassLevelProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Level != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Level))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Count != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Count))
	}
	if m.Permission != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Permission.Size()))
		n5, err := m.Permission.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.VoteScore != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.VoteScore))
	}
	return i, nil
}

func (m *GuildPermissionProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildPermissionProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.InvateOther {
		dAtA[i] = 0x20
		i++
		if m.InvateOther {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.AgreeJoin {
		dAtA[i] = 0x28
		i++
		if m.AgreeJoin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.UpdateText {
		dAtA[i] = 0x30
		i++
		if m.UpdateText {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.UpdateClassName {
		dAtA[i] = 0x38
		i++
		if m.UpdateClassName {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.UpdateFlagType {
		dAtA[i] = 0x40
		i++
		if m.UpdateFlagType {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.UpdateLowerMemberClassLevel {
		dAtA[i] = 0x48
		i++
		if m.UpdateLowerMemberClassLevel {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.KickLowerMember {
		dAtA[i] = 0x50
		i++
		if m.KickLowerMember {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.UpdateInternalText {
		dAtA[i] = 0x58
		i++
		if m.UpdateInternalText {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.UpdateJoinCondition {
		dAtA[i] = 0x60
		i++
		if m.UpdateJoinCondition {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.UpdateLabel {
		dAtA[i] = 0x68
		i++
		if m.UpdateLabel {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.UpdateClassTitle {
		dAtA[i] = 0x70
		i++
		if m.UpdateClassTitle {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ImpeachNpcLeader {
		dAtA[i] = 0x78
		i++
		if m.ImpeachNpcLeader {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.UpgradeLevel {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		if m.UpgradeLevel {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.UpgradeBuilding {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		if m.UpgradeBuilding {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.UpgradeTechnology {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		if m.UpgradeTechnology {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.UpgradeLevelCdr {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		if m.UpgradeLevelCdr {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.UpdateFriendGuild {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		if m.UpdateFriendGuild {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.UpdateEnemyGuild {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		if m.UpdateEnemyGuild {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.UpdatePrestigeTarget {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		if m.UpdatePrestigeTarget {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.OpenResistXiongNu {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		if m.OpenResistXiongNu {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SendToAllMembers {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x1
		i++
		if m.SendToAllMembers {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.UpgradeTechnologyCdr {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x1
		i++
		if m.UpgradeTechnologyCdr {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.UpdateName {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x1
		i++
		if m.UpdateName {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.UpdateFlagName {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		if m.UpdateFlagName {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.LeaveGuild {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x1
		i++
		if m.LeaveGuild {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DismissGuild {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x2
		i++
		if m.DismissGuild {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ChangeLeader {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x2
		i++
		if m.ChangeLeader {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.UpdateMark {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x2
		i++
		if m.UpdateMark {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ChangeYinliang {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x2
		i++
		if m.ChangeYinliang {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ConveneMember {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x2
		i++
		if m.ConveneMember {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.GetOnlineInfo {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x2
		i++
		if m.GetOnlineInfo {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Workshop {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x2
		i++
		if m.Workshop {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.RecommendMcBuild {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x2
		i++
		if m.RecommendMcBuild {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GuildDonateProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildDonateProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sequence != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Sequence))
	}
	if m.Times != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Times))
	}
	if m.Cost != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Cost.Size()))
		n6, err := m.Cost.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.GuildBuildingAmount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.GuildBuildingAmount))
	}
	if m.ContributionAmount != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.ContributionAmount))
	}
	if m.DonationAmount != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.DonationAmount))
	}
	if m.ContributionCoin != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.ContributionCoin))
	}
	if m.RecommandGuanfuLevel != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.RecommandGuanfuLevel))
	}
	return i, nil
}

func (m *GuildProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.FlagName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.FlagName)))
		i += copy(dAtA[i:], m.FlagName)
	}
	if m.FlagType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.FlagType))
	}
	if m.Level != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Level))
	}
	if m.MemberCount != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.MemberCount))
	}
	if m.Leader != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Leader.Size()))
		n7, err := m.Leader.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if len(m.Text) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	if len(m.InternalText) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.InternalText)))
		i += copy(dAtA[i:], m.InternalText)
	}
	if len(m.Labels) > 0 {
		for _, s := range m.Labels {
			dAtA[i] = 0x52
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.RejectAutoJoin {
		dAtA[i] = 0x58
		i++
		if m.RejectAutoJoin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.RequiredHeroLevel != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.RequiredHeroLevel))
	}
	if m.RequiredJunXianLevel != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.RequiredJunXianLevel))
	}
	if m.RequiredTowerMaxFloor != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.RequiredTowerMaxFloor))
	}
	if len(m.ClassNames) > 0 {
		for _, s := range m.ClassNames {
			dAtA[i] = 0xaa
			i++
			dAtA[i] = 0x1
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Members) > 0 {
		for _, msg := range m.Members {
			dAtA[i] = 0xb2
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintGuild(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ChangeLeaderId) > 0 {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.ChangeLeaderId)))
		i += copy(dAtA[i:], m.ChangeLeaderId)
	}
	if m.ChangeLeaderTime != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.ChangeLeaderTime))
	}
	if m.NextChangeNameTime != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.NextChangeNameTime))
	}
	if m.ImpeachLeader != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.ImpeachLeader.Size()))
		n8, err := m.ImpeachLeader.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if len(m.InvateHero) > 0 {
		for _, msg := range m.InvateHero {
			dAtA[i] = 0xda
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintGuild(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RequestJoinHero) > 0 {
		for _, msg := range m.RequestJoinHero {
			dAtA[i] = 0xea
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintGuild(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.FreeChangeName {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x1
		i++
		if m.FreeChangeName {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.KickMemberCount != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.KickMemberCount))
	}
	if m.ClassTitle != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.ClassTitle.Size()))
		n9, err := m.ClassTitle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.PrestigeTarget != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.PrestigeTarget))
	}
	if m.Prestige != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Prestige))
	}
	if m.HistoryMaxPrestige != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.HistoryMaxPrestige))
	}
	if m.BuildingAmount != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.BuildingAmount))
	}
	if m.UpgradeEndTime != 0 {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.UpgradeEndTime))
	}
	if m.CdrTimes != 0 {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.CdrTimes))
	}
	if m.Hufu != 0 {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Hufu))
	}
	if m.Yinliang != 0 {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Yinliang))
	}
	if len(m.FriendGuildText) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.FriendGuildText)))
		i += copy(dAtA[i:], m.FriendGuildText)
	}
	if len(m.EnemyGuildText) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.EnemyGuildText)))
		i += copy(dAtA[i:], m.EnemyGuildText)
	}
	if len(m.DonateRecords) > 0 {
		for _, msg := range m.DonateRecords {
			dAtA[i] = 0xba
			i++
			dAtA[i] = 0x3
			i++
			i = encodeVarintGuild(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.BigEvents) > 0 {
		for _, msg := range m.BigEvents {
			dAtA[i] = 0xc2
			i++
			dAtA[i] = 0x3
			i++
			i = encodeVarintGuild(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Dynamics) > 0 {
		for _, msg := range m.Dynamics {
			dAtA[i] = 0xca
			i++
			dAtA[i] = 0x3
			i++
			i = encodeVarintGuild(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.RankByCountry != 0 {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.RankByCountry))
	}
	if m.Rank != 0 {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Rank))
	}
	if m.BigBoxId != 0 {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.BigBoxId))
	}
	if m.BigBoxEnergy != 0 {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.BigBoxEnergy))
	}
	if len(m.Technologys) > 0 {
		for _, num := range m.Technologys {
			dAtA[i] = 0xf0
			i++
			dAtA[i] = 0x3
			i++
			i = encodeVarintGuild(dAtA, i, uint64(num))
		}
	}
	if m.TechUpgradeEndTime != 0 {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.TechUpgradeEndTime))
	}
	if m.TechCdrTimes != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.TechCdrTimes))
	}
	if m.UpgradeTechnology != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.UpgradeTechnology))
	}
	if len(m.GuildTargetId) > 0 {
		for _, num := range m.GuildTargetId {
			dAtA[i] = 0x90
			i++
			dAtA[i] = 0x4
			i++
			i = encodeVarintGuild(dAtA, i, uint64(num))
		}
	}
	if len(m.GuildTargetEndTime) > 0 {
		for _, num := range m.GuildTargetEndTime {
			dAtA[i] = 0x98
			i++
			dAtA[i] = 0x4
			i++
			i = encodeVarintGuild(dAtA, i, uint64(num))
		}
	}
	if m.NextUpdatePrestigeTargetTime != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.NextUpdatePrestigeTargetTime))
	}
	if m.IsStartResistXiongNuToday {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x4
		i++
		if m.IsStartResistXiongNuToday {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.UnlockResistXiongNuLevel != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.UnlockResistXiongNuLevel))
	}
	if m.HasLastResistXiongNu {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x4
		i++
		if m.HasLastResistXiongNu {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.LastResistXiongNu != nil {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.LastResistXiongNu.Size()))
		n10, err := m.LastResistXiongNu.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if len(m.ResistXiongNuDefenders) > 0 {
		for _, b := range m.ResistXiongNuDefenders {
			dAtA[i] = 0xd2
			i++
			dAtA[i] = 0x4
			i++
			i = encodeVarintGuild(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.GuildTargetStartTime) > 0 {
		for _, num := range m.GuildTargetStartTime {
			dAtA[i] = 0xd8
			i++
			dAtA[i] = 0x4
			i++
			i = encodeVarintGuild(dAtA, i, uint64(num))
		}
	}
	if m.MingcHostCount != 0 {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.MingcHostCount))
	}
	if m.WorkshopX != 0 {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.WorkshopX))
	}
	if m.WorkshopY != 0 {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.WorkshopY))
	}
	if len(m.RecommendMcBuilds) > 0 {
		for _, num := range m.RecommendMcBuilds {
			dAtA[i] = 0xf8
			i++
			dAtA[i] = 0x4
			i++
			i = encodeVarintGuild(dAtA, i, uint64(num))
		}
	}
	if len(m.DailyMcBuildId) > 0 {
		for _, num := range m.DailyMcBuildId {
			dAtA[i] = 0x80
			i++
			dAtA[i] = 0x5
			i++
			i = encodeVarintGuild(dAtA, i, uint64(num))
		}
	}
	if len(m.DailyMcBuildCount) > 0 {
		for _, num := range m.DailyMcBuildCount {
			dAtA[i] = 0x88
			i++
			dAtA[i] = 0x5
			i++
			i = encodeVarintGuild(dAtA, i, uint64(num))
		}
	}
	if m.ChangeCountryWaitEndTime != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.ChangeCountryWaitEndTime))
	}
	if m.ChangeCountryTarget != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.ChangeCountryTarget))
	}
	if m.ChangeCountryNextTime != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.ChangeCountryNextTime))
	}
	return i, nil
}

func (m *GuildBasicProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildBasicProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.FlagName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.FlagName)))
		i += copy(dAtA[i:], m.FlagName)
	}
	if m.Level != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Level))
	}
	if m.Country != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Country))
	}
	return i, nil
}

func (m *GuildSnapshotProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildSnapshotProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.FlagName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.FlagName)))
		i += copy(dAtA[i:], m.FlagName)
	}
	if m.FlagType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.FlagType))
	}
	if m.Level != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Level))
	}
	if m.MemberCount != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.MemberCount))
	}
	if m.Leader != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Leader.Size()))
		n11, err := m.Leader.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if len(m.Text) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	if m.RejectAutoJoin {
		dAtA[i] = 0x58
		i++
		if m.RejectAutoJoin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.RequiredHeroLevel != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.RequiredHeroLevel))
	}
	if m.RequiredJunXianLevel != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.RequiredJunXianLevel))
	}
	if m.RequiredTowerMaxFloor != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.RequiredTowerMaxFloor))
	}
	if m.PrestigeTarget != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.PrestigeTarget))
	}
	if m.Prestige != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Prestige))
	}
	return i, nil
}

func (m *GuildMemberProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildMemberProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ClassLevel != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.ClassLevel))
	}
	if m.HufuAmount != 0 {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.HufuAmount))
	}
	if m.HufuTotalAmount != 0 {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.HufuTotalAmount))
	}
	if m.HufuAmount7 != 0 {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.HufuAmount7))
	}
	if m.ContributionAmount != 0 {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.ContributionAmount))
	}
	if m.ContributionTotalAmount != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.ContributionTotalAmount))
	}
	if m.ContributionAmount7 != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.ContributionAmount7))
	}
	if m.DonationAmount != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.DonationAmount))
	}
	if m.DonationTotalAmount != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.DonationTotalAmount))
	}
	if m.DonationAmount7 != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.DonationAmount7))
	}
	if m.DonationTotalYuanbao != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.DonationTotalYuanbao))
	}
	if m.CreateTime != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.CreateTime))
	}
	if m.Salary != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Salary))
	}
	if m.HistorySalary != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.HistorySalary))
	}
	if m.Hero != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Hero.Size()))
		n12, err := m.Hero.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.IsTodayJoinStart {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x6
		i++
		if m.IsTodayJoinStart {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GuildImpeachProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildImpeachProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ImpeachEndTime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.ImpeachEndTime))
	}
	if len(m.Candidates) > 0 {
		for _, b := range m.Candidates {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGuild(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.Points) > 0 {
		for _, num := range m.Points {
			dAtA[i] = 0x18
			i++
			i = encodeVarintGuild(dAtA, i, uint64(num))
		}
	}
	if len(m.VoteHeros) > 0 {
		for _, b := range m.VoteHeros {
			dAtA[i] = 0x22
			i++
			i = encodeVarintGuild(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.VoteTarget) > 0 {
		for _, b := range m.VoteTarget {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintGuild(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.ImpeachMemberId) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.ImpeachMemberId)))
		i += copy(dAtA[i:], m.ImpeachMemberId)
	}
	return i, nil
}

func (m *GuildClassTitleProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildClassTitleProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SystemClassTitleId) > 0 {
		for _, num := range m.SystemClassTitleId {
			dAtA[i] = 0x8
			i++
			i = encodeVarintGuild(dAtA, i, uint64(num))
		}
	}
	if len(m.SystemClassTitleMemberId) > 0 {
		for _, b := range m.SystemClassTitleMemberId {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGuild(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.CustomClassTitleName) > 0 {
		for _, s := range m.CustomClassTitleName {
			dAtA[i] = 0x5a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.CustomClassTitleMemberId) > 0 {
		for _, msg := range m.CustomClassTitleMemberId {
			dAtA[i] = 0x62
			i++
			i = encodeVarintGuild(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *HeroUpgradeClassLevelProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeroUpgradeClassLevelProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Level != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Level))
	}
	return i, nil
}

func (m *GuildTargetProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildTargetProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Desc) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Desc)))
		i += copy(dAtA[i:], m.Desc)
	}
	if m.TargetType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.TargetType))
	}
	if m.Target != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Target))
	}
	if len(m.Icon) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Icon)))
		i += copy(dAtA[i:], m.Icon)
	}
	if len(m.ButtonText) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.ButtonText)))
		i += copy(dAtA[i:], m.ButtonText)
	}
	return i, nil
}

func (m *GuildDonateRecordProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildDonateRecordProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Sequence != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Sequence))
	}
	if m.Times != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Times))
	}
	if m.DonateTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.DonateTime))
	}
	return i, nil
}

func (m *GuildBigEventProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildBigEventProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Time))
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Type))
	}
	if m.Statue != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Statue.Size()))
		n13, err := m.Statue.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.LevelUp != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.LevelUp.Size()))
		n14, err := m.LevelUp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.Impeach != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Impeach.Size()))
		n15, err := m.Impeach.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.Demise != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Demise.Size()))
		n16, err := m.Demise.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}

func (m *StatueProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatueProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.LeaderId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.LeaderId)))
		i += copy(dAtA[i:], m.LeaderId)
	}
	if len(m.LeaderName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.LeaderName)))
		i += copy(dAtA[i:], m.LeaderName)
	}
	if m.RegionLevel != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.RegionLevel))
	}
	if m.RegionId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.RegionId))
	}
	return i, nil
}

func (m *LevelUpProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LevelUpProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Level != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Level))
	}
	return i, nil
}

func (m *ImpeachProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImpeachProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OldLeaderId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.OldLeaderId)))
		i += copy(dAtA[i:], m.OldLeaderId)
	}
	if len(m.OldLeaderName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.OldLeaderName)))
		i += copy(dAtA[i:], m.OldLeaderName)
	}
	if len(m.NewLeaderId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.NewLeaderId)))
		i += copy(dAtA[i:], m.NewLeaderId)
	}
	if len(m.NewLeaderName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.NewLeaderName)))
		i += copy(dAtA[i:], m.NewLeaderName)
	}
	return i, nil
}

func (m *DemiseProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DemiseProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OldLeaderId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.OldLeaderId)))
		i += copy(dAtA[i:], m.OldLeaderId)
	}
	if len(m.OldLeaderName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.OldLeaderName)))
		i += copy(dAtA[i:], m.OldLeaderName)
	}
	if len(m.NewLeaderId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.NewLeaderId)))
		i += copy(dAtA[i:], m.NewLeaderId)
	}
	if len(m.NewLeaderName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.NewLeaderName)))
		i += copy(dAtA[i:], m.NewLeaderName)
	}
	return i, nil
}

func (m *GuildDynamicProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildDynamicProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Time))
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Type))
	}
	if m.Attack != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Attack.Size()))
		n17, err := m.Attack.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.BeenAttack != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.BeenAttack.Size()))
		n18, err := m.BeenAttack.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.Join != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Join.Size()))
		n19, err := m.Join.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}

func (m *FightProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FightProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AttackerId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.AttackerId)))
		i += copy(dAtA[i:], m.AttackerId)
	}
	if len(m.AttackerName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.AttackerName)))
		i += copy(dAtA[i:], m.AttackerName)
	}
	if len(m.BeenAttackerId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.BeenAttackerId)))
		i += copy(dAtA[i:], m.BeenAttackerId)
	}
	if len(m.BeenAttackerName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.BeenAttackerName)))
		i += copy(dAtA[i:], m.BeenAttackerName)
	}
	if len(m.AttackerHead) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.AttackerHead)))
		i += copy(dAtA[i:], m.AttackerHead)
	}
	if len(m.BeenAttackerHead) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.BeenAttackerHead)))
		i += copy(dAtA[i:], m.BeenAttackerHead)
	}
	return i, nil
}

func (m *JoinProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Head) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Head)))
		i += copy(dAtA[i:], m.Head)
	}
	return i, nil
}

func (m *GuildSeekHelpProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildSeekHelpProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.HelpType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.HelpType))
	}
	if m.WorkerPos != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.WorkerPos))
	}
	if len(m.HelpHeroIds) > 0 {
		for _, b := range m.HelpHeroIds {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintGuild(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.ReduceSecondsPerCount != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.ReduceSecondsPerCount))
	}
	if m.HelpMaxHeroCount != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.HelpMaxHeroCount))
	}
	if len(m.HeroId) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.HeroId)))
		i += copy(dAtA[i:], m.HeroId)
	}
	if len(m.HeroName) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.HeroName)))
		i += copy(dAtA[i:], m.HeroName)
	}
	if len(m.HeroHead) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.HeroHead)))
		i += copy(dAtA[i:], m.HeroHead)
	}
	return i, nil
}

func (m *GuildLogProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildLogProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Id))
	}
	if len(m.Icon) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Icon)))
		i += copy(dAtA[i:], m.Icon)
	}
	if m.Time != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Time))
	}
	if len(m.Text) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	if m.Type != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Type))
	}
	if len(m.DataId) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.DataId)))
		i += copy(dAtA[i:], m.DataId)
	}
	if len(m.HeroId) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.HeroId)))
		i += copy(dAtA[i:], m.HeroId)
	}
	if m.FightX != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.FightX))
	}
	if m.FightY != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.FightY))
	}
	return i, nil
}

func (m *GuildPermissionShowProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildPermissionShowProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PermType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.PermType))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.ClassLevel) > 0 {
		for _, num := range m.ClassLevel {
			dAtA[i] = 0x18
			i++
			i = encodeVarintGuild(dAtA, i, uint64(num))
		}
	}
	if m.IsShow {
		dAtA[i] = 0x20
		i++
		if m.IsShow {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GuildRecommendInviteHeros) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildRecommendInviteHeros) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Hero) > 0 {
		for _, msg := range m.Hero {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGuild(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GuildMarkProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildMarkProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Index))
	}
	if m.PosX != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.PosX))
	}
	if m.PosY != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.PosY))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	return i, nil
}

func (m *McWarRecordProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *McWarRecordProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Time))
	}
	if m.Atk != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Atk.Size()))
		n20, err := m.Atk.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if m.Def != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Def.Size()))
		n21, err := m.Def.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if m.Type != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Type))
	}
	if m.AtkWin {
		dAtA[i] = 0x28
		i++
		if m.AtkWin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.AtkYinliang != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.AtkYinliang))
	}
	if m.McId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.McId))
	}
	if m.McCountryId != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.McCountryId))
	}
	if m.WarId != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.WarId))
	}
	return i, nil
}

func (m *McWarAllRecordProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *McWarAllRecordProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Record) > 0 {
		for _, msg := range m.Record {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGuild(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *McWarAllRecordWithJoinedProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *McWarAllRecordWithJoinedProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Record) > 0 {
		for _, msg := range m.Record {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGuild(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.IsJoined) > 0 {
		for _, b := range m.IsJoined {
			dAtA[i] = 0x10
			i++
			if b {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i++
		}
	}
	return i, nil
}

func (m *GuildAllYinliangRecordProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildAllYinliangRecordProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Record) > 0 {
		for _, msg := range m.Record {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGuild(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GuildYinliangRecordProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildYinliangRecordProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Time))
	}
	if len(m.Text) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	return i, nil
}

func (m *GuildAllYinliangSendToGuildProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildAllYinliangSendToGuildProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Guilds) > 0 {
		for _, msg := range m.Guilds {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGuild(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GuildYinliangSendToGuildProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildYinliangSendToGuildProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Send != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Send.Size()))
		n22, err := m.Send.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	if m.Guild != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Guild.Size()))
		n23, err := m.Guild.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	return i, nil
}

func (m *GuildYinliangSendProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildYinliangSendProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Time))
	}
	if m.Send != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Send))
	}
	if m.WeeklySend != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.WeeklySend))
	}
	if m.AllSend != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.AllSend))
	}
	return i, nil
}

func (m *GuildTaskEvaluateDataProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildTaskEvaluateDataProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Complete != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Complete))
	}
	if len(m.Prizes) > 0 {
		for _, msg := range m.Prizes {
			dAtA[i] = 0x22
			i++
			i = encodeVarintGuild(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GuildTaskDataProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildTaskDataProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Desc) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Desc)))
		i += copy(dAtA[i:], m.Desc)
	}
	if len(m.Icon) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Icon)))
		i += copy(dAtA[i:], m.Icon)
	}
	if len(m.Stages) > 0 {
		for _, num := range m.Stages {
			dAtA[i] = 0x28
			i++
			i = encodeVarintGuild(dAtA, i, uint64(num))
		}
	}
	if len(m.Prizes) > 0 {
		for _, msg := range m.Prizes {
			dAtA[i] = 0x32
			i++
			i = encodeVarintGuild(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Guild(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Guild(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintGuild(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GuildWorkshopLogProto) Size() (n int) {
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovGuild(uint64(m.Time))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *GuildTechnologyDataProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGuild(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if len(m.Desc) > 0 {
		for _, s := range m.Desc {
			l = len(s)
			n += 1 + l + sovGuild(uint64(l))
		}
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.Group != 0 {
		n += 1 + sovGuild(uint64(m.Group))
	}
	if m.Level != 0 {
		n += 1 + sovGuild(uint64(m.Level))
	}
	if m.RequireGuildLevel != 0 {
		n += 1 + sovGuild(uint64(m.RequireGuildLevel))
	}
	if m.UpgradeBuilding != 0 {
		n += 1 + sovGuild(uint64(m.UpgradeBuilding))
	}
	if m.UpgradeDuration != 0 {
		n += 1 + sovGuild(uint64(m.UpgradeDuration))
	}
	if len(m.Cdrs) > 0 {
		for _, e := range m.Cdrs {
			l = e.Size()
			n += 1 + l + sovGuild(uint64(l))
		}
	}
	if m.Effect != nil {
		l = m.Effect.Size()
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.BigBox != 0 {
		n += 1 + sovGuild(uint64(m.BigBox))
	}
	if m.HelpCdr != 0 {
		n += 1 + sovGuild(uint64(m.HelpCdr))
	}
	return n
}

func (m *GuildEventPrizeDataProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGuild(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.Quality != 0 {
		n += 1 + sovGuild(uint64(m.Quality))
	}
	l = len(m.IconId)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.Prize != nil {
		l = m.Prize.Size()
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.Energy != 0 {
		n += 1 + sovGuild(uint64(m.Energy))
	}
	if m.FromShop {
		n += 2
	}
	if len(m.GuildLevelPrizes) > 0 {
		for _, e := range m.GuildLevelPrizes {
			l = e.Size()
			n += 1 + l + sovGuild(uint64(l))
		}
	}
	return n
}

func (m *GuildPrestigePrizeDataProto) Size() (n int) {
	var l int
	_ = l
	if m.Prestige != 0 {
		n += 1 + sovGuild(uint64(m.Prestige))
	}
	if m.EventPrize != 0 {
		n += 1 + sovGuild(uint64(m.EventPrize))
	}
	if m.BuildingAmount != 0 {
		n += 1 + sovGuild(uint64(m.BuildingAmount))
	}
	if m.Hufu != 0 {
		n += 1 + sovGuild(uint64(m.Hufu))
	}
	return n
}

func (m *GuildBigBoxDataProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGuild(uint64(m.Id))
	}
	if m.Prize != nil {
		l = m.Prize.Size()
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.UnlockEnergy != 0 {
		n += 1 + sovGuild(uint64(m.UnlockEnergy))
	}
	if len(m.GuildLevelPrizes) > 0 {
		for _, e := range m.GuildLevelPrizes {
			l = e.Size()
			n += 1 + l + sovGuild(uint64(l))
		}
	}
	if m.TechLevel != 0 {
		n += 1 + sovGuild(uint64(m.TechLevel))
	}
	return n
}

func (m *GuildLevelCdrProto) Size() (n int) {
	var l int
	_ = l
	if m.Times != 0 {
		n += 1 + sovGuild(uint64(m.Times))
	}
	if m.Cost != 0 {
		n += 1 + sovGuild(uint64(m.Cost))
	}
	if m.Cdr != 0 {
		n += 1 + sovGuild(uint64(m.Cdr))
	}
	return n
}

func (m *GuildLevelProto) Size() (n int) {
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovGuild(uint64(m.Level))
	}
	if m.MemberCount != 0 {
		n += 1 + sovGuild(uint64(m.MemberCount))
	}
	if len(m.ClassMemberCount) > 0 {
		for _, e := range m.ClassMemberCount {
			n += 1 + sovGuild(uint64(e))
		}
	}
	if m.UpgradeBuilding != 0 {
		n += 1 + sovGuild(uint64(m.UpgradeBuilding))
	}
	if m.UpgradeDuration != 0 {
		n += 1 + sovGuild(uint64(m.UpgradeDuration))
	}
	if len(m.Cdrs) > 0 {
		for _, e := range m.Cdrs {
			l = e.Size()
			n += 1 + l + sovGuild(uint64(l))
		}
	}
	return n
}

func (m *GuildClassTitleDataProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGuild(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.Permission != nil {
		l = m.Permission.Size()
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *GuildClassLevelProto) Size() (n int) {
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovGuild(uint64(m.Level))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovGuild(uint64(m.Count))
	}
	if m.Permission != nil {
		l = m.Permission.Size()
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.VoteScore != 0 {
		n += 2 + sovGuild(uint64(m.VoteScore))
	}
	return n
}

func (m *GuildPermissionProto) Size() (n int) {
	var l int
	_ = l
	if m.InvateOther {
		n += 2
	}
	if m.AgreeJoin {
		n += 2
	}
	if m.UpdateText {
		n += 2
	}
	if m.UpdateClassName {
		n += 2
	}
	if m.UpdateFlagType {
		n += 2
	}
	if m.UpdateLowerMemberClassLevel {
		n += 2
	}
	if m.KickLowerMember {
		n += 2
	}
	if m.UpdateInternalText {
		n += 2
	}
	if m.UpdateJoinCondition {
		n += 2
	}
	if m.UpdateLabel {
		n += 2
	}
	if m.UpdateClassTitle {
		n += 2
	}
	if m.ImpeachNpcLeader {
		n += 2
	}
	if m.UpgradeLevel {
		n += 3
	}
	if m.UpgradeBuilding {
		n += 3
	}
	if m.UpgradeTechnology {
		n += 3
	}
	if m.UpgradeLevelCdr {
		n += 3
	}
	if m.UpdateFriendGuild {
		n += 3
	}
	if m.UpdateEnemyGuild {
		n += 3
	}
	if m.UpdatePrestigeTarget {
		n += 3
	}
	if m.OpenResistXiongNu {
		n += 3
	}
	if m.SendToAllMembers {
		n += 3
	}
	if m.UpgradeTechnologyCdr {
		n += 3
	}
	if m.UpdateName {
		n += 3
	}
	if m.UpdateFlagName {
		n += 3
	}
	if m.LeaveGuild {
		n += 3
	}
	if m.DismissGuild {
		n += 3
	}
	if m.ChangeLeader {
		n += 3
	}
	if m.UpdateMark {
		n += 3
	}
	if m.ChangeYinliang {
		n += 3
	}
	if m.ConveneMember {
		n += 3
	}
	if m.GetOnlineInfo {
		n += 3
	}
	if m.Workshop {
		n += 3
	}
	if m.RecommendMcBuild {
		n += 3
	}
	return n
}

func (m *GuildDonateProto) Size() (n int) {
	var l int
	_ = l
	if m.Sequence != 0 {
		n += 1 + sovGuild(uint64(m.Sequence))
	}
	if m.Times != 0 {
		n += 1 + sovGuild(uint64(m.Times))
	}
	if m.Cost != nil {
		l = m.Cost.Size()
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.GuildBuildingAmount != 0 {
		n += 1 + sovGuild(uint64(m.GuildBuildingAmount))
	}
	if m.ContributionAmount != 0 {
		n += 1 + sovGuild(uint64(m.ContributionAmount))
	}
	if m.DonationAmount != 0 {
		n += 1 + sovGuild(uint64(m.DonationAmount))
	}
	if m.ContributionCoin != 0 {
		n += 1 + sovGuild(uint64(m.ContributionCoin))
	}
	if m.RecommandGuanfuLevel != 0 {
		n += 1 + sovGuild(uint64(m.RecommandGuanfuLevel))
	}
	return n
}

func (m *GuildProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGuild(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	l = len(m.FlagName)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.FlagType != 0 {
		n += 1 + sovGuild(uint64(m.FlagType))
	}
	if m.Level != 0 {
		n += 1 + sovGuild(uint64(m.Level))
	}
	if m.MemberCount != 0 {
		n += 1 + sovGuild(uint64(m.MemberCount))
	}
	if m.Leader != nil {
		l = m.Leader.Size()
		n += 1 + l + sovGuild(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	l = len(m.InternalText)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if len(m.Labels) > 0 {
		for _, s := range m.Labels {
			l = len(s)
			n += 1 + l + sovGuild(uint64(l))
		}
	}
	if m.RejectAutoJoin {
		n += 2
	}
	if m.RequiredHeroLevel != 0 {
		n += 1 + sovGuild(uint64(m.RequiredHeroLevel))
	}
	if m.RequiredJunXianLevel != 0 {
		n += 1 + sovGuild(uint64(m.RequiredJunXianLevel))
	}
	if m.RequiredTowerMaxFloor != 0 {
		n += 1 + sovGuild(uint64(m.RequiredTowerMaxFloor))
	}
	if len(m.ClassNames) > 0 {
		for _, s := range m.ClassNames {
			l = len(s)
			n += 2 + l + sovGuild(uint64(l))
		}
	}
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 2 + l + sovGuild(uint64(l))
		}
	}
	l = len(m.ChangeLeaderId)
	if l > 0 {
		n += 2 + l + sovGuild(uint64(l))
	}
	if m.ChangeLeaderTime != 0 {
		n += 2 + sovGuild(uint64(m.ChangeLeaderTime))
	}
	if m.NextChangeNameTime != 0 {
		n += 2 + sovGuild(uint64(m.NextChangeNameTime))
	}
	if m.ImpeachLeader != nil {
		l = m.ImpeachLeader.Size()
		n += 2 + l + sovGuild(uint64(l))
	}
	if len(m.InvateHero) > 0 {
		for _, e := range m.InvateHero {
			l = e.Size()
			n += 2 + l + sovGuild(uint64(l))
		}
	}
	if len(m.RequestJoinHero) > 0 {
		for _, e := range m.RequestJoinHero {
			l = e.Size()
			n += 2 + l + sovGuild(uint64(l))
		}
	}
	if m.FreeChangeName {
		n += 3
	}
	if m.KickMemberCount != 0 {
		n += 2 + sovGuild(uint64(m.KickMemberCount))
	}
	if m.ClassTitle != nil {
		l = m.ClassTitle.Size()
		n += 2 + l + sovGuild(uint64(l))
	}
	if m.PrestigeTarget != 0 {
		n += 2 + sovGuild(uint64(m.PrestigeTarget))
	}
	if m.Prestige != 0 {
		n += 2 + sovGuild(uint64(m.Prestige))
	}
	if m.HistoryMaxPrestige != 0 {
		n += 2 + sovGuild(uint64(m.HistoryMaxPrestige))
	}
	if m.BuildingAmount != 0 {
		n += 2 + sovGuild(uint64(m.BuildingAmount))
	}
	if m.UpgradeEndTime != 0 {
		n += 2 + sovGuild(uint64(m.UpgradeEndTime))
	}
	if m.CdrTimes != 0 {
		n += 2 + sovGuild(uint64(m.CdrTimes))
	}
	if m.Hufu != 0 {
		n += 2 + sovGuild(uint64(m.Hufu))
	}
	if m.Yinliang != 0 {
		n += 2 + sovGuild(uint64(m.Yinliang))
	}
	l = len(m.FriendGuildText)
	if l > 0 {
		n += 2 + l + sovGuild(uint64(l))
	}
	l = len(m.EnemyGuildText)
	if l > 0 {
		n += 2 + l + sovGuild(uint64(l))
	}
	if len(m.DonateRecords) > 0 {
		for _, e := range m.DonateRecords {
			l = e.Size()
			n += 2 + l + sovGuild(uint64(l))
		}
	}
	if len(m.BigEvents) > 0 {
		for _, e := range m.BigEvents {
			l = e.Size()
			n += 2 + l + sovGuild(uint64(l))
		}
	}
	if len(m.Dynamics) > 0 {
		for _, e := range m.Dynamics {
			l = e.Size()
			n += 2 + l + sovGuild(uint64(l))
		}
	}
	if m.RankByCountry != 0 {
		n += 2 + sovGuild(uint64(m.RankByCountry))
	}
	if m.Rank != 0 {
		n += 2 + sovGuild(uint64(m.Rank))
	}
	if m.BigBoxId != 0 {
		n += 2 + sovGuild(uint64(m.BigBoxId))
	}
	if m.BigBoxEnergy != 0 {
		n += 2 + sovGuild(uint64(m.BigBoxEnergy))
	}
	if len(m.Technologys) > 0 {
		for _, e := range m.Technologys {
			n += 2 + sovGuild(uint64(e))
		}
	}
	if m.TechUpgradeEndTime != 0 {
		n += 2 + sovGuild(uint64(m.TechUpgradeEndTime))
	}
	if m.TechCdrTimes != 0 {
		n += 2 + sovGuild(uint64(m.TechCdrTimes))
	}
	if m.UpgradeTechnology != 0 {
		n += 2 + sovGuild(uint64(m.UpgradeTechnology))
	}
	if len(m.GuildTargetId) > 0 {
		for _, e := range m.GuildTargetId {
			n += 2 + sovGuild(uint64(e))
		}
	}
	if len(m.GuildTargetEndTime) > 0 {
		for _, e := range m.GuildTargetEndTime {
			n += 2 + sovGuild(uint64(e))
		}
	}
	if m.NextUpdatePrestigeTargetTime != 0 {
		n += 2 + sovGuild(uint64(m.NextUpdatePrestigeTargetTime))
	}
	if m.IsStartResistXiongNuToday {
		n += 3
	}
	if m.UnlockResistXiongNuLevel != 0 {
		n += 2 + sovGuild(uint64(m.UnlockResistXiongNuLevel))
	}
	if m.HasLastResistXiongNu {
		n += 3
	}
	if m.LastResistXiongNu != nil {
		l = m.LastResistXiongNu.Size()
		n += 2 + l + sovGuild(uint64(l))
	}
	if len(m.ResistXiongNuDefenders) > 0 {
		for _, b := range m.ResistXiongNuDefenders {
			l = len(b)
			n += 2 + l + sovGuild(uint64(l))
		}
	}
	if len(m.GuildTargetStartTime) > 0 {
		for _, e := range m.GuildTargetStartTime {
			n += 2 + sovGuild(uint64(e))
		}
	}
	if m.MingcHostCount != 0 {
		n += 2 + sovGuild(uint64(m.MingcHostCount))
	}
	if m.WorkshopX != 0 {
		n += 2 + sovGuild(uint64(m.WorkshopX))
	}
	if m.WorkshopY != 0 {
		n += 2 + sovGuild(uint64(m.WorkshopY))
	}
	if len(m.RecommendMcBuilds) > 0 {
		for _, e := range m.RecommendMcBuilds {
			n += 2 + sovGuild(uint64(e))
		}
	}
	if len(m.DailyMcBuildId) > 0 {
		for _, e := range m.DailyMcBuildId {
			n += 2 + sovGuild(uint64(e))
		}
	}
	if len(m.DailyMcBuildCount) > 0 {
		for _, e := range m.DailyMcBuildCount {
			n += 2 + sovGuild(uint64(e))
		}
	}
	if m.ChangeCountryWaitEndTime != 0 {
		n += 2 + sovGuild(uint64(m.ChangeCountryWaitEndTime))
	}
	if m.ChangeCountryTarget != 0 {
		n += 2 + sovGuild(uint64(m.ChangeCountryTarget))
	}
	if m.ChangeCountryNextTime != 0 {
		n += 2 + sovGuild(uint64(m.ChangeCountryNextTime))
	}
	return n
}

func (m *GuildBasicProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGuild(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	l = len(m.FlagName)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovGuild(uint64(m.Level))
	}
	if m.Country != 0 {
		n += 1 + sovGuild(uint64(m.Country))
	}
	return n
}

func (m *GuildSnapshotProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGuild(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	l = len(m.FlagName)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.FlagType != 0 {
		n += 1 + sovGuild(uint64(m.FlagType))
	}
	if m.Level != 0 {
		n += 1 + sovGuild(uint64(m.Level))
	}
	if m.MemberCount != 0 {
		n += 1 + sovGuild(uint64(m.MemberCount))
	}
	if m.Leader != nil {
		l = m.Leader.Size()
		n += 1 + l + sovGuild(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.RejectAutoJoin {
		n += 2
	}
	if m.RequiredHeroLevel != 0 {
		n += 1 + sovGuild(uint64(m.RequiredHeroLevel))
	}
	if m.RequiredJunXianLevel != 0 {
		n += 1 + sovGuild(uint64(m.RequiredJunXianLevel))
	}
	if m.RequiredTowerMaxFloor != 0 {
		n += 1 + sovGuild(uint64(m.RequiredTowerMaxFloor))
	}
	if m.PrestigeTarget != 0 {
		n += 2 + sovGuild(uint64(m.PrestigeTarget))
	}
	if m.Prestige != 0 {
		n += 2 + sovGuild(uint64(m.Prestige))
	}
	return n
}

func (m *GuildMemberProto) Size() (n int) {
	var l int
	_ = l
	if m.ClassLevel != 0 {
		n += 2 + sovGuild(uint64(m.ClassLevel))
	}
	if m.HufuAmount != 0 {
		n += 2 + sovGuild(uint64(m.HufuAmount))
	}
	if m.HufuTotalAmount != 0 {
		n += 2 + sovGuild(uint64(m.HufuTotalAmount))
	}
	if m.HufuAmount7 != 0 {
		n += 2 + sovGuild(uint64(m.HufuAmount7))
	}
	if m.ContributionAmount != 0 {
		n += 2 + sovGuild(uint64(m.ContributionAmount))
	}
	if m.ContributionTotalAmount != 0 {
		n += 2 + sovGuild(uint64(m.ContributionTotalAmount))
	}
	if m.ContributionAmount7 != 0 {
		n += 2 + sovGuild(uint64(m.ContributionAmount7))
	}
	if m.DonationAmount != 0 {
		n += 2 + sovGuild(uint64(m.DonationAmount))
	}
	if m.DonationTotalAmount != 0 {
		n += 2 + sovGuild(uint64(m.DonationTotalAmount))
	}
	if m.DonationAmount7 != 0 {
		n += 2 + sovGuild(uint64(m.DonationAmount7))
	}
	if m.DonationTotalYuanbao != 0 {
		n += 2 + sovGuild(uint64(m.DonationTotalYuanbao))
	}
	if m.CreateTime != 0 {
		n += 2 + sovGuild(uint64(m.CreateTime))
	}
	if m.Salary != 0 {
		n += 2 + sovGuild(uint64(m.Salary))
	}
	if m.HistorySalary != 0 {
		n += 2 + sovGuild(uint64(m.HistorySalary))
	}
	if m.Hero != nil {
		l = m.Hero.Size()
		n += 2 + l + sovGuild(uint64(l))
	}
	if m.IsTodayJoinStart {
		n += 3
	}
	return n
}

func (m *GuildImpeachProto) Size() (n int) {
	var l int
	_ = l
	if m.ImpeachEndTime != 0 {
		n += 1 + sovGuild(uint64(m.ImpeachEndTime))
	}
	if len(m.Candidates) > 0 {
		for _, b := range m.Candidates {
			l = len(b)
			n += 1 + l + sovGuild(uint64(l))
		}
	}
	if len(m.Points) > 0 {
		for _, e := range m.Points {
			n += 1 + sovGuild(uint64(e))
		}
	}
	if len(m.VoteHeros) > 0 {
		for _, b := range m.VoteHeros {
			l = len(b)
			n += 1 + l + sovGuild(uint64(l))
		}
	}
	if len(m.VoteTarget) > 0 {
		for _, b := range m.VoteTarget {
			l = len(b)
			n += 1 + l + sovGuild(uint64(l))
		}
	}
	l = len(m.ImpeachMemberId)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *GuildClassTitleProto) Size() (n int) {
	var l int
	_ = l
	if len(m.SystemClassTitleId) > 0 {
		for _, e := range m.SystemClassTitleId {
			n += 1 + sovGuild(uint64(e))
		}
	}
	if len(m.SystemClassTitleMemberId) > 0 {
		for _, b := range m.SystemClassTitleMemberId {
			l = len(b)
			n += 1 + l + sovGuild(uint64(l))
		}
	}
	if len(m.CustomClassTitleName) > 0 {
		for _, s := range m.CustomClassTitleName {
			l = len(s)
			n += 1 + l + sovGuild(uint64(l))
		}
	}
	if len(m.CustomClassTitleMemberId) > 0 {
		for _, e := range m.CustomClassTitleMemberId {
			l = e.Size()
			n += 1 + l + sovGuild(uint64(l))
		}
	}
	return n
}

func (m *HeroUpgradeClassLevelProto) Size() (n int) {
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovGuild(uint64(m.Level))
	}
	return n
}

func (m *GuildTargetProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGuild(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.TargetType != 0 {
		n += 1 + sovGuild(uint64(m.TargetType))
	}
	if m.Target != 0 {
		n += 1 + sovGuild(uint64(m.Target))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	l = len(m.ButtonText)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *GuildDonateRecordProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.Sequence != 0 {
		n += 1 + sovGuild(uint64(m.Sequence))
	}
	if m.Times != 0 {
		n += 1 + sovGuild(uint64(m.Times))
	}
	if m.DonateTime != 0 {
		n += 1 + sovGuild(uint64(m.DonateTime))
	}
	return n
}

func (m *GuildBigEventProto) Size() (n int) {
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovGuild(uint64(m.Time))
	}
	if m.Type != 0 {
		n += 1 + sovGuild(uint64(m.Type))
	}
	if m.Statue != nil {
		l = m.Statue.Size()
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.LevelUp != nil {
		l = m.LevelUp.Size()
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.Impeach != nil {
		l = m.Impeach.Size()
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.Demise != nil {
		l = m.Demise.Size()
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *StatueProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.LeaderId)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	l = len(m.LeaderName)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.RegionLevel != 0 {
		n += 1 + sovGuild(uint64(m.RegionLevel))
	}
	if m.RegionId != 0 {
		n += 1 + sovGuild(uint64(m.RegionId))
	}
	return n
}

func (m *LevelUpProto) Size() (n int) {
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovGuild(uint64(m.Level))
	}
	return n
}

func (m *ImpeachProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.OldLeaderId)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	l = len(m.OldLeaderName)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	l = len(m.NewLeaderId)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	l = len(m.NewLeaderName)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *DemiseProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.OldLeaderId)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	l = len(m.OldLeaderName)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	l = len(m.NewLeaderId)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	l = len(m.NewLeaderName)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *GuildDynamicProto) Size() (n int) {
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovGuild(uint64(m.Time))
	}
	if m.Type != 0 {
		n += 1 + sovGuild(uint64(m.Type))
	}
	if m.Attack != nil {
		l = m.Attack.Size()
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.BeenAttack != nil {
		l = m.BeenAttack.Size()
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.Join != nil {
		l = m.Join.Size()
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *FightProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.AttackerId)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	l = len(m.AttackerName)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	l = len(m.BeenAttackerId)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	l = len(m.BeenAttackerName)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	l = len(m.AttackerHead)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	l = len(m.BeenAttackerHead)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *JoinProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	l = len(m.Head)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *GuildSeekHelpProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.HelpType != 0 {
		n += 1 + sovGuild(uint64(m.HelpType))
	}
	if m.WorkerPos != 0 {
		n += 1 + sovGuild(uint64(m.WorkerPos))
	}
	if len(m.HelpHeroIds) > 0 {
		for _, b := range m.HelpHeroIds {
			l = len(b)
			n += 1 + l + sovGuild(uint64(l))
		}
	}
	if m.ReduceSecondsPerCount != 0 {
		n += 1 + sovGuild(uint64(m.ReduceSecondsPerCount))
	}
	if m.HelpMaxHeroCount != 0 {
		n += 1 + sovGuild(uint64(m.HelpMaxHeroCount))
	}
	l = len(m.HeroId)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	l = len(m.HeroName)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	l = len(m.HeroHead)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *GuildLogProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGuild(uint64(m.Id))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.Time != 0 {
		n += 1 + sovGuild(uint64(m.Time))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovGuild(uint64(m.Type))
	}
	l = len(m.DataId)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	l = len(m.HeroId)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.FightX != 0 {
		n += 1 + sovGuild(uint64(m.FightX))
	}
	if m.FightY != 0 {
		n += 1 + sovGuild(uint64(m.FightY))
	}
	return n
}

func (m *GuildPermissionShowProto) Size() (n int) {
	var l int
	_ = l
	if m.PermType != 0 {
		n += 1 + sovGuild(uint64(m.PermType))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if len(m.ClassLevel) > 0 {
		for _, e := range m.ClassLevel {
			n += 1 + sovGuild(uint64(e))
		}
	}
	if m.IsShow {
		n += 2
	}
	return n
}

func (m *GuildRecommendInviteHeros) Size() (n int) {
	var l int
	_ = l
	if len(m.Hero) > 0 {
		for _, e := range m.Hero {
			l = e.Size()
			n += 1 + l + sovGuild(uint64(l))
		}
	}
	return n
}

func (m *GuildMarkProto) Size() (n int) {
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovGuild(uint64(m.Index))
	}
	if m.PosX != 0 {
		n += 1 + sovGuild(uint64(m.PosX))
	}
	if m.PosY != 0 {
		n += 1 + sovGuild(uint64(m.PosY))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *McWarRecordProto) Size() (n int) {
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovGuild(uint64(m.Time))
	}
	if m.Atk != nil {
		l = m.Atk.Size()
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.Def != nil {
		l = m.Def.Size()
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovGuild(uint64(m.Type))
	}
	if m.AtkWin {
		n += 2
	}
	if m.AtkYinliang != 0 {
		n += 1 + sovGuild(uint64(m.AtkYinliang))
	}
	if m.McId != 0 {
		n += 1 + sovGuild(uint64(m.McId))
	}
	if m.McCountryId != 0 {
		n += 1 + sovGuild(uint64(m.McCountryId))
	}
	if m.WarId != 0 {
		n += 1 + sovGuild(uint64(m.WarId))
	}
	return n
}

func (m *McWarAllRecordProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Record) > 0 {
		for _, e := range m.Record {
			l = e.Size()
			n += 1 + l + sovGuild(uint64(l))
		}
	}
	return n
}

func (m *McWarAllRecordWithJoinedProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Record) > 0 {
		for _, e := range m.Record {
			l = e.Size()
			n += 1 + l + sovGuild(uint64(l))
		}
	}
	if len(m.IsJoined) > 0 {
		n += 2 * len(m.IsJoined)
	}
	return n
}

func (m *GuildAllYinliangRecordProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Record) > 0 {
		for _, e := range m.Record {
			l = e.Size()
			n += 1 + l + sovGuild(uint64(l))
		}
	}
	return n
}

func (m *GuildYinliangRecordProto) Size() (n int) {
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovGuild(uint64(m.Time))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *GuildAllYinliangSendToGuildProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Guilds) > 0 {
		for _, e := range m.Guilds {
			l = e.Size()
			n += 1 + l + sovGuild(uint64(l))
		}
	}
	return n
}

func (m *GuildYinliangSendToGuildProto) Size() (n int) {
	var l int
	_ = l
	if m.Send != nil {
		l = m.Send.Size()
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.Guild != nil {
		l = m.Guild.Size()
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *GuildYinliangSendProto) Size() (n int) {
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovGuild(uint64(m.Time))
	}
	if m.Send != 0 {
		n += 1 + sovGuild(uint64(m.Send))
	}
	if m.WeeklySend != 0 {
		n += 1 + sovGuild(uint64(m.WeeklySend))
	}
	if m.AllSend != 0 {
		n += 1 + sovGuild(uint64(m.AllSend))
	}
	return n
}

func (m *GuildTaskEvaluateDataProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGuild(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.Complete != 0 {
		n += 1 + sovGuild(uint64(m.Complete))
	}
	if len(m.Prizes) > 0 {
		for _, e := range m.Prizes {
			l = e.Size()
			n += 1 + l + sovGuild(uint64(l))
		}
	}
	return n
}

func (m *GuildTaskDataProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGuild(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if len(m.Stages) > 0 {
		for _, e := range m.Stages {
			n += 1 + sovGuild(uint64(e))
		}
	}
	if len(m.Prizes) > 0 {
		for _, e := range m.Prizes {
			l = e.Size()
			n += 1 + l + sovGuild(uint64(l))
		}
	}
	return n
}

func sovGuild(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGuild(x uint64) (n int) {
	return sovGuild(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GuildWorkshopLogProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildWorkshopLogProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildWorkshopLogProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildTechnologyDataProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildTechnologyDataProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildTechnologyDataProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = append(m.Desc, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			m.Group = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Group |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequireGuildLevel", wireType)
			}
			m.RequireGuildLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequireGuildLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgradeBuilding", wireType)
			}
			m.UpgradeBuilding = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpgradeBuilding |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgradeDuration", wireType)
			}
			m.UpgradeDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpgradeDuration |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cdrs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cdrs = append(m.Cdrs, &GuildLevelCdrProto{})
			if err := m.Cdrs[len(m.Cdrs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Effect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Effect == nil {
				m.Effect = &DomesticEffectProto{}
			}
			if err := m.Effect.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BigBox", wireType)
			}
			m.BigBox = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BigBox |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HelpCdr", wireType)
			}
			m.HelpCdr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HelpCdr |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildEventPrizeDataProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildEventPrizeDataProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildEventPrizeDataProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quality", wireType)
			}
			m.Quality = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quality |= (Quality(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Prize == nil {
				m.Prize = &PrizeProto{}
			}
			if err := m.Prize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Energy", wireType)
			}
			m.Energy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Energy |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromShop", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FromShop = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildLevelPrizes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildLevelPrizes = append(m.GuildLevelPrizes, &GuildLevelPrizeProto{})
			if err := m.GuildLevelPrizes[len(m.GuildLevelPrizes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildPrestigePrizeDataProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildPrestigePrizeDataProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildPrestigePrizeDataProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prestige", wireType)
			}
			m.Prestige = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Prestige |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventPrize", wireType)
			}
			m.EventPrize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventPrize |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildingAmount", wireType)
			}
			m.BuildingAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuildingAmount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hufu", wireType)
			}
			m.Hufu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hufu |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildBigBoxDataProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildBigBoxDataProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildBigBoxDataProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Prize == nil {
				m.Prize = &PrizeProto{}
			}
			if err := m.Prize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockEnergy", wireType)
			}
			m.UnlockEnergy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnlockEnergy |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildLevelPrizes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildLevelPrizes = append(m.GuildLevelPrizes, &GuildLevelPrizeProto{})
			if err := m.GuildLevelPrizes[len(m.GuildLevelPrizes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TechLevel", wireType)
			}
			m.TechLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TechLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildLevelCdrProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildLevelCdrProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildLevelCdrProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Times", wireType)
			}
			m.Times = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Times |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cost", wireType)
			}
			m.Cost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cost |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cdr", wireType)
			}
			m.Cdr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cdr |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildLevelProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildLevelProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildLevelProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberCount", wireType)
			}
			m.MemberCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemberCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ClassMemberCount = append(m.ClassMemberCount, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGuild
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ClassMemberCount = append(m.ClassMemberCount, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassMemberCount", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgradeBuilding", wireType)
			}
			m.UpgradeBuilding = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpgradeBuilding |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgradeDuration", wireType)
			}
			m.UpgradeDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpgradeDuration |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cdrs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cdrs = append(m.Cdrs, &GuildLevelCdrProto{})
			if err := m.Cdrs[len(m.Cdrs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildClassTitleDataProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildClassTitleDataProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildClassTitleDataProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permission", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Permission == nil {
				m.Permission = &GuildPermissionProto{}
			}
			if err := m.Permission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildClassLevelProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildClassLevelProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildClassLevelProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permission", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Permission == nil {
				m.Permission = &GuildPermissionProto{}
			}
			if err := m.Permission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteScore", wireType)
			}
			m.VoteScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteScore |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildPermissionProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildPermissionProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildPermissionProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvateOther", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InvateOther = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgreeJoin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AgreeJoin = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateText", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateText = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateClassName", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateClassName = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateFlagType", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateFlagType = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateLowerMemberClassLevel", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateLowerMemberClassLevel = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KickLowerMember", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.KickLowerMember = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateInternalText", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateInternalText = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateJoinCondition", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateJoinCondition = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateLabel", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateLabel = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateClassTitle", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateClassTitle = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImpeachNpcLeader", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ImpeachNpcLeader = bool(v != 0)
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgradeLevel", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpgradeLevel = bool(v != 0)
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgradeBuilding", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpgradeBuilding = bool(v != 0)
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgradeTechnology", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpgradeTechnology = bool(v != 0)
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgradeLevelCdr", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpgradeLevelCdr = bool(v != 0)
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateFriendGuild", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateFriendGuild = bool(v != 0)
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateEnemyGuild", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateEnemyGuild = bool(v != 0)
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatePrestigeTarget", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdatePrestigeTarget = bool(v != 0)
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenResistXiongNu", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OpenResistXiongNu = bool(v != 0)
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendToAllMembers", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SendToAllMembers = bool(v != 0)
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgradeTechnologyCdr", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpgradeTechnologyCdr = bool(v != 0)
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateName", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateName = bool(v != 0)
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateFlagName", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateFlagName = bool(v != 0)
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaveGuild", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LeaveGuild = bool(v != 0)
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DismissGuild", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DismissGuild = bool(v != 0)
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeLeader", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChangeLeader = bool(v != 0)
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateMark", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpdateMark = bool(v != 0)
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeYinliang", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChangeYinliang = bool(v != 0)
		case 36:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConveneMember", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConveneMember = bool(v != 0)
		case 37:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetOnlineInfo", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GetOnlineInfo = bool(v != 0)
		case 38:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workshop", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Workshop = bool(v != 0)
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecommendMcBuild", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RecommendMcBuild = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildDonateProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildDonateProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildDonateProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Times", wireType)
			}
			m.Times = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Times |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cost", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cost == nil {
				m.Cost = &CostProto{}
			}
			if err := m.Cost.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildBuildingAmount", wireType)
			}
			m.GuildBuildingAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuildBuildingAmount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContributionAmount", wireType)
			}
			m.ContributionAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContributionAmount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DonationAmount", wireType)
			}
			m.DonationAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DonationAmount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContributionCoin", wireType)
			}
			m.ContributionCoin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContributionCoin |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecommandGuanfuLevel", wireType)
			}
			m.RecommandGuanfuLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecommandGuanfuLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlagName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FlagName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlagType", wireType)
			}
			m.FlagType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlagType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberCount", wireType)
			}
			m.MemberCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemberCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Leader == nil {
				m.Leader = &GuildMemberProto{}
			}
			if err := m.Leader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Labels = append(m.Labels, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejectAutoJoin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RejectAutoJoin = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredHeroLevel", wireType)
			}
			m.RequiredHeroLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequiredHeroLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredJunXianLevel", wireType)
			}
			m.RequiredJunXianLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequiredJunXianLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredTowerMaxFloor", wireType)
			}
			m.RequiredTowerMaxFloor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequiredTowerMaxFloor |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassNames = append(m.ClassNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &GuildMemberProto{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeLeaderId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChangeLeaderId = append(m.ChangeLeaderId[:0], dAtA[iNdEx:postIndex]...)
			if m.ChangeLeaderId == nil {
				m.ChangeLeaderId = []byte{}
			}
			iNdEx = postIndex
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeLeaderTime", wireType)
			}
			m.ChangeLeaderTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChangeLeaderTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextChangeNameTime", wireType)
			}
			m.NextChangeNameTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextChangeNameTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImpeachLeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ImpeachLeader == nil {
				m.ImpeachLeader = &GuildImpeachProto{}
			}
			if err := m.ImpeachLeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvateHero", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvateHero = append(m.InvateHero, &HeroBasicSnapshotProto{})
			if err := m.InvateHero[len(m.InvateHero)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestJoinHero", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestJoinHero = append(m.RequestJoinHero, &HeroBasicSnapshotProto{})
			if err := m.RequestJoinHero[len(m.RequestJoinHero)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreeChangeName", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FreeChangeName = bool(v != 0)
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KickMemberCount", wireType)
			}
			m.KickMemberCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KickMemberCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassTitle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClassTitle == nil {
				m.ClassTitle = &GuildClassTitleProto{}
			}
			if err := m.ClassTitle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrestigeTarget", wireType)
			}
			m.PrestigeTarget = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrestigeTarget |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prestige", wireType)
			}
			m.Prestige = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Prestige |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 37:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryMaxPrestige", wireType)
			}
			m.HistoryMaxPrestige = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HistoryMaxPrestige |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 41:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildingAmount", wireType)
			}
			m.BuildingAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuildingAmount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 42:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgradeEndTime", wireType)
			}
			m.UpgradeEndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpgradeEndTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 43:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CdrTimes", wireType)
			}
			m.CdrTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CdrTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 46:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hufu", wireType)
			}
			m.Hufu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hufu |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 47:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Yinliang", wireType)
			}
			m.Yinliang = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Yinliang |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendGuildText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FriendGuildText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnemyGuildText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnemyGuildText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DonateRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DonateRecords = append(m.DonateRecords, &GuildDonateRecordProto{})
			if err := m.DonateRecords[len(m.DonateRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 56:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BigEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BigEvents = append(m.BigEvents, &GuildBigEventProto{})
			if err := m.BigEvents[len(m.BigEvents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dynamics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dynamics = append(m.Dynamics, &GuildDynamicProto{})
			if err := m.Dynamics[len(m.Dynamics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 58:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankByCountry", wireType)
			}
			m.RankByCountry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RankByCountry |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 59:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 60:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BigBoxId", wireType)
			}
			m.BigBoxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BigBoxId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 61:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BigBoxEnergy", wireType)
			}
			m.BigBoxEnergy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BigBoxEnergy |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 62:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Technologys = append(m.Technologys, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGuild
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Technologys = append(m.Technologys, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Technologys", wireType)
			}
		case 63:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TechUpgradeEndTime", wireType)
			}
			m.TechUpgradeEndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TechUpgradeEndTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 64:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TechCdrTimes", wireType)
			}
			m.TechCdrTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TechCdrTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 65:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgradeTechnology", wireType)
			}
			m.UpgradeTechnology = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpgradeTechnology |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 66:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GuildTargetId = append(m.GuildTargetId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGuild
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GuildTargetId = append(m.GuildTargetId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildTargetId", wireType)
			}
		case 67:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GuildTargetEndTime = append(m.GuildTargetEndTime, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGuild
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GuildTargetEndTime = append(m.GuildTargetEndTime, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildTargetEndTime", wireType)
			}
		case 68:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextUpdatePrestigeTargetTime", wireType)
			}
			m.NextUpdatePrestigeTargetTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextUpdatePrestigeTargetTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 69:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsStartResistXiongNuToday", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsStartResistXiongNuToday = bool(v != 0)
		case 71:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockResistXiongNuLevel", wireType)
			}
			m.UnlockResistXiongNuLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnlockResistXiongNuLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 72:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasLastResistXiongNu", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasLastResistXiongNu = bool(v != 0)
		case 73:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastResistXiongNu", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastResistXiongNu == nil {
				m.LastResistXiongNu = &LastResistXiongNuProto{}
			}
			if err := m.LastResistXiongNu.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 74:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResistXiongNuDefenders", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResistXiongNuDefenders = append(m.ResistXiongNuDefenders, make([]byte, postIndex-iNdEx))
			copy(m.ResistXiongNuDefenders[len(m.ResistXiongNuDefenders)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 75:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GuildTargetStartTime = append(m.GuildTargetStartTime, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGuild
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GuildTargetStartTime = append(m.GuildTargetStartTime, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildTargetStartTime", wireType)
			}
		case 76:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MingcHostCount", wireType)
			}
			m.MingcHostCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MingcHostCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 77:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkshopX", wireType)
			}
			m.WorkshopX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkshopX |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 78:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkshopY", wireType)
			}
			m.WorkshopY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkshopY |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 79:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RecommendMcBuilds = append(m.RecommendMcBuilds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGuild
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RecommendMcBuilds = append(m.RecommendMcBuilds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RecommendMcBuilds", wireType)
			}
		case 80:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DailyMcBuildId = append(m.DailyMcBuildId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGuild
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DailyMcBuildId = append(m.DailyMcBuildId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DailyMcBuildId", wireType)
			}
		case 81:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DailyMcBuildCount = append(m.DailyMcBuildCount, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGuild
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DailyMcBuildCount = append(m.DailyMcBuildCount, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DailyMcBuildCount", wireType)
			}
		case 82:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeCountryWaitEndTime", wireType)
			}
			m.ChangeCountryWaitEndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChangeCountryWaitEndTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 83:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeCountryTarget", wireType)
			}
			m.ChangeCountryTarget = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChangeCountryTarget |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 84:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeCountryNextTime", wireType)
			}
			m.ChangeCountryNextTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChangeCountryNextTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildBasicProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildBasicProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildBasicProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlagName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FlagName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			m.Country = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Country |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildSnapshotProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildSnapshotProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildSnapshotProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlagName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FlagName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlagType", wireType)
			}
			m.FlagType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlagType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberCount", wireType)
			}
			m.MemberCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemberCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Leader == nil {
				m.Leader = &HeroBasicSnapshotProto{}
			}
			if err := m.Leader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejectAutoJoin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RejectAutoJoin = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredHeroLevel", wireType)
			}
			m.RequiredHeroLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequiredHeroLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredJunXianLevel", wireType)
			}
			m.RequiredJunXianLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequiredJunXianLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredTowerMaxFloor", wireType)
			}
			m.RequiredTowerMaxFloor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequiredTowerMaxFloor |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrestigeTarget", wireType)
			}
			m.PrestigeTarget = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrestigeTarget |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prestige", wireType)
			}
			m.Prestige = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Prestige |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildMemberProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildMemberProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildMemberProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassLevel", wireType)
			}
			m.ClassLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClassLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HufuAmount", wireType)
			}
			m.HufuAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HufuAmount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HufuTotalAmount", wireType)
			}
			m.HufuTotalAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HufuTotalAmount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HufuAmount7", wireType)
			}
			m.HufuAmount7 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HufuAmount7 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContributionAmount", wireType)
			}
			m.ContributionAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContributionAmount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContributionTotalAmount", wireType)
			}
			m.ContributionTotalAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContributionTotalAmount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContributionAmount7", wireType)
			}
			m.ContributionAmount7 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContributionAmount7 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DonationAmount", wireType)
			}
			m.DonationAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DonationAmount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DonationTotalAmount", wireType)
			}
			m.DonationTotalAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DonationTotalAmount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 36:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DonationAmount7", wireType)
			}
			m.DonationAmount7 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DonationAmount7 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 38:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DonationTotalYuanbao", wireType)
			}
			m.DonationTotalYuanbao = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DonationTotalYuanbao |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Salary", wireType)
			}
			m.Salary = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Salary |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 41:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistorySalary", wireType)
			}
			m.HistorySalary = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HistorySalary |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 101:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hero", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hero == nil {
				m.Hero = &HeroBasicSnapshotProto{}
			}
			if err := m.Hero.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 102:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTodayJoinStart", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsTodayJoinStart = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildImpeachProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildImpeachProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildImpeachProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImpeachEndTime", wireType)
			}
			m.ImpeachEndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ImpeachEndTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Candidates", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Candidates = append(m.Candidates, make([]byte, postIndex-iNdEx))
			copy(m.Candidates[len(m.Candidates)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Points = append(m.Points, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGuild
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Points = append(m.Points, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Points", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteHeros", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoteHeros = append(m.VoteHeros, make([]byte, postIndex-iNdEx))
			copy(m.VoteHeros[len(m.VoteHeros)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteTarget", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoteTarget = append(m.VoteTarget, make([]byte, postIndex-iNdEx))
			copy(m.VoteTarget[len(m.VoteTarget)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImpeachMemberId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImpeachMemberId = append(m.ImpeachMemberId[:0], dAtA[iNdEx:postIndex]...)
			if m.ImpeachMemberId == nil {
				m.ImpeachMemberId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildClassTitleProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildClassTitleProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildClassTitleProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SystemClassTitleId = append(m.SystemClassTitleId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGuild
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SystemClassTitleId = append(m.SystemClassTitleId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemClassTitleId", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemClassTitleMemberId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemClassTitleMemberId = append(m.SystemClassTitleMemberId, make([]byte, postIndex-iNdEx))
			copy(m.SystemClassTitleMemberId[len(m.SystemClassTitleMemberId)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomClassTitleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomClassTitleName = append(m.CustomClassTitleName, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomClassTitleMemberId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomClassTitleMemberId = append(m.CustomClassTitleMemberId, &BytesArrayProto{})
			if err := m.CustomClassTitleMemberId[len(m.CustomClassTitleMemberId)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeroUpgradeClassLevelProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroUpgradeClassLevelProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroUpgradeClassLevelProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildTargetProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildTargetProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildTargetProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetType", wireType)
			}
			m.TargetType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetType |= (GuildTargetType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			m.Target = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Target |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ButtonText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ButtonText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildDonateRecordProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildDonateRecordProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildDonateRecordProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Times", wireType)
			}
			m.Times = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Times |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DonateTime", wireType)
			}
			m.DonateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DonateTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildBigEventProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildBigEventProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildBigEventProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (GuildBigEventType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Statue == nil {
				m.Statue = &StatueProto{}
			}
			if err := m.Statue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelUp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LevelUp == nil {
				m.LevelUp = &LevelUpProto{}
			}
			if err := m.LevelUp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Impeach", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Impeach == nil {
				m.Impeach = &ImpeachProto{}
			}
			if err := m.Impeach.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Demise", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Demise == nil {
				m.Demise = &DemiseProto{}
			}
			if err := m.Demise.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatueProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatueProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatueProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LeaderId = append(m.LeaderId[:0], dAtA[iNdEx:postIndex]...)
			if m.LeaderId == nil {
				m.LeaderId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LeaderName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionLevel", wireType)
			}
			m.RegionLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegionLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionId", wireType)
			}
			m.RegionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegionId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LevelUpProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LevelUpProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LevelUpProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImpeachProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImpeachProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImpeachProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldLeaderId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldLeaderId = append(m.OldLeaderId[:0], dAtA[iNdEx:postIndex]...)
			if m.OldLeaderId == nil {
				m.OldLeaderId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldLeaderName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldLeaderName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewLeaderId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewLeaderId = append(m.NewLeaderId[:0], dAtA[iNdEx:postIndex]...)
			if m.NewLeaderId == nil {
				m.NewLeaderId = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewLeaderName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewLeaderName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DemiseProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DemiseProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DemiseProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldLeaderId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldLeaderId = append(m.OldLeaderId[:0], dAtA[iNdEx:postIndex]...)
			if m.OldLeaderId == nil {
				m.OldLeaderId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldLeaderName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldLeaderName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewLeaderId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewLeaderId = append(m.NewLeaderId[:0], dAtA[iNdEx:postIndex]...)
			if m.NewLeaderId == nil {
				m.NewLeaderId = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewLeaderName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewLeaderName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildDynamicProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildDynamicProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildDynamicProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (GuildDynamicType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attack", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attack == nil {
				m.Attack = &FightProto{}
			}
			if err := m.Attack.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeenAttack", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BeenAttack == nil {
				m.BeenAttack = &FightProto{}
			}
			if err := m.BeenAttack.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Join", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Join == nil {
				m.Join = &JoinProto{}
			}
			if err := m.Join.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FightProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FightProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FightProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackerId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttackerId = append(m.AttackerId[:0], dAtA[iNdEx:postIndex]...)
			if m.AttackerId == nil {
				m.AttackerId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttackerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeenAttackerId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BeenAttackerId = append(m.BeenAttackerId[:0], dAtA[iNdEx:postIndex]...)
			if m.BeenAttackerId == nil {
				m.BeenAttackerId = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeenAttackerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BeenAttackerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackerHead", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttackerHead = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeenAttackerHead", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BeenAttackerHead = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Head = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildSeekHelpProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildSeekHelpProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildSeekHelpProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HelpType", wireType)
			}
			m.HelpType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HelpType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerPos", wireType)
			}
			m.WorkerPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkerPos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HelpHeroIds", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HelpHeroIds = append(m.HelpHeroIds, make([]byte, postIndex-iNdEx))
			copy(m.HelpHeroIds[len(m.HelpHeroIds)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReduceSecondsPerCount", wireType)
			}
			m.ReduceSecondsPerCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReduceSecondsPerCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HelpMaxHeroCount", wireType)
			}
			m.HelpMaxHeroCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HelpMaxHeroCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeroId = append(m.HeroId[:0], dAtA[iNdEx:postIndex]...)
			if m.HeroId == nil {
				m.HeroId = []byte{}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeroName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroHead", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeroHead = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildLogProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildLogProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildLogProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (GuildLogType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeroId = append(m.HeroId[:0], dAtA[iNdEx:postIndex]...)
			if m.HeroId == nil {
				m.HeroId = []byte{}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FightX", wireType)
			}
			m.FightX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FightX |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FightY", wireType)
			}
			m.FightY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FightY |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildPermissionShowProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildPermissionShowProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildPermissionShowProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PermType", wireType)
			}
			m.PermType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PermType |= (GuildPermissionType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ClassLevel = append(m.ClassLevel, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGuild
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ClassLevel = append(m.ClassLevel, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassLevel", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsShow", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsShow = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildRecommendInviteHeros) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildRecommendInviteHeros: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildRecommendInviteHeros: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hero", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hero = append(m.Hero, &HeroBasicSnapshotProto{})
			if err := m.Hero[len(m.Hero)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildMarkProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildMarkProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildMarkProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosX", wireType)
			}
			m.PosX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosX |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosY", wireType)
			}
			m.PosY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosY |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *McWarRecordProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: McWarRecordProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: McWarRecordProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Atk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Atk == nil {
				m.Atk = &GuildBasicProto{}
			}
			if err := m.Atk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Def", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Def == nil {
				m.Def = &GuildBasicProto{}
			}
			if err := m.Def.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (McWarActionType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AtkWin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AtkWin = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AtkYinliang", wireType)
			}
			m.AtkYinliang = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AtkYinliang |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field McId", wireType)
			}
			m.McId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.McId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field McCountryId", wireType)
			}
			m.McCountryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.McCountryId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WarId", wireType)
			}
			m.WarId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WarId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *McWarAllRecordProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: McWarAllRecordProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: McWarAllRecordProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Record = append(m.Record, &McWarRecordProto{})
			if err := m.Record[len(m.Record)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *McWarAllRecordWithJoinedProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: McWarAllRecordWithJoinedProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: McWarAllRecordWithJoinedProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Record = append(m.Record, &McWarRecordProto{})
			if err := m.Record[len(m.Record)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.IsJoined = append(m.IsJoined, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGuild
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.IsJoined = append(m.IsJoined, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field IsJoined", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildAllYinliangRecordProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildAllYinliangRecordProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildAllYinliangRecordProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Record = append(m.Record, &GuildYinliangRecordProto{})
			if err := m.Record[len(m.Record)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildYinliangRecordProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildYinliangRecordProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildYinliangRecordProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildAllYinliangSendToGuildProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildAllYinliangSendToGuildProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildAllYinliangSendToGuildProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Guilds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Guilds = append(m.Guilds, &GuildYinliangSendToGuildProto{})
			if err := m.Guilds[len(m.Guilds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildYinliangSendToGuildProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildYinliangSendToGuildProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildYinliangSendToGuildProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Send", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Send == nil {
				m.Send = &GuildYinliangSendProto{}
			}
			if err := m.Send.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Guild", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Guild == nil {
				m.Guild = &GuildBasicProto{}
			}
			if err := m.Guild.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildYinliangSendProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildYinliangSendProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildYinliangSendProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Send", wireType)
			}
			m.Send = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Send |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeeklySend", wireType)
			}
			m.WeeklySend = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WeeklySend |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllSend", wireType)
			}
			m.AllSend = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllSend |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildTaskEvaluateDataProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildTaskEvaluateDataProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildTaskEvaluateDataProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Complete", wireType)
			}
			m.Complete = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Complete |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prizes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prizes = append(m.Prizes, &PrizeProto{})
			if err := m.Prizes[len(m.Prizes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildTaskDataProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildTaskDataProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildTaskDataProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Stages = append(m.Stages, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGuild
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Stages = append(m.Stages, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Stages", wireType)
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prizes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prizes = append(m.Prizes, &PrizeProto{})
			if err := m.Prizes[len(m.Prizes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGuild(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGuild
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGuild(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGuild = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGuild   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/pb/shared_proto/guild.proto", fileDescriptorGuild)
}

var fileDescriptorGuild = []byte{
	// 4940 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x3b, 0x4d, 0x6f, 0x1c, 0x47,
	0x76, 0x1e, 0x92, 0x33, 0x24, 0xdf, 0x0c, 0xc9, 0x66, 0xf3, 0xab, 0x45, 0x4a, 0x22, 0x35, 0x92,
	0x57, 0x34, 0x77, 0x25, 0xad, 0xb9, 0xeb, 0xd0, 0xde, 0x75, 0xec, 0xf0, 0x4b, 0xd2, 0xd8, 0x94,
	0xcc, 0x1d, 0x52, 0x96, 0x9d, 0x4b, 0xa7, 0xd9, 0x5d, 0x9c, 0x69, 0xb3, 0xa7, 0x7b, 0xdc, 0xdd,
	0x23, 0x72, 0x92, 0x00, 0x9b, 0x45, 0x0e, 0x39, 0x04, 0xb9, 0x05, 0x48, 0x0e, 0xb9, 0x26, 0x39,
	0x06, 0xd8, 0x1f, 0x90, 0x00, 0xc9, 0x25, 0xc7, 0x45, 0x0e, 0x01, 0x82, 0x00, 0x41, 0xe0, 0x5c,
	0x72, 0xcd, 0x0f, 0x08, 0x10, 0xbc, 0xf7, 0xaa, 0xba, 0xab, 0x87, 0x43, 0x99, 0x5e, 0xfb, 0xb0,
	0xc8, 0x89, 0xd3, 0xef, 0xa3, 0xea, 0xf5, 0xfb, 0x7e, 0xd5, 0x45, 0x78, 0xa7, 0xe5, 0xa7, 0xed,
	0xde, 0xc9, 0x43, 0x37, 0xea, 0x3c, 0x0a, 0xfc, 0x56, 0x3b, 0xed, 0x3a, 0xe7, 0x8f, 0x3a, 0x4e,
	0x20, 0xb6, 0x1e, 0x75, 0x4f, 0x1e, 0x25, 0x6d, 0x27, 0x16, 0x9e, 0xdd, 0x8d, 0xa3, 0x34, 0x7a,
	0xd4, 0xea, 0xf9, 0x81, 0xf7, 0x90, 0x7e, 0x9b, 0x65, 0xfa, 0xb3, 0xfc, 0xee, 0xf5, 0xb9, 0x93,
	0xd0, 0xe9, 0x26, 0xed, 0x28, 0x7d, 0xf8, 0x8d, 0x39, 0xbd, 0xa8, 0x23, 0x92, 0xd4, 0x77, 0x25,
	0xe7, 0x8f, 0xaf, 0xcf, 0x79, 0xe2, 0x24, 0x42, 0x72, 0x6d, 0x5d, 0x9f, 0xeb, 0xc2, 0x8f, 0xc2,
	0x56, 0xd8, 0x63, 0xc6, 0xfa, 0x87, 0xb0, 0xf0, 0x04, 0x5f, 0xfc, 0x65, 0x14, 0x9f, 0x25, 0xed,
	0xa8, 0x7b, 0x10, 0xb5, 0x0e, 0x49, 0x05, 0x26, 0x8c, 0xa5, 0x7e, 0x47, 0x58, 0xa5, 0xb5, 0xd2,
	0x7a, 0xb9, 0x49, 0xbf, 0x09, 0x26, 0x2e, 0x52, 0x6b, 0x64, 0xad, 0xb4, 0x3e, 0xd9, 0xa4, 0xdf,
	0xf5, 0xbf, 0x1b, 0x05, 0x8b, 0x56, 0x38, 0x16, 0x6e, 0x3b, 0x8c, 0x82, 0xa8, 0xd5, 0xdf, 0x73,
	0x52, 0x87, 0x17, 0x99, 0x86, 0x11, 0xdf, 0x93, 0x4b, 0x8c, 0xf8, 0x1e, 0x2e, 0x10, 0x3a, 0x1d,
	0xa1, 0x16, 0xc0, 0xdf, 0x08, 0xf3, 0x44, 0xe2, 0x5a, 0xa3, 0x6b, 0xa3, 0x08, 0xc3, 0xdf, 0x08,
	0xf3, 0xdd, 0x28, 0xb4, 0xc6, 0x98, 0x0e, 0x7f, 0x9b, 0xf3, 0x50, 0x6e, 0xc5, 0x51, 0xaf, 0x6b,
	0x95, 0x69, 0x39, 0x7e, 0x40, 0x68, 0x20, 0x5e, 0x89, 0xc0, 0xaa, 0x30, 0x94, 0x1e, 0xcc, 0x87,
	0x30, 0x17, 0x8b, 0x2f, 0x7b, 0x7e, 0x2c, 0x6c, 0x32, 0xab, 0xcd, 0x34, 0xe3, 0x44, 0x33, 0x2b,
	0x51, 0x24, 0xf5, 0x01, 0xd1, 0xbf, 0x05, 0x46, 0xaf, 0xdb, 0x8a, 0x1d, 0x4f, 0xd8, 0x27, 0x08,
	0xf5, 0xc3, 0x96, 0x35, 0x41, 0xc4, 0x33, 0x12, 0xbe, 0x23, 0xc1, 0x3a, 0xa9, 0xd7, 0x8b, 0x9d,
	0xd4, 0x8f, 0x42, 0x6b, 0xb2, 0x40, 0xba, 0x27, 0xc1, 0xe6, 0x03, 0x18, 0x73, 0xbd, 0x38, 0xb1,
	0x60, 0x6d, 0x74, 0xbd, 0xba, 0x79, 0x83, 0x35, 0xfe, 0x30, 0xdf, 0x76, 0xd7, 0x8b, 0x49, 0x4d,
	0x4d, 0x22, 0x33, 0x37, 0xa1, 0x22, 0x4e, 0x4f, 0x85, 0x9b, 0x5a, 0xd5, 0xb5, 0xd2, 0x7a, 0x75,
	0x73, 0x59, 0x32, 0xec, 0x49, 0x07, 0xd9, 0x27, 0x24, 0x73, 0x48, 0x4a, 0x73, 0x09, 0xc6, 0x4f,
	0xfc, 0x96, 0x7d, 0x12, 0x5d, 0x58, 0x35, 0x12, 0xa2, 0x72, 0xe2, 0xb7, 0x76, 0xa2, 0x0b, 0xf3,
	0x06, 0x4c, 0xb4, 0x45, 0xd0, 0xb5, 0x5d, 0x2f, 0xb6, 0xa6, 0x08, 0x33, 0x8e, 0xcf, 0xbb, 0x5e,
	0x5c, 0xff, 0xfb, 0x11, 0x69, 0xb1, 0xfd, 0x57, 0x22, 0x4c, 0x0f, 0x63, 0xff, 0xf7, 0xc5, 0xaf,
	0x6b, 0xb1, 0x52, 0x66, 0xb1, 0x75, 0x18, 0xff, 0xb2, 0xe7, 0x04, 0x7e, 0xda, 0x27, 0xa3, 0x4d,
	0x6f, 0x4e, 0x4b, 0xe9, 0x7f, 0xc6, 0xd0, 0xa6, 0x42, 0xa3, 0xc8, 0x68, 0x4f, 0xdb, 0xf7, 0xc8,
	0x92, 0x93, 0xcd, 0x0a, 0x3e, 0x36, 0x3c, 0xf3, 0x3e, 0x94, 0xbb, 0x28, 0x0c, 0x99, 0xb2, 0xba,
	0x39, 0x2b, 0x17, 0x20, 0x01, 0xf9, 0xad, 0x19, 0x6f, 0x2e, 0x42, 0x45, 0x84, 0x22, 0x6e, 0xf5,
	0xa5, 0x41, 0xe5, 0x93, 0xb9, 0x02, 0x93, 0xa7, 0x71, 0xd4, 0xb1, 0xd1, 0x8f, 0xc9, 0x7c, 0x13,
	0xcd, 0x09, 0x04, 0x1c, 0xb5, 0xa3, 0xae, 0xd9, 0x00, 0x53, 0x73, 0x05, 0x9b, 0x56, 0x4a, 0xac,
	0x2a, 0x99, 0x66, 0xe5, 0x92, 0x69, 0xb4, 0x4d, 0x8d, 0x56, 0x11, 0x9a, 0xd4, 0xff, 0xa2, 0x04,
	0x2b, 0x44, 0x7a, 0x18, 0xa3, 0x61, 0x5a, 0x62, 0x40, 0x87, 0xcb, 0x30, 0xd1, 0x95, 0x18, 0xa9,
	0xc9, 0xec, 0xd9, 0x5c, 0x85, 0xaa, 0x40, 0xb5, 0xb3, 0x00, 0xa4, 0xd6, 0x72, 0x13, 0x44, 0x66,
	0x09, 0xf3, 0x3e, 0xcc, 0x28, 0x17, 0xb4, 0x9d, 0x4e, 0xd4, 0x0b, 0x53, 0xd2, 0x73, 0xb9, 0x39,
	0xad, 0xc0, 0xdb, 0x04, 0x45, 0x2b, 0xb4, 0x7b, 0xa7, 0x3d, 0x52, 0x77, 0xb9, 0x49, 0xbf, 0xeb,
	0xff, 0x51, 0x82, 0x79, 0x92, 0x6c, 0x87, 0xbc, 0xe0, 0x6a, 0xb3, 0x5e, 0x5b, 0xd7, 0x77, 0x61,
	0xaa, 0x17, 0x06, 0x91, 0x7b, 0x66, 0x17, 0x54, 0x5e, 0x63, 0xe0, 0x3e, 0x2b, 0xfe, 0xbb, 0xd3,
	0xad, 0x79, 0x0b, 0x20, 0x15, 0x6e, 0x5b, 0x06, 0x2c, 0xfb, 0xf4, 0x24, 0x42, 0x88, 0xa8, 0x7e,
	0x08, 0xe6, 0xe5, 0xf8, 0xc1, 0x24, 0x80, 0xf9, 0x29, 0x91, 0xea, 0xe4, 0x07, 0x54, 0x90, 0x1b,
	0x25, 0x4a, 0x7d, 0xf4, 0xdb, 0x34, 0x60, 0x14, 0x23, 0x82, 0x75, 0x86, 0x3f, 0xeb, 0xbf, 0x18,
	0x81, 0x19, 0x5d, 0x36, 0xb9, 0x1e, 0xef, 0x5f, 0xd2, 0x93, 0xca, 0x1d, 0xa8, 0x75, 0x44, 0xe7,
	0x44, 0xc4, 0xb6, 0x4b, 0x66, 0xe1, 0xcd, 0xaa, 0x0c, 0xdb, 0x25, 0x9b, 0xfc, 0x10, 0x4c, 0x37,
	0x70, 0x92, 0xc4, 0x2e, 0x10, 0x62, 0x66, 0x2b, 0xef, 0x8c, 0x18, 0x6f, 0x34, 0x0d, 0xc2, 0x3e,
	0xd3, 0x38, 0x86, 0x65, 0x9e, 0xb1, 0xeb, 0x67, 0x9e, 0xf2, 0xeb, 0x33, 0x4f, 0xe5, 0x5a, 0x99,
	0xa7, 0xfe, 0x07, 0x32, 0x21, 0xec, 0xa2, 0x74, 0xc7, 0x7e, 0x1a, 0x7c, 0xc3, 0x84, 0xf0, 0x53,
	0x80, 0xae, 0x88, 0x3b, 0x7e, 0x92, 0xf8, 0x32, 0x69, 0x0f, 0xd8, 0xfd, 0x30, 0xc3, 0xf2, 0xb6,
	0x1a, 0x79, 0xfd, 0x97, 0xca, 0x67, 0x69, 0xf7, 0xaf, 0xb5, 0xc2, 0xb0, 0xfd, 0xe7, 0xa1, 0xec,
	0x6a, 0x91, 0xc2, 0x0f, 0xdf, 0x4a, 0x2a, 0xf4, 0xc3, 0x57, 0x51, 0x2a, 0xec, 0xc4, 0x8d, 0x62,
	0x61, 0xcd, 0xb3, 0x1f, 0x22, 0xe4, 0x08, 0x01, 0xf5, 0x3f, 0xaf, 0x4a, 0xa1, 0x07, 0xd6, 0x40,
	0x27, 0xf1, 0xc3, 0x57, 0x4e, 0x2a, 0xec, 0x28, 0x6d, 0x0b, 0xf6, 0xb4, 0x89, 0x66, 0x95, 0x61,
	0x9f, 0x20, 0x08, 0x97, 0x76, 0x5a, 0xb1, 0x10, 0xf6, 0x17, 0x91, 0xcf, 0x16, 0x9c, 0x68, 0x4e,
	0x12, 0xe4, 0xa3, 0xc8, 0x0f, 0x31, 0x43, 0xf4, 0xba, 0x1e, 0xae, 0x40, 0xb5, 0xb6, 0x42, 0x78,
	0x60, 0xd0, 0xb1, 0xb8, 0x48, 0xcd, 0x0d, 0x98, 0x95, 0x04, 0xec, 0x6b, 0xa4, 0x8e, 0x71, 0x22,
	0x9b, 0x61, 0x04, 0x69, 0xf2, 0x39, 0x6a, 0x66, 0x1d, 0x7d, 0x86, 0x68, 0x4f, 0x03, 0xa7, 0x65,
	0xa7, 0xfd, 0xae, 0x90, 0x99, 0x71, 0x9a, 0xe1, 0x8f, 0x03, 0xa7, 0x75, 0xdc, 0xef, 0x0a, 0x73,
	0x0f, 0x56, 0x25, 0x65, 0x10, 0x9d, 0x8b, 0x38, 0xf3, 0x60, 0xda, 0x82, 0xed, 0x30, 0x49, 0x8c,
	0x2b, 0x4c, 0x76, 0x80, 0x54, 0xd2, 0x93, 0x33, 0xc3, 0xa1, 0x6c, 0x67, 0xbe, 0x7b, 0x56, 0x58,
	0xc3, 0x02, 0x96, 0x0d, 0x11, 0x1a, 0x97, 0xf9, 0x43, 0x98, 0x97, 0x3b, 0xfa, 0x61, 0x2a, 0xe2,
	0xd0, 0x09, 0xf8, 0x8d, 0xab, 0x44, 0x6e, 0x32, 0xae, 0x21, 0x51, 0xf4, 0xe6, 0x9b, 0xb0, 0x20,
	0x39, 0x50, 0x75, 0xb6, 0x1b, 0x85, 0x9e, 0x4f, 0x61, 0x50, 0x23, 0x96, 0x39, 0x46, 0xa2, 0x16,
	0x77, 0x15, 0x0a, 0x0d, 0xa2, 0xde, 0xcb, 0x39, 0x11, 0x01, 0x15, 0xc3, 0x89, 0xa6, 0x54, 0xf1,
	0x01, 0x82, 0xcc, 0x1f, 0x80, 0x59, 0x50, 0x68, 0x8a, 0x11, 0x60, 0x4d, 0x13, 0xa1, 0xa1, 0x69,
	0x94, 0x22, 0x03, 0xa9, 0xfd, 0x4e, 0x57, 0x38, 0x6e, 0xdb, 0x0e, 0xbb, 0xae, 0x1d, 0x08, 0xc7,
	0x13, 0xb1, 0x35, 0xc3, 0xd4, 0x12, 0xf3, 0xbc, 0xeb, 0x1e, 0x10, 0x9c, 0xf2, 0xa7, 0x0c, 0x5a,
	0x56, 0xa2, 0x41, 0x84, 0x35, 0x09, 0xbc, 0xba, 0xfd, 0x98, 0x55, 0x06, 0x2d, 0x26, 0x81, 0x07,
	0x28, 0x2b, 0x93, 0xa6, 0x59, 0xc3, 0x65, 0x99, 0x44, 0x3c, 0x2b, 0x31, 0x79, 0x27, 0xc6, 0xbe,
	0xa2, 0x6d, 0x4f, 0xfd, 0xc0, 0x5c, 0x61, 0x69, 0x95, 0x10, 0xb0, 0x69, 0x52, 0xbe, 0x12, 0xfb,
	0x22, 0xf4, 0xb8, 0x75, 0x22, 0xdf, 0xa7, 0xb5, 0xc9, 0x5d, 0x08, 0x43, 0x9e, 0xaf, 0xa9, 0x4d,
	0x84, 0xa2, 0xd3, 0x97, 0xe4, 0x0b, 0xba, 0xda, 0xf6, 0x11, 0xc1, 0xd4, 0x3f, 0x86, 0x45, 0x49,
	0xad, 0x6a, 0xa1, 0x9d, 0x3a, 0x71, 0x4b, 0xa4, 0xd6, 0x0d, 0xe2, 0x90, 0xbe, 0xa0, 0x4a, 0xea,
	0x31, 0xe1, 0xcc, 0x47, 0x30, 0x1f, 0x75, 0x45, 0x68, 0xc7, 0x22, 0xf1, 0x93, 0xd4, 0xa6, 0xde,
	0xd5, 0x0e, 0x7b, 0xd6, 0x32, 0x0b, 0x85, 0xb8, 0x26, 0xa1, 0x3e, 0x43, 0xcc, 0xf3, 0x9e, 0xf9,
	0x00, 0xe6, 0x12, 0x94, 0x3d, 0x8d, 0x6c, 0x27, 0x08, 0xa4, 0x07, 0x26, 0xd6, 0x0a, 0x4b, 0x85,
	0xa8, 0xe3, 0x68, 0x3b, 0x08, 0xd8, 0x05, 0x13, 0x96, 0x6a, 0x50, 0x9d, 0xa4, 0xa4, 0x9b, 0x4a,
	0xaa, 0x01, 0x95, 0xa2, 0xa6, 0xf2, 0x10, 0xa5, 0xd8, 0xbb, 0xa5, 0x87, 0xe8, 0xb0, 0xb0, 0x23,
	0xaa, 0xdb, 0x83, 0x61, 0x47, 0x94, 0xab, 0x50, 0x0d, 0x84, 0xf3, 0x4a, 0xf6, 0xa9, 0xd6, 0x2a,
	0x2f, 0x45, 0x20, 0xd6, 0xdb, 0x5d, 0x98, 0xf2, 0xfc, 0x04, 0x73, 0x8c, 0x24, 0x59, 0x63, 0x07,
	0x92, 0xc0, 0x8c, 0xc8, 0x6d, 0x3b, 0x61, 0x4b, 0x28, 0x77, 0xbc, 0xc3, 0x44, 0x0c, 0x94, 0xae,
	0x98, 0x4b, 0xdd, 0x71, 0xe2, 0x33, 0xab, 0xae, 0x4b, 0xfd, 0xcc, 0x89, 0xcf, 0xb0, 0xf5, 0x90,
	0xab, 0xf4, 0xfd, 0x30, 0xf0, 0x9d, 0xb0, 0x65, 0xdd, 0x65, 0xa1, 0x19, 0xfc, 0xb9, 0x84, 0x9a,
	0x6f, 0xc2, 0xb4, 0x1b, 0x85, 0xaf, 0x44, 0x28, 0x54, 0x88, 0xdf, 0x23, 0xba, 0x29, 0x09, 0x95,
	0x01, 0xfe, 0x3d, 0x98, 0x69, 0x89, 0xd4, 0x8e, 0xc2, 0xc0, 0x0f, 0x31, 0xc8, 0x4f, 0x23, 0xeb,
	0x4d, 0xa6, 0x6b, 0x89, 0xf4, 0x13, 0x82, 0x36, 0xc2, 0x53, 0xea, 0x97, 0xce, 0xe5, 0xf8, 0x61,
	0x7d, 0x8f, 0xdb, 0x36, 0xf5, 0x8c, 0x4e, 0x16, 0x0b, 0x37, 0xea, 0x74, 0xd0, 0xa8, 0x1d, 0x97,
	0xe3, 0xc3, 0xba, 0xcf, 0xe6, 0xcc, 0x30, 0xcf, 0x5c, 0x0a, 0x90, 0xfa, 0xbf, 0x8f, 0x80, 0x41,
	0x1a, 0xd9, 0x8b, 0x42, 0x72, 0x26, 0xd9, 0x8e, 0x25, 0xe2, 0xcb, 0x9e, 0x08, 0xdd, 0xac, 0x1d,
	0x53, 0xcf, 0x57, 0x74, 0x0e, 0xf7, 0xb4, 0xce, 0xa1, 0xba, 0x69, 0xc8, 0x9a, 0xb1, 0x1b, 0x25,
	0xa9, 0xaa, 0x9a, 0xd8, 0x4b, 0x6c, 0xc2, 0x02, 0x77, 0x3d, 0x83, 0xfd, 0x1a, 0xd7, 0xef, 0x39,
	0x42, 0xee, 0x14, 0x9b, 0xb6, 0x47, 0x30, 0xe7, 0x46, 0x61, 0x1a, 0xfb, 0x27, 0x3d, 0xcc, 0x4e,
	0x8a, 0x83, 0xcb, 0xb8, 0xa9, 0xa3, 0x24, 0xc3, 0x7d, 0x98, 0xf1, 0xf0, 0x5d, 0x34, 0x62, 0x9e,
	0x74, 0xa6, 0x15, 0x58, 0x12, 0x7e, 0x1f, 0x66, 0x0b, 0x2b, 0xbb, 0x58, 0x5c, 0xb8, 0x59, 0x33,
	0x74, 0xc4, 0x2e, 0xd6, 0x98, 0x1f, 0xc3, 0x22, 0xeb, 0xce, 0xa1, 0x30, 0x77, 0xc2, 0xd3, 0x9e,
	0x4c, 0x4f, 0x3c, 0xf5, 0xcc, 0x67, 0xd8, 0x27, 0x84, 0xe4, 0xe6, 0xeb, 0x5f, 0x17, 0x01, 0x64,
	0xdf, 0x7b, 0xdd, 0xce, 0x60, 0x19, 0x26, 0x4e, 0xa5, 0xab, 0xcb, 0x71, 0x21, 0x7b, 0x56, 0x38,
	0xac, 0x3e, 0x52, 0x65, 0xd9, 0x73, 0x5e, 0xfb, 0xcb, 0xaf, 0xeb, 0xc0, 0x2a, 0x97, 0x3b, 0xb0,
	0x47, 0x50, 0x91, 0x21, 0x30, 0x4e, 0xc6, 0x5b, 0xd2, 0x0b, 0x3e, 0xfb, 0xa5, 0x9c, 0xa0, 0x98,
	0x2c, 0x9b, 0x69, 0x27, 0xf2, 0x99, 0x16, 0xc3, 0xa9, 0x58, 0x92, 0x26, 0x09, 0x59, 0xf3, 0xf5,
	0x62, 0xb4, 0x08, 0x15, 0xaa, 0x28, 0x3c, 0xdf, 0x4d, 0x36, 0xe5, 0x13, 0xc6, 0x7e, 0x2c, 0xbe,
	0x10, 0x6e, 0x6a, 0x3b, 0xbd, 0x34, 0xe2, 0x22, 0xcf, 0x25, 0x6d, 0x9a, 0xe1, 0xdb, 0xbd, 0x34,
	0xa2, 0x4a, 0x9f, 0x4f, 0xa9, 0x9e, 0xdd, 0x16, 0x71, 0x54, 0x68, 0x7a, 0xd5, 0x94, 0xea, 0x3d,
	0x15, 0x71, 0xc4, 0x65, 0xe2, 0x1d, 0x58, 0xca, 0xe8, 0xbf, 0xe8, 0x85, 0xf6, 0x85, 0xef, 0x84,
	0x92, 0x67, 0x4a, 0x99, 0x8d, 0xd1, 0x1f, 0xf5, 0xc2, 0xcf, 0x7c, 0x27, 0x64, 0xb6, 0x2d, 0xb0,
	0x32, 0xb6, 0x94, 0xeb, 0xb2, 0x73, 0x61, 0x9f, 0x06, 0x51, 0x14, 0x53, 0x91, 0x2b, 0x37, 0x17,
	0x14, 0xfe, 0x98, 0xca, 0xb3, 0x73, 0xf1, 0x18, 0x91, 0x98, 0x30, 0xf2, 0x0e, 0x23, 0xb1, 0x16,
	0xe8, 0x35, 0xc1, 0x55, 0xcd, 0x45, 0x62, 0xbe, 0x0d, 0xe3, 0x2a, 0xc1, 0x2e, 0x52, 0xa7, 0x79,
	0xa5, 0xb6, 0x15, 0x1d, 0x6a, 0xa7, 0x90, 0xa9, 0x70, 0x0c, 0x5c, 0x5a, 0x2b, 0xad, 0xd7, 0x54,
	0x92, 0xe1, 0x64, 0xd5, 0xa0, 0xf2, 0x52, 0xa4, 0xa4, 0xe3, 0x08, 0x4b, 0x7a, 0xb4, 0x46, 0x7b,
	0xec, 0x77, 0x84, 0xf9, 0x36, 0x2c, 0x84, 0xe2, 0x22, 0xb5, 0x25, 0x0b, 0x4a, 0xcc, 0x0c, 0x37,
	0x38, 0xb4, 0x10, 0xb9, 0x4b, 0x38, 0x14, 0x9d, 0x58, 0x3e, 0x84, 0x69, 0x55, 0xc8, 0xa5, 0xcb,
	0x2c, 0x93, 0xcb, 0x58, 0xfa, 0x4b, 0x34, 0x98, 0x82, 0xdf, 0x62, 0x4a, 0xd2, 0xcb, 0x84, 0xfa,
	0x01, 0xc8, 0xbe, 0x8e, 0xac, 0x67, 0xad, 0x90, 0x0a, 0x6e, 0x49, 0x6e, 0x34, 0xdb, 0x8e, 0x93,
	0xf8, 0xee, 0x91, 0x3c, 0x19, 0x92, 0x3d, 0x26, 0x73, 0x20, 0xd6, 0x6c, 0x00, 0x19, 0x59, 0x24,
	0x29, 0xf7, 0x33, 0xb4, 0xca, 0xad, 0xeb, 0xac, 0x32, 0x23, 0xf9, 0xd0, 0x8d, 0x68, 0xa9, 0x75,
	0x30, 0x4e, 0xb1, 0xa5, 0xd4, 0x5e, 0x5f, 0xd6, 0x92, 0x69, 0x84, 0xe7, 0x6f, 0x9e, 0x75, 0x68,
	0x85, 0x40, 0x5a, 0xe3, 0x31, 0x02, 0x11, 0xfa, 0x70, 0xf2, 0xbe, 0x72, 0x00, 0xee, 0x88, 0xee,
	0x5c, 0x6e, 0xa1, 0xf3, 0xbe, 0x48, 0xbe, 0x9e, 0x9b, 0x37, 0x4a, 0xf7, 0x61, 0x66, 0xb0, 0xd4,
	0xd7, 0x39, 0x75, 0x75, 0x8b, 0x45, 0x5e, 0x9f, 0x97, 0xef, 0x0e, 0xcc, 0xcb, 0x3f, 0x84, 0xf9,
	0xb6, 0x9f, 0xa4, 0x51, 0xdc, 0x27, 0xaf, 0xcd, 0xe8, 0xde, 0x64, 0xb3, 0x4a, 0xdc, 0x33, 0xe7,
	0x42, 0x35, 0x0e, 0xc3, 0x06, 0xe8, 0xb7, 0x86, 0x0e, 0xd0, 0xeb, 0x79, 0xd7, 0x45, 0x1d, 0x03,
	0x7a, 0xcb, 0x06, 0x53, 0x4a, 0xf8, 0x7e, 0xe8, 0x91, 0xa7, 0xac, 0xc0, 0xa4, 0xeb, 0xb1, 0x03,
	0x26, 0xd6, 0xf7, 0x59, 0x42, 0xd7, 0x23, 0xc7, 0x4b, 0xb2, 0x39, 0xfc, 0x61, 0x3e, 0x87, 0xe3,
	0x1b, 0x65, 0x25, 0xf4, 0x11, 0xd3, 0xab, 0x67, 0x34, 0x80, 0xde, 0x5f, 0x71, 0x82, 0xd9, 0xa4,
	0x04, 0x33, 0x73, 0x9a, 0xb7, 0x57, 0x94, 0x63, 0xd6, 0xc1, 0xd0, 0x7a, 0x2b, 0x26, 0xfd, 0x11,
	0x91, 0x4e, 0x8b, 0xac, 0xb5, 0x22, 0xca, 0x3d, 0xe0, 0x82, 0x20, 0x6c, 0x4c, 0xdd, 0xb1, 0x97,
	0x58, 0x5b, 0x05, 0x47, 0xd2, 0xaa, 0x62, 0x93, 0x08, 0xa4, 0x47, 0x7b, 0x1a, 0x28, 0x31, 0xdf,
	0x05, 0x38, 0xf1, 0x5b, 0x36, 0x1d, 0x47, 0x24, 0xd6, 0xbb, 0x97, 0xa7, 0xc7, 0x1d, 0xbf, 0x25,
	0x4f, 0x8d, 0x90, 0x7b, 0xf2, 0x44, 0x3e, 0x62, 0x23, 0x35, 0xe1, 0xf5, 0x43, 0xa7, 0xe3, 0xbb,
	0x89, 0xf5, 0x1e, 0xf1, 0x15, 0xc2, 0x68, 0x8f, 0x71, 0xcc, 0x96, 0x51, 0x62, 0x87, 0x10, 0x3b,
	0xe1, 0x99, 0x7d, 0xd2, 0x67, 0x47, 0x8c, 0xfb, 0xd6, 0x4f, 0x48, 0x5d, 0x53, 0x08, 0xde, 0xe9,
	0xef, 0x32, 0x10, 0x75, 0x8c, 0x00, 0xeb, 0xa7, 0xac, 0x63, 0xfc, 0x6d, 0xde, 0x64, 0x59, 0x4f,
	0xa2, 0x0b, 0xcc, 0x21, 0xef, 0xb3, 0x96, 0xf9, 0xf4, 0xab, 0xe1, 0x99, 0xf7, 0x60, 0x5a, 0x61,
	0xe5, 0xc1, 0xc5, 0x6f, 0xf3, 0xc1, 0x05, 0x53, 0xc8, 0x83, 0x8b, 0x7b, 0x50, 0xcd, 0xdb, 0xbe,
	0xc4, 0xfa, 0x20, 0x1b, 0xd4, 0x75, 0x30, 0xe6, 0x16, 0x3a, 0x93, 0xb8, 0xe4, 0x2d, 0x1f, 0xb2,
	0x13, 0x22, 0xf2, 0x45, 0xd1, 0x63, 0xee, 0xc1, 0x34, 0xb1, 0xe4, 0x6e, 0xf3, 0x3b, 0xbc, 0x3d,
	0x42, 0x77, 0x95, 0xeb, 0x0c, 0x6f, 0xe6, 0xb7, 0x39, 0xff, 0x0f, 0x6b, 0xe6, 0x67, 0xa4, 0x1f,
	0x50, 0xdc, 0xe0, 0x6b, 0xef, 0x64, 0x12, 0x4f, 0x11, 0x8a, 0x23, 0xaa, 0xe1, 0x99, 0xef, 0xa8,
	0xe6, 0x44, 0xd2, 0x66, 0x32, 0xef, 0x66, 0x1c, 0xa6, 0xc6, 0xa1, 0xe4, 0x7e, 0x0c, 0x6b, 0x94,
	0x46, 0x87, 0xb7, 0xea, 0xbc, 0xc2, 0x1e, 0xc9, 0x77, 0x13, 0xe9, 0x5e, 0x0c, 0xe9, 0xd9, 0x69,
	0x9d, 0x6d, 0xb8, 0xed, 0x27, 0x76, 0x92, 0x3a, 0x71, 0x3a, 0xd8, 0xbb, 0xdb, 0x69, 0xe4, 0x39,
	0x7d, 0x6b, 0x9f, 0xb2, 0xd3, 0x0d, 0x3f, 0x39, 0x42, 0xa2, 0x42, 0x13, 0x7f, 0x8c, 0x04, 0xe6,
	0x07, 0x70, 0x53, 0x9e, 0x3c, 0x0d, 0x2e, 0xc0, 0x25, 0xef, 0x09, 0x89, 0x61, 0x31, 0x4d, 0x81,
	0x9f, 0xcb, 0xde, 0x6f, 0x81, 0xd5, 0x76, 0x12, 0x3b, 0x70, 0x92, 0x4b, 0x22, 0x58, 0x4f, 0xb9,
	0xb9, 0x6f, 0x3b, 0xc9, 0x81, 0x93, 0x14, 0x37, 0x37, 0x9f, 0xc3, 0xfc, 0x50, 0x9e, 0x06, 0x65,
	0x3f, 0x15, 0x4f, 0x97, 0xf8, 0xd8, 0xb5, 0x67, 0x83, 0x4b, 0xeb, 0xbd, 0x07, 0x37, 0x06, 0x5f,
	0xc0, 0x13, 0xa7, 0x22, 0xf4, 0xb0, 0x6c, 0x7e, 0xb4, 0x36, 0xba, 0x5e, 0x6b, 0x2e, 0xc6, 0x3a,
	0xc7, 0x9e, 0xc2, 0x9a, 0xef, 0xc1, 0x52, 0xc1, 0x88, 0xac, 0x4f, 0x32, 0xc2, 0xc7, 0x99, 0x19,
	0xe7, 0x35, 0x33, 0x92, 0x2e, 0xc9, 0x00, 0xeb, 0x60, 0x74, 0xfc, 0xb0, 0xe5, 0xda, 0xed, 0x28,
	0x49, 0x65, 0x96, 0x3f, 0xe0, 0xe4, 0x46, 0xf0, 0xa7, 0x51, 0x92, 0x72, 0x92, 0xbf, 0x05, 0xa0,
	0xba, 0x6d, 0xfb, 0xc2, 0x7a, 0xc6, 0x27, 0x1d, 0x0a, 0xf2, 0x59, 0x01, 0xdd, 0xb7, 0x9e, 0x17,
	0xd1, 0x9f, 0x9b, 0x9b, 0xd8, 0xc3, 0x0c, 0xf6, 0xe7, 0x89, 0xf5, 0x49, 0x26, 0xde, 0xec, 0x60,
	0x93, 0x8e, 0x6e, 0x3f, 0xeb, 0x39, 0x7e, 0xd0, 0xcf, 0xe8, 0xd1, 0x93, 0x0f, 0x33, 0x8e, 0x69,
	0x42, 0x4a, 0xea, 0x86, 0x67, 0xfe, 0x08, 0xe6, 0x07, 0xc8, 0xf9, 0x75, 0x7e, 0x96, 0xef, 0xa1,
	0x73, 0xf0, 0x5b, 0x7d, 0x00, 0x37, 0x65, 0x2d, 0x94, 0x89, 0xc5, 0x3e, 0x77, 0x7c, 0x2d, 0x0c,
	0x9a, 0xec, 0x3d, 0x4c, 0x23, 0xd3, 0xcc, 0x4b, 0xc7, 0xcf, 0x02, 0x61, 0x13, 0x16, 0x06, 0xf8,
	0x65, 0x09, 0x3b, 0xe2, 0xe6, 0xbe, 0xc0, 0x28, 0xeb, 0xd8, 0x16, 0x58, 0x03, 0x3c, 0x14, 0x4b,
	0xb4, 0xdf, 0x31, 0x37, 0x5a, 0x05, 0xb6, 0xe7, 0xe2, 0x82, 0x8c, 0x55, 0xff, 0x45, 0x49, 0x9e,
	0x41, 0x52, 0xa9, 0xff, 0x6e, 0xba, 0xeb, 0xac, 0x83, 0x1e, 0xd3, 0x3b, 0x68, 0x0b, 0xc6, 0x55,
	0xa2, 0xe5, 0xce, 0x5a, 0x3d, 0xd6, 0xff, 0x78, 0x4c, 0x1e, 0xad, 0x16, 0x3a, 0x8d, 0xdf, 0xcc,
	0x26, 0xff, 0x9d, 0x81, 0x26, 0xff, 0x6b, 0xba, 0xa5, 0xd7, 0xb5, 0xfa, 0xff, 0x7f, 0xba, 0xf5,
	0xef, 0xa2, 0xdd, 0xaa, 0xff, 0x53, 0x59, 0x0e, 0xd0, 0x5a, 0xf3, 0x9e, 0xcf, 0x01, 0x2c, 0xfd,
	0x02, 0x7f, 0xb3, 0x70, 0xf3, 0x53, 0xbf, 0x55, 0xa8, 0x62, 0xdb, 0xa3, 0xda, 0xad, 0x9b, 0x4c,
	0x80, 0x20, 0xd9, 0x6a, 0x6d, 0xc0, 0x2c, 0x11, 0xa4, 0x51, 0xea, 0x04, 0x8a, 0xec, 0x16, 0x37,
	0x9d, 0x88, 0x38, 0x46, 0xb8, 0xa4, 0xbd, 0x03, 0x35, 0x6d, 0xb1, 0x2d, 0x3a, 0x37, 0x29, 0x37,
	0xab, 0xf9, 0x6a, 0x5b, 0x57, 0x4d, 0xd1, 0xab, 0x57, 0x4e, 0xd1, 0x3f, 0x81, 0x1b, 0x05, 0x86,
	0x82, 0x1c, 0xdc, 0xfc, 0x2e, 0xe9, 0x04, 0xba, 0x3c, 0x6f, 0xc3, 0xfc, 0x90, 0xcd, 0xb6, 0xa8,
	0x1b, 0xc6, 0x44, 0x70, 0x69, 0xb7, 0xad, 0x61, 0x43, 0x7b, 0x7d, 0xe8, 0xd0, 0xbe, 0x09, 0x0b,
	0x19, 0x61, 0x41, 0x26, 0xb6, 0xcb, 0x9c, 0x42, 0xea, 0xf2, 0xbc, 0x05, 0xc6, 0xc0, 0xe2, 0x5b,
	0x74, 0xfc, 0x52, 0x6e, 0xce, 0x14, 0x57, 0xdf, 0xc2, 0x31, 0x7f, 0x60, 0xf9, 0x7e, 0xcf, 0x09,
	0x4f, 0x9c, 0x88, 0x8e, 0x59, 0xca, 0xcd, 0xf9, 0xc2, 0xfa, 0x9f, 0x33, 0x8e, 0xcc, 0x1d, 0x0b,
	0x3a, 0x80, 0xc6, 0xcc, 0x75, 0x5f, 0x9a, 0x9b, 0x40, 0x94, 0x1b, 0x17, 0xa1, 0x92, 0x38, 0x81,
	0x13, 0xf7, 0xad, 0x75, 0xfe, 0xfe, 0xc6, 0x4f, 0xe6, 0x9b, 0x30, 0xad, 0x7a, 0x75, 0x89, 0xe7,
	0xc6, 0x7b, 0x4a, 0x42, 0x8f, 0x98, 0xec, 0x6d, 0x18, 0xa3, 0x49, 0x47, 0x5c, 0x27, 0x76, 0x89,
	0xd4, 0x7c, 0x00, 0x73, 0x7e, 0xc2, 0x8d, 0x03, 0x8f, 0x4a, 0x54, 0x09, 0xad, 0x53, 0x79, 0xe8,
	0x9a, 0x50, 0xc7, 0x80, 0x51, 0x4a, 0x05, 0xb0, 0xfe, 0x3f, 0x25, 0x98, 0xbd, 0x34, 0xbd, 0x61,
	0xa8, 0xab, 0x79, 0x2f, 0x2b, 0x03, 0x9c, 0xd8, 0xd4, 0x1c, 0xa8, 0x92, 0x7f, 0x1d, 0xc0, 0x75,
	0x42, 0xcf, 0xc7, 0xe6, 0x26, 0xb1, 0x46, 0xb0, 0x46, 0x53, 0x9d, 0xd1, 0xa0, 0xe6, 0x32, 0x54,
	0xba, 0x91, 0x8f, 0x6d, 0x72, 0xfe, 0x79, 0x47, 0x42, 0xcc, 0x3b, 0xf2, 0xe3, 0x01, 0xca, 0x9e,
	0x58, 0x63, 0x19, 0x3f, 0x7d, 0x40, 0xc0, 0x17, 0x4d, 0xcc, 0xbb, 0x50, 0x25, 0x12, 0x19, 0xa9,
	0xe5, 0x7c, 0x0f, 0x04, 0xcb, 0x48, 0xdd, 0x80, 0x59, 0x25, 0xb1, 0x4c, 0x89, 0xbe, 0x47, 0xf9,
	0xb0, 0xd6, 0x9c, 0x91, 0x08, 0x8e, 0xd3, 0x86, 0x57, 0xff, 0xab, 0x11, 0xfd, 0x33, 0x4a, 0x3e,
	0x92, 0x61, 0x27, 0x98, 0xf4, 0x93, 0x54, 0x74, 0xf4, 0xd3, 0x6d, 0x9b, 0x92, 0x7a, 0xd6, 0x09,
	0x32, 0x41, 0xce, 0xd9, 0xf0, 0xb0, 0x80, 0x0e, 0x61, 0xcb, 0xc5, 0x20, 0xad, 0x34, 0xad, 0x41,
	0x4e, 0x25, 0x0f, 0xa6, 0x3f, 0xb7, 0x97, 0xa4, 0x51, 0x91, 0x9f, 0x6a, 0x47, 0x95, 0x0e, 0x12,
	0xe6, 0x19, 0x9d, 0xb3, 0x52, 0xbd, 0xf8, 0x14, 0x6e, 0x0e, 0x61, 0xcb, 0xb7, 0xad, 0xd1, 0x6c,
	0xb1, 0x28, 0x9d, 0x66, 0xa7, 0x9f, 0x8a, 0x64, 0x3b, 0x8e, 0x9d, 0x3e, 0x7b, 0x8b, 0x35, 0xb8,
	0x66, 0xa6, 0x9e, 0x4d, 0x58, 0x46, 0xc5, 0xcb, 0x36, 0xfd, 0x5a, 0x9f, 0x9a, 0xea, 0xbf, 0x2a,
	0xc9, 0x64, 0xc8, 0xe6, 0xf8, 0x76, 0x1f, 0xc8, 0xb7, 0xa0, 0xaa, 0x9a, 0x68, 0x55, 0x0b, 0xa7,
	0xb3, 0xf7, 0xd0, 0x76, 0xc1, 0xca, 0xd8, 0x84, 0x34, 0xfb, 0x8d, 0xd1, 0x96, 0x39, 0x09, 0x45,
	0x1b, 0x3f, 0x65, 0x77, 0x24, 0x2a, 0xda, 0x1d, 0x89, 0x55, 0xa8, 0x9e, 0xf4, 0xd2, 0x14, 0xc3,
	0x1d, 0x0b, 0xdd, 0x38, 0xa1, 0x80, 0x41, 0x38, 0x26, 0xd6, 0x7f, 0x0e, 0x8b, 0xc3, 0x27, 0xc1,
	0xec, 0x3d, 0x4a, 0xc5, 0xc2, 0x9e, 0x9d, 0x9c, 0x8e, 0x5c, 0x75, 0x72, 0x3a, 0xaa, 0x9f, 0x9c,
	0xae, 0x42, 0x55, 0x8e, 0xa1, 0x14, 0x5e, 0x5c, 0xf1, 0x81, 0x41, 0xd4, 0xea, 0xfc, 0xd9, 0x88,
	0x6c, 0x33, 0x0a, 0x93, 0xe4, 0xd0, 0xdb, 0x26, 0x3f, 0x80, 0x31, 0x52, 0xd5, 0x08, 0xa9, 0xca,
	0x1a, 0x36, 0x86, 0x92, 0xb2, 0x88, 0xca, 0xdc, 0x80, 0x4a, 0x92, 0x3a, 0x69, 0x4f, 0xd0, 0xe7,
	0xa6, 0xea, 0xa6, 0x29, 0xe9, 0x8f, 0x08, 0x28, 0x1b, 0x01, 0xa6, 0x30, 0x1f, 0xc2, 0x04, 0x7f,
	0x0d, 0xe9, 0x75, 0xe5, 0x5d, 0x8b, 0x39, 0xd5, 0xd6, 0x23, 0xf8, 0x45, 0x57, 0x1e, 0x5a, 0x05,
	0xfc, 0x64, 0x3e, 0x80, 0x71, 0x19, 0x6e, 0x54, 0xee, 0x73, 0xf2, 0xc2, 0xe9, 0x90, 0xa2, 0x41,
	0x51, 0x3c, 0xd1, 0xf1, 0x13, 0x41, 0x85, 0x3e, 0x17, 0x65, 0x8f, 0x80, 0x52, 0x14, 0xa6, 0xa8,
	0xff, 0x69, 0x09, 0xaa, 0x9a, 0x88, 0xe6, 0x0a, 0x4c, 0xe6, 0x07, 0x63, 0x25, 0x0a, 0xf5, 0x89,
	0x40, 0x1d, 0x89, 0xf1, 0xc7, 0x02, 0x44, 0x6a, 0x2e, 0x07, 0x0c, 0xa2, 0xe8, 0xb9, 0x03, 0xb5,
	0x58, 0xb4, 0x30, 0xdd, 0xb3, 0x3b, 0xb3, 0x6d, 0xaa, 0x0c, 0xe3, 0x5a, 0xbd, 0x02, 0x93, 0x92,
	0xc4, 0xf7, 0x54, 0x47, 0xc6, 0x80, 0x86, 0x57, 0xbf, 0x07, 0x35, 0x5d, 0x03, 0x57, 0xc4, 0xc5,
	0xdf, 0x94, 0xa0, 0x56, 0xc8, 0xac, 0x75, 0x98, 0x8a, 0xe8, 0xeb, 0x7f, 0x51, 0xf0, 0x6a, 0x14,
	0x78, 0xd9, 0x71, 0xde, 0xf7, 0x60, 0x46, 0xa3, 0xd1, 0xe4, 0x9f, 0xca, 0xa8, 0xe8, 0x15, 0xea,
	0x30, 0x15, 0x8a, 0x73, 0x6d, 0xad, 0x51, 0x5e, 0x2b, 0x14, 0xe7, 0xfa, 0x5a, 0x1a, 0x0d, 0xad,
	0xc5, 0x37, 0x85, 0xa6, 0x32, 0x2a, 0x5c, 0xab, 0xfe, 0xd7, 0x25, 0xa8, 0x6a, 0x4a, 0xff, 0x8d,
	0x95, 0xf3, 0xdf, 0x54, 0xbd, 0xd2, 0x8f, 0x49, 0x86, 0xc6, 0xc4, 0xf7, 0x0b, 0x31, 0xb1, 0x34,
	0xe4, 0x88, 0x45, 0x0b, 0x89, 0xb7, 0xa0, 0xe2, 0xa4, 0xa9, 0xe3, 0x9e, 0xc9, 0x90, 0x50, 0xb7,
	0x3c, 0x1e, 0xfb, 0xad, 0xb6, 0x6a, 0x8d, 0x99, 0xc0, 0xdc, 0x84, 0xea, 0x89, 0x10, 0xa1, 0x2d,
	0xe9, 0xab, 0x57, 0xd1, 0x03, 0x52, 0x6d, 0x33, 0xcf, 0x3d, 0x18, 0xa3, 0x76, 0xb9, 0x56, 0xf8,
	0x4a, 0x82, 0x55, 0x58, 0x96, 0x6e, 0xc4, 0xd6, 0xff, 0xb7, 0x04, 0x90, 0x2f, 0x80, 0x2e, 0xcc,
	0x7b, 0xe8, 0x06, 0x00, 0x05, 0x6a, 0xd0, 0xa7, 0xac, 0x8c, 0x40, 0xd3, 0x7e, 0x4d, 0x01, 0xd5,
	0xf7, 0x35, 0x4d, 0x5c, 0x5d, 0xff, 0xd3, 0xb9, 0x80, 0xea, 0x14, 0xb9, 0x48, 0xa9, 0x59, 0xc1,
	0xd0, 0x69, 0x69, 0x5d, 0x7d, 0xf3, 0xb6, 0x70, 0xd4, 0x0d, 0xa5, 0x6c, 0xf3, 0xa7, 0xc2, 0x19,
	0xb2, 0x24, 0x51, 0x56, 0x2e, 0x2f, 0x89, 0xd4, 0xf5, 0x5d, 0x98, 0xcc, 0x54, 0xa2, 0x15, 0x8f,
	0xda, 0xeb, 0x8a, 0x87, 0xb6, 0x35, 0xfd, 0xae, 0xff, 0x83, 0xca, 0x9a, 0x47, 0x42, 0x9c, 0x3d,
	0x15, 0x41, 0x77, 0x70, 0xb9, 0x49, 0x5a, 0x6e, 0x05, 0x26, 0xe9, 0xd2, 0x17, 0xb9, 0x08, 0xc7,
	0x3e, 0xdd, 0x02, 0xa3, 0x3a, 0x22, 0x07, 0x79, 0x11, 0xdb, 0x5d, 0x6a, 0x4a, 0xb2, 0x41, 0x5e,
	0xc4, 0x87, 0x51, 0x82, 0xfe, 0x4c, 0xbc, 0x34, 0xda, 0xf8, 0x5e, 0xc2, 0x2d, 0x49, 0xb3, 0x8a,
	0x40, 0xac, 0x9c, 0x0d, 0x2f, 0xe1, 0xd9, 0xc4, 0xeb, 0xb9, 0xc2, 0x4e, 0x84, 0x1b, 0x85, 0x5e,
	0x62, 0x77, 0x07, 0xc6, 0xb4, 0x05, 0xc6, 0x1f, 0x31, 0xfa, 0x50, 0x0d, 0x6c, 0x0f, 0x60, 0x8e,
	0x16, 0xc7, 0x51, 0x86, 0x36, 0x60, 0x1e, 0xf9, 0x79, 0x0a, 0x51, 0xcf, 0x9c, 0x0b, 0xdc, 0x85,
	0xc9, 0x97, 0x60, 0x5c, 0x8a, 0x41, 0x9e, 0x58, 0x6b, 0x56, 0xda, 0x24, 0x01, 0xbf, 0x60, 0x1c,
	0xb1, 0x11, 0x6b, 0x3c, 0x6a, 0x22, 0x80, 0x8c, 0xa7, 0x90, 0xa4, 0xbd, 0xa9, 0x1c, 0x49, 0x66,
	0xf8, 0xef, 0x12, 0x4c, 0xf1, 0xfd, 0x17, 0x75, 0xc1, 0x71, 0x48, 0x21, 0xa7, 0x7a, 0x3a, 0xa2,
	0xd5, 0x53, 0x15, 0x82, 0xa3, 0x43, 0x2e, 0x41, 0x8e, 0x69, 0x53, 0xe4, 0x7d, 0x19, 0x96, 0x65,
	0x0a, 0xcb, 0xb9, 0xc2, 0x7d, 0x9b, 0xa8, 0xa5, 0x85, 0xe4, 0x12, 0x8c, 0x7b, 0x4e, 0xea, 0xa8,
	0x3e, 0x6e, 0xb2, 0x59, 0xc1, 0xc7, 0x86, 0x77, 0xf5, 0x2b, 0x2f, 0xc1, 0xf8, 0x29, 0x86, 0x8f,
	0x9d, 0xdd, 0xf0, 0xa3, 0xc7, 0xcf, 0x72, 0x44, 0x5f, 0xce, 0x93, 0x8c, 0xf8, 0x1c, 0xb3, 0x9e,
	0x35, 0x70, 0x37, 0xe5, 0xa8, 0x1d, 0x9d, 0xf3, 0x5b, 0x6f, 0xc1, 0x64, 0x57, 0xc4, 0x1d, 0x76,
	0x91, 0x12, 0x89, 0xbb, 0x3c, 0xfc, 0x4e, 0x0c, 0x49, 0x3d, 0x81, 0xc4, 0xe4, 0x3e, 0xc3, 0x5c,
	0xf5, 0x6e, 0x71, 0x30, 0xcc, 0x1b, 0x61, 0x7d, 0x38, 0x5c, 0x82, 0x71, 0x3f, 0xb1, 0x93, 0x76,
	0x74, 0x2e, 0x2f, 0xc3, 0x54, 0xfc, 0x04, 0xe5, 0xa9, 0x3f, 0x87, 0x1b, 0xb4, 0x65, 0x53, 0x1d,
	0x10, 0x35, 0xc2, 0x57, 0xbe, 0xea, 0x8f, 0xd5, 0x90, 0x50, 0xba, 0xce, 0xe7, 0x10, 0x22, 0xad,
	0x9f, 0xc0, 0x34, 0x8f, 0xae, 0x4e, 0x7c, 0x96, 0x95, 0x2f, 0x3f, 0xf4, 0xc4, 0x85, 0x2a, 0x5f,
	0xf4, 0x60, 0xce, 0x41, 0xb9, 0x1b, 0x25, 0xf6, 0x85, 0x6c, 0x69, 0xc6, 0xba, 0x51, 0xf2, 0x99,
	0x02, 0xf6, 0x95, 0xa9, 0xbb, 0x51, 0xf2, 0xb9, 0x69, 0xc0, 0x68, 0x27, 0x69, 0x49, 0x4b, 0xe3,
	0xcf, 0xfa, 0x2f, 0x47, 0xc0, 0x78, 0xe6, 0xbe, 0x74, 0xe2, 0x81, 0xd6, 0xe9, 0x52, 0xa2, 0x5e,
	0x87, 0x51, 0x27, 0x3d, 0xa3, 0x2d, 0xaa, 0xc5, 0x36, 0x2f, 0x3f, 0xe3, 0x69, 0x22, 0x09, 0x52,
	0x7a, 0xe2, 0x54, 0x7e, 0x6b, 0xbe, 0x92, 0xd2, 0x13, 0xa7, 0xe6, 0x86, 0xf4, 0xb2, 0x62, 0xef,
	0x48, 0xe2, 0x6c, 0xbb, 0xa9, 0x32, 0x59, 0xe6, 0x68, 0x4e, 0x7a, 0x66, 0x9f, 0x67, 0x37, 0x8c,
	0x2a, 0x4e, 0x7a, 0xf6, 0xd2, 0xa7, 0xfb, 0x30, 0x88, 0xc8, 0x3e, 0x4f, 0xc8, 0xe3, 0x15, 0x27,
	0x3d, 0xcb, 0x3e, 0xef, 0xcf, 0x41, 0xb9, 0xe3, 0xa2, 0x27, 0x72, 0x7c, 0x8e, 0x75, 0xdc, 0x86,
	0x87, 0xf9, 0xa1, 0xe3, 0x66, 0x07, 0x5b, 0xbe, 0x27, 0xbf, 0x14, 0x57, 0x3b, 0xae, 0x3c, 0xcd,
	0x6a, 0x78, 0xe6, 0x02, 0x54, 0xce, 0x1d, 0x4a, 0xc6, 0x7c, 0x23, 0xb6, 0x7c, 0xee, 0x60, 0xef,
	0xfd, 0x18, 0xe6, 0x58, 0xc8, 0x20, 0xd0, 0xd5, 0xf6, 0x08, 0x2a, 0xfc, 0xad, 0x42, 0x1a, 0x79,
	0x49, 0x7f, 0x21, 0xfd, 0x23, 0x85, 0x24, 0xab, 0x7f, 0x09, 0xb7, 0x8a, 0xeb, 0xbc, 0xf4, 0xd3,
	0x36, 0x26, 0x57, 0xf1, 0x6b, 0xae, 0x68, 0xae, 0xc2, 0xa4, 0x9f, 0xd0, 0x44, 0x29, 0x78, 0xa2,
	0x99, 0x20, 0xf7, 0x9d, 0xf0, 0x13, 0x5e, 0xb6, 0xfe, 0xa9, 0xbc, 0xe9, 0xb9, 0x1d, 0x04, 0x4a,
	0x3d, 0xfa, 0x2b, 0x6c, 0x0d, 0x6c, 0xb8, 0xaa, 0x9b, 0x6f, 0x08, 0x43, 0xf6, 0x2a, 0x3b, 0x32,
	0x44, 0x87, 0x2d, 0x7a, 0xdd, 0x9b, 0xd7, 0xbf, 0x07, 0x6b, 0x83, 0xb2, 0x1d, 0xd1, 0xfd, 0x16,
	0xed, 0x1b, 0xfd, 0xfb, 0x50, 0x69, 0xf1, 0x89, 0x2c, 0x0b, 0x78, 0x6f, 0x98, 0x80, 0x83, 0x5c,
	0x4d, 0xc9, 0x53, 0xff, 0xa3, 0x12, 0xdc, 0x7a, 0x2d, 0x25, 0x86, 0x69, 0x22, 0x42, 0x4e, 0xa3,
	0x03, 0x1f, 0x9b, 0x74, 0x1e, 0x19, 0xa6, 0x48, 0x6a, 0xfe, 0x00, 0xca, 0x7c, 0x91, 0xe5, 0xf5,
	0xb1, 0xc1, 0x44, 0xf5, 0x3f, 0x94, 0x03, 0xcb, 0xa5, 0xd5, 0xae, 0x52, 0x13, 0x89, 0x23, 0x23,
	0x9b, 0xf6, 0x5b, 0x85, 0xea, 0xb9, 0x10, 0x67, 0x41, 0xdf, 0x26, 0x14, 0xc7, 0x37, 0x30, 0x08,
	0x57, 0x33, 0x6f, 0xc0, 0x84, 0x13, 0x04, 0x8c, 0xe5, 0xb2, 0x38, 0xee, 0x04, 0x01, 0xa2, 0xea,
	0x7f, 0x52, 0x82, 0x65, 0x39, 0x9b, 0x25, 0x67, 0xfb, 0xaf, 0x9c, 0xa0, 0xe7, 0xa4, 0xdf, 0xf0,
	0x6e, 0xe4, 0x32, 0x4c, 0xb8, 0x51, 0xa7, 0x1b, 0x88, 0x34, 0x2b, 0xc9, 0xea, 0x19, 0x1b, 0x34,
	0x79, 0x57, 0x76, 0x8c, 0xac, 0x33, 0xe4, 0x1a, 0xae, 0x24, 0xa8, 0xff, 0x6d, 0x49, 0x76, 0x00,
	0x28, 0xc9, 0xb7, 0xbf, 0xae, 0x3d, 0xec, 0x82, 0xfd, 0x32, 0x4d, 0x50, 0x2d, 0xc1, 0xa5, 0x5f,
	0x9e, 0x68, 0x30, 0x44, 0x93, 0xb4, 0xf2, 0x35, 0x92, 0x6e, 0xfc, 0xa3, 0x3a, 0xcc, 0xce, 0xe7,
	0x59, 0x73, 0x19, 0x16, 0x1b, 0xe1, 0x2b, 0x27, 0xf0, 0xbd, 0x01, 0x8c, 0xf1, 0x86, 0x69, 0x40,
	0x2d, 0xbf, 0x98, 0xfa, 0xa2, 0x6b, 0x94, 0xcc, 0x69, 0x00, 0xf5, 0x49, 0xe9, 0x45, 0xd7, 0x18,
	0x31, 0xe7, 0xc1, 0x68, 0x0c, 0xdc, 0xab, 0x33, 0x46, 0xcd, 0x05, 0x98, 0x95, 0xd0, 0x17, 0x89,
	0x88, 0x25, 0x78, 0x0c, 0xc1, 0xfc, 0x55, 0xea, 0x99, 0xe8, 0xbc, 0x92, 0x77, 0x13, 0x8d, 0x32,
	0x81, 0x33, 0xb2, 0x17, 0x89, 0x08, 0x44, 0x92, 0x18, 0x15, 0x73, 0x51, 0x6a, 0x75, 0x57, 0x3f,
	0x97, 0x37, 0xc6, 0x37, 0xf6, 0x65, 0x43, 0xae, 0x0f, 0x9a, 0x26, 0x40, 0x85, 0x47, 0x35, 0xe3,
	0x0d, 0xb3, 0x0a, 0xe3, 0xb9, 0xc0, 0x55, 0x18, 0x97, 0xa2, 0x18, 0x23, 0x48, 0xc5, 0x33, 0x87,
	0x31, 0xba, 0xf1, 0x9e, 0xba, 0x8e, 0x94, 0xf7, 0xe6, 0x88, 0xe7, 0x06, 0xd1, 0x78, 0xc3, 0x9c,
	0x81, 0xea, 0x0e, 0xb6, 0x92, 0x12, 0x50, 0x32, 0x27, 0x60, 0x0c, 0x33, 0x8f, 0x31, 0xb2, 0xf1,
	0x73, 0x98, 0x1b, 0xb8, 0xa4, 0x2f, 0xcb, 0xf0, 0xf4, 0x93, 0xfd, 0x43, 0xa9, 0x4c, 0xa9, 0xc1,
	0x19, 0xa8, 0x3e, 0xd9, 0x3f, 0x6c, 0x0a, 0xb7, 0x8d, 0x7a, 0x35, 0x4a, 0xa4, 0xd2, 0xfd, 0xc3,
	0xec, 0x28, 0xda, 0x18, 0x91, 0x90, 0x1d, 0x27, 0xe1, 0xeb, 0x7e, 0xc6, 0xa8, 0x64, 0xc2, 0xba,
	0xf1, 0xca, 0x4f, 0xfb, 0xc6, 0x18, 0x6a, 0xfd, 0xc9, 0xfe, 0xe1, 0x5e, 0x2f, 0x6c, 0x89, 0x28,
	0x34, 0xca, 0x1b, 0x3d, 0x65, 0x17, 0x6e, 0x60, 0x68, 0xe7, 0x83, 0xe3, 0xe2, 0xce, 0x35, 0x98,
	0x78, 0x72, 0x70, 0xbc, 0xe7, 0xf8, 0x41, 0xdf, 0x28, 0xc9, 0x27, 0x6a, 0xf6, 0x8d, 0x11, 0xda,
	0xe0, 0xe0, 0x58, 0x19, 0xd2, 0x18, 0x35, 0xe7, 0x60, 0xe6, 0xc9, 0xc1, 0xb1, 0xfd, 0x4c, 0x74,
	0xa2, 0xd8, 0x39, 0xf1, 0x03, 0xdf, 0x31, 0xc6, 0x24, 0x95, 0x8a, 0x6e, 0xa3, 0xbc, 0xf1, 0x2f,
	0x15, 0xf9, 0xe2, 0xc5, 0x4e, 0x04, 0xb9, 0x11, 0x52, 0xdc, 0x5f, 0x03, 0xca, 0xdb, 0xb5, 0x46,
	0xc9, 0x9c, 0x85, 0x29, 0x04, 0x6e, 0xab, 0x1b, 0xb5, 0xc6, 0x08, 0xca, 0x8e, 0xa0, 0x17, 0xd9,
	0x25, 0x5a, 0x63, 0x14, 0x7d, 0x32, 0x87, 0xe9, 0xd7, 0x4c, 0x8d, 0x31, 0xb5, 0xee, 0x8b, 0xfc,
	0x92, 0xa8, 0x51, 0x36, 0x6f, 0xc0, 0x42, 0x0e, 0xd4, 0x2e, 0x42, 0x1a, 0x15, 0xd3, 0x82, 0xf9,
	0x1c, 0x95, 0x5f, 0x7a, 0x34, 0xc6, 0xcd, 0x25, 0x98, 0xcb, 0x31, 0xd9, 0xbd, 0x5c, 0x63, 0x02,
	0x3d, 0x4f, 0x5b, 0x4d, 0x7e, 0x12, 0x31, 0x26, 0xcd, 0xbb, 0xb0, 0xaa, 0x6d, 0x3d, 0xec, 0x92,
	0xad, 0x01, 0xc5, 0xfd, 0xf2, 0xd3, 0x2e, 0xa3, 0xaa, 0xf6, 0xfb, 0xb8, 0x78, 0xd7, 0xd6, 0xa8,
	0x99, 0x2b, 0xb0, 0x94, 0xb3, 0x14, 0xae, 0xc8, 0x1a, 0x53, 0x6a, 0xbd, 0x4b, 0x51, 0x36, 0x8d,
	0xb1, 0xc7, 0x6c, 0xf9, 0x5d, 0x51, 0x63, 0x26, 0x7f, 0xab, 0xc2, 0x0d, 0x52, 0xc3, 0x18, 0x40,
	0xa8, 0xcb, 0x6f, 0xc6, 0x6c, 0xae, 0xbc, 0x81, 0x8f, 0xda, 0x86, 0x69, 0xde, 0x04, 0x2b, 0x97,
	0xac, 0xf8, 0x2d, 0xd9, 0x98, 0x53, 0x8c, 0x9f, 0x0c, 0xde, 0xf4, 0x34, 0xe6, 0x95, 0xd4, 0x47,
	0x03, 0x97, 0x3a, 0x8d, 0x85, 0x7c, 0xc9, 0xcb, 0x97, 0x37, 0x8d, 0xc5, 0xa2, 0x37, 0x90, 0x39,
	0x96, 0x2e, 0x9b, 0x83, 0xe0, 0x96, 0xa2, 0x3d, 0xc8, 0x2e, 0x64, 0x1a, 0x37, 0x94, 0x4e, 0xf6,
	0xb4, 0x1b, 0x98, 0xc6, 0xb2, 0x82, 0xee, 0x6a, 0x37, 0x93, 0x8c, 0x95, 0xe2, 0x5e, 0xd8, 0x99,
	0x1a, 0x37, 0xd5, 0x5e, 0xbb, 0x85, 0x4b, 0x95, 0xc6, 0x2d, 0xcc, 0x51, 0x04, 0xd7, 0x2f, 0x51,
	0x1a, 0xb7, 0x15, 0xf8, 0x89, 0x7e, 0x67, 0xd2, 0x58, 0xc5, 0x90, 0x46, 0xb0, 0xfa, 0xc7, 0x2d,
	0x63, 0x4d, 0xe9, 0xa3, 0x39, 0xf0, 0xc1, 0xd5, 0xb8, 0xb3, 0x71, 0x0e, 0x33, 0x03, 0x6d, 0x22,
	0x8a, 0xfb, 0x6c, 0xd7, 0x7e, 0xb9, 0xdd, 0xb4, 0xb7, 0xed, 0xc6, 0xf3, 0x4f, 0xb7, 0x0f, 0x1a,
	0x7b, 0x9c, 0x8c, 0x33, 0xe8, 0xf6, 0xf1, 0xc7, 0x9c, 0x4b, 0x32, 0xc8, 0xde, 0xfe, 0x63, 0x4e,
	0xc7, 0x39, 0xcd, 0xd1, 0x31, 0xd1, 0x8d, 0x5e, 0x82, 0x22, 0xed, 0xd8, 0xce, 0xda, 0x3f, 0x7f,
	0x75, 0xbb, 0xf4, 0xab, 0xaf, 0x6e, 0x97, 0xfe, 0xf3, 0xab, 0xdb, 0xa5, 0xbf, 0xfc, 0xaf, 0xdb,
	0x6f, 0x3c, 0x2d, 0xfd, 0x6e, 0x4d, 0xff, 0x77, 0xb4, 0x93, 0x0a, 0xfd, 0xf9, 0xd1, 0xff, 0x05,
	0x00, 0x00, 0xff, 0xff, 0xae, 0xaf, 0x83, 0xe0, 0xaa, 0x37, 0x00, 0x00,
}
