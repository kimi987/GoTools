// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/pb/shared_proto/hebi.proto
// DO NOT EDIT!

package shared_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 房间状态
type HebiRoomState int32

const (
	HebiRoomState_HebiRoomInvalidState HebiRoomState = 0
	HebiRoomState_HebiRoomEmpty        HebiRoomState = 1
	HebiRoomState_HebiRoomWait         HebiRoomState = 2
	HebiRoomState_HebiRoomHebiRunning  HebiRoomState = 3
	HebiRoomState_HebiRoomRobProtect   HebiRoomState = 4
)

var HebiRoomState_name = map[int32]string{
	0: "HebiRoomInvalidState",
	1: "HebiRoomEmpty",
	2: "HebiRoomWait",
	3: "HebiRoomHebiRunning",
	4: "HebiRoomRobProtect",
}
var HebiRoomState_value = map[string]int32{
	"HebiRoomInvalidState": 0,
	"HebiRoomEmpty":        1,
	"HebiRoomWait":         2,
	"HebiRoomHebiRunning":  3,
	"HebiRoomRobProtect":   4,
}

func (x HebiRoomState) String() string {
	return proto.EnumName(HebiRoomState_name, int32(x))
}
func (HebiRoomState) EnumDescriptor() ([]byte, []int) { return fileDescriptorHebi, []int{0} }

type HebiMiscProto struct {
	DailyRobCount      int32    `protobuf:"varint,1,opt,name=daily_rob_count,json=dailyRobCount,proto3" json:"daily_rob_count,omitempty"`
	RobCdDuration      int32    `protobuf:"varint,2,opt,name=rob_cd_duration,json=robCdDuration,proto3" json:"rob_cd_duration,omitempty"`
	RobPosCdDuration   int32    `protobuf:"varint,9,opt,name=rob_pos_cd_duration,json=robPosCdDuration,proto3" json:"rob_pos_cd_duration,omitempty"`
	RobProtectDuration int32    `protobuf:"varint,3,opt,name=rob_protect_duration,json=robProtectDuration,proto3" json:"rob_protect_duration,omitempty"`
	HebiDuration       int32    `protobuf:"varint,4,opt,name=hebi_duration,json=hebiDuration,proto3" json:"hebi_duration,omitempty"`
	CopySelfGoods      int32    `protobuf:"varint,5,opt,name=copy_self_goods,json=copySelfGoods,proto3" json:"copy_self_goods,omitempty"`
	RoomsMaxSize       int32    `protobuf:"varint,6,opt,name=rooms_max_size,json=roomsMaxSize,proto3" json:"rooms_max_size,omitempty"`
	CombatScene        string   `protobuf:"bytes,7,opt,name=combat_scene,json=combatScene,proto3" json:"combat_scene,omitempty"`
	HeShiBiType        HebiType `protobuf:"varint,8,opt,name=he_shi_bi_type,json=heShiBiType,proto3,enum=proto.HebiType" json:"he_shi_bi_type,omitempty"`
}

func (m *HebiMiscProto) Reset()                    { *m = HebiMiscProto{} }
func (m *HebiMiscProto) String() string            { return proto.CompactTextString(m) }
func (*HebiMiscProto) ProtoMessage()               {}
func (*HebiMiscProto) Descriptor() ([]byte, []int) { return fileDescriptorHebi, []int{0} }

func (m *HebiMiscProto) GetDailyRobCount() int32 {
	if m != nil {
		return m.DailyRobCount
	}
	return 0
}

func (m *HebiMiscProto) GetRobCdDuration() int32 {
	if m != nil {
		return m.RobCdDuration
	}
	return 0
}

func (m *HebiMiscProto) GetRobPosCdDuration() int32 {
	if m != nil {
		return m.RobPosCdDuration
	}
	return 0
}

func (m *HebiMiscProto) GetRobProtectDuration() int32 {
	if m != nil {
		return m.RobProtectDuration
	}
	return 0
}

func (m *HebiMiscProto) GetHebiDuration() int32 {
	if m != nil {
		return m.HebiDuration
	}
	return 0
}

func (m *HebiMiscProto) GetCopySelfGoods() int32 {
	if m != nil {
		return m.CopySelfGoods
	}
	return 0
}

func (m *HebiMiscProto) GetRoomsMaxSize() int32 {
	if m != nil {
		return m.RoomsMaxSize
	}
	return 0
}

func (m *HebiMiscProto) GetCombatScene() string {
	if m != nil {
		return m.CombatScene
	}
	return ""
}

func (m *HebiMiscProto) GetHeShiBiType() HebiType {
	if m != nil {
		return m.HeShiBiType
	}
	return HebiType_HebiInvalidType
}

type HebiPrizeProto struct {
	Id        int32       `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
	HeroLevel int32       `protobuf:"varint,1,opt,name=hero_level,json=heroLevel,proto3" json:"hero_level,omitempty"`
	HebiType  HebiType    `protobuf:"varint,2,opt,name=hebi_type,json=hebiType,proto3,enum=proto.HebiType" json:"hebi_type,omitempty"`
	Quality   int32       `protobuf:"varint,3,opt,name=quality,proto3" json:"quality,omitempty"`
	Prize     *PrizeProto `protobuf:"bytes,4,opt,name=prize" json:"prize,omitempty"`
}

func (m *HebiPrizeProto) Reset()                    { *m = HebiPrizeProto{} }
func (m *HebiPrizeProto) String() string            { return proto.CompactTextString(m) }
func (*HebiPrizeProto) ProtoMessage()               {}
func (*HebiPrizeProto) Descriptor() ([]byte, []int) { return fileDescriptorHebi, []int{1} }

func (m *HebiPrizeProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *HebiPrizeProto) GetHeroLevel() int32 {
	if m != nil {
		return m.HeroLevel
	}
	return 0
}

func (m *HebiPrizeProto) GetHebiType() HebiType {
	if m != nil {
		return m.HebiType
	}
	return HebiType_HebiInvalidType
}

func (m *HebiPrizeProto) GetQuality() int32 {
	if m != nil {
		return m.Quality
	}
	return 0
}

func (m *HebiPrizeProto) GetPrize() *PrizeProto {
	if m != nil {
		return m.Prize
	}
	return nil
}

type HeroHebiProto struct {
	CaptainId       int32 `protobuf:"varint,1,opt,name=captain_id,json=captainId,proto3" json:"captain_id,omitempty"`
	RobCount        int32 `protobuf:"varint,2,opt,name=rob_count,json=robCount,proto3" json:"rob_count,omitempty"`
	RobPosCdEndTime int32 `protobuf:"varint,5,opt,name=rob_pos_cd_end_time,json=robPosCdEndTime,proto3" json:"rob_pos_cd_end_time,omitempty"`
	RobCdEndTime    int32 `protobuf:"varint,3,opt,name=rob_cd_end_time,json=robCdEndTime,proto3" json:"rob_cd_end_time,omitempty"`
	CurrentGoodsId  int32 `protobuf:"varint,4,opt,name=current_goods_id,json=currentGoodsId,proto3" json:"current_goods_id,omitempty"`
}

func (m *HeroHebiProto) Reset()                    { *m = HeroHebiProto{} }
func (m *HeroHebiProto) String() string            { return proto.CompactTextString(m) }
func (*HeroHebiProto) ProtoMessage()               {}
func (*HeroHebiProto) Descriptor() ([]byte, []int) { return fileDescriptorHebi, []int{2} }

func (m *HeroHebiProto) GetCaptainId() int32 {
	if m != nil {
		return m.CaptainId
	}
	return 0
}

func (m *HeroHebiProto) GetRobCount() int32 {
	if m != nil {
		return m.RobCount
	}
	return 0
}

func (m *HeroHebiProto) GetRobPosCdEndTime() int32 {
	if m != nil {
		return m.RobPosCdEndTime
	}
	return 0
}

func (m *HeroHebiProto) GetRobCdEndTime() int32 {
	if m != nil {
		return m.RobCdEndTime
	}
	return 0
}

func (m *HeroHebiProto) GetCurrentGoodsId() int32 {
	if m != nil {
		return m.CurrentGoodsId
	}
	return 0
}

type HebiInfoProto struct {
	Room []*HebiRoomProto `protobuf:"bytes,1,rep,name=room" json:"room,omitempty"`
}

func (m *HebiInfoProto) Reset()                    { *m = HebiInfoProto{} }
func (m *HebiInfoProto) String() string            { return proto.CompactTextString(m) }
func (*HebiInfoProto) ProtoMessage()               {}
func (*HebiInfoProto) Descriptor() ([]byte, []int) { return fileDescriptorHebi, []int{3} }

func (m *HebiInfoProto) GetRoom() []*HebiRoomProto {
	if m != nil {
		return m.Room
	}
	return nil
}

// 自己的合璧战斗记录
type HebiHeroRecordProto struct {
	Record []*HebiHeroSingleRecordProto `protobuf:"bytes,1,rep,name=record" json:"record,omitempty"`
}

func (m *HebiHeroRecordProto) Reset()                    { *m = HebiHeroRecordProto{} }
func (m *HebiHeroRecordProto) String() string            { return proto.CompactTextString(m) }
func (*HebiHeroRecordProto) ProtoMessage()               {}
func (*HebiHeroRecordProto) Descriptor() ([]byte, []int) { return fileDescriptorHebi, []int{4} }

func (m *HebiHeroRecordProto) GetRecord() []*HebiHeroSingleRecordProto {
	if m != nil {
		return m.Record
	}
	return nil
}

// 自己的单条合璧战斗记录
type HebiHeroSingleRecordProto struct {
	Self          *HeroBasicProto   `protobuf:"bytes,1,opt,name=self" json:"self,omitempty"`
	Target        *HeroBasicProto   `protobuf:"bytes,2,opt,name=target" json:"target,omitempty"`
	SelfCaptain   *HebiCaptainProto `protobuf:"bytes,3,opt,name=self_captain,json=selfCaptain" json:"self_captain,omitempty"`
	TargetCaptain *HebiCaptainProto `protobuf:"bytes,4,opt,name=target_captain,json=targetCaptain" json:"target_captain,omitempty"`
	Combat        *CombatShareProto `protobuf:"bytes,5,opt,name=combat" json:"combat,omitempty"`
	IsRob         bool              `protobuf:"varint,6,opt,name=is_rob,json=isRob,proto3" json:"is_rob,omitempty"`
	IsAtk         bool              `protobuf:"varint,7,opt,name=is_atk,json=isAtk,proto3" json:"is_atk,omitempty"`
	Win           bool              `protobuf:"varint,8,opt,name=win,proto3" json:"win,omitempty"`
	Time          int32             `protobuf:"varint,9,opt,name=time,proto3" json:"time,omitempty"`
	HebiType      HebiType          `protobuf:"varint,10,opt,name=hebi_type,json=hebiType,proto3,enum=proto.HebiType" json:"hebi_type,omitempty"`
	FightNum      int32             `protobuf:"varint,11,opt,name=fight_num,json=fightNum,proto3" json:"fight_num,omitempty"`
}

func (m *HebiHeroSingleRecordProto) Reset()                    { *m = HebiHeroSingleRecordProto{} }
func (m *HebiHeroSingleRecordProto) String() string            { return proto.CompactTextString(m) }
func (*HebiHeroSingleRecordProto) ProtoMessage()               {}
func (*HebiHeroSingleRecordProto) Descriptor() ([]byte, []int) { return fileDescriptorHebi, []int{5} }

func (m *HebiHeroSingleRecordProto) GetSelf() *HeroBasicProto {
	if m != nil {
		return m.Self
	}
	return nil
}

func (m *HebiHeroSingleRecordProto) GetTarget() *HeroBasicProto {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *HebiHeroSingleRecordProto) GetSelfCaptain() *HebiCaptainProto {
	if m != nil {
		return m.SelfCaptain
	}
	return nil
}

func (m *HebiHeroSingleRecordProto) GetTargetCaptain() *HebiCaptainProto {
	if m != nil {
		return m.TargetCaptain
	}
	return nil
}

func (m *HebiHeroSingleRecordProto) GetCombat() *CombatShareProto {
	if m != nil {
		return m.Combat
	}
	return nil
}

func (m *HebiHeroSingleRecordProto) GetIsRob() bool {
	if m != nil {
		return m.IsRob
	}
	return false
}

func (m *HebiHeroSingleRecordProto) GetIsAtk() bool {
	if m != nil {
		return m.IsAtk
	}
	return false
}

func (m *HebiHeroSingleRecordProto) GetWin() bool {
	if m != nil {
		return m.Win
	}
	return false
}

func (m *HebiHeroSingleRecordProto) GetTime() int32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *HebiHeroSingleRecordProto) GetHebiType() HebiType {
	if m != nil {
		return m.HebiType
	}
	return HebiType_HebiInvalidType
}

func (m *HebiHeroSingleRecordProto) GetFightNum() int32 {
	if m != nil {
		return m.FightNum
	}
	return 0
}

type HebiRoomProto struct {
	RoomId               int32             `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	State                HebiRoomState     `protobuf:"varint,2,opt,name=state,proto3,enum=proto.HebiRoomState" json:"state,omitempty"`
	Host                 *HeroBasicProto   `protobuf:"bytes,3,opt,name=host" json:"host,omitempty"`
	HostCaptain          *HebiCaptainProto `protobuf:"bytes,4,opt,name=host_captain,json=hostCaptain" json:"host_captain,omitempty"`
	HostGoodsId          int32             `protobuf:"varint,5,opt,name=host_goods_id,json=hostGoodsId,proto3" json:"host_goods_id,omitempty"`
	Guest                *HeroBasicProto   `protobuf:"bytes,6,opt,name=guest" json:"guest,omitempty"`
	GuestCatpain         *HebiCaptainProto `protobuf:"bytes,7,opt,name=guest_catpain,json=guestCatpain" json:"guest_catpain,omitempty"`
	GuestGoodsId         int32             `protobuf:"varint,8,opt,name=guest_goods_id,json=guestGoodsId,proto3" json:"guest_goods_id,omitempty"`
	CopySelf             bool              `protobuf:"varint,9,opt,name=copy_self,json=copySelf,proto3" json:"copy_self,omitempty"`
	HebiWaitExpiredTime  int32             `protobuf:"varint,13,opt,name=hebi_wait_expired_time,json=hebiWaitExpiredTime,proto3" json:"hebi_wait_expired_time,omitempty"`
	HebiCompleteTime     int32             `protobuf:"varint,10,opt,name=hebi_complete_time,json=hebiCompleteTime,proto3" json:"hebi_complete_time,omitempty"`
	HebiRobProtectedTime int32             `protobuf:"varint,11,opt,name=hebi_rob_protected_time,json=hebiRobProtectedTime,proto3" json:"hebi_rob_protected_time,omitempty"`
	PrizeId              int32             `protobuf:"varint,12,opt,name=prize_id,json=prizeId,proto3" json:"prize_id,omitempty"`
}

func (m *HebiRoomProto) Reset()                    { *m = HebiRoomProto{} }
func (m *HebiRoomProto) String() string            { return proto.CompactTextString(m) }
func (*HebiRoomProto) ProtoMessage()               {}
func (*HebiRoomProto) Descriptor() ([]byte, []int) { return fileDescriptorHebi, []int{6} }

func (m *HebiRoomProto) GetRoomId() int32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *HebiRoomProto) GetState() HebiRoomState {
	if m != nil {
		return m.State
	}
	return HebiRoomState_HebiRoomInvalidState
}

func (m *HebiRoomProto) GetHost() *HeroBasicProto {
	if m != nil {
		return m.Host
	}
	return nil
}

func (m *HebiRoomProto) GetHostCaptain() *HebiCaptainProto {
	if m != nil {
		return m.HostCaptain
	}
	return nil
}

func (m *HebiRoomProto) GetHostGoodsId() int32 {
	if m != nil {
		return m.HostGoodsId
	}
	return 0
}

func (m *HebiRoomProto) GetGuest() *HeroBasicProto {
	if m != nil {
		return m.Guest
	}
	return nil
}

func (m *HebiRoomProto) GetGuestCatpain() *HebiCaptainProto {
	if m != nil {
		return m.GuestCatpain
	}
	return nil
}

func (m *HebiRoomProto) GetGuestGoodsId() int32 {
	if m != nil {
		return m.GuestGoodsId
	}
	return 0
}

func (m *HebiRoomProto) GetCopySelf() bool {
	if m != nil {
		return m.CopySelf
	}
	return false
}

func (m *HebiRoomProto) GetHebiWaitExpiredTime() int32 {
	if m != nil {
		return m.HebiWaitExpiredTime
	}
	return 0
}

func (m *HebiRoomProto) GetHebiCompleteTime() int32 {
	if m != nil {
		return m.HebiCompleteTime
	}
	return 0
}

func (m *HebiRoomProto) GetHebiRobProtectedTime() int32 {
	if m != nil {
		return m.HebiRobProtectedTime
	}
	return 0
}

func (m *HebiRoomProto) GetPrizeId() int32 {
	if m != nil {
		return m.PrizeId
	}
	return 0
}

type HebiCaptainProto struct {
	Id          int32             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        *CaptainNameProto `protobuf:"bytes,14,opt,name=name" json:"name,omitempty"`
	IconId      string            `protobuf:"bytes,20,opt,name=icon_id,json=iconId,proto3" json:"icon_id,omitempty"`
	Race        Race              `protobuf:"varint,4,opt,name=race,proto3,enum=proto.Race" json:"race,omitempty"`
	Quality     Quality           `protobuf:"varint,5,opt,name=quality,proto3,enum=proto.Quality" json:"quality,omitempty"`
	FightAmount int32             `protobuf:"varint,8,opt,name=fight_amount,json=fightAmount,proto3" json:"fight_amount,omitempty"`
	Level       int32             `protobuf:"varint,10,opt,name=level,proto3" json:"level,omitempty"`
}

func (m *HebiCaptainProto) Reset()                    { *m = HebiCaptainProto{} }
func (m *HebiCaptainProto) String() string            { return proto.CompactTextString(m) }
func (*HebiCaptainProto) ProtoMessage()               {}
func (*HebiCaptainProto) Descriptor() ([]byte, []int) { return fileDescriptorHebi, []int{7} }

func (m *HebiCaptainProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *HebiCaptainProto) GetName() *CaptainNameProto {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *HebiCaptainProto) GetIconId() string {
	if m != nil {
		return m.IconId
	}
	return ""
}

func (m *HebiCaptainProto) GetRace() Race {
	if m != nil {
		return m.Race
	}
	return Race_InvalidRace
}

func (m *HebiCaptainProto) GetQuality() Quality {
	if m != nil {
		return m.Quality
	}
	return Quality_InvalidQuality
}

func (m *HebiCaptainProto) GetFightAmount() int32 {
	if m != nil {
		return m.FightAmount
	}
	return 0
}

func (m *HebiCaptainProto) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func init() {
	proto.RegisterType((*HebiMiscProto)(nil), "proto.HebiMiscProto")
	proto.RegisterType((*HebiPrizeProto)(nil), "proto.HebiPrizeProto")
	proto.RegisterType((*HeroHebiProto)(nil), "proto.HeroHebiProto")
	proto.RegisterType((*HebiInfoProto)(nil), "proto.HebiInfoProto")
	proto.RegisterType((*HebiHeroRecordProto)(nil), "proto.HebiHeroRecordProto")
	proto.RegisterType((*HebiHeroSingleRecordProto)(nil), "proto.HebiHeroSingleRecordProto")
	proto.RegisterType((*HebiRoomProto)(nil), "proto.HebiRoomProto")
	proto.RegisterType((*HebiCaptainProto)(nil), "proto.HebiCaptainProto")
	proto.RegisterEnum("proto.HebiRoomState", HebiRoomState_name, HebiRoomState_value)
}
func (m *HebiMiscProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HebiMiscProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DailyRobCount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.DailyRobCount))
	}
	if m.RobCdDuration != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.RobCdDuration))
	}
	if m.RobProtectDuration != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.RobProtectDuration))
	}
	if m.HebiDuration != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.HebiDuration))
	}
	if m.CopySelfGoods != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.CopySelfGoods))
	}
	if m.RoomsMaxSize != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.RoomsMaxSize))
	}
	if len(m.CombatScene) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintHebi(dAtA, i, uint64(len(m.CombatScene)))
		i += copy(dAtA[i:], m.CombatScene)
	}
	if m.HeShiBiType != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.HeShiBiType))
	}
	if m.RobPosCdDuration != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.RobPosCdDuration))
	}
	return i, nil
}

func (m *HebiPrizeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HebiPrizeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroLevel != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.HeroLevel))
	}
	if m.HebiType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.HebiType))
	}
	if m.Quality != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.Quality))
	}
	if m.Prize != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.Prize.Size()))
		n1, err := m.Prize.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Id != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *HeroHebiProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeroHebiProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CaptainId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.CaptainId))
	}
	if m.RobCount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.RobCount))
	}
	if m.RobCdEndTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.RobCdEndTime))
	}
	if m.CurrentGoodsId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.CurrentGoodsId))
	}
	if m.RobPosCdEndTime != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.RobPosCdEndTime))
	}
	return i, nil
}

func (m *HebiInfoProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HebiInfoProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Room) > 0 {
		for _, msg := range m.Room {
			dAtA[i] = 0xa
			i++
			i = encodeVarintHebi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *HebiHeroRecordProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HebiHeroRecordProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Record) > 0 {
		for _, msg := range m.Record {
			dAtA[i] = 0xa
			i++
			i = encodeVarintHebi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *HebiHeroSingleRecordProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HebiHeroSingleRecordProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Self != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.Self.Size()))
		n2, err := m.Self.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Target != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.Target.Size()))
		n3, err := m.Target.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.SelfCaptain != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.SelfCaptain.Size()))
		n4, err := m.SelfCaptain.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.TargetCaptain != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.TargetCaptain.Size()))
		n5, err := m.TargetCaptain.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Combat != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.Combat.Size()))
		n6, err := m.Combat.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.IsRob {
		dAtA[i] = 0x30
		i++
		if m.IsRob {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsAtk {
		dAtA[i] = 0x38
		i++
		if m.IsAtk {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Win {
		dAtA[i] = 0x40
		i++
		if m.Win {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Time != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.Time))
	}
	if m.HebiType != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.HebiType))
	}
	if m.FightNum != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.FightNum))
	}
	return i, nil
}

func (m *HebiRoomProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HebiRoomProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoomId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.RoomId))
	}
	if m.State != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.State))
	}
	if m.Host != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.Host.Size()))
		n7, err := m.Host.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.HostCaptain != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.HostCaptain.Size()))
		n8, err := m.HostCaptain.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.HostGoodsId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.HostGoodsId))
	}
	if m.Guest != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.Guest.Size()))
		n9, err := m.Guest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.GuestCatpain != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.GuestCatpain.Size()))
		n10, err := m.GuestCatpain.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.GuestGoodsId != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.GuestGoodsId))
	}
	if m.CopySelf {
		dAtA[i] = 0x48
		i++
		if m.CopySelf {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.HebiCompleteTime != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.HebiCompleteTime))
	}
	if m.HebiRobProtectedTime != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.HebiRobProtectedTime))
	}
	if m.PrizeId != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.PrizeId))
	}
	if m.HebiWaitExpiredTime != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.HebiWaitExpiredTime))
	}
	return i, nil
}

func (m *HebiCaptainProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HebiCaptainProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.Id))
	}
	if m.Race != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.Race))
	}
	if m.Quality != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.Quality))
	}
	if m.FightAmount != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.FightAmount))
	}
	if m.Level != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.Level))
	}
	if m.Name != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintHebi(dAtA, i, uint64(m.Name.Size()))
		n11, err := m.Name.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if len(m.IconId) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintHebi(dAtA, i, uint64(len(m.IconId)))
		i += copy(dAtA[i:], m.IconId)
	}
	return i, nil
}

func encodeFixed64Hebi(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Hebi(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintHebi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *HebiMiscProto) Size() (n int) {
	var l int
	_ = l
	if m.DailyRobCount != 0 {
		n += 1 + sovHebi(uint64(m.DailyRobCount))
	}
	if m.RobCdDuration != 0 {
		n += 1 + sovHebi(uint64(m.RobCdDuration))
	}
	if m.RobProtectDuration != 0 {
		n += 1 + sovHebi(uint64(m.RobProtectDuration))
	}
	if m.HebiDuration != 0 {
		n += 1 + sovHebi(uint64(m.HebiDuration))
	}
	if m.CopySelfGoods != 0 {
		n += 1 + sovHebi(uint64(m.CopySelfGoods))
	}
	if m.RoomsMaxSize != 0 {
		n += 1 + sovHebi(uint64(m.RoomsMaxSize))
	}
	l = len(m.CombatScene)
	if l > 0 {
		n += 1 + l + sovHebi(uint64(l))
	}
	if m.HeShiBiType != 0 {
		n += 1 + sovHebi(uint64(m.HeShiBiType))
	}
	if m.RobPosCdDuration != 0 {
		n += 1 + sovHebi(uint64(m.RobPosCdDuration))
	}
	return n
}

func (m *HebiPrizeProto) Size() (n int) {
	var l int
	_ = l
	if m.HeroLevel != 0 {
		n += 1 + sovHebi(uint64(m.HeroLevel))
	}
	if m.HebiType != 0 {
		n += 1 + sovHebi(uint64(m.HebiType))
	}
	if m.Quality != 0 {
		n += 1 + sovHebi(uint64(m.Quality))
	}
	if m.Prize != nil {
		l = m.Prize.Size()
		n += 1 + l + sovHebi(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovHebi(uint64(m.Id))
	}
	return n
}

func (m *HeroHebiProto) Size() (n int) {
	var l int
	_ = l
	if m.CaptainId != 0 {
		n += 1 + sovHebi(uint64(m.CaptainId))
	}
	if m.RobCount != 0 {
		n += 1 + sovHebi(uint64(m.RobCount))
	}
	if m.RobCdEndTime != 0 {
		n += 1 + sovHebi(uint64(m.RobCdEndTime))
	}
	if m.CurrentGoodsId != 0 {
		n += 1 + sovHebi(uint64(m.CurrentGoodsId))
	}
	if m.RobPosCdEndTime != 0 {
		n += 1 + sovHebi(uint64(m.RobPosCdEndTime))
	}
	return n
}

func (m *HebiInfoProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Room) > 0 {
		for _, e := range m.Room {
			l = e.Size()
			n += 1 + l + sovHebi(uint64(l))
		}
	}
	return n
}

func (m *HebiHeroRecordProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Record) > 0 {
		for _, e := range m.Record {
			l = e.Size()
			n += 1 + l + sovHebi(uint64(l))
		}
	}
	return n
}

func (m *HebiHeroSingleRecordProto) Size() (n int) {
	var l int
	_ = l
	if m.Self != nil {
		l = m.Self.Size()
		n += 1 + l + sovHebi(uint64(l))
	}
	if m.Target != nil {
		l = m.Target.Size()
		n += 1 + l + sovHebi(uint64(l))
	}
	if m.SelfCaptain != nil {
		l = m.SelfCaptain.Size()
		n += 1 + l + sovHebi(uint64(l))
	}
	if m.TargetCaptain != nil {
		l = m.TargetCaptain.Size()
		n += 1 + l + sovHebi(uint64(l))
	}
	if m.Combat != nil {
		l = m.Combat.Size()
		n += 1 + l + sovHebi(uint64(l))
	}
	if m.IsRob {
		n += 2
	}
	if m.IsAtk {
		n += 2
	}
	if m.Win {
		n += 2
	}
	if m.Time != 0 {
		n += 1 + sovHebi(uint64(m.Time))
	}
	if m.HebiType != 0 {
		n += 1 + sovHebi(uint64(m.HebiType))
	}
	if m.FightNum != 0 {
		n += 1 + sovHebi(uint64(m.FightNum))
	}
	return n
}

func (m *HebiRoomProto) Size() (n int) {
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovHebi(uint64(m.RoomId))
	}
	if m.State != 0 {
		n += 1 + sovHebi(uint64(m.State))
	}
	if m.Host != nil {
		l = m.Host.Size()
		n += 1 + l + sovHebi(uint64(l))
	}
	if m.HostCaptain != nil {
		l = m.HostCaptain.Size()
		n += 1 + l + sovHebi(uint64(l))
	}
	if m.HostGoodsId != 0 {
		n += 1 + sovHebi(uint64(m.HostGoodsId))
	}
	if m.Guest != nil {
		l = m.Guest.Size()
		n += 1 + l + sovHebi(uint64(l))
	}
	if m.GuestCatpain != nil {
		l = m.GuestCatpain.Size()
		n += 1 + l + sovHebi(uint64(l))
	}
	if m.GuestGoodsId != 0 {
		n += 1 + sovHebi(uint64(m.GuestGoodsId))
	}
	if m.CopySelf {
		n += 2
	}
	if m.HebiCompleteTime != 0 {
		n += 1 + sovHebi(uint64(m.HebiCompleteTime))
	}
	if m.HebiRobProtectedTime != 0 {
		n += 1 + sovHebi(uint64(m.HebiRobProtectedTime))
	}
	if m.PrizeId != 0 {
		n += 1 + sovHebi(uint64(m.PrizeId))
	}
	if m.HebiWaitExpiredTime != 0 {
		n += 1 + sovHebi(uint64(m.HebiWaitExpiredTime))
	}
	return n
}

func (m *HebiCaptainProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovHebi(uint64(m.Id))
	}
	if m.Race != 0 {
		n += 1 + sovHebi(uint64(m.Race))
	}
	if m.Quality != 0 {
		n += 1 + sovHebi(uint64(m.Quality))
	}
	if m.FightAmount != 0 {
		n += 1 + sovHebi(uint64(m.FightAmount))
	}
	if m.Level != 0 {
		n += 1 + sovHebi(uint64(m.Level))
	}
	if m.Name != nil {
		l = m.Name.Size()
		n += 1 + l + sovHebi(uint64(l))
	}
	l = len(m.IconId)
	if l > 0 {
		n += 2 + l + sovHebi(uint64(l))
	}
	return n
}

func sovHebi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozHebi(x uint64) (n int) {
	return sovHebi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HebiMiscProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHebi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HebiMiscProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HebiMiscProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DailyRobCount", wireType)
			}
			m.DailyRobCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DailyRobCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RobCdDuration", wireType)
			}
			m.RobCdDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RobCdDuration |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RobProtectDuration", wireType)
			}
			m.RobProtectDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RobProtectDuration |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HebiDuration", wireType)
			}
			m.HebiDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HebiDuration |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CopySelfGoods", wireType)
			}
			m.CopySelfGoods = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CopySelfGoods |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomsMaxSize", wireType)
			}
			m.RoomsMaxSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomsMaxSize |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CombatScene", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHebi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CombatScene = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeShiBiType", wireType)
			}
			m.HeShiBiType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeShiBiType |= (HebiType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RobPosCdDuration", wireType)
			}
			m.RobPosCdDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RobPosCdDuration |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHebi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHebi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HebiPrizeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHebi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HebiPrizeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HebiPrizeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroLevel", wireType)
			}
			m.HeroLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HebiType", wireType)
			}
			m.HebiType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HebiType |= (HebiType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quality", wireType)
			}
			m.Quality = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quality |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHebi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Prize == nil {
				m.Prize = &PrizeProto{}
			}
			if err := m.Prize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHebi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHebi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeroHebiProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHebi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroHebiProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroHebiProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainId", wireType)
			}
			m.CaptainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RobCount", wireType)
			}
			m.RobCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RobCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RobCdEndTime", wireType)
			}
			m.RobCdEndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RobCdEndTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentGoodsId", wireType)
			}
			m.CurrentGoodsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentGoodsId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RobPosCdEndTime", wireType)
			}
			m.RobPosCdEndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RobPosCdEndTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHebi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHebi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HebiInfoProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHebi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HebiInfoProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HebiInfoProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Room", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHebi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Room = append(m.Room, &HebiRoomProto{})
			if err := m.Room[len(m.Room)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHebi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHebi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HebiHeroRecordProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHebi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HebiHeroRecordProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HebiHeroRecordProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHebi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Record = append(m.Record, &HebiHeroSingleRecordProto{})
			if err := m.Record[len(m.Record)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHebi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHebi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HebiHeroSingleRecordProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHebi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HebiHeroSingleRecordProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HebiHeroSingleRecordProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Self", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHebi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Self == nil {
				m.Self = &HeroBasicProto{}
			}
			if err := m.Self.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHebi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Target == nil {
				m.Target = &HeroBasicProto{}
			}
			if err := m.Target.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfCaptain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHebi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SelfCaptain == nil {
				m.SelfCaptain = &HebiCaptainProto{}
			}
			if err := m.SelfCaptain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetCaptain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHebi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TargetCaptain == nil {
				m.TargetCaptain = &HebiCaptainProto{}
			}
			if err := m.TargetCaptain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Combat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHebi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Combat == nil {
				m.Combat = &CombatShareProto{}
			}
			if err := m.Combat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRob", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRob = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAtk", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAtk = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Win", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Win = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HebiType", wireType)
			}
			m.HebiType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HebiType |= (HebiType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FightNum", wireType)
			}
			m.FightNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FightNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHebi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHebi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HebiRoomProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHebi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HebiRoomProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HebiRoomProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (HebiRoomState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHebi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Host == nil {
				m.Host = &HeroBasicProto{}
			}
			if err := m.Host.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostCaptain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHebi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HostCaptain == nil {
				m.HostCaptain = &HebiCaptainProto{}
			}
			if err := m.HostCaptain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostGoodsId", wireType)
			}
			m.HostGoodsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HostGoodsId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Guest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHebi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Guest == nil {
				m.Guest = &HeroBasicProto{}
			}
			if err := m.Guest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuestCatpain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHebi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GuestCatpain == nil {
				m.GuestCatpain = &HebiCaptainProto{}
			}
			if err := m.GuestCatpain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuestGoodsId", wireType)
			}
			m.GuestGoodsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuestGoodsId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CopySelf", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CopySelf = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HebiCompleteTime", wireType)
			}
			m.HebiCompleteTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HebiCompleteTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HebiRobProtectedTime", wireType)
			}
			m.HebiRobProtectedTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HebiRobProtectedTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrizeId", wireType)
			}
			m.PrizeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrizeId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HebiWaitExpiredTime", wireType)
			}
			m.HebiWaitExpiredTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HebiWaitExpiredTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHebi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHebi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HebiCaptainProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHebi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HebiCaptainProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HebiCaptainProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Race", wireType)
			}
			m.Race = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Race |= (Race(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quality", wireType)
			}
			m.Quality = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quality |= (Quality(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FightAmount", wireType)
			}
			m.FightAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FightAmount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHebi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Name == nil {
				m.Name = &CaptainNameProto{}
			}
			if err := m.Name.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHebi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHebi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHebi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHebi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHebi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHebi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthHebi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowHebi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipHebi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthHebi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHebi   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/pb/shared_proto/hebi.proto", fileDescriptorHebi)
}

var fileDescriptorHebi = []byte{
	// 1176 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xdd, 0x8e, 0xdb, 0x44,
	0x14, 0xae, 0x77, 0x93, 0x6c, 0x72, 0xf2, 0xb3, 0xe9, 0x74, 0xdb, 0x4d, 0x5b, 0xb1, 0xa4, 0x01,
	0x4a, 0xe8, 0x5f, 0x50, 0xda, 0x42, 0x41, 0x08, 0xa9, 0x0d, 0x15, 0x8d, 0x44, 0x4b, 0x71, 0x2a,
	0x21, 0x71, 0x63, 0x8d, 0xed, 0xd9, 0x78, 0xd4, 0xd8, 0x63, 0xec, 0x49, 0xdb, 0xf4, 0x86, 0x17,
	0xe0, 0x01, 0x78, 0x0c, 0x5e, 0x01, 0xae, 0x10, 0x57, 0x3c, 0x02, 0x2a, 0xb7, 0x3c, 0x04, 0x9a,
	0x73, 0xc6, 0x71, 0xb6, 0x62, 0xcb, 0x72, 0x15, 0xcf, 0x77, 0xbe, 0x73, 0x7c, 0xfc, 0x9d, 0x9f,
	0x09, 0xdc, 0x9a, 0x4b, 0x1d, 0x2d, 0xfd, 0x1b, 0x81, 0x8a, 0x47, 0x0b, 0x39, 0x8f, 0x74, 0xca,
	0x9f, 0x8f, 0x62, 0xbe, 0x10, 0x1f, 0x8f, 0x52, 0x7f, 0x94, 0x47, 0x3c, 0x13, 0xa1, 0x97, 0x66,
	0x4a, 0xab, 0x51, 0x24, 0x7c, 0x79, 0x03, 0x1f, 0x59, 0x15, 0x7f, 0x2e, 0xfc, 0x0f, 0x67, 0x9f,
	0xe7, 0x82, 0x9c, 0x2f, 0xdc, 0x39, 0xb9, 0x57, 0x9e, 0xf0, 0x34, 0x8f, 0x94, 0xb6, 0x9e, 0x1f,
	0x9d, 0xdc, 0x33, 0x50, 0xb1, 0xcf, 0x0b, 0xbf, 0xdb, 0x27, 0xf7, 0x9b, 0x2b, 0x15, 0xe6, 0xe4,
	0x36, 0xf8, 0x71, 0x1b, 0xda, 0x0f, 0x84, 0x2f, 0x1f, 0xca, 0x3c, 0x78, 0x8c, 0xdf, 0x7d, 0x19,
	0x76, 0x43, 0x2e, 0x17, 0x2b, 0x2f, 0x53, 0xbe, 0x17, 0xa8, 0x65, 0xa2, 0x7b, 0x4e, 0xdf, 0x19,
	0x56, 0xdd, 0x36, 0xc2, 0xae, 0xf2, 0x27, 0x06, 0x34, 0x3c, 0x64, 0x84, 0x5e, 0xb8, 0xcc, 0xb8,
	0x96, 0x2a, 0xe9, 0x6d, 0x11, 0x2f, 0x53, 0xfe, 0x24, 0xfc, 0xc2, 0x82, 0xec, 0x43, 0xd8, 0x33,
	0x3c, 0xf3, 0x3a, 0x11, 0xe8, 0x92, 0xbc, 0x8d, 0x64, 0x96, 0x29, 0xff, 0x31, 0x99, 0xd6, 0x1e,
	0xef, 0x40, 0xdb, 0xd4, 0xa1, 0xa4, 0x56, 0x90, 0xda, 0x32, 0xe0, 0x9a, 0x74, 0x19, 0x76, 0x03,
	0x95, 0xae, 0xbc, 0x5c, 0x2c, 0x0e, 0x3d, 0xfc, 0xa2, 0x5e, 0x95, 0x5e, 0x6f, 0xe0, 0x99, 0x58,
	0x1c, 0x7e, 0x69, 0x40, 0xf6, 0x2e, 0x74, 0x32, 0xa5, 0xe2, 0xdc, 0x8b, 0xf9, 0x0b, 0x2f, 0x97,
	0x2f, 0x45, 0xaf, 0x46, 0xd1, 0x10, 0x7d, 0xc8, 0x5f, 0xcc, 0xe4, 0x4b, 0xc1, 0x2e, 0x41, 0x8b,
	0xd4, 0xf4, 0xf2, 0x40, 0x24, 0xa2, 0xb7, 0xd3, 0x77, 0x86, 0x0d, 0xb7, 0x49, 0xd8, 0xcc, 0x40,
	0xec, 0x16, 0x74, 0x22, 0xe1, 0xe5, 0x91, 0xf4, 0x7c, 0xe9, 0xe9, 0x55, 0x2a, 0x7a, 0xf5, 0xbe,
	0x33, 0xec, 0x8c, 0x77, 0x49, 0xc9, 0x1b, 0x46, 0xc5, 0x27, 0xab, 0x54, 0xb8, 0xcd, 0x48, 0xcc,
	0x22, 0x79, 0x0f, 0x0f, 0xec, 0x3a, 0x9c, 0xc1, 0xaf, 0x57, 0xf9, 0x11, 0xa5, 0x1a, 0x98, 0x43,
	0xd7, 0x7c, 0xbc, 0xca, 0x4b, 0xb1, 0x06, 0x3f, 0x3b, 0xd0, 0x31, 0x81, 0x1e, 0x67, 0xf2, 0xa5,
	0xa0, 0x7a, 0xbc, 0x05, 0x10, 0x89, 0x4c, 0x79, 0x0b, 0xf1, 0x4c, 0x2c, 0x6c, 0x29, 0x1a, 0x06,
	0xf9, 0xca, 0x00, 0xec, 0x1a, 0x34, 0x50, 0x2c, 0xcc, 0x68, 0xeb, 0xdf, 0x33, 0xaa, 0x47, 0xf6,
	0x89, 0xf5, 0x60, 0xe7, 0xfb, 0x25, 0x5f, 0x48, 0xbd, 0xb2, 0xfa, 0x17, 0x47, 0xf6, 0x3e, 0x54,
	0x53, 0xf3, 0x52, 0x14, 0xbb, 0x39, 0x3e, 0x6d, 0x63, 0x94, 0x89, 0xb8, 0x64, 0x67, 0x1d, 0xd8,
	0x92, 0xa1, 0xd5, 0x7a, 0x4b, 0x86, 0x83, 0xdf, 0x1d, 0xd3, 0x41, 0x99, 0xa2, 0xb4, 0x6d, 0xc6,
	0x01, 0x4f, 0x35, 0x97, 0x89, 0x27, 0xc3, 0x22, 0x63, 0x8b, 0x4c, 0x43, 0x76, 0x11, 0x1a, 0x65,
	0x6b, 0x51, 0xcb, 0xd4, 0xb3, 0xa2, 0xab, 0xde, 0x5b, 0x77, 0x95, 0x48, 0x42, 0x4f, 0xcb, 0x58,
	0xd8, 0x44, 0x5b, 0xd8, 0x55, 0xf7, 0x93, 0xf0, 0x89, 0x8c, 0x05, 0x1b, 0x42, 0x37, 0x58, 0x66,
	0x99, 0x48, 0x34, 0xd5, 0xde, 0xbc, 0x88, 0xba, 0xa4, 0x63, 0x71, 0xac, 0xfe, 0x34, 0x64, 0xd7,
	0x8e, 0x14, 0x60, 0x1d, 0x94, 0xf2, 0xdf, 0x2d, 0x0a, 0x60, 0xe3, 0x0e, 0x3e, 0xa1, 0x69, 0x98,
	0x26, 0x87, 0x8a, 0xbe, 0x65, 0x08, 0x15, 0xd3, 0x28, 0x3d, 0xa7, 0xbf, 0x3d, 0x6c, 0x8e, 0xf7,
	0x36, 0x94, 0x75, 0x95, 0x8a, 0x49, 0x18, 0x64, 0x0c, 0xbe, 0x86, 0x33, 0x06, 0x36, 0x52, 0xb8,
	0x22, 0x50, 0x59, 0x48, 0x01, 0xee, 0x40, 0x2d, 0xc3, 0xa3, 0x0d, 0xd1, 0xdf, 0x08, 0x61, 0xb8,
	0x33, 0x99, 0xcc, 0x17, 0x62, 0xc3, 0xc3, 0xb5, 0xfc, 0xc1, 0x2f, 0xdb, 0x70, 0xfe, 0x58, 0x16,
	0xfb, 0x00, 0x2a, 0xa6, 0xf5, 0x51, 0xde, 0xe6, 0xf8, 0xec, 0x3a, 0x6a, 0xa6, 0xee, 0xf1, 0x5c,
	0x06, 0x36, 0x33, 0x43, 0x61, 0xd7, 0xa1, 0xa6, 0x79, 0x36, 0x17, 0xa4, 0xf6, 0xb1, 0x64, 0x4b,
	0x62, 0x9f, 0x42, 0x0b, 0x87, 0xca, 0x56, 0x0c, 0xf5, 0x6f, 0x8e, 0xf7, 0x37, 0xf2, 0x9e, 0x90,
	0x85, 0xdc, 0x9a, 0x86, 0x6c, 0x11, 0xf6, 0x39, 0x74, 0x28, 0xca, 0xda, 0xbb, 0xf2, 0x66, 0xef,
	0x36, 0xd1, 0x0b, 0xff, 0x11, 0xd4, 0x68, 0xe6, 0xb0, 0x40, 0xa5, 0xdf, 0x84, 0x06, 0xd1, 0x6c,
	0x31, 0x9b, 0x2c, 0xd1, 0xd8, 0x59, 0xa8, 0xc9, 0xdc, 0xac, 0x2a, 0x1c, 0xeb, 0xba, 0x5b, 0x95,
	0xb9, 0xab, 0x7c, 0x0b, 0x73, 0xfd, 0x14, 0x27, 0x19, 0xe1, 0xbb, 0xfa, 0x29, 0xeb, 0xc2, 0xf6,
	0x73, 0x99, 0xe0, 0xe0, 0xd6, 0x5d, 0xf3, 0xc8, 0x18, 0x54, 0xb0, 0x1f, 0x68, 0x20, 0xf1, 0xf9,
	0xe8, 0x48, 0xc1, 0x7f, 0x8d, 0xd4, 0x45, 0x68, 0x1c, 0x9a, 0x7d, 0xeb, 0x25, 0xcb, 0xb8, 0xd7,
	0xa4, 0x76, 0x46, 0xe0, 0xd1, 0x32, 0x1e, 0xfc, 0x5a, 0xa1, 0x86, 0x5a, 0x37, 0x0b, 0xdb, 0x87,
	0x1d, 0xd3, 0x2e, 0xe5, 0x64, 0xd4, 0xcc, 0x71, 0x1a, 0xb2, 0x2b, 0x50, 0xcd, 0x35, 0xd7, 0xc5,
	0x10, 0xbf, 0xde, 0x6a, 0x33, 0x63, 0x73, 0x89, 0x62, 0x8a, 0x1f, 0xa9, 0x5c, 0xdb, 0xd2, 0x1c,
	0x57, 0x7c, 0x43, 0x31, 0xd5, 0x34, 0xbf, 0x27, 0xad, 0x47, 0xd3, 0x90, 0x8b, 0x6a, 0x0c, 0xa0,
	0x8d, 0xbe, 0xeb, 0x11, 0xa3, 0xa9, 0x41, 0x4e, 0x31, 0x5f, 0x57, 0xa1, 0x3a, 0x5f, 0x8a, 0x5c,
	0xa3, 0xfe, 0xc7, 0xe6, 0x42, 0x1c, 0xf6, 0x19, 0xb4, 0xf1, 0xc1, 0x0b, 0xb8, 0x4e, 0x4d, 0x36,
	0x3b, 0x6f, 0xce, 0xa6, 0x85, 0xec, 0x09, 0x91, 0xcd, 0x2a, 0x27, 0xef, 0x75, 0x3e, 0x75, 0x5a,
	0x0d, 0x88, 0x16, 0x09, 0x5d, 0x84, 0xc6, 0xfa, 0x62, 0xc0, 0xb2, 0xd6, 0xdd, 0x7a, 0x71, 0x25,
	0xb0, 0x6b, 0xc0, 0xb0, 0xb4, 0x81, 0x8a, 0xd3, 0x85, 0xd0, 0x82, 0x96, 0x01, 0xd0, 0x36, 0x36,
	0x96, 0x89, 0x35, 0xe0, 0x96, 0xb9, 0x0d, 0xfb, 0xc8, 0xde, 0xb8, 0xbf, 0x84, 0xdd, 0x1f, 0x54,
	0xe8, 0xbd, 0x08, 0xab, 0x53, 0xdc, 0x60, 0x82, 0x96, 0xd3, 0x79, 0xa8, 0xe3, 0xaa, 0x34, 0x19,
	0xb6, 0x68, 0xcb, 0xe2, 0x79, 0x1a, 0xb2, 0x9b, 0x70, 0x0e, 0x23, 0x3e, 0xe7, 0x52, 0x7b, 0xe2,
	0x45, 0x2a, 0xb3, 0x22, 0x60, 0x1b, 0x89, 0x67, 0x8c, 0xf5, 0x5b, 0x2e, 0xf5, 0x7d, 0xb2, 0xe1,
	0x52, 0xfa, 0xdb, 0x81, 0xee, 0xeb, 0xd2, 0xd8, 0x35, 0xec, 0x14, 0x6b, 0x98, 0xbd, 0x0d, 0x95,
	0x8c, 0x07, 0xb4, 0xbe, 0x3b, 0xe3, 0xa6, 0x55, 0xd4, 0xe5, 0x81, 0x70, 0xd1, 0xc0, 0x86, 0xe5,
	0xea, 0xaf, 0x22, 0xa7, 0x63, 0x39, 0xdf, 0x10, 0x5a, 0x5e, 0x05, 0x97, 0xa0, 0x45, 0x1d, 0xcd,
	0x63, 0xdc, 0xd1, 0xa4, 0x72, 0x13, 0xb1, 0xbb, 0x08, 0xb1, 0x3d, 0xa8, 0xd2, 0x7d, 0x44, 0xd2,
	0xd1, 0x81, 0x5d, 0x85, 0x4a, 0xc2, 0x63, 0xd1, 0xeb, 0x1c, 0x9d, 0x5d, 0x4a, 0xfb, 0x11, 0x8f,
	0xed, 0xec, 0x22, 0xc9, 0x0c, 0x82, 0x0c, 0x14, 0x5e, 0x11, 0x7b, 0x78, 0xdb, 0xd6, 0xcc, 0x71,
	0x1a, 0x5e, 0xf9, 0xa1, 0x1c, 0x19, 0x6c, 0x7a, 0xd6, 0x83, 0xbd, 0x02, 0x98, 0x26, 0xcf, 0xf8,
	0x42, 0x86, 0x88, 0x77, 0x4f, 0xb1, 0xd3, 0x25, 0xf5, 0x7e, 0x9c, 0xea, 0x55, 0xd7, 0x61, 0x5d,
	0x68, 0x15, 0x90, 0xd1, 0xb1, 0xbb, 0xc5, 0xf6, 0x69, 0x31, 0x1b, 0x04, 0x7f, 0x97, 0x49, 0x22,
	0x93, 0x79, 0x77, 0x9b, 0x9d, 0x03, 0x56, 0x18, 0xca, 0x1a, 0x76, 0x2b, 0xf7, 0xfa, 0xbf, 0xbd,
	0x3a, 0x70, 0xfe, 0x78, 0x75, 0xe0, 0xfc, 0xf9, 0xea, 0xc0, 0xf9, 0xe9, 0xaf, 0x83, 0x53, 0x0f,
	0x9c, 0xef, 0x5a, 0x9b, 0xff, 0xa0, 0xfc, 0x1a, 0xfe, 0xdc, 0xfc, 0x27, 0x00, 0x00, 0xff, 0xff,
	0xe9, 0xc5, 0x9c, 0x49, 0x5a, 0x0a, 0x00, 0x00,
}
