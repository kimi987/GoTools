// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/pb/shared_proto/season.proto
// DO NOT EDIT!

package shared_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Season int32

const (
	Season_InvalidSeason Season = 0
	Season_SPRING        Season = 1
	Season_SUMMER        Season = 2
	Season_AUTUMN        Season = 3
	Season_WINTER        Season = 4
)

var Season_name = map[int32]string{
	0: "InvalidSeason",
	1: "SPRING",
	2: "SUMMER",
	3: "AUTUMN",
	4: "WINTER",
}
var Season_value = map[string]int32{
	"InvalidSeason": 0,
	"SPRING":        1,
	"SUMMER":        2,
	"AUTUMN":        3,
	"WINTER":        4,
}

func (x Season) String() string {
	return proto.EnumName(Season_name, int32(x))
}
func (Season) EnumDescriptor() ([]byte, []int) { return fileDescriptorSeason, []int{0} }

type SeasonDataProto struct {
	Season                Season      `protobuf:"varint,1,opt,name=season,proto3,enum=proto.Season" json:"season,omitempty"`
	ShowPrize             *PrizeProto `protobuf:"bytes,2,opt,name=show_prize,json=showPrize" json:"show_prize,omitempty"`
	BgImg                 string      `protobuf:"bytes,3,opt,name=bg_img,json=bgImg,proto3" json:"bg_img,omitempty"`
	WorkerCdr             int32       `protobuf:"varint,4,opt,name=worker_cdr,json=workerCdr,proto3" json:"worker_cdr,omitempty"`
	SecretTowerTimes      int32       `protobuf:"varint,5,opt,name=secret_tower_times,json=secretTowerTimes,proto3" json:"secret_tower_times,omitempty"`
	FarmBaseInc           int32       `protobuf:"varint,6,opt,name=farm_base_inc,json=farmBaseInc,proto3" json:"farm_base_inc,omitempty"`
	AddMultiMonsterTimes  int32       `protobuf:"varint,7,opt,name=add_multi_monster_times,json=addMultiMonsterTimes,proto3" json:"add_multi_monster_times,omitempty"`
	DecTroopSpeedRate     int32       `protobuf:"varint,8,opt,name=dec_troop_speed_rate,json=decTroopSpeedRate,proto3" json:"dec_troop_speed_rate,omitempty"`
	IncProsperityMultiple int32       `protobuf:"varint,9,opt,name=inc_prosperity_multiple,json=incProsperityMultiple,proto3" json:"inc_prosperity_multiple,omitempty"`
}

func (m *SeasonDataProto) Reset()                    { *m = SeasonDataProto{} }
func (m *SeasonDataProto) String() string            { return proto.CompactTextString(m) }
func (*SeasonDataProto) ProtoMessage()               {}
func (*SeasonDataProto) Descriptor() ([]byte, []int) { return fileDescriptorSeason, []int{0} }

func (m *SeasonDataProto) GetSeason() Season {
	if m != nil {
		return m.Season
	}
	return Season_InvalidSeason
}

func (m *SeasonDataProto) GetShowPrize() *PrizeProto {
	if m != nil {
		return m.ShowPrize
	}
	return nil
}

func (m *SeasonDataProto) GetBgImg() string {
	if m != nil {
		return m.BgImg
	}
	return ""
}

func (m *SeasonDataProto) GetWorkerCdr() int32 {
	if m != nil {
		return m.WorkerCdr
	}
	return 0
}

func (m *SeasonDataProto) GetSecretTowerTimes() int32 {
	if m != nil {
		return m.SecretTowerTimes
	}
	return 0
}

func (m *SeasonDataProto) GetFarmBaseInc() int32 {
	if m != nil {
		return m.FarmBaseInc
	}
	return 0
}

func (m *SeasonDataProto) GetAddMultiMonsterTimes() int32 {
	if m != nil {
		return m.AddMultiMonsterTimes
	}
	return 0
}

func (m *SeasonDataProto) GetDecTroopSpeedRate() int32 {
	if m != nil {
		return m.DecTroopSpeedRate
	}
	return 0
}

func (m *SeasonDataProto) GetIncProsperityMultiple() int32 {
	if m != nil {
		return m.IncProsperityMultiple
	}
	return 0
}

type SeasonMiscProto struct {
	SeasonDuration       int32 `protobuf:"varint,1,opt,name=season_duration,json=seasonDuration,proto3" json:"season_duration,omitempty"`
	SeasonSwitchDuration int32 `protobuf:"varint,2,opt,name=season_switch_duration,json=seasonSwitchDuration,proto3" json:"season_switch_duration,omitempty"`
}

func (m *SeasonMiscProto) Reset()                    { *m = SeasonMiscProto{} }
func (m *SeasonMiscProto) String() string            { return proto.CompactTextString(m) }
func (*SeasonMiscProto) ProtoMessage()               {}
func (*SeasonMiscProto) Descriptor() ([]byte, []int) { return fileDescriptorSeason, []int{1} }

func (m *SeasonMiscProto) GetSeasonDuration() int32 {
	if m != nil {
		return m.SeasonDuration
	}
	return 0
}

func (m *SeasonMiscProto) GetSeasonSwitchDuration() int32 {
	if m != nil {
		return m.SeasonSwitchDuration
	}
	return 0
}

func init() {
	proto.RegisterType((*SeasonDataProto)(nil), "proto.SeasonDataProto")
	proto.RegisterType((*SeasonMiscProto)(nil), "proto.SeasonMiscProto")
	proto.RegisterEnum("proto.Season", Season_name, Season_value)
}
func (m *SeasonDataProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonDataProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Season != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSeason(dAtA, i, uint64(m.Season))
	}
	if m.ShowPrize != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSeason(dAtA, i, uint64(m.ShowPrize.Size()))
		n1, err := m.ShowPrize.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.BgImg) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSeason(dAtA, i, uint64(len(m.BgImg)))
		i += copy(dAtA[i:], m.BgImg)
	}
	if m.WorkerCdr != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSeason(dAtA, i, uint64(m.WorkerCdr))
	}
	if m.SecretTowerTimes != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSeason(dAtA, i, uint64(m.SecretTowerTimes))
	}
	if m.FarmBaseInc != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSeason(dAtA, i, uint64(m.FarmBaseInc))
	}
	if m.AddMultiMonsterTimes != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintSeason(dAtA, i, uint64(m.AddMultiMonsterTimes))
	}
	if m.DecTroopSpeedRate != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintSeason(dAtA, i, uint64(m.DecTroopSpeedRate))
	}
	if m.IncProsperityMultiple != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintSeason(dAtA, i, uint64(m.IncProsperityMultiple))
	}
	return i, nil
}

func (m *SeasonMiscProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonMiscProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SeasonDuration != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSeason(dAtA, i, uint64(m.SeasonDuration))
	}
	if m.SeasonSwitchDuration != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSeason(dAtA, i, uint64(m.SeasonSwitchDuration))
	}
	return i, nil
}

func encodeFixed64Season(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Season(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintSeason(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SeasonDataProto) Size() (n int) {
	var l int
	_ = l
	if m.Season != 0 {
		n += 1 + sovSeason(uint64(m.Season))
	}
	if m.ShowPrize != nil {
		l = m.ShowPrize.Size()
		n += 1 + l + sovSeason(uint64(l))
	}
	l = len(m.BgImg)
	if l > 0 {
		n += 1 + l + sovSeason(uint64(l))
	}
	if m.WorkerCdr != 0 {
		n += 1 + sovSeason(uint64(m.WorkerCdr))
	}
	if m.SecretTowerTimes != 0 {
		n += 1 + sovSeason(uint64(m.SecretTowerTimes))
	}
	if m.FarmBaseInc != 0 {
		n += 1 + sovSeason(uint64(m.FarmBaseInc))
	}
	if m.AddMultiMonsterTimes != 0 {
		n += 1 + sovSeason(uint64(m.AddMultiMonsterTimes))
	}
	if m.DecTroopSpeedRate != 0 {
		n += 1 + sovSeason(uint64(m.DecTroopSpeedRate))
	}
	if m.IncProsperityMultiple != 0 {
		n += 1 + sovSeason(uint64(m.IncProsperityMultiple))
	}
	return n
}

func (m *SeasonMiscProto) Size() (n int) {
	var l int
	_ = l
	if m.SeasonDuration != 0 {
		n += 1 + sovSeason(uint64(m.SeasonDuration))
	}
	if m.SeasonSwitchDuration != 0 {
		n += 1 + sovSeason(uint64(m.SeasonSwitchDuration))
	}
	return n
}

func sovSeason(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSeason(x uint64) (n int) {
	return sovSeason(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SeasonDataProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSeason
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeasonDataProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeasonDataProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Season", wireType)
			}
			m.Season = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeason
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Season |= (Season(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowPrize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeason
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSeason
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShowPrize == nil {
				m.ShowPrize = &PrizeProto{}
			}
			if err := m.ShowPrize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgImg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeason
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSeason
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BgImg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkerCdr", wireType)
			}
			m.WorkerCdr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeason
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkerCdr |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretTowerTimes", wireType)
			}
			m.SecretTowerTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeason
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SecretTowerTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FarmBaseInc", wireType)
			}
			m.FarmBaseInc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeason
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FarmBaseInc |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddMultiMonsterTimes", wireType)
			}
			m.AddMultiMonsterTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeason
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddMultiMonsterTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecTroopSpeedRate", wireType)
			}
			m.DecTroopSpeedRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeason
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecTroopSpeedRate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncProsperityMultiple", wireType)
			}
			m.IncProsperityMultiple = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeason
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IncProsperityMultiple |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSeason(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSeason
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeasonMiscProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSeason
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeasonMiscProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeasonMiscProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonDuration", wireType)
			}
			m.SeasonDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeason
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonDuration |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonSwitchDuration", wireType)
			}
			m.SeasonSwitchDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeason
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonSwitchDuration |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSeason(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSeason
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSeason(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSeason
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSeason
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSeason
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSeason
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSeason
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSeason(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSeason = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSeason   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/pb/shared_proto/season.proto", fileDescriptorSeason)
}

var fileDescriptorSeason = []byte{
	// 493 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xd1, 0x6e, 0xd3, 0x30,
	0x14, 0x86, 0xe7, 0x76, 0x0d, 0xd4, 0xa3, 0x5b, 0x6a, 0x6d, 0x2c, 0x42, 0xa2, 0xaa, 0x2a, 0x21,
	0x2a, 0x84, 0x1a, 0x34, 0xc6, 0xb8, 0x66, 0x6c, 0x82, 0x0a, 0xa5, 0xaa, 0xd2, 0x56, 0x48, 0xdc,
	0x58, 0x8e, 0x6d, 0x52, 0x8b, 0x26, 0x8e, 0x6c, 0x97, 0x08, 0x1e, 0x83, 0x2b, 0x1e, 0x89, 0x4b,
	0x1e, 0x01, 0x95, 0x17, 0x41, 0xb6, 0xb3, 0xc1, 0x25, 0x57, 0x39, 0xfe, 0xbf, 0xff, 0xfc, 0x47,
	0xf6, 0x09, 0xbc, 0xc8, 0x85, 0x59, 0x6f, 0xb3, 0x09, 0x95, 0x45, 0xbc, 0x11, 0xf9, 0xda, 0x54,
	0xa4, 0x8e, 0x0b, 0xb2, 0xe1, 0x2f, 0xe3, 0x2a, 0x8b, 0xf5, 0x9a, 0x28, 0xce, 0x70, 0xa5, 0xa4,
	0x91, 0xb1, 0xe6, 0x44, 0xcb, 0x72, 0xe2, 0x0e, 0xa8, 0xe3, 0x3e, 0x0f, 0xce, 0xff, 0xbf, 0x3d,
	0x23, 0x9a, 0xfb, 0xe6, 0xd1, 0xb7, 0x36, 0x3c, 0x5a, 0xb8, 0xb4, 0x2b, 0x62, 0xc8, 0xdc, 0x05,
	0x3e, 0x82, 0x81, 0x1f, 0x10, 0x81, 0x21, 0x18, 0x1f, 0x9e, 0xf5, 0xbc, 0x77, 0xe2, 0x7d, 0x69,
	0x03, 0xd1, 0x33, 0x08, 0xf5, 0x5a, 0xd6, 0xb8, 0x52, 0xe2, 0x2b, 0x8f, 0x5a, 0x43, 0x30, 0x3e,
	0x38, 0xeb, 0x37, 0xd6, 0xb9, 0xd5, 0x5c, 0x5a, 0xda, 0xb5, 0x26, 0x77, 0x46, 0x27, 0x30, 0xc8,
	0x72, 0x2c, 0x8a, 0x3c, 0x6a, 0x0f, 0xc1, 0xb8, 0x9b, 0x76, 0xb2, 0x7c, 0x5a, 0xe4, 0xe8, 0x21,
	0x84, 0xb5, 0x54, 0x9f, 0xb8, 0xc2, 0x94, 0xa9, 0x68, 0x7f, 0x08, 0xc6, 0x9d, 0xb4, 0xeb, 0x95,
	0xd7, 0x4c, 0xa1, 0xa7, 0x10, 0x69, 0x4e, 0x15, 0x37, 0xd8, 0xc8, 0x9a, 0x2b, 0x6c, 0x44, 0xc1,
	0x75, 0xd4, 0x71, 0xb6, 0xd0, 0x93, 0xa5, 0x05, 0x4b, 0xab, 0xa3, 0x11, 0xec, 0x7d, 0x24, 0xaa,
	0xc0, 0xf6, 0x8e, 0x58, 0x94, 0x34, 0x0a, 0x9c, 0xf1, 0xc0, 0x8a, 0x97, 0x44, 0xf3, 0x69, 0x49,
	0xd1, 0x0b, 0x78, 0x4a, 0x18, 0xc3, 0xc5, 0x76, 0x63, 0x04, 0x2e, 0x64, 0xa9, 0xcd, 0x6d, 0xec,
	0x1d, 0xe7, 0x3e, 0x26, 0x8c, 0x25, 0x96, 0x26, 0x1e, 0xfa, 0xe8, 0x18, 0x1e, 0x33, 0x4e, 0xb1,
	0x51, 0x52, 0x56, 0x58, 0x57, 0x9c, 0x33, 0xac, 0x88, 0xe1, 0xd1, 0x5d, 0xd7, 0xd3, 0x67, 0x9c,
	0x2e, 0x2d, 0x5a, 0x58, 0x92, 0x12, 0xc3, 0xd1, 0x05, 0x3c, 0x15, 0x25, 0xb5, 0x8f, 0xae, 0x2b,
	0xae, 0x84, 0xf9, 0xe2, 0x47, 0x56, 0x1b, 0x1e, 0x75, 0x5d, 0xcf, 0x89, 0x28, 0xe9, 0xfc, 0x96,
	0x26, 0x0d, 0x1c, 0x55, 0x37, 0x3b, 0x49, 0x84, 0xa6, 0x7e, 0x27, 0x8f, 0xe1, 0x91, 0x7f, 0x76,
	0xcc, 0xb6, 0x8a, 0x18, 0xd1, 0x2c, 0xa7, 0x93, 0x1e, 0x7a, 0xf9, 0xaa, 0x51, 0xd1, 0x39, 0xbc,
	0xdf, 0x18, 0x75, 0x2d, 0x0c, 0x5d, 0xff, 0xf5, 0xb7, 0xfc, 0xd5, 0x3c, 0x5d, 0x38, 0x78, 0xd3,
	0xf5, 0xe4, 0x1d, 0x0c, 0xfc, 0x44, 0xd4, 0x87, 0xbd, 0x69, 0xf9, 0x99, 0x6c, 0x04, 0xf3, 0x42,
	0xb8, 0x87, 0x20, 0x0c, 0x16, 0xf3, 0x74, 0x3a, 0x7b, 0x13, 0x02, 0x57, 0xaf, 0x92, 0xe4, 0x3a,
	0x0d, 0x5b, 0xb6, 0x7e, 0xb5, 0x5a, 0xae, 0x92, 0x59, 0xd8, 0xb6, 0xf5, 0xfb, 0xe9, 0x6c, 0x79,
	0x9d, 0x86, 0xfb, 0x97, 0xc3, 0x1f, 0xbb, 0x01, 0xf8, 0xb9, 0x1b, 0x80, 0x5f, 0xbb, 0x01, 0xf8,
	0xfe, 0x7b, 0xb0, 0xf7, 0x16, 0x7c, 0xb8, 0xf7, 0xef, 0x0f, 0x98, 0x05, 0xee, 0xf3, 0xfc, 0x4f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x53, 0x6d, 0x95, 0xdb, 0xf3, 0x02, 0x00, 0x00,
}
