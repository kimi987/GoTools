// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/pb/shared_proto/xiongnu.proto
// DO NOT EDIT!

package shared_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ResistXiongNuMiscProto struct {
	DefenseMemberCount        int32   `protobuf:"varint,1,opt,name=defense_member_count,json=defenseMemberCount,proto3" json:"defense_member_count,omitempty"`
	InvadeDuration            int32   `protobuf:"varint,2,opt,name=invade_duration,json=invadeDuration,proto3" json:"invade_duration,omitempty"`
	ResistDuration            int32   `protobuf:"varint,3,opt,name=resist_duration,json=resistDuration,proto3" json:"resist_duration,omitempty"`
	InvadeWaveDuration        []int32 `protobuf:"varint,4,rep,name=invade_wave_duration,json=invadeWaveDuration" json:"invade_wave_duration,omitempty"`
	MaxMorale                 int32   `protobuf:"varint,5,opt,name=max_morale,json=maxMorale,proto3" json:"max_morale,omitempty"`
	WipeOutReduceMorale       int32   `protobuf:"varint,6,opt,name=wipe_out_reduce_morale,json=wipeOutReduceMorale,proto3" json:"wipe_out_reduce_morale,omitempty"`
	OneMoraleReduceSoldierPer int32   `protobuf:"varint,7,opt,name=one_morale_reduce_soldier_per,json=oneMoraleReduceSoldierPer,proto3" json:"one_morale_reduce_soldier_per,omitempty"`
	OpenNeedGuildLevel        int32   `protobuf:"varint,8,opt,name=open_need_guild_level,json=openNeedGuildLevel,proto3" json:"open_need_guild_level,omitempty"`
	MaxCanOpenTimesPerDay     int32   `protobuf:"varint,9,opt,name=max_can_open_times_per_day,json=maxCanOpenTimesPerDay,proto3" json:"max_can_open_times_per_day,omitempty"`
	MinBaseLevel              int32   `protobuf:"varint,10,opt,name=min_base_level,json=minBaseLevel,proto3" json:"min_base_level,omitempty"`
	MaxDistance               int32   `protobuf:"varint,11,opt,name=max_distance,json=maxDistance,proto3" json:"max_distance,omitempty"`
	StartAfterServerOpen      int32   `protobuf:"varint,12,opt,name=start_after_server_open,json=startAfterServerOpen,proto3" json:"start_after_server_open,omitempty"`
}

func (m *ResistXiongNuMiscProto) Reset()                    { *m = ResistXiongNuMiscProto{} }
func (m *ResistXiongNuMiscProto) String() string            { return proto.CompactTextString(m) }
func (*ResistXiongNuMiscProto) ProtoMessage()               {}
func (*ResistXiongNuMiscProto) Descriptor() ([]byte, []int) { return fileDescriptorXiongnu, []int{0} }

func (m *ResistXiongNuMiscProto) GetDefenseMemberCount() int32 {
	if m != nil {
		return m.DefenseMemberCount
	}
	return 0
}

func (m *ResistXiongNuMiscProto) GetInvadeDuration() int32 {
	if m != nil {
		return m.InvadeDuration
	}
	return 0
}

func (m *ResistXiongNuMiscProto) GetResistDuration() int32 {
	if m != nil {
		return m.ResistDuration
	}
	return 0
}

func (m *ResistXiongNuMiscProto) GetInvadeWaveDuration() []int32 {
	if m != nil {
		return m.InvadeWaveDuration
	}
	return nil
}

func (m *ResistXiongNuMiscProto) GetMaxMorale() int32 {
	if m != nil {
		return m.MaxMorale
	}
	return 0
}

func (m *ResistXiongNuMiscProto) GetWipeOutReduceMorale() int32 {
	if m != nil {
		return m.WipeOutReduceMorale
	}
	return 0
}

func (m *ResistXiongNuMiscProto) GetOneMoraleReduceSoldierPer() int32 {
	if m != nil {
		return m.OneMoraleReduceSoldierPer
	}
	return 0
}

func (m *ResistXiongNuMiscProto) GetOpenNeedGuildLevel() int32 {
	if m != nil {
		return m.OpenNeedGuildLevel
	}
	return 0
}

func (m *ResistXiongNuMiscProto) GetMaxCanOpenTimesPerDay() int32 {
	if m != nil {
		return m.MaxCanOpenTimesPerDay
	}
	return 0
}

func (m *ResistXiongNuMiscProto) GetMinBaseLevel() int32 {
	if m != nil {
		return m.MinBaseLevel
	}
	return 0
}

func (m *ResistXiongNuMiscProto) GetMaxDistance() int32 {
	if m != nil {
		return m.MaxDistance
	}
	return 0
}

func (m *ResistXiongNuMiscProto) GetStartAfterServerOpen() int32 {
	if m != nil {
		return m.StartAfterServerOpen
	}
	return 0
}

type ResistXiongNuDataProto struct {
	Level             int32                     `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Name              string                    `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
	Npc               int32                     `protobuf:"varint,2,opt,name=npc,proto3" json:"npc,omitempty"`
	AssistMonsters    []*MonsterMasterDataProto `protobuf:"bytes,3,rep,name=assist_monsters,json=assistMonsters" json:"assist_monsters,omitempty"`
	ScorePrizes       []*PrizeProto             `protobuf:"bytes,4,rep,name=score_prizes,json=scorePrizes" json:"score_prizes,omitempty"`
	ScorePrestiges    []int32                   `protobuf:"varint,5,rep,name=score_prestiges,json=scorePrestiges" json:"score_prestiges,omitempty"`
	ResistSucPrize    *PrizeProto               `protobuf:"bytes,6,opt,name=resist_suc_prize,json=resistSucPrize" json:"resist_suc_prize,omitempty"`
	ResistSucPrestige int32                     `protobuf:"varint,7,opt,name=resist_suc_prestige,json=resistSucPrestige,proto3" json:"resist_suc_prestige,omitempty"`
	TotalMonsterCount int32                     `protobuf:"varint,9,opt,name=total_monster_count,json=totalMonsterCount,proto3" json:"total_monster_count,omitempty"`
	MaxFightAmount    int32                     `protobuf:"varint,10,opt,name=max_fight_amount,json=maxFightAmount,proto3" json:"max_fight_amount,omitempty"`
	GuildLevelPrizes  []*GuildLevelPrizeProto   `protobuf:"bytes,11,rep,name=guild_level_prizes,json=guildLevelPrizes" json:"guild_level_prizes,omitempty"`
	ShowPrizes        []*PrizeProto             `protobuf:"bytes,12,rep,name=show_prizes,json=showPrizes" json:"show_prizes,omitempty"`
}

func (m *ResistXiongNuDataProto) Reset()                    { *m = ResistXiongNuDataProto{} }
func (m *ResistXiongNuDataProto) String() string            { return proto.CompactTextString(m) }
func (*ResistXiongNuDataProto) ProtoMessage()               {}
func (*ResistXiongNuDataProto) Descriptor() ([]byte, []int) { return fileDescriptorXiongnu, []int{1} }

func (m *ResistXiongNuDataProto) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *ResistXiongNuDataProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ResistXiongNuDataProto) GetNpc() int32 {
	if m != nil {
		return m.Npc
	}
	return 0
}

func (m *ResistXiongNuDataProto) GetAssistMonsters() []*MonsterMasterDataProto {
	if m != nil {
		return m.AssistMonsters
	}
	return nil
}

func (m *ResistXiongNuDataProto) GetScorePrizes() []*PrizeProto {
	if m != nil {
		return m.ScorePrizes
	}
	return nil
}

func (m *ResistXiongNuDataProto) GetScorePrestiges() []int32 {
	if m != nil {
		return m.ScorePrestiges
	}
	return nil
}

func (m *ResistXiongNuDataProto) GetResistSucPrize() *PrizeProto {
	if m != nil {
		return m.ResistSucPrize
	}
	return nil
}

func (m *ResistXiongNuDataProto) GetResistSucPrestige() int32 {
	if m != nil {
		return m.ResistSucPrestige
	}
	return 0
}

func (m *ResistXiongNuDataProto) GetTotalMonsterCount() int32 {
	if m != nil {
		return m.TotalMonsterCount
	}
	return 0
}

func (m *ResistXiongNuDataProto) GetMaxFightAmount() int32 {
	if m != nil {
		return m.MaxFightAmount
	}
	return 0
}

func (m *ResistXiongNuDataProto) GetGuildLevelPrizes() []*GuildLevelPrizeProto {
	if m != nil {
		return m.GuildLevelPrizes
	}
	return nil
}

func (m *ResistXiongNuDataProto) GetShowPrizes() []*PrizeProto {
	if m != nil {
		return m.ShowPrizes
	}
	return nil
}

type ResistXiongNuScoreProto struct {
	Level                     int32  `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Name                      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	WipeOutInvadeMonsterCount int32  `protobuf:"varint,3,opt,name=wipe_out_invade_monster_count,json=wipeOutInvadeMonsterCount,proto3" json:"wipe_out_invade_monster_count,omitempty"`
	UnlockNextLevel           bool   `protobuf:"varint,5,opt,name=unlock_next_level,json=unlockNextLevel,proto3" json:"unlock_next_level,omitempty"`
}

func (m *ResistXiongNuScoreProto) Reset()                    { *m = ResistXiongNuScoreProto{} }
func (m *ResistXiongNuScoreProto) String() string            { return proto.CompactTextString(m) }
func (*ResistXiongNuScoreProto) ProtoMessage()               {}
func (*ResistXiongNuScoreProto) Descriptor() ([]byte, []int) { return fileDescriptorXiongnu, []int{2} }

func (m *ResistXiongNuScoreProto) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *ResistXiongNuScoreProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ResistXiongNuScoreProto) GetWipeOutInvadeMonsterCount() int32 {
	if m != nil {
		return m.WipeOutInvadeMonsterCount
	}
	return 0
}

func (m *ResistXiongNuScoreProto) GetUnlockNextLevel() bool {
	if m != nil {
		return m.UnlockNextLevel
	}
	return false
}

type XiongNuProto struct {
	Level               int32    `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	BaseId              int32    `protobuf:"varint,2,opt,name=base_id,json=baseId,proto3" json:"base_id,omitempty"`
	BaseX               int32    `protobuf:"varint,3,opt,name=base_x,json=baseX,proto3" json:"base_x,omitempty"`
	BaseY               int32    `protobuf:"varint,4,opt,name=base_y,json=baseY,proto3" json:"base_y,omitempty"`
	StartTime           int32    `protobuf:"varint,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	WipeOutMonsterCount int32    `protobuf:"varint,6,opt,name=wipe_out_monster_count,json=wipeOutMonsterCount,proto3" json:"wipe_out_monster_count,omitempty"`
	Morale              int32    `protobuf:"varint,7,opt,name=morale,proto3" json:"morale,omitempty"`
	Wave                int32    `protobuf:"varint,8,opt,name=wave,proto3" json:"wave,omitempty"`
	NextWaveTime        int32    `protobuf:"varint,9,opt,name=next_wave_time,json=nextWaveTime,proto3" json:"next_wave_time,omitempty"`
	CanResistIds        [][]byte `protobuf:"bytes,11,rep,name=can_resist_ids,json=canResistIds" json:"can_resist_ids,omitempty"`
}

func (m *XiongNuProto) Reset()                    { *m = XiongNuProto{} }
func (m *XiongNuProto) String() string            { return proto.CompactTextString(m) }
func (*XiongNuProto) ProtoMessage()               {}
func (*XiongNuProto) Descriptor() ([]byte, []int) { return fileDescriptorXiongnu, []int{3} }

func (m *XiongNuProto) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *XiongNuProto) GetBaseId() int32 {
	if m != nil {
		return m.BaseId
	}
	return 0
}

func (m *XiongNuProto) GetBaseX() int32 {
	if m != nil {
		return m.BaseX
	}
	return 0
}

func (m *XiongNuProto) GetBaseY() int32 {
	if m != nil {
		return m.BaseY
	}
	return 0
}

func (m *XiongNuProto) GetStartTime() int32 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *XiongNuProto) GetWipeOutMonsterCount() int32 {
	if m != nil {
		return m.WipeOutMonsterCount
	}
	return 0
}

func (m *XiongNuProto) GetMorale() int32 {
	if m != nil {
		return m.Morale
	}
	return 0
}

func (m *XiongNuProto) GetWave() int32 {
	if m != nil {
		return m.Wave
	}
	return 0
}

func (m *XiongNuProto) GetNextWaveTime() int32 {
	if m != nil {
		return m.NextWaveTime
	}
	return 0
}

func (m *XiongNuProto) GetCanResistIds() [][]byte {
	if m != nil {
		return m.CanResistIds
	}
	return nil
}

// 上次抗击匈奴的数据
type LastResistXiongNuProto struct {
	Level               int32             `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	WipeOutMonsterCount int32             `protobuf:"varint,2,opt,name=wipe_out_monster_count,json=wipeOutMonsterCount,proto3" json:"wipe_out_monster_count,omitempty"`
	DestroyBase         bool              `protobuf:"varint,3,opt,name=destroy_base,json=destroyBase,proto3" json:"destroy_base,omitempty"`
	Defenders           []*HeroBasicProto `protobuf:"bytes,4,rep,name=defenders" json:"defenders,omitempty"`
	Grade               int32             `protobuf:"varint,5,opt,name=grade,proto3" json:"grade,omitempty"`
}

func (m *LastResistXiongNuProto) Reset()                    { *m = LastResistXiongNuProto{} }
func (m *LastResistXiongNuProto) String() string            { return proto.CompactTextString(m) }
func (*LastResistXiongNuProto) ProtoMessage()               {}
func (*LastResistXiongNuProto) Descriptor() ([]byte, []int) { return fileDescriptorXiongnu, []int{4} }

func (m *LastResistXiongNuProto) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *LastResistXiongNuProto) GetWipeOutMonsterCount() int32 {
	if m != nil {
		return m.WipeOutMonsterCount
	}
	return 0
}

func (m *LastResistXiongNuProto) GetDestroyBase() bool {
	if m != nil {
		return m.DestroyBase
	}
	return false
}

func (m *LastResistXiongNuProto) GetDefenders() []*HeroBasicProto {
	if m != nil {
		return m.Defenders
	}
	return nil
}

func (m *LastResistXiongNuProto) GetGrade() int32 {
	if m != nil {
		return m.Grade
	}
	return 0
}

// 抗击匈奴战斗详情，客户端自己做排序
type ResistXiongNuFightProto struct {
	Hero            []*HeroBasicProto `protobuf:"bytes,1,rep,name=hero" json:"hero,omitempty"`
	KillSoldier     []int32           `protobuf:"varint,2,rep,name=kill_soldier,json=killSoldier" json:"kill_soldier,omitempty"`
	BeenKillSoldier []int32           `protobuf:"varint,3,rep,name=been_kill_soldier,json=beenKillSoldier" json:"been_kill_soldier,omitempty"`
	Defenser        [][]byte          `protobuf:"bytes,4,rep,name=defenser" json:"defenser,omitempty"`
}

func (m *ResistXiongNuFightProto) Reset()                    { *m = ResistXiongNuFightProto{} }
func (m *ResistXiongNuFightProto) String() string            { return proto.CompactTextString(m) }
func (*ResistXiongNuFightProto) ProtoMessage()               {}
func (*ResistXiongNuFightProto) Descriptor() ([]byte, []int) { return fileDescriptorXiongnu, []int{5} }

func (m *ResistXiongNuFightProto) GetHero() []*HeroBasicProto {
	if m != nil {
		return m.Hero
	}
	return nil
}

func (m *ResistXiongNuFightProto) GetKillSoldier() []int32 {
	if m != nil {
		return m.KillSoldier
	}
	return nil
}

func (m *ResistXiongNuFightProto) GetBeenKillSoldier() []int32 {
	if m != nil {
		return m.BeenKillSoldier
	}
	return nil
}

func (m *ResistXiongNuFightProto) GetDefenser() [][]byte {
	if m != nil {
		return m.Defenser
	}
	return nil
}

// 匈奴主城队伍数据
type XiongNuBaseTroopProto struct {
	Defender  *XiongNuTroopProto   `protobuf:"bytes,1,opt,name=defender" json:"defender,omitempty"`
	Assistors []*XiongNuTroopProto `protobuf:"bytes,2,rep,name=assistors" json:"assistors,omitempty"`
}

func (m *XiongNuBaseTroopProto) Reset()                    { *m = XiongNuBaseTroopProto{} }
func (m *XiongNuBaseTroopProto) String() string            { return proto.CompactTextString(m) }
func (*XiongNuBaseTroopProto) ProtoMessage()               {}
func (*XiongNuBaseTroopProto) Descriptor() ([]byte, []int) { return fileDescriptorXiongnu, []int{6} }

func (m *XiongNuBaseTroopProto) GetDefender() *XiongNuTroopProto {
	if m != nil {
		return m.Defender
	}
	return nil
}

func (m *XiongNuBaseTroopProto) GetAssistors() []*XiongNuTroopProto {
	if m != nil {
		return m.Assistors
	}
	return nil
}

// 部队信息
type XiongNuTroopProto struct {
	Self         *HeroBasicSnapshotProto `protobuf:"bytes,21,opt,name=self" json:"self,omitempty"`
	CaptainIndex []int32                 `protobuf:"varint,15,rep,name=captain_index,json=captainIndex" json:"captain_index,omitempty"`
	Captains     []*CaptainInfoProto     `protobuf:"bytes,16,rep,name=captains" json:"captains,omitempty"`
}

func (m *XiongNuTroopProto) Reset()                    { *m = XiongNuTroopProto{} }
func (m *XiongNuTroopProto) String() string            { return proto.CompactTextString(m) }
func (*XiongNuTroopProto) ProtoMessage()               {}
func (*XiongNuTroopProto) Descriptor() ([]byte, []int) { return fileDescriptorXiongnu, []int{7} }

func (m *XiongNuTroopProto) GetSelf() *HeroBasicSnapshotProto {
	if m != nil {
		return m.Self
	}
	return nil
}

func (m *XiongNuTroopProto) GetCaptainIndex() []int32 {
	if m != nil {
		return m.CaptainIndex
	}
	return nil
}

func (m *XiongNuTroopProto) GetCaptains() []*CaptainInfoProto {
	if m != nil {
		return m.Captains
	}
	return nil
}

func init() {
	proto.RegisterType((*ResistXiongNuMiscProto)(nil), "proto.ResistXiongNuMiscProto")
	proto.RegisterType((*ResistXiongNuDataProto)(nil), "proto.ResistXiongNuDataProto")
	proto.RegisterType((*ResistXiongNuScoreProto)(nil), "proto.ResistXiongNuScoreProto")
	proto.RegisterType((*XiongNuProto)(nil), "proto.XiongNuProto")
	proto.RegisterType((*LastResistXiongNuProto)(nil), "proto.LastResistXiongNuProto")
	proto.RegisterType((*ResistXiongNuFightProto)(nil), "proto.ResistXiongNuFightProto")
	proto.RegisterType((*XiongNuBaseTroopProto)(nil), "proto.XiongNuBaseTroopProto")
	proto.RegisterType((*XiongNuTroopProto)(nil), "proto.XiongNuTroopProto")
}
func (m *ResistXiongNuMiscProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResistXiongNuMiscProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DefenseMemberCount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(m.DefenseMemberCount))
	}
	if m.InvadeDuration != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(m.InvadeDuration))
	}
	if m.ResistDuration != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(m.ResistDuration))
	}
	if len(m.InvadeWaveDuration) > 0 {
		for _, num := range m.InvadeWaveDuration {
			dAtA[i] = 0x20
			i++
			i = encodeVarintXiongnu(dAtA, i, uint64(num))
		}
	}
	if m.MaxMorale != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(m.MaxMorale))
	}
	if m.WipeOutReduceMorale != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(m.WipeOutReduceMorale))
	}
	if m.OneMoraleReduceSoldierPer != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(m.OneMoraleReduceSoldierPer))
	}
	if m.OpenNeedGuildLevel != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(m.OpenNeedGuildLevel))
	}
	if m.MaxCanOpenTimesPerDay != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(m.MaxCanOpenTimesPerDay))
	}
	if m.MinBaseLevel != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(m.MinBaseLevel))
	}
	if m.MaxDistance != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(m.MaxDistance))
	}
	if m.StartAfterServerOpen != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(m.StartAfterServerOpen))
	}
	return i, nil
}

func (m *ResistXiongNuDataProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResistXiongNuDataProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Level != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(m.Level))
	}
	if m.Npc != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(m.Npc))
	}
	if len(m.AssistMonsters) > 0 {
		for _, msg := range m.AssistMonsters {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintXiongnu(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ScorePrizes) > 0 {
		for _, msg := range m.ScorePrizes {
			dAtA[i] = 0x22
			i++
			i = encodeVarintXiongnu(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ScorePrestiges) > 0 {
		for _, num := range m.ScorePrestiges {
			dAtA[i] = 0x28
			i++
			i = encodeVarintXiongnu(dAtA, i, uint64(num))
		}
	}
	if m.ResistSucPrize != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(m.ResistSucPrize.Size()))
		n1, err := m.ResistSucPrize.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.ResistSucPrestige != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(m.ResistSucPrestige))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.TotalMonsterCount != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(m.TotalMonsterCount))
	}
	if m.MaxFightAmount != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(m.MaxFightAmount))
	}
	if len(m.GuildLevelPrizes) > 0 {
		for _, msg := range m.GuildLevelPrizes {
			dAtA[i] = 0x5a
			i++
			i = encodeVarintXiongnu(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ShowPrizes) > 0 {
		for _, msg := range m.ShowPrizes {
			dAtA[i] = 0x62
			i++
			i = encodeVarintXiongnu(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ResistXiongNuScoreProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResistXiongNuScoreProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Level != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(m.Level))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.WipeOutInvadeMonsterCount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(m.WipeOutInvadeMonsterCount))
	}
	if m.UnlockNextLevel {
		dAtA[i] = 0x28
		i++
		if m.UnlockNextLevel {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *XiongNuProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XiongNuProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Level != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(m.Level))
	}
	if m.BaseId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(m.BaseId))
	}
	if m.BaseX != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(m.BaseX))
	}
	if m.BaseY != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(m.BaseY))
	}
	if m.StartTime != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(m.StartTime))
	}
	if m.WipeOutMonsterCount != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(m.WipeOutMonsterCount))
	}
	if m.Morale != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(m.Morale))
	}
	if m.Wave != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(m.Wave))
	}
	if m.NextWaveTime != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(m.NextWaveTime))
	}
	if len(m.CanResistIds) > 0 {
		for _, b := range m.CanResistIds {
			dAtA[i] = 0x5a
			i++
			i = encodeVarintXiongnu(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *LastResistXiongNuProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LastResistXiongNuProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Level != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(m.Level))
	}
	if m.WipeOutMonsterCount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(m.WipeOutMonsterCount))
	}
	if m.DestroyBase {
		dAtA[i] = 0x18
		i++
		if m.DestroyBase {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Defenders) > 0 {
		for _, msg := range m.Defenders {
			dAtA[i] = 0x22
			i++
			i = encodeVarintXiongnu(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Grade != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(m.Grade))
	}
	return i, nil
}

func (m *ResistXiongNuFightProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResistXiongNuFightProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Hero) > 0 {
		for _, msg := range m.Hero {
			dAtA[i] = 0xa
			i++
			i = encodeVarintXiongnu(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.KillSoldier) > 0 {
		for _, num := range m.KillSoldier {
			dAtA[i] = 0x10
			i++
			i = encodeVarintXiongnu(dAtA, i, uint64(num))
		}
	}
	if len(m.BeenKillSoldier) > 0 {
		for _, num := range m.BeenKillSoldier {
			dAtA[i] = 0x18
			i++
			i = encodeVarintXiongnu(dAtA, i, uint64(num))
		}
	}
	if len(m.Defenser) > 0 {
		for _, b := range m.Defenser {
			dAtA[i] = 0x22
			i++
			i = encodeVarintXiongnu(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *XiongNuBaseTroopProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XiongNuBaseTroopProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Defender != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(m.Defender.Size()))
		n2, err := m.Defender.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Assistors) > 0 {
		for _, msg := range m.Assistors {
			dAtA[i] = 0x12
			i++
			i = encodeVarintXiongnu(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *XiongNuTroopProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XiongNuTroopProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CaptainIndex) > 0 {
		for _, num := range m.CaptainIndex {
			dAtA[i] = 0x78
			i++
			i = encodeVarintXiongnu(dAtA, i, uint64(num))
		}
	}
	if len(m.Captains) > 0 {
		for _, msg := range m.Captains {
			dAtA[i] = 0x82
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintXiongnu(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Self != nil {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(m.Self.Size()))
		n3, err := m.Self.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func encodeFixed64Xiongnu(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Xiongnu(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintXiongnu(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ResistXiongNuMiscProto) Size() (n int) {
	var l int
	_ = l
	if m.DefenseMemberCount != 0 {
		n += 1 + sovXiongnu(uint64(m.DefenseMemberCount))
	}
	if m.InvadeDuration != 0 {
		n += 1 + sovXiongnu(uint64(m.InvadeDuration))
	}
	if m.ResistDuration != 0 {
		n += 1 + sovXiongnu(uint64(m.ResistDuration))
	}
	if len(m.InvadeWaveDuration) > 0 {
		for _, e := range m.InvadeWaveDuration {
			n += 1 + sovXiongnu(uint64(e))
		}
	}
	if m.MaxMorale != 0 {
		n += 1 + sovXiongnu(uint64(m.MaxMorale))
	}
	if m.WipeOutReduceMorale != 0 {
		n += 1 + sovXiongnu(uint64(m.WipeOutReduceMorale))
	}
	if m.OneMoraleReduceSoldierPer != 0 {
		n += 1 + sovXiongnu(uint64(m.OneMoraleReduceSoldierPer))
	}
	if m.OpenNeedGuildLevel != 0 {
		n += 1 + sovXiongnu(uint64(m.OpenNeedGuildLevel))
	}
	if m.MaxCanOpenTimesPerDay != 0 {
		n += 1 + sovXiongnu(uint64(m.MaxCanOpenTimesPerDay))
	}
	if m.MinBaseLevel != 0 {
		n += 1 + sovXiongnu(uint64(m.MinBaseLevel))
	}
	if m.MaxDistance != 0 {
		n += 1 + sovXiongnu(uint64(m.MaxDistance))
	}
	if m.StartAfterServerOpen != 0 {
		n += 1 + sovXiongnu(uint64(m.StartAfterServerOpen))
	}
	return n
}

func (m *ResistXiongNuDataProto) Size() (n int) {
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovXiongnu(uint64(m.Level))
	}
	if m.Npc != 0 {
		n += 1 + sovXiongnu(uint64(m.Npc))
	}
	if len(m.AssistMonsters) > 0 {
		for _, e := range m.AssistMonsters {
			l = e.Size()
			n += 1 + l + sovXiongnu(uint64(l))
		}
	}
	if len(m.ScorePrizes) > 0 {
		for _, e := range m.ScorePrizes {
			l = e.Size()
			n += 1 + l + sovXiongnu(uint64(l))
		}
	}
	if len(m.ScorePrestiges) > 0 {
		for _, e := range m.ScorePrestiges {
			n += 1 + sovXiongnu(uint64(e))
		}
	}
	if m.ResistSucPrize != nil {
		l = m.ResistSucPrize.Size()
		n += 1 + l + sovXiongnu(uint64(l))
	}
	if m.ResistSucPrestige != 0 {
		n += 1 + sovXiongnu(uint64(m.ResistSucPrestige))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovXiongnu(uint64(l))
	}
	if m.TotalMonsterCount != 0 {
		n += 1 + sovXiongnu(uint64(m.TotalMonsterCount))
	}
	if m.MaxFightAmount != 0 {
		n += 1 + sovXiongnu(uint64(m.MaxFightAmount))
	}
	if len(m.GuildLevelPrizes) > 0 {
		for _, e := range m.GuildLevelPrizes {
			l = e.Size()
			n += 1 + l + sovXiongnu(uint64(l))
		}
	}
	if len(m.ShowPrizes) > 0 {
		for _, e := range m.ShowPrizes {
			l = e.Size()
			n += 1 + l + sovXiongnu(uint64(l))
		}
	}
	return n
}

func (m *ResistXiongNuScoreProto) Size() (n int) {
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovXiongnu(uint64(m.Level))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovXiongnu(uint64(l))
	}
	if m.WipeOutInvadeMonsterCount != 0 {
		n += 1 + sovXiongnu(uint64(m.WipeOutInvadeMonsterCount))
	}
	if m.UnlockNextLevel {
		n += 2
	}
	return n
}

func (m *XiongNuProto) Size() (n int) {
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovXiongnu(uint64(m.Level))
	}
	if m.BaseId != 0 {
		n += 1 + sovXiongnu(uint64(m.BaseId))
	}
	if m.BaseX != 0 {
		n += 1 + sovXiongnu(uint64(m.BaseX))
	}
	if m.BaseY != 0 {
		n += 1 + sovXiongnu(uint64(m.BaseY))
	}
	if m.StartTime != 0 {
		n += 1 + sovXiongnu(uint64(m.StartTime))
	}
	if m.WipeOutMonsterCount != 0 {
		n += 1 + sovXiongnu(uint64(m.WipeOutMonsterCount))
	}
	if m.Morale != 0 {
		n += 1 + sovXiongnu(uint64(m.Morale))
	}
	if m.Wave != 0 {
		n += 1 + sovXiongnu(uint64(m.Wave))
	}
	if m.NextWaveTime != 0 {
		n += 1 + sovXiongnu(uint64(m.NextWaveTime))
	}
	if len(m.CanResistIds) > 0 {
		for _, b := range m.CanResistIds {
			l = len(b)
			n += 1 + l + sovXiongnu(uint64(l))
		}
	}
	return n
}

func (m *LastResistXiongNuProto) Size() (n int) {
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovXiongnu(uint64(m.Level))
	}
	if m.WipeOutMonsterCount != 0 {
		n += 1 + sovXiongnu(uint64(m.WipeOutMonsterCount))
	}
	if m.DestroyBase {
		n += 2
	}
	if len(m.Defenders) > 0 {
		for _, e := range m.Defenders {
			l = e.Size()
			n += 1 + l + sovXiongnu(uint64(l))
		}
	}
	if m.Grade != 0 {
		n += 1 + sovXiongnu(uint64(m.Grade))
	}
	return n
}

func (m *ResistXiongNuFightProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Hero) > 0 {
		for _, e := range m.Hero {
			l = e.Size()
			n += 1 + l + sovXiongnu(uint64(l))
		}
	}
	if len(m.KillSoldier) > 0 {
		for _, e := range m.KillSoldier {
			n += 1 + sovXiongnu(uint64(e))
		}
	}
	if len(m.BeenKillSoldier) > 0 {
		for _, e := range m.BeenKillSoldier {
			n += 1 + sovXiongnu(uint64(e))
		}
	}
	if len(m.Defenser) > 0 {
		for _, b := range m.Defenser {
			l = len(b)
			n += 1 + l + sovXiongnu(uint64(l))
		}
	}
	return n
}

func (m *XiongNuBaseTroopProto) Size() (n int) {
	var l int
	_ = l
	if m.Defender != nil {
		l = m.Defender.Size()
		n += 1 + l + sovXiongnu(uint64(l))
	}
	if len(m.Assistors) > 0 {
		for _, e := range m.Assistors {
			l = e.Size()
			n += 1 + l + sovXiongnu(uint64(l))
		}
	}
	return n
}

func (m *XiongNuTroopProto) Size() (n int) {
	var l int
	_ = l
	if len(m.CaptainIndex) > 0 {
		for _, e := range m.CaptainIndex {
			n += 1 + sovXiongnu(uint64(e))
		}
	}
	if len(m.Captains) > 0 {
		for _, e := range m.Captains {
			l = e.Size()
			n += 2 + l + sovXiongnu(uint64(l))
		}
	}
	if m.Self != nil {
		l = m.Self.Size()
		n += 2 + l + sovXiongnu(uint64(l))
	}
	return n
}

func sovXiongnu(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozXiongnu(x uint64) (n int) {
	return sovXiongnu(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ResistXiongNuMiscProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXiongnu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResistXiongNuMiscProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResistXiongNuMiscProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefenseMemberCount", wireType)
			}
			m.DefenseMemberCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefenseMemberCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvadeDuration", wireType)
			}
			m.InvadeDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InvadeDuration |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResistDuration", wireType)
			}
			m.ResistDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResistDuration |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXiongnu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.InvadeWaveDuration = append(m.InvadeWaveDuration, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXiongnu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthXiongnu
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXiongnu
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.InvadeWaveDuration = append(m.InvadeWaveDuration, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field InvadeWaveDuration", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxMorale", wireType)
			}
			m.MaxMorale = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxMorale |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WipeOutReduceMorale", wireType)
			}
			m.WipeOutReduceMorale = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WipeOutReduceMorale |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OneMoraleReduceSoldierPer", wireType)
			}
			m.OneMoraleReduceSoldierPer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OneMoraleReduceSoldierPer |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenNeedGuildLevel", wireType)
			}
			m.OpenNeedGuildLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpenNeedGuildLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCanOpenTimesPerDay", wireType)
			}
			m.MaxCanOpenTimesPerDay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxCanOpenTimesPerDay |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinBaseLevel", wireType)
			}
			m.MinBaseLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinBaseLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDistance", wireType)
			}
			m.MaxDistance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxDistance |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartAfterServerOpen", wireType)
			}
			m.StartAfterServerOpen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartAfterServerOpen |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXiongnu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXiongnu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResistXiongNuDataProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXiongnu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResistXiongNuDataProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResistXiongNuDataProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Npc", wireType)
			}
			m.Npc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Npc |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssistMonsters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXiongnu
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssistMonsters = append(m.AssistMonsters, &MonsterMasterDataProto{})
			if err := m.AssistMonsters[len(m.AssistMonsters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScorePrizes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXiongnu
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScorePrizes = append(m.ScorePrizes, &PrizeProto{})
			if err := m.ScorePrizes[len(m.ScorePrizes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXiongnu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ScorePrestiges = append(m.ScorePrestiges, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXiongnu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthXiongnu
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXiongnu
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ScorePrestiges = append(m.ScorePrestiges, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ScorePrestiges", wireType)
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResistSucPrize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXiongnu
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResistSucPrize == nil {
				m.ResistSucPrize = &PrizeProto{}
			}
			if err := m.ResistSucPrize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResistSucPrestige", wireType)
			}
			m.ResistSucPrestige = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResistSucPrestige |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthXiongnu
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalMonsterCount", wireType)
			}
			m.TotalMonsterCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalMonsterCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFightAmount", wireType)
			}
			m.MaxFightAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxFightAmount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildLevelPrizes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXiongnu
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildLevelPrizes = append(m.GuildLevelPrizes, &GuildLevelPrizeProto{})
			if err := m.GuildLevelPrizes[len(m.GuildLevelPrizes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowPrizes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXiongnu
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShowPrizes = append(m.ShowPrizes, &PrizeProto{})
			if err := m.ShowPrizes[len(m.ShowPrizes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXiongnu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXiongnu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResistXiongNuScoreProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXiongnu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResistXiongNuScoreProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResistXiongNuScoreProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthXiongnu
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WipeOutInvadeMonsterCount", wireType)
			}
			m.WipeOutInvadeMonsterCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WipeOutInvadeMonsterCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockNextLevel", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UnlockNextLevel = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipXiongnu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXiongnu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XiongNuProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXiongnu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XiongNuProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XiongNuProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseId", wireType)
			}
			m.BaseId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaseId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseX", wireType)
			}
			m.BaseX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaseX |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseY", wireType)
			}
			m.BaseY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaseY |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WipeOutMonsterCount", wireType)
			}
			m.WipeOutMonsterCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WipeOutMonsterCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Morale", wireType)
			}
			m.Morale = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Morale |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wave", wireType)
			}
			m.Wave = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wave |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextWaveTime", wireType)
			}
			m.NextWaveTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextWaveTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CanResistIds", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthXiongnu
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CanResistIds = append(m.CanResistIds, make([]byte, postIndex-iNdEx))
			copy(m.CanResistIds[len(m.CanResistIds)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXiongnu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXiongnu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LastResistXiongNuProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXiongnu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LastResistXiongNuProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LastResistXiongNuProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WipeOutMonsterCount", wireType)
			}
			m.WipeOutMonsterCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WipeOutMonsterCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestroyBase", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DestroyBase = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Defenders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXiongnu
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Defenders = append(m.Defenders, &HeroBasicProto{})
			if err := m.Defenders[len(m.Defenders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grade", wireType)
			}
			m.Grade = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Grade |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXiongnu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXiongnu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResistXiongNuFightProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXiongnu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResistXiongNuFightProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResistXiongNuFightProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hero", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXiongnu
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hero = append(m.Hero, &HeroBasicProto{})
			if err := m.Hero[len(m.Hero)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXiongnu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.KillSoldier = append(m.KillSoldier, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXiongnu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthXiongnu
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXiongnu
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.KillSoldier = append(m.KillSoldier, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field KillSoldier", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXiongnu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BeenKillSoldier = append(m.BeenKillSoldier, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXiongnu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthXiongnu
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXiongnu
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BeenKillSoldier = append(m.BeenKillSoldier, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BeenKillSoldier", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Defenser", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthXiongnu
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Defenser = append(m.Defenser, make([]byte, postIndex-iNdEx))
			copy(m.Defenser[len(m.Defenser)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXiongnu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXiongnu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XiongNuBaseTroopProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXiongnu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XiongNuBaseTroopProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XiongNuBaseTroopProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Defender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXiongnu
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Defender == nil {
				m.Defender = &XiongNuTroopProto{}
			}
			if err := m.Defender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assistors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXiongnu
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Assistors = append(m.Assistors, &XiongNuTroopProto{})
			if err := m.Assistors[len(m.Assistors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXiongnu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXiongnu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XiongNuTroopProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXiongnu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XiongNuTroopProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XiongNuTroopProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 15:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXiongnu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CaptainIndex = append(m.CaptainIndex, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXiongnu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthXiongnu
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXiongnu
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CaptainIndex = append(m.CaptainIndex, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainIndex", wireType)
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Captains", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXiongnu
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Captains = append(m.Captains, &CaptainInfoProto{})
			if err := m.Captains[len(m.Captains)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Self", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXiongnu
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Self == nil {
				m.Self = &HeroBasicSnapshotProto{}
			}
			if err := m.Self.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXiongnu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXiongnu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipXiongnu(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowXiongnu
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthXiongnu
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowXiongnu
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipXiongnu(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthXiongnu = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowXiongnu   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/pb/shared_proto/xiongnu.proto", fileDescriptorXiongnu)
}

var fileDescriptorXiongnu = []byte{
	// 1182 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xdd, 0x4e, 0x1c, 0x37,
	0x14, 0xce, 0x02, 0x4b, 0xe0, 0xec, 0x94, 0x1f, 0x87, 0x9f, 0x09, 0x15, 0x88, 0xac, 0x52, 0x85,
	0xb6, 0x12, 0x34, 0x40, 0x9b, 0x56, 0xbd, 0x49, 0x08, 0x4a, 0x83, 0x1a, 0x12, 0xb4, 0x44, 0x6a,
	0xda, 0x9b, 0x91, 0x99, 0x39, 0xec, 0x5a, 0x99, 0xb1, 0x57, 0xb6, 0x07, 0x96, 0xde, 0xf7, 0x1d,
	0xfa, 0x00, 0x7d, 0x81, 0x5e, 0xe5, 0x09, 0x2a, 0xf5, 0xb2, 0xbd, 0xe9, 0x75, 0x95, 0xbe, 0x48,
	0xe5, 0x63, 0xcf, 0xfe, 0xd0, 0x82, 0x92, 0x1b, 0x18, 0x9f, 0xf3, 0x1d, 0x9f, 0x1f, 0x7f, 0xfe,
	0xbc, 0xf0, 0xa0, 0x2d, 0x6c, 0xa7, 0x3c, 0xd9, 0x4c, 0x55, 0xb1, 0x95, 0x8b, 0x76, 0xc7, 0x76,
	0xf9, 0xf9, 0x56, 0xc1, 0x73, 0x7c, 0xb0, 0xd5, 0x3d, 0xd9, 0x32, 0x1d, 0xae, 0x31, 0x4b, 0xba,
	0x5a, 0x59, 0xb5, 0xd5, 0x13, 0x4a, 0xb6, 0x65, 0xb9, 0x49, 0x2b, 0x56, 0xa7, 0x7f, 0x2b, 0xbb,
	0xef, 0x1e, 0x7f, 0xc2, 0x0d, 0xfa, 0xe0, 0x95, 0xf7, 0xc8, 0x5a, 0x28, 0x69, 0x2c, 0xea, 0x10,
	0xf8, 0xe5, 0xbb, 0x07, 0x1a, 0xc9, 0xbb, 0xa6, 0xa3, 0xec, 0xfb, 0x47, 0x16, 0x22, 0x17, 0x96,
	0xeb, 0x0b, 0x1f, 0xd9, 0xfc, 0x6b, 0x02, 0x96, 0x5a, 0x68, 0x84, 0xb1, 0xaf, 0xdc, 0x04, 0x9e,
	0x97, 0x87, 0xc2, 0xa4, 0x47, 0x34, 0x84, 0xcf, 0x60, 0x21, 0xc3, 0x53, 0x94, 0x06, 0x93, 0x02,
	0x8b, 0x13, 0xd4, 0x49, 0xaa, 0x4a, 0x69, 0xe3, 0xda, 0x7a, 0x6d, 0xa3, 0xde, 0x62, 0xc1, 0x77,
	0x48, 0xae, 0xc7, 0xce, 0xc3, 0xee, 0xc1, 0xac, 0x90, 0x67, 0x3c, 0xc3, 0x24, 0x2b, 0x35, 0xb7,
	0x42, 0xc9, 0x78, 0x8c, 0xc0, 0x33, 0xde, 0xbc, 0x1f, 0xac, 0x0e, 0xa8, 0x29, 0xe9, 0x00, 0x38,
	0xee, 0x81, 0xde, 0xdc, 0x07, 0xee, 0xc2, 0x42, 0xd8, 0xf1, 0x9c, 0x9f, 0x0d, 0x6d, 0x3b, 0xb1,
	0x3e, 0xbe, 0x51, 0xdf, 0x1b, 0x9b, 0xbb, 0xd1, 0x62, 0xde, 0xff, 0x1d, 0x3f, 0x1b, 0x6c, 0xbf,
	0x0a, 0x50, 0xf0, 0x5e, 0x52, 0x28, 0xcd, 0x73, 0x8c, 0xeb, 0xb4, 0xf3, 0x74, 0xc1, 0x7b, 0x87,
	0x64, 0x60, 0x3b, 0xb0, 0x74, 0x2e, 0xba, 0x98, 0xa8, 0xd2, 0x26, 0x1a, 0xb3, 0x32, 0xc5, 0x0a,
	0x3a, 0x49, 0xd0, 0x5b, 0xce, 0xfb, 0xa2, 0xb4, 0x2d, 0xf2, 0x85, 0xa0, 0x87, 0xb0, 0xaa, 0x64,
	0x05, 0xac, 0xc2, 0x8c, 0xca, 0x33, 0x81, 0x3a, 0xe9, 0xa2, 0x8e, 0x6f, 0x52, 0xec, 0x6d, 0x25,
	0x43, 0x84, 0x8f, 0x3e, 0xf6, 0x88, 0x23, 0xd4, 0xec, 0x3e, 0x2c, 0xaa, 0x2e, 0xca, 0x44, 0x22,
	0x66, 0x49, 0xbb, 0x14, 0x79, 0x96, 0xe4, 0x78, 0x86, 0x79, 0x3c, 0xe5, 0x07, 0xea, 0x9c, 0xcf,
	0x11, 0xb3, 0x6f, 0x9c, 0xeb, 0x99, 0xf3, 0xb0, 0xaf, 0x60, 0xc5, 0x35, 0x92, 0x72, 0x99, 0x50,
	0xa8, 0x15, 0x05, 0x1a, 0x97, 0x2d, 0xc9, 0xf8, 0x45, 0x3c, 0x4d, 0x71, 0x8b, 0x05, 0xef, 0x3d,
	0xe6, 0xf2, 0x45, 0x17, 0xe5, 0x4b, 0xe7, 0x3e, 0x42, 0xbd, 0xcf, 0x2f, 0xd8, 0x5d, 0x98, 0x29,
	0x84, 0x4c, 0x1c, 0x2f, 0x43, 0x1a, 0x20, 0x78, 0x54, 0x08, 0xb9, 0xc7, 0x0d, 0xfa, 0x04, 0x77,
	0x20, 0x72, 0x09, 0x32, 0x61, 0x2c, 0x97, 0x29, 0xc6, 0x0d, 0xc2, 0x34, 0x0a, 0xde, 0xdb, 0x0f,
	0x26, 0xf6, 0x39, 0x2c, 0x1b, 0xcb, 0xb5, 0x4d, 0xf8, 0xa9, 0x45, 0x9d, 0x18, 0xd4, 0x67, 0xa8,
	0xa9, 0x9c, 0x38, 0x22, 0xf4, 0x02, 0xb9, 0x1f, 0x39, 0xef, 0x31, 0x39, 0x5d, 0x29, 0xcd, 0xdf,
	0x2e, 0x13, 0x6b, 0x9f, 0x5b, 0xee, 0x89, 0xb5, 0x00, 0x75, 0x5f, 0x91, 0x67, 0x92, 0x5f, 0xb0,
	0x39, 0x18, 0x97, 0xdd, 0x34, 0x10, 0xc6, 0x7d, 0xb2, 0x27, 0x30, 0xcb, 0x0d, 0xb1, 0x24, 0xdc,
	0x13, 0x13, 0x8f, 0xaf, 0x8f, 0x6f, 0x34, 0xb6, 0x57, 0x3d, 0x79, 0x37, 0x0f, 0xbd, 0xf9, 0x90,
	0xbb, 0xbf, 0xfd, 0xfd, 0x5b, 0x33, 0x3e, 0x2a, 0x78, 0x0d, 0xdb, 0x85, 0xc8, 0xa4, 0x4a, 0x63,
	0xd2, 0xd5, 0xe2, 0x47, 0x34, 0x44, 0x9e, 0xc6, 0xf6, 0x7c, 0xd8, 0xe4, 0xc8, 0x19, 0x7d, 0x60,
	0x83, 0x60, 0x64, 0x30, 0xec, 0x53, 0x98, 0xad, 0xa2, 0xd0, 0x58, 0xd1, 0x46, 0x13, 0xd7, 0xfb,
	0xac, 0x9b, 0x09, 0xc8, 0xe0, 0x61, 0x5f, 0xc3, 0x5c, 0x20, 0xb4, 0x29, 0x53, 0x9f, 0x87, 0xc8,
	0xf4, 0xbf, 0x69, 0x02, 0xc9, 0x8f, 0xcb, 0x94, 0x8c, 0x6c, 0x13, 0x6e, 0x8d, 0x04, 0xfb, 0x4d,
	0x03, 0xa1, 0xe6, 0x87, 0xc0, 0xde, 0xc1, 0x18, 0x4c, 0x48, 0x5e, 0x20, 0xf1, 0x66, 0xba, 0x45,
	0xdf, 0x6e, 0x0f, 0xab, 0x2c, 0xcf, 0xab, 0x51, 0x85, 0xbb, 0xea, 0x29, 0x32, 0x4f, 0xae, 0x30,
	0x0f, 0x7f, 0x55, 0x37, 0x60, 0xce, 0x1d, 0xfc, 0xa9, 0x13, 0x8b, 0x84, 0x17, 0x04, 0xf6, 0x04,
	0x99, 0x29, 0x78, 0xef, 0x89, 0x33, 0x3f, 0x22, 0x2b, 0x3b, 0x00, 0x36, 0x44, 0xd6, 0x6a, 0x86,
	0x0d, 0x9a, 0xe1, 0x87, 0xa1, 0xb9, 0x01, 0x65, 0x87, 0xda, 0x9c, 0x6b, 0x8f, 0x5a, 0x0d, 0xdb,
	0x86, 0x86, 0xe9, 0xa8, 0xf3, 0x6a, 0x8f, 0xe8, 0xaa, 0x73, 0x00, 0x87, 0xf2, 0x31, 0xcd, 0x5f,
	0x6b, 0xb0, 0x3c, 0xc2, 0xa3, 0x63, 0x3f, 0xf9, 0xab, 0x89, 0x54, 0x8d, 0x67, 0x6c, 0x68, 0x3c,
	0x0f, 0x61, 0xb5, 0x7f, 0xe5, 0x83, 0xa0, 0x8c, 0x0e, 0xca, 0xcb, 0xcf, 0xed, 0x70, 0xf3, 0x0f,
	0x08, 0x32, 0x32, 0xb0, 0x4f, 0x60, 0xbe, 0x94, 0xb9, 0x4a, 0x5f, 0x27, 0x12, 0x7b, 0x36, 0x5c,
	0x29, 0x27, 0x2d, 0x53, 0xad, 0x59, 0xef, 0x78, 0x8e, 0x3d, 0x4b, 0xdd, 0x36, 0xdf, 0x8c, 0x41,
	0x14, 0xaa, 0xbd, 0xae, 0xd0, 0x65, 0xb8, 0x49, 0xd7, 0x53, 0x64, 0x81, 0xf5, 0x93, 0x6e, 0x79,
	0x90, 0xb1, 0x45, 0xa0, 0xaf, 0xa4, 0x17, 0xca, 0xaa, 0xbb, 0xd5, 0xab, 0xbe, 0xf9, 0x22, 0x9e,
	0x18, 0x98, 0xbf, 0x77, 0x6a, 0xe7, 0x2f, 0xa8, 0x53, 0x87, 0x4a, 0xed, 0xc8, 0xe2, 0xf4, 0x60,
	0x44, 0xed, 0x46, 0x7b, 0x1e, 0x55, 0xbb, 0x91, 0x6e, 0x97, 0x60, 0x32, 0x48, 0xa2, 0x67, 0x61,
	0x58, 0xb9, 0xd9, 0x3a, 0x21, 0x0e, 0x92, 0x45, 0xdf, 0x4e, 0x69, 0x68, 0x24, 0xa4, 0xd0, 0x54,
	0x83, 0x67, 0x5d, 0xe4, 0xac, 0x4e, 0x97, 0xa9, 0x8c, 0xbb, 0x30, 0xe3, 0x64, 0x2c, 0x10, 0x5d,
	0x64, 0x9e, 0x42, 0x51, 0x2b, 0x4a, 0xb9, 0xf4, 0xe7, 0x7b, 0x90, 0x99, 0xe6, 0x9f, 0x35, 0x58,
	0x7a, 0xc6, 0x8d, 0x1d, 0x39, 0xf1, 0xeb, 0x66, 0x78, 0x75, 0x77, 0x63, 0x57, 0x77, 0x77, 0x07,
	0xa2, 0x0c, 0x8d, 0xd5, 0xea, 0x82, 0xf4, 0x91, 0xa6, 0x3c, 0xd5, 0x6a, 0x04, 0x9b, 0x53, 0x47,
	0xb6, 0x03, 0xd3, 0xf4, 0xc0, 0x65, 0x4e, 0x75, 0xbc, 0x60, 0x2c, 0x06, 0xa2, 0x3e, 0x45, 0xad,
	0xf6, 0xb8, 0x11, 0xfe, 0x99, 0x6c, 0x0d, 0x70, 0xae, 0xc4, 0xb6, 0xe6, 0x59, 0x75, 0x08, 0x7e,
	0xd1, 0x7c, 0x73, 0x99, 0xc1, 0x74, 0xbb, 0x7c, 0x53, 0x1f, 0xc3, 0x44, 0x07, 0xb5, 0x8a, 0x6b,
	0xd7, 0x65, 0x20, 0x08, 0xfb, 0x08, 0xa2, 0xd7, 0x22, 0xcf, 0xab, 0x37, 0x27, 0x1e, 0xeb, 0x8b,
	0x51, 0xc3, 0xd9, 0xc3, 0x43, 0xc3, 0x36, 0x61, 0xfe, 0x04, 0x51, 0x26, 0x23, 0xd8, 0xf1, 0x3e,
	0x76, 0xd6, 0x39, 0xbf, 0x1d, 0xc2, 0xaf, 0xc0, 0x54, 0x78, 0xc9, 0x35, 0xf5, 0x19, 0xb5, 0xfa,
	0xeb, 0xe6, 0x4f, 0x35, 0x58, 0x0c, 0x35, 0xbb, 0xa1, 0xbc, 0xd4, 0x4a, 0x75, 0x7d, 0xdd, 0xbb,
	0x21, 0x2a, 0x43, 0x4d, 0xe7, 0xd1, 0xd8, 0x8e, 0x43, 0xed, 0x01, 0x3f, 0xc0, 0xb6, 0xfa, 0x48,
	0xf6, 0x05, 0x4c, 0x7b, 0x69, 0x56, 0xda, 0x50, 0xfd, 0xd7, 0x85, 0x0d, 0xa0, 0xcd, 0x5f, 0x6a,
	0x30, 0xff, 0x1f, 0x00, 0xbb, 0x07, 0x1f, 0xa4, 0xbc, 0x6b, 0xb9, 0x90, 0x89, 0x90, 0x19, 0xf6,
	0xe2, 0xd9, 0x7e, 0x97, 0x51, 0x70, 0x1c, 0x38, 0x3b, 0xdb, 0x81, 0xa9, 0xb0, 0x36, 0xf1, 0x1c,
	0x65, 0x5d, 0x0e, 0x59, 0x1f, 0x57, 0xb0, 0x53, 0x15, 0x6a, 0xad, 0x80, 0xec, 0x3e, 0x4c, 0x18,
	0xcc, 0x4f, 0xe3, 0x45, 0xea, 0x6e, 0xf5, 0xf2, 0xc9, 0x1c, 0x87, 0x1f, 0x60, 0xe1, 0x84, 0x1c,
	0x74, 0x6f, 0xfd, 0xf7, 0xb7, 0x6b, 0xb5, 0x3f, 0xde, 0xae, 0xd5, 0xfe, 0x7e, 0xbb, 0x56, 0xfb,
	0xf9, 0x9f, 0xb5, 0x1b, 0x4f, 0x6b, 0x3f, 0x44, 0xc3, 0x3f, 0xbe, 0x4e, 0x26, 0xe9, 0xdf, 0xce,
	0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xe4, 0x44, 0x9d, 0x23, 0x99, 0x0a, 0x00, 0x00,
}
