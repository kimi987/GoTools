// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/pb/shared_proto/xuanyuan.proto
// DO NOT EDIT!

package shared_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type XuanyuanTargetProto struct {
	Hero        *HeroBasicProto `protobuf:"bytes,1,opt,name=hero" json:"hero,omitempty"`
	Win         int32           `protobuf:"varint,11,opt,name=win,proto3" json:"win,omitempty"`
	Lose        int32           `protobuf:"varint,12,opt,name=lose,proto3" json:"lose,omitempty"`
	Score       int32           `protobuf:"varint,13,opt,name=score,proto3" json:"score,omitempty"`
	FightAmount int32           `protobuf:"varint,14,opt,name=fight_amount,json=fightAmount,proto3" json:"fight_amount,omitempty"`
}

func (m *XuanyuanTargetProto) Reset()                    { *m = XuanyuanTargetProto{} }
func (m *XuanyuanTargetProto) String() string            { return proto.CompactTextString(m) }
func (*XuanyuanTargetProto) ProtoMessage()               {}
func (*XuanyuanTargetProto) Descriptor() ([]byte, []int) { return fileDescriptorXuanyuan, []int{0} }

func (m *XuanyuanTargetProto) GetHero() *HeroBasicProto {
	if m != nil {
		return m.Hero
	}
	return nil
}

func (m *XuanyuanTargetProto) GetWin() int32 {
	if m != nil {
		return m.Win
	}
	return 0
}

func (m *XuanyuanTargetProto) GetLose() int32 {
	if m != nil {
		return m.Lose
	}
	return 0
}

func (m *XuanyuanTargetProto) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *XuanyuanTargetProto) GetFightAmount() int32 {
	if m != nil {
		return m.FightAmount
	}
	return 0
}

type XuanyuanRecordProto struct {
	Id            int32                    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Attacker      *XuanyuanRecordHeroProto `protobuf:"bytes,2,opt,name=attacker" json:"attacker,omitempty"`
	Defender      *XuanyuanRecordHeroProto `protobuf:"bytes,3,opt,name=defender" json:"defender,omitempty"`
	IsAttackerWin bool                     `protobuf:"varint,5,opt,name=is_attacker_win,json=isAttackerWin,proto3" json:"is_attacker_win,omitempty"`
	Time          int32                    `protobuf:"varint,6,opt,name=time,proto3" json:"time,omitempty"`
	Link          string                   `protobuf:"bytes,7,opt,name=link,proto3" json:"link,omitempty"`
}

func (m *XuanyuanRecordProto) Reset()                    { *m = XuanyuanRecordProto{} }
func (m *XuanyuanRecordProto) String() string            { return proto.CompactTextString(m) }
func (*XuanyuanRecordProto) ProtoMessage()               {}
func (*XuanyuanRecordProto) Descriptor() ([]byte, []int) { return fileDescriptorXuanyuan, []int{1} }

func (m *XuanyuanRecordProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *XuanyuanRecordProto) GetAttacker() *XuanyuanRecordHeroProto {
	if m != nil {
		return m.Attacker
	}
	return nil
}

func (m *XuanyuanRecordProto) GetDefender() *XuanyuanRecordHeroProto {
	if m != nil {
		return m.Defender
	}
	return nil
}

func (m *XuanyuanRecordProto) GetIsAttackerWin() bool {
	if m != nil {
		return m.IsAttackerWin
	}
	return false
}

func (m *XuanyuanRecordProto) GetTime() int32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *XuanyuanRecordProto) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

type XuanyuanRecordHeroProto struct {
	Hero         *HeroBasicProto `protobuf:"bytes,1,opt,name=hero" json:"hero,omitempty"`
	FightAmount  int32           `protobuf:"varint,8,opt,name=fight_amount,json=fightAmount,proto3" json:"fight_amount,omitempty"`
	Race         []Race          `protobuf:"varint,11,rep,name=race,enum=proto.Race" json:"race,omitempty"`
	ScoreChanged int32           `protobuf:"varint,12,opt,name=score_changed,json=scoreChanged,proto3" json:"score_changed,omitempty"`
}

func (m *XuanyuanRecordHeroProto) Reset()                    { *m = XuanyuanRecordHeroProto{} }
func (m *XuanyuanRecordHeroProto) String() string            { return proto.CompactTextString(m) }
func (*XuanyuanRecordHeroProto) ProtoMessage()               {}
func (*XuanyuanRecordHeroProto) Descriptor() ([]byte, []int) { return fileDescriptorXuanyuan, []int{2} }

func (m *XuanyuanRecordHeroProto) GetHero() *HeroBasicProto {
	if m != nil {
		return m.Hero
	}
	return nil
}

func (m *XuanyuanRecordHeroProto) GetFightAmount() int32 {
	if m != nil {
		return m.FightAmount
	}
	return 0
}

func (m *XuanyuanRecordHeroProto) GetRace() []Race {
	if m != nil {
		return m.Race
	}
	return nil
}

func (m *XuanyuanRecordHeroProto) GetScoreChanged() int32 {
	if m != nil {
		return m.ScoreChanged
	}
	return 0
}

func init() {
	proto.RegisterType((*XuanyuanTargetProto)(nil), "proto.XuanyuanTargetProto")
	proto.RegisterType((*XuanyuanRecordProto)(nil), "proto.XuanyuanRecordProto")
	proto.RegisterType((*XuanyuanRecordHeroProto)(nil), "proto.XuanyuanRecordHeroProto")
}
func (m *XuanyuanTargetProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XuanyuanTargetProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Hero != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXuanyuan(dAtA, i, uint64(m.Hero.Size()))
		n1, err := m.Hero.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Win != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintXuanyuan(dAtA, i, uint64(m.Win))
	}
	if m.Lose != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintXuanyuan(dAtA, i, uint64(m.Lose))
	}
	if m.Score != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintXuanyuan(dAtA, i, uint64(m.Score))
	}
	if m.FightAmount != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintXuanyuan(dAtA, i, uint64(m.FightAmount))
	}
	return i, nil
}

func (m *XuanyuanRecordProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XuanyuanRecordProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintXuanyuan(dAtA, i, uint64(m.Id))
	}
	if m.Attacker != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintXuanyuan(dAtA, i, uint64(m.Attacker.Size()))
		n2, err := m.Attacker.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Defender != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintXuanyuan(dAtA, i, uint64(m.Defender.Size()))
		n3, err := m.Defender.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.IsAttackerWin {
		dAtA[i] = 0x28
		i++
		if m.IsAttackerWin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Time != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintXuanyuan(dAtA, i, uint64(m.Time))
	}
	if len(m.Link) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintXuanyuan(dAtA, i, uint64(len(m.Link)))
		i += copy(dAtA[i:], m.Link)
	}
	return i, nil
}

func (m *XuanyuanRecordHeroProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XuanyuanRecordHeroProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Hero != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintXuanyuan(dAtA, i, uint64(m.Hero.Size()))
		n4, err := m.Hero.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.FightAmount != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintXuanyuan(dAtA, i, uint64(m.FightAmount))
	}
	if len(m.Race) > 0 {
		for _, num := range m.Race {
			dAtA[i] = 0x58
			i++
			i = encodeVarintXuanyuan(dAtA, i, uint64(num))
		}
	}
	if m.ScoreChanged != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintXuanyuan(dAtA, i, uint64(m.ScoreChanged))
	}
	return i, nil
}

func encodeFixed64Xuanyuan(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Xuanyuan(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintXuanyuan(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *XuanyuanTargetProto) Size() (n int) {
	var l int
	_ = l
	if m.Hero != nil {
		l = m.Hero.Size()
		n += 1 + l + sovXuanyuan(uint64(l))
	}
	if m.Win != 0 {
		n += 1 + sovXuanyuan(uint64(m.Win))
	}
	if m.Lose != 0 {
		n += 1 + sovXuanyuan(uint64(m.Lose))
	}
	if m.Score != 0 {
		n += 1 + sovXuanyuan(uint64(m.Score))
	}
	if m.FightAmount != 0 {
		n += 1 + sovXuanyuan(uint64(m.FightAmount))
	}
	return n
}

func (m *XuanyuanRecordProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovXuanyuan(uint64(m.Id))
	}
	if m.Attacker != nil {
		l = m.Attacker.Size()
		n += 1 + l + sovXuanyuan(uint64(l))
	}
	if m.Defender != nil {
		l = m.Defender.Size()
		n += 1 + l + sovXuanyuan(uint64(l))
	}
	if m.IsAttackerWin {
		n += 2
	}
	if m.Time != 0 {
		n += 1 + sovXuanyuan(uint64(m.Time))
	}
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovXuanyuan(uint64(l))
	}
	return n
}

func (m *XuanyuanRecordHeroProto) Size() (n int) {
	var l int
	_ = l
	if m.Hero != nil {
		l = m.Hero.Size()
		n += 1 + l + sovXuanyuan(uint64(l))
	}
	if m.FightAmount != 0 {
		n += 1 + sovXuanyuan(uint64(m.FightAmount))
	}
	if len(m.Race) > 0 {
		for _, e := range m.Race {
			n += 1 + sovXuanyuan(uint64(e))
		}
	}
	if m.ScoreChanged != 0 {
		n += 1 + sovXuanyuan(uint64(m.ScoreChanged))
	}
	return n
}

func sovXuanyuan(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozXuanyuan(x uint64) (n int) {
	return sovXuanyuan(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *XuanyuanTargetProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXuanyuan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XuanyuanTargetProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XuanyuanTargetProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hero", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXuanyuan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXuanyuan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hero == nil {
				m.Hero = &HeroBasicProto{}
			}
			if err := m.Hero.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Win", wireType)
			}
			m.Win = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXuanyuan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Win |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lose", wireType)
			}
			m.Lose = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXuanyuan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lose |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXuanyuan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FightAmount", wireType)
			}
			m.FightAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXuanyuan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FightAmount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXuanyuan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXuanyuan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XuanyuanRecordProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXuanyuan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XuanyuanRecordProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XuanyuanRecordProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXuanyuan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attacker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXuanyuan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXuanyuan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attacker == nil {
				m.Attacker = &XuanyuanRecordHeroProto{}
			}
			if err := m.Attacker.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Defender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXuanyuan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXuanyuan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Defender == nil {
				m.Defender = &XuanyuanRecordHeroProto{}
			}
			if err := m.Defender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAttackerWin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXuanyuan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAttackerWin = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXuanyuan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXuanyuan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthXuanyuan
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipXuanyuan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXuanyuan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XuanyuanRecordHeroProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXuanyuan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XuanyuanRecordHeroProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XuanyuanRecordHeroProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hero", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXuanyuan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXuanyuan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hero == nil {
				m.Hero = &HeroBasicProto{}
			}
			if err := m.Hero.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FightAmount", wireType)
			}
			m.FightAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXuanyuan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FightAmount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType == 0 {
				var v Race
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXuanyuan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (Race(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Race = append(m.Race, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXuanyuan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthXuanyuan
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v Race
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXuanyuan
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (Race(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Race = append(m.Race, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Race", wireType)
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScoreChanged", wireType)
			}
			m.ScoreChanged = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXuanyuan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScoreChanged |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXuanyuan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXuanyuan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipXuanyuan(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowXuanyuan
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowXuanyuan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowXuanyuan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthXuanyuan
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowXuanyuan
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipXuanyuan(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthXuanyuan = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowXuanyuan   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/pb/shared_proto/xuanyuan.proto", fileDescriptorXuanyuan)
}

var fileDescriptorXuanyuan = []byte{
	// 425 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0xc1, 0x6e, 0x13, 0x31,
	0x10, 0xad, 0x93, 0x6c, 0x09, 0xde, 0x24, 0x54, 0x06, 0x84, 0xd5, 0xc3, 0x6a, 0x49, 0x25, 0xb4,
	0x5c, 0xb2, 0x52, 0x41, 0x02, 0x71, 0x6b, 0xb8, 0xf4, 0x88, 0x2c, 0x24, 0x10, 0x97, 0x95, 0xe3,
	0x9d, 0x66, 0xad, 0x26, 0x76, 0x64, 0x3b, 0x2a, 0xfc, 0x09, 0x37, 0xbe, 0x81, 0xbf, 0xe0, 0xc8,
	0x27, 0xa0, 0x70, 0xe6, 0x1f, 0xd0, 0x8e, 0xb7, 0xa8, 0x80, 0x2a, 0xb5, 0x27, 0x8f, 0x9f, 0xdf,
	0x9b, 0x79, 0xfb, 0x66, 0xe9, 0xcb, 0xa5, 0x0e, 0xcd, 0x76, 0x31, 0x53, 0x76, 0x5d, 0xae, 0xf4,
	0xb2, 0x09, 0x1b, 0x79, 0x51, 0xae, 0xe5, 0x0a, 0x5e, 0x94, 0x9b, 0x45, 0xe9, 0x1b, 0xe9, 0xa0,
	0xae, 0x36, 0xce, 0x06, 0x5b, 0x7e, 0xdc, 0x4a, 0xf3, 0x69, 0x2b, 0xcd, 0x0c, 0xaf, 0x2c, 0xc1,
	0xe3, 0xf0, 0xf9, 0xcd, 0x1b, 0x2c, 0xa4, 0x87, 0x28, 0x3e, 0xbc, 0xc5, 0x58, 0x6f, 0xe4, 0xc6,
	0x37, 0x36, 0x44, 0xe5, 0xf4, 0x0b, 0xa1, 0xf7, 0xdf, 0x77, 0x4e, 0xde, 0x4a, 0xb7, 0x84, 0xf0,
	0x06, 0xed, 0x3c, 0xa5, 0x83, 0x06, 0x9c, 0xe5, 0x24, 0x27, 0x45, 0x7a, 0xfc, 0x30, 0xb2, 0x67,
	0xa7, 0xe0, 0xec, 0x5c, 0x7a, 0xad, 0x90, 0x24, 0x90, 0xc2, 0x0e, 0x68, 0xff, 0x42, 0x1b, 0x9e,
	0xe6, 0xa4, 0x48, 0x44, 0x5b, 0x32, 0x46, 0x07, 0x2b, 0xeb, 0x81, 0x8f, 0x10, 0xc2, 0x9a, 0x3d,
	0xa0, 0x89, 0x57, 0xd6, 0x01, 0x1f, 0x23, 0x18, 0x2f, 0xec, 0x31, 0x1d, 0x9d, 0xb5, 0x7e, 0x2b,
	0xb9, 0xb6, 0x5b, 0x13, 0xf8, 0x04, 0x1f, 0x53, 0xc4, 0x4e, 0x10, 0x9a, 0xfe, 0xba, 0xe2, 0x50,
	0x80, 0xb2, 0xae, 0x8e, 0x0e, 0x27, 0xb4, 0xa7, 0x6b, 0xf4, 0x97, 0x88, 0x9e, 0xae, 0xd9, 0x2b,
	0x3a, 0x94, 0x21, 0x48, 0x75, 0x0e, 0x8e, 0xf7, 0xd0, 0x75, 0xd6, 0xb9, 0xfe, 0x5b, 0xdd, 0x7e,
	0x43, 0xb4, 0xff, 0x87, 0xdf, 0x6a, 0x6b, 0x38, 0x03, 0x53, 0x83, 0xe3, 0xfd, 0x9b, 0x69, 0x2f,
	0xf9, 0xec, 0x09, 0xbd, 0xa7, 0x7d, 0x75, 0xd9, 0xaa, 0x6a, 0xa3, 0x48, 0x72, 0x52, 0x0c, 0xc5,
	0x58, 0xfb, 0x93, 0x0e, 0x7d, 0x17, 0x43, 0x09, 0x7a, 0x0d, 0x7c, 0x3f, 0x86, 0xd2, 0xd6, 0x18,
	0x94, 0x36, 0xe7, 0xfc, 0x4e, 0x4e, 0x8a, 0xbb, 0x02, 0xeb, 0xe9, 0x57, 0x42, 0x1f, 0x5d, 0x33,
	0xf5, 0x36, 0x5b, 0xf9, 0x37, 0xd9, 0xe1, 0x7f, 0xc9, 0xb2, 0x23, 0x3a, 0x70, 0x52, 0x01, 0x4f,
	0xf3, 0x7e, 0x31, 0x39, 0x4e, 0xbb, 0x6e, 0x42, 0x2a, 0x98, 0xf7, 0x0e, 0xf6, 0x04, 0x3e, 0xb2,
	0x23, 0x3a, 0xc6, 0x55, 0x55, 0xaa, 0x91, 0x66, 0x09, 0x75, 0xb7, 0xd4, 0x11, 0x82, 0xaf, 0x23,
	0x36, 0xcf, 0xbf, 0xed, 0x32, 0xf2, 0x7d, 0x97, 0x91, 0x1f, 0xbb, 0x8c, 0x7c, 0xfe, 0x99, 0xed,
	0x9d, 0x92, 0x0f, 0xa3, 0xab, 0xbf, 0xdd, 0x62, 0x1f, 0x8f, 0x67, 0xbf, 0x03, 0x00, 0x00, 0xff,
	0xff, 0x8e, 0x4b, 0xa3, 0x9f, 0x21, 0x03, 0x00, 0x00,
}
