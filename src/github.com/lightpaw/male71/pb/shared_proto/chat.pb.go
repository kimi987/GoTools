// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/pb/shared_proto/chat.proto
// DO NOT EDIT!

package shared_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ChatType int32

const (
	ChatType_ChatWorld           ChatType = 0
	ChatType_ChatGuild           ChatType = 1
	ChatType_ChatPrivate         ChatType = 2
	ChatType_ChatGuildAllMembers ChatType = 3
	ChatType_ChatMcWar           ChatType = 4
	ChatType_ChatSystem          ChatType = 5
)

var ChatType_name = map[int32]string{
	0: "ChatWorld",
	1: "ChatGuild",
	2: "ChatPrivate",
	3: "ChatGuildAllMembers",
	4: "ChatMcWar",
	5: "ChatSystem",
}
var ChatType_value = map[string]int32{
	"ChatWorld":           0,
	"ChatGuild":           1,
	"ChatPrivate":         2,
	"ChatGuildAllMembers": 3,
	"ChatMcWar":           4,
	"ChatSystem":          5,
}

func (x ChatType) String() string {
	return proto.EnumName(ChatType_name, int32(x))
}
func (ChatType) EnumDescriptor() ([]byte, []int) { return fileDescriptorChat, []int{0} }

// 消息类型
type ChatMsgType int32

const (
	ChatMsgType_ChatMsgText            ChatMsgType = 0
	ChatMsgType_ChatMsgPos             ChatMsgType = 1
	ChatMsgType_ChatMsgFight           ChatMsgType = 2
	ChatMsgType_ChatMsgReport          ChatMsgType = 3
	ChatMsgType_ChatMsgSys             ChatMsgType = 4
	ChatMsgType_ChatMsgSecretTower     ChatMsgType = 5
	ChatMsgType_ChatMsgFriendAdded     ChatMsgType = 6
	ChatMsgType_ChatMsgGuildAllMembers ChatMsgType = 7
	ChatMsgType_ChatMsgGuildLog        ChatMsgType = 8
	ChatMsgType_ChatMsgHebi            ChatMsgType = 9
	ChatMsgType_ChatMsgGuildAskForHelp ChatMsgType = 10
	// 11 12 客户端已经用了，预留
	ChatMsgType_ChatMsgMcWarSys               ChatMsgType = 11
	ChatMsgType_ChatMsgCreateAssembly         ChatMsgType = 13
	ChatMsgType_ChatMsgRedPacket              ChatMsgType = 14
	ChatMsgType_ChatMsgXiongnu                ChatMsgType = 101
	ChatMsgType_ChatMsgGuildWorkshopCreated   ChatMsgType = 108
	ChatMsgType_ChatMsgGuildWorkshopCompleted ChatMsgType = 109
)

var ChatMsgType_name = map[int32]string{
	0:   "ChatMsgText",
	1:   "ChatMsgPos",
	2:   "ChatMsgFight",
	3:   "ChatMsgReport",
	4:   "ChatMsgSys",
	5:   "ChatMsgSecretTower",
	6:   "ChatMsgFriendAdded",
	7:   "ChatMsgGuildAllMembers",
	8:   "ChatMsgGuildLog",
	9:   "ChatMsgHebi",
	10:  "ChatMsgGuildAskForHelp",
	11:  "ChatMsgMcWarSys",
	13:  "ChatMsgCreateAssembly",
	14:  "ChatMsgRedPacket",
	101: "ChatMsgXiongnu",
	108: "ChatMsgGuildWorkshopCreated",
	109: "ChatMsgGuildWorkshopCompleted",
}
var ChatMsgType_value = map[string]int32{
	"ChatMsgText":                   0,
	"ChatMsgPos":                    1,
	"ChatMsgFight":                  2,
	"ChatMsgReport":                 3,
	"ChatMsgSys":                    4,
	"ChatMsgSecretTower":            5,
	"ChatMsgFriendAdded":            6,
	"ChatMsgGuildAllMembers":        7,
	"ChatMsgGuildLog":               8,
	"ChatMsgHebi":                   9,
	"ChatMsgGuildAskForHelp":        10,
	"ChatMsgMcWarSys":               11,
	"ChatMsgCreateAssembly":         13,
	"ChatMsgRedPacket":              14,
	"ChatMsgXiongnu":                101,
	"ChatMsgGuildWorkshopCreated":   108,
	"ChatMsgGuildWorkshopCompleted": 109,
}

func (x ChatMsgType) String() string {
	return proto.EnumName(ChatMsgType_name, int32(x))
}
func (ChatMsgType) EnumDescriptor() ([]byte, []int) { return fileDescriptorChat, []int{1} }

type ChatSenderProto struct {
	Id                     []byte          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                   string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Head                   string          `protobuf:"bytes,3,opt,name=head,proto3" json:"head,omitempty"`
	GuildFlag              string          `protobuf:"bytes,4,opt,name=guild_flag,json=guildFlag,proto3" json:"guild_flag,omitempty"`
	Level                  int32           `protobuf:"varint,6,opt,name=level,proto3" json:"level,omitempty"`
	WhiteFlagGuildFlagName string          `protobuf:"bytes,5,opt,name=white_flag_guild_flag_name,json=whiteFlagGuildFlagName,proto3" json:"white_flag_guild_flag_name,omitempty"`
	Basic                  *HeroBasicProto `protobuf:"bytes,11,opt,name=basic" json:"basic,omitempty"`
	Title                  int32           `protobuf:"varint,12,opt,name=title,proto3" json:"title,omitempty"`
}

func (m *ChatSenderProto) Reset()                    { *m = ChatSenderProto{} }
func (m *ChatSenderProto) String() string            { return proto.CompactTextString(m) }
func (*ChatSenderProto) ProtoMessage()               {}
func (*ChatSenderProto) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{0} }

func (m *ChatSenderProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ChatSenderProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ChatSenderProto) GetHead() string {
	if m != nil {
		return m.Head
	}
	return ""
}

func (m *ChatSenderProto) GetGuildFlag() string {
	if m != nil {
		return m.GuildFlag
	}
	return ""
}

func (m *ChatSenderProto) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *ChatSenderProto) GetWhiteFlagGuildFlagName() string {
	if m != nil {
		return m.WhiteFlagGuildFlagName
	}
	return ""
}

func (m *ChatSenderProto) GetBasic() *HeroBasicProto {
	if m != nil {
		return m.Basic
	}
	return nil
}

func (m *ChatSenderProto) GetTitle() int32 {
	if m != nil {
		return m.Title
	}
	return 0
}

type ChatRoomId struct {
	MemberIds [][]byte `protobuf:"bytes,1,rep,name=member_ids,json=memberIds" json:"member_ids,omitempty"`
	T         ChatType `protobuf:"varint,2,opt,name=t,proto3,enum=proto.ChatType" json:"t,omitempty"`
}

func (m *ChatRoomId) Reset()                    { *m = ChatRoomId{} }
func (m *ChatRoomId) String() string            { return proto.CompactTextString(m) }
func (*ChatRoomId) ProtoMessage()               {}
func (*ChatRoomId) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{1} }

func (m *ChatRoomId) GetMemberIds() [][]byte {
	if m != nil {
		return m.MemberIds
	}
	return nil
}

func (m *ChatRoomId) GetT() ChatType {
	if m != nil {
		return m.T
	}
	return ChatType_ChatWorld
}

// 广播消耗的物品配置：MiscConfigProto.broadcast_goods
type ChatMsgProto struct {
	ChatId      []byte           `protobuf:"bytes,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	SendTime    int32            `protobuf:"varint,2,opt,name=send_time,json=sendTime,proto3" json:"send_time,omitempty"`
	Sender      *ChatSenderProto `protobuf:"bytes,4,opt,name=sender" json:"sender,omitempty"`
	Sys         bool             `protobuf:"varint,5,opt,name=sys,proto3" json:"sys,omitempty"`
	ChatType    ChatType         `protobuf:"varint,41,opt,name=chat_type,json=chatType,proto3,enum=proto.ChatType" json:"chat_type,omitempty"`
	ChatTarget  []byte           `protobuf:"bytes,42,opt,name=chat_target,json=chatTarget,proto3" json:"chat_target,omitempty"`
	Laba        bool             `protobuf:"varint,43,opt,name=laba,proto3" json:"laba,omitempty"`
	AutoBuyLaba bool             `protobuf:"varint,44,opt,name=auto_buy_laba,json=autoBuyLaba,proto3" json:"auto_buy_laba,omitempty"`
	MsgType     int32            `protobuf:"varint,53,opt,name=msg_type,json=msgType,proto3" json:"msg_type,omitempty"`
	Text        string           `protobuf:"bytes,54,opt,name=text,proto3" json:"text,omitempty"`
	Json        string           `protobuf:"bytes,52,opt,name=json,proto3" json:"json,omitempty"`
	PosX        int32            `protobuf:"varint,55,opt,name=pos_x,json=posX,proto3" json:"pos_x,omitempty"`
	PosY        int32            `protobuf:"varint,56,opt,name=pos_y,json=posY,proto3" json:"pos_y,omitempty"`
	ReplayLink  string           `protobuf:"bytes,57,opt,name=replay_link,json=replayLink,proto3" json:"replay_link,omitempty"`
	ReportId    []byte           `protobuf:"bytes,58,opt,name=report_id,json=reportId,proto3" json:"report_id,omitempty"`
	StTeamId    int32            `protobuf:"varint,61,opt,name=st_team_id,json=stTeamId,proto3" json:"st_team_id,omitempty"`
	StDataId    int32            `protobuf:"varint,62,opt,name=st_data_id,json=stDataId,proto3" json:"st_data_id,omitempty"`
	RedPacketId []byte           `protobuf:"bytes,63,opt,name=red_packet_id,json=redPacketId,proto3" json:"red_packet_id,omitempty"`
}

func (m *ChatMsgProto) Reset()                    { *m = ChatMsgProto{} }
func (m *ChatMsgProto) String() string            { return proto.CompactTextString(m) }
func (*ChatMsgProto) ProtoMessage()               {}
func (*ChatMsgProto) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{2} }

func (m *ChatMsgProto) GetChatId() []byte {
	if m != nil {
		return m.ChatId
	}
	return nil
}

func (m *ChatMsgProto) GetSendTime() int32 {
	if m != nil {
		return m.SendTime
	}
	return 0
}

func (m *ChatMsgProto) GetSender() *ChatSenderProto {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *ChatMsgProto) GetSys() bool {
	if m != nil {
		return m.Sys
	}
	return false
}

func (m *ChatMsgProto) GetChatType() ChatType {
	if m != nil {
		return m.ChatType
	}
	return ChatType_ChatWorld
}

func (m *ChatMsgProto) GetChatTarget() []byte {
	if m != nil {
		return m.ChatTarget
	}
	return nil
}

func (m *ChatMsgProto) GetLaba() bool {
	if m != nil {
		return m.Laba
	}
	return false
}

func (m *ChatMsgProto) GetAutoBuyLaba() bool {
	if m != nil {
		return m.AutoBuyLaba
	}
	return false
}

func (m *ChatMsgProto) GetMsgType() int32 {
	if m != nil {
		return m.MsgType
	}
	return 0
}

func (m *ChatMsgProto) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *ChatMsgProto) GetJson() string {
	if m != nil {
		return m.Json
	}
	return ""
}

func (m *ChatMsgProto) GetPosX() int32 {
	if m != nil {
		return m.PosX
	}
	return 0
}

func (m *ChatMsgProto) GetPosY() int32 {
	if m != nil {
		return m.PosY
	}
	return 0
}

func (m *ChatMsgProto) GetReplayLink() string {
	if m != nil {
		return m.ReplayLink
	}
	return ""
}

func (m *ChatMsgProto) GetReportId() []byte {
	if m != nil {
		return m.ReportId
	}
	return nil
}

func (m *ChatMsgProto) GetStTeamId() int32 {
	if m != nil {
		return m.StTeamId
	}
	return 0
}

func (m *ChatMsgProto) GetStDataId() int32 {
	if m != nil {
		return m.StDataId
	}
	return 0
}

func (m *ChatMsgProto) GetRedPacketId() []byte {
	if m != nil {
		return m.RedPacketId
	}
	return nil
}

func init() {
	proto.RegisterType((*ChatSenderProto)(nil), "proto.ChatSenderProto")
	proto.RegisterType((*ChatRoomId)(nil), "proto.ChatRoomId")
	proto.RegisterType((*ChatMsgProto)(nil), "proto.ChatMsgProto")
	proto.RegisterEnum("proto.ChatType", ChatType_name, ChatType_value)
	proto.RegisterEnum("proto.ChatMsgType", ChatMsgType_name, ChatMsgType_value)
}
func (m *ChatSenderProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatSenderProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChat(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChat(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Head) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChat(dAtA, i, uint64(len(m.Head)))
		i += copy(dAtA[i:], m.Head)
	}
	if len(m.GuildFlag) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChat(dAtA, i, uint64(len(m.GuildFlag)))
		i += copy(dAtA[i:], m.GuildFlag)
	}
	if len(m.WhiteFlagGuildFlagName) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintChat(dAtA, i, uint64(len(m.WhiteFlagGuildFlagName)))
		i += copy(dAtA[i:], m.WhiteFlagGuildFlagName)
	}
	if m.Level != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintChat(dAtA, i, uint64(m.Level))
	}
	if m.Basic != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintChat(dAtA, i, uint64(m.Basic.Size()))
		n1, err := m.Basic.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Title != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintChat(dAtA, i, uint64(m.Title))
	}
	return i, nil
}

func (m *ChatRoomId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatRoomId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MemberIds) > 0 {
		for _, b := range m.MemberIds {
			dAtA[i] = 0xa
			i++
			i = encodeVarintChat(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.T != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChat(dAtA, i, uint64(m.T))
	}
	return i, nil
}

func (m *ChatMsgProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatMsgProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ChatId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChat(dAtA, i, uint64(len(m.ChatId)))
		i += copy(dAtA[i:], m.ChatId)
	}
	if m.SendTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChat(dAtA, i, uint64(m.SendTime))
	}
	if m.Sender != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChat(dAtA, i, uint64(m.Sender.Size()))
		n2, err := m.Sender.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Sys {
		dAtA[i] = 0x28
		i++
		if m.Sys {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ChatType != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintChat(dAtA, i, uint64(m.ChatType))
	}
	if len(m.ChatTarget) > 0 {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintChat(dAtA, i, uint64(len(m.ChatTarget)))
		i += copy(dAtA[i:], m.ChatTarget)
	}
	if m.Laba {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x2
		i++
		if m.Laba {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.AutoBuyLaba {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x2
		i++
		if m.AutoBuyLaba {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Json) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintChat(dAtA, i, uint64(len(m.Json)))
		i += copy(dAtA[i:], m.Json)
	}
	if m.MsgType != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintChat(dAtA, i, uint64(m.MsgType))
	}
	if len(m.Text) > 0 {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintChat(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	if m.PosX != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintChat(dAtA, i, uint64(m.PosX))
	}
	if m.PosY != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintChat(dAtA, i, uint64(m.PosY))
	}
	if len(m.ReplayLink) > 0 {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintChat(dAtA, i, uint64(len(m.ReplayLink)))
		i += copy(dAtA[i:], m.ReplayLink)
	}
	if len(m.ReportId) > 0 {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintChat(dAtA, i, uint64(len(m.ReportId)))
		i += copy(dAtA[i:], m.ReportId)
	}
	if m.StTeamId != 0 {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintChat(dAtA, i, uint64(m.StTeamId))
	}
	if m.StDataId != 0 {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintChat(dAtA, i, uint64(m.StDataId))
	}
	if len(m.RedPacketId) > 0 {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintChat(dAtA, i, uint64(len(m.RedPacketId)))
		i += copy(dAtA[i:], m.RedPacketId)
	}
	return i, nil
}

func encodeFixed64Chat(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Chat(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintChat(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ChatSenderProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovChat(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovChat(uint64(l))
	}
	l = len(m.Head)
	if l > 0 {
		n += 1 + l + sovChat(uint64(l))
	}
	l = len(m.GuildFlag)
	if l > 0 {
		n += 1 + l + sovChat(uint64(l))
	}
	l = len(m.WhiteFlagGuildFlagName)
	if l > 0 {
		n += 1 + l + sovChat(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovChat(uint64(m.Level))
	}
	if m.Basic != nil {
		l = m.Basic.Size()
		n += 1 + l + sovChat(uint64(l))
	}
	if m.Title != 0 {
		n += 1 + sovChat(uint64(m.Title))
	}
	return n
}

func (m *ChatRoomId) Size() (n int) {
	var l int
	_ = l
	if len(m.MemberIds) > 0 {
		for _, b := range m.MemberIds {
			l = len(b)
			n += 1 + l + sovChat(uint64(l))
		}
	}
	if m.T != 0 {
		n += 1 + sovChat(uint64(m.T))
	}
	return n
}

func (m *ChatMsgProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.ChatId)
	if l > 0 {
		n += 1 + l + sovChat(uint64(l))
	}
	if m.SendTime != 0 {
		n += 1 + sovChat(uint64(m.SendTime))
	}
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 1 + l + sovChat(uint64(l))
	}
	if m.Sys {
		n += 2
	}
	if m.ChatType != 0 {
		n += 2 + sovChat(uint64(m.ChatType))
	}
	l = len(m.ChatTarget)
	if l > 0 {
		n += 2 + l + sovChat(uint64(l))
	}
	if m.Laba {
		n += 3
	}
	if m.AutoBuyLaba {
		n += 3
	}
	l = len(m.Json)
	if l > 0 {
		n += 2 + l + sovChat(uint64(l))
	}
	if m.MsgType != 0 {
		n += 2 + sovChat(uint64(m.MsgType))
	}
	l = len(m.Text)
	if l > 0 {
		n += 2 + l + sovChat(uint64(l))
	}
	if m.PosX != 0 {
		n += 2 + sovChat(uint64(m.PosX))
	}
	if m.PosY != 0 {
		n += 2 + sovChat(uint64(m.PosY))
	}
	l = len(m.ReplayLink)
	if l > 0 {
		n += 2 + l + sovChat(uint64(l))
	}
	l = len(m.ReportId)
	if l > 0 {
		n += 2 + l + sovChat(uint64(l))
	}
	if m.StTeamId != 0 {
		n += 2 + sovChat(uint64(m.StTeamId))
	}
	if m.StDataId != 0 {
		n += 2 + sovChat(uint64(m.StDataId))
	}
	l = len(m.RedPacketId)
	if l > 0 {
		n += 2 + l + sovChat(uint64(l))
	}
	return n
}

func sovChat(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozChat(x uint64) (n int) {
	return sovChat(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChatSenderProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatSenderProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatSenderProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Head = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildFlag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildFlag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhiteFlagGuildFlagName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WhiteFlagGuildFlagName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Basic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Basic == nil {
				m.Basic = &HeroBasicProto{}
			}
			if err := m.Basic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			m.Title = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Title |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatRoomId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatRoomId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatRoomId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberIds", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberIds = append(m.MemberIds, make([]byte, postIndex-iNdEx))
			copy(m.MemberIds[len(m.MemberIds)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field T", wireType)
			}
			m.T = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.T |= (ChatType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatMsgProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatMsgProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatMsgProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatId = append(m.ChatId[:0], dAtA[iNdEx:postIndex]...)
			if m.ChatId == nil {
				m.ChatId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendTime", wireType)
			}
			m.SendTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SendTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &ChatSenderProto{}
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sys", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Sys = bool(v != 0)
		case 41:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatType", wireType)
			}
			m.ChatType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatType |= (ChatType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 42:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatTarget", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatTarget = append(m.ChatTarget[:0], dAtA[iNdEx:postIndex]...)
			if m.ChatTarget == nil {
				m.ChatTarget = []byte{}
			}
			iNdEx = postIndex
		case 43:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Laba", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Laba = bool(v != 0)
		case 44:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoBuyLaba", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutoBuyLaba = bool(v != 0)
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Json", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Json = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgType", wireType)
			}
			m.MsgType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 54:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 55:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosX", wireType)
			}
			m.PosX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosX |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 56:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosY", wireType)
			}
			m.PosY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosY |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplayLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplayLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 58:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReportId = append(m.ReportId[:0], dAtA[iNdEx:postIndex]...)
			if m.ReportId == nil {
				m.ReportId = []byte{}
			}
			iNdEx = postIndex
		case 61:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StTeamId", wireType)
			}
			m.StTeamId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StTeamId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 62:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StDataId", wireType)
			}
			m.StDataId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StDataId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 63:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedPacketId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedPacketId = append(m.RedPacketId[:0], dAtA[iNdEx:postIndex]...)
			if m.RedPacketId == nil {
				m.RedPacketId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChat(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChat
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthChat
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowChat
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipChat(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthChat = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChat   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/pb/shared_proto/chat.proto", fileDescriptorChat)
}

var fileDescriptorChat = []byte{
	// 870 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xd1, 0x6e, 0x1b, 0x45,
	0x17, 0xce, 0xc6, 0x76, 0x62, 0x1f, 0x3b, 0xce, 0xfc, 0x93, 0x36, 0xdd, 0xa6, 0x7f, 0x82, 0xc9,
	0x95, 0x49, 0xab, 0x58, 0x0a, 0x85, 0x96, 0x4a, 0x80, 0x92, 0xa2, 0x10, 0xa3, 0x04, 0x45, 0x9b,
	0x48, 0x29, 0xdc, 0xac, 0xc6, 0x9e, 0xc3, 0x7a, 0xf1, 0xee, 0xce, 0x32, 0x33, 0x6e, 0xb2, 0x4f,
	0xc1, 0x6d, 0x1f, 0x89, 0x4b, 0x1e, 0x01, 0x85, 0xe7, 0x40, 0x42, 0x73, 0x76, 0xed, 0x5a, 0xd0,
	0x0b, 0xae, 0xf6, 0x9c, 0xef, 0x7c, 0xf3, 0xcd, 0x9c, 0xef, 0xcc, 0x0e, 0x3c, 0x8f, 0x62, 0x3b,
	0x99, 0x8d, 0x0e, 0xc7, 0x2a, 0x1d, 0x24, 0x71, 0x34, 0xb1, 0xb9, 0xb8, 0x1d, 0xa4, 0x22, 0xc1,
	0x17, 0x83, 0x7c, 0x34, 0x30, 0x13, 0xa1, 0x51, 0x86, 0xb9, 0x56, 0x56, 0x0d, 0xc6, 0x13, 0x61,
	0x0f, 0x29, 0xe4, 0x0d, 0xfa, 0xec, 0xbc, 0xfc, 0xef, 0x8b, 0x4d, 0x26, 0x72, 0x33, 0x51, 0x95,
	0xc0, 0xfe, 0x5f, 0x1e, 0x6c, 0xbe, 0x9e, 0x08, 0x7b, 0x85, 0x99, 0x44, 0x7d, 0x49, 0xa2, 0x5d,
	0x58, 0x8d, 0xa5, 0xef, 0xf5, 0xbc, 0x7e, 0x27, 0x58, 0x8d, 0x25, 0xe7, 0x50, 0xcf, 0x44, 0x8a,
	0xfe, 0x6a, 0xcf, 0xeb, 0xb7, 0x02, 0x8a, 0x1d, 0x36, 0x41, 0x21, 0xfd, 0x5a, 0x89, 0xb9, 0x98,
	0xef, 0x02, 0x44, 0xb3, 0x38, 0x91, 0xe1, 0x4f, 0x89, 0x88, 0xfc, 0x3a, 0x55, 0x5a, 0x84, 0x9c,
	0x26, 0x22, 0xe2, 0xaf, 0x60, 0xe7, 0x76, 0x12, 0x5b, 0xa4, 0x72, 0xf8, 0x9e, 0x19, 0x92, 0x78,
	0x83, 0xe8, 0xdb, 0xc4, 0x70, 0xf4, 0x6f, 0xe7, 0xeb, 0xbe, 0x77, 0xdb, 0x3d, 0x80, 0x46, 0x82,
	0x6f, 0x31, 0xf1, 0xd7, 0x7a, 0x5e, 0xbf, 0x11, 0x94, 0x09, 0x7f, 0x0a, 0x8d, 0x91, 0x30, 0xf1,
	0xd8, 0x6f, 0xf7, 0xbc, 0x7e, 0xfb, 0xe8, 0x61, 0xd9, 0xd3, 0xe1, 0x19, 0x6a, 0x75, 0xe2, 0x70,
	0x6a, 0x27, 0x28, 0x39, 0x4e, 0xc2, 0xc6, 0x36, 0x41, 0xbf, 0x53, 0x4a, 0x50, 0xb2, 0xff, 0x1d,
	0x80, 0x6b, 0x3f, 0x50, 0x2a, 0x1d, 0x52, 0x07, 0x29, 0xa6, 0x23, 0xd4, 0x61, 0x2c, 0x8d, 0xef,
	0xf5, 0x6a, 0xfd, 0x4e, 0xd0, 0x2a, 0x91, 0xa1, 0x34, 0x7c, 0x17, 0x3c, 0x4b, 0x2e, 0x74, 0x8f,
	0x36, 0xab, 0xbd, 0xdc, 0xe2, 0xeb, 0x22, 0xc7, 0xc0, 0xb3, 0xfb, 0xef, 0xea, 0xd0, 0x71, 0xf9,
	0x85, 0x89, 0x4a, 0x23, 0x1f, 0xc1, 0xba, 0x9b, 0x55, 0xb8, 0x70, 0x73, 0xcd, 0xa5, 0x43, 0xc9,
	0x9f, 0x40, 0xcb, 0x60, 0x26, 0x43, 0x1b, 0x57, 0xb6, 0x36, 0x82, 0xa6, 0x03, 0xae, 0xe3, 0x14,
	0xf9, 0x21, 0xac, 0x19, 0x9a, 0x06, 0x59, 0xd8, 0x3e, 0xda, 0x5e, 0xda, 0x6a, 0x69, 0x4c, 0x41,
	0xc5, 0xe2, 0x0c, 0x6a, 0xa6, 0x30, 0x64, 0x60, 0x33, 0x70, 0x21, 0x7f, 0x06, 0x2d, 0xda, 0xd7,
	0x16, 0x39, 0xfa, 0x9f, 0x7c, 0xf8, 0xbc, 0xcd, 0x71, 0x15, 0xf1, 0x8f, 0xa0, 0x5d, 0xb2, 0x85,
	0x8e, 0xd0, 0xfa, 0x07, 0x74, 0x52, 0xa0, 0x32, 0x21, 0x6e, 0xd6, 0x89, 0x18, 0x09, 0xff, 0x29,
	0xed, 0x40, 0x31, 0xdf, 0x87, 0x0d, 0x31, 0xb3, 0x2a, 0x1c, 0xcd, 0x8a, 0x90, 0x8a, 0xcf, 0xa8,
	0xd8, 0x76, 0xe0, 0xc9, 0xac, 0x38, 0x77, 0x1c, 0x0e, 0xf5, 0x9f, 0x8d, 0xca, 0xfc, 0xe7, 0xe5,
	0x1d, 0x71, 0x31, 0x7f, 0x0c, 0xcd, 0xd4, 0x44, 0xe5, 0xc9, 0x3e, 0xa3, 0xc6, 0xd7, 0x53, 0x13,
	0xd1, 0x39, 0x38, 0xd4, 0x2d, 0xde, 0x59, 0xff, 0xf3, 0x92, 0xee, 0x62, 0xbe, 0x05, 0x8d, 0x5c,
	0x99, 0xf0, 0xce, 0x7f, 0x41, 0xdc, 0x7a, 0xae, 0xcc, 0x9b, 0x39, 0x58, 0xf8, 0x2f, 0x17, 0xe0,
	0x0f, 0xae, 0x0b, 0x8d, 0x79, 0x22, 0x8a, 0x30, 0x89, 0xb3, 0xa9, 0xff, 0x05, 0x89, 0x40, 0x09,
	0x9d, 0xc7, 0xd9, 0xd4, 0x79, 0xae, 0x31, 0x57, 0x9a, 0xc6, 0xf1, 0x8a, 0x9a, 0x6c, 0x96, 0xc0,
	0x50, 0xf2, 0xff, 0x03, 0x18, 0x1b, 0x5a, 0x14, 0xa9, 0xab, 0x7e, 0x59, 0x4d, 0xc4, 0x5e, 0xa3,
	0x48, 0x17, 0x55, 0x29, 0xac, 0x70, 0xd5, 0xaf, 0xe6, 0xd5, 0x6f, 0x84, 0x15, 0x43, 0xe9, 0xac,
	0xa0, 0xdf, 0x4b, 0x8c, 0xa7, 0x48, 0xe2, 0x5f, 0x93, 0x78, 0x5b, 0xa3, 0xbc, 0x24, 0x6c, 0x28,
	0x0f, 0x7e, 0x81, 0xe6, 0xdc, 0x79, 0xbe, 0x01, 0x2d, 0x17, 0xdf, 0x28, 0x9d, 0x48, 0xb6, 0x32,
	0x4f, 0xe9, 0xbe, 0x33, 0x8f, 0x6f, 0x42, 0xdb, 0xa5, 0x97, 0x3a, 0x7e, 0x2b, 0x2c, 0xb2, 0x55,
	0xfe, 0x08, 0xb6, 0x16, 0xf5, 0xe3, 0x24, 0xb9, 0xa0, 0xdb, 0x68, 0x58, 0x6d, 0xbe, 0xf0, 0x62,
	0x7c, 0x23, 0x34, 0xab, 0xf3, 0x6e, 0x79, 0x93, 0xaf, 0x0a, 0x63, 0x31, 0x65, 0x8d, 0x83, 0x5f,
	0x6b, 0xa5, 0xd2, 0x45, 0x65, 0xef, 0xe6, 0xfb, 0x14, 0xef, 0x2c, 0x5b, 0x99, 0x2f, 0x70, 0xb7,
	0x55, 0x19, 0xe6, 0x71, 0xb6, 0xb8, 0xbd, 0xa7, 0xee, 0x09, 0x61, 0xab, 0xfc, 0x7f, 0xb0, 0x51,
	0x21, 0x01, 0x19, 0xc5, 0x6a, 0x4b, 0x8b, 0xae, 0x0a, 0xc3, 0xea, 0x7c, 0x1b, 0xf8, 0x3c, 0xc7,
	0xb1, 0x46, 0x7b, 0xad, 0x6e, 0x51, 0xb3, 0xc6, 0x12, 0x7e, 0xaa, 0x63, 0xcc, 0xe4, 0xb1, 0x94,
	0x28, 0xd9, 0x1a, 0xdf, 0x81, 0xed, 0x0a, 0xff, 0x67, 0x43, 0xeb, 0x7c, 0xab, 0x7c, 0x8a, 0xe6,
	0xb5, 0x73, 0x15, 0xb1, 0xe6, 0xd2, 0xb1, 0xcf, 0x70, 0x14, 0xb3, 0xd6, 0xbf, 0x14, 0xcc, 0xf4,
	0x54, 0xe9, 0x33, 0x4c, 0x72, 0x06, 0x4b, 0x0a, 0xe4, 0x8a, 0x3b, 0x62, 0x9b, 0x3f, 0x86, 0x87,
	0x15, 0xf8, 0x5a, 0xa3, 0xb0, 0x78, 0x6c, 0x0c, 0xa6, 0xa3, 0xa4, 0x60, 0x1b, 0xfc, 0x01, 0xb0,
	0x45, 0x83, 0xd5, 0xb0, 0x58, 0x97, 0x73, 0xe8, 0x56, 0xe8, 0x9b, 0x58, 0x65, 0x51, 0x36, 0x63,
	0xee, 0x27, 0x79, 0xb2, 0xbc, 0xeb, 0x8d, 0xd2, 0x53, 0x33, 0x51, 0x79, 0xa9, 0x28, 0x59, 0xc2,
	0x3f, 0x86, 0xdd, 0x0f, 0x12, 0x54, 0x9a, 0x27, 0xe8, 0x28, 0xe9, 0x49, 0xef, 0xb7, 0xfb, 0x3d,
	0xef, 0xf7, 0xfb, 0x3d, 0xef, 0x8f, 0xfb, 0x3d, 0xef, 0xdd, 0x9f, 0x7b, 0x2b, 0x67, 0xde, 0x8f,
	0x9d, 0xe5, 0xc7, 0x79, 0xb4, 0x46, 0x9f, 0x4f, 0xff, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x1b, 0xd0,
	0xa4, 0xf3, 0x0d, 0x06, 0x00, 0x00,
}
