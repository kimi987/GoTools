// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/pb/shared_proto/captain_soul.proto
// DO NOT EDIT!

package shared_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CaptainSoulMiscProto struct {
	LevelDiffLimit int32 `protobuf:"varint,1,opt,name=level_diff_limit,json=levelDiffLimit,proto3" json:"level_diff_limit,omitempty"`
}

func (m *CaptainSoulMiscProto) Reset()                    { *m = CaptainSoulMiscProto{} }
func (m *CaptainSoulMiscProto) String() string            { return proto.CompactTextString(m) }
func (*CaptainSoulMiscProto) ProtoMessage()               {}
func (*CaptainSoulMiscProto) Descriptor() ([]byte, []int) { return fileDescriptorCaptainSoul, []int{0} }

func (m *CaptainSoulMiscProto) GetLevelDiffLimit() int32 {
	if m != nil {
		return m.LevelDiffLimit
	}
	return 0
}

type CaptainSoulDataProto struct {
	Id                       int32                        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Quality                  Quality                      `protobuf:"varint,2,opt,name=quality,proto3,enum=proto.Quality" json:"quality,omitempty"`
	Name                     string                       `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	IconId                   string                       `protobuf:"bytes,8,opt,name=icon_id,json=iconId,proto3" json:"icon_id,omitempty"`
	Desc                     string                       `protobuf:"bytes,5,opt,name=desc,proto3" json:"desc,omitempty"`
	PrizeIfHasSoul           *PrizeProto                  `protobuf:"bytes,6,opt,name=prize_if_has_soul,json=prizeIfHasSoul" json:"prize_if_has_soul,omitempty"`
	ChatContentWhenActivated string                       `protobuf:"bytes,7,opt,name=chat_content_when_activated,json=chatContentWhenActivated,proto3" json:"chat_content_when_activated,omitempty"`
	LevelDatas               []*CaptainSoulLevelDataProto `protobuf:"bytes,9,rep,name=level_datas,json=levelDatas" json:"level_datas,omitempty"`
	AutoUnlockSpellCount     int32                        `protobuf:"varint,11,opt,name=auto_unlock_spell_count,json=autoUnlockSpellCount,proto3" json:"auto_unlock_spell_count,omitempty"`
	// 解锁技能消耗
	// 计算第index(从0开始)技能的消耗
	// 如果 index >= auto_unlock_spell_count 消耗 = unlock_spell_costs[index - auto_unlock_spell_count]，否则为默认已经解锁
	// 如果 index < auto_unlock_spell_count 显示已经解锁
	UnlockSpellCosts     []*CostProto `protobuf:"bytes,12,rep,name=unlock_spell_costs,json=unlockSpellCosts" json:"unlock_spell_costs,omitempty"`
	ObtainWays           []int32      `protobuf:"varint,13,rep,name=obtain_ways,json=obtainWays" json:"obtain_ways,omitempty"`
	ObtainDungeonChapter int32        `protobuf:"varint,14,opt,name=obtain_dungeon_chapter,json=obtainDungeonChapter,proto3" json:"obtain_dungeon_chapter,omitempty"`
	SpinePath            string       `protobuf:"bytes,16,opt,name=spine_path,json=spinePath,proto3" json:"spine_path,omitempty"`
	Sound                string       `protobuf:"bytes,17,opt,name=sound,proto3" json:"sound,omitempty"`
}

func (m *CaptainSoulDataProto) Reset()                    { *m = CaptainSoulDataProto{} }
func (m *CaptainSoulDataProto) String() string            { return proto.CompactTextString(m) }
func (*CaptainSoulDataProto) ProtoMessage()               {}
func (*CaptainSoulDataProto) Descriptor() ([]byte, []int) { return fileDescriptorCaptainSoul, []int{1} }

func (m *CaptainSoulDataProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CaptainSoulDataProto) GetQuality() Quality {
	if m != nil {
		return m.Quality
	}
	return Quality_InvalidQuality
}

func (m *CaptainSoulDataProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CaptainSoulDataProto) GetIconId() string {
	if m != nil {
		return m.IconId
	}
	return ""
}

func (m *CaptainSoulDataProto) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *CaptainSoulDataProto) GetPrizeIfHasSoul() *PrizeProto {
	if m != nil {
		return m.PrizeIfHasSoul
	}
	return nil
}

func (m *CaptainSoulDataProto) GetChatContentWhenActivated() string {
	if m != nil {
		return m.ChatContentWhenActivated
	}
	return ""
}

func (m *CaptainSoulDataProto) GetLevelDatas() []*CaptainSoulLevelDataProto {
	if m != nil {
		return m.LevelDatas
	}
	return nil
}

func (m *CaptainSoulDataProto) GetAutoUnlockSpellCount() int32 {
	if m != nil {
		return m.AutoUnlockSpellCount
	}
	return 0
}

func (m *CaptainSoulDataProto) GetUnlockSpellCosts() []*CostProto {
	if m != nil {
		return m.UnlockSpellCosts
	}
	return nil
}

func (m *CaptainSoulDataProto) GetObtainWays() []int32 {
	if m != nil {
		return m.ObtainWays
	}
	return nil
}

func (m *CaptainSoulDataProto) GetObtainDungeonChapter() int32 {
	if m != nil {
		return m.ObtainDungeonChapter
	}
	return 0
}

func (m *CaptainSoulDataProto) GetSpinePath() string {
	if m != nil {
		return m.SpinePath
	}
	return ""
}

func (m *CaptainSoulDataProto) GetSound() string {
	if m != nil {
		return m.Sound
	}
	return ""
}

type CaptainSoulLevelDataProto struct {
	Level            int32                    `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	CostGoods        int32                    `protobuf:"varint,2,opt,name=cost_goods,json=costGoods,proto3" json:"cost_goods,omitempty"`
	CostGoodsCount   int32                    `protobuf:"varint,3,opt,name=cost_goods_count,json=costGoodsCount,proto3" json:"cost_goods_count,omitempty"`
	AddMorale        int32                    `protobuf:"varint,4,opt,name=add_morale,json=addMorale,proto3" json:"add_morale,omitempty"`
	UpgradeToNextExp int32                    `protobuf:"varint,5,opt,name=upgrade_to_next_exp,json=upgradeToNextExp,proto3" json:"upgrade_to_next_exp,omitempty"`
	Spells           []*CaptainSoulSpellProto `protobuf:"bytes,6,rep,name=spells" json:"spells,omitempty"`
	Star             int32                    `protobuf:"varint,11,opt,name=star,proto3" json:"star,omitempty"`
	StarLevel        int32                    `protobuf:"varint,12,opt,name=star_level,json=starLevel,proto3" json:"star_level,omitempty"`
}

func (m *CaptainSoulLevelDataProto) Reset()         { *m = CaptainSoulLevelDataProto{} }
func (m *CaptainSoulLevelDataProto) String() string { return proto.CompactTextString(m) }
func (*CaptainSoulLevelDataProto) ProtoMessage()    {}
func (*CaptainSoulLevelDataProto) Descriptor() ([]byte, []int) {
	return fileDescriptorCaptainSoul, []int{2}
}

func (m *CaptainSoulLevelDataProto) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *CaptainSoulLevelDataProto) GetCostGoods() int32 {
	if m != nil {
		return m.CostGoods
	}
	return 0
}

func (m *CaptainSoulLevelDataProto) GetCostGoodsCount() int32 {
	if m != nil {
		return m.CostGoodsCount
	}
	return 0
}

func (m *CaptainSoulLevelDataProto) GetAddMorale() int32 {
	if m != nil {
		return m.AddMorale
	}
	return 0
}

func (m *CaptainSoulLevelDataProto) GetUpgradeToNextExp() int32 {
	if m != nil {
		return m.UpgradeToNextExp
	}
	return 0
}

func (m *CaptainSoulLevelDataProto) GetSpells() []*CaptainSoulSpellProto {
	if m != nil {
		return m.Spells
	}
	return nil
}

func (m *CaptainSoulLevelDataProto) GetStar() int32 {
	if m != nil {
		return m.Star
	}
	return 0
}

func (m *CaptainSoulLevelDataProto) GetStarLevel() int32 {
	if m != nil {
		return m.StarLevel
	}
	return 0
}

type CaptainSoulSpellProto struct {
	Icon            string           `protobuf:"bytes,1,opt,name=icon,proto3" json:"icon,omitempty"`
	Desc            string           `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	SpriteStat      *SpriteStatProto `protobuf:"bytes,3,opt,name=sprite_stat,json=spriteStat" json:"sprite_stat,omitempty"`
	UnlockNeedLevel int32            `protobuf:"varint,4,opt,name=unlock_need_level,json=unlockNeedLevel,proto3" json:"unlock_need_level,omitempty"`
	Race            Race             `protobuf:"varint,5,opt,name=race,proto3,enum=proto.Race" json:"race,omitempty"`
}

func (m *CaptainSoulSpellProto) Reset()                    { *m = CaptainSoulSpellProto{} }
func (m *CaptainSoulSpellProto) String() string            { return proto.CompactTextString(m) }
func (*CaptainSoulSpellProto) ProtoMessage()               {}
func (*CaptainSoulSpellProto) Descriptor() ([]byte, []int) { return fileDescriptorCaptainSoul, []int{3} }

func (m *CaptainSoulSpellProto) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *CaptainSoulSpellProto) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *CaptainSoulSpellProto) GetSpriteStat() *SpriteStatProto {
	if m != nil {
		return m.SpriteStat
	}
	return nil
}

func (m *CaptainSoulSpellProto) GetUnlockNeedLevel() int32 {
	if m != nil {
		return m.UnlockNeedLevel
	}
	return 0
}

func (m *CaptainSoulSpellProto) GetRace() Race {
	if m != nil {
		return m.Race
	}
	return Race_InvalidRace
}

type CaptainSoulFettersProto struct {
	Id           int32       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	FettersPrize *PrizeProto `protobuf:"bytes,3,opt,name=fetters_prize,json=fettersPrize" json:"fetters_prize,omitempty"`
	Souls        []int32     `protobuf:"varint,4,rep,name=souls" json:"souls,omitempty"`
	Story        string      `protobuf:"bytes,5,opt,name=story,proto3" json:"story,omitempty"`
}

func (m *CaptainSoulFettersProto) Reset()         { *m = CaptainSoulFettersProto{} }
func (m *CaptainSoulFettersProto) String() string { return proto.CompactTextString(m) }
func (*CaptainSoulFettersProto) ProtoMessage()    {}
func (*CaptainSoulFettersProto) Descriptor() ([]byte, []int) {
	return fileDescriptorCaptainSoul, []int{4}
}

func (m *CaptainSoulFettersProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CaptainSoulFettersProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CaptainSoulFettersProto) GetFettersPrize() *PrizeProto {
	if m != nil {
		return m.FettersPrize
	}
	return nil
}

func (m *CaptainSoulFettersProto) GetSouls() []int32 {
	if m != nil {
		return m.Souls
	}
	return nil
}

func (m *CaptainSoulFettersProto) GetStory() string {
	if m != nil {
		return m.Story
	}
	return ""
}

type HeroCaptainSoulProto struct {
	AllUnlockCaptainSouls  []*CaptainSoulProto `protobuf:"bytes,1,rep,name=all_unlock_captain_souls,json=allUnlockCaptainSouls" json:"all_unlock_captain_souls,omitempty"`
	AllCollectPrizeFetters []int32             `protobuf:"varint,2,rep,name=all_collect_prize_fetters,json=allCollectPrizeFetters" json:"all_collect_prize_fetters,omitempty"`
	AllActivatedFetters    []int32             `protobuf:"varint,3,rep,name=all_activated_fetters,json=allActivatedFetters" json:"all_activated_fetters,omitempty"`
}

func (m *HeroCaptainSoulProto) Reset()                    { *m = HeroCaptainSoulProto{} }
func (m *HeroCaptainSoulProto) String() string            { return proto.CompactTextString(m) }
func (*HeroCaptainSoulProto) ProtoMessage()               {}
func (*HeroCaptainSoulProto) Descriptor() ([]byte, []int) { return fileDescriptorCaptainSoul, []int{5} }

func (m *HeroCaptainSoulProto) GetAllUnlockCaptainSouls() []*CaptainSoulProto {
	if m != nil {
		return m.AllUnlockCaptainSouls
	}
	return nil
}

func (m *HeroCaptainSoulProto) GetAllCollectPrizeFetters() []int32 {
	if m != nil {
		return m.AllCollectPrizeFetters
	}
	return nil
}

func (m *HeroCaptainSoulProto) GetAllActivatedFetters() []int32 {
	if m != nil {
		return m.AllActivatedFetters
	}
	return nil
}

type HeroCaptainSoulOtherProto struct {
	AllUnlockCaptainSouls []*CaptainSoulProto `protobuf:"bytes,1,rep,name=all_unlock_captain_souls,json=allUnlockCaptainSouls" json:"all_unlock_captain_souls,omitempty"`
	AllActivatedFetters   []int32             `protobuf:"varint,3,rep,name=all_activated_fetters,json=allActivatedFetters" json:"all_activated_fetters,omitempty"`
}

func (m *HeroCaptainSoulOtherProto) Reset()         { *m = HeroCaptainSoulOtherProto{} }
func (m *HeroCaptainSoulOtherProto) String() string { return proto.CompactTextString(m) }
func (*HeroCaptainSoulOtherProto) ProtoMessage()    {}
func (*HeroCaptainSoulOtherProto) Descriptor() ([]byte, []int) {
	return fileDescriptorCaptainSoul, []int{6}
}

func (m *HeroCaptainSoulOtherProto) GetAllUnlockCaptainSouls() []*CaptainSoulProto {
	if m != nil {
		return m.AllUnlockCaptainSouls
	}
	return nil
}

func (m *HeroCaptainSoulOtherProto) GetAllActivatedFetters() []int32 {
	if m != nil {
		return m.AllActivatedFetters
	}
	return nil
}

type CaptainSoulProto struct {
	Id             int32            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Level          int32            `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	Exp            int32            `protobuf:"varint,3,opt,name=exp,proto3" json:"exp,omitempty"`
	UnlockedSpells []bool           `protobuf:"varint,4,rep,name=unlocked_spells,json=unlockedSpells" json:"unlocked_spells,omitempty"`
	Mark           bool             `protobuf:"varint,5,opt,name=mark,proto3" json:"mark,omitempty"`
	TotalStat      *SpriteStatProto `protobuf:"bytes,6,opt,name=total_stat,json=totalStat" json:"total_stat,omitempty"`
}

func (m *CaptainSoulProto) Reset()                    { *m = CaptainSoulProto{} }
func (m *CaptainSoulProto) String() string            { return proto.CompactTextString(m) }
func (*CaptainSoulProto) ProtoMessage()               {}
func (*CaptainSoulProto) Descriptor() ([]byte, []int) { return fileDescriptorCaptainSoul, []int{7} }

func (m *CaptainSoulProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CaptainSoulProto) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *CaptainSoulProto) GetExp() int32 {
	if m != nil {
		return m.Exp
	}
	return 0
}

func (m *CaptainSoulProto) GetUnlockedSpells() []bool {
	if m != nil {
		return m.UnlockedSpells
	}
	return nil
}

func (m *CaptainSoulProto) GetMark() bool {
	if m != nil {
		return m.Mark
	}
	return false
}

func (m *CaptainSoulProto) GetTotalStat() *SpriteStatProto {
	if m != nil {
		return m.TotalStat
	}
	return nil
}

func init() {
	proto.RegisterType((*CaptainSoulMiscProto)(nil), "proto.CaptainSoulMiscProto")
	proto.RegisterType((*CaptainSoulDataProto)(nil), "proto.CaptainSoulDataProto")
	proto.RegisterType((*CaptainSoulLevelDataProto)(nil), "proto.CaptainSoulLevelDataProto")
	proto.RegisterType((*CaptainSoulSpellProto)(nil), "proto.CaptainSoulSpellProto")
	proto.RegisterType((*CaptainSoulFettersProto)(nil), "proto.CaptainSoulFettersProto")
	proto.RegisterType((*HeroCaptainSoulProto)(nil), "proto.HeroCaptainSoulProto")
	proto.RegisterType((*HeroCaptainSoulOtherProto)(nil), "proto.HeroCaptainSoulOtherProto")
	proto.RegisterType((*CaptainSoulProto)(nil), "proto.CaptainSoulProto")
}
func (m *CaptainSoulMiscProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CaptainSoulMiscProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LevelDiffLimit != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(m.LevelDiffLimit))
	}
	return i, nil
}

func (m *CaptainSoulDataProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CaptainSoulDataProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(m.Id))
	}
	if m.Quality != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(m.Quality))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Desc) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(len(m.Desc)))
		i += copy(dAtA[i:], m.Desc)
	}
	if m.PrizeIfHasSoul != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(m.PrizeIfHasSoul.Size()))
		n1, err := m.PrizeIfHasSoul.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.ChatContentWhenActivated) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(len(m.ChatContentWhenActivated)))
		i += copy(dAtA[i:], m.ChatContentWhenActivated)
	}
	if len(m.IconId) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(len(m.IconId)))
		i += copy(dAtA[i:], m.IconId)
	}
	if len(m.LevelDatas) > 0 {
		for _, msg := range m.LevelDatas {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintCaptainSoul(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.AutoUnlockSpellCount != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(m.AutoUnlockSpellCount))
	}
	if len(m.UnlockSpellCosts) > 0 {
		for _, msg := range m.UnlockSpellCosts {
			dAtA[i] = 0x62
			i++
			i = encodeVarintCaptainSoul(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ObtainWays) > 0 {
		for _, num := range m.ObtainWays {
			dAtA[i] = 0x68
			i++
			i = encodeVarintCaptainSoul(dAtA, i, uint64(num))
		}
	}
	if m.ObtainDungeonChapter != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(m.ObtainDungeonChapter))
	}
	if len(m.SpinePath) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(len(m.SpinePath)))
		i += copy(dAtA[i:], m.SpinePath)
	}
	if len(m.Sound) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(len(m.Sound)))
		i += copy(dAtA[i:], m.Sound)
	}
	return i, nil
}

func (m *CaptainSoulLevelDataProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CaptainSoulLevelDataProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Level != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(m.Level))
	}
	if m.CostGoods != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(m.CostGoods))
	}
	if m.CostGoodsCount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(m.CostGoodsCount))
	}
	if m.AddMorale != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(m.AddMorale))
	}
	if m.UpgradeToNextExp != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(m.UpgradeToNextExp))
	}
	if len(m.Spells) > 0 {
		for _, msg := range m.Spells {
			dAtA[i] = 0x32
			i++
			i = encodeVarintCaptainSoul(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Star != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(m.Star))
	}
	if m.StarLevel != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(m.StarLevel))
	}
	return i, nil
}

func (m *CaptainSoulSpellProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CaptainSoulSpellProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Icon) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(len(m.Icon)))
		i += copy(dAtA[i:], m.Icon)
	}
	if len(m.Desc) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(len(m.Desc)))
		i += copy(dAtA[i:], m.Desc)
	}
	if m.SpriteStat != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(m.SpriteStat.Size()))
		n2, err := m.SpriteStat.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.UnlockNeedLevel != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(m.UnlockNeedLevel))
	}
	if m.Race != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(m.Race))
	}
	return i, nil
}

func (m *CaptainSoulFettersProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CaptainSoulFettersProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.FettersPrize != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(m.FettersPrize.Size()))
		n3, err := m.FettersPrize.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.Souls) > 0 {
		for _, num := range m.Souls {
			dAtA[i] = 0x20
			i++
			i = encodeVarintCaptainSoul(dAtA, i, uint64(num))
		}
	}
	if len(m.Story) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(len(m.Story)))
		i += copy(dAtA[i:], m.Story)
	}
	return i, nil
}

func (m *HeroCaptainSoulProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeroCaptainSoulProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AllUnlockCaptainSouls) > 0 {
		for _, msg := range m.AllUnlockCaptainSouls {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCaptainSoul(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.AllCollectPrizeFetters) > 0 {
		for _, num := range m.AllCollectPrizeFetters {
			dAtA[i] = 0x10
			i++
			i = encodeVarintCaptainSoul(dAtA, i, uint64(num))
		}
	}
	if len(m.AllActivatedFetters) > 0 {
		for _, num := range m.AllActivatedFetters {
			dAtA[i] = 0x18
			i++
			i = encodeVarintCaptainSoul(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *HeroCaptainSoulOtherProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeroCaptainSoulOtherProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AllUnlockCaptainSouls) > 0 {
		for _, msg := range m.AllUnlockCaptainSouls {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCaptainSoul(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.AllActivatedFetters) > 0 {
		for _, num := range m.AllActivatedFetters {
			dAtA[i] = 0x18
			i++
			i = encodeVarintCaptainSoul(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *CaptainSoulProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CaptainSoulProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(m.Id))
	}
	if m.Level != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(m.Level))
	}
	if m.Exp != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(m.Exp))
	}
	if len(m.UnlockedSpells) > 0 {
		for _, b := range m.UnlockedSpells {
			dAtA[i] = 0x20
			i++
			if b {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i++
		}
	}
	if m.Mark {
		dAtA[i] = 0x28
		i++
		if m.Mark {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TotalStat != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(m.TotalStat.Size()))
		n4, err := m.TotalStat.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func encodeFixed64CaptainSoul(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32CaptainSoul(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintCaptainSoul(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CaptainSoulMiscProto) Size() (n int) {
	var l int
	_ = l
	if m.LevelDiffLimit != 0 {
		n += 1 + sovCaptainSoul(uint64(m.LevelDiffLimit))
	}
	return n
}

func (m *CaptainSoulDataProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCaptainSoul(uint64(m.Id))
	}
	if m.Quality != 0 {
		n += 1 + sovCaptainSoul(uint64(m.Quality))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCaptainSoul(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovCaptainSoul(uint64(l))
	}
	if m.PrizeIfHasSoul != nil {
		l = m.PrizeIfHasSoul.Size()
		n += 1 + l + sovCaptainSoul(uint64(l))
	}
	l = len(m.ChatContentWhenActivated)
	if l > 0 {
		n += 1 + l + sovCaptainSoul(uint64(l))
	}
	l = len(m.IconId)
	if l > 0 {
		n += 1 + l + sovCaptainSoul(uint64(l))
	}
	if len(m.LevelDatas) > 0 {
		for _, e := range m.LevelDatas {
			l = e.Size()
			n += 1 + l + sovCaptainSoul(uint64(l))
		}
	}
	if m.AutoUnlockSpellCount != 0 {
		n += 1 + sovCaptainSoul(uint64(m.AutoUnlockSpellCount))
	}
	if len(m.UnlockSpellCosts) > 0 {
		for _, e := range m.UnlockSpellCosts {
			l = e.Size()
			n += 1 + l + sovCaptainSoul(uint64(l))
		}
	}
	if len(m.ObtainWays) > 0 {
		for _, e := range m.ObtainWays {
			n += 1 + sovCaptainSoul(uint64(e))
		}
	}
	if m.ObtainDungeonChapter != 0 {
		n += 1 + sovCaptainSoul(uint64(m.ObtainDungeonChapter))
	}
	l = len(m.SpinePath)
	if l > 0 {
		n += 2 + l + sovCaptainSoul(uint64(l))
	}
	l = len(m.Sound)
	if l > 0 {
		n += 2 + l + sovCaptainSoul(uint64(l))
	}
	return n
}

func (m *CaptainSoulLevelDataProto) Size() (n int) {
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovCaptainSoul(uint64(m.Level))
	}
	if m.CostGoods != 0 {
		n += 1 + sovCaptainSoul(uint64(m.CostGoods))
	}
	if m.CostGoodsCount != 0 {
		n += 1 + sovCaptainSoul(uint64(m.CostGoodsCount))
	}
	if m.AddMorale != 0 {
		n += 1 + sovCaptainSoul(uint64(m.AddMorale))
	}
	if m.UpgradeToNextExp != 0 {
		n += 1 + sovCaptainSoul(uint64(m.UpgradeToNextExp))
	}
	if len(m.Spells) > 0 {
		for _, e := range m.Spells {
			l = e.Size()
			n += 1 + l + sovCaptainSoul(uint64(l))
		}
	}
	if m.Star != 0 {
		n += 1 + sovCaptainSoul(uint64(m.Star))
	}
	if m.StarLevel != 0 {
		n += 1 + sovCaptainSoul(uint64(m.StarLevel))
	}
	return n
}

func (m *CaptainSoulSpellProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovCaptainSoul(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovCaptainSoul(uint64(l))
	}
	if m.SpriteStat != nil {
		l = m.SpriteStat.Size()
		n += 1 + l + sovCaptainSoul(uint64(l))
	}
	if m.UnlockNeedLevel != 0 {
		n += 1 + sovCaptainSoul(uint64(m.UnlockNeedLevel))
	}
	if m.Race != 0 {
		n += 1 + sovCaptainSoul(uint64(m.Race))
	}
	return n
}

func (m *CaptainSoulFettersProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCaptainSoul(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCaptainSoul(uint64(l))
	}
	if m.FettersPrize != nil {
		l = m.FettersPrize.Size()
		n += 1 + l + sovCaptainSoul(uint64(l))
	}
	if len(m.Souls) > 0 {
		for _, e := range m.Souls {
			n += 1 + sovCaptainSoul(uint64(e))
		}
	}
	l = len(m.Story)
	if l > 0 {
		n += 1 + l + sovCaptainSoul(uint64(l))
	}
	return n
}

func (m *HeroCaptainSoulProto) Size() (n int) {
	var l int
	_ = l
	if len(m.AllUnlockCaptainSouls) > 0 {
		for _, e := range m.AllUnlockCaptainSouls {
			l = e.Size()
			n += 1 + l + sovCaptainSoul(uint64(l))
		}
	}
	if len(m.AllCollectPrizeFetters) > 0 {
		for _, e := range m.AllCollectPrizeFetters {
			n += 1 + sovCaptainSoul(uint64(e))
		}
	}
	if len(m.AllActivatedFetters) > 0 {
		for _, e := range m.AllActivatedFetters {
			n += 1 + sovCaptainSoul(uint64(e))
		}
	}
	return n
}

func (m *HeroCaptainSoulOtherProto) Size() (n int) {
	var l int
	_ = l
	if len(m.AllUnlockCaptainSouls) > 0 {
		for _, e := range m.AllUnlockCaptainSouls {
			l = e.Size()
			n += 1 + l + sovCaptainSoul(uint64(l))
		}
	}
	if len(m.AllActivatedFetters) > 0 {
		for _, e := range m.AllActivatedFetters {
			n += 1 + sovCaptainSoul(uint64(e))
		}
	}
	return n
}

func (m *CaptainSoulProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCaptainSoul(uint64(m.Id))
	}
	if m.Level != 0 {
		n += 1 + sovCaptainSoul(uint64(m.Level))
	}
	if m.Exp != 0 {
		n += 1 + sovCaptainSoul(uint64(m.Exp))
	}
	if len(m.UnlockedSpells) > 0 {
		n += 2 * len(m.UnlockedSpells)
	}
	if m.Mark {
		n += 2
	}
	if m.TotalStat != nil {
		l = m.TotalStat.Size()
		n += 1 + l + sovCaptainSoul(uint64(l))
	}
	return n
}

func sovCaptainSoul(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCaptainSoul(x uint64) (n int) {
	return sovCaptainSoul(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CaptainSoulMiscProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCaptainSoul
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CaptainSoulMiscProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CaptainSoulMiscProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelDiffLimit", wireType)
			}
			m.LevelDiffLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LevelDiffLimit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCaptainSoul(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCaptainSoul
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CaptainSoulDataProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCaptainSoul
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CaptainSoulDataProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CaptainSoulDataProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quality", wireType)
			}
			m.Quality = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quality |= (Quality(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCaptainSoul
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCaptainSoul
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrizeIfHasSoul", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCaptainSoul
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrizeIfHasSoul == nil {
				m.PrizeIfHasSoul = &PrizeProto{}
			}
			if err := m.PrizeIfHasSoul.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatContentWhenActivated", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCaptainSoul
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChatContentWhenActivated = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCaptainSoul
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelDatas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCaptainSoul
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LevelDatas = append(m.LevelDatas, &CaptainSoulLevelDataProto{})
			if err := m.LevelDatas[len(m.LevelDatas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoUnlockSpellCount", wireType)
			}
			m.AutoUnlockSpellCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AutoUnlockSpellCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockSpellCosts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCaptainSoul
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnlockSpellCosts = append(m.UnlockSpellCosts, &CostProto{})
			if err := m.UnlockSpellCosts[len(m.UnlockSpellCosts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCaptainSoul
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ObtainWays = append(m.ObtainWays, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCaptainSoul
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCaptainSoul
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCaptainSoul
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ObtainWays = append(m.ObtainWays, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ObtainWays", wireType)
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObtainDungeonChapter", wireType)
			}
			m.ObtainDungeonChapter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObtainDungeonChapter |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpinePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCaptainSoul
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpinePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sound", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCaptainSoul
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sound = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCaptainSoul(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCaptainSoul
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CaptainSoulLevelDataProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCaptainSoul
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CaptainSoulLevelDataProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CaptainSoulLevelDataProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CostGoods", wireType)
			}
			m.CostGoods = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CostGoods |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CostGoodsCount", wireType)
			}
			m.CostGoodsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CostGoodsCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddMorale", wireType)
			}
			m.AddMorale = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddMorale |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgradeToNextExp", wireType)
			}
			m.UpgradeToNextExp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpgradeToNextExp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spells", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCaptainSoul
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spells = append(m.Spells, &CaptainSoulSpellProto{})
			if err := m.Spells[len(m.Spells)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Star", wireType)
			}
			m.Star = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Star |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StarLevel", wireType)
			}
			m.StarLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StarLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCaptainSoul(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCaptainSoul
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CaptainSoulSpellProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCaptainSoul
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CaptainSoulSpellProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CaptainSoulSpellProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCaptainSoul
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCaptainSoul
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpriteStat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCaptainSoul
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SpriteStat == nil {
				m.SpriteStat = &SpriteStatProto{}
			}
			if err := m.SpriteStat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockNeedLevel", wireType)
			}
			m.UnlockNeedLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnlockNeedLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Race", wireType)
			}
			m.Race = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Race |= (Race(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCaptainSoul(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCaptainSoul
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CaptainSoulFettersProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCaptainSoul
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CaptainSoulFettersProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CaptainSoulFettersProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCaptainSoul
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FettersPrize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCaptainSoul
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FettersPrize == nil {
				m.FettersPrize = &PrizeProto{}
			}
			if err := m.FettersPrize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCaptainSoul
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Souls = append(m.Souls, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCaptainSoul
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCaptainSoul
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCaptainSoul
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Souls = append(m.Souls, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Souls", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Story", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCaptainSoul
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Story = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCaptainSoul(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCaptainSoul
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeroCaptainSoulProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCaptainSoul
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroCaptainSoulProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroCaptainSoulProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllUnlockCaptainSouls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCaptainSoul
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllUnlockCaptainSouls = append(m.AllUnlockCaptainSouls, &CaptainSoulProto{})
			if err := m.AllUnlockCaptainSouls[len(m.AllUnlockCaptainSouls)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCaptainSoul
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AllCollectPrizeFetters = append(m.AllCollectPrizeFetters, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCaptainSoul
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCaptainSoul
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCaptainSoul
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AllCollectPrizeFetters = append(m.AllCollectPrizeFetters, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AllCollectPrizeFetters", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCaptainSoul
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AllActivatedFetters = append(m.AllActivatedFetters, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCaptainSoul
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCaptainSoul
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCaptainSoul
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AllActivatedFetters = append(m.AllActivatedFetters, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AllActivatedFetters", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCaptainSoul(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCaptainSoul
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeroCaptainSoulOtherProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCaptainSoul
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroCaptainSoulOtherProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroCaptainSoulOtherProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllUnlockCaptainSouls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCaptainSoul
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllUnlockCaptainSouls = append(m.AllUnlockCaptainSouls, &CaptainSoulProto{})
			if err := m.AllUnlockCaptainSouls[len(m.AllUnlockCaptainSouls)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCaptainSoul
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AllActivatedFetters = append(m.AllActivatedFetters, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCaptainSoul
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCaptainSoul
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCaptainSoul
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AllActivatedFetters = append(m.AllActivatedFetters, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AllActivatedFetters", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCaptainSoul(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCaptainSoul
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CaptainSoulProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCaptainSoul
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CaptainSoulProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CaptainSoulProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			m.Exp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCaptainSoul
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UnlockedSpells = append(m.UnlockedSpells, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCaptainSoul
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCaptainSoul
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCaptainSoul
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UnlockedSpells = append(m.UnlockedSpells, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockedSpells", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mark", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Mark = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalStat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCaptainSoul
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TotalStat == nil {
				m.TotalStat = &SpriteStatProto{}
			}
			if err := m.TotalStat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCaptainSoul(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCaptainSoul
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCaptainSoul(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCaptainSoul
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCaptainSoul
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCaptainSoul
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCaptainSoul(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCaptainSoul = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCaptainSoul   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/pb/shared_proto/captain_soul.proto", fileDescriptorCaptainSoul)
}

var fileDescriptorCaptainSoul = []byte{
	// 986 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0xd1, 0x6e, 0x1b, 0x45,
	0x17, 0xee, 0xda, 0xb1, 0x13, 0x1f, 0xa7, 0xfe, 0x9d, 0x69, 0x9a, 0x4c, 0x7e, 0x68, 0xb0, 0xcc,
	0x8d, 0x05, 0x22, 0x91, 0x42, 0xda, 0xde, 0xb4, 0x88, 0x36, 0x01, 0x52, 0xa9, 0x2d, 0x61, 0x03,
	0xaa, 0xc4, 0xcd, 0xe8, 0x64, 0x77, 0x9c, 0x5d, 0x75, 0xbc, 0xb3, 0xec, 0xcc, 0x36, 0x49, 0x9f,
	0x84, 0x17, 0xe0, 0x01, 0x78, 0x05, 0x24, 0x24, 0x2e, 0xb9, 0xe4, 0x0e, 0x14, 0x5e, 0x04, 0xcd,
	0x99, 0xb1, 0x6b, 0x92, 0x80, 0x10, 0x12, 0x57, 0x9e, 0x39, 0xdf, 0x9c, 0xb3, 0xdf, 0x7c, 0xf3,
	0x9d, 0x63, 0x78, 0x70, 0x92, 0xdb, 0xac, 0x3e, 0xde, 0x4a, 0xf4, 0x64, 0x5b, 0xe5, 0x27, 0x99,
	0x2d, 0xf1, 0x74, 0x7b, 0x82, 0x4a, 0xde, 0xdf, 0x2e, 0x8f, 0xb7, 0x4d, 0x86, 0x95, 0x4c, 0x45,
	0x59, 0x69, 0xab, 0xb7, 0x13, 0x2c, 0x2d, 0xe6, 0x85, 0x30, 0xba, 0x56, 0x5b, 0x14, 0x62, 0x2d,
	0xfa, 0xf9, 0xff, 0xee, 0x3f, 0x2f, 0x72, 0x8c, 0x46, 0xfa, 0xe4, 0xe1, 0xc7, 0xb0, 0xba, 0xe7,
	0x4b, 0x1e, 0xe9, 0x5a, 0x3d, 0xcb, 0x4d, 0x72, 0x48, 0x45, 0x47, 0xd0, 0x57, 0xf2, 0x95, 0x54,
	0x22, 0xcd, 0xc7, 0x63, 0xa1, 0xf2, 0x49, 0x6e, 0x79, 0x34, 0x88, 0x46, 0xad, 0xb8, 0x47, 0xf1,
	0xfd, 0x7c, 0x3c, 0x7e, 0xea, 0xa2, 0xc3, 0x5f, 0x16, 0xfe, 0x54, 0x62, 0x1f, 0x2d, 0xfa, 0x12,
	0x3d, 0x68, 0xe4, 0x69, 0x48, 0x6a, 0xe4, 0x29, 0x1b, 0xc1, 0xe2, 0x37, 0x35, 0xaa, 0xdc, 0x9e,
	0xf3, 0xc6, 0x20, 0x1a, 0xf5, 0x76, 0x7a, 0x9e, 0xc3, 0xd6, 0x17, 0x3e, 0x1a, 0x4f, 0x61, 0xc6,
	0x60, 0xa1, 0xc0, 0x89, 0xe4, 0xcd, 0x41, 0x34, 0xea, 0xc4, 0xb4, 0x76, 0xb1, 0x54, 0x9a, 0x84,
	0xb7, 0x7c, 0xcc, 0xad, 0xd9, 0x03, 0x58, 0x29, 0xab, 0xfc, 0xb5, 0x14, 0xf9, 0x58, 0x64, 0x68,
	0x48, 0x14, 0xde, 0x1e, 0x44, 0xa3, 0xee, 0xce, 0x4a, 0xa8, 0x7d, 0xe8, 0x70, 0xe2, 0x13, 0xf7,
	0xe8, 0xec, 0x93, 0xf1, 0x01, 0x1a, 0x47, 0x94, 0x3d, 0x84, 0xb7, 0x92, 0x0c, 0xad, 0x48, 0x74,
	0x61, 0x65, 0x61, 0xc5, 0x69, 0x26, 0x0b, 0x81, 0x89, 0xcd, 0x5f, 0xa1, 0x95, 0x29, 0x5f, 0xa4,
	0x0f, 0x71, 0x77, 0x64, 0xcf, 0x9f, 0x78, 0x91, 0xc9, 0xe2, 0xd1, 0x14, 0x67, 0xeb, 0xb0, 0x98,
	0x27, 0xba, 0x10, 0x79, 0xca, 0x97, 0xe8, 0x68, 0xdb, 0x6d, 0x9f, 0xa4, 0xec, 0x11, 0x74, 0x83,
	0x74, 0x68, 0xd1, 0xf0, 0xce, 0xa0, 0x39, 0xea, 0xee, 0x0c, 0x02, 0x9f, 0x39, 0xa5, 0x9e, 0x92,
	0x8e, 0x53, 0xb9, 0x62, 0x50, 0xd3, 0xbd, 0x61, 0x77, 0x61, 0x1d, 0x6b, 0xab, 0x45, 0x5d, 0x28,
	0x9d, 0xbc, 0x14, 0xa6, 0x94, 0x4a, 0x89, 0x44, 0xd7, 0x85, 0xe5, 0x5d, 0xd2, 0x73, 0xd5, 0xc1,
	0x5f, 0x11, 0x7a, 0xe4, 0xc0, 0x3d, 0x87, 0xb1, 0x8f, 0x80, 0x5d, 0xca, 0x30, 0xd6, 0xf0, 0x65,
	0x22, 0xd0, 0x9f, 0x12, 0xd0, 0xc6, 0xfa, 0x0f, 0xf6, 0xeb, 0xf9, 0x7c, 0x63, 0x0d, 0x7b, 0x17,
	0xba, 0xfa, 0x98, 0xec, 0x75, 0x8a, 0xe7, 0x86, 0xdf, 0x1c, 0x34, 0x47, 0xad, 0xc7, 0x8d, 0xfe,
	0x8d, 0x18, 0x7c, 0xf8, 0x05, 0x9e, 0x1b, 0xb6, 0x0b, 0x6b, 0xe1, 0x50, 0x5a, 0x17, 0x27, 0x52,
	0x17, 0x22, 0xc9, 0xb0, 0xb4, 0xb2, 0xe2, 0x3d, 0x4f, 0xcd, 0xa3, 0xfb, 0x1e, 0xdc, 0xf3, 0x18,
	0xbb, 0x03, 0x60, 0xca, 0xbc, 0x90, 0xa2, 0x44, 0x9b, 0xf1, 0x3e, 0x09, 0xd6, 0xa1, 0xc8, 0x21,
	0xda, 0x8c, 0xad, 0x42, 0xcb, 0xe8, 0xba, 0x48, 0xf9, 0x0a, 0x21, 0x7e, 0x33, 0xfc, 0xbe, 0x01,
	0x1b, 0x7f, 0x29, 0x98, 0xcb, 0x21, 0xc9, 0x82, 0xc5, 0xfc, 0xc6, 0x7d, 0xc8, 0x5d, 0x5b, 0x9c,
	0x68, 0x9d, 0x1a, 0x32, 0x5a, 0x2b, 0xee, 0xb8, 0xc8, 0x67, 0x2e, 0xe0, 0x7c, 0xfd, 0x06, 0x0e,
	0x92, 0x36, 0xbd, 0xaf, 0x67, 0x87, 0xbc, 0x98, 0x77, 0x00, 0x30, 0x4d, 0xc5, 0x44, 0x57, 0xa8,
	0x24, 0x5f, 0xf0, 0x85, 0x30, 0x4d, 0x9f, 0x51, 0x80, 0x7d, 0x00, 0xb7, 0xea, 0xf2, 0xa4, 0xc2,
	0x54, 0x0a, 0xab, 0x45, 0x21, 0xcf, 0xac, 0x90, 0x67, 0x25, 0xd9, 0xb3, 0x15, 0xf7, 0x03, 0xf4,
	0xa5, 0x7e, 0x2e, 0xcf, 0xec, 0x27, 0x67, 0x25, 0xdb, 0x85, 0x36, 0xbd, 0x89, 0xe1, 0x6d, 0x7a,
	0x8e, 0xb7, 0xaf, 0xfa, 0x81, 0x1e, 0xc2, 0x3f, 0x4d, 0x38, 0xeb, 0x4c, 0x6f, 0x2c, 0x56, 0xe1,
	0xd1, 0x69, 0x4d, 0x4a, 0x5a, 0xac, 0x84, 0xbf, 0xfb, 0xb2, 0xe7, 0xe5, 0x22, 0x24, 0xcf, 0xf0,
	0xc7, 0x08, 0x6e, 0x5f, 0x5b, 0xd4, 0x15, 0x73, 0x0e, 0x25, 0xb9, 0x3a, 0x31, 0xad, 0x67, 0x5d,
	0xd5, 0x98, 0xeb, 0xaa, 0xfb, 0xd0, 0x35, 0x65, 0x95, 0x5b, 0x29, 0x8c, 0x45, 0xaf, 0x4e, 0x77,
	0x67, 0x2d, 0xf0, 0x3d, 0x22, 0xe4, 0xc8, 0x62, 0x30, 0x11, 0x98, 0x59, 0x80, 0xbd, 0x07, 0x2b,
	0xc1, 0x7e, 0x85, 0x94, 0x69, 0x20, 0xe8, 0x85, 0xfb, 0x9f, 0x07, 0x9e, 0x4b, 0x99, 0x12, 0x4d,
	0xf6, 0x0e, 0x2c, 0x54, 0x98, 0x48, 0xd2, 0xab, 0xb7, 0xd3, 0x0d, 0xd5, 0x63, 0x4c, 0x64, 0x4c,
	0xc0, 0xf0, 0xbb, 0x08, 0xd6, 0xe7, 0xee, 0xf1, 0xa9, 0xb4, 0x56, 0x56, 0xe6, 0xfa, 0xc9, 0x32,
	0x9d, 0x17, 0x8d, 0xb9, 0x79, 0x71, 0x0f, 0x6e, 0x8e, 0x7d, 0x8e, 0xa0, 0xbe, 0x0f, 0xf7, 0xb8,
	0x66, 0x2e, 0x2c, 0x8f, 0xa7, 0xb5, 0xf3, 0xd7, 0x92, 0x71, 0x72, 0xa2, 0x32, 0x7c, 0x61, 0xe6,
	0x7e, 0x1f, 0x20, 0x8f, 0x5a, 0x5d, 0x9d, 0x87, 0x11, 0xe4, 0x37, 0xc3, 0x5f, 0x23, 0x58, 0x3d,
	0x90, 0x95, 0x9e, 0xe3, 0xea, 0x49, 0x1e, 0x02, 0x47, 0xa5, 0xa6, 0x2d, 0x3c, 0x3f, 0xb7, 0x0d,
	0x8f, 0xc8, 0x03, 0xeb, 0x57, 0x3d, 0xe0, 0x19, 0xdd, 0x46, 0xa5, 0x7c, 0x73, 0xcf, 0x41, 0x86,
	0x3d, 0x84, 0x0d, 0xa4, 0xae, 0x56, 0x4a, 0x26, 0xd6, 0x5f, 0x4b, 0x04, 0xf2, 0xbc, 0x31, 0xa3,
	0xbb, 0x86, 0xae, 0x9f, 0xe9, 0x0c, 0x5d, 0x29, 0x48, 0xc7, 0xee, 0x81, 0xab, 0xfb, 0x66, 0xc2,
	0xcd, 0x52, 0x9b, 0xb3, 0xd4, 0x5b, 0xa8, 0xd4, 0x6c, 0xc2, 0x85, 0x3c, 0xf7, 0x12, 0x1b, 0x97,
	0x6e, 0xf8, 0xb9, 0xcd, 0x64, 0xf5, 0x5f, 0x5d, 0xf3, 0xdf, 0xf2, 0xfc, 0x21, 0x82, 0xfe, 0x95,
	0x57, 0xb8, 0x6c, 0x95, 0xd9, 0xd0, 0x68, 0xcc, 0x0f, 0x8d, 0x3e, 0x34, 0x5d, 0xf3, 0xfa, 0x41,
	0xe0, 0x96, 0xec, 0x7d, 0x08, 0x96, 0x95, 0xa9, 0x08, 0x8d, 0xeb, 0x0c, 0xb1, 0x44, 0x9f, 0xef,
	0x4d, 0xa1, 0xa3, 0x59, 0x9b, 0x4e, 0xb0, 0x7a, 0x49, 0xc6, 0x58, 0x8a, 0x69, 0xcd, 0xee, 0x02,
	0x58, 0x6d, 0x51, 0xf9, 0x26, 0x6a, 0xff, 0x6d, 0x13, 0x75, 0xe8, 0xa4, 0xdb, 0x3f, 0x1e, 0xfc,
	0x74, 0xb1, 0x19, 0xfd, 0x7c, 0xb1, 0x19, 0xfd, 0x76, 0xb1, 0x19, 0x7d, 0xfb, 0xfb, 0xe6, 0x8d,
	0x83, 0xe8, 0xeb, 0xe5, 0xf9, 0x3f, 0xef, 0xe3, 0x36, 0xfd, 0x7c, 0xf8, 0x47, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x7a, 0x05, 0xa6, 0xc0, 0x35, 0x08, 0x00, 0x00,
}
