// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/pb/shared_proto/vip.proto
// DO NOT EDIT!

package shared_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type HeroVipProto struct {
	Level                     int32   `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Exp                       int32   `protobuf:"varint,2,opt,name=exp,proto3" json:"exp,omitempty"`
	ContinueDays              int32   `protobuf:"varint,3,opt,name=continue_days,json=continueDays,proto3" json:"continue_days,omitempty"`
	DailyPrizeCanCollectLevel []int32 `protobuf:"varint,5,rep,name=daily_prize_can_collect_level,json=dailyPrizeCanCollectLevel" json:"daily_prize_can_collect_level,omitempty"`
	LevelPrizeCollectedLevel  []int32 `protobuf:"varint,6,rep,name=level_prize_collected_level,json=levelPrizeCollectedLevel" json:"level_prize_collected_level,omitempty"`
	VipShopBoughtId           []int32 `protobuf:"varint,7,rep,name=vip_shop_bought_id,json=vipShopBoughtId" json:"vip_shop_bought_id,omitempty"`
	DailyPrizeCollectedLevel  []int32 `protobuf:"varint,8,rep,name=daily_prize_collected_level,json=dailyPrizeCollectedLevel" json:"daily_prize_collected_level,omitempty"`
}

func (m *HeroVipProto) Reset()                    { *m = HeroVipProto{} }
func (m *HeroVipProto) String() string            { return proto.CompactTextString(m) }
func (*HeroVipProto) ProtoMessage()               {}
func (*HeroVipProto) Descriptor() ([]byte, []int) { return fileDescriptorVip, []int{0} }

func (m *HeroVipProto) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *HeroVipProto) GetExp() int32 {
	if m != nil {
		return m.Exp
	}
	return 0
}

func (m *HeroVipProto) GetContinueDays() int32 {
	if m != nil {
		return m.ContinueDays
	}
	return 0
}

func (m *HeroVipProto) GetDailyPrizeCanCollectLevel() []int32 {
	if m != nil {
		return m.DailyPrizeCanCollectLevel
	}
	return nil
}

func (m *HeroVipProto) GetLevelPrizeCollectedLevel() []int32 {
	if m != nil {
		return m.LevelPrizeCollectedLevel
	}
	return nil
}

func (m *HeroVipProto) GetVipShopBoughtId() []int32 {
	if m != nil {
		return m.VipShopBoughtId
	}
	return nil
}

func (m *HeroVipProto) GetDailyPrizeCollectedLevel() []int32 {
	if m != nil {
		return m.DailyPrizeCollectedLevel
	}
	return nil
}

func init() {
	proto.RegisterType((*HeroVipProto)(nil), "proto.HeroVipProto")
}
func (m *HeroVipProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeroVipProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Level != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.Level))
	}
	if m.Exp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.Exp))
	}
	if m.ContinueDays != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.ContinueDays))
	}
	if len(m.DailyPrizeCanCollectLevel) > 0 {
		for _, num := range m.DailyPrizeCanCollectLevel {
			dAtA[i] = 0x28
			i++
			i = encodeVarintVip(dAtA, i, uint64(num))
		}
	}
	if len(m.LevelPrizeCollectedLevel) > 0 {
		for _, num := range m.LevelPrizeCollectedLevel {
			dAtA[i] = 0x30
			i++
			i = encodeVarintVip(dAtA, i, uint64(num))
		}
	}
	if len(m.VipShopBoughtId) > 0 {
		for _, num := range m.VipShopBoughtId {
			dAtA[i] = 0x38
			i++
			i = encodeVarintVip(dAtA, i, uint64(num))
		}
	}
	if len(m.DailyPrizeCollectedLevel) > 0 {
		for _, num := range m.DailyPrizeCollectedLevel {
			dAtA[i] = 0x40
			i++
			i = encodeVarintVip(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func encodeFixed64Vip(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Vip(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintVip(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *HeroVipProto) Size() (n int) {
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovVip(uint64(m.Level))
	}
	if m.Exp != 0 {
		n += 1 + sovVip(uint64(m.Exp))
	}
	if m.ContinueDays != 0 {
		n += 1 + sovVip(uint64(m.ContinueDays))
	}
	if len(m.DailyPrizeCanCollectLevel) > 0 {
		for _, e := range m.DailyPrizeCanCollectLevel {
			n += 1 + sovVip(uint64(e))
		}
	}
	if len(m.LevelPrizeCollectedLevel) > 0 {
		for _, e := range m.LevelPrizeCollectedLevel {
			n += 1 + sovVip(uint64(e))
		}
	}
	if len(m.VipShopBoughtId) > 0 {
		for _, e := range m.VipShopBoughtId {
			n += 1 + sovVip(uint64(e))
		}
	}
	if len(m.DailyPrizeCollectedLevel) > 0 {
		for _, e := range m.DailyPrizeCollectedLevel {
			n += 1 + sovVip(uint64(e))
		}
	}
	return n
}

func sovVip(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozVip(x uint64) (n int) {
	return sovVip(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HeroVipProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroVipProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroVipProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			m.Exp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContinueDays", wireType)
			}
			m.ContinueDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContinueDays |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVip
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DailyPrizeCanCollectLevel = append(m.DailyPrizeCanCollectLevel, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVip
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthVip
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVip
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DailyPrizeCanCollectLevel = append(m.DailyPrizeCanCollectLevel, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DailyPrizeCanCollectLevel", wireType)
			}
		case 6:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVip
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LevelPrizeCollectedLevel = append(m.LevelPrizeCollectedLevel, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVip
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthVip
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVip
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LevelPrizeCollectedLevel = append(m.LevelPrizeCollectedLevel, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelPrizeCollectedLevel", wireType)
			}
		case 7:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVip
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.VipShopBoughtId = append(m.VipShopBoughtId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVip
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthVip
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVip
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.VipShopBoughtId = append(m.VipShopBoughtId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field VipShopBoughtId", wireType)
			}
		case 8:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVip
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DailyPrizeCollectedLevel = append(m.DailyPrizeCollectedLevel, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVip
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthVip
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVip
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DailyPrizeCollectedLevel = append(m.DailyPrizeCollectedLevel, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DailyPrizeCollectedLevel", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVip(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVip
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVip
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVip
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthVip
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowVip
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipVip(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthVip = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVip   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/pb/shared_proto/vip.proto", fileDescriptorVip)
}

var fileDescriptorVip = []byte{
	// 307 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xb1, 0x4e, 0xc3, 0x30,
	0x18, 0x84, 0xeb, 0x56, 0x29, 0xc8, 0x2a, 0xa2, 0x8a, 0x18, 0x82, 0x10, 0x51, 0x05, 0x4b, 0xa7,
	0x7a, 0xe8, 0xc0, 0x4c, 0xda, 0xa1, 0x48, 0x0c, 0x55, 0x91, 0x18, 0x58, 0x2c, 0x27, 0xb6, 0x62,
	0x4b, 0x6e, 0x6c, 0x25, 0x4e, 0x20, 0x3c, 0x09, 0x8f, 0xc4, 0xc8, 0xc8, 0x88, 0xc2, 0x8b, 0xa0,
	0xd8, 0xa4, 0xb4, 0x4c, 0xff, 0x9f, 0xbb, 0xcb, 0x7d, 0xbf, 0x64, 0x38, 0x4f, 0x85, 0xe1, 0x65,
	0x3c, 0x4b, 0xd4, 0x16, 0x49, 0x91, 0x72, 0xa3, 0xc9, 0x33, 0xda, 0x12, 0xc9, 0x6e, 0x90, 0x8e,
	0x51, 0xc1, 0x49, 0xce, 0x28, 0xd6, 0xb9, 0x32, 0x0a, 0x55, 0x42, 0xcf, 0xec, 0xe6, 0x7b, 0x76,
	0x5c, 0x7d, 0xf6, 0xe1, 0x68, 0xc5, 0x72, 0xf5, 0x28, 0xf4, 0xda, 0xea, 0x67, 0xd0, 0x93, 0xac,
	0x62, 0x32, 0x00, 0x13, 0x30, 0xf5, 0x36, 0xee, 0xc3, 0x1f, 0xc3, 0x01, 0x7b, 0xd1, 0x41, 0xdf,
	0x6a, 0xed, 0xea, 0x5f, 0xc3, 0x93, 0x44, 0x65, 0x46, 0x64, 0x25, 0xc3, 0x94, 0xd4, 0x45, 0x30,
	0xb0, 0xde, 0xa8, 0x13, 0x97, 0xa4, 0x2e, 0xfc, 0x25, 0xbc, 0xa4, 0x44, 0xc8, 0x1a, 0xeb, 0x5c,
	0xbc, 0x32, 0x9c, 0x90, 0x0c, 0x27, 0x4a, 0x4a, 0x96, 0x18, 0xec, 0x20, 0xde, 0x64, 0x30, 0xf5,
	0xa2, 0xfe, 0xb8, 0xb7, 0x39, 0xb7, 0xc1, 0x75, 0x9b, 0x5b, 0x90, 0x6c, 0xe1, 0x52, 0xf7, 0x16,
	0x7e, 0x0b, 0x2f, 0x6c, 0xba, 0x6b, 0x71, 0x1e, 0xa3, 0xbf, 0x1d, 0xc3, 0x5d, 0x47, 0x60, 0x05,
	0xd7, 0xd1, 0x85, 0x5c, 0x05, 0x82, 0x7e, 0x25, 0x34, 0x2e, 0xb8, 0xd2, 0x38, 0x56, 0x65, 0xca,
	0x0d, 0x16, 0x34, 0x38, 0xda, 0xfd, 0x79, 0x5a, 0x09, 0xfd, 0xc0, 0x95, 0x8e, 0xac, 0x77, 0x47,
	0x5b, 0xe6, 0xc1, 0xe5, 0xff, 0x98, 0xc7, 0x7f, 0xcc, 0xbd, 0xbb, 0x0f, 0x98, 0xd1, 0xe4, 0xbd,
	0x09, 0xc1, 0x47, 0x13, 0x82, 0xaf, 0x26, 0x04, 0x6f, 0xdf, 0x61, 0x6f, 0x05, 0x9e, 0x46, 0xfb,
	0xaf, 0x11, 0x0f, 0xed, 0x98, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x17, 0x05, 0xaa, 0xbc, 0xc1,
	0x01, 0x00, 0x00,
}
