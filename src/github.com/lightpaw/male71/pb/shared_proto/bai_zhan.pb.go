// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/pb/shared_proto/bai_zhan.proto
// DO NOT EDIT!

package shared_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type LevelChangeType int32

const (
	// 要升级
	LevelChangeType_LEVEL_UP LevelChangeType = 0
	// 保持等级不变
	LevelChangeType_LEVEL_KEEP LevelChangeType = 1
	// 要降级
	LevelChangeType_LEVEL_DOWN LevelChangeType = 2
)

var LevelChangeType_name = map[int32]string{
	0: "LEVEL_UP",
	1: "LEVEL_KEEP",
	2: "LEVEL_DOWN",
}
var LevelChangeType_value = map[string]int32{
	"LEVEL_UP":   0,
	"LEVEL_KEEP": 1,
	"LEVEL_DOWN": 2,
}

func (x LevelChangeType) String() string {
	return proto.EnumName(LevelChangeType_name, int32(x))
}
func (LevelChangeType) EnumDescriptor() ([]byte, []int) { return fileDescriptorBaiZhan, []int{0} }

// 百战其他数据
type BaiZhanMiscProto struct {
	WinPoint         int32   `protobuf:"varint,1,opt,name=win_point,json=winPoint,proto3" json:"win_point,omitempty"`
	FailPoint        int32   `protobuf:"varint,2,opt,name=fail_point,json=failPoint,proto3" json:"fail_point,omitempty"`
	RecoverTimesTime []int32 `protobuf:"varint,3,rep,name=recover_times_time,json=recoverTimesTime" json:"recover_times_time,omitempty"`
	RecoverTimes     []int32 `protobuf:"varint,4,rep,name=recover_times,json=recoverTimes" json:"recover_times,omitempty"`
	MaxRecord        int32   `protobuf:"varint,5,opt,name=max_record,json=maxRecord,proto3" json:"max_record,omitempty"`
	ShowRankCount    int32   `protobuf:"varint,7,opt,name=show_rank_count,json=showRankCount,proto3" json:"show_rank_count,omitempty"`
}

func (m *BaiZhanMiscProto) Reset()                    { *m = BaiZhanMiscProto{} }
func (m *BaiZhanMiscProto) String() string            { return proto.CompactTextString(m) }
func (*BaiZhanMiscProto) ProtoMessage()               {}
func (*BaiZhanMiscProto) Descriptor() ([]byte, []int) { return fileDescriptorBaiZhan, []int{0} }

func (m *BaiZhanMiscProto) GetWinPoint() int32 {
	if m != nil {
		return m.WinPoint
	}
	return 0
}

func (m *BaiZhanMiscProto) GetFailPoint() int32 {
	if m != nil {
		return m.FailPoint
	}
	return 0
}

func (m *BaiZhanMiscProto) GetRecoverTimesTime() []int32 {
	if m != nil {
		return m.RecoverTimesTime
	}
	return nil
}

func (m *BaiZhanMiscProto) GetRecoverTimes() []int32 {
	if m != nil {
		return m.RecoverTimes
	}
	return nil
}

func (m *BaiZhanMiscProto) GetMaxRecord() int32 {
	if m != nil {
		return m.MaxRecord
	}
	return 0
}

func (m *BaiZhanMiscProto) GetShowRankCount() int32 {
	if m != nil {
		return m.ShowRankCount
	}
	return 0
}

// 军衔等级数据
type JunXianLevelDataProto struct {
	Level            int32            `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Name             string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IconId           string           `protobuf:"bytes,8,opt,name=icon_id,json=iconId,proto3" json:"icon_id,omitempty"`
	LevelUpPercent   int32            `protobuf:"varint,3,opt,name=level_up_percent,json=levelUpPercent,proto3" json:"level_up_percent,omitempty"`
	LevelUpPoint     int32            `protobuf:"varint,4,opt,name=level_up_point,json=levelUpPoint,proto3" json:"level_up_point,omitempty"`
	LevelDownPercent int32            `protobuf:"varint,5,opt,name=level_down_percent,json=levelDownPercent,proto3" json:"level_down_percent,omitempty"`
	LevelDownPoint   int32            `protobuf:"varint,6,opt,name=level_down_point,json=levelDownPoint,proto3" json:"level_down_point,omitempty"`
	DailySalary      *PrizeProto      `protobuf:"bytes,7,opt,name=daily_salary,json=dailySalary" json:"daily_salary,omitempty"`
	DailyHufu        int32            `protobuf:"varint,10,opt,name=daily_hufu,json=dailyHufu,proto3" json:"daily_hufu,omitempty"`
	AssemblyStat     *SpriteStatProto `protobuf:"bytes,9,opt,name=assembly_stat,json=assemblyStat" json:"assembly_stat,omitempty"`
}

func (m *JunXianLevelDataProto) Reset()                    { *m = JunXianLevelDataProto{} }
func (m *JunXianLevelDataProto) String() string            { return proto.CompactTextString(m) }
func (*JunXianLevelDataProto) ProtoMessage()               {}
func (*JunXianLevelDataProto) Descriptor() ([]byte, []int) { return fileDescriptorBaiZhan, []int{1} }

func (m *JunXianLevelDataProto) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *JunXianLevelDataProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *JunXianLevelDataProto) GetIconId() string {
	if m != nil {
		return m.IconId
	}
	return ""
}

func (m *JunXianLevelDataProto) GetLevelUpPercent() int32 {
	if m != nil {
		return m.LevelUpPercent
	}
	return 0
}

func (m *JunXianLevelDataProto) GetLevelUpPoint() int32 {
	if m != nil {
		return m.LevelUpPoint
	}
	return 0
}

func (m *JunXianLevelDataProto) GetLevelDownPercent() int32 {
	if m != nil {
		return m.LevelDownPercent
	}
	return 0
}

func (m *JunXianLevelDataProto) GetLevelDownPoint() int32 {
	if m != nil {
		return m.LevelDownPoint
	}
	return 0
}

func (m *JunXianLevelDataProto) GetDailySalary() *PrizeProto {
	if m != nil {
		return m.DailySalary
	}
	return nil
}

func (m *JunXianLevelDataProto) GetDailyHufu() int32 {
	if m != nil {
		return m.DailyHufu
	}
	return 0
}

func (m *JunXianLevelDataProto) GetAssemblyStat() *SpriteStatProto {
	if m != nil {
		return m.AssemblyStat
	}
	return nil
}

// 军衔等级奖励数据
type JunXianLevelPrizeProto struct {
	Id    int32       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Level int32       `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	Point int32       `protobuf:"varint,3,opt,name=point,proto3" json:"point,omitempty"`
	Prize *PrizeProto `protobuf:"bytes,4,opt,name=prize" json:"prize,omitempty"`
}

func (m *JunXianLevelPrizeProto) Reset()                    { *m = JunXianLevelPrizeProto{} }
func (m *JunXianLevelPrizeProto) String() string            { return proto.CompactTextString(m) }
func (*JunXianLevelPrizeProto) ProtoMessage()               {}
func (*JunXianLevelPrizeProto) Descriptor() ([]byte, []int) { return fileDescriptorBaiZhan, []int{2} }

func (m *JunXianLevelPrizeProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *JunXianLevelPrizeProto) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *JunXianLevelPrizeProto) GetPoint() int32 {
	if m != nil {
		return m.Point
	}
	return 0
}

func (m *JunXianLevelPrizeProto) GetPrize() *PrizeProto {
	if m != nil {
		return m.Prize
	}
	return nil
}

type BaiZhanReplayProto struct {
	Link          string            `protobuf:"bytes,1,opt,name=link,proto3" json:"link,omitempty"`
	Attacker      *CombatObjProto   `protobuf:"bytes,2,opt,name=attacker" json:"attacker,omitempty"`
	AttackerShare *CombatShareProto `protobuf:"bytes,7,opt,name=attacker_share,json=attackerShare" json:"attacker_share,omitempty"`
	Defender      *CombatObjProto   `protobuf:"bytes,3,opt,name=defender" json:"defender,omitempty"`
	DefenderShare *CombatShareProto `protobuf:"bytes,8,opt,name=defender_share,json=defenderShare" json:"defender_share,omitempty"`
	IsDefenderNpc bool              `protobuf:"varint,4,opt,name=is_defender_npc,json=isDefenderNpc,proto3" json:"is_defender_npc,omitempty"`
	IsAttackerWin bool              `protobuf:"varint,5,opt,name=is_attacker_win,json=isAttackerWin,proto3" json:"is_attacker_win,omitempty"`
	Time          int32             `protobuf:"varint,6,opt,name=time,proto3" json:"time,omitempty"`
}

func (m *BaiZhanReplayProto) Reset()                    { *m = BaiZhanReplayProto{} }
func (m *BaiZhanReplayProto) String() string            { return proto.CompactTextString(m) }
func (*BaiZhanReplayProto) ProtoMessage()               {}
func (*BaiZhanReplayProto) Descriptor() ([]byte, []int) { return fileDescriptorBaiZhan, []int{3} }

func (m *BaiZhanReplayProto) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *BaiZhanReplayProto) GetAttacker() *CombatObjProto {
	if m != nil {
		return m.Attacker
	}
	return nil
}

func (m *BaiZhanReplayProto) GetAttackerShare() *CombatShareProto {
	if m != nil {
		return m.AttackerShare
	}
	return nil
}

func (m *BaiZhanReplayProto) GetDefender() *CombatObjProto {
	if m != nil {
		return m.Defender
	}
	return nil
}

func (m *BaiZhanReplayProto) GetDefenderShare() *CombatShareProto {
	if m != nil {
		return m.DefenderShare
	}
	return nil
}

func (m *BaiZhanReplayProto) GetIsDefenderNpc() bool {
	if m != nil {
		return m.IsDefenderNpc
	}
	return false
}

func (m *BaiZhanReplayProto) GetIsAttackerWin() bool {
	if m != nil {
		return m.IsAttackerWin
	}
	return false
}

func (m *BaiZhanReplayProto) GetTime() int32 {
	if m != nil {
		return m.Time
	}
	return 0
}

type CombatObjProto struct {
	Hero *HeroBasicProto `protobuf:"bytes,11,opt,name=hero" json:"hero,omitempty"`
	// 下面字段过期处理
	Id            []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Guild         string `protobuf:"bytes,3,opt,name=guild,proto3" json:"guild,omitempty"`
	Head          string `protobuf:"bytes,4,opt,name=head,proto3" json:"head,omitempty"`
	GuildId       int32  `protobuf:"varint,5,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	GuildFlagName string `protobuf:"bytes,6,opt,name=guild_flag_name,json=guildFlagName,proto3" json:"guild_flag_name,omitempty"`
	Country       int32  `protobuf:"varint,10,opt,name=country,proto3" json:"country,omitempty"`
	Male          bool   `protobuf:"varint,7,opt,name=male,proto3" json:"male,omitempty"`
	Level         int32  `protobuf:"varint,9,opt,name=level,proto3" json:"level,omitempty"`
	FightAmount   int32  `protobuf:"varint,8,opt,name=fight_amount,json=fightAmount,proto3" json:"fight_amount,omitempty"`
	Race          []Race `protobuf:"varint,12,rep,name=race,enum=proto.Race" json:"race,omitempty"`
}

func (m *CombatObjProto) Reset()                    { *m = CombatObjProto{} }
func (m *CombatObjProto) String() string            { return proto.CompactTextString(m) }
func (*CombatObjProto) ProtoMessage()               {}
func (*CombatObjProto) Descriptor() ([]byte, []int) { return fileDescriptorBaiZhan, []int{4} }

func (m *CombatObjProto) GetHero() *HeroBasicProto {
	if m != nil {
		return m.Hero
	}
	return nil
}

func (m *CombatObjProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *CombatObjProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CombatObjProto) GetGuild() string {
	if m != nil {
		return m.Guild
	}
	return ""
}

func (m *CombatObjProto) GetHead() string {
	if m != nil {
		return m.Head
	}
	return ""
}

func (m *CombatObjProto) GetGuildId() int32 {
	if m != nil {
		return m.GuildId
	}
	return 0
}

func (m *CombatObjProto) GetGuildFlagName() string {
	if m != nil {
		return m.GuildFlagName
	}
	return ""
}

func (m *CombatObjProto) GetCountry() int32 {
	if m != nil {
		return m.Country
	}
	return 0
}

func (m *CombatObjProto) GetMale() bool {
	if m != nil {
		return m.Male
	}
	return false
}

func (m *CombatObjProto) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *CombatObjProto) GetFightAmount() int32 {
	if m != nil {
		return m.FightAmount
	}
	return 0
}

func (m *CombatObjProto) GetRace() []Race {
	if m != nil {
		return m.Race
	}
	return nil
}

type BaiZhanObjProto struct {
	ChallengeTimes              int32   `protobuf:"varint,1,opt,name=challenge_times,json=challengeTimes,proto3" json:"challenge_times,omitempty"`
	Point                       int32   `protobuf:"varint,2,opt,name=point,proto3" json:"point,omitempty"`
	IsCollectSalary             bool    `protobuf:"varint,3,opt,name=is_collect_salary,json=isCollectSalary,proto3" json:"is_collect_salary,omitempty"`
	LastCollectedJunXianPrizeId int32   `protobuf:"varint,4,opt,name=last_collected_jun_xian_prize_id,json=lastCollectedJunXianPrizeId,proto3" json:"last_collected_jun_xian_prize_id,omitempty"`
	JunXianLevel                int32   `protobuf:"varint,5,opt,name=jun_xian_level,json=junXianLevel,proto3" json:"jun_xian_level,omitempty"`
	LastJunXianLevel            int32   `protobuf:"varint,6,opt,name=last_jun_xian_level,json=lastJunXianLevel,proto3" json:"last_jun_xian_level,omitempty"`
	HistoryMaxJunXianLevel      int32   `protobuf:"varint,7,opt,name=history_max_jun_xian_level,json=historyMaxJunXianLevel,proto3" json:"history_max_jun_xian_level,omitempty"`
	HistoryMaxPoints            []int32 `protobuf:"varint,8,rep,name=history_max_points,json=historyMaxPoints" json:"history_max_points,omitempty"`
}

func (m *BaiZhanObjProto) Reset()                    { *m = BaiZhanObjProto{} }
func (m *BaiZhanObjProto) String() string            { return proto.CompactTextString(m) }
func (*BaiZhanObjProto) ProtoMessage()               {}
func (*BaiZhanObjProto) Descriptor() ([]byte, []int) { return fileDescriptorBaiZhan, []int{5} }

func (m *BaiZhanObjProto) GetChallengeTimes() int32 {
	if m != nil {
		return m.ChallengeTimes
	}
	return 0
}

func (m *BaiZhanObjProto) GetPoint() int32 {
	if m != nil {
		return m.Point
	}
	return 0
}

func (m *BaiZhanObjProto) GetIsCollectSalary() bool {
	if m != nil {
		return m.IsCollectSalary
	}
	return false
}

func (m *BaiZhanObjProto) GetLastCollectedJunXianPrizeId() int32 {
	if m != nil {
		return m.LastCollectedJunXianPrizeId
	}
	return 0
}

func (m *BaiZhanObjProto) GetJunXianLevel() int32 {
	if m != nil {
		return m.JunXianLevel
	}
	return 0
}

func (m *BaiZhanObjProto) GetLastJunXianLevel() int32 {
	if m != nil {
		return m.LastJunXianLevel
	}
	return 0
}

func (m *BaiZhanObjProto) GetHistoryMaxJunXianLevel() int32 {
	if m != nil {
		return m.HistoryMaxJunXianLevel
	}
	return 0
}

func (m *BaiZhanObjProto) GetHistoryMaxPoints() []int32 {
	if m != nil {
		return m.HistoryMaxPoints
	}
	return nil
}

type BaiZhanRankObjProto struct {
	Basic           *HeroBasicProto `protobuf:"bytes,1,opt,name=basic" json:"basic,omitempty"`
	Point           int32           `protobuf:"varint,2,opt,name=point,proto3" json:"point,omitempty"`
	LevelChangeType LevelChangeType `protobuf:"varint,3,opt,name=level_change_type,json=levelChangeType,proto3,enum=proto.LevelChangeType" json:"level_change_type,omitempty"`
	FightAmount     int32           `protobuf:"varint,4,opt,name=fight_amount,json=fightAmount,proto3" json:"fight_amount,omitempty"`
}

func (m *BaiZhanRankObjProto) Reset()                    { *m = BaiZhanRankObjProto{} }
func (m *BaiZhanRankObjProto) String() string            { return proto.CompactTextString(m) }
func (*BaiZhanRankObjProto) ProtoMessage()               {}
func (*BaiZhanRankObjProto) Descriptor() ([]byte, []int) { return fileDescriptorBaiZhan, []int{6} }

func (m *BaiZhanRankObjProto) GetBasic() *HeroBasicProto {
	if m != nil {
		return m.Basic
	}
	return nil
}

func (m *BaiZhanRankObjProto) GetPoint() int32 {
	if m != nil {
		return m.Point
	}
	return 0
}

func (m *BaiZhanRankObjProto) GetLevelChangeType() LevelChangeType {
	if m != nil {
		return m.LevelChangeType
	}
	return LevelChangeType_LEVEL_UP
}

func (m *BaiZhanRankObjProto) GetFightAmount() int32 {
	if m != nil {
		return m.FightAmount
	}
	return 0
}

func init() {
	proto.RegisterType((*BaiZhanMiscProto)(nil), "proto.BaiZhanMiscProto")
	proto.RegisterType((*JunXianLevelDataProto)(nil), "proto.JunXianLevelDataProto")
	proto.RegisterType((*JunXianLevelPrizeProto)(nil), "proto.JunXianLevelPrizeProto")
	proto.RegisterType((*BaiZhanReplayProto)(nil), "proto.BaiZhanReplayProto")
	proto.RegisterType((*CombatObjProto)(nil), "proto.CombatObjProto")
	proto.RegisterType((*BaiZhanObjProto)(nil), "proto.BaiZhanObjProto")
	proto.RegisterType((*BaiZhanRankObjProto)(nil), "proto.BaiZhanRankObjProto")
	proto.RegisterEnum("proto.LevelChangeType", LevelChangeType_name, LevelChangeType_value)
}
func (m *BaiZhanMiscProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaiZhanMiscProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.WinPoint != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(m.WinPoint))
	}
	if m.FailPoint != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(m.FailPoint))
	}
	if len(m.RecoverTimesTime) > 0 {
		for _, num := range m.RecoverTimesTime {
			dAtA[i] = 0x18
			i++
			i = encodeVarintBaiZhan(dAtA, i, uint64(num))
		}
	}
	if len(m.RecoverTimes) > 0 {
		for _, num := range m.RecoverTimes {
			dAtA[i] = 0x20
			i++
			i = encodeVarintBaiZhan(dAtA, i, uint64(num))
		}
	}
	if m.MaxRecord != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(m.MaxRecord))
	}
	if m.ShowRankCount != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(m.ShowRankCount))
	}
	return i, nil
}

func (m *JunXianLevelDataProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunXianLevelDataProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Level != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(m.Level))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.LevelUpPercent != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(m.LevelUpPercent))
	}
	if m.LevelUpPoint != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(m.LevelUpPoint))
	}
	if m.LevelDownPercent != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(m.LevelDownPercent))
	}
	if m.LevelDownPoint != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(m.LevelDownPoint))
	}
	if m.DailySalary != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(m.DailySalary.Size()))
		n1, err := m.DailySalary.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.IconId) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(len(m.IconId)))
		i += copy(dAtA[i:], m.IconId)
	}
	if m.AssemblyStat != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(m.AssemblyStat.Size()))
		n2, err := m.AssemblyStat.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.DailyHufu != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(m.DailyHufu))
	}
	return i, nil
}

func (m *JunXianLevelPrizeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JunXianLevelPrizeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(m.Id))
	}
	if m.Level != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(m.Level))
	}
	if m.Point != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(m.Point))
	}
	if m.Prize != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(m.Prize.Size()))
		n3, err := m.Prize.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *BaiZhanReplayProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaiZhanReplayProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Link) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(len(m.Link)))
		i += copy(dAtA[i:], m.Link)
	}
	if m.Attacker != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(m.Attacker.Size()))
		n4, err := m.Attacker.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Defender != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(m.Defender.Size()))
		n5, err := m.Defender.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.IsDefenderNpc {
		dAtA[i] = 0x20
		i++
		if m.IsDefenderNpc {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsAttackerWin {
		dAtA[i] = 0x28
		i++
		if m.IsAttackerWin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Time != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(m.Time))
	}
	if m.AttackerShare != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(m.AttackerShare.Size()))
		n6, err := m.AttackerShare.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.DefenderShare != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(m.DefenderShare.Size()))
		n7, err := m.DefenderShare.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *CombatObjProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CombatObjProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Guild) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(len(m.Guild)))
		i += copy(dAtA[i:], m.Guild)
	}
	if len(m.Head) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(len(m.Head)))
		i += copy(dAtA[i:], m.Head)
	}
	if m.GuildId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(m.GuildId))
	}
	if len(m.GuildFlagName) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(len(m.GuildFlagName)))
		i += copy(dAtA[i:], m.GuildFlagName)
	}
	if m.Male {
		dAtA[i] = 0x38
		i++
		if m.Male {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.FightAmount != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(m.FightAmount))
	}
	if m.Level != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(m.Level))
	}
	if m.Country != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(m.Country))
	}
	if m.Hero != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(m.Hero.Size()))
		n8, err := m.Hero.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if len(m.Race) > 0 {
		for _, num := range m.Race {
			dAtA[i] = 0x60
			i++
			i = encodeVarintBaiZhan(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *BaiZhanObjProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaiZhanObjProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChallengeTimes != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(m.ChallengeTimes))
	}
	if m.Point != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(m.Point))
	}
	if m.IsCollectSalary {
		dAtA[i] = 0x18
		i++
		if m.IsCollectSalary {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.LastCollectedJunXianPrizeId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(m.LastCollectedJunXianPrizeId))
	}
	if m.JunXianLevel != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(m.JunXianLevel))
	}
	if m.LastJunXianLevel != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(m.LastJunXianLevel))
	}
	if m.HistoryMaxJunXianLevel != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(m.HistoryMaxJunXianLevel))
	}
	if len(m.HistoryMaxPoints) > 0 {
		for _, num := range m.HistoryMaxPoints {
			dAtA[i] = 0x40
			i++
			i = encodeVarintBaiZhan(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *BaiZhanRankObjProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaiZhanRankObjProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Basic != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(m.Basic.Size()))
		n9, err := m.Basic.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.Point != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(m.Point))
	}
	if m.LevelChangeType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(m.LevelChangeType))
	}
	if m.FightAmount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintBaiZhan(dAtA, i, uint64(m.FightAmount))
	}
	return i, nil
}

func encodeFixed64BaiZhan(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32BaiZhan(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintBaiZhan(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *BaiZhanMiscProto) Size() (n int) {
	var l int
	_ = l
	if m.WinPoint != 0 {
		n += 1 + sovBaiZhan(uint64(m.WinPoint))
	}
	if m.FailPoint != 0 {
		n += 1 + sovBaiZhan(uint64(m.FailPoint))
	}
	if len(m.RecoverTimesTime) > 0 {
		for _, e := range m.RecoverTimesTime {
			n += 1 + sovBaiZhan(uint64(e))
		}
	}
	if len(m.RecoverTimes) > 0 {
		for _, e := range m.RecoverTimes {
			n += 1 + sovBaiZhan(uint64(e))
		}
	}
	if m.MaxRecord != 0 {
		n += 1 + sovBaiZhan(uint64(m.MaxRecord))
	}
	if m.ShowRankCount != 0 {
		n += 1 + sovBaiZhan(uint64(m.ShowRankCount))
	}
	return n
}

func (m *JunXianLevelDataProto) Size() (n int) {
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovBaiZhan(uint64(m.Level))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBaiZhan(uint64(l))
	}
	if m.LevelUpPercent != 0 {
		n += 1 + sovBaiZhan(uint64(m.LevelUpPercent))
	}
	if m.LevelUpPoint != 0 {
		n += 1 + sovBaiZhan(uint64(m.LevelUpPoint))
	}
	if m.LevelDownPercent != 0 {
		n += 1 + sovBaiZhan(uint64(m.LevelDownPercent))
	}
	if m.LevelDownPoint != 0 {
		n += 1 + sovBaiZhan(uint64(m.LevelDownPoint))
	}
	if m.DailySalary != nil {
		l = m.DailySalary.Size()
		n += 1 + l + sovBaiZhan(uint64(l))
	}
	l = len(m.IconId)
	if l > 0 {
		n += 1 + l + sovBaiZhan(uint64(l))
	}
	if m.AssemblyStat != nil {
		l = m.AssemblyStat.Size()
		n += 1 + l + sovBaiZhan(uint64(l))
	}
	if m.DailyHufu != 0 {
		n += 1 + sovBaiZhan(uint64(m.DailyHufu))
	}
	return n
}

func (m *JunXianLevelPrizeProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBaiZhan(uint64(m.Id))
	}
	if m.Level != 0 {
		n += 1 + sovBaiZhan(uint64(m.Level))
	}
	if m.Point != 0 {
		n += 1 + sovBaiZhan(uint64(m.Point))
	}
	if m.Prize != nil {
		l = m.Prize.Size()
		n += 1 + l + sovBaiZhan(uint64(l))
	}
	return n
}

func (m *BaiZhanReplayProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovBaiZhan(uint64(l))
	}
	if m.Attacker != nil {
		l = m.Attacker.Size()
		n += 1 + l + sovBaiZhan(uint64(l))
	}
	if m.Defender != nil {
		l = m.Defender.Size()
		n += 1 + l + sovBaiZhan(uint64(l))
	}
	if m.IsDefenderNpc {
		n += 2
	}
	if m.IsAttackerWin {
		n += 2
	}
	if m.Time != 0 {
		n += 1 + sovBaiZhan(uint64(m.Time))
	}
	if m.AttackerShare != nil {
		l = m.AttackerShare.Size()
		n += 1 + l + sovBaiZhan(uint64(l))
	}
	if m.DefenderShare != nil {
		l = m.DefenderShare.Size()
		n += 1 + l + sovBaiZhan(uint64(l))
	}
	return n
}

func (m *CombatObjProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBaiZhan(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBaiZhan(uint64(l))
	}
	l = len(m.Guild)
	if l > 0 {
		n += 1 + l + sovBaiZhan(uint64(l))
	}
	l = len(m.Head)
	if l > 0 {
		n += 1 + l + sovBaiZhan(uint64(l))
	}
	if m.GuildId != 0 {
		n += 1 + sovBaiZhan(uint64(m.GuildId))
	}
	l = len(m.GuildFlagName)
	if l > 0 {
		n += 1 + l + sovBaiZhan(uint64(l))
	}
	if m.Male {
		n += 2
	}
	if m.FightAmount != 0 {
		n += 1 + sovBaiZhan(uint64(m.FightAmount))
	}
	if m.Level != 0 {
		n += 1 + sovBaiZhan(uint64(m.Level))
	}
	if m.Country != 0 {
		n += 1 + sovBaiZhan(uint64(m.Country))
	}
	if m.Hero != nil {
		l = m.Hero.Size()
		n += 1 + l + sovBaiZhan(uint64(l))
	}
	if len(m.Race) > 0 {
		for _, e := range m.Race {
			n += 1 + sovBaiZhan(uint64(e))
		}
	}
	return n
}

func (m *BaiZhanObjProto) Size() (n int) {
	var l int
	_ = l
	if m.ChallengeTimes != 0 {
		n += 1 + sovBaiZhan(uint64(m.ChallengeTimes))
	}
	if m.Point != 0 {
		n += 1 + sovBaiZhan(uint64(m.Point))
	}
	if m.IsCollectSalary {
		n += 2
	}
	if m.LastCollectedJunXianPrizeId != 0 {
		n += 1 + sovBaiZhan(uint64(m.LastCollectedJunXianPrizeId))
	}
	if m.JunXianLevel != 0 {
		n += 1 + sovBaiZhan(uint64(m.JunXianLevel))
	}
	if m.LastJunXianLevel != 0 {
		n += 1 + sovBaiZhan(uint64(m.LastJunXianLevel))
	}
	if m.HistoryMaxJunXianLevel != 0 {
		n += 1 + sovBaiZhan(uint64(m.HistoryMaxJunXianLevel))
	}
	if len(m.HistoryMaxPoints) > 0 {
		for _, e := range m.HistoryMaxPoints {
			n += 1 + sovBaiZhan(uint64(e))
		}
	}
	return n
}

func (m *BaiZhanRankObjProto) Size() (n int) {
	var l int
	_ = l
	if m.Basic != nil {
		l = m.Basic.Size()
		n += 1 + l + sovBaiZhan(uint64(l))
	}
	if m.Point != 0 {
		n += 1 + sovBaiZhan(uint64(m.Point))
	}
	if m.LevelChangeType != 0 {
		n += 1 + sovBaiZhan(uint64(m.LevelChangeType))
	}
	if m.FightAmount != 0 {
		n += 1 + sovBaiZhan(uint64(m.FightAmount))
	}
	return n
}

func sovBaiZhan(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBaiZhan(x uint64) (n int) {
	return sovBaiZhan(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BaiZhanMiscProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBaiZhan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaiZhanMiscProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaiZhanMiscProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinPoint", wireType)
			}
			m.WinPoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WinPoint |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailPoint", wireType)
			}
			m.FailPoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FailPoint |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBaiZhan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RecoverTimesTime = append(m.RecoverTimesTime, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBaiZhan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBaiZhan
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBaiZhan
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RecoverTimesTime = append(m.RecoverTimesTime, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RecoverTimesTime", wireType)
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBaiZhan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RecoverTimes = append(m.RecoverTimes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBaiZhan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBaiZhan
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBaiZhan
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RecoverTimes = append(m.RecoverTimes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RecoverTimes", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRecord", wireType)
			}
			m.MaxRecord = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRecord |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowRankCount", wireType)
			}
			m.ShowRankCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShowRankCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBaiZhan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBaiZhan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunXianLevelDataProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBaiZhan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JunXianLevelDataProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JunXianLevelDataProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBaiZhan
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelUpPercent", wireType)
			}
			m.LevelUpPercent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LevelUpPercent |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelUpPoint", wireType)
			}
			m.LevelUpPoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LevelUpPoint |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelDownPercent", wireType)
			}
			m.LevelDownPercent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LevelDownPercent |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelDownPoint", wireType)
			}
			m.LevelDownPoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LevelDownPoint |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DailySalary", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBaiZhan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DailySalary == nil {
				m.DailySalary = &PrizeProto{}
			}
			if err := m.DailySalary.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBaiZhan
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssemblyStat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBaiZhan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AssemblyStat == nil {
				m.AssemblyStat = &SpriteStatProto{}
			}
			if err := m.AssemblyStat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DailyHufu", wireType)
			}
			m.DailyHufu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DailyHufu |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBaiZhan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBaiZhan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JunXianLevelPrizeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBaiZhan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JunXianLevelPrizeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JunXianLevelPrizeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Point", wireType)
			}
			m.Point = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Point |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBaiZhan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Prize == nil {
				m.Prize = &PrizeProto{}
			}
			if err := m.Prize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBaiZhan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBaiZhan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BaiZhanReplayProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBaiZhan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaiZhanReplayProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaiZhanReplayProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBaiZhan
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attacker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBaiZhan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attacker == nil {
				m.Attacker = &CombatObjProto{}
			}
			if err := m.Attacker.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Defender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBaiZhan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Defender == nil {
				m.Defender = &CombatObjProto{}
			}
			if err := m.Defender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDefenderNpc", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDefenderNpc = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAttackerWin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAttackerWin = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackerShare", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBaiZhan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AttackerShare == nil {
				m.AttackerShare = &CombatShareProto{}
			}
			if err := m.AttackerShare.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefenderShare", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBaiZhan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefenderShare == nil {
				m.DefenderShare = &CombatShareProto{}
			}
			if err := m.DefenderShare.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBaiZhan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBaiZhan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CombatObjProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBaiZhan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CombatObjProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CombatObjProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBaiZhan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBaiZhan
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Guild", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBaiZhan
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Guild = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBaiZhan
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Head = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildId", wireType)
			}
			m.GuildId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuildId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildFlagName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBaiZhan
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildFlagName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Male", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Male = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FightAmount", wireType)
			}
			m.FightAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FightAmount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			m.Country = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Country |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hero", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBaiZhan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hero == nil {
				m.Hero = &HeroBasicProto{}
			}
			if err := m.Hero.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType == 0 {
				var v Race
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBaiZhan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (Race(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Race = append(m.Race, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBaiZhan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBaiZhan
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v Race
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBaiZhan
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (Race(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Race = append(m.Race, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Race", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBaiZhan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBaiZhan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BaiZhanObjProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBaiZhan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaiZhanObjProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaiZhanObjProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeTimes", wireType)
			}
			m.ChallengeTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Point", wireType)
			}
			m.Point = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Point |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCollectSalary", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsCollectSalary = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastCollectedJunXianPrizeId", wireType)
			}
			m.LastCollectedJunXianPrizeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastCollectedJunXianPrizeId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JunXianLevel", wireType)
			}
			m.JunXianLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JunXianLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastJunXianLevel", wireType)
			}
			m.LastJunXianLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastJunXianLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryMaxJunXianLevel", wireType)
			}
			m.HistoryMaxJunXianLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HistoryMaxJunXianLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBaiZhan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.HistoryMaxPoints = append(m.HistoryMaxPoints, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBaiZhan
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBaiZhan
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBaiZhan
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.HistoryMaxPoints = append(m.HistoryMaxPoints, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryMaxPoints", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBaiZhan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBaiZhan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BaiZhanRankObjProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBaiZhan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaiZhanRankObjProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaiZhanRankObjProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Basic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBaiZhan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Basic == nil {
				m.Basic = &HeroBasicProto{}
			}
			if err := m.Basic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Point", wireType)
			}
			m.Point = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Point |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelChangeType", wireType)
			}
			m.LevelChangeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LevelChangeType |= (LevelChangeType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FightAmount", wireType)
			}
			m.FightAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FightAmount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBaiZhan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBaiZhan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBaiZhan(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBaiZhan
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBaiZhan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBaiZhan
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBaiZhan
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBaiZhan(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBaiZhan = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBaiZhan   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/pb/shared_proto/bai_zhan.proto", fileDescriptorBaiZhan)
}

var fileDescriptorBaiZhan = []byte{
	// 1134 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xdd, 0x6e, 0x1b, 0xc5,
	0x17, 0x8f, 0xbf, 0x12, 0xfb, 0xf8, 0x33, 0xd3, 0x36, 0x5d, 0xa5, 0xff, 0x46, 0xf9, 0x1b, 0x44,
	0x42, 0x80, 0xa4, 0x84, 0x0a, 0x10, 0x48, 0xa0, 0x3a, 0x09, 0x4a, 0x20, 0x4d, 0xad, 0x4d, 0x4b,
	0x51, 0x6f, 0x46, 0xe3, 0xdd, 0xb1, 0x77, 0xe2, 0xf5, 0xec, 0x6a, 0x77, 0x5d, 0xc7, 0x95, 0xb8,
	0xe5, 0x09, 0xb8, 0xe0, 0x6d, 0xb8, 0xe5, 0x92, 0x47, 0x40, 0xe1, 0x05, 0x10, 0xd7, 0x5c, 0xa0,
	0x39, 0x33, 0xbb, 0xb6, 0x53, 0x22, 0xe8, 0x8d, 0x77, 0xe7, 0x77, 0x7e, 0xe7, 0x63, 0xce, 0xd7,
	0x1a, 0x3e, 0x1d, 0x88, 0xc4, 0x1b, 0xf7, 0x76, 0x9d, 0x60, 0xb4, 0xe7, 0x8b, 0x81, 0x97, 0x84,
	0x6c, 0xb2, 0x37, 0x62, 0x3e, 0xff, 0x64, 0x2f, 0xec, 0xed, 0xc5, 0x1e, 0x8b, 0xb8, 0x4b, 0xc3,
	0x28, 0x48, 0x82, 0xbd, 0x1e, 0x13, 0xf4, 0x95, 0xc7, 0xe4, 0x2e, 0x1e, 0x49, 0x09, 0x1f, 0xeb,
	0x0f, 0xdf, 0xc4, 0x40, 0xcc, 0xb5, 0xf2, 0xfa, 0xc7, 0xff, 0x5d, 0xcb, 0x09, 0x46, 0x3d, 0x96,
	0x18, 0xbd, 0x37, 0x08, 0x37, 0x96, 0x2c, 0x8c, 0xbd, 0xc0, 0x68, 0xb6, 0xff, 0xc8, 0x41, 0xab,
	0xc3, 0xc4, 0x0b, 0x8f, 0xc9, 0xc7, 0x22, 0x76, 0xba, 0x78, 0x87, 0x7b, 0x50, 0x99, 0x08, 0x49,
	0xc3, 0x40, 0xc8, 0xc4, 0xca, 0x6d, 0xe6, 0xb6, 0x4b, 0x76, 0x79, 0x22, 0x64, 0x57, 0x9d, 0xc9,
	0x7d, 0x80, 0x3e, 0x13, 0xbe, 0x91, 0xe6, 0x51, 0x5a, 0x51, 0x88, 0x16, 0x3f, 0x00, 0x12, 0x71,
	0x27, 0x78, 0xc9, 0x23, 0x9a, 0x88, 0x11, 0x8f, 0xf1, 0xd7, 0x2a, 0x6c, 0x16, 0xb6, 0x4b, 0x9d,
	0x7c, 0x6b, 0xc9, 0x6e, 0x19, 0xe9, 0x53, 0x25, 0x54, 0x3f, 0x64, 0x0b, 0xea, 0x0b, 0x1a, 0x56,
	0x31, 0x23, 0xd7, 0xe6, 0xc9, 0xca, 0xf3, 0x88, 0x5d, 0x52, 0x85, 0x45, 0xae, 0x55, 0xd2, 0x9e,
	0x47, 0xec, 0xd2, 0x46, 0x80, 0xbc, 0x03, 0xcd, 0xd8, 0x0b, 0x26, 0x34, 0x62, 0x72, 0x48, 0x9d,
	0x60, 0x2c, 0x13, 0x6b, 0x05, 0x39, 0x75, 0x05, 0xdb, 0x4c, 0x0e, 0x0f, 0x14, 0xd8, 0xfe, 0xb1,
	0x00, 0x77, 0xbe, 0x1e, 0xcb, 0xef, 0x04, 0x93, 0xa7, 0xfc, 0x25, 0xf7, 0x0f, 0x59, 0xc2, 0xf4,
	0xbd, 0x6f, 0x43, 0xc9, 0x57, 0x88, 0xb9, 0xb3, 0x3e, 0x10, 0x02, 0x45, 0xc9, 0x46, 0x1c, 0xaf,
	0x5a, 0xb1, 0xf1, 0x9d, 0x6c, 0x43, 0x0b, 0x85, 0x74, 0x1c, 0xd2, 0x90, 0x47, 0x0e, 0x97, 0x89,
	0x55, 0x40, 0xa5, 0x06, 0xe2, 0xcf, 0xc2, 0xae, 0x46, 0xc9, 0xdb, 0xd0, 0x98, 0x31, 0x31, 0x65,
	0x45, 0xe4, 0xd5, 0x52, 0x1e, 0x66, 0xed, 0x7d, 0x20, 0x9a, 0xe5, 0x06, 0x13, 0x99, 0x59, 0xd4,
	0x57, 0xd4, 0x9e, 0x0e, 0x83, 0x89, 0x4c, 0x6d, 0x66, 0xde, 0x35, 0x1b, 0xad, 0x2e, 0xcf, 0x79,
	0x47, 0x2e, 0xda, 0x7d, 0x08, 0x35, 0x97, 0x09, 0x7f, 0x4a, 0x63, 0xe6, 0xb3, 0x68, 0x8a, 0x09,
	0xa9, 0xee, 0xaf, 0xea, 0xe2, 0xef, 0x76, 0x23, 0xf1, 0x8a, 0xe3, 0xd5, 0xed, 0x2a, 0xd2, 0xce,
	0x91, 0x45, 0xee, 0xc2, 0x8a, 0x70, 0x02, 0x49, 0x85, 0x6b, 0x95, 0xf1, 0xd2, 0xcb, 0xea, 0x78,
	0xe2, 0x92, 0xcf, 0xa1, 0xce, 0xe2, 0x98, 0x8f, 0x7a, 0xca, 0x62, 0xc2, 0x12, 0xab, 0x82, 0xf6,
	0xd6, 0x8c, 0xbd, 0xf3, 0x30, 0x12, 0x09, 0x3f, 0x4f, 0x58, 0xa2, 0x8d, 0xd6, 0x52, 0xb2, 0x82,
	0x54, 0xf9, 0x74, 0x2c, 0xde, 0xb8, 0x3f, 0xb6, 0x40, 0x97, 0x0f, 0x91, 0xe3, 0x71, 0x7f, 0xdc,
	0xfe, 0x1e, 0xd6, 0xe6, 0xab, 0x32, 0x8b, 0x8d, 0x34, 0x20, 0x2f, 0x5c, 0x53, 0x93, 0xbc, 0x70,
	0x67, 0x65, 0xca, 0xcf, 0x97, 0xe9, 0x36, 0x94, 0x74, 0x26, 0x74, 0x1d, 0xf4, 0x81, 0x6c, 0x41,
	0x29, 0x54, 0x96, 0x30, 0xeb, 0xff, 0x78, 0x73, 0x2d, 0x6f, 0xff, 0x99, 0x07, 0x62, 0x06, 0xc1,
	0xe6, 0xa1, 0xcf, 0xa6, 0xda, 0x37, 0x81, 0xa2, 0x2f, 0xe4, 0x10, 0xbd, 0x57, 0x6c, 0x7c, 0x27,
	0x1f, 0x42, 0x99, 0x25, 0x09, 0x73, 0x86, 0x3c, 0xc2, 0x10, 0xaa, 0xfb, 0x77, 0x8c, 0xd9, 0x03,
	0x1c, 0xca, 0x27, 0xbd, 0x0b, 0x6d, 0x3a, 0xa3, 0x29, 0x15, 0x97, 0xf7, 0xb9, 0x74, 0x79, 0x84,
	0xf1, 0xdd, 0xac, 0x92, 0xd2, 0x54, 0x3b, 0x8b, 0x98, 0xa6, 0x47, 0x2a, 0x43, 0x07, 0xef, 0x50,
	0xb6, 0xeb, 0x22, 0x3e, 0x34, 0xe8, 0x59, 0xe8, 0x18, 0x5e, 0xea, 0x89, 0x4e, 0x84, 0xc4, 0xbe,
	0x41, 0xde, 0x23, 0x83, 0x3e, 0x17, 0x52, 0xdd, 0x04, 0x47, 0x51, 0x37, 0x0a, 0xbe, 0x93, 0x2f,
	0xa0, 0x91, 0x29, 0xe2, 0x96, 0x30, 0x0d, 0x72, 0x77, 0x21, 0xb8, 0x73, 0x25, 0xd1, 0xe1, 0xd5,
	0x53, 0x3a, 0x62, 0x4a, 0x3f, 0x0b, 0x50, 0xeb, 0x97, 0xff, 0x45, 0x3f, 0xa5, 0x23, 0xd6, 0xfe,
	0x2b, 0x0f, 0x8d, 0xc5, 0x04, 0x10, 0x92, 0x15, 0xbb, 0xd6, 0xc9, 0x5b, 0x39, 0x2c, 0xf8, 0xda,
	0xfc, 0x04, 0x22, 0xaa, 0xa7, 0xd0, 0x82, 0xd2, 0x60, 0x2c, 0x7c, 0x17, 0x53, 0xaa, 0x05, 0x1a,
	0x50, 0x1a, 0x1e, 0x67, 0x2e, 0x66, 0xcc, 0x68, 0xa8, 0x33, 0xb9, 0x0f, 0x65, 0x24, 0xa8, 0xd6,
	0xc6, 0xe9, 0x42, 0xd9, 0x0a, 0x62, 0x27, 0x2e, 0xd9, 0x81, 0xa6, 0x16, 0xf7, 0x7d, 0x36, 0xa0,
	0xe8, 0x73, 0x39, 0xb3, 0x50, 0x47, 0xd1, 0x57, 0x3e, 0x1b, 0x9c, 0x29, 0xe7, 0x6b, 0x50, 0x54,
	0x1b, 0x16, 0x33, 0x56, 0xd6, 0x2e, 0xd4, 0x99, 0xfc, 0x1f, 0x6a, 0x7d, 0xb5, 0x82, 0x29, 0x1b,
	0xe1, 0x0e, 0x2a, 0x63, 0xbe, 0xab, 0x88, 0x3d, 0x42, 0x48, 0xc5, 0xad, 0x1b, 0xb8, 0x92, 0x85,
	0x60, 0x9a, 0xf8, 0x7f, 0xb0, 0x82, 0x9b, 0x2b, 0x9a, 0xea, 0x01, 0xd1, 0xe1, 0x19, 0x88, 0xbc,
	0xab, 0x6e, 0x15, 0x05, 0x56, 0x75, 0xa1, 0x83, 0x8e, 0x79, 0x14, 0x74, 0x58, 0x2c, 0xf4, 0xf2,
	0xb6, 0x91, 0x42, 0xde, 0x82, 0x62, 0xc4, 0x1c, 0x6e, 0xd5, 0x36, 0x0b, 0xdb, 0x8d, 0xfd, 0xaa,
	0xa1, 0xda, 0xcc, 0xe1, 0xb8, 0x58, 0x51, 0xd8, 0xfe, 0xa1, 0x00, 0x4d, 0xd3, 0xf3, 0x59, 0xfe,
	0xb7, 0xa0, 0xe9, 0x78, 0xcc, 0xf7, 0xb9, 0x1c, 0x70, 0xb3, 0x8f, 0xf5, 0xe4, 0x35, 0x32, 0x58,
	0x6f, 0xe3, 0x6c, 0xde, 0xf2, 0xf3, 0xf3, 0xb6, 0x03, 0xab, 0x22, 0xa6, 0x4e, 0xe0, 0xfb, 0xdc,
	0x49, 0xd2, 0xad, 0x53, 0xc0, 0x7e, 0x6c, 0x8a, 0xf8, 0x40, 0xe3, 0x66, 0xcd, 0x1c, 0xc1, 0xa6,
	0xcf, 0xe2, 0x24, 0x65, 0x73, 0x97, 0x5e, 0x8c, 0x25, 0xbd, 0x14, 0x4c, 0x52, 0x9c, 0x49, 0x55,
	0x24, 0xbd, 0x2c, 0xef, 0x29, 0xde, 0x41, 0x4a, 0x33, 0x6b, 0x02, 0x67, 0xf8, 0xc4, 0x55, 0x1b,
	0x36, 0xd3, 0xd3, 0x69, 0xd5, 0x7b, 0xb3, 0x76, 0x31, 0xb7, 0x4e, 0xc8, 0x07, 0x70, 0x0b, 0x9d,
	0x5d, 0xa3, 0x2e, 0x9b, 0x15, 0xcb, 0xe2, 0x64, 0x7e, 0xfb, 0x90, 0xcf, 0x60, 0xdd, 0x13, 0x71,
	0x12, 0x44, 0x53, 0xaa, 0xbe, 0x39, 0xd7, 0xb4, 0xf4, 0x77, 0x65, 0xcd, 0x30, 0x1e, 0xb3, 0xcb,
	0x05, 0xdd, 0x07, 0x40, 0xe6, 0x75, 0x31, 0x31, 0xb1, 0x55, 0x9e, 0x7d, 0x02, 0x67, 0x7a, 0xb8,
	0xa5, 0xe3, 0xf6, 0xcf, 0x39, 0xb8, 0x95, 0x2e, 0x1f, 0x26, 0x87, 0x59, 0x31, 0xde, 0x83, 0x52,
	0x4f, 0x55, 0x16, 0x4b, 0x70, 0x63, 0xc5, 0x35, 0xe7, 0x86, 0x82, 0x74, 0x60, 0x55, 0x7f, 0x2b,
	0x1c, 0x8f, 0x61, 0x49, 0xa7, 0x21, 0xc7, 0x82, 0x34, 0xb2, 0xb5, 0x8d, 0x51, 0x1f, 0xa0, 0xf8,
	0xe9, 0x34, 0xe4, 0x76, 0xd3, 0x5f, 0x04, 0x5e, 0x6b, 0xe9, 0xe2, 0x6b, 0x2d, 0xbd, 0xf3, 0x25,
	0x34, 0xaf, 0x99, 0x21, 0x35, 0x28, 0x9f, 0x1e, 0x7d, 0x7b, 0x74, 0x4a, 0x9f, 0x75, 0x5b, 0x4b,
	0xa4, 0x01, 0xa0, 0x4f, 0xdf, 0x1c, 0x1d, 0x75, 0x5b, 0xb9, 0xd9, 0xf9, 0xf0, 0xc9, 0xf3, 0xb3,
	0x56, 0xbe, 0xb3, 0xf9, 0xcb, 0xd5, 0x46, 0xee, 0xd7, 0xab, 0x8d, 0xdc, 0x6f, 0x57, 0x1b, 0xb9,
	0x9f, 0x7e, 0xdf, 0x58, 0x3a, 0xce, 0xbd, 0xa8, 0xcd, 0xff, 0x73, 0xe9, 0x2d, 0xe3, 0xe3, 0xa3,
	0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xbb, 0xef, 0x3b, 0x10, 0x9c, 0x09, 0x00, 0x00,
}
