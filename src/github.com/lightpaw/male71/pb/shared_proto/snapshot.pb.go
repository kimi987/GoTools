// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/pb/shared_proto/snapshot.proto
// DO NOT EDIT!

package shared_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type HeroBasicSnapshotProto struct {
	Basic                     *HeroBasicProto `protobuf:"bytes,100,opt,name=basic" json:"basic,omitempty"`
	BaseRegion                int32           `protobuf:"varint,21,opt,name=base_region,json=baseRegion,proto3" json:"base_region,omitempty"`
	BaseLevel                 int32           `protobuf:"varint,22,opt,name=base_level,json=baseLevel,proto3" json:"base_level,omitempty"`
	BaseX                     int32           `protobuf:"varint,23,opt,name=base_x,json=baseX,proto3" json:"base_x,omitempty"`
	BaseY                     int32           `protobuf:"varint,24,opt,name=base_y,json=baseY,proto3" json:"base_y,omitempty"`
	FightAmount               int32           `protobuf:"varint,25,opt,name=fight_amount,json=fightAmount,proto3" json:"fight_amount,omitempty"`
	Prosperity                int32           `protobuf:"varint,26,opt,name=prosperity,proto3" json:"prosperity,omitempty"`
	TowerMaxFloor             int32           `protobuf:"varint,35,opt,name=tower_max_floor,json=towerMaxFloor,proto3" json:"tower_max_floor,omitempty"`
	JunXianLevel              int32           `protobuf:"varint,36,opt,name=jun_xian_level,json=junXianLevel,proto3" json:"jun_xian_level,omitempty"`
	LastOfflineTime           int32           `protobuf:"varint,40,opt,name=last_offline_time,json=lastOfflineTime,proto3" json:"last_offline_time,omitempty"`
	SecretTowerMaxOpenId      int32           `protobuf:"varint,41,opt,name=secret_tower_max_open_id,json=secretTowerMaxOpenId,proto3" json:"secret_tower_max_open_id,omitempty"`
	SecretTowerChallengeTimes int32           `protobuf:"varint,42,opt,name=secret_tower_challenge_times,json=secretTowerChallengeTimes,proto3" json:"secret_tower_challenge_times,omitempty"`
	SecretTowerHelpTimes      int32           `protobuf:"varint,43,opt,name=secret_tower_help_times,json=secretTowerHelpTimes,proto3" json:"secret_tower_help_times,omitempty"`
}

func (m *HeroBasicSnapshotProto) Reset()                    { *m = HeroBasicSnapshotProto{} }
func (m *HeroBasicSnapshotProto) String() string            { return proto.CompactTextString(m) }
func (*HeroBasicSnapshotProto) ProtoMessage()               {}
func (*HeroBasicSnapshotProto) Descriptor() ([]byte, []int) { return fileDescriptorSnapshot, []int{0} }

func (m *HeroBasicSnapshotProto) GetBasic() *HeroBasicProto {
	if m != nil {
		return m.Basic
	}
	return nil
}

func (m *HeroBasicSnapshotProto) GetBaseRegion() int32 {
	if m != nil {
		return m.BaseRegion
	}
	return 0
}

func (m *HeroBasicSnapshotProto) GetBaseLevel() int32 {
	if m != nil {
		return m.BaseLevel
	}
	return 0
}

func (m *HeroBasicSnapshotProto) GetBaseX() int32 {
	if m != nil {
		return m.BaseX
	}
	return 0
}

func (m *HeroBasicSnapshotProto) GetBaseY() int32 {
	if m != nil {
		return m.BaseY
	}
	return 0
}

func (m *HeroBasicSnapshotProto) GetFightAmount() int32 {
	if m != nil {
		return m.FightAmount
	}
	return 0
}

func (m *HeroBasicSnapshotProto) GetProsperity() int32 {
	if m != nil {
		return m.Prosperity
	}
	return 0
}

func (m *HeroBasicSnapshotProto) GetTowerMaxFloor() int32 {
	if m != nil {
		return m.TowerMaxFloor
	}
	return 0
}

func (m *HeroBasicSnapshotProto) GetJunXianLevel() int32 {
	if m != nil {
		return m.JunXianLevel
	}
	return 0
}

func (m *HeroBasicSnapshotProto) GetLastOfflineTime() int32 {
	if m != nil {
		return m.LastOfflineTime
	}
	return 0
}

func (m *HeroBasicSnapshotProto) GetSecretTowerMaxOpenId() int32 {
	if m != nil {
		return m.SecretTowerMaxOpenId
	}
	return 0
}

func (m *HeroBasicSnapshotProto) GetSecretTowerChallengeTimes() int32 {
	if m != nil {
		return m.SecretTowerChallengeTimes
	}
	return 0
}

func (m *HeroBasicSnapshotProto) GetSecretTowerHelpTimes() int32 {
	if m != nil {
		return m.SecretTowerHelpTimes
	}
	return 0
}

type HeroBasicProto struct {
	Id            []byte              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Head          string              `protobuf:"bytes,3,opt,name=head,proto3" json:"head,omitempty"`
	Level         int32               `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
	VipLevel      int32               `protobuf:"varint,7,opt,name=vip_level,json=vipLevel,proto3" json:"vip_level,omitempty"`
	Male          bool                `protobuf:"varint,5,opt,name=male,proto3" json:"male,omitempty"`
	Location      int32               `protobuf:"varint,6,opt,name=location,proto3" json:"location,omitempty"`
	Body          int32               `protobuf:"varint,8,opt,name=body,proto3" json:"body,omitempty"`
	GuildId       int32               `protobuf:"varint,31,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	GuildName     string              `protobuf:"bytes,32,opt,name=guild_name,json=guildName,proto3" json:"guild_name,omitempty"`
	GuildFlagName string              `protobuf:"bytes,33,opt,name=guild_flag_name,json=guildFlagName,proto3" json:"guild_flag_name,omitempty"`
	CountryId     int32               `protobuf:"varint,34,opt,name=country_id,json=countryId,proto3" json:"country_id,omitempty"`
	Official      CountryOfficialType `protobuf:"varint,35,opt,name=official,proto3,enum=proto.CountryOfficialType" json:"official,omitempty"`
}

func (m *HeroBasicProto) Reset()                    { *m = HeroBasicProto{} }
func (m *HeroBasicProto) String() string            { return proto.CompactTextString(m) }
func (*HeroBasicProto) ProtoMessage()               {}
func (*HeroBasicProto) Descriptor() ([]byte, []int) { return fileDescriptorSnapshot, []int{1} }

func (m *HeroBasicProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *HeroBasicProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HeroBasicProto) GetHead() string {
	if m != nil {
		return m.Head
	}
	return ""
}

func (m *HeroBasicProto) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *HeroBasicProto) GetVipLevel() int32 {
	if m != nil {
		return m.VipLevel
	}
	return 0
}

func (m *HeroBasicProto) GetMale() bool {
	if m != nil {
		return m.Male
	}
	return false
}

func (m *HeroBasicProto) GetLocation() int32 {
	if m != nil {
		return m.Location
	}
	return 0
}

func (m *HeroBasicProto) GetBody() int32 {
	if m != nil {
		return m.Body
	}
	return 0
}

func (m *HeroBasicProto) GetGuildId() int32 {
	if m != nil {
		return m.GuildId
	}
	return 0
}

func (m *HeroBasicProto) GetGuildName() string {
	if m != nil {
		return m.GuildName
	}
	return ""
}

func (m *HeroBasicProto) GetGuildFlagName() string {
	if m != nil {
		return m.GuildFlagName
	}
	return ""
}

func (m *HeroBasicProto) GetCountryId() int32 {
	if m != nil {
		return m.CountryId
	}
	return 0
}

func (m *HeroBasicProto) GetOfficial() CountryOfficialType {
	if m != nil {
		return m.Official
	}
	return CountryOfficialType_COT_NO_OFFICIAL
}

func init() {
	proto.RegisterType((*HeroBasicSnapshotProto)(nil), "proto.HeroBasicSnapshotProto")
	proto.RegisterType((*HeroBasicProto)(nil), "proto.HeroBasicProto")
}
func (m *HeroBasicSnapshotProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeroBasicSnapshotProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BaseRegion != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSnapshot(dAtA, i, uint64(m.BaseRegion))
	}
	if m.BaseLevel != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSnapshot(dAtA, i, uint64(m.BaseLevel))
	}
	if m.BaseX != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSnapshot(dAtA, i, uint64(m.BaseX))
	}
	if m.BaseY != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSnapshot(dAtA, i, uint64(m.BaseY))
	}
	if m.FightAmount != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSnapshot(dAtA, i, uint64(m.FightAmount))
	}
	if m.Prosperity != 0 {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSnapshot(dAtA, i, uint64(m.Prosperity))
	}
	if m.TowerMaxFloor != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintSnapshot(dAtA, i, uint64(m.TowerMaxFloor))
	}
	if m.JunXianLevel != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintSnapshot(dAtA, i, uint64(m.JunXianLevel))
	}
	if m.LastOfflineTime != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintSnapshot(dAtA, i, uint64(m.LastOfflineTime))
	}
	if m.SecretTowerMaxOpenId != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintSnapshot(dAtA, i, uint64(m.SecretTowerMaxOpenId))
	}
	if m.SecretTowerChallengeTimes != 0 {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintSnapshot(dAtA, i, uint64(m.SecretTowerChallengeTimes))
	}
	if m.SecretTowerHelpTimes != 0 {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintSnapshot(dAtA, i, uint64(m.SecretTowerHelpTimes))
	}
	if m.Basic != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintSnapshot(dAtA, i, uint64(m.Basic.Size()))
		n1, err := m.Basic.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *HeroBasicProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeroBasicProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSnapshot(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSnapshot(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Head) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSnapshot(dAtA, i, uint64(len(m.Head)))
		i += copy(dAtA[i:], m.Head)
	}
	if m.Level != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSnapshot(dAtA, i, uint64(m.Level))
	}
	if m.Male {
		dAtA[i] = 0x28
		i++
		if m.Male {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Location != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSnapshot(dAtA, i, uint64(m.Location))
	}
	if m.VipLevel != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintSnapshot(dAtA, i, uint64(m.VipLevel))
	}
	if m.Body != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintSnapshot(dAtA, i, uint64(m.Body))
	}
	if m.GuildId != 0 {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSnapshot(dAtA, i, uint64(m.GuildId))
	}
	if len(m.GuildName) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintSnapshot(dAtA, i, uint64(len(m.GuildName)))
		i += copy(dAtA[i:], m.GuildName)
	}
	if len(m.GuildFlagName) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintSnapshot(dAtA, i, uint64(len(m.GuildFlagName)))
		i += copy(dAtA[i:], m.GuildFlagName)
	}
	if m.CountryId != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintSnapshot(dAtA, i, uint64(m.CountryId))
	}
	if m.Official != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintSnapshot(dAtA, i, uint64(m.Official))
	}
	return i, nil
}

func encodeFixed64Snapshot(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Snapshot(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintSnapshot(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *HeroBasicSnapshotProto) Size() (n int) {
	var l int
	_ = l
	if m.BaseRegion != 0 {
		n += 2 + sovSnapshot(uint64(m.BaseRegion))
	}
	if m.BaseLevel != 0 {
		n += 2 + sovSnapshot(uint64(m.BaseLevel))
	}
	if m.BaseX != 0 {
		n += 2 + sovSnapshot(uint64(m.BaseX))
	}
	if m.BaseY != 0 {
		n += 2 + sovSnapshot(uint64(m.BaseY))
	}
	if m.FightAmount != 0 {
		n += 2 + sovSnapshot(uint64(m.FightAmount))
	}
	if m.Prosperity != 0 {
		n += 2 + sovSnapshot(uint64(m.Prosperity))
	}
	if m.TowerMaxFloor != 0 {
		n += 2 + sovSnapshot(uint64(m.TowerMaxFloor))
	}
	if m.JunXianLevel != 0 {
		n += 2 + sovSnapshot(uint64(m.JunXianLevel))
	}
	if m.LastOfflineTime != 0 {
		n += 2 + sovSnapshot(uint64(m.LastOfflineTime))
	}
	if m.SecretTowerMaxOpenId != 0 {
		n += 2 + sovSnapshot(uint64(m.SecretTowerMaxOpenId))
	}
	if m.SecretTowerChallengeTimes != 0 {
		n += 2 + sovSnapshot(uint64(m.SecretTowerChallengeTimes))
	}
	if m.SecretTowerHelpTimes != 0 {
		n += 2 + sovSnapshot(uint64(m.SecretTowerHelpTimes))
	}
	if m.Basic != nil {
		l = m.Basic.Size()
		n += 2 + l + sovSnapshot(uint64(l))
	}
	return n
}

func (m *HeroBasicProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSnapshot(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSnapshot(uint64(l))
	}
	l = len(m.Head)
	if l > 0 {
		n += 1 + l + sovSnapshot(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovSnapshot(uint64(m.Level))
	}
	if m.Male {
		n += 2
	}
	if m.Location != 0 {
		n += 1 + sovSnapshot(uint64(m.Location))
	}
	if m.VipLevel != 0 {
		n += 1 + sovSnapshot(uint64(m.VipLevel))
	}
	if m.Body != 0 {
		n += 1 + sovSnapshot(uint64(m.Body))
	}
	if m.GuildId != 0 {
		n += 2 + sovSnapshot(uint64(m.GuildId))
	}
	l = len(m.GuildName)
	if l > 0 {
		n += 2 + l + sovSnapshot(uint64(l))
	}
	l = len(m.GuildFlagName)
	if l > 0 {
		n += 2 + l + sovSnapshot(uint64(l))
	}
	if m.CountryId != 0 {
		n += 2 + sovSnapshot(uint64(m.CountryId))
	}
	if m.Official != 0 {
		n += 2 + sovSnapshot(uint64(m.Official))
	}
	return n
}

func sovSnapshot(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSnapshot(x uint64) (n int) {
	return sovSnapshot(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HeroBasicSnapshotProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnapshot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroBasicSnapshotProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroBasicSnapshotProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseRegion", wireType)
			}
			m.BaseRegion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaseRegion |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseLevel", wireType)
			}
			m.BaseLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaseLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseX", wireType)
			}
			m.BaseX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaseX |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseY", wireType)
			}
			m.BaseY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaseY |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FightAmount", wireType)
			}
			m.FightAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FightAmount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prosperity", wireType)
			}
			m.Prosperity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Prosperity |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TowerMaxFloor", wireType)
			}
			m.TowerMaxFloor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TowerMaxFloor |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 36:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JunXianLevel", wireType)
			}
			m.JunXianLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JunXianLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastOfflineTime", wireType)
			}
			m.LastOfflineTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastOfflineTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 41:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretTowerMaxOpenId", wireType)
			}
			m.SecretTowerMaxOpenId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SecretTowerMaxOpenId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 42:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretTowerChallengeTimes", wireType)
			}
			m.SecretTowerChallengeTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SecretTowerChallengeTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 43:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecretTowerHelpTimes", wireType)
			}
			m.SecretTowerHelpTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SecretTowerHelpTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Basic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnapshot
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Basic == nil {
				m.Basic = &HeroBasicProto{}
			}
			if err := m.Basic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnapshot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnapshot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeroBasicProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnapshot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroBasicProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroBasicProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSnapshot
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnapshot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnapshot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Head = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Male", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Male = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			m.Location = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Location |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipLevel", wireType)
			}
			m.VipLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			m.Body = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Body |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildId", wireType)
			}
			m.GuildId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuildId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnapshot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildFlagName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnapshot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildFlagName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryId", wireType)
			}
			m.CountryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountryId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Official", wireType)
			}
			m.Official = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Official |= (CountryOfficialType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSnapshot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnapshot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSnapshot(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSnapshot
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSnapshot
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSnapshot
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSnapshot(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSnapshot = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSnapshot   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/pb/shared_proto/snapshot.proto", fileDescriptorSnapshot)
}

var fileDescriptorSnapshot = []byte{
	// 625 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xdf, 0x4e, 0xd4, 0x40,
	0x14, 0xc6, 0xed, 0xca, 0xc2, 0xee, 0x61, 0x59, 0xe2, 0x84, 0x3f, 0xc3, 0x2a, 0x4b, 0x41, 0x42,
	0x56, 0x48, 0xd8, 0x04, 0x15, 0xbd, 0x33, 0x42, 0x42, 0x20, 0x41, 0x31, 0x95, 0x0b, 0xf4, 0xa6,
	0x99, 0x6d, 0xa7, 0xed, 0x90, 0x69, 0x67, 0xd2, 0x76, 0x61, 0xf7, 0x4d, 0xbc, 0xf4, 0x71, 0xbc,
	0xf4, 0x11, 0x0c, 0xbe, 0x84, 0x97, 0x66, 0xce, 0x94, 0x05, 0xe2, 0x8d, 0x57, 0x9d, 0xf3, 0xfb,
	0xbe, 0x73, 0xe6, 0x74, 0xe6, 0x0c, 0xbc, 0x8d, 0x45, 0x99, 0x0c, 0x07, 0xbb, 0x81, 0x4a, 0xfb,
	0x52, 0xc4, 0x49, 0xa9, 0xd9, 0x75, 0x3f, 0x65, 0x92, 0xbf, 0xe9, 0xeb, 0x41, 0xbf, 0x48, 0x58,
	0xce, 0x43, 0x5f, 0xe7, 0xaa, 0x54, 0xfd, 0x22, 0x63, 0xba, 0x48, 0x54, 0xb9, 0x8b, 0x21, 0xa9,
	0xe3, 0xa7, 0xf3, 0xea, 0xff, 0x0b, 0x0c, 0x58, 0xc1, 0x6d, 0xf2, 0xc6, 0xf7, 0x29, 0x58, 0x3a,
	0xe6, 0xb9, 0x3a, 0x60, 0x85, 0x08, 0x3e, 0x57, 0x85, 0x3f, 0x61, 0xdd, 0x35, 0x98, 0x35, 0x46,
	0x3f, 0xe7, 0xb1, 0x50, 0x19, 0x5d, 0x74, 0x9d, 0x5e, 0xdd, 0x03, 0x83, 0x3c, 0x24, 0x64, 0x15,
	0x30, 0xf2, 0x25, 0xbf, 0xe2, 0x92, 0x2e, 0xa1, 0xde, 0x34, 0xe4, 0xd4, 0x00, 0xb2, 0x08, 0xd3,
	0x28, 0x8f, 0xe8, 0x32, 0x4a, 0x75, 0x13, 0x5d, 0x4c, 0xf0, 0x98, 0xd2, 0x3b, 0xfc, 0x85, 0xac,
	0x43, 0x2b, 0x32, 0x5d, 0xfb, 0x2c, 0x55, 0xc3, 0xac, 0xa4, 0x2b, 0x28, 0xce, 0x22, 0x7b, 0x8f,
	0x88, 0x74, 0x01, 0x74, 0xae, 0x0a, 0xcd, 0x73, 0x51, 0x8e, 0x69, 0xc7, 0xf6, 0x73, 0x47, 0xc8,
	0x16, 0xcc, 0x97, 0xea, 0x9a, 0xe7, 0x7e, 0xca, 0x46, 0x7e, 0x24, 0x95, 0xca, 0xe9, 0x73, 0x34,
	0xcd, 0x21, 0xfe, 0xc0, 0x46, 0x47, 0x06, 0x92, 0x4d, 0x68, 0x5f, 0x0e, 0x33, 0x7f, 0x24, 0x58,
	0x56, 0xf5, 0xbe, 0x89, 0xb6, 0xd6, 0xe5, 0x30, 0xbb, 0x10, 0x2c, 0xb3, 0xed, 0x6f, 0xc3, 0x13,
	0xc9, 0x8a, 0xd2, 0x57, 0x51, 0x24, 0x45, 0xc6, 0xfd, 0x52, 0xa4, 0x9c, 0xf6, 0xd0, 0x38, 0x6f,
	0x84, 0x33, 0xcb, 0xcf, 0x45, 0xca, 0xc9, 0x3e, 0xd0, 0x82, 0x07, 0x39, 0x2f, 0xfd, 0xbb, 0x06,
	0x94, 0xe6, 0x99, 0x2f, 0x42, 0xfa, 0x02, 0x53, 0x16, 0xac, 0x7e, 0x5e, 0x35, 0x72, 0xa6, 0x79,
	0x76, 0x12, 0x92, 0x77, 0xf0, 0xec, 0x41, 0x5e, 0x90, 0x30, 0x29, 0x79, 0x16, 0xdb, 0xdd, 0x0a,
	0xba, 0x8d, 0xb9, 0x2b, 0xf7, 0x72, 0x0f, 0x6f, 0x1d, 0x66, 0xdf, 0x82, 0xbc, 0x86, 0xe5, 0x07,
	0x05, 0x12, 0x2e, 0x75, 0x95, 0xbb, 0xf3, 0xcf, 0xbe, 0xc7, 0x5c, 0x6a, 0x9b, 0xb6, 0x03, 0xe6,
	0xd4, 0x45, 0x40, 0x43, 0xd7, 0xe9, 0xcd, 0xee, 0x2d, 0xda, 0x61, 0xd8, 0x9d, 0x0c, 0x02, 0x0e,
	0x80, 0x67, 0x3d, 0x1b, 0x7f, 0x6a, 0xd0, 0x7e, 0xa8, 0x90, 0x36, 0xd4, 0x44, 0x48, 0x1d, 0xd7,
	0xe9, 0xb5, 0xbc, 0x9a, 0x08, 0x09, 0x81, 0xa9, 0x8c, 0xa5, 0x9c, 0xd6, 0x5c, 0xa7, 0xd7, 0xf4,
	0x70, 0x6d, 0x58, 0xc2, 0x59, 0x48, 0x1f, 0x5b, 0x66, 0xd6, 0x64, 0x01, 0xea, 0xf6, 0xc0, 0xa7,
	0xec, 0xd5, 0x63, 0x60, 0x9c, 0x66, 0x4e, 0x69, 0xdd, 0x75, 0x7a, 0x0d, 0x0f, 0xd7, 0xa4, 0x03,
	0x0d, 0xa9, 0x02, 0x56, 0x9a, 0xc9, 0x9b, 0x46, 0xf3, 0x24, 0x26, 0x4f, 0xa1, 0x79, 0x25, 0x74,
	0x75, 0x75, 0x33, 0x56, 0xbc, 0x12, 0xfa, 0xf4, 0xb6, 0xd8, 0x40, 0x85, 0x63, 0xda, 0x40, 0x8e,
	0x6b, 0xb2, 0x02, 0x8d, 0x78, 0x28, 0x64, 0x68, 0xae, 0x63, 0x0d, 0xf9, 0x0c, 0xc6, 0x27, 0xa1,
	0x99, 0x61, 0x2b, 0x61, 0xff, 0x2e, 0xf6, 0xda, 0x44, 0xf2, 0xd1, 0xfc, 0xc4, 0x16, 0xcc, 0x5b,
	0x39, 0x92, 0x2c, 0xb6, 0x9e, 0x75, 0xf4, 0xcc, 0x21, 0x3e, 0x92, 0x2c, 0x46, 0xdf, 0x2a, 0x40,
	0x60, 0x66, 0x34, 0x1f, 0x9b, 0x3d, 0x36, 0xec, 0x53, 0xa8, 0xc8, 0x49, 0x48, 0xf6, 0xa1, 0xa1,
	0xa2, 0x48, 0x04, 0x82, 0x49, 0x1c, 0xc9, 0xf6, 0x5e, 0xa7, 0x3a, 0xf2, 0x43, 0xeb, 0x39, 0xab,
	0xd4, 0xf3, 0xb1, 0xe6, 0xde, 0xc4, 0x7b, 0xe0, 0xfe, 0xb8, 0xe9, 0x3a, 0x3f, 0x6f, 0xba, 0xce,
	0xaf, 0x9b, 0xae, 0xf3, 0xed, 0x77, 0xf7, 0xd1, 0xb1, 0xf3, 0xb5, 0x75, 0xff, 0x29, 0x0f, 0xa6,
	0xf1, 0xf3, 0xf2, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x08, 0x85, 0x4e, 0x73, 0x3f, 0x04, 0x00,
	0x00,
}
