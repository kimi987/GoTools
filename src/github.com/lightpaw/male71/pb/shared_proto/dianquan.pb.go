// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/pb/shared_proto/dianquan.proto
// DO NOT EDIT!

package shared_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type DianquanMiscProto struct {
	ExchangeBaseYuanbao  int32 `protobuf:"varint,1,opt,name=exchange_base_yuanbao,json=exchangeBaseYuanbao,proto3" json:"exchange_base_yuanbao,omitempty"`
	ExchangeBaseDianquan int32 `protobuf:"varint,2,opt,name=exchange_base_dianquan,json=exchangeBaseDianquan,proto3" json:"exchange_base_dianquan,omitempty"`
}

func (m *DianquanMiscProto) Reset()                    { *m = DianquanMiscProto{} }
func (m *DianquanMiscProto) String() string            { return proto.CompactTextString(m) }
func (*DianquanMiscProto) ProtoMessage()               {}
func (*DianquanMiscProto) Descriptor() ([]byte, []int) { return fileDescriptorDianquan, []int{0} }

func (m *DianquanMiscProto) GetExchangeBaseYuanbao() int32 {
	if m != nil {
		return m.ExchangeBaseYuanbao
	}
	return 0
}

func (m *DianquanMiscProto) GetExchangeBaseDianquan() int32 {
	if m != nil {
		return m.ExchangeBaseDianquan
	}
	return 0
}

func init() {
	proto.RegisterType((*DianquanMiscProto)(nil), "proto.DianquanMiscProto")
}
func (m *DianquanMiscProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DianquanMiscProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ExchangeBaseYuanbao != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDianquan(dAtA, i, uint64(m.ExchangeBaseYuanbao))
	}
	if m.ExchangeBaseDianquan != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDianquan(dAtA, i, uint64(m.ExchangeBaseDianquan))
	}
	return i, nil
}

func encodeFixed64Dianquan(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Dianquan(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintDianquan(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DianquanMiscProto) Size() (n int) {
	var l int
	_ = l
	if m.ExchangeBaseYuanbao != 0 {
		n += 1 + sovDianquan(uint64(m.ExchangeBaseYuanbao))
	}
	if m.ExchangeBaseDianquan != 0 {
		n += 1 + sovDianquan(uint64(m.ExchangeBaseDianquan))
	}
	return n
}

func sovDianquan(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDianquan(x uint64) (n int) {
	return sovDianquan(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DianquanMiscProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDianquan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DianquanMiscProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DianquanMiscProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeBaseYuanbao", wireType)
			}
			m.ExchangeBaseYuanbao = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDianquan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExchangeBaseYuanbao |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeBaseDianquan", wireType)
			}
			m.ExchangeBaseDianquan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDianquan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExchangeBaseDianquan |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDianquan(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDianquan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDianquan(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDianquan
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDianquan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDianquan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDianquan
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDianquan
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDianquan(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDianquan = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDianquan   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/pb/shared_proto/dianquan.proto", fileDescriptorDianquan)
}

var fileDescriptorDianquan = []byte{
	// 184 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xb2, 0x48, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0xcf, 0xc9, 0x4c, 0xcf, 0x28, 0x29, 0x48, 0x2c, 0xd7,
	0xcf, 0x4d, 0xcc, 0x49, 0x35, 0xd7, 0x2f, 0x48, 0xd2, 0x2f, 0xce, 0x48, 0x2c, 0x4a, 0x4d, 0x89,
	0x2f, 0x28, 0xca, 0x2f, 0xc9, 0xd7, 0x4f, 0xc9, 0x4c, 0xcc, 0x2b, 0x2c, 0x4d, 0xcc, 0xd3, 0x03,
	0x73, 0x85, 0x58, 0xc1, 0x94, 0x52, 0x2d, 0x97, 0xa0, 0x0b, 0x54, 0xc2, 0x37, 0xb3, 0x38, 0x39,
	0x00, 0x2c, 0x67, 0xc4, 0x25, 0x9a, 0x5a, 0x91, 0x9c, 0x91, 0x98, 0x97, 0x9e, 0x1a, 0x9f, 0x94,
	0x58, 0x9c, 0x1a, 0x5f, 0x59, 0x9a, 0x98, 0x97, 0x94, 0x98, 0x2f, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1,
	0x1a, 0x24, 0x0c, 0x93, 0x74, 0x4a, 0x2c, 0x4e, 0x8d, 0x84, 0x48, 0x09, 0x99, 0x70, 0x89, 0xa1,
	0xea, 0x81, 0xd9, 0x27, 0xc1, 0x04, 0xd6, 0x24, 0x82, 0xac, 0x09, 0x66, 0xa5, 0x93, 0xc2, 0x89,
	0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe3, 0xb1, 0x1c, 0x83,
	0x07, 0x63, 0x14, 0x0f, 0xb2, 0xb3, 0x93, 0xd8, 0xc0, 0x94, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff,
	0xfa, 0x9c, 0xa7, 0xfe, 0xea, 0x00, 0x00, 0x00,
}
