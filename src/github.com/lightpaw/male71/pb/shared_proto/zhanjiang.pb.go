// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/pb/shared_proto/zhanjiang.proto
// DO NOT EDIT!

package shared_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ZhanJiangChapterProto struct {
	ChapterId   int32                    `protobuf:"varint,1,opt,name=chapter_id,json=chapterId,proto3" json:"chapter_id,omitempty"`
	ChapterName string                   `protobuf:"bytes,2,opt,name=chapter_name,json=chapterName,proto3" json:"chapter_name,omitempty"`
	ChapterDesc string                   `protobuf:"bytes,3,opt,name=chapter_desc,json=chapterDesc,proto3" json:"chapter_desc,omitempty"`
	CaptainSoul int32                    `protobuf:"varint,4,opt,name=captain_soul,json=captainSoul,proto3" json:"captain_soul,omitempty"`
	BgImg       string                   `protobuf:"bytes,5,opt,name=bg_img,json=bgImg,proto3" json:"bg_img,omitempty"`
	GuanQia     []*ZhanJiangGuanQiaProto `protobuf:"bytes,6,rep,name=guan_qia,json=guanQia" json:"guan_qia,omitempty"`
}

func (m *ZhanJiangChapterProto) Reset()                    { *m = ZhanJiangChapterProto{} }
func (m *ZhanJiangChapterProto) String() string            { return proto.CompactTextString(m) }
func (*ZhanJiangChapterProto) ProtoMessage()               {}
func (*ZhanJiangChapterProto) Descriptor() ([]byte, []int) { return fileDescriptorZhanjiang, []int{0} }

func (m *ZhanJiangChapterProto) GetChapterId() int32 {
	if m != nil {
		return m.ChapterId
	}
	return 0
}

func (m *ZhanJiangChapterProto) GetChapterName() string {
	if m != nil {
		return m.ChapterName
	}
	return ""
}

func (m *ZhanJiangChapterProto) GetChapterDesc() string {
	if m != nil {
		return m.ChapterDesc
	}
	return ""
}

func (m *ZhanJiangChapterProto) GetCaptainSoul() int32 {
	if m != nil {
		return m.CaptainSoul
	}
	return 0
}

func (m *ZhanJiangChapterProto) GetBgImg() string {
	if m != nil {
		return m.BgImg
	}
	return ""
}

func (m *ZhanJiangChapterProto) GetGuanQia() []*ZhanJiangGuanQiaProto {
	if m != nil {
		return m.GuanQia
	}
	return nil
}

type ZhanJiangGuanQiaProto struct {
	Id           int32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	PositionDesc string                `protobuf:"bytes,3,opt,name=position_desc,json=positionDesc,proto3" json:"position_desc,omitempty"`
	Desc         string                `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	BgImg        string                `protobuf:"bytes,5,opt,name=bg_img,json=bgImg,proto3" json:"bg_img,omitempty"`
	Guan         []*ZhanJiangDataProto `protobuf:"bytes,6,rep,name=guan" json:"guan,omitempty"`
	AbilityExp   int32                 `protobuf:"varint,8,opt,name=ability_exp,json=abilityExp,proto3" json:"ability_exp,omitempty"`
	Prev         int32                 `protobuf:"varint,9,opt,name=prev,proto3" json:"prev,omitempty"`
	Next         int32                 `protobuf:"varint,10,opt,name=next,proto3" json:"next,omitempty"`
	ShowGongXun  int32                 `protobuf:"varint,11,opt,name=show_gong_xun,json=showGongXun,proto3" json:"show_gong_xun,omitempty"`
	ShowPrize    *PrizeProto           `protobuf:"bytes,12,opt,name=show_prize,json=showPrize" json:"show_prize,omitempty"`
}

func (m *ZhanJiangGuanQiaProto) Reset()                    { *m = ZhanJiangGuanQiaProto{} }
func (m *ZhanJiangGuanQiaProto) String() string            { return proto.CompactTextString(m) }
func (*ZhanJiangGuanQiaProto) ProtoMessage()               {}
func (*ZhanJiangGuanQiaProto) Descriptor() ([]byte, []int) { return fileDescriptorZhanjiang, []int{1} }

func (m *ZhanJiangGuanQiaProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ZhanJiangGuanQiaProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ZhanJiangGuanQiaProto) GetPositionDesc() string {
	if m != nil {
		return m.PositionDesc
	}
	return ""
}

func (m *ZhanJiangGuanQiaProto) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *ZhanJiangGuanQiaProto) GetBgImg() string {
	if m != nil {
		return m.BgImg
	}
	return ""
}

func (m *ZhanJiangGuanQiaProto) GetGuan() []*ZhanJiangDataProto {
	if m != nil {
		return m.Guan
	}
	return nil
}

func (m *ZhanJiangGuanQiaProto) GetAbilityExp() int32 {
	if m != nil {
		return m.AbilityExp
	}
	return 0
}

func (m *ZhanJiangGuanQiaProto) GetPrev() int32 {
	if m != nil {
		return m.Prev
	}
	return 0
}

func (m *ZhanJiangGuanQiaProto) GetNext() int32 {
	if m != nil {
		return m.Next
	}
	return 0
}

func (m *ZhanJiangGuanQiaProto) GetShowGongXun() int32 {
	if m != nil {
		return m.ShowGongXun
	}
	return 0
}

func (m *ZhanJiangGuanQiaProto) GetShowPrize() *PrizeProto {
	if m != nil {
		return m.ShowPrize
	}
	return nil
}

type ZhanJiangDataProto struct {
	Id        int32                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Desc      string                  `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	Icon      string                  `protobuf:"bytes,4,opt,name=icon,proto3" json:"icon,omitempty"`
	ShowPrize *PrizeProto             `protobuf:"bytes,6,opt,name=show_prize,json=showPrize" json:"show_prize,omitempty"`
	Monster   *MonsterMasterDataProto `protobuf:"bytes,7,opt,name=monster" json:"monster,omitempty"`
	GongXun   int32                   `protobuf:"varint,8,opt,name=gong_xun,json=gongXun,proto3" json:"gong_xun,omitempty"`
}

func (m *ZhanJiangDataProto) Reset()                    { *m = ZhanJiangDataProto{} }
func (m *ZhanJiangDataProto) String() string            { return proto.CompactTextString(m) }
func (*ZhanJiangDataProto) ProtoMessage()               {}
func (*ZhanJiangDataProto) Descriptor() ([]byte, []int) { return fileDescriptorZhanjiang, []int{2} }

func (m *ZhanJiangDataProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ZhanJiangDataProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ZhanJiangDataProto) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *ZhanJiangDataProto) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *ZhanJiangDataProto) GetShowPrize() *PrizeProto {
	if m != nil {
		return m.ShowPrize
	}
	return nil
}

func (m *ZhanJiangDataProto) GetMonster() *MonsterMasterDataProto {
	if m != nil {
		return m.Monster
	}
	return nil
}

func (m *ZhanJiangDataProto) GetGongXun() int32 {
	if m != nil {
		return m.GongXun
	}
	return 0
}

type ZhanJiangMiscDataProto struct {
	MaxTimes int32 `protobuf:"varint,1,opt,name=max_times,json=maxTimes,proto3" json:"max_times,omitempty"`
}

func (m *ZhanJiangMiscDataProto) Reset()                    { *m = ZhanJiangMiscDataProto{} }
func (m *ZhanJiangMiscDataProto) String() string            { return proto.CompactTextString(m) }
func (*ZhanJiangMiscDataProto) ProtoMessage()               {}
func (*ZhanJiangMiscDataProto) Descriptor() ([]byte, []int) { return fileDescriptorZhanjiang, []int{3} }

func (m *ZhanJiangMiscDataProto) GetMaxTimes() int32 {
	if m != nil {
		return m.MaxTimes
	}
	return 0
}

// 过关斩将
type HeroZhanJiangProto struct {
	OpenTimes    int32                    `protobuf:"varint,1,opt,name=open_times,json=openTimes,proto3" json:"open_times,omitempty"`
	PassGuanQia  []int32                  `protobuf:"varint,2,rep,name=pass_guan_qia,json=passGuanQia" json:"pass_guan_qia,omitempty"`
	CurChallenge *ZhanJiangChallengeProto `protobuf:"bytes,3,opt,name=cur_challenge,json=curChallenge" json:"cur_challenge,omitempty"`
}

func (m *HeroZhanJiangProto) Reset()                    { *m = HeroZhanJiangProto{} }
func (m *HeroZhanJiangProto) String() string            { return proto.CompactTextString(m) }
func (*HeroZhanJiangProto) ProtoMessage()               {}
func (*HeroZhanJiangProto) Descriptor() ([]byte, []int) { return fileDescriptorZhanjiang, []int{4} }

func (m *HeroZhanJiangProto) GetOpenTimes() int32 {
	if m != nil {
		return m.OpenTimes
	}
	return 0
}

func (m *HeroZhanJiangProto) GetPassGuanQia() []int32 {
	if m != nil {
		return m.PassGuanQia
	}
	return nil
}

func (m *HeroZhanJiangProto) GetCurChallenge() *ZhanJiangChallengeProto {
	if m != nil {
		return m.CurChallenge
	}
	return nil
}

type ZhanJiangChallengeProto struct {
	GuanQia   int32 `protobuf:"varint,1,opt,name=guan_qia,json=guanQia,proto3" json:"guan_qia,omitempty"`
	PassCount int32 `protobuf:"varint,2,opt,name=pass_count,json=passCount,proto3" json:"pass_count,omitempty"`
	CaptainId int32 `protobuf:"varint,3,opt,name=captain_id,json=captainId,proto3" json:"captain_id,omitempty"`
}

func (m *ZhanJiangChallengeProto) Reset()                    { *m = ZhanJiangChallengeProto{} }
func (m *ZhanJiangChallengeProto) String() string            { return proto.CompactTextString(m) }
func (*ZhanJiangChallengeProto) ProtoMessage()               {}
func (*ZhanJiangChallengeProto) Descriptor() ([]byte, []int) { return fileDescriptorZhanjiang, []int{5} }

func (m *ZhanJiangChallengeProto) GetGuanQia() int32 {
	if m != nil {
		return m.GuanQia
	}
	return 0
}

func (m *ZhanJiangChallengeProto) GetPassCount() int32 {
	if m != nil {
		return m.PassCount
	}
	return 0
}

func (m *ZhanJiangChallengeProto) GetCaptainId() int32 {
	if m != nil {
		return m.CaptainId
	}
	return 0
}

func init() {
	proto.RegisterType((*ZhanJiangChapterProto)(nil), "proto.ZhanJiangChapterProto")
	proto.RegisterType((*ZhanJiangGuanQiaProto)(nil), "proto.ZhanJiangGuanQiaProto")
	proto.RegisterType((*ZhanJiangDataProto)(nil), "proto.ZhanJiangDataProto")
	proto.RegisterType((*ZhanJiangMiscDataProto)(nil), "proto.ZhanJiangMiscDataProto")
	proto.RegisterType((*HeroZhanJiangProto)(nil), "proto.HeroZhanJiangProto")
	proto.RegisterType((*ZhanJiangChallengeProto)(nil), "proto.ZhanJiangChallengeProto")
}
func (m *ZhanJiangChapterProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZhanJiangChapterProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChapterId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintZhanjiang(dAtA, i, uint64(m.ChapterId))
	}
	if len(m.ChapterName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintZhanjiang(dAtA, i, uint64(len(m.ChapterName)))
		i += copy(dAtA[i:], m.ChapterName)
	}
	if len(m.ChapterDesc) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintZhanjiang(dAtA, i, uint64(len(m.ChapterDesc)))
		i += copy(dAtA[i:], m.ChapterDesc)
	}
	if m.CaptainSoul != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintZhanjiang(dAtA, i, uint64(m.CaptainSoul))
	}
	if len(m.BgImg) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintZhanjiang(dAtA, i, uint64(len(m.BgImg)))
		i += copy(dAtA[i:], m.BgImg)
	}
	if len(m.GuanQia) > 0 {
		for _, msg := range m.GuanQia {
			dAtA[i] = 0x32
			i++
			i = encodeVarintZhanjiang(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ZhanJiangGuanQiaProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZhanJiangGuanQiaProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintZhanjiang(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintZhanjiang(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.PositionDesc) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintZhanjiang(dAtA, i, uint64(len(m.PositionDesc)))
		i += copy(dAtA[i:], m.PositionDesc)
	}
	if len(m.Desc) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintZhanjiang(dAtA, i, uint64(len(m.Desc)))
		i += copy(dAtA[i:], m.Desc)
	}
	if len(m.BgImg) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintZhanjiang(dAtA, i, uint64(len(m.BgImg)))
		i += copy(dAtA[i:], m.BgImg)
	}
	if len(m.Guan) > 0 {
		for _, msg := range m.Guan {
			dAtA[i] = 0x32
			i++
			i = encodeVarintZhanjiang(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.AbilityExp != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintZhanjiang(dAtA, i, uint64(m.AbilityExp))
	}
	if m.Prev != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintZhanjiang(dAtA, i, uint64(m.Prev))
	}
	if m.Next != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintZhanjiang(dAtA, i, uint64(m.Next))
	}
	if m.ShowGongXun != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintZhanjiang(dAtA, i, uint64(m.ShowGongXun))
	}
	if m.ShowPrize != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintZhanjiang(dAtA, i, uint64(m.ShowPrize.Size()))
		n1, err := m.ShowPrize.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *ZhanJiangDataProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZhanJiangDataProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintZhanjiang(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintZhanjiang(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Desc) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintZhanjiang(dAtA, i, uint64(len(m.Desc)))
		i += copy(dAtA[i:], m.Desc)
	}
	if len(m.Icon) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintZhanjiang(dAtA, i, uint64(len(m.Icon)))
		i += copy(dAtA[i:], m.Icon)
	}
	if m.ShowPrize != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintZhanjiang(dAtA, i, uint64(m.ShowPrize.Size()))
		n2, err := m.ShowPrize.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Monster != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintZhanjiang(dAtA, i, uint64(m.Monster.Size()))
		n3, err := m.Monster.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.GongXun != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintZhanjiang(dAtA, i, uint64(m.GongXun))
	}
	return i, nil
}

func (m *ZhanJiangMiscDataProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZhanJiangMiscDataProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MaxTimes != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintZhanjiang(dAtA, i, uint64(m.MaxTimes))
	}
	return i, nil
}

func (m *HeroZhanJiangProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeroZhanJiangProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OpenTimes != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintZhanjiang(dAtA, i, uint64(m.OpenTimes))
	}
	if len(m.PassGuanQia) > 0 {
		for _, num := range m.PassGuanQia {
			dAtA[i] = 0x10
			i++
			i = encodeVarintZhanjiang(dAtA, i, uint64(num))
		}
	}
	if m.CurChallenge != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintZhanjiang(dAtA, i, uint64(m.CurChallenge.Size()))
		n4, err := m.CurChallenge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *ZhanJiangChallengeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZhanJiangChallengeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GuanQia != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintZhanjiang(dAtA, i, uint64(m.GuanQia))
	}
	if m.PassCount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintZhanjiang(dAtA, i, uint64(m.PassCount))
	}
	if m.CaptainId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintZhanjiang(dAtA, i, uint64(m.CaptainId))
	}
	return i, nil
}

func encodeFixed64Zhanjiang(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Zhanjiang(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintZhanjiang(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ZhanJiangChapterProto) Size() (n int) {
	var l int
	_ = l
	if m.ChapterId != 0 {
		n += 1 + sovZhanjiang(uint64(m.ChapterId))
	}
	l = len(m.ChapterName)
	if l > 0 {
		n += 1 + l + sovZhanjiang(uint64(l))
	}
	l = len(m.ChapterDesc)
	if l > 0 {
		n += 1 + l + sovZhanjiang(uint64(l))
	}
	if m.CaptainSoul != 0 {
		n += 1 + sovZhanjiang(uint64(m.CaptainSoul))
	}
	l = len(m.BgImg)
	if l > 0 {
		n += 1 + l + sovZhanjiang(uint64(l))
	}
	if len(m.GuanQia) > 0 {
		for _, e := range m.GuanQia {
			l = e.Size()
			n += 1 + l + sovZhanjiang(uint64(l))
		}
	}
	return n
}

func (m *ZhanJiangGuanQiaProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovZhanjiang(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovZhanjiang(uint64(l))
	}
	l = len(m.PositionDesc)
	if l > 0 {
		n += 1 + l + sovZhanjiang(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovZhanjiang(uint64(l))
	}
	l = len(m.BgImg)
	if l > 0 {
		n += 1 + l + sovZhanjiang(uint64(l))
	}
	if len(m.Guan) > 0 {
		for _, e := range m.Guan {
			l = e.Size()
			n += 1 + l + sovZhanjiang(uint64(l))
		}
	}
	if m.AbilityExp != 0 {
		n += 1 + sovZhanjiang(uint64(m.AbilityExp))
	}
	if m.Prev != 0 {
		n += 1 + sovZhanjiang(uint64(m.Prev))
	}
	if m.Next != 0 {
		n += 1 + sovZhanjiang(uint64(m.Next))
	}
	if m.ShowGongXun != 0 {
		n += 1 + sovZhanjiang(uint64(m.ShowGongXun))
	}
	if m.ShowPrize != nil {
		l = m.ShowPrize.Size()
		n += 1 + l + sovZhanjiang(uint64(l))
	}
	return n
}

func (m *ZhanJiangDataProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovZhanjiang(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovZhanjiang(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovZhanjiang(uint64(l))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovZhanjiang(uint64(l))
	}
	if m.ShowPrize != nil {
		l = m.ShowPrize.Size()
		n += 1 + l + sovZhanjiang(uint64(l))
	}
	if m.Monster != nil {
		l = m.Monster.Size()
		n += 1 + l + sovZhanjiang(uint64(l))
	}
	if m.GongXun != 0 {
		n += 1 + sovZhanjiang(uint64(m.GongXun))
	}
	return n
}

func (m *ZhanJiangMiscDataProto) Size() (n int) {
	var l int
	_ = l
	if m.MaxTimes != 0 {
		n += 1 + sovZhanjiang(uint64(m.MaxTimes))
	}
	return n
}

func (m *HeroZhanJiangProto) Size() (n int) {
	var l int
	_ = l
	if m.OpenTimes != 0 {
		n += 1 + sovZhanjiang(uint64(m.OpenTimes))
	}
	if len(m.PassGuanQia) > 0 {
		for _, e := range m.PassGuanQia {
			n += 1 + sovZhanjiang(uint64(e))
		}
	}
	if m.CurChallenge != nil {
		l = m.CurChallenge.Size()
		n += 1 + l + sovZhanjiang(uint64(l))
	}
	return n
}

func (m *ZhanJiangChallengeProto) Size() (n int) {
	var l int
	_ = l
	if m.GuanQia != 0 {
		n += 1 + sovZhanjiang(uint64(m.GuanQia))
	}
	if m.PassCount != 0 {
		n += 1 + sovZhanjiang(uint64(m.PassCount))
	}
	if m.CaptainId != 0 {
		n += 1 + sovZhanjiang(uint64(m.CaptainId))
	}
	return n
}

func sovZhanjiang(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozZhanjiang(x uint64) (n int) {
	return sovZhanjiang(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ZhanJiangChapterProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZhanjiang
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZhanJiangChapterProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZhanJiangChapterProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChapterId", wireType)
			}
			m.ChapterId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhanjiang
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChapterId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChapterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhanjiang
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZhanjiang
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChapterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChapterDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhanjiang
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZhanjiang
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChapterDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainSoul", wireType)
			}
			m.CaptainSoul = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhanjiang
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainSoul |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgImg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhanjiang
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZhanjiang
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BgImg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuanQia", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhanjiang
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZhanjiang
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuanQia = append(m.GuanQia, &ZhanJiangGuanQiaProto{})
			if err := m.GuanQia[len(m.GuanQia)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZhanjiang(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZhanjiang
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZhanJiangGuanQiaProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZhanjiang
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZhanJiangGuanQiaProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZhanJiangGuanQiaProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhanjiang
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhanjiang
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZhanjiang
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhanjiang
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZhanjiang
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PositionDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhanjiang
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZhanjiang
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BgImg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhanjiang
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZhanjiang
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BgImg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Guan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhanjiang
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZhanjiang
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Guan = append(m.Guan, &ZhanJiangDataProto{})
			if err := m.Guan[len(m.Guan)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbilityExp", wireType)
			}
			m.AbilityExp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhanjiang
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AbilityExp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prev", wireType)
			}
			m.Prev = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhanjiang
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Prev |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Next", wireType)
			}
			m.Next = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhanjiang
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Next |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowGongXun", wireType)
			}
			m.ShowGongXun = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhanjiang
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShowGongXun |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowPrize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhanjiang
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZhanjiang
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShowPrize == nil {
				m.ShowPrize = &PrizeProto{}
			}
			if err := m.ShowPrize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZhanjiang(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZhanjiang
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZhanJiangDataProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZhanjiang
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZhanJiangDataProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZhanJiangDataProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhanjiang
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhanjiang
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZhanjiang
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhanjiang
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZhanjiang
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhanjiang
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZhanjiang
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowPrize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhanjiang
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZhanjiang
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShowPrize == nil {
				m.ShowPrize = &PrizeProto{}
			}
			if err := m.ShowPrize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Monster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhanjiang
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZhanjiang
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Monster == nil {
				m.Monster = &MonsterMasterDataProto{}
			}
			if err := m.Monster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GongXun", wireType)
			}
			m.GongXun = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhanjiang
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GongXun |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZhanjiang(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZhanjiang
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZhanJiangMiscDataProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZhanjiang
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZhanJiangMiscDataProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZhanJiangMiscDataProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTimes", wireType)
			}
			m.MaxTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhanjiang
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZhanjiang(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZhanjiang
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeroZhanJiangProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZhanjiang
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroZhanJiangProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroZhanJiangProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenTimes", wireType)
			}
			m.OpenTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhanjiang
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpenTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowZhanjiang
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PassGuanQia = append(m.PassGuanQia, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowZhanjiang
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthZhanjiang
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowZhanjiang
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PassGuanQia = append(m.PassGuanQia, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PassGuanQia", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhanjiang
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZhanjiang
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CurChallenge == nil {
				m.CurChallenge = &ZhanJiangChallengeProto{}
			}
			if err := m.CurChallenge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZhanjiang(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZhanjiang
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZhanJiangChallengeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZhanjiang
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZhanJiangChallengeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZhanJiangChallengeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuanQia", wireType)
			}
			m.GuanQia = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhanjiang
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuanQia |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassCount", wireType)
			}
			m.PassCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhanjiang
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PassCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainId", wireType)
			}
			m.CaptainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhanjiang
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZhanjiang(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZhanjiang
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipZhanjiang(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowZhanjiang
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZhanjiang
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZhanjiang
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthZhanjiang
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowZhanjiang
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipZhanjiang(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthZhanjiang = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowZhanjiang   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/pb/shared_proto/zhanjiang.proto", fileDescriptorZhanjiang)
}

var fileDescriptorZhanjiang = []byte{
	// 664 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0x4d, 0x6f, 0xd3, 0x4a,
	0x14, 0xad, 0xf3, 0x9d, 0xeb, 0xe4, 0xe9, 0xbd, 0x91, 0xfa, 0x70, 0x0b, 0x0d, 0x21, 0x48, 0x28,
	0x1b, 0x1a, 0x54, 0x40, 0x11, 0xdb, 0xa6, 0xa8, 0x2d, 0x52, 0x51, 0x09, 0x2c, 0x50, 0x37, 0xd6,
	0xd8, 0x1e, 0x8d, 0x07, 0xd9, 0x33, 0xc6, 0x1f, 0x34, 0xf4, 0x97, 0xb0, 0xe4, 0xe7, 0xb0, 0x64,
	0xcb, 0x0e, 0x15, 0x89, 0x2d, 0x7f, 0x01, 0xcd, 0x87, 0x5d, 0xb7, 0xa8, 0xa2, 0x9b, 0xf8, 0xde,
	0x33, 0xe7, 0x66, 0xce, 0x39, 0x1e, 0x0f, 0x3c, 0xa3, 0x2c, 0x0f, 0x0b, 0x6f, 0xdb, 0x17, 0xf1,
	0x2c, 0x62, 0x34, 0xcc, 0x13, 0x7c, 0x3a, 0x8b, 0x71, 0x44, 0xe6, 0xb3, 0xc4, 0x9b, 0x65, 0x21,
	0x4e, 0x49, 0xe0, 0x26, 0xa9, 0xc8, 0xc5, 0xec, 0x2c, 0xc4, 0xfc, 0x1d, 0xc3, 0x9c, 0x6e, 0xab,
	0x1e, 0xb5, 0xd5, 0x63, 0xf3, 0xc9, 0xcd, 0xff, 0xc1, 0xc3, 0x19, 0xd1, 0xc3, 0x9b, 0xf3, 0x9b,
	0x4f, 0xc5, 0x82, 0x67, 0x39, 0x49, 0xf5, 0xe0, 0xe4, 0x97, 0x05, 0xeb, 0x27, 0x21, 0xe6, 0x2f,
	0xa4, 0x92, 0x45, 0x88, 0x93, 0x9c, 0xa4, 0xc7, 0x4a, 0xcf, 0x16, 0x80, 0xaf, 0x7b, 0x97, 0x05,
	0x8e, 0x35, 0xb6, 0xa6, 0xed, 0x65, 0xdf, 0x20, 0x87, 0x01, 0xba, 0x07, 0x83, 0x72, 0x99, 0xe3,
	0x98, 0x38, 0x8d, 0xb1, 0x35, 0xed, 0x2f, 0x6d, 0x83, 0xbd, 0xc4, 0x31, 0xa9, 0x53, 0x02, 0x92,
	0xf9, 0x4e, 0xf3, 0x12, 0x65, 0x8f, 0x64, 0xbe, 0xa2, 0xe0, 0x24, 0xc7, 0x8c, 0xbb, 0x99, 0x28,
	0x22, 0xa7, 0xa5, 0xb6, 0xb1, 0x0d, 0xf6, 0x5a, 0x14, 0x11, 0x5a, 0x87, 0x8e, 0x47, 0x5d, 0x16,
	0x53, 0xa7, 0xad, 0xe6, 0xdb, 0x1e, 0x3d, 0x8c, 0x29, 0x9a, 0x43, 0x8f, 0x16, 0x98, 0xbb, 0xef,
	0x19, 0x76, 0x3a, 0xe3, 0xe6, 0xd4, 0xde, 0xb9, 0xa3, 0x2d, 0x6d, 0x57, 0x76, 0xf6, 0x0b, 0xcc,
	0x5f, 0x31, 0xac, 0xec, 0x2c, 0xbb, 0x54, 0x77, 0x93, 0x6f, 0x8d, 0x9a, 0xe3, 0x3a, 0x05, 0xfd,
	0x03, 0x8d, 0xca, 0x69, 0x83, 0x05, 0x08, 0x41, 0xab, 0x66, 0x4d, 0xd5, 0xe8, 0x3e, 0x0c, 0x13,
	0x91, 0xb1, 0x9c, 0x09, 0x5e, 0x37, 0x35, 0x28, 0x41, 0xe5, 0x0a, 0x41, 0x4b, 0xad, 0xb5, 0xf4,
	0xa0, 0xac, 0xaf, 0xb3, 0xf1, 0x10, 0x5a, 0x52, 0x98, 0xb1, 0xb0, 0x71, 0xd5, 0xc2, 0x1e, 0xce,
	0x8d, 0x7e, 0x45, 0x43, 0x77, 0xc1, 0xc6, 0x1e, 0x8b, 0x58, 0xfe, 0xd1, 0x25, 0xab, 0xc4, 0xe9,
	0x29, 0xad, 0x60, 0xa0, 0xe7, 0xab, 0x44, 0x6e, 0x9d, 0xa4, 0xe4, 0x83, 0xd3, 0x57, 0x2b, 0xaa,
	0x56, 0x3e, 0xc8, 0x2a, 0x77, 0x40, 0x63, 0xb2, 0x46, 0x13, 0x18, 0x66, 0xa1, 0x38, 0x75, 0xa9,
	0xe0, 0xd4, 0x5d, 0x15, 0xdc, 0xb1, 0x75, 0xf2, 0x12, 0xdc, 0x17, 0x9c, 0xbe, 0x2d, 0x38, 0x7a,
	0x04, 0xa0, 0x38, 0x49, 0xca, 0xce, 0x88, 0x33, 0x18, 0x5b, 0x53, 0x7b, 0xe7, 0x3f, 0xa3, 0xf0,
	0x58, 0x62, 0x5a, 0x59, 0x5f, 0x92, 0x54, 0x3f, 0xf9, 0x69, 0x01, 0xfa, 0x53, 0xfb, 0x8d, 0x82,
	0x2d, 0x33, 0x6b, 0xd6, 0x32, 0x43, 0xd0, 0x62, 0xbe, 0xe0, 0x65, 0x8e, 0xb2, 0xbe, 0x22, 0xaa,
	0xf3, 0x77, 0x51, 0x68, 0x0e, 0x5d, 0x73, 0xe6, 0x9d, 0xae, 0xa2, 0x6f, 0x19, 0xfa, 0x91, 0x46,
	0x8f, 0xb0, 0xfc, 0xbd, 0x48, 0xba, 0x64, 0xa3, 0x0d, 0xe8, 0x55, 0xf1, 0xe8, 0xa4, 0xbb, 0x54,
	0x47, 0x33, 0x79, 0x0a, 0xff, 0x57, 0x3e, 0x8f, 0x58, 0xe6, 0x5f, 0x78, 0xbd, 0x0d, 0xfd, 0x18,
	0xaf, 0xdc, 0x9c, 0xc5, 0x24, 0x33, 0x96, 0x7b, 0x31, 0x5e, 0xbd, 0x91, 0xfd, 0xe4, 0xb3, 0x05,
	0xe8, 0x80, 0xa4, 0xa2, 0x9a, 0xad, 0x3e, 0x35, 0x91, 0x10, 0x7e, 0x69, 0xa8, 0x2f, 0x11, 0x35,
	0x85, 0x1e, 0xc0, 0x30, 0xc1, 0x59, 0xe6, 0x56, 0xe7, 0xbd, 0x31, 0x6e, 0x4e, 0xdb, 0xbb, 0x8d,
	0x7f, 0xd7, 0x96, 0xb6, 0x5c, 0x30, 0x87, 0x18, 0x2d, 0x60, 0xe8, 0x17, 0xa9, 0xeb, 0x87, 0x38,
	0x8a, 0x08, 0xa7, 0x44, 0x65, 0x69, 0xef, 0x8c, 0xae, 0x1e, 0xaa, 0x45, 0x49, 0xd0, 0x7e, 0x07,
	0x7e, 0x91, 0x56, 0xd0, 0x24, 0x85, 0x5b, 0xd7, 0x10, 0x55, 0x1e, 0xa5, 0x04, 0xcb, 0xe4, 0x61,
	0xb6, 0xde, 0x02, 0x50, 0x12, 0x7d, 0x51, 0xf0, 0x5c, 0xbd, 0xd7, 0xf6, 0xb2, 0x2f, 0x91, 0x85,
	0x04, 0xd4, 0x5d, 0x62, 0x3e, 0x73, 0x16, 0x28, 0x59, 0xf2, 0x2e, 0xd1, 0xc8, 0x61, 0xb0, 0x3b,
	0xfe, 0x72, 0x3e, 0xb2, 0xbe, 0x9e, 0x8f, 0xac, 0xef, 0xe7, 0x23, 0xeb, 0xd3, 0x8f, 0xd1, 0xda,
	0x81, 0x75, 0x32, 0xa8, 0x5f, 0x5a, 0x5e, 0x47, 0x3d, 0x1e, 0xff, 0x0e, 0x00, 0x00, 0xff, 0xff,
	0x86, 0xac, 0xea, 0x40, 0x60, 0x05, 0x00, 0x00,
}
