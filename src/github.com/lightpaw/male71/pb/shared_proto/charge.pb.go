// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/pb/shared_proto/charge.proto
// DO NOT EDIT!

package shared_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ChargeProto struct {
	ChargeAmount                     int32                  `protobuf:"varint,1,opt,name=charge_amount,json=chargeAmount,proto3" json:"charge_amount,omitempty"`
	CollectedChargePrizes            []int32                `protobuf:"varint,2,rep,name=collected_charge_prizes,json=collectedChargePrizes" json:"collected_charge_prizes,omitempty"`
	BoughtBargainTimes               []*BroughtBargainProto `protobuf:"bytes,4,rep,name=bought_bargain_times,json=boughtBargainTimes" json:"bought_bargain_times,omitempty"`
	CollectedDurationCardDailyPrizes []int32                `protobuf:"varint,3,rep,name=collected_duration_card_daily_prizes,json=collectedDurationCardDailyPrizes" json:"collected_duration_card_daily_prizes,omitempty"`
	DurationCards                    []*DurationCardProto   `protobuf:"bytes,5,rep,name=duration_cards,json=durationCards" json:"duration_cards,omitempty"`
	FirstChargedObjs                 []int32                `protobuf:"varint,6,rep,name=first_charged_objs,json=firstChargedObjs" json:"first_charged_objs,omitempty"`
}

func (m *ChargeProto) Reset()                    { *m = ChargeProto{} }
func (m *ChargeProto) String() string            { return proto.CompactTextString(m) }
func (*ChargeProto) ProtoMessage()               {}
func (*ChargeProto) Descriptor() ([]byte, []int) { return fileDescriptorCharge, []int{0} }

func (m *ChargeProto) GetChargeAmount() int32 {
	if m != nil {
		return m.ChargeAmount
	}
	return 0
}

func (m *ChargeProto) GetCollectedChargePrizes() []int32 {
	if m != nil {
		return m.CollectedChargePrizes
	}
	return nil
}

func (m *ChargeProto) GetBoughtBargainTimes() []*BroughtBargainProto {
	if m != nil {
		return m.BoughtBargainTimes
	}
	return nil
}

func (m *ChargeProto) GetCollectedDurationCardDailyPrizes() []int32 {
	if m != nil {
		return m.CollectedDurationCardDailyPrizes
	}
	return nil
}

func (m *ChargeProto) GetDurationCards() []*DurationCardProto {
	if m != nil {
		return m.DurationCards
	}
	return nil
}

func (m *ChargeProto) GetFirstChargedObjs() []int32 {
	if m != nil {
		return m.FirstChargedObjs
	}
	return nil
}

type BroughtBargainProto struct {
	Id    int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Times int32 `protobuf:"varint,2,opt,name=times,proto3" json:"times,omitempty"`
}

func (m *BroughtBargainProto) Reset()                    { *m = BroughtBargainProto{} }
func (m *BroughtBargainProto) String() string            { return proto.CompactTextString(m) }
func (*BroughtBargainProto) ProtoMessage()               {}
func (*BroughtBargainProto) Descriptor() ([]byte, []int) { return fileDescriptorCharge, []int{1} }

func (m *BroughtBargainProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BroughtBargainProto) GetTimes() int32 {
	if m != nil {
		return m.Times
	}
	return 0
}

type DurationCardProto struct {
	Id      int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	EndTime int32 `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (m *DurationCardProto) Reset()                    { *m = DurationCardProto{} }
func (m *DurationCardProto) String() string            { return proto.CompactTextString(m) }
func (*DurationCardProto) ProtoMessage()               {}
func (*DurationCardProto) Descriptor() ([]byte, []int) { return fileDescriptorCharge, []int{2} }

func (m *DurationCardProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DurationCardProto) GetEndTime() int32 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func init() {
	proto.RegisterType((*ChargeProto)(nil), "proto.ChargeProto")
	proto.RegisterType((*BroughtBargainProto)(nil), "proto.BroughtBargainProto")
	proto.RegisterType((*DurationCardProto)(nil), "proto.DurationCardProto")
}
func (m *ChargeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChargeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChargeAmount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCharge(dAtA, i, uint64(m.ChargeAmount))
	}
	if len(m.CollectedChargePrizes) > 0 {
		for _, num := range m.CollectedChargePrizes {
			dAtA[i] = 0x10
			i++
			i = encodeVarintCharge(dAtA, i, uint64(num))
		}
	}
	if len(m.CollectedDurationCardDailyPrizes) > 0 {
		for _, num := range m.CollectedDurationCardDailyPrizes {
			dAtA[i] = 0x18
			i++
			i = encodeVarintCharge(dAtA, i, uint64(num))
		}
	}
	if len(m.BoughtBargainTimes) > 0 {
		for _, msg := range m.BoughtBargainTimes {
			dAtA[i] = 0x22
			i++
			i = encodeVarintCharge(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.DurationCards) > 0 {
		for _, msg := range m.DurationCards {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintCharge(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.FirstChargedObjs) > 0 {
		for _, num := range m.FirstChargedObjs {
			dAtA[i] = 0x30
			i++
			i = encodeVarintCharge(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *BroughtBargainProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BroughtBargainProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCharge(dAtA, i, uint64(m.Id))
	}
	if m.Times != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCharge(dAtA, i, uint64(m.Times))
	}
	return i, nil
}

func (m *DurationCardProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DurationCardProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCharge(dAtA, i, uint64(m.Id))
	}
	if m.EndTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCharge(dAtA, i, uint64(m.EndTime))
	}
	return i, nil
}

func encodeFixed64Charge(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Charge(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintCharge(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ChargeProto) Size() (n int) {
	var l int
	_ = l
	if m.ChargeAmount != 0 {
		n += 1 + sovCharge(uint64(m.ChargeAmount))
	}
	if len(m.CollectedChargePrizes) > 0 {
		for _, e := range m.CollectedChargePrizes {
			n += 1 + sovCharge(uint64(e))
		}
	}
	if len(m.CollectedDurationCardDailyPrizes) > 0 {
		for _, e := range m.CollectedDurationCardDailyPrizes {
			n += 1 + sovCharge(uint64(e))
		}
	}
	if len(m.BoughtBargainTimes) > 0 {
		for _, e := range m.BoughtBargainTimes {
			l = e.Size()
			n += 1 + l + sovCharge(uint64(l))
		}
	}
	if len(m.DurationCards) > 0 {
		for _, e := range m.DurationCards {
			l = e.Size()
			n += 1 + l + sovCharge(uint64(l))
		}
	}
	if len(m.FirstChargedObjs) > 0 {
		for _, e := range m.FirstChargedObjs {
			n += 1 + sovCharge(uint64(e))
		}
	}
	return n
}

func (m *BroughtBargainProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCharge(uint64(m.Id))
	}
	if m.Times != 0 {
		n += 1 + sovCharge(uint64(m.Times))
	}
	return n
}

func (m *DurationCardProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCharge(uint64(m.Id))
	}
	if m.EndTime != 0 {
		n += 1 + sovCharge(uint64(m.EndTime))
	}
	return n
}

func sovCharge(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCharge(x uint64) (n int) {
	return sovCharge(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChargeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCharge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChargeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChargeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargeAmount", wireType)
			}
			m.ChargeAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCharge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChargeAmount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCharge
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CollectedChargePrizes = append(m.CollectedChargePrizes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCharge
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCharge
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCharge
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CollectedChargePrizes = append(m.CollectedChargePrizes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectedChargePrizes", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCharge
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CollectedDurationCardDailyPrizes = append(m.CollectedDurationCardDailyPrizes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCharge
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCharge
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCharge
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CollectedDurationCardDailyPrizes = append(m.CollectedDurationCardDailyPrizes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectedDurationCardDailyPrizes", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoughtBargainTimes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCharge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCharge
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BoughtBargainTimes = append(m.BoughtBargainTimes, &BroughtBargainProto{})
			if err := m.BoughtBargainTimes[len(m.BoughtBargainTimes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DurationCards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCharge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCharge
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DurationCards = append(m.DurationCards, &DurationCardProto{})
			if err := m.DurationCards[len(m.DurationCards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCharge
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.FirstChargedObjs = append(m.FirstChargedObjs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCharge
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCharge
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCharge
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.FirstChargedObjs = append(m.FirstChargedObjs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstChargedObjs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCharge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCharge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BroughtBargainProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCharge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BroughtBargainProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BroughtBargainProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCharge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Times", wireType)
			}
			m.Times = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCharge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Times |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCharge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCharge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DurationCardProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCharge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DurationCardProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DurationCardProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCharge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCharge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCharge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCharge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCharge(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCharge
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCharge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCharge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCharge
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCharge
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCharge(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCharge = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCharge   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/pb/shared_proto/charge.proto", fileDescriptorCharge)
}

var fileDescriptorCharge = []byte{
	// 380 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xcf, 0xaa, 0xd4, 0x30,
	0x18, 0xc5, 0xa7, 0xad, 0x1d, 0x25, 0xf3, 0x87, 0x31, 0x8e, 0x58, 0x5d, 0x94, 0x32, 0xba, 0x98,
	0xd5, 0x54, 0x14, 0x14, 0x14, 0x14, 0x3b, 0xb3, 0x70, 0x21, 0x28, 0xc5, 0x95, 0x9b, 0x90, 0x34,
	0xb1, 0xcd, 0xd0, 0x36, 0x25, 0x49, 0x11, 0xdd, 0xfa, 0x12, 0x3e, 0x92, 0x4b, 0x1f, 0x41, 0xc6,
	0x17, 0x91, 0x26, 0x9d, 0xde, 0x5e, 0xe6, 0xae, 0x42, 0x4e, 0x7f, 0xdf, 0xe1, 0x9c, 0xaf, 0x01,
	0x2f, 0x72, 0xae, 0x8b, 0x96, 0xec, 0x32, 0x51, 0xc5, 0x25, 0xcf, 0x0b, 0xdd, 0xe0, 0x6f, 0x71,
	0x85, 0x4b, 0xf6, 0x32, 0x6e, 0x48, 0xac, 0x0a, 0x2c, 0x19, 0x45, 0x8d, 0x14, 0x5a, 0xc4, 0x59,
	0x81, 0x65, 0xce, 0x76, 0xe6, 0x02, 0x7d, 0x73, 0x6c, 0x7e, 0x7a, 0x60, 0xb6, 0x37, 0xfa, 0x27,
	0x23, 0x3f, 0x06, 0x0b, 0x8b, 0x21, 0x5c, 0x89, 0xb6, 0xd6, 0x81, 0x13, 0x39, 0x5b, 0x3f, 0x9d,
	0x5b, 0xf1, 0x9d, 0xd1, 0xe0, 0x2b, 0xf0, 0x20, 0x13, 0x65, 0xc9, 0x32, 0xcd, 0x28, 0xea, 0xf1,
	0x46, 0xf2, 0x1f, 0x4c, 0x05, 0x6e, 0xe4, 0x6d, 0xfd, 0xc4, 0x5d, 0x4d, 0xd2, 0xfb, 0x03, 0x72,
	0xf6, 0xef, 0x00, 0x98, 0x82, 0x27, 0x57, 0xb3, 0xb4, 0x95, 0x58, 0x73, 0x51, 0xa3, 0x0c, 0x4b,
	0x8a, 0x28, 0xe6, 0xe5, 0xf7, 0xb3, 0x91, 0x37, 0x18, 0x45, 0x03, 0x7f, 0xe8, 0xf1, 0x3d, 0x96,
	0xf4, 0xd0, 0xc1, 0xbd, 0xe7, 0x07, 0xb0, 0x26, 0xa2, 0xcd, 0x0b, 0x8d, 0x08, 0x96, 0x39, 0xe6,
	0x35, 0xd2, 0xbc, 0x62, 0x2a, 0xb8, 0x15, 0x79, 0xdb, 0xd9, 0xb3, 0x47, 0xb6, 0xf1, 0x2e, 0x91,
	0x86, 0x49, 0x2c, 0x62, 0xea, 0xa6, 0x90, 0x8c, 0xb5, 0xcf, 0xdd, 0x14, 0x7c, 0x0b, 0x96, 0xd7,
	0x72, 0xa9, 0xc0, 0x37, 0x3e, 0x41, 0xef, 0x33, 0x4e, 0x61, 0x5d, 0x16, 0x74, 0x24, 0x29, 0xf8,
	0x14, 0xc0, 0xaf, 0x5c, 0x2a, 0xdd, 0xaf, 0x86, 0x22, 0x41, 0x8e, 0x2a, 0x98, 0x0e, 0x85, 0x56,
	0xe6, 0xab, 0xdd, 0x0a, 0xfd, 0x48, 0x8e, 0x6a, 0xf3, 0x1a, 0xdc, 0xbb, 0x21, 0x1d, 0x5c, 0x02,
	0x97, 0xd3, 0xfe, 0x0f, 0xb8, 0x9c, 0xc2, 0x35, 0xf0, 0x6d, 0x31, 0xd7, 0x48, 0xf6, 0xb2, 0x79,
	0x03, 0xee, 0x5e, 0x44, 0xba, 0x18, 0x7d, 0x08, 0xee, 0xb0, 0x9a, 0x9a, 0xbd, 0xf4, 0xd3, 0xb7,
	0x59, 0x4d, 0xbb, 0xc2, 0x49, 0xf4, 0xfb, 0x14, 0x3a, 0x7f, 0x4e, 0xa1, 0xf3, 0xf7, 0x14, 0x3a,
	0xbf, 0xfe, 0x85, 0x93, 0xf7, 0xce, 0x97, 0xf9, 0xf8, 0xe1, 0x90, 0xa9, 0x39, 0x9e, 0xff, 0x0f,
	0x00, 0x00, 0xff, 0xff, 0xae, 0x24, 0xe3, 0xdf, 0x6c, 0x02, 0x00, 0x00,
}
