// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/pb/shared_proto/garden.proto
// DO NOT EDIT!

package shared_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 摇钱树
type TreasuryTreeDataProto struct {
	Season Season      `protobuf:"varint,2,opt,name=season,proto3,enum=proto.Season" json:"season,omitempty"`
	Desc   string      `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	Prize  *PrizeProto `protobuf:"bytes,4,opt,name=prize" json:"prize,omitempty"`
}

func (m *TreasuryTreeDataProto) Reset()                    { *m = TreasuryTreeDataProto{} }
func (m *TreasuryTreeDataProto) String() string            { return proto.CompactTextString(m) }
func (*TreasuryTreeDataProto) ProtoMessage()               {}
func (*TreasuryTreeDataProto) Descriptor() ([]byte, []int) { return fileDescriptorGarden, []int{0} }

func (m *TreasuryTreeDataProto) GetSeason() Season {
	if m != nil {
		return m.Season
	}
	return Season_InvalidSeason
}

func (m *TreasuryTreeDataProto) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *TreasuryTreeDataProto) GetPrize() *PrizeProto {
	if m != nil {
		return m.Prize
	}
	return nil
}

type GradonConfigProto struct {
	TreasuryTreeFullTimes      int32 `protobuf:"varint,1,opt,name=treasury_tree_full_times,json=treasuryTreeFullTimes,proto3" json:"treasury_tree_full_times,omitempty"`
	TreasuryTreeHelpMeLogCount int32 `protobuf:"varint,2,opt,name=treasury_tree_help_me_log_count,json=treasuryTreeHelpMeLogCount,proto3" json:"treasury_tree_help_me_log_count,omitempty"`
}

func (m *GradonConfigProto) Reset()                    { *m = GradonConfigProto{} }
func (m *GradonConfigProto) String() string            { return proto.CompactTextString(m) }
func (*GradonConfigProto) ProtoMessage()               {}
func (*GradonConfigProto) Descriptor() ([]byte, []int) { return fileDescriptorGarden, []int{1} }

func (m *GradonConfigProto) GetTreasuryTreeFullTimes() int32 {
	if m != nil {
		return m.TreasuryTreeFullTimes
	}
	return 0
}

func (m *GradonConfigProto) GetTreasuryTreeHelpMeLogCount() int32 {
	if m != nil {
		return m.TreasuryTreeHelpMeLogCount
	}
	return 0
}

// 玩家摇钱树数据
type HeroTreasuryTreeProto struct {
	WaterTimes     int32    `protobuf:"varint,1,opt,name=water_times,json=waterTimes,proto3" json:"water_times,omitempty"`
	CollectSession Season   `protobuf:"varint,2,opt,name=collect_session,json=collectSession,proto3,enum=proto.Season" json:"collect_session,omitempty"`
	CollectTime    int32    `protobuf:"varint,3,opt,name=collect_time,json=collectTime,proto3" json:"collect_time,omitempty"`
	WaterHeroIds   [][]byte `protobuf:"bytes,4,rep,name=water_hero_ids,json=waterHeroIds" json:"water_hero_ids,omitempty"`
}

func (m *HeroTreasuryTreeProto) Reset()                    { *m = HeroTreasuryTreeProto{} }
func (m *HeroTreasuryTreeProto) String() string            { return proto.CompactTextString(m) }
func (*HeroTreasuryTreeProto) ProtoMessage()               {}
func (*HeroTreasuryTreeProto) Descriptor() ([]byte, []int) { return fileDescriptorGarden, []int{2} }

func (m *HeroTreasuryTreeProto) GetWaterTimes() int32 {
	if m != nil {
		return m.WaterTimes
	}
	return 0
}

func (m *HeroTreasuryTreeProto) GetCollectSession() Season {
	if m != nil {
		return m.CollectSession
	}
	return Season_InvalidSeason
}

func (m *HeroTreasuryTreeProto) GetCollectTime() int32 {
	if m != nil {
		return m.CollectTime
	}
	return 0
}

func (m *HeroTreasuryTreeProto) GetWaterHeroIds() [][]byte {
	if m != nil {
		return m.WaterHeroIds
	}
	return nil
}

func init() {
	proto.RegisterType((*TreasuryTreeDataProto)(nil), "proto.TreasuryTreeDataProto")
	proto.RegisterType((*GradonConfigProto)(nil), "proto.GradonConfigProto")
	proto.RegisterType((*HeroTreasuryTreeProto)(nil), "proto.HeroTreasuryTreeProto")
}
func (m *TreasuryTreeDataProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TreasuryTreeDataProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Season != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGarden(dAtA, i, uint64(m.Season))
	}
	if len(m.Desc) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGarden(dAtA, i, uint64(len(m.Desc)))
		i += copy(dAtA[i:], m.Desc)
	}
	if m.Prize != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGarden(dAtA, i, uint64(m.Prize.Size()))
		n1, err := m.Prize.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *GradonConfigProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GradonConfigProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TreasuryTreeFullTimes != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGarden(dAtA, i, uint64(m.TreasuryTreeFullTimes))
	}
	if m.TreasuryTreeHelpMeLogCount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGarden(dAtA, i, uint64(m.TreasuryTreeHelpMeLogCount))
	}
	return i, nil
}

func (m *HeroTreasuryTreeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeroTreasuryTreeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.WaterTimes != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGarden(dAtA, i, uint64(m.WaterTimes))
	}
	if m.CollectSession != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGarden(dAtA, i, uint64(m.CollectSession))
	}
	if m.CollectTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGarden(dAtA, i, uint64(m.CollectTime))
	}
	if len(m.WaterHeroIds) > 0 {
		for _, b := range m.WaterHeroIds {
			dAtA[i] = 0x22
			i++
			i = encodeVarintGarden(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func encodeFixed64Garden(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Garden(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintGarden(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TreasuryTreeDataProto) Size() (n int) {
	var l int
	_ = l
	if m.Season != 0 {
		n += 1 + sovGarden(uint64(m.Season))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovGarden(uint64(l))
	}
	if m.Prize != nil {
		l = m.Prize.Size()
		n += 1 + l + sovGarden(uint64(l))
	}
	return n
}

func (m *GradonConfigProto) Size() (n int) {
	var l int
	_ = l
	if m.TreasuryTreeFullTimes != 0 {
		n += 1 + sovGarden(uint64(m.TreasuryTreeFullTimes))
	}
	if m.TreasuryTreeHelpMeLogCount != 0 {
		n += 1 + sovGarden(uint64(m.TreasuryTreeHelpMeLogCount))
	}
	return n
}

func (m *HeroTreasuryTreeProto) Size() (n int) {
	var l int
	_ = l
	if m.WaterTimes != 0 {
		n += 1 + sovGarden(uint64(m.WaterTimes))
	}
	if m.CollectSession != 0 {
		n += 1 + sovGarden(uint64(m.CollectSession))
	}
	if m.CollectTime != 0 {
		n += 1 + sovGarden(uint64(m.CollectTime))
	}
	if len(m.WaterHeroIds) > 0 {
		for _, b := range m.WaterHeroIds {
			l = len(b)
			n += 1 + l + sovGarden(uint64(l))
		}
	}
	return n
}

func sovGarden(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGarden(x uint64) (n int) {
	return sovGarden(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TreasuryTreeDataProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGarden
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TreasuryTreeDataProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TreasuryTreeDataProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Season", wireType)
			}
			m.Season = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGarden
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Season |= (Season(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGarden
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGarden
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGarden
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGarden
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Prize == nil {
				m.Prize = &PrizeProto{}
			}
			if err := m.Prize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGarden(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGarden
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GradonConfigProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGarden
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GradonConfigProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GradonConfigProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreasuryTreeFullTimes", wireType)
			}
			m.TreasuryTreeFullTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGarden
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TreasuryTreeFullTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreasuryTreeHelpMeLogCount", wireType)
			}
			m.TreasuryTreeHelpMeLogCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGarden
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TreasuryTreeHelpMeLogCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGarden(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGarden
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeroTreasuryTreeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGarden
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroTreasuryTreeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroTreasuryTreeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaterTimes", wireType)
			}
			m.WaterTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGarden
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WaterTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectSession", wireType)
			}
			m.CollectSession = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGarden
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollectSession |= (Season(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectTime", wireType)
			}
			m.CollectTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGarden
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollectTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaterHeroIds", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGarden
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGarden
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WaterHeroIds = append(m.WaterHeroIds, make([]byte, postIndex-iNdEx))
			copy(m.WaterHeroIds[len(m.WaterHeroIds)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGarden(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGarden
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGarden(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGarden
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGarden
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGarden
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGarden
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGarden
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGarden(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGarden = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGarden   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/pb/shared_proto/garden.proto", fileDescriptorGarden)
}

var fileDescriptorGarden = []byte{
	// 400 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x51, 0xc1, 0xaa, 0xd3, 0x40,
	0x14, 0x75, 0x6c, 0x53, 0x70, 0x1a, 0x2b, 0x0d, 0x14, 0x42, 0x17, 0x69, 0x2c, 0x8a, 0x59, 0x35,
	0x50, 0xa5, 0xdd, 0x5b, 0xd1, 0x0a, 0x0a, 0x25, 0xed, 0xca, 0xcd, 0x30, 0x49, 0x6e, 0x93, 0xc0,
	0x24, 0x13, 0x66, 0x26, 0x14, 0xf5, 0x2b, 0xdc, 0xf9, 0x2b, 0xfe, 0x81, 0x4b, 0x3f, 0x41, 0xea,
	0x8f, 0x48, 0x66, 0x22, 0xa4, 0x0b, 0xe1, 0xbd, 0xd5, 0x9d, 0x39, 0xf7, 0x9c, 0x7b, 0xce, 0xdc,
	0xc1, 0x9b, 0xac, 0x50, 0x79, 0x13, 0xaf, 0x12, 0x5e, 0x86, 0xac, 0xc8, 0x72, 0x55, 0xd3, 0x4b,
	0x58, 0x52, 0x06, 0xdb, 0xb0, 0x8e, 0x43, 0x99, 0x53, 0x01, 0x29, 0xa9, 0x05, 0x57, 0x3c, 0xcc,
	0xa8, 0x48, 0xa1, 0x5a, 0xe9, 0x8b, 0x63, 0xe9, 0x32, 0x7f, 0x75, 0x77, 0x79, 0x4c, 0x25, 0x18,
	0xf1, 0xfc, 0x1e, 0xa6, 0x12, 0xa8, 0xe4, 0x9d, 0xe9, 0xf2, 0x2b, 0x9e, 0x9d, 0x04, 0x50, 0xd9,
	0x88, 0xcf, 0x27, 0x01, 0xf0, 0x86, 0x2a, 0x7a, 0xd0, 0x69, 0x9e, 0xe3, 0x91, 0x21, 0xba, 0x0f,
	0x7d, 0x14, 0x4c, 0xd6, 0x8f, 0x8d, 0x60, 0x75, 0xd4, 0x60, 0xd4, 0x35, 0x1d, 0x07, 0x0f, 0x53,
	0x90, 0x89, 0x3b, 0xf0, 0x51, 0xf0, 0x28, 0xd2, 0x67, 0xe7, 0x05, 0xb6, 0x6a, 0x51, 0x7c, 0x01,
	0x77, 0xe8, 0xa3, 0x60, 0xbc, 0x9e, 0x76, 0xca, 0x43, 0x8b, 0xe9, 0xe1, 0x91, 0xe9, 0x2f, 0xbf,
	0x21, 0x3c, 0x7d, 0x27, 0x68, 0xca, 0xab, 0x1d, 0xaf, 0xce, 0x45, 0x66, 0x9c, 0xb7, 0xd8, 0x55,
	0x5d, 0x24, 0xa2, 0x04, 0x00, 0x39, 0x37, 0x8c, 0x11, 0x55, 0x94, 0x20, 0x5d, 0xe4, 0xa3, 0xc0,
	0x8a, 0x66, 0xaa, 0x17, 0xf9, 0x6d, 0xc3, 0xd8, 0xa9, 0x6d, 0x3a, 0x3b, 0xbc, 0xb8, 0x15, 0xe6,
	0xc0, 0x6a, 0x52, 0x02, 0x61, 0x3c, 0x23, 0x09, 0x6f, 0x2a, 0xa5, 0xdf, 0x62, 0x45, 0xf3, 0xbe,
	0x7e, 0x0f, 0xac, 0xfe, 0x08, 0x1f, 0x78, 0xb6, 0x6b, 0x19, 0xcb, 0x1f, 0x08, 0xcf, 0xf6, 0x20,
	0x78, 0x7f, 0x2b, 0x26, 0xd7, 0x02, 0x8f, 0x2f, 0x54, 0x81, 0xb8, 0x89, 0x82, 0x35, 0x64, 0xfc,
	0x37, 0xf8, 0x49, 0xc2, 0x19, 0x83, 0x44, 0x11, 0x09, 0x52, 0x16, 0xff, 0xdb, 0xdd, 0xa4, 0x63,
	0x1d, 0x0d, 0xc9, 0x79, 0x8a, 0xed, 0x7f, 0xba, 0x76, 0xb4, 0xde, 0xa5, 0x15, 0x8d, 0x3b, 0xac,
	0x9d, 0xed, 0x3c, 0xc3, 0x13, 0xe3, 0x9d, 0x83, 0xe0, 0xa4, 0x48, 0xa5, 0x3b, 0xf4, 0x07, 0x81,
	0x1d, 0xd9, 0x1a, 0x6d, 0xf3, 0xbe, 0x4f, 0xe5, 0x6b, 0xff, 0xe7, 0xd5, 0x43, 0xbf, 0xae, 0x1e,
	0xfa, 0x7d, 0xf5, 0xd0, 0xf7, 0x3f, 0xde, 0x83, 0x3d, 0xfa, 0x64, 0xf7, 0xff, 0x3e, 0x1e, 0xe9,
	0xf2, 0xf2, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x29, 0x2b, 0x4a, 0x8c, 0xa4, 0x02, 0x00, 0x00,
}
