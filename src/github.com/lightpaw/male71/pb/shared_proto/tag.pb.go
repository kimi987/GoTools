// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/pb/shared_proto/tag.proto
// DO NOT EDIT!

package shared_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TagMiscProto struct {
	// 标签最多的数量
	MaxCount int32 `protobuf:"varint,1,opt,name=max_count,json=maxCount,proto3" json:"max_count,omitempty"`
	// 标签最多的字的数量, >就不允许了，一个汉字算一个字，一个英文字母算一个字
	MaxCharCount int32 `protobuf:"varint,2,opt,name=max_char_count,json=maxCharCount,proto3" json:"max_char_count,omitempty"`
	// 最大记录的标签日志数量
	MaxRecordCount int32 `protobuf:"varint,3,opt,name=max_record_count,json=maxRecordCount,proto3" json:"max_record_count,omitempty"`
	// 展示给查看的标签数量
	MaxShowForViewCount int32 `protobuf:"varint,4,opt,name=max_show_for_view_count,json=maxShowForViewCount,proto3" json:"max_show_for_view_count,omitempty"`
}

func (m *TagMiscProto) Reset()                    { *m = TagMiscProto{} }
func (m *TagMiscProto) String() string            { return proto.CompactTextString(m) }
func (*TagMiscProto) ProtoMessage()               {}
func (*TagMiscProto) Descriptor() ([]byte, []int) { return fileDescriptorTag, []int{0} }

func (m *TagMiscProto) GetMaxCount() int32 {
	if m != nil {
		return m.MaxCount
	}
	return 0
}

func (m *TagMiscProto) GetMaxCharCount() int32 {
	if m != nil {
		return m.MaxCharCount
	}
	return 0
}

func (m *TagMiscProto) GetMaxRecordCount() int32 {
	if m != nil {
		return m.MaxRecordCount
	}
	return 0
}

func (m *TagMiscProto) GetMaxShowForViewCount() int32 {
	if m != nil {
		return m.MaxShowForViewCount
	}
	return 0
}

type HeroTagProto struct {
	Tags    []*TagProto       `protobuf:"bytes,4,rep,name=tags" json:"tags,omitempty"`
	Records []*TagRecordProto `protobuf:"bytes,3,rep,name=records" json:"records,omitempty"`
}

func (m *HeroTagProto) Reset()                    { *m = HeroTagProto{} }
func (m *HeroTagProto) String() string            { return proto.CompactTextString(m) }
func (*HeroTagProto) ProtoMessage()               {}
func (*HeroTagProto) Descriptor() ([]byte, []int) { return fileDescriptorTag, []int{1} }

func (m *HeroTagProto) GetTags() []*TagProto {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *HeroTagProto) GetRecords() []*TagRecordProto {
	if m != nil {
		return m.Records
	}
	return nil
}

type TagProto struct {
	Tag      string `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	Count    int32  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	TagColor int32  `protobuf:"varint,3,opt,name=tag_color,json=tagColor,proto3" json:"tag_color,omitempty"`
}

func (m *TagProto) Reset()                    { *m = TagProto{} }
func (m *TagProto) String() string            { return proto.CompactTextString(m) }
func (*TagProto) ProtoMessage()               {}
func (*TagProto) Descriptor() ([]byte, []int) { return fileDescriptorTag, []int{2} }

func (m *TagProto) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *TagProto) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *TagProto) GetTagColor() int32 {
	if m != nil {
		return m.TagColor
	}
	return 0
}

type TagRecordProto struct {
	Id       []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	FlagName string `protobuf:"bytes,6,opt,name=flag_name,json=flagName,proto3" json:"flag_name,omitempty"`
	Tag      string `protobuf:"bytes,3,opt,name=tag,proto3" json:"tag,omitempty"`
	Time     int32  `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`
}

func (m *TagRecordProto) Reset()                    { *m = TagRecordProto{} }
func (m *TagRecordProto) String() string            { return proto.CompactTextString(m) }
func (*TagRecordProto) ProtoMessage()               {}
func (*TagRecordProto) Descriptor() ([]byte, []int) { return fileDescriptorTag, []int{3} }

func (m *TagRecordProto) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *TagRecordProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TagRecordProto) GetFlagName() string {
	if m != nil {
		return m.FlagName
	}
	return ""
}

func (m *TagRecordProto) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *TagRecordProto) GetTime() int32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func init() {
	proto.RegisterType((*TagMiscProto)(nil), "proto.TagMiscProto")
	proto.RegisterType((*HeroTagProto)(nil), "proto.HeroTagProto")
	proto.RegisterType((*TagProto)(nil), "proto.TagProto")
	proto.RegisterType((*TagRecordProto)(nil), "proto.TagRecordProto")
}
func (m *TagMiscProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagMiscProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MaxCount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTag(dAtA, i, uint64(m.MaxCount))
	}
	if m.MaxCharCount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTag(dAtA, i, uint64(m.MaxCharCount))
	}
	if m.MaxRecordCount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTag(dAtA, i, uint64(m.MaxRecordCount))
	}
	if m.MaxShowForViewCount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTag(dAtA, i, uint64(m.MaxShowForViewCount))
	}
	return i, nil
}

func (m *HeroTagProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeroTagProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, msg := range m.Records {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTag(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Tags) > 0 {
		for _, msg := range m.Tags {
			dAtA[i] = 0x22
			i++
			i = encodeVarintTag(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TagProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tag) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTag(dAtA, i, uint64(len(m.Tag)))
		i += copy(dAtA[i:], m.Tag)
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTag(dAtA, i, uint64(m.Count))
	}
	if m.TagColor != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTag(dAtA, i, uint64(m.TagColor))
	}
	return i, nil
}

func (m *TagRecordProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagRecordProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTag(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTag(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Tag) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTag(dAtA, i, uint64(len(m.Tag)))
		i += copy(dAtA[i:], m.Tag)
	}
	if m.Time != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTag(dAtA, i, uint64(m.Time))
	}
	if len(m.FlagName) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTag(dAtA, i, uint64(len(m.FlagName)))
		i += copy(dAtA[i:], m.FlagName)
	}
	return i, nil
}

func encodeFixed64Tag(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Tag(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintTag(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TagMiscProto) Size() (n int) {
	var l int
	_ = l
	if m.MaxCount != 0 {
		n += 1 + sovTag(uint64(m.MaxCount))
	}
	if m.MaxCharCount != 0 {
		n += 1 + sovTag(uint64(m.MaxCharCount))
	}
	if m.MaxRecordCount != 0 {
		n += 1 + sovTag(uint64(m.MaxRecordCount))
	}
	if m.MaxShowForViewCount != 0 {
		n += 1 + sovTag(uint64(m.MaxShowForViewCount))
	}
	return n
}

func (m *HeroTagProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovTag(uint64(l))
		}
	}
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 1 + l + sovTag(uint64(l))
		}
	}
	return n
}

func (m *TagProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Tag)
	if l > 0 {
		n += 1 + l + sovTag(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovTag(uint64(m.Count))
	}
	if m.TagColor != 0 {
		n += 1 + sovTag(uint64(m.TagColor))
	}
	return n
}

func (m *TagRecordProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTag(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTag(uint64(l))
	}
	l = len(m.Tag)
	if l > 0 {
		n += 1 + l + sovTag(uint64(l))
	}
	if m.Time != 0 {
		n += 1 + sovTag(uint64(m.Time))
	}
	l = len(m.FlagName)
	if l > 0 {
		n += 1 + l + sovTag(uint64(l))
	}
	return n
}

func sovTag(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTag(x uint64) (n int) {
	return sovTag(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TagMiscProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TagMiscProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TagMiscProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCount", wireType)
			}
			m.MaxCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCharCount", wireType)
			}
			m.MaxCharCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxCharCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRecordCount", wireType)
			}
			m.MaxRecordCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRecordCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxShowForViewCount", wireType)
			}
			m.MaxShowForViewCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxShowForViewCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeroTagProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroTagProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroTagProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTag
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, &TagRecordProto{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTag
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, &TagProto{})
			if err := m.Tags[len(m.Tags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TagProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TagProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TagProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTag
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagColor", wireType)
			}
			m.TagColor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TagColor |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TagRecordProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TagRecordProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TagRecordProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTag
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTag
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTag
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlagName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTag
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FlagName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTag(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTag
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTag
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTag
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTag
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTag
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTag(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTag = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTag   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/pb/shared_proto/tag.proto", fileDescriptorTag)
}

var fileDescriptorTag = []byte{
	// 395 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xcf, 0x8e, 0xd3, 0x30,
	0x10, 0xc6, 0x49, 0x93, 0x2e, 0xe9, 0x10, 0x95, 0x95, 0x01, 0x51, 0x81, 0x14, 0x55, 0x81, 0x43,
	0x4f, 0x8d, 0xc4, 0xae, 0xc4, 0x9d, 0x95, 0xd0, 0x5e, 0xf8, 0xa3, 0x50, 0x71, 0xe0, 0x12, 0x4d,
	0x12, 0xaf, 0x63, 0x29, 0x5e, 0x57, 0x8e, 0x97, 0xf4, 0x51, 0x78, 0x0d, 0xde, 0x82, 0x23, 0x8f,
	0x80, 0xca, 0x8b, 0x20, 0x8f, 0x53, 0x5a, 0x6e, 0x9c, 0x3c, 0x63, 0xff, 0xbe, 0xf9, 0xec, 0x4f,
	0x86, 0x0b, 0x21, 0x6d, 0x7b, 0x57, 0xad, 0x6b, 0xad, 0xf2, 0x4e, 0x8a, 0xd6, 0x6e, 0x71, 0xc8,
	0x15, 0x76, 0xfc, 0x75, 0xbe, 0xad, 0xf2, 0xbe, 0x45, 0xc3, 0x9b, 0x72, 0x6b, 0xb4, 0xd5, 0xb9,
	0x45, 0xb1, 0xa6, 0x8a, 0x4d, 0x69, 0x79, 0x76, 0xf9, 0xff, 0xda, 0x0a, 0x7b, 0xee, 0xc5, 0xd9,
	0xf7, 0x00, 0x92, 0x0d, 0x8a, 0x77, 0xb2, 0xaf, 0x3f, 0xd2, 0xb4, 0xe7, 0x30, 0x53, 0xb8, 0x2b,
	0x6b, 0x7d, 0x77, 0x6b, 0x17, 0xc1, 0x32, 0x58, 0x4d, 0x8b, 0x58, 0xe1, 0xee, 0xca, 0xf5, 0xec,
	0x25, 0xcc, 0xe9, 0xb0, 0x45, 0x33, 0x12, 0x13, 0x22, 0x12, 0x47, 0xb4, 0x68, 0x3c, 0xb5, 0x82,
	0x73, 0x47, 0x19, 0x5e, 0x6b, 0xd3, 0x8c, 0x5c, 0x48, 0x9c, 0x53, 0x17, 0xb4, 0xed, 0xc9, 0x4b,
	0x78, 0xea, 0xc8, 0xbe, 0xd5, 0x43, 0x79, 0xa3, 0x4d, 0xf9, 0x55, 0xf2, 0x61, 0x14, 0x44, 0x24,
	0x78, 0xa4, 0x70, 0xf7, 0xa9, 0xd5, 0xc3, 0x5b, 0x6d, 0x3e, 0x4b, 0x3e, 0x90, 0x2a, 0x6b, 0x20,
	0xb9, 0xe6, 0x46, 0x6f, 0x50, 0xf8, 0x2b, 0xe7, 0x70, 0xdf, 0x7b, 0xf5, 0x8b, 0x70, 0x19, 0xae,
	0x1e, 0xbc, 0x7a, 0xe2, 0x1f, 0xb7, 0xde, 0xa0, 0xf0, 0x6e, 0xc4, 0x15, 0x07, 0x8a, 0xbd, 0x80,
	0xc8, 0xa2, 0xe8, 0x17, 0x11, 0xd1, 0x0f, 0x8f, 0xb4, 0xe7, 0xe8, 0x30, 0xfb, 0x00, 0xf1, 0x5f,
	0x87, 0x73, 0x08, 0x2d, 0x0a, 0x8a, 0x63, 0x56, 0xb8, 0x92, 0x3d, 0x86, 0xe9, 0x69, 0x00, 0xbe,
	0x71, 0xe1, 0x59, 0x14, 0x65, 0xad, 0x3b, 0x6d, 0xc6, 0x27, 0xc7, 0x16, 0xc5, 0x95, 0xeb, 0xb3,
	0x01, 0xe6, 0xff, 0x5e, 0x88, 0xcd, 0x61, 0x22, 0x1b, 0x9a, 0x9a, 0x14, 0x13, 0xd9, 0x30, 0x06,
	0xd1, 0x2d, 0x2a, 0x4e, 0x33, 0x67, 0x05, 0xd5, 0x07, 0xeb, 0xf0, 0x68, 0xcd, 0x20, 0xb2, 0x52,
	0xf1, 0x31, 0x21, 0xaa, 0x9d, 0xf1, 0x4d, 0x87, 0xa2, 0x24, 0xf9, 0x19, 0xb1, 0xb1, 0xdb, 0x78,
	0x8f, 0x8a, 0xbf, 0x59, 0xfe, 0xd8, 0xa7, 0xc1, 0xcf, 0x7d, 0x1a, 0xfc, 0xda, 0xa7, 0xc1, 0xb7,
	0xdf, 0xe9, 0xbd, 0xeb, 0xe0, 0x4b, 0x72, 0xfa, 0x21, 0xaa, 0x33, 0x5a, 0x2e, 0xfe, 0x04, 0x00,
	0x00, 0xff, 0xff, 0x82, 0xb5, 0x58, 0x8e, 0x80, 0x02, 0x00, 0x00,
}
