// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/pb/shared_proto/shop.proto
// DO NOT EDIT!

package shared_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 商品左上角标
type ShopGoodsTag int32

const (
	ShopGoodsTag_INVALID_TYPE ShopGoodsTag = 0
	ShopGoodsTag_CHAO_ZHI     ShopGoodsTag = 1
	ShopGoodsTag_HOT          ShopGoodsTag = 2
)

var ShopGoodsTag_name = map[int32]string{
	0: "INVALID_TYPE",
	1: "CHAO_ZHI",
	2: "HOT",
}
var ShopGoodsTag_value = map[string]int32{
	"INVALID_TYPE": 0,
	"CHAO_ZHI":     1,
	"HOT":          2,
}

func (x ShopGoodsTag) String() string {
	return proto.EnumName(ShopGoodsTag_name, int32(x))
}
func (ShopGoodsTag) EnumDescriptor() ([]byte, []int) { return fileDescriptorShop, []int{0} }

type ShopProto struct {
	// 商店类型
	// 1表示帮派商店
	// 2表示元宝商店
	// 3表示银两商店
	// 4表示玉璧商店
	// 5表示玲珑阁
	// 6表示VIP商店
	Type           int32                      `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	NormalGoods    []*NormalShopGoodsProto    `protobuf:"bytes,2,rep,name=normal_goods,json=normalGoods" json:"normal_goods,omitempty"`
	ZhenBaoGeGoods []*ZhenBaoGeShopGoodsProto `protobuf:"bytes,3,rep,name=zhen_bao_ge_goods,json=zhenBaoGeGoods" json:"zhen_bao_ge_goods,omitempty"`
}

func (m *ShopProto) Reset()                    { *m = ShopProto{} }
func (m *ShopProto) String() string            { return proto.CompactTextString(m) }
func (*ShopProto) ProtoMessage()               {}
func (*ShopProto) Descriptor() ([]byte, []int) { return fileDescriptorShop, []int{0} }

func (m *ShopProto) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ShopProto) GetNormalGoods() []*NormalShopGoodsProto {
	if m != nil {
		return m.NormalGoods
	}
	return nil
}

func (m *ShopProto) GetZhenBaoGeGoods() []*ZhenBaoGeShopGoodsProto {
	if m != nil {
		return m.ZhenBaoGeGoods
	}
	return nil
}

type NormalShopGoodsProto struct {
	Id               int32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CountLimit       int32                 `protobuf:"varint,3,opt,name=count_limit,json=countLimit,proto3" json:"count_limit,omitempty"`
	UnlockCondition  *UnlockConditionProto `protobuf:"bytes,4,opt,name=unlock_condition,json=unlockCondition" json:"unlock_condition,omitempty"`
	FreeTimes        int32                 `protobuf:"varint,7,opt,name=free_times,json=freeTimes,proto3" json:"free_times,omitempty"`
	Cost             *CostProto            `protobuf:"bytes,8,opt,name=cost" json:"cost,omitempty"`
	Prize            *PrizeProto           `protobuf:"bytes,9,opt,name=prize" json:"prize,omitempty"`
	Tag              int32                 `protobuf:"varint,10,opt,name=tag,proto3" json:"tag,omitempty"`
	ShowPrize        *PrizeProto           `protobuf:"bytes,11,opt,name=show_prize,json=showPrize" json:"show_prize,omitempty"`
	ShowSale         int32                 `protobuf:"varint,12,opt,name=show_sale,json=showSale,proto3" json:"show_sale,omitempty"`
	ShowOriginCost   *CostProto            `protobuf:"bytes,13,opt,name=show_origin_cost,json=showOriginCost" json:"show_origin_cost,omitempty"`
	VipDailyMaxCount int32                 `protobuf:"varint,14,opt,name=vip_daily_max_count,json=vipDailyMaxCount,proto3" json:"vip_daily_max_count,omitempty"`
	// 购买并使用物品
	UseImmediatelyGoods []int32 `protobuf:"varint,15,rep,name=use_immediately_goods,json=useImmediatelyGoods" json:"use_immediately_goods,omitempty"`
	GuildEventPrize     int32   `protobuf:"varint,16,opt,name=guild_event_prize,json=guildEventPrize,proto3" json:"guild_event_prize,omitempty"`
}

func (m *NormalShopGoodsProto) Reset()                    { *m = NormalShopGoodsProto{} }
func (m *NormalShopGoodsProto) String() string            { return proto.CompactTextString(m) }
func (*NormalShopGoodsProto) ProtoMessage()               {}
func (*NormalShopGoodsProto) Descriptor() ([]byte, []int) { return fileDescriptorShop, []int{1} }

func (m *NormalShopGoodsProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *NormalShopGoodsProto) GetCountLimit() int32 {
	if m != nil {
		return m.CountLimit
	}
	return 0
}

func (m *NormalShopGoodsProto) GetUnlockCondition() *UnlockConditionProto {
	if m != nil {
		return m.UnlockCondition
	}
	return nil
}

func (m *NormalShopGoodsProto) GetFreeTimes() int32 {
	if m != nil {
		return m.FreeTimes
	}
	return 0
}

func (m *NormalShopGoodsProto) GetCost() *CostProto {
	if m != nil {
		return m.Cost
	}
	return nil
}

func (m *NormalShopGoodsProto) GetPrize() *PrizeProto {
	if m != nil {
		return m.Prize
	}
	return nil
}

func (m *NormalShopGoodsProto) GetTag() int32 {
	if m != nil {
		return m.Tag
	}
	return 0
}

func (m *NormalShopGoodsProto) GetShowPrize() *PrizeProto {
	if m != nil {
		return m.ShowPrize
	}
	return nil
}

func (m *NormalShopGoodsProto) GetShowSale() int32 {
	if m != nil {
		return m.ShowSale
	}
	return 0
}

func (m *NormalShopGoodsProto) GetShowOriginCost() *CostProto {
	if m != nil {
		return m.ShowOriginCost
	}
	return nil
}

func (m *NormalShopGoodsProto) GetVipDailyMaxCount() int32 {
	if m != nil {
		return m.VipDailyMaxCount
	}
	return 0
}

func (m *NormalShopGoodsProto) GetUseImmediatelyGoods() []int32 {
	if m != nil {
		return m.UseImmediatelyGoods
	}
	return nil
}

func (m *NormalShopGoodsProto) GetGuildEventPrize() int32 {
	if m != nil {
		return m.GuildEventPrize
	}
	return 0
}

type ZhenBaoGeShopGoodsProto struct {
	Id              int32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CountLimit      int32                 `protobuf:"varint,3,opt,name=count_limit,json=countLimit,proto3" json:"count_limit,omitempty"`
	UnlockCondition *UnlockConditionProto `protobuf:"bytes,4,opt,name=unlock_condition,json=unlockCondition" json:"unlock_condition,omitempty"`
	FreeTimes       int32                 `protobuf:"varint,7,opt,name=free_times,json=freeTimes,proto3" json:"free_times,omitempty"`
	BuyCosts        []*CostProto          `protobuf:"bytes,8,rep,name=buy_costs,json=buyCosts" json:"buy_costs,omitempty"`
	Prizes          []*PrizeProto         `protobuf:"bytes,9,rep,name=prizes" json:"prizes,omitempty"`
	Levels          []int32               `protobuf:"varint,10,rep,name=levels" json:"levels,omitempty"`
	Tag             int32                 `protobuf:"varint,11,opt,name=tag,proto3" json:"tag,omitempty"`
	// 购买并使用物品
	UseImmediatelyGoods []int32 `protobuf:"varint,15,rep,name=use_immediately_goods,json=useImmediatelyGoods" json:"use_immediately_goods,omitempty"`
}

func (m *ZhenBaoGeShopGoodsProto) Reset()                    { *m = ZhenBaoGeShopGoodsProto{} }
func (m *ZhenBaoGeShopGoodsProto) String() string            { return proto.CompactTextString(m) }
func (*ZhenBaoGeShopGoodsProto) ProtoMessage()               {}
func (*ZhenBaoGeShopGoodsProto) Descriptor() ([]byte, []int) { return fileDescriptorShop, []int{2} }

func (m *ZhenBaoGeShopGoodsProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ZhenBaoGeShopGoodsProto) GetCountLimit() int32 {
	if m != nil {
		return m.CountLimit
	}
	return 0
}

func (m *ZhenBaoGeShopGoodsProto) GetUnlockCondition() *UnlockConditionProto {
	if m != nil {
		return m.UnlockCondition
	}
	return nil
}

func (m *ZhenBaoGeShopGoodsProto) GetFreeTimes() int32 {
	if m != nil {
		return m.FreeTimes
	}
	return 0
}

func (m *ZhenBaoGeShopGoodsProto) GetBuyCosts() []*CostProto {
	if m != nil {
		return m.BuyCosts
	}
	return nil
}

func (m *ZhenBaoGeShopGoodsProto) GetPrizes() []*PrizeProto {
	if m != nil {
		return m.Prizes
	}
	return nil
}

func (m *ZhenBaoGeShopGoodsProto) GetLevels() []int32 {
	if m != nil {
		return m.Levels
	}
	return nil
}

func (m *ZhenBaoGeShopGoodsProto) GetTag() int32 {
	if m != nil {
		return m.Tag
	}
	return 0
}

func (m *ZhenBaoGeShopGoodsProto) GetUseImmediatelyGoods() []int32 {
	if m != nil {
		return m.UseImmediatelyGoods
	}
	return nil
}

type HeroShopProto struct {
	DailyShopGoods []int32 `protobuf:"varint,1,rep,name=daily_shop_goods,json=dailyShopGoods" json:"daily_shop_goods,omitempty"`
	DailyBuyTimes  []int32 `protobuf:"varint,2,rep,name=daily_buy_times,json=dailyBuyTimes" json:"daily_buy_times,omitempty"`
}

func (m *HeroShopProto) Reset()                    { *m = HeroShopProto{} }
func (m *HeroShopProto) String() string            { return proto.CompactTextString(m) }
func (*HeroShopProto) ProtoMessage()               {}
func (*HeroShopProto) Descriptor() ([]byte, []int) { return fileDescriptorShop, []int{3} }

func (m *HeroShopProto) GetDailyShopGoods() []int32 {
	if m != nil {
		return m.DailyShopGoods
	}
	return nil
}

func (m *HeroShopProto) GetDailyBuyTimes() []int32 {
	if m != nil {
		return m.DailyBuyTimes
	}
	return nil
}

func init() {
	proto.RegisterType((*ShopProto)(nil), "proto.ShopProto")
	proto.RegisterType((*NormalShopGoodsProto)(nil), "proto.NormalShopGoodsProto")
	proto.RegisterType((*ZhenBaoGeShopGoodsProto)(nil), "proto.ZhenBaoGeShopGoodsProto")
	proto.RegisterType((*HeroShopProto)(nil), "proto.HeroShopProto")
	proto.RegisterEnum("proto.ShopGoodsTag", ShopGoodsTag_name, ShopGoodsTag_value)
}
func (m *ShopProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShopProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintShop(dAtA, i, uint64(m.Type))
	}
	if len(m.NormalGoods) > 0 {
		for _, msg := range m.NormalGoods {
			dAtA[i] = 0x12
			i++
			i = encodeVarintShop(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ZhenBaoGeGoods) > 0 {
		for _, msg := range m.ZhenBaoGeGoods {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintShop(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *NormalShopGoodsProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NormalShopGoodsProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintShop(dAtA, i, uint64(m.Id))
	}
	if m.CountLimit != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintShop(dAtA, i, uint64(m.CountLimit))
	}
	if m.UnlockCondition != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintShop(dAtA, i, uint64(m.UnlockCondition.Size()))
		n1, err := m.UnlockCondition.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.FreeTimes != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintShop(dAtA, i, uint64(m.FreeTimes))
	}
	if m.Cost != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintShop(dAtA, i, uint64(m.Cost.Size()))
		n2, err := m.Cost.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Prize != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintShop(dAtA, i, uint64(m.Prize.Size()))
		n3, err := m.Prize.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Tag != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintShop(dAtA, i, uint64(m.Tag))
	}
	if m.ShowPrize != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintShop(dAtA, i, uint64(m.ShowPrize.Size()))
		n4, err := m.ShowPrize.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.ShowSale != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintShop(dAtA, i, uint64(m.ShowSale))
	}
	if m.ShowOriginCost != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintShop(dAtA, i, uint64(m.ShowOriginCost.Size()))
		n5, err := m.ShowOriginCost.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.VipDailyMaxCount != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintShop(dAtA, i, uint64(m.VipDailyMaxCount))
	}
	if len(m.UseImmediatelyGoods) > 0 {
		for _, num := range m.UseImmediatelyGoods {
			dAtA[i] = 0x78
			i++
			i = encodeVarintShop(dAtA, i, uint64(num))
		}
	}
	if m.GuildEventPrize != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintShop(dAtA, i, uint64(m.GuildEventPrize))
	}
	return i, nil
}

func (m *ZhenBaoGeShopGoodsProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZhenBaoGeShopGoodsProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintShop(dAtA, i, uint64(m.Id))
	}
	if m.CountLimit != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintShop(dAtA, i, uint64(m.CountLimit))
	}
	if m.UnlockCondition != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintShop(dAtA, i, uint64(m.UnlockCondition.Size()))
		n6, err := m.UnlockCondition.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.FreeTimes != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintShop(dAtA, i, uint64(m.FreeTimes))
	}
	if len(m.BuyCosts) > 0 {
		for _, msg := range m.BuyCosts {
			dAtA[i] = 0x42
			i++
			i = encodeVarintShop(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Prizes) > 0 {
		for _, msg := range m.Prizes {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintShop(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Levels) > 0 {
		for _, num := range m.Levels {
			dAtA[i] = 0x50
			i++
			i = encodeVarintShop(dAtA, i, uint64(num))
		}
	}
	if m.Tag != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintShop(dAtA, i, uint64(m.Tag))
	}
	if len(m.UseImmediatelyGoods) > 0 {
		for _, num := range m.UseImmediatelyGoods {
			dAtA[i] = 0x78
			i++
			i = encodeVarintShop(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *HeroShopProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeroShopProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DailyShopGoods) > 0 {
		for _, num := range m.DailyShopGoods {
			dAtA[i] = 0x8
			i++
			i = encodeVarintShop(dAtA, i, uint64(num))
		}
	}
	if len(m.DailyBuyTimes) > 0 {
		for _, num := range m.DailyBuyTimes {
			dAtA[i] = 0x10
			i++
			i = encodeVarintShop(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func encodeFixed64Shop(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Shop(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintShop(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ShopProto) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovShop(uint64(m.Type))
	}
	if len(m.NormalGoods) > 0 {
		for _, e := range m.NormalGoods {
			l = e.Size()
			n += 1 + l + sovShop(uint64(l))
		}
	}
	if len(m.ZhenBaoGeGoods) > 0 {
		for _, e := range m.ZhenBaoGeGoods {
			l = e.Size()
			n += 1 + l + sovShop(uint64(l))
		}
	}
	return n
}

func (m *NormalShopGoodsProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovShop(uint64(m.Id))
	}
	if m.CountLimit != 0 {
		n += 1 + sovShop(uint64(m.CountLimit))
	}
	if m.UnlockCondition != nil {
		l = m.UnlockCondition.Size()
		n += 1 + l + sovShop(uint64(l))
	}
	if m.FreeTimes != 0 {
		n += 1 + sovShop(uint64(m.FreeTimes))
	}
	if m.Cost != nil {
		l = m.Cost.Size()
		n += 1 + l + sovShop(uint64(l))
	}
	if m.Prize != nil {
		l = m.Prize.Size()
		n += 1 + l + sovShop(uint64(l))
	}
	if m.Tag != 0 {
		n += 1 + sovShop(uint64(m.Tag))
	}
	if m.ShowPrize != nil {
		l = m.ShowPrize.Size()
		n += 1 + l + sovShop(uint64(l))
	}
	if m.ShowSale != 0 {
		n += 1 + sovShop(uint64(m.ShowSale))
	}
	if m.ShowOriginCost != nil {
		l = m.ShowOriginCost.Size()
		n += 1 + l + sovShop(uint64(l))
	}
	if m.VipDailyMaxCount != 0 {
		n += 1 + sovShop(uint64(m.VipDailyMaxCount))
	}
	if len(m.UseImmediatelyGoods) > 0 {
		for _, e := range m.UseImmediatelyGoods {
			n += 1 + sovShop(uint64(e))
		}
	}
	if m.GuildEventPrize != 0 {
		n += 2 + sovShop(uint64(m.GuildEventPrize))
	}
	return n
}

func (m *ZhenBaoGeShopGoodsProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovShop(uint64(m.Id))
	}
	if m.CountLimit != 0 {
		n += 1 + sovShop(uint64(m.CountLimit))
	}
	if m.UnlockCondition != nil {
		l = m.UnlockCondition.Size()
		n += 1 + l + sovShop(uint64(l))
	}
	if m.FreeTimes != 0 {
		n += 1 + sovShop(uint64(m.FreeTimes))
	}
	if len(m.BuyCosts) > 0 {
		for _, e := range m.BuyCosts {
			l = e.Size()
			n += 1 + l + sovShop(uint64(l))
		}
	}
	if len(m.Prizes) > 0 {
		for _, e := range m.Prizes {
			l = e.Size()
			n += 1 + l + sovShop(uint64(l))
		}
	}
	if len(m.Levels) > 0 {
		for _, e := range m.Levels {
			n += 1 + sovShop(uint64(e))
		}
	}
	if m.Tag != 0 {
		n += 1 + sovShop(uint64(m.Tag))
	}
	if len(m.UseImmediatelyGoods) > 0 {
		for _, e := range m.UseImmediatelyGoods {
			n += 1 + sovShop(uint64(e))
		}
	}
	return n
}

func (m *HeroShopProto) Size() (n int) {
	var l int
	_ = l
	if len(m.DailyShopGoods) > 0 {
		for _, e := range m.DailyShopGoods {
			n += 1 + sovShop(uint64(e))
		}
	}
	if len(m.DailyBuyTimes) > 0 {
		for _, e := range m.DailyBuyTimes {
			n += 1 + sovShop(uint64(e))
		}
	}
	return n
}

func sovShop(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozShop(x uint64) (n int) {
	return sovShop(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ShopProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShopProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShopProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NormalGoods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShop
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NormalGoods = append(m.NormalGoods, &NormalShopGoodsProto{})
			if err := m.NormalGoods[len(m.NormalGoods)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZhenBaoGeGoods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShop
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZhenBaoGeGoods = append(m.ZhenBaoGeGoods, &ZhenBaoGeShopGoodsProto{})
			if err := m.ZhenBaoGeGoods[len(m.ZhenBaoGeGoods)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NormalShopGoodsProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NormalShopGoodsProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NormalShopGoodsProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountLimit", wireType)
			}
			m.CountLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountLimit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockCondition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShop
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UnlockCondition == nil {
				m.UnlockCondition = &UnlockConditionProto{}
			}
			if err := m.UnlockCondition.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreeTimes", wireType)
			}
			m.FreeTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FreeTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cost", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShop
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cost == nil {
				m.Cost = &CostProto{}
			}
			if err := m.Cost.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShop
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Prize == nil {
				m.Prize = &PrizeProto{}
			}
			if err := m.Prize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			m.Tag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tag |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowPrize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShop
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShowPrize == nil {
				m.ShowPrize = &PrizeProto{}
			}
			if err := m.ShowPrize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowSale", wireType)
			}
			m.ShowSale = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShowSale |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowOriginCost", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShop
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShowOriginCost == nil {
				m.ShowOriginCost = &CostProto{}
			}
			if err := m.ShowOriginCost.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipDailyMaxCount", wireType)
			}
			m.VipDailyMaxCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipDailyMaxCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowShop
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UseImmediatelyGoods = append(m.UseImmediatelyGoods, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowShop
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthShop
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowShop
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UseImmediatelyGoods = append(m.UseImmediatelyGoods, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UseImmediatelyGoods", wireType)
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildEventPrize", wireType)
			}
			m.GuildEventPrize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuildEventPrize |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZhenBaoGeShopGoodsProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZhenBaoGeShopGoodsProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZhenBaoGeShopGoodsProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountLimit", wireType)
			}
			m.CountLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountLimit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockCondition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShop
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UnlockCondition == nil {
				m.UnlockCondition = &UnlockConditionProto{}
			}
			if err := m.UnlockCondition.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreeTimes", wireType)
			}
			m.FreeTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FreeTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyCosts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShop
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BuyCosts = append(m.BuyCosts, &CostProto{})
			if err := m.BuyCosts[len(m.BuyCosts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prizes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShop
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prizes = append(m.Prizes, &PrizeProto{})
			if err := m.Prizes[len(m.Prizes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowShop
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Levels = append(m.Levels, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowShop
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthShop
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowShop
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Levels = append(m.Levels, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Levels", wireType)
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			m.Tag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tag |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowShop
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UseImmediatelyGoods = append(m.UseImmediatelyGoods, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowShop
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthShop
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowShop
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UseImmediatelyGoods = append(m.UseImmediatelyGoods, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UseImmediatelyGoods", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeroShopProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroShopProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroShopProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowShop
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DailyShopGoods = append(m.DailyShopGoods, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowShop
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthShop
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowShop
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DailyShopGoods = append(m.DailyShopGoods, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DailyShopGoods", wireType)
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowShop
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DailyBuyTimes = append(m.DailyBuyTimes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowShop
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthShop
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowShop
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DailyBuyTimes = append(m.DailyBuyTimes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DailyBuyTimes", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipShop(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowShop
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShop
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShop
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthShop
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowShop
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipShop(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthShop = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowShop   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/pb/shared_proto/shop.proto", fileDescriptorShop)
}

var fileDescriptorShop = []byte{
	// 680 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x54, 0xdd, 0x4e, 0x13, 0x41,
	0x14, 0x66, 0xfb, 0x03, 0xed, 0x69, 0x69, 0x97, 0x41, 0xe3, 0x06, 0x62, 0x6d, 0x1a, 0x13, 0x91,
	0x08, 0x35, 0x6a, 0x24, 0xf1, 0xc2, 0x84, 0x16, 0xa4, 0x4d, 0x10, 0x08, 0x54, 0x13, 0xb9, 0x99,
	0x4c, 0xbb, 0xe3, 0xee, 0xc4, 0xdd, 0x9d, 0xcd, 0xce, 0x6e, 0xa1, 0x3c, 0x89, 0xcf, 0x60, 0xe2,
	0x7b, 0x78, 0xe9, 0x23, 0x18, 0x7c, 0x02, 0xdf, 0xc0, 0xcc, 0xd9, 0xa5, 0xa0, 0xc2, 0x85, 0x5e,
	0x79, 0xb5, 0x33, 0xdf, 0xf7, 0x9d, 0xef, 0x9c, 0x39, 0x73, 0x76, 0xe0, 0x99, 0x23, 0x62, 0x37,
	0x19, 0xae, 0x8f, 0xa4, 0xdf, 0xf6, 0x84, 0xe3, 0xc6, 0x21, 0x3b, 0x69, 0xfb, 0xcc, 0xe3, 0x1b,
	0xed, 0x70, 0xd8, 0x56, 0x2e, 0x8b, 0xb8, 0x4d, 0xc3, 0x48, 0xc6, 0xb2, 0xad, 0x5c, 0x19, 0xae,
	0xe3, 0x92, 0x14, 0xf1, 0xb3, 0xf4, 0x17, 0xc1, 0x43, 0xa6, 0x78, 0x1a, 0xdc, 0xfa, 0x64, 0x40,
	0xf9, 0xc8, 0x95, 0xe1, 0x01, 0x5a, 0x11, 0x28, 0xc4, 0x93, 0x90, 0x5b, 0x46, 0xd3, 0x58, 0x29,
	0x1e, 0xe2, 0x9a, 0xbc, 0x84, 0x6a, 0x20, 0x23, 0x9f, 0x79, 0xd4, 0x91, 0xd2, 0x56, 0x56, 0xae,
	0x99, 0x5f, 0xa9, 0x3c, 0x59, 0x4e, 0xe3, 0xd7, 0xf7, 0x90, 0xd2, 0x0e, 0x3b, 0x9a, 0x45, 0x9b,
	0xc3, 0x4a, 0x1a, 0x80, 0x08, 0xe9, 0xc3, 0xc2, 0x99, 0xcb, 0x03, 0x3a, 0x64, 0x92, 0x3a, 0x3c,
	0x33, 0xc9, 0xa3, 0x49, 0x23, 0x33, 0x39, 0x76, 0x79, 0xd0, 0x61, 0x72, 0x87, 0xff, 0xe6, 0x53,
	0x3b, 0xbb, 0x20, 0x10, 0x6c, 0x7d, 0x2e, 0xc0, 0xad, 0xeb, 0x12, 0x92, 0x1a, 0xe4, 0x84, 0x9d,
	0x55, 0x9d, 0x13, 0x36, 0xb9, 0x07, 0x95, 0x91, 0x4c, 0x82, 0x98, 0x7a, 0xc2, 0x17, 0xb1, 0x95,
	0x47, 0x02, 0x10, 0xda, 0xd5, 0x08, 0x79, 0x05, 0x66, 0x12, 0x78, 0x72, 0xf4, 0x81, 0x8e, 0x64,
	0x60, 0x8b, 0x58, 0xc8, 0xc0, 0x2a, 0x34, 0x8d, 0x2b, 0x07, 0x7b, 0x83, 0x74, 0xf7, 0x82, 0x4d,
	0x0b, 0xaa, 0x27, 0xbf, 0xa2, 0xe4, 0x2e, 0xc0, 0xfb, 0x88, 0x73, 0x1a, 0x0b, 0x9f, 0x2b, 0x6b,
	0x0e, 0xf3, 0x94, 0x35, 0x32, 0xd0, 0x00, 0xb9, 0x0f, 0x85, 0x91, 0x54, 0xb1, 0x55, 0x42, 0x6b,
	0x33, 0xb3, 0xee, 0x4a, 0x15, 0xa7, 0x7e, 0xc8, 0x92, 0x07, 0x50, 0x0c, 0x23, 0x71, 0xc6, 0xad,
	0x32, 0xca, 0x16, 0x32, 0xd9, 0x81, 0xc6, 0x52, 0x5d, 0xca, 0x13, 0x13, 0xf2, 0x31, 0x73, 0x2c,
	0xc0, 0x34, 0x7a, 0x49, 0x1e, 0x03, 0x28, 0x57, 0x9e, 0xd0, 0x34, 0xbe, 0x72, 0x53, 0x7c, 0x59,
	0x8b, 0x70, 0x4f, 0x96, 0x01, 0x37, 0x54, 0x31, 0x8f, 0x5b, 0x55, 0x74, 0x2a, 0x69, 0xe0, 0x88,
	0x79, 0x9c, 0xbc, 0x00, 0x13, 0x49, 0x19, 0x09, 0x47, 0x04, 0x14, 0x6b, 0x9f, 0xbf, 0xa1, 0xf6,
	0x9a, 0x56, 0xee, 0xa3, 0x50, 0x83, 0x64, 0x0d, 0x16, 0xc7, 0x22, 0xa4, 0x36, 0x13, 0xde, 0x84,
	0xfa, 0xec, 0x94, 0x62, 0xbb, 0xad, 0x1a, 0xa6, 0x30, 0xc7, 0x22, 0xdc, 0xd2, 0xcc, 0x6b, 0x76,
	0xda, 0xd5, 0x38, 0x79, 0x0e, 0xb7, 0x13, 0xc5, 0xa9, 0xf0, 0x7d, 0x6e, 0x0b, 0x16, 0x73, 0x6f,
	0x92, 0x8d, 0x46, 0xbd, 0x99, 0x5f, 0x29, 0x76, 0x72, 0xe6, 0xcc, 0xe1, 0x62, 0xa2, 0x78, 0xff,
	0x92, 0x4f, 0xc7, 0x69, 0x15, 0x16, 0x9c, 0x44, 0x78, 0x36, 0xe5, 0x63, 0x1e, 0xc4, 0xd9, 0xc1,
	0x4d, 0x4c, 0x52, 0x47, 0x62, 0x5b, 0xe3, 0x78, 0xd6, 0xd6, 0x8f, 0x1c, 0xdc, 0xb9, 0x61, 0xb6,
	0xfe, 0xdb, 0x91, 0x59, 0x83, 0xf2, 0x30, 0x99, 0x60, 0xeb, 0x95, 0x55, 0xc2, 0xdf, 0xe4, 0xcf,
	0xde, 0x97, 0x86, 0xc9, 0x44, 0xef, 0x14, 0x79, 0x08, 0xb3, 0xd8, 0x02, 0x65, 0x95, 0x51, 0x7b,
	0xcd, 0xe5, 0x67, 0x02, 0xb2, 0x04, 0xb3, 0x1e, 0x1f, 0x73, 0x4f, 0x59, 0x30, 0x6d, 0x71, 0x86,
	0x5c, 0x4c, 0x56, 0xe5, 0x72, 0xb2, 0xfe, 0xf1, 0x7e, 0x5a, 0x02, 0xe6, 0x7b, 0x3c, 0x92, 0x97,
	0x6f, 0xca, 0x23, 0x30, 0xd3, 0x99, 0xd0, 0x4f, 0x56, 0xe6, 0x61, 0x4c, 0x3d, 0x6a, 0xc8, 0x4d,
	0xef, 0x86, 0xac, 0x42, 0x3d, 0x55, 0xeb, 0x26, 0xa4, 0x2d, 0xca, 0x4d, 0xc5, 0xf3, 0x48, 0x75,
	0x92, 0x09, 0xb6, 0x6a, 0x75, 0x03, 0xaa, 0xd3, 0xc0, 0x01, 0x73, 0x88, 0x09, 0xd5, 0xfe, 0xde,
	0xdb, 0xcd, 0xdd, 0xfe, 0x16, 0x1d, 0xbc, 0x3b, 0xd8, 0x36, 0x67, 0x48, 0x15, 0x4a, 0xdd, 0xde,
	0xe6, 0x3e, 0x3d, 0xee, 0xf5, 0x4d, 0x83, 0xcc, 0x41, 0xbe, 0xb7, 0x3f, 0x30, 0x73, 0x9d, 0xe6,
	0x97, 0xf3, 0x86, 0xf1, 0xf5, 0xbc, 0x61, 0x7c, 0x3b, 0x6f, 0x18, 0x1f, 0xbf, 0x37, 0x66, 0x7a,
	0xc6, 0x71, 0xf5, 0xea, 0x0b, 0x39, 0x9c, 0xc5, 0xcf, 0xd3, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x89, 0x90, 0xa5, 0x9b, 0x92, 0x05, 0x00, 0x00,
}
