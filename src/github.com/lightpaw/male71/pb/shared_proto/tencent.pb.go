// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/pb/shared_proto/tencent.proto
// DO NOT EDIT!

package shared_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TencentInfoProto struct {
	HeroID         []byte  `protobuf:"bytes,1,opt,name=heroID,proto3" json:"heroID,omitempty"`
	OpenID         string  `protobuf:"bytes,2,opt,name=openID,proto3" json:"openID,omitempty"`
	PlatID         int32   `protobuf:"varint,3,opt,name=platID,proto3" json:"platID,omitempty"`
	ClientIP       string  `protobuf:"bytes,4,opt,name=clientIP,proto3" json:"clientIP,omitempty"`
	ClientTelecom  string  `protobuf:"bytes,5,opt,name=clientTelecom,proto3" json:"clientTelecom,omitempty"`
	ClientNetwork  string  `protobuf:"bytes,6,opt,name=clientNetwork,proto3" json:"clientNetwork,omitempty"`
	ClientHardware string  `protobuf:"bytes,7,opt,name=clientHardware,proto3" json:"clientHardware,omitempty"`
	ClientSoftware string  `protobuf:"bytes,8,opt,name=clientSoftware,proto3" json:"clientSoftware,omitempty"`
	ClientVersion  string  `protobuf:"bytes,9,opt,name=clientVersion,proto3" json:"clientVersion,omitempty"`
	RegChannel     string  `protobuf:"bytes,10,opt,name=RegChannel,proto3" json:"RegChannel,omitempty"`
	ScreenWidth    int32   `protobuf:"varint,11,opt,name=ScreenWidth,proto3" json:"ScreenWidth,omitempty"`
	ScreenHight    int32   `protobuf:"varint,12,opt,name=ScreenHight,proto3" json:"ScreenHight,omitempty"`
	Density        float32 `protobuf:"fixed32,13,opt,name=Density,proto3" json:"Density,omitempty"`
	LoginChannel   string  `protobuf:"bytes,14,opt,name=LoginChannel,proto3" json:"LoginChannel,omitempty"`
	CpuHardware    string  `protobuf:"bytes,15,opt,name=CpuHardware,proto3" json:"CpuHardware,omitempty"`
	Memory         int32   `protobuf:"varint,16,opt,name=Memory,proto3" json:"Memory,omitempty"`
	GLRender       string  `protobuf:"bytes,17,opt,name=GLRender,proto3" json:"GLRender,omitempty"`
	GLVersion      string  `protobuf:"bytes,18,opt,name=GLVersion,proto3" json:"GLVersion,omitempty"`
	DeviceId       string  `protobuf:"bytes,19,opt,name=DeviceId,proto3" json:"DeviceId,omitempty"`
}

func (m *TencentInfoProto) Reset()                    { *m = TencentInfoProto{} }
func (m *TencentInfoProto) String() string            { return proto.CompactTextString(m) }
func (*TencentInfoProto) ProtoMessage()               {}
func (*TencentInfoProto) Descriptor() ([]byte, []int) { return fileDescriptorTencent, []int{0} }

func (m *TencentInfoProto) GetHeroID() []byte {
	if m != nil {
		return m.HeroID
	}
	return nil
}

func (m *TencentInfoProto) GetOpenID() string {
	if m != nil {
		return m.OpenID
	}
	return ""
}

func (m *TencentInfoProto) GetPlatID() int32 {
	if m != nil {
		return m.PlatID
	}
	return 0
}

func (m *TencentInfoProto) GetClientIP() string {
	if m != nil {
		return m.ClientIP
	}
	return ""
}

func (m *TencentInfoProto) GetClientTelecom() string {
	if m != nil {
		return m.ClientTelecom
	}
	return ""
}

func (m *TencentInfoProto) GetClientNetwork() string {
	if m != nil {
		return m.ClientNetwork
	}
	return ""
}

func (m *TencentInfoProto) GetClientHardware() string {
	if m != nil {
		return m.ClientHardware
	}
	return ""
}

func (m *TencentInfoProto) GetClientSoftware() string {
	if m != nil {
		return m.ClientSoftware
	}
	return ""
}

func (m *TencentInfoProto) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *TencentInfoProto) GetRegChannel() string {
	if m != nil {
		return m.RegChannel
	}
	return ""
}

func (m *TencentInfoProto) GetScreenWidth() int32 {
	if m != nil {
		return m.ScreenWidth
	}
	return 0
}

func (m *TencentInfoProto) GetScreenHight() int32 {
	if m != nil {
		return m.ScreenHight
	}
	return 0
}

func (m *TencentInfoProto) GetDensity() float32 {
	if m != nil {
		return m.Density
	}
	return 0
}

func (m *TencentInfoProto) GetLoginChannel() string {
	if m != nil {
		return m.LoginChannel
	}
	return ""
}

func (m *TencentInfoProto) GetCpuHardware() string {
	if m != nil {
		return m.CpuHardware
	}
	return ""
}

func (m *TencentInfoProto) GetMemory() int32 {
	if m != nil {
		return m.Memory
	}
	return 0
}

func (m *TencentInfoProto) GetGLRender() string {
	if m != nil {
		return m.GLRender
	}
	return ""
}

func (m *TencentInfoProto) GetGLVersion() string {
	if m != nil {
		return m.GLVersion
	}
	return ""
}

func (m *TencentInfoProto) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func init() {
	proto.RegisterType((*TencentInfoProto)(nil), "proto.TencentInfoProto")
}
func (m *TencentInfoProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TencentInfoProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HeroID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTencent(dAtA, i, uint64(len(m.HeroID)))
		i += copy(dAtA[i:], m.HeroID)
	}
	if len(m.OpenID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTencent(dAtA, i, uint64(len(m.OpenID)))
		i += copy(dAtA[i:], m.OpenID)
	}
	if m.PlatID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTencent(dAtA, i, uint64(m.PlatID))
	}
	if len(m.ClientIP) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTencent(dAtA, i, uint64(len(m.ClientIP)))
		i += copy(dAtA[i:], m.ClientIP)
	}
	if len(m.ClientTelecom) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTencent(dAtA, i, uint64(len(m.ClientTelecom)))
		i += copy(dAtA[i:], m.ClientTelecom)
	}
	if len(m.ClientNetwork) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTencent(dAtA, i, uint64(len(m.ClientNetwork)))
		i += copy(dAtA[i:], m.ClientNetwork)
	}
	if len(m.ClientHardware) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTencent(dAtA, i, uint64(len(m.ClientHardware)))
		i += copy(dAtA[i:], m.ClientHardware)
	}
	if len(m.ClientSoftware) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTencent(dAtA, i, uint64(len(m.ClientSoftware)))
		i += copy(dAtA[i:], m.ClientSoftware)
	}
	if len(m.ClientVersion) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTencent(dAtA, i, uint64(len(m.ClientVersion)))
		i += copy(dAtA[i:], m.ClientVersion)
	}
	if len(m.RegChannel) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTencent(dAtA, i, uint64(len(m.RegChannel)))
		i += copy(dAtA[i:], m.RegChannel)
	}
	if m.ScreenWidth != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTencent(dAtA, i, uint64(m.ScreenWidth))
	}
	if m.ScreenHight != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTencent(dAtA, i, uint64(m.ScreenHight))
	}
	if m.Density != 0 {
		dAtA[i] = 0x6d
		i++
		i = encodeFixed32Tencent(dAtA, i, uint32(math.Float32bits(float32(m.Density))))
	}
	if len(m.LoginChannel) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintTencent(dAtA, i, uint64(len(m.LoginChannel)))
		i += copy(dAtA[i:], m.LoginChannel)
	}
	if len(m.CpuHardware) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintTencent(dAtA, i, uint64(len(m.CpuHardware)))
		i += copy(dAtA[i:], m.CpuHardware)
	}
	if m.Memory != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTencent(dAtA, i, uint64(m.Memory))
	}
	if len(m.GLRender) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTencent(dAtA, i, uint64(len(m.GLRender)))
		i += copy(dAtA[i:], m.GLRender)
	}
	if len(m.GLVersion) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTencent(dAtA, i, uint64(len(m.GLVersion)))
		i += copy(dAtA[i:], m.GLVersion)
	}
	if len(m.DeviceId) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTencent(dAtA, i, uint64(len(m.DeviceId)))
		i += copy(dAtA[i:], m.DeviceId)
	}
	return i, nil
}

func encodeFixed64Tencent(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Tencent(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintTencent(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TencentInfoProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.HeroID)
	if l > 0 {
		n += 1 + l + sovTencent(uint64(l))
	}
	l = len(m.OpenID)
	if l > 0 {
		n += 1 + l + sovTencent(uint64(l))
	}
	if m.PlatID != 0 {
		n += 1 + sovTencent(uint64(m.PlatID))
	}
	l = len(m.ClientIP)
	if l > 0 {
		n += 1 + l + sovTencent(uint64(l))
	}
	l = len(m.ClientTelecom)
	if l > 0 {
		n += 1 + l + sovTencent(uint64(l))
	}
	l = len(m.ClientNetwork)
	if l > 0 {
		n += 1 + l + sovTencent(uint64(l))
	}
	l = len(m.ClientHardware)
	if l > 0 {
		n += 1 + l + sovTencent(uint64(l))
	}
	l = len(m.ClientSoftware)
	if l > 0 {
		n += 1 + l + sovTencent(uint64(l))
	}
	l = len(m.ClientVersion)
	if l > 0 {
		n += 1 + l + sovTencent(uint64(l))
	}
	l = len(m.RegChannel)
	if l > 0 {
		n += 1 + l + sovTencent(uint64(l))
	}
	if m.ScreenWidth != 0 {
		n += 1 + sovTencent(uint64(m.ScreenWidth))
	}
	if m.ScreenHight != 0 {
		n += 1 + sovTencent(uint64(m.ScreenHight))
	}
	if m.Density != 0 {
		n += 5
	}
	l = len(m.LoginChannel)
	if l > 0 {
		n += 1 + l + sovTencent(uint64(l))
	}
	l = len(m.CpuHardware)
	if l > 0 {
		n += 1 + l + sovTencent(uint64(l))
	}
	if m.Memory != 0 {
		n += 2 + sovTencent(uint64(m.Memory))
	}
	l = len(m.GLRender)
	if l > 0 {
		n += 2 + l + sovTencent(uint64(l))
	}
	l = len(m.GLVersion)
	if l > 0 {
		n += 2 + l + sovTencent(uint64(l))
	}
	l = len(m.DeviceId)
	if l > 0 {
		n += 2 + l + sovTencent(uint64(l))
	}
	return n
}

func sovTencent(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTencent(x uint64) (n int) {
	return sovTencent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TencentInfoProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTencent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TencentInfoProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TencentInfoProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTencent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTencent
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeroID = append(m.HeroID[:0], dAtA[iNdEx:postIndex]...)
			if m.HeroID == nil {
				m.HeroID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTencent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTencent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatID", wireType)
			}
			m.PlatID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTencent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTencent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTencent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientIP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientTelecom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTencent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTencent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientTelecom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientNetwork", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTencent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTencent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientNetwork = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientHardware", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTencent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTencent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientHardware = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientSoftware", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTencent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTencent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientSoftware = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTencent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTencent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegChannel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTencent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTencent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegChannel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScreenWidth", wireType)
			}
			m.ScreenWidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTencent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScreenWidth |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScreenHight", wireType)
			}
			m.ScreenHight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTencent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScreenHight |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Density", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(dAtA[iNdEx-4])
			v |= uint32(dAtA[iNdEx-3]) << 8
			v |= uint32(dAtA[iNdEx-2]) << 16
			v |= uint32(dAtA[iNdEx-1]) << 24
			m.Density = float32(math.Float32frombits(v))
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginChannel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTencent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTencent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoginChannel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuHardware", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTencent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTencent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CpuHardware = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memory", wireType)
			}
			m.Memory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTencent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Memory |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GLRender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTencent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTencent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GLRender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GLVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTencent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTencent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GLVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTencent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTencent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTencent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTencent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTencent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTencent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTencent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTencent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTencent
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTencent
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTencent(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTencent = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTencent   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/pb/shared_proto/tencent.proto", fileDescriptorTencent)
}

var fileDescriptorTencent = []byte{
	// 411 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0x41, 0x6b, 0xd4, 0x40,
	0x14, 0xc7, 0x9d, 0xda, 0xdd, 0x76, 0xa7, 0x69, 0xad, 0x23, 0xc8, 0x43, 0x24, 0x84, 0x22, 0x92,
	0x53, 0x73, 0xf0, 0xd0, 0xbb, 0x0d, 0x74, 0x03, 0xab, 0x94, 0xb4, 0x28, 0x78, 0x91, 0x6c, 0xf2,
	0x9a, 0x0c, 0x26, 0x33, 0x61, 0x76, 0xea, 0xb2, 0xdf, 0xc4, 0x8f, 0xe4, 0xd1, 0x8f, 0x20, 0xeb,
	0xcd, 0x4f, 0x21, 0x33, 0x49, 0x36, 0xb3, 0x9e, 0x26, 0xff, 0xdf, 0xfc, 0xde, 0x3c, 0x78, 0x2f,
	0xf4, 0xaa, 0xe4, 0xba, 0x7a, 0x5c, 0x5e, 0xe6, 0xb2, 0x89, 0x6a, 0x5e, 0x56, 0xba, 0xcd, 0xd6,
	0x51, 0x93, 0xd5, 0x78, 0x15, 0xb5, 0xcb, 0x68, 0x55, 0x65, 0x0a, 0x8b, 0xaf, 0xad, 0x92, 0x5a,
	0x46, 0x1a, 0x45, 0x8e, 0x42, 0x5f, 0xda, 0xc4, 0x26, 0xf6, 0xb8, 0xf8, 0x7b, 0x48, 0xcf, 0xef,
	0xbb, 0x8b, 0x44, 0x3c, 0xc8, 0x5b, 0x7b, 0xf7, 0x92, 0x4e, 0x2b, 0x54, 0x32, 0x89, 0x81, 0x04,
	0x24, 0xf4, 0xd2, 0x3e, 0x19, 0x2e, 0x5b, 0x14, 0x49, 0x0c, 0x07, 0x01, 0x09, 0x67, 0x69, 0x9f,
	0x0c, 0x6f, 0xeb, 0x4c, 0x27, 0x31, 0x3c, 0x0d, 0x48, 0x38, 0x49, 0xfb, 0xc4, 0x5e, 0xd1, 0xe3,
	0xbc, 0xe6, 0xe6, 0xe9, 0x5b, 0x38, 0xb4, 0x15, 0xbb, 0xcc, 0xde, 0xd0, 0xd3, 0xee, 0xfb, 0x1e,
	0x6b, 0xcc, 0x65, 0x03, 0x13, 0x2b, 0xec, 0xc3, 0xd1, 0xfa, 0x88, 0x7a, 0x2d, 0xd5, 0x37, 0x98,
	0xba, 0x56, 0x0f, 0xd9, 0x5b, 0x7a, 0xd6, 0x81, 0x79, 0xa6, 0x8a, 0x75, 0xa6, 0x10, 0x8e, 0xac,
	0xf6, 0x1f, 0x1d, 0xbd, 0x3b, 0xf9, 0xa0, 0xad, 0x77, 0xec, 0x7a, 0x03, 0x1d, 0xbb, 0x7e, 0x42,
	0xb5, 0xe2, 0x52, 0xc0, 0xcc, 0xed, 0xda, 0x43, 0xe6, 0x53, 0x9a, 0x62, 0x79, 0x5d, 0x65, 0x42,
	0x60, 0x0d, 0xd4, 0x2a, 0x0e, 0x61, 0x01, 0x3d, 0xb9, 0xcb, 0x15, 0xa2, 0xf8, 0xcc, 0x0b, 0x5d,
	0xc1, 0x89, 0x1d, 0x8d, 0x8b, 0x46, 0x63, 0x6e, 0x36, 0x07, 0x9e, 0x6b, 0x58, 0xc4, 0x80, 0x1e,
	0xc5, 0x28, 0x56, 0x5c, 0x6f, 0xe0, 0x34, 0x20, 0xe1, 0x41, 0x3a, 0x44, 0x76, 0x41, 0xbd, 0x85,
	0x2c, 0xb9, 0x18, 0xfa, 0x9f, 0xd9, 0xfe, 0x7b, 0xcc, 0xbc, 0x7f, 0xdd, 0x3e, 0xee, 0x86, 0xf2,
	0xcc, 0x2a, 0x2e, 0x32, 0x9b, 0xfb, 0x80, 0x8d, 0x54, 0x1b, 0x38, 0xef, 0x36, 0xd7, 0x25, 0xb3,
	0xb9, 0x9b, 0x45, 0x8a, 0xa2, 0x40, 0x05, 0xcf, 0xbb, 0xcd, 0x0d, 0x99, 0xbd, 0xa6, 0xb3, 0x9b,
	0xc5, 0x30, 0x19, 0x66, 0x2f, 0x47, 0x60, 0x2a, 0x63, 0xfc, 0xce, 0x73, 0x4c, 0x0a, 0x78, 0xd1,
	0x55, 0x0e, 0xf9, 0x7d, 0xf0, 0x73, 0xeb, 0x93, 0x5f, 0x5b, 0x9f, 0xfc, 0xde, 0xfa, 0xe4, 0xc7,
	0x1f, 0xff, 0xc9, 0x9c, 0x7c, 0xf1, 0xdc, 0x7f, 0x74, 0x39, 0xb5, 0xc7, 0xbb, 0x7f, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x62, 0xea, 0xd8, 0xb2, 0xd7, 0x02, 0x00, 0x00,
}
