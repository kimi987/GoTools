// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/pb/shared_proto/setting.proto
// DO NOT EDIT!

package shared_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SettingType int32

const (
	SettingType_InvalidSettingType             SettingType = 0
	SettingType_ST_BUILDING                    SettingType = 1
	SettingType_ST_TECH                        SettingType = 2
	SettingType_ST_RECRUIT_SOLDIER_FULL        SettingType = 3
	SettingType_ST_TRAINING                    SettingType = 4
	SettingType_ST_FARM                        SettingType = 5
	SettingType_ST_BEEN_ATTACKING              SettingType = 6
	SettingType_ST_GUILD_MEMBER_BEEN_ATTACKING SettingType = 7
	SettingType_ST_TIE_JIANG_PU_TIMES          SettingType = 8
	SettingType_ST_TIE_JIANG_PU_FORGE_COLLECT  SettingType = 9
	SettingType_ST_DUNGEON_TIMES               SettingType = 10
	SettingType_ST_MULTI_LEVEL_NPC             SettingType = 11
	SettingType_ST_BAI_ZHAN                    SettingType = 12
	SettingType_ST_INVESTIGATE                 SettingType = 13
	SettingType_ST_BEEN_ROBBING                SettingType = 14
	SettingType_ST_GUILD_MEMBER_BEEN_ROBBING   SettingType = 15
	SettingType_ST_TROOP_BACK_HOME             SettingType = 16
	SettingType_ST_COUNTDOWN_PRIZE             SettingType = 17
	SettingType_ST_TREASURE_TREE               SettingType = 18
	SettingType_ST_GUILD_BIG_BOX               SettingType = 19
	SettingType_ST_GUILD_XIONG_NU              SettingType = 20
	SettingType_ST_GUILD_IMPEACH               SettingType = 21
	SettingType_ST_CHAT_PRIVATE                SettingType = 22
	SettingType_ST_ZHENG_WU_REFRESH            SettingType = 23
)

var SettingType_name = map[int32]string{
	0:  "InvalidSettingType",
	1:  "ST_BUILDING",
	2:  "ST_TECH",
	3:  "ST_RECRUIT_SOLDIER_FULL",
	4:  "ST_TRAINING",
	5:  "ST_FARM",
	6:  "ST_BEEN_ATTACKING",
	7:  "ST_GUILD_MEMBER_BEEN_ATTACKING",
	8:  "ST_TIE_JIANG_PU_TIMES",
	9:  "ST_TIE_JIANG_PU_FORGE_COLLECT",
	10: "ST_DUNGEON_TIMES",
	11: "ST_MULTI_LEVEL_NPC",
	12: "ST_BAI_ZHAN",
	13: "ST_INVESTIGATE",
	14: "ST_BEEN_ROBBING",
	15: "ST_GUILD_MEMBER_BEEN_ROBBING",
	16: "ST_TROOP_BACK_HOME",
	17: "ST_COUNTDOWN_PRIZE",
	18: "ST_TREASURE_TREE",
	19: "ST_GUILD_BIG_BOX",
	20: "ST_GUILD_XIONG_NU",
	21: "ST_GUILD_IMPEACH",
	22: "ST_CHAT_PRIVATE",
	23: "ST_ZHENG_WU_REFRESH",
}
var SettingType_value = map[string]int32{
	"InvalidSettingType":             0,
	"ST_BUILDING":                    1,
	"ST_TECH":                        2,
	"ST_RECRUIT_SOLDIER_FULL":        3,
	"ST_TRAINING":                    4,
	"ST_FARM":                        5,
	"ST_BEEN_ATTACKING":              6,
	"ST_GUILD_MEMBER_BEEN_ATTACKING": 7,
	"ST_TIE_JIANG_PU_TIMES":          8,
	"ST_TIE_JIANG_PU_FORGE_COLLECT":  9,
	"ST_DUNGEON_TIMES":               10,
	"ST_MULTI_LEVEL_NPC":             11,
	"ST_BAI_ZHAN":                    12,
	"ST_INVESTIGATE":                 13,
	"ST_BEEN_ROBBING":                14,
	"ST_GUILD_MEMBER_BEEN_ROBBING":   15,
	"ST_TROOP_BACK_HOME":             16,
	"ST_COUNTDOWN_PRIZE":             17,
	"ST_TREASURE_TREE":               18,
	"ST_GUILD_BIG_BOX":               19,
	"ST_GUILD_XIONG_NU":              20,
	"ST_GUILD_IMPEACH":               21,
	"ST_CHAT_PRIVATE":                22,
	"ST_ZHENG_WU_REFRESH":            23,
}

func (x SettingType) String() string {
	return proto.EnumName(SettingType_name, int32(x))
}
func (SettingType) EnumDescriptor() ([]byte, []int) { return fileDescriptorSetting, []int{0} }

// 隐私设置
type PrivacySettingType int32

const (
	PrivacySettingType_InvalidPrivacySettingType  PrivacySettingType = 0
	PrivacySettingType_PST_SHOW_VIP_LEVEL         PrivacySettingType = 1
	PrivacySettingType_PST_SHOW_VIP_HEAD_FRAME    PrivacySettingType = 2
	PrivacySettingType_PST_SHOW_VIP_CHAT_BUBBLE   PrivacySettingType = 3
	PrivacySettingType_PST_SHARE_GUILD_GIFT_GIVER PrivacySettingType = 11
)

var PrivacySettingType_name = map[int32]string{
	0:  "InvalidPrivacySettingType",
	1:  "PST_SHOW_VIP_LEVEL",
	2:  "PST_SHOW_VIP_HEAD_FRAME",
	3:  "PST_SHOW_VIP_CHAT_BUBBLE",
	11: "PST_SHARE_GUILD_GIFT_GIVER",
}
var PrivacySettingType_value = map[string]int32{
	"InvalidPrivacySettingType":  0,
	"PST_SHOW_VIP_LEVEL":         1,
	"PST_SHOW_VIP_HEAD_FRAME":    2,
	"PST_SHOW_VIP_CHAT_BUBBLE":   3,
	"PST_SHARE_GUILD_GIFT_GIVER": 11,
}

func (x PrivacySettingType) String() string {
	return proto.EnumName(PrivacySettingType_name, int32(x))
}
func (PrivacySettingType) EnumDescriptor() ([]byte, []int) { return fileDescriptorSetting, []int{1} }

// 英雄设置
type HeroSettingsProto struct {
	Settings        []bool               `protobuf:"varint,1,rep,name=settings" json:"settings,omitempty"`
	PrivacySettings []PrivacySettingType `protobuf:"varint,2,rep,name=privacy_settings,json=privacySettings,enum=proto.PrivacySettingType" json:"privacy_settings,omitempty"`
}

func (m *HeroSettingsProto) Reset()                    { *m = HeroSettingsProto{} }
func (m *HeroSettingsProto) String() string            { return proto.CompactTextString(m) }
func (*HeroSettingsProto) ProtoMessage()               {}
func (*HeroSettingsProto) Descriptor() ([]byte, []int) { return fileDescriptorSetting, []int{0} }

func (m *HeroSettingsProto) GetSettings() []bool {
	if m != nil {
		return m.Settings
	}
	return nil
}

func (m *HeroSettingsProto) GetPrivacySettings() []PrivacySettingType {
	if m != nil {
		return m.PrivacySettings
	}
	return nil
}

func init() {
	proto.RegisterType((*HeroSettingsProto)(nil), "proto.HeroSettingsProto")
	proto.RegisterEnum("proto.SettingType", SettingType_name, SettingType_value)
	proto.RegisterEnum("proto.PrivacySettingType", PrivacySettingType_name, PrivacySettingType_value)
}
func (m *HeroSettingsProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeroSettingsProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Settings) > 0 {
		for _, b := range m.Settings {
			dAtA[i] = 0x8
			i++
			if b {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i++
		}
	}
	if len(m.PrivacySettings) > 0 {
		for _, num := range m.PrivacySettings {
			dAtA[i] = 0x10
			i++
			i = encodeVarintSetting(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func encodeFixed64Setting(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Setting(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintSetting(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *HeroSettingsProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Settings) > 0 {
		n += 2 * len(m.Settings)
	}
	if len(m.PrivacySettings) > 0 {
		for _, e := range m.PrivacySettings {
			n += 1 + sovSetting(uint64(e))
		}
	}
	return n
}

func sovSetting(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSetting(x uint64) (n int) {
	return sovSetting(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HeroSettingsProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSetting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroSettingsProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroSettingsProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSetting
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Settings = append(m.Settings, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSetting
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSetting
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSetting
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Settings = append(m.Settings, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
		case 2:
			if wireType == 0 {
				var v PrivacySettingType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSetting
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (PrivacySettingType(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PrivacySettings = append(m.PrivacySettings, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSetting
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSetting
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v PrivacySettingType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSetting
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (PrivacySettingType(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PrivacySettings = append(m.PrivacySettings, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivacySettings", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSetting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSetting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSetting(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSetting
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSetting
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSetting
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSetting
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSetting
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSetting(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSetting = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSetting   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/pb/shared_proto/setting.proto", fileDescriptorSetting)
}

var fileDescriptorSetting = []byte{
	// 611 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x53, 0xcd, 0x4e, 0xdb, 0x4c,
	0x14, 0x8d, 0x13, 0xfe, 0xbe, 0x09, 0x1f, 0x19, 0x86, 0xff, 0xef, 0x03, 0x2b, 0x65, 0x85, 0x58,
	0x10, 0xa9, 0x5d, 0xb0, 0x1e, 0x3b, 0x37, 0xf6, 0x14, 0x7b, 0x6c, 0xcd, 0x8c, 0x03, 0xca, 0xe6,
	0x2a, 0x40, 0x04, 0x91, 0x80, 0x44, 0x49, 0x4a, 0xc5, 0xa2, 0xef, 0xd1, 0x27, 0xe8, 0x33, 0xf4,
	0x11, 0xba, 0xec, 0x23, 0x54, 0xf4, 0x45, 0x2a, 0xc7, 0x03, 0x22, 0xd0, 0xd5, 0xd8, 0xe7, 0x9c,
	0x7b, 0xee, 0x3d, 0xa3, 0x3b, 0xe4, 0xf8, 0xaa, 0x3f, 0xb9, 0xfe, 0x74, 0x7e, 0x74, 0x31, 0xb8,
	0x6d, 0xdc, 0xf4, 0xaf, 0xae, 0x27, 0xc3, 0xee, 0xe7, 0xc6, 0x6d, 0xf7, 0xa6, 0x77, 0xdc, 0x18,
	0x9e, 0x37, 0xc6, 0xd7, 0xdd, 0x51, 0xef, 0x12, 0x87, 0xa3, 0xc1, 0x64, 0xd0, 0x18, 0xf7, 0x26,
	0x93, 0xfe, 0xdd, 0xd5, 0xd1, 0xf4, 0x8f, 0xcd, 0x4f, 0x8f, 0xfd, 0x2f, 0x64, 0x35, 0xec, 0x8d,
	0x06, 0xba, 0xe0, 0xc6, 0xe9, 0x94, 0x73, 0xc9, 0x92, 0x15, 0x8f, 0xb7, 0x9d, 0x7a, 0xe5, 0x60,
	0xc9, 0x2b, 0xd3, 0x92, 0x7a, 0xc6, 0x58, 0x48, 0xe8, 0x70, 0xd4, 0xbf, 0xef, 0x5e, 0x3c, 0xe0,
	0xb3, 0xae, 0x5c, 0xaf, 0x1c, 0xac, 0xbc, 0xdf, 0x29, 0xdc, 0x8f, 0xd2, 0x82, 0xb6, 0xb6, 0xe6,
	0x61, 0xd8, 0x9b, 0x5a, 0xd4, 0x86, 0x33, 0xf8, 0xf8, 0xf0, 0xfb, 0x1c, 0xa9, 0xbe, 0x10, 0xb1,
	0x4d, 0xc2, 0xc4, 0xdd, 0x7d, 0xf7, 0xa6, 0x7f, 0xf9, 0x02, 0xa5, 0x25, 0x56, 0x23, 0x55, 0x6d,
	0xd0, 0xcb, 0x44, 0xd4, 0x14, 0x32, 0xa0, 0x0e, 0xab, 0x92, 0x45, 0x6d, 0xd0, 0x80, 0x1f, 0xd2,
	0x32, 0xfb, 0x9f, 0x6c, 0x69, 0x83, 0x0a, 0x7c, 0x95, 0x09, 0x83, 0x3a, 0x89, 0x9a, 0x02, 0x14,
	0xb6, 0xb2, 0x28, 0xa2, 0x15, 0x5b, 0x6a, 0x14, 0x17, 0x32, 0x2f, 0x9d, 0xb3, 0xa5, 0x2d, 0xae,
	0x62, 0x3a, 0xcf, 0x36, 0xc8, 0x6a, 0x6e, 0x0c, 0x20, 0x91, 0x1b, 0xc3, 0xfd, 0x93, 0x5c, 0xb3,
	0xc0, 0xf6, 0x89, 0xab, 0x0d, 0x06, 0x79, 0x3f, 0x8c, 0x21, 0xf6, 0x40, 0xbd, 0xd6, 0x2c, 0xb2,
	0x1d, 0xb2, 0x91, 0x1b, 0x0b, 0xc0, 0x8f, 0x82, 0xcb, 0x00, 0xd3, 0x0c, 0x8d, 0x88, 0x41, 0xd3,
	0x25, 0xf6, 0x8e, 0xec, 0xbd, 0xa6, 0x5a, 0x89, 0x0a, 0x00, 0xfd, 0x24, 0x8a, 0xc0, 0x37, 0xf4,
	0x1f, 0xb6, 0x4e, 0xa8, 0x36, 0xd8, 0xcc, 0x64, 0x00, 0x89, 0xb4, 0x85, 0x24, 0xcf, 0xaf, 0x0d,
	0xc6, 0x59, 0x64, 0x04, 0x46, 0xd0, 0x86, 0x08, 0x65, 0xea, 0xd3, 0xea, 0x53, 0x7e, 0x2e, 0xb0,
	0x13, 0x72, 0x49, 0x97, 0x19, 0x23, 0x2b, 0xda, 0xa0, 0x90, 0x6d, 0xd0, 0x46, 0x04, 0xdc, 0x00,
	0xfd, 0x97, 0xad, 0x91, 0xda, 0x53, 0x16, 0x95, 0x78, 0x5e, 0x3e, 0xe5, 0x0a, 0xab, 0x93, 0xdd,
	0xbf, 0x26, 0x79, 0x52, 0xd4, 0x6c, 0x4f, 0xa3, 0x92, 0x24, 0x45, 0x8f, 0xfb, 0x27, 0x18, 0x26,
	0x31, 0x50, 0x6a, 0x71, 0x3f, 0xc9, 0xa4, 0x69, 0x26, 0xa7, 0x12, 0x53, 0x25, 0x3a, 0x40, 0x57,
	0xed, 0xe4, 0x46, 0x01, 0xd7, 0x99, 0x82, 0xfc, 0x03, 0x28, 0xb3, 0x68, 0xd1, 0xc7, 0x13, 0x01,
	0x7a, 0xc9, 0x19, 0x5d, 0xb3, 0xd7, 0x5b, 0xa0, 0x67, 0x22, 0x91, 0x01, 0xca, 0x8c, 0xae, 0xcf,
	0x88, 0x45, 0x9c, 0x02, 0xf7, 0x43, 0xba, 0x61, 0xe7, 0xf7, 0x43, 0x6e, 0xf2, 0x5e, 0xed, 0x3c,
	0xd4, 0x26, 0xdb, 0x22, 0x6b, 0xda, 0x60, 0x27, 0x04, 0x19, 0xe0, 0x69, 0x86, 0x0a, 0x5a, 0x0a,
	0x74, 0x48, 0xb7, 0x0e, 0xbf, 0x39, 0x84, 0xbd, 0x5d, 0x33, 0xb6, 0x47, 0x76, 0xec, 0x06, 0xbd,
	0x25, 0x69, 0x29, 0x0f, 0x95, 0x6a, 0x83, 0x3a, 0x4c, 0x4e, 0xb1, 0x2d, 0xd2, 0xe2, 0x92, 0xa9,
	0x93, 0xaf, 0xd0, 0x0c, 0x1e, 0x02, 0x6f, 0x62, 0x4b, 0xf1, 0x18, 0x68, 0x99, 0xed, 0x92, 0xed,
	0x19, 0x72, 0x3a, 0xa2, 0x97, 0x79, 0x5e, 0x04, 0xb4, 0xc2, 0x5c, 0xf2, 0x5f, 0xc1, 0x72, 0x05,
	0x36, 0x53, 0x20, 0x5a, 0x06, 0x03, 0xd1, 0x06, 0x45, 0xab, 0x5e, 0xfd, 0xc7, 0xa3, 0xeb, 0xfc,
	0x7c, 0x74, 0x9d, 0x5f, 0x8f, 0xae, 0xf3, 0xf5, 0xb7, 0x5b, 0x0a, 0x9d, 0xce, 0xf2, 0xcb, 0x97,
	0x79, 0xbe, 0x30, 0x3d, 0x3e, 0xfc, 0x09, 0x00, 0x00, 0xff, 0xff, 0x17, 0xf3, 0x7b, 0xcf, 0xcd,
	0x03, 0x00, 0x00,
}
