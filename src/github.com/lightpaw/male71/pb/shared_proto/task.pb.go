// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/pb/shared_proto/task.proto
// DO NOT EDIT!

package shared_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 每新增一个任务类型，如有需要请到 task_progress.go 的 increTaskTargetTypes/updateTaskProgressFuncs 添加类型处理
type TaskTargetType int32

const (
	TaskTargetType_InvalidTaskTargetType             TaskTargetType = 0
	TaskTargetType_TASK_TARGET_BASE_LEVEL            TaskTargetType = 1
	TaskTargetType_TASK_TARGET_HERO_LEVEL            TaskTargetType = 2
	TaskTargetType_TASK_TARGET_TECH_LEVEL            TaskTargetType = 3
	TaskTargetType_TASK_TARGET_BUILDING_LEVEL        TaskTargetType = 4
	TaskTargetType_TASK_TARGET_WORKER_SPEED_UP       TaskTargetType = 74
	TaskTargetType_TASK_TARGET_CAPTAIN_COUNT         TaskTargetType = 5
	TaskTargetType_TASK_TARGET_CAPTAIN_LEVEL_COUNT   TaskTargetType = 6
	TaskTargetType_TASK_TARGET_CAPTAIN_QUALITY_COUNT TaskTargetType = 7
	TaskTargetType_TASK_TARGET_CAPTAIN_EQUIPMENT     TaskTargetType = 8
	TaskTargetType_TASK_TARGET_CAPTAIN_REFINED_TIMES TaskTargetType = 9
	//    TASK_TARGET_TRAINING_USE_COUNT = 10; // 拥有X个武将在修炼
	//    TASK_TARGET_TRAINING_LEVEL_COUNT = 11; // 拥有X个Y级的修炼位
	TaskTargetType_TASK_TARGET_RECRUIT_SOLDIER_COUNT  TaskTargetType = 12
	TaskTargetType_TASK_TARGET_HEAL_SOLDIER_COUNT     TaskTargetType = 13
	TaskTargetType_TASK_TARGET_ADD_CAPTAIN_SOLDIER    TaskTargetType = 80
	TaskTargetType_TASK_TARGET_SOLDIER_LEVEL          TaskTargetType = 14
	TaskTargetType_TASK_TARGET_TOWER_FLOOR            TaskTargetType = 15
	TaskTargetType_TASK_TARGET_RESOURCE_POINT_COUNT   TaskTargetType = 16
	TaskTargetType_TASK_TARGET_COLLECT_RESOURCE       TaskTargetType = 17
	TaskTargetType_TASK_TARGET_JOIN_GUILD             TaskTargetType = 18
	TaskTargetType_TASK_TARGET_UPGRADE_BUILDING_LEVEL TaskTargetType = 19
	TaskTargetType_TASK_TARGET_UPGRADE_TECH_LEVEL     TaskTargetType = 20
	TaskTargetType_TASK_TARGET_RECRUIT_SOLDIER        TaskTargetType = 21
	TaskTargetType_TASK_TARGET_JIU_GUAN_CONSULT       TaskTargetType = 22
	TaskTargetType_TASK_TARGET_COLLECT_RESOURCE_TIMES TaskTargetType = 23
	TaskTargetType_TASK_TARGET_CHALLENGE_DUNGEON      TaskTargetType = 24
	TaskTargetType_TASK_TARGET_CHALLENGE_TOWER        TaskTargetType = 25
	TaskTargetType_TASK_TARGET_CHALLENGE_SECRET_TOWER TaskTargetType = 26
	TaskTargetType_TASK_TARGET_HELP_SECRET_TOWER      TaskTargetType = 27
	TaskTargetType_TASK_TARGET_CHALLENGE_BAI_ZHAN     TaskTargetType = 28
	TaskTargetType_TASK_TARGET_FIGHT_IN_JADE_REALM    TaskTargetType = 29
	TaskTargetType_TASK_TARGET_CHAT_TIMES             TaskTargetType = 30
	TaskTargetType_TASK_TARGET_BUY_GOODS              TaskTargetType = 31
	TaskTargetType_TASK_TARGET_BUY_GOODS_COUNT        TaskTargetType = 75
	TaskTargetType_TASK_TARGET_BUILD_EQUIP_DAILY      TaskTargetType = 32
	TaskTargetType_TASK_TARGET_SMELT_EQUIP            TaskTargetType = 33
	TaskTargetType_TASK_TARGET_COLLECT_XIU_LIAN_EXP   TaskTargetType = 35
	TaskTargetType_TASK_TARGET_GUILD_DONATE           TaskTargetType = 37
	TaskTargetType_TASK_TARGET_ASSIST_GUILD_MEMBER    TaskTargetType = 38
	TaskTargetType_TASK_TARGET_WATCH_VIDEO            TaskTargetType = 39
	TaskTargetType_TASK_TARGET_FISHING                TaskTargetType = 71
	// 每日（暂无此功能）	与城内小人对话X次
	// 每日（暂无此功能）	限时商店购买X次
	TaskTargetType_TASK_TARGET_HELP_GUILD_MEMBER          TaskTargetType = 72
	TaskTargetType_TASK_TARGET_BAI_ZHAN_JUN_XIAN          TaskTargetType = 40
	TaskTargetType_TASK_TARGET_GUI_ZU_LEVEL               TaskTargetType = 41
	TaskTargetType_TASK_TARGET_CAPTAIN_SOUL_COUNT         TaskTargetType = 42
	TaskTargetType_TASK_TARGET_CAPTAIN_SOUL_QUALITY_COUNT TaskTargetType = 43
	TaskTargetType_TASK_TARGET_CAPTAIN_SOUL_LEVEL_COUNT   TaskTargetType = 44
	TaskTargetType_TASK_TARGET_ACCUM_JADE_ORE             TaskTargetType = 45
	TaskTargetType_TASK_TARGET_ACCUM_JADE                 TaskTargetType = 46
	TaskTargetType_TASK_TARGET_ACCUM_GUILD_CONTRIBUTION   TaskTargetType = 47
	TaskTargetType_TASK_TARGET_X_EQIUP_LEVEL_Y            TaskTargetType = 48
	TaskTargetType_TASK_TARGET_X_EQIUP_REFINE_LEVEL_Y     TaskTargetType = 49
	TaskTargetType_TASK_TARGET_X_EQIUP_QUALITY_Y          TaskTargetType = 50
	TaskTargetType_TASK_TARGET_ACCUM_GUILD_DONATE         TaskTargetType = 51
	TaskTargetType_TASK_TARGET_GUILD_LEVEL                TaskTargetType = 52
	TaskTargetType_TASK_TARGET_EXPEL                      TaskTargetType = 53
	TaskTargetType_TASK_TARGET_DEFENSER_FIGHTING          TaskTargetType = 54
	TaskTargetType_TASK_TARGET_SET_DEFENSER               TaskTargetType = 116
	TaskTargetType_TASK_TARGET_ACCUM_RECOVER_PROSPERITY   TaskTargetType = 55
	TaskTargetType_TASK_TARGET_ACCUM_CONSULT              TaskTargetType = 56
	TaskTargetType_TASK_TARGET_JADE_NPC                   TaskTargetType = 57
	// 成就	好友（暂无此功能）	好友数量达到X
	// 成就	仇人（暂无此功能）	仇人数量达到X
	// 成就	盟友礼物（暂无此功能）	领取盟友礼物X次数
	// 成就	联盟宝箱（暂无此功能）	领取联盟大宝箱X次数
	// 成就	城中答题（暂无此功能）	城内小人答题答对X次数
	// 成就	分城（暂无此功能）	分城数量X
	// 成就	弹劾NPC盟主（暂无此功能）	所在联盟弹劾npc盟主完成（C盟直接完成）
	// 成就	武将转生（暂无此功能）	任意X个武将转生到Y
	// 成就	联盟帮助（暂无此功能）	帮助盟友累计X次
	TaskTargetType_TASK_TARGET_HAS_CHALLENGE_DUNGEON          TaskTargetType = 58
	TaskTargetType_TASK_TARGET_FU_SHEN                        TaskTargetType = 59
	TaskTargetType_TASK_TARGET_BUILD_EQUIP                    TaskTargetType = 60
	TaskTargetType_TASK_TARGET_KILL_HOME_NPC                  TaskTargetType = 61
	TaskTargetType_TASK_TARGET_ACCUM_FISHING                  TaskTargetType = 62
	TaskTargetType_TASK_TARGET_ACCUM_BAI_ZHAN                 TaskTargetType = 65
	TaskTargetType_TASK_TARGET_HISTORY_CHALLENGE_SECRET_TOWER TaskTargetType = 66
	TaskTargetType_TASK_TARGET_ACCUM_BUY_GOODS                TaskTargetType = 67
	TaskTargetType_TASK_TARGET_ACCUM_COLLECT_ACTIVE_BOX       TaskTargetType = 68
	TaskTargetType_TASK_TARGET_ACCUM_SMELT_EQUIP              TaskTargetType = 69
	TaskTargetType_TASK_TARGET_HOME_IN_GUILD_REGION           TaskTargetType = 70
	TaskTargetType_TASK_TARGET_ACCUM_BUY_GOODS_COUNT          TaskTargetType = 76
	TaskTargetType_TASK_TARGET_INVADE_MULTI_LEVEL_MONSTER     TaskTargetType = 77
	TaskTargetType_TASK_TARGET_WIN_MULTI_LEVEL_MONSTER        TaskTargetType = 79
	TaskTargetType_TASK_TARGET_ROB_MULTI_LEVEL_MONSTER        TaskTargetType = 115
	TaskTargetType_TASK_TARGET_EXPEL_FIGHT_MONSTER            TaskTargetType = 126
	TaskTargetType_TASK_TARGET_ACTIVE_DEGREE                  TaskTargetType = 78
	TaskTargetType_TASK_TARGET_COMPLETE_ZHENG_WU              TaskTargetType = 81
	TaskTargetType_TASK_TARGET_TREASURY_TREE                  TaskTargetType = 82
	TaskTargetType_TASK_TARGET_INVASE_KILL_SOLDIER            TaskTargetType = 83
	TaskTargetType_TASK_TARGET_ASSIST_KILL_SOLDIER            TaskTargetType = 84
	TaskTargetType_TASK_TARGET_ACCUM_LOGIN_DAY                TaskTargetType = 85
	TaskTargetType_TASK_TARGET_ALL_RIGHT_QUESTION_AMOUNT      TaskTargetType = 86
	TaskTargetType_TASK_TARGET_ACCUM_START_QUESTION           TaskTargetType = 87
	TaskTargetType_TASK_TARGET_ACTIVE_START_QUESTION_COUNT    TaskTargetType = 88
	TaskTargetType_TASK_TARGET_ACCUM_HELP_WATER               TaskTargetType = 89
	TaskTargetType_TASK_TARGET_ACCUM_BASE_DEAD                TaskTargetType = 90
	TaskTargetType_TASK_TARGET_ACCUM_MOVE_BASE                TaskTargetType = 91
	TaskTargetType_TASK_TARGET_ACCUM_DESTROY_BASE             TaskTargetType = 92
	TaskTargetType_TASK_TARGET_ACCUM_DESTROY_PROSPERITY       TaskTargetType = 93
	TaskTargetType_TASK_TARGET_ACCUM_ROBBING_RES              TaskTargetType = 94
	TaskTargetType_TASK_TARGET_ACCUM_INVESTIGATION            TaskTargetType = 95
	TaskTargetType_TASK_TARGET_ACCUM_BEEN_INVESTIGATION       TaskTargetType = 96
	TaskTargetType_TASK_TARGET_ACCUM_REALM_PVP_ASSIST         TaskTargetType = 97
	TaskTargetType_TASK_TARGET_ACCUM_REALM_PVP_BEEN_ASSIST    TaskTargetType = 98
	TaskTargetType_TASK_TARGET_FARM_HARVEST                   TaskTargetType = 100
	TaskTargetType_TASK_TARGET_ZHANJIANG_START_TIMES          TaskTargetType = 101
	TaskTargetType_TASK_TARGET_ZHANJIANG_GUANQIA_COMPLETE     TaskTargetType = 102
	TaskTargetType_TASK_TARGET_CAPTAIN_OFFICIAL_UPDATE        TaskTargetType = 103
	TaskTargetType_TASK_TARGET_START_XIONGNU                  TaskTargetType = 104
	TaskTargetType_TASK_TARGET_ACCUM_FARM_STEAL               TaskTargetType = 105
	TaskTargetType_TASK_TARGET_ACCUM_AUTO_DUNGEON             TaskTargetType = 106
	TaskTargetType_TASK_TARGET_ACCUM_COUNT_DOWN_PRIZE         TaskTargetType = 107
	TaskTargetType_TASK_TARGET_CAPTAIN_ABILITY_EXP            TaskTargetType = 108
	TaskTargetType_TASK_TARGET_ACCUM_BWZL_COMPLETE            TaskTargetType = 109
	TaskTargetType_TASK_TARGET_ACCUM_INVASE_KILL_SOLDIER      TaskTargetType = 110
	TaskTargetType_TASK_TARGET_ACCUM_ASSIST_KILL_SOLDIER      TaskTargetType = 111
	TaskTargetType_TASK_TARGET_ACCUM_DEFENSE_KILL_SOLDIER     TaskTargetType = 112
	TaskTargetType_TASK_TARGET_ACCUM_USE_TU_FEI_GOODS         TaskTargetType = 113
	TaskTargetType_TASK_TARGET_ACCUM_HELP_GUILD_MEMBER        TaskTargetType = 114
	TaskTargetType_TASK_TARGET_UNLOCK_BAOWU                   TaskTargetType = 117
	TaskTargetType_TASK_TARGET_ROB_BAOWU                      TaskTargetType = 118
	TaskTargetType_TASK_TARGET_ROB_NPC_BAOWU                  TaskTargetType = 123
	TaskTargetType_TASK_TARGET_XUANYUAN_SCORE                 TaskTargetType = 119
	TaskTargetType_TASK_TARGET_CAPTAIN_UPSTAR                 TaskTargetType = 99
	TaskTargetType_TASK_TARGET_RNDEVENT_HANDBOOKS             TaskTargetType = 73
	TaskTargetType_TASK_TARGET_HEBI                           TaskTargetType = 120
	TaskTargetType_TASK_TARGET_HEBI_ROB                       TaskTargetType = 121
	TaskTargetType_TASK_TARGET_GEM                            TaskTargetType = 122
	TaskTargetType_TASK_TARGET_UPGRADE_TITLE                  TaskTargetType = 124
	TaskTargetType_TASK_TARGET_FRIEND_AMOUNT                  TaskTargetType = 125
	TaskTargetType_TASK_TARGET_TEAM_POWER                     TaskTargetType = 127
	TaskTargetType_TASK_TARGET_ACCUM_MC_WAR_KILL_SOLDIER      TaskTargetType = 128
	TaskTargetType_TASK_TARGET_ACCUM_MC_WAR_WIN               TaskTargetType = 129
	TaskTargetType_TASK_TARGET_ACCUM_MC_WAR_DESTROY_BUILDING  TaskTargetType = 130
	TaskTargetType_TASK_TARGET_BAOWU_SELL                     TaskTargetType = 34
	TaskTargetType_TASK_TARGET_CAPTAIN_EXP_GOODS_USE          TaskTargetType = 131
	TaskTargetType_TASK_TARGET_STRATEGY_USE                   TaskTargetType = 132
	TaskTargetType_TASK_TARGET_FARM_HARVEST_TIMES             TaskTargetType = 133
	TaskTargetType_TASK_TARGET_INVASE_BAOZ                    TaskTargetType = 134
	TaskTargetType_TASK_TARGET_KILL_JUN_TUAN                  TaskTargetType = 135
	TaskTargetType_TASK_TARGET_BOOL                           TaskTargetType = 136
	TaskTargetType_TASK_TARGET_MCWAR_JOIN                     TaskTargetType = 137
	TaskTargetType_TASK_TARGET_MCWAR_OCCUPY                   TaskTargetType = 139
)

var TaskTargetType_name = map[int32]string{
	0:   "InvalidTaskTargetType",
	1:   "TASK_TARGET_BASE_LEVEL",
	2:   "TASK_TARGET_HERO_LEVEL",
	3:   "TASK_TARGET_TECH_LEVEL",
	4:   "TASK_TARGET_BUILDING_LEVEL",
	74:  "TASK_TARGET_WORKER_SPEED_UP",
	5:   "TASK_TARGET_CAPTAIN_COUNT",
	6:   "TASK_TARGET_CAPTAIN_LEVEL_COUNT",
	7:   "TASK_TARGET_CAPTAIN_QUALITY_COUNT",
	8:   "TASK_TARGET_CAPTAIN_EQUIPMENT",
	9:   "TASK_TARGET_CAPTAIN_REFINED_TIMES",
	12:  "TASK_TARGET_RECRUIT_SOLDIER_COUNT",
	13:  "TASK_TARGET_HEAL_SOLDIER_COUNT",
	80:  "TASK_TARGET_ADD_CAPTAIN_SOLDIER",
	14:  "TASK_TARGET_SOLDIER_LEVEL",
	15:  "TASK_TARGET_TOWER_FLOOR",
	16:  "TASK_TARGET_RESOURCE_POINT_COUNT",
	17:  "TASK_TARGET_COLLECT_RESOURCE",
	18:  "TASK_TARGET_JOIN_GUILD",
	19:  "TASK_TARGET_UPGRADE_BUILDING_LEVEL",
	20:  "TASK_TARGET_UPGRADE_TECH_LEVEL",
	21:  "TASK_TARGET_RECRUIT_SOLDIER",
	22:  "TASK_TARGET_JIU_GUAN_CONSULT",
	23:  "TASK_TARGET_COLLECT_RESOURCE_TIMES",
	24:  "TASK_TARGET_CHALLENGE_DUNGEON",
	25:  "TASK_TARGET_CHALLENGE_TOWER",
	26:  "TASK_TARGET_CHALLENGE_SECRET_TOWER",
	27:  "TASK_TARGET_HELP_SECRET_TOWER",
	28:  "TASK_TARGET_CHALLENGE_BAI_ZHAN",
	29:  "TASK_TARGET_FIGHT_IN_JADE_REALM",
	30:  "TASK_TARGET_CHAT_TIMES",
	31:  "TASK_TARGET_BUY_GOODS",
	75:  "TASK_TARGET_BUY_GOODS_COUNT",
	32:  "TASK_TARGET_BUILD_EQUIP_DAILY",
	33:  "TASK_TARGET_SMELT_EQUIP",
	35:  "TASK_TARGET_COLLECT_XIU_LIAN_EXP",
	37:  "TASK_TARGET_GUILD_DONATE",
	38:  "TASK_TARGET_ASSIST_GUILD_MEMBER",
	39:  "TASK_TARGET_WATCH_VIDEO",
	71:  "TASK_TARGET_FISHING",
	72:  "TASK_TARGET_HELP_GUILD_MEMBER",
	40:  "TASK_TARGET_BAI_ZHAN_JUN_XIAN",
	41:  "TASK_TARGET_GUI_ZU_LEVEL",
	42:  "TASK_TARGET_CAPTAIN_SOUL_COUNT",
	43:  "TASK_TARGET_CAPTAIN_SOUL_QUALITY_COUNT",
	44:  "TASK_TARGET_CAPTAIN_SOUL_LEVEL_COUNT",
	45:  "TASK_TARGET_ACCUM_JADE_ORE",
	46:  "TASK_TARGET_ACCUM_JADE",
	47:  "TASK_TARGET_ACCUM_GUILD_CONTRIBUTION",
	48:  "TASK_TARGET_X_EQIUP_LEVEL_Y",
	49:  "TASK_TARGET_X_EQIUP_REFINE_LEVEL_Y",
	50:  "TASK_TARGET_X_EQIUP_QUALITY_Y",
	51:  "TASK_TARGET_ACCUM_GUILD_DONATE",
	52:  "TASK_TARGET_GUILD_LEVEL",
	53:  "TASK_TARGET_EXPEL",
	54:  "TASK_TARGET_DEFENSER_FIGHTING",
	116: "TASK_TARGET_SET_DEFENSER",
	55:  "TASK_TARGET_ACCUM_RECOVER_PROSPERITY",
	56:  "TASK_TARGET_ACCUM_CONSULT",
	57:  "TASK_TARGET_JADE_NPC",
	58:  "TASK_TARGET_HAS_CHALLENGE_DUNGEON",
	59:  "TASK_TARGET_FU_SHEN",
	60:  "TASK_TARGET_BUILD_EQUIP",
	61:  "TASK_TARGET_KILL_HOME_NPC",
	62:  "TASK_TARGET_ACCUM_FISHING",
	65:  "TASK_TARGET_ACCUM_BAI_ZHAN",
	66:  "TASK_TARGET_HISTORY_CHALLENGE_SECRET_TOWER",
	67:  "TASK_TARGET_ACCUM_BUY_GOODS",
	68:  "TASK_TARGET_ACCUM_COLLECT_ACTIVE_BOX",
	69:  "TASK_TARGET_ACCUM_SMELT_EQUIP",
	70:  "TASK_TARGET_HOME_IN_GUILD_REGION",
	76:  "TASK_TARGET_ACCUM_BUY_GOODS_COUNT",
	77:  "TASK_TARGET_INVADE_MULTI_LEVEL_MONSTER",
	79:  "TASK_TARGET_WIN_MULTI_LEVEL_MONSTER",
	115: "TASK_TARGET_ROB_MULTI_LEVEL_MONSTER",
	126: "TASK_TARGET_EXPEL_FIGHT_MONSTER",
	78:  "TASK_TARGET_ACTIVE_DEGREE",
	81:  "TASK_TARGET_COMPLETE_ZHENG_WU",
	82:  "TASK_TARGET_TREASURY_TREE",
	83:  "TASK_TARGET_INVASE_KILL_SOLDIER",
	84:  "TASK_TARGET_ASSIST_KILL_SOLDIER",
	85:  "TASK_TARGET_ACCUM_LOGIN_DAY",
	86:  "TASK_TARGET_ALL_RIGHT_QUESTION_AMOUNT",
	87:  "TASK_TARGET_ACCUM_START_QUESTION",
	88:  "TASK_TARGET_ACTIVE_START_QUESTION_COUNT",
	89:  "TASK_TARGET_ACCUM_HELP_WATER",
	90:  "TASK_TARGET_ACCUM_BASE_DEAD",
	91:  "TASK_TARGET_ACCUM_MOVE_BASE",
	92:  "TASK_TARGET_ACCUM_DESTROY_BASE",
	93:  "TASK_TARGET_ACCUM_DESTROY_PROSPERITY",
	94:  "TASK_TARGET_ACCUM_ROBBING_RES",
	95:  "TASK_TARGET_ACCUM_INVESTIGATION",
	96:  "TASK_TARGET_ACCUM_BEEN_INVESTIGATION",
	97:  "TASK_TARGET_ACCUM_REALM_PVP_ASSIST",
	98:  "TASK_TARGET_ACCUM_REALM_PVP_BEEN_ASSIST",
	100: "TASK_TARGET_FARM_HARVEST",
	101: "TASK_TARGET_ZHANJIANG_START_TIMES",
	102: "TASK_TARGET_ZHANJIANG_GUANQIA_COMPLETE",
	103: "TASK_TARGET_CAPTAIN_OFFICIAL_UPDATE",
	104: "TASK_TARGET_START_XIONGNU",
	105: "TASK_TARGET_ACCUM_FARM_STEAL",
	106: "TASK_TARGET_ACCUM_AUTO_DUNGEON",
	107: "TASK_TARGET_ACCUM_COUNT_DOWN_PRIZE",
	108: "TASK_TARGET_CAPTAIN_ABILITY_EXP",
	109: "TASK_TARGET_ACCUM_BWZL_COMPLETE",
	110: "TASK_TARGET_ACCUM_INVASE_KILL_SOLDIER",
	111: "TASK_TARGET_ACCUM_ASSIST_KILL_SOLDIER",
	112: "TASK_TARGET_ACCUM_DEFENSE_KILL_SOLDIER",
	113: "TASK_TARGET_ACCUM_USE_TU_FEI_GOODS",
	114: "TASK_TARGET_ACCUM_HELP_GUILD_MEMBER",
	117: "TASK_TARGET_UNLOCK_BAOWU",
	118: "TASK_TARGET_ROB_BAOWU",
	123: "TASK_TARGET_ROB_NPC_BAOWU",
	119: "TASK_TARGET_XUANYUAN_SCORE",
	99:  "TASK_TARGET_CAPTAIN_UPSTAR",
	73:  "TASK_TARGET_RNDEVENT_HANDBOOKS",
	120: "TASK_TARGET_HEBI",
	121: "TASK_TARGET_HEBI_ROB",
	122: "TASK_TARGET_GEM",
	124: "TASK_TARGET_UPGRADE_TITLE",
	125: "TASK_TARGET_FRIEND_AMOUNT",
	127: "TASK_TARGET_TEAM_POWER",
	128: "TASK_TARGET_ACCUM_MC_WAR_KILL_SOLDIER",
	129: "TASK_TARGET_ACCUM_MC_WAR_WIN",
	130: "TASK_TARGET_ACCUM_MC_WAR_DESTROY_BUILDING",
	34:  "TASK_TARGET_BAOWU_SELL",
	131: "TASK_TARGET_CAPTAIN_EXP_GOODS_USE",
	132: "TASK_TARGET_STRATEGY_USE",
	133: "TASK_TARGET_FARM_HARVEST_TIMES",
	134: "TASK_TARGET_INVASE_BAOZ",
	135: "TASK_TARGET_KILL_JUN_TUAN",
	136: "TASK_TARGET_BOOL",
	137: "TASK_TARGET_MCWAR_JOIN",
	139: "TASK_TARGET_MCWAR_OCCUPY",
}
var TaskTargetType_value = map[string]int32{
	"InvalidTaskTargetType":                      0,
	"TASK_TARGET_BASE_LEVEL":                     1,
	"TASK_TARGET_HERO_LEVEL":                     2,
	"TASK_TARGET_TECH_LEVEL":                     3,
	"TASK_TARGET_BUILDING_LEVEL":                 4,
	"TASK_TARGET_WORKER_SPEED_UP":                74,
	"TASK_TARGET_CAPTAIN_COUNT":                  5,
	"TASK_TARGET_CAPTAIN_LEVEL_COUNT":            6,
	"TASK_TARGET_CAPTAIN_QUALITY_COUNT":          7,
	"TASK_TARGET_CAPTAIN_EQUIPMENT":              8,
	"TASK_TARGET_CAPTAIN_REFINED_TIMES":          9,
	"TASK_TARGET_RECRUIT_SOLDIER_COUNT":          12,
	"TASK_TARGET_HEAL_SOLDIER_COUNT":             13,
	"TASK_TARGET_ADD_CAPTAIN_SOLDIER":            80,
	"TASK_TARGET_SOLDIER_LEVEL":                  14,
	"TASK_TARGET_TOWER_FLOOR":                    15,
	"TASK_TARGET_RESOURCE_POINT_COUNT":           16,
	"TASK_TARGET_COLLECT_RESOURCE":               17,
	"TASK_TARGET_JOIN_GUILD":                     18,
	"TASK_TARGET_UPGRADE_BUILDING_LEVEL":         19,
	"TASK_TARGET_UPGRADE_TECH_LEVEL":             20,
	"TASK_TARGET_RECRUIT_SOLDIER":                21,
	"TASK_TARGET_JIU_GUAN_CONSULT":               22,
	"TASK_TARGET_COLLECT_RESOURCE_TIMES":         23,
	"TASK_TARGET_CHALLENGE_DUNGEON":              24,
	"TASK_TARGET_CHALLENGE_TOWER":                25,
	"TASK_TARGET_CHALLENGE_SECRET_TOWER":         26,
	"TASK_TARGET_HELP_SECRET_TOWER":              27,
	"TASK_TARGET_CHALLENGE_BAI_ZHAN":             28,
	"TASK_TARGET_FIGHT_IN_JADE_REALM":            29,
	"TASK_TARGET_CHAT_TIMES":                     30,
	"TASK_TARGET_BUY_GOODS":                      31,
	"TASK_TARGET_BUY_GOODS_COUNT":                75,
	"TASK_TARGET_BUILD_EQUIP_DAILY":              32,
	"TASK_TARGET_SMELT_EQUIP":                    33,
	"TASK_TARGET_COLLECT_XIU_LIAN_EXP":           35,
	"TASK_TARGET_GUILD_DONATE":                   37,
	"TASK_TARGET_ASSIST_GUILD_MEMBER":            38,
	"TASK_TARGET_WATCH_VIDEO":                    39,
	"TASK_TARGET_FISHING":                        71,
	"TASK_TARGET_HELP_GUILD_MEMBER":              72,
	"TASK_TARGET_BAI_ZHAN_JUN_XIAN":              40,
	"TASK_TARGET_GUI_ZU_LEVEL":                   41,
	"TASK_TARGET_CAPTAIN_SOUL_COUNT":             42,
	"TASK_TARGET_CAPTAIN_SOUL_QUALITY_COUNT":     43,
	"TASK_TARGET_CAPTAIN_SOUL_LEVEL_COUNT":       44,
	"TASK_TARGET_ACCUM_JADE_ORE":                 45,
	"TASK_TARGET_ACCUM_JADE":                     46,
	"TASK_TARGET_ACCUM_GUILD_CONTRIBUTION":       47,
	"TASK_TARGET_X_EQIUP_LEVEL_Y":                48,
	"TASK_TARGET_X_EQIUP_REFINE_LEVEL_Y":         49,
	"TASK_TARGET_X_EQIUP_QUALITY_Y":              50,
	"TASK_TARGET_ACCUM_GUILD_DONATE":             51,
	"TASK_TARGET_GUILD_LEVEL":                    52,
	"TASK_TARGET_EXPEL":                          53,
	"TASK_TARGET_DEFENSER_FIGHTING":              54,
	"TASK_TARGET_SET_DEFENSER":                   116,
	"TASK_TARGET_ACCUM_RECOVER_PROSPERITY":       55,
	"TASK_TARGET_ACCUM_CONSULT":                  56,
	"TASK_TARGET_JADE_NPC":                       57,
	"TASK_TARGET_HAS_CHALLENGE_DUNGEON":          58,
	"TASK_TARGET_FU_SHEN":                        59,
	"TASK_TARGET_BUILD_EQUIP":                    60,
	"TASK_TARGET_KILL_HOME_NPC":                  61,
	"TASK_TARGET_ACCUM_FISHING":                  62,
	"TASK_TARGET_ACCUM_BAI_ZHAN":                 65,
	"TASK_TARGET_HISTORY_CHALLENGE_SECRET_TOWER": 66,
	"TASK_TARGET_ACCUM_BUY_GOODS":                67,
	"TASK_TARGET_ACCUM_COLLECT_ACTIVE_BOX":       68,
	"TASK_TARGET_ACCUM_SMELT_EQUIP":              69,
	"TASK_TARGET_HOME_IN_GUILD_REGION":           70,
	"TASK_TARGET_ACCUM_BUY_GOODS_COUNT":          76,
	"TASK_TARGET_INVADE_MULTI_LEVEL_MONSTER":     77,
	"TASK_TARGET_WIN_MULTI_LEVEL_MONSTER":        79,
	"TASK_TARGET_ROB_MULTI_LEVEL_MONSTER":        115,
	"TASK_TARGET_EXPEL_FIGHT_MONSTER":            126,
	"TASK_TARGET_ACTIVE_DEGREE":                  78,
	"TASK_TARGET_COMPLETE_ZHENG_WU":              81,
	"TASK_TARGET_TREASURY_TREE":                  82,
	"TASK_TARGET_INVASE_KILL_SOLDIER":            83,
	"TASK_TARGET_ASSIST_KILL_SOLDIER":            84,
	"TASK_TARGET_ACCUM_LOGIN_DAY":                85,
	"TASK_TARGET_ALL_RIGHT_QUESTION_AMOUNT":      86,
	"TASK_TARGET_ACCUM_START_QUESTION":           87,
	"TASK_TARGET_ACTIVE_START_QUESTION_COUNT":    88,
	"TASK_TARGET_ACCUM_HELP_WATER":               89,
	"TASK_TARGET_ACCUM_BASE_DEAD":                90,
	"TASK_TARGET_ACCUM_MOVE_BASE":                91,
	"TASK_TARGET_ACCUM_DESTROY_BASE":             92,
	"TASK_TARGET_ACCUM_DESTROY_PROSPERITY":       93,
	"TASK_TARGET_ACCUM_ROBBING_RES":              94,
	"TASK_TARGET_ACCUM_INVESTIGATION":            95,
	"TASK_TARGET_ACCUM_BEEN_INVESTIGATION":       96,
	"TASK_TARGET_ACCUM_REALM_PVP_ASSIST":         97,
	"TASK_TARGET_ACCUM_REALM_PVP_BEEN_ASSIST":    98,
	"TASK_TARGET_FARM_HARVEST":                   100,
	"TASK_TARGET_ZHANJIANG_START_TIMES":          101,
	"TASK_TARGET_ZHANJIANG_GUANQIA_COMPLETE":     102,
	"TASK_TARGET_CAPTAIN_OFFICIAL_UPDATE":        103,
	"TASK_TARGET_START_XIONGNU":                  104,
	"TASK_TARGET_ACCUM_FARM_STEAL":               105,
	"TASK_TARGET_ACCUM_AUTO_DUNGEON":             106,
	"TASK_TARGET_ACCUM_COUNT_DOWN_PRIZE":         107,
	"TASK_TARGET_CAPTAIN_ABILITY_EXP":            108,
	"TASK_TARGET_ACCUM_BWZL_COMPLETE":            109,
	"TASK_TARGET_ACCUM_INVASE_KILL_SOLDIER":      110,
	"TASK_TARGET_ACCUM_ASSIST_KILL_SOLDIER":      111,
	"TASK_TARGET_ACCUM_DEFENSE_KILL_SOLDIER":     112,
	"TASK_TARGET_ACCUM_USE_TU_FEI_GOODS":         113,
	"TASK_TARGET_ACCUM_HELP_GUILD_MEMBER":        114,
	"TASK_TARGET_UNLOCK_BAOWU":                   117,
	"TASK_TARGET_ROB_BAOWU":                      118,
	"TASK_TARGET_ROB_NPC_BAOWU":                  123,
	"TASK_TARGET_XUANYUAN_SCORE":                 119,
	"TASK_TARGET_CAPTAIN_UPSTAR":                 99,
	"TASK_TARGET_RNDEVENT_HANDBOOKS":             73,
	"TASK_TARGET_HEBI":                           120,
	"TASK_TARGET_HEBI_ROB":                       121,
	"TASK_TARGET_GEM":                            122,
	"TASK_TARGET_UPGRADE_TITLE":                  124,
	"TASK_TARGET_FRIEND_AMOUNT":                  125,
	"TASK_TARGET_TEAM_POWER":                     127,
	"TASK_TARGET_ACCUM_MC_WAR_KILL_SOLDIER":      128,
	"TASK_TARGET_ACCUM_MC_WAR_WIN":               129,
	"TASK_TARGET_ACCUM_MC_WAR_DESTROY_BUILDING":  130,
	"TASK_TARGET_BAOWU_SELL":                     34,
	"TASK_TARGET_CAPTAIN_EXP_GOODS_USE":          131,
	"TASK_TARGET_STRATEGY_USE":                   132,
	"TASK_TARGET_FARM_HARVEST_TIMES":             133,
	"TASK_TARGET_INVASE_BAOZ":                    134,
	"TASK_TARGET_KILL_JUN_TUAN":                  135,
	"TASK_TARGET_BOOL":                           136,
	"TASK_TARGET_MCWAR_JOIN":                     137,
	"TASK_TARGET_MCWAR_OCCUPY":                   139,
}

func (x TaskTargetType) String() string {
	return proto.EnumName(TaskTargetType_name, int32(x))
}
func (TaskTargetType) EnumDescriptor() ([]byte, []int) { return fileDescriptorTask, []int{0} }

type TaskMiscDataProto struct {
	MaxShowAchieveCount int32  `protobuf:"varint,1,opt,name=max_show_achieve_count,json=maxShowAchieveCount,proto3" json:"max_show_achieve_count,omitempty"`
	BwzlBgImg           string `protobuf:"bytes,2,opt,name=bwzl_bg_img,json=bwzlBgImg,proto3" json:"bwzl_bg_img,omitempty"`
}

func (m *TaskMiscDataProto) Reset()                    { *m = TaskMiscDataProto{} }
func (m *TaskMiscDataProto) String() string            { return proto.CompactTextString(m) }
func (*TaskMiscDataProto) ProtoMessage()               {}
func (*TaskMiscDataProto) Descriptor() ([]byte, []int) { return fileDescriptorTask, []int{0} }

func (m *TaskMiscDataProto) GetMaxShowAchieveCount() int32 {
	if m != nil {
		return m.MaxShowAchieveCount
	}
	return 0
}

func (m *TaskMiscDataProto) GetBwzlBgImg() string {
	if m != nil {
		return m.BwzlBgImg
	}
	return ""
}

type TaskDataProto struct {
	Id      int32            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name    string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Text    string           `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	Target  *TaskTargetProto `protobuf:"bytes,4,opt,name=target" json:"target,omitempty"`
	Prize   *PrizeProto      `protobuf:"bytes,5,opt,name=prize" json:"prize,omitempty"`
	Icon    string           `protobuf:"bytes,6,opt,name=icon,proto3" json:"icon,omitempty"`
	Quality Quality          `protobuf:"varint,7,opt,name=quality,proto3,enum=proto.Quality" json:"quality,omitempty"`
	Order   int32            `protobuf:"varint,8,opt,name=order,proto3" json:"order,omitempty"`
	// 成就任务
	AchieveType int32 `protobuf:"varint,20,opt,name=achieve_type,json=achieveType,proto3" json:"achieve_type,omitempty"`
	Star        int32 `protobuf:"varint,21,opt,name=star,proto3" json:"star,omitempty"`
	TotalStar   int32 `protobuf:"varint,22,opt,name=total_star,json=totalStar,proto3" json:"total_star,omitempty"`
	PrevTask    int32 `protobuf:"varint,23,opt,name=prev_task,json=prevTask,proto3" json:"prev_task,omitempty"`
	// 活跃度任务
	AddDegree int32 `protobuf:"varint,30,opt,name=add_degree,json=addDegree,proto3" json:"add_degree,omitempty"`
	// 霸王之路
	Day int32 `protobuf:"varint,40,opt,name=day,proto3" json:"day,omitempty"`
}

func (m *TaskDataProto) Reset()                    { *m = TaskDataProto{} }
func (m *TaskDataProto) String() string            { return proto.CompactTextString(m) }
func (*TaskDataProto) ProtoMessage()               {}
func (*TaskDataProto) Descriptor() ([]byte, []int) { return fileDescriptorTask, []int{1} }

func (m *TaskDataProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TaskDataProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TaskDataProto) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *TaskDataProto) GetTarget() *TaskTargetProto {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *TaskDataProto) GetPrize() *PrizeProto {
	if m != nil {
		return m.Prize
	}
	return nil
}

func (m *TaskDataProto) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *TaskDataProto) GetQuality() Quality {
	if m != nil {
		return m.Quality
	}
	return Quality_InvalidQuality
}

func (m *TaskDataProto) GetOrder() int32 {
	if m != nil {
		return m.Order
	}
	return 0
}

func (m *TaskDataProto) GetAchieveType() int32 {
	if m != nil {
		return m.AchieveType
	}
	return 0
}

func (m *TaskDataProto) GetStar() int32 {
	if m != nil {
		return m.Star
	}
	return 0
}

func (m *TaskDataProto) GetTotalStar() int32 {
	if m != nil {
		return m.TotalStar
	}
	return 0
}

func (m *TaskDataProto) GetPrevTask() int32 {
	if m != nil {
		return m.PrevTask
	}
	return 0
}

func (m *TaskDataProto) GetAddDegree() int32 {
	if m != nil {
		return m.AddDegree
	}
	return 0
}

func (m *TaskDataProto) GetDay() int32 {
	if m != nil {
		return m.Day
	}
	return 0
}

type TaskTargetProto struct {
	Type          TaskTargetType `protobuf:"varint,1,opt,name=type,proto3,enum=proto.TaskTargetType" json:"type,omitempty"`
	TotalProgress int32          `protobuf:"varint,2,opt,name=total_progress,json=totalProgress,proto3" json:"total_progress,omitempty"`
	SubType       int32          `protobuf:"varint,11,opt,name=sub_type,json=subType,proto3" json:"sub_type,omitempty"`
	SubTypeId     int32          `protobuf:"varint,12,opt,name=sub_type_id,json=subTypeId,proto3" json:"sub_type_id,omitempty"`
}

func (m *TaskTargetProto) Reset()                    { *m = TaskTargetProto{} }
func (m *TaskTargetProto) String() string            { return proto.CompactTextString(m) }
func (*TaskTargetProto) ProtoMessage()               {}
func (*TaskTargetProto) Descriptor() ([]byte, []int) { return fileDescriptorTask, []int{2} }

func (m *TaskTargetProto) GetType() TaskTargetType {
	if m != nil {
		return m.Type
	}
	return TaskTargetType_InvalidTaskTargetType
}

func (m *TaskTargetProto) GetTotalProgress() int32 {
	if m != nil {
		return m.TotalProgress
	}
	return 0
}

func (m *TaskTargetProto) GetSubType() int32 {
	if m != nil {
		return m.SubType
	}
	return 0
}

func (m *TaskTargetProto) GetSubTypeId() int32 {
	if m != nil {
		return m.SubTypeId
	}
	return 0
}

// 霸业目标阶段数据
type BaYeStageDataProto struct {
	Stage     int32       `protobuf:"varint,1,opt,name=stage,proto3" json:"stage,omitempty"`
	StageName string      `protobuf:"bytes,6,opt,name=stage_name,json=stageName,proto3" json:"stage_name,omitempty"`
	Name      string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Tasks     []int32     `protobuf:"varint,3,rep,name=tasks" json:"tasks,omitempty"`
	Prize     *PrizeProto `protobuf:"bytes,4,opt,name=prize" json:"prize,omitempty"`
	Next      int32       `protobuf:"varint,5,opt,name=next,proto3" json:"next,omitempty"`
}

func (m *BaYeStageDataProto) Reset()                    { *m = BaYeStageDataProto{} }
func (m *BaYeStageDataProto) String() string            { return proto.CompactTextString(m) }
func (*BaYeStageDataProto) ProtoMessage()               {}
func (*BaYeStageDataProto) Descriptor() ([]byte, []int) { return fileDescriptorTask, []int{3} }

func (m *BaYeStageDataProto) GetStage() int32 {
	if m != nil {
		return m.Stage
	}
	return 0
}

func (m *BaYeStageDataProto) GetStageName() string {
	if m != nil {
		return m.StageName
	}
	return ""
}

func (m *BaYeStageDataProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BaYeStageDataProto) GetTasks() []int32 {
	if m != nil {
		return m.Tasks
	}
	return nil
}

func (m *BaYeStageDataProto) GetPrize() *PrizeProto {
	if m != nil {
		return m.Prize
	}
	return nil
}

func (m *BaYeStageDataProto) GetNext() int32 {
	if m != nil {
		return m.Next
	}
	return 0
}

// 活跃度奖励
type ActiveDegreePrizeProto struct {
	Degree int32       `protobuf:"varint,1,opt,name=degree,proto3" json:"degree,omitempty"`
	Prize  *PrizeProto `protobuf:"bytes,2,opt,name=prize" json:"prize,omitempty"`
}

func (m *ActiveDegreePrizeProto) Reset()                    { *m = ActiveDegreePrizeProto{} }
func (m *ActiveDegreePrizeProto) String() string            { return proto.CompactTextString(m) }
func (*ActiveDegreePrizeProto) ProtoMessage()               {}
func (*ActiveDegreePrizeProto) Descriptor() ([]byte, []int) { return fileDescriptorTask, []int{4} }

func (m *ActiveDegreePrizeProto) GetDegree() int32 {
	if m != nil {
		return m.Degree
	}
	return 0
}

func (m *ActiveDegreePrizeProto) GetPrize() *PrizeProto {
	if m != nil {
		return m.Prize
	}
	return nil
}

// 成就星数奖励
type AchieveTaskStarPrizeProto struct {
	Star  int32       `protobuf:"varint,1,opt,name=star,proto3" json:"star,omitempty"`
	Icon  string      `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`
	Desc  string      `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	Prize *PrizeProto `protobuf:"bytes,4,opt,name=prize" json:"prize,omitempty"`
}

func (m *AchieveTaskStarPrizeProto) Reset()                    { *m = AchieveTaskStarPrizeProto{} }
func (m *AchieveTaskStarPrizeProto) String() string            { return proto.CompactTextString(m) }
func (*AchieveTaskStarPrizeProto) ProtoMessage()               {}
func (*AchieveTaskStarPrizeProto) Descriptor() ([]byte, []int) { return fileDescriptorTask, []int{5} }

func (m *AchieveTaskStarPrizeProto) GetStar() int32 {
	if m != nil {
		return m.Star
	}
	return 0
}

func (m *AchieveTaskStarPrizeProto) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *AchieveTaskStarPrizeProto) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *AchieveTaskStarPrizeProto) GetPrize() *PrizeProto {
	if m != nil {
		return m.Prize
	}
	return nil
}

// 霸王之路完成任务奖励
type BwzlPrizeDataProto struct {
	CollectPrizeTaskCount int32       `protobuf:"varint,1,opt,name=collect_prize_task_count,json=collectPrizeTaskCount,proto3" json:"collect_prize_task_count,omitempty"`
	Icon                  string      `protobuf:"bytes,2,opt,name=icon,proto3" json:"icon,omitempty"`
	Prize                 *PrizeProto `protobuf:"bytes,3,opt,name=prize" json:"prize,omitempty"`
}

func (m *BwzlPrizeDataProto) Reset()                    { *m = BwzlPrizeDataProto{} }
func (m *BwzlPrizeDataProto) String() string            { return proto.CompactTextString(m) }
func (*BwzlPrizeDataProto) ProtoMessage()               {}
func (*BwzlPrizeDataProto) Descriptor() ([]byte, []int) { return fileDescriptorTask, []int{6} }

func (m *BwzlPrizeDataProto) GetCollectPrizeTaskCount() int32 {
	if m != nil {
		return m.CollectPrizeTaskCount
	}
	return 0
}

func (m *BwzlPrizeDataProto) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *BwzlPrizeDataProto) GetPrize() *PrizeProto {
	if m != nil {
		return m.Prize
	}
	return nil
}

type TaskBoxProto struct {
	Id    int32       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Count int32       `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Prize *PrizeProto `protobuf:"bytes,3,opt,name=prize" json:"prize,omitempty"`
}

func (m *TaskBoxProto) Reset()                    { *m = TaskBoxProto{} }
func (m *TaskBoxProto) String() string            { return proto.CompactTextString(m) }
func (*TaskBoxProto) ProtoMessage()               {}
func (*TaskBoxProto) Descriptor() ([]byte, []int) { return fileDescriptorTask, []int{7} }

func (m *TaskBoxProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TaskBoxProto) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *TaskBoxProto) GetPrize() *PrizeProto {
	if m != nil {
		return m.Prize
	}
	return nil
}

// 从任务目标中可以获取任务总进度
type HeroTaskProto struct {
	MainTaskId           int32                      `protobuf:"varint,1,opt,name=main_task_id,json=mainTaskId,proto3" json:"main_task_id,omitempty"`
	MainTaskProgress     int32                      `protobuf:"varint,2,opt,name=main_task_progress,json=mainTaskProgress,proto3" json:"main_task_progress,omitempty"`
	BranchTaskId         []int32                    `protobuf:"varint,11,rep,name=branch_task_id,json=branchTaskId" json:"branch_task_id,omitempty"`
	BranchTaskProgress   []int32                    `protobuf:"varint,12,rep,name=branch_task_progress,json=branchTaskProgress" json:"branch_task_progress,omitempty"`
	BaYeStage            *HeroBaYeStageProto        `protobuf:"bytes,20,opt,name=ba_ye_stage,json=baYeStage" json:"ba_ye_stage,omitempty"`
	AchieveTaskList      *AchieveTaskListProto      `protobuf:"bytes,30,opt,name=achieve_task_list,json=achieveTaskList" json:"achieve_task_list,omitempty"`
	ActiveDegreeTaskList *ActiveDegreeTaskListProto `protobuf:"bytes,31,opt,name=active_degree_task_list,json=activeDegreeTaskList" json:"active_degree_task_list,omitempty"`
	BwzlTaskList         *BwzlTaskListProto         `protobuf:"bytes,40,opt,name=bwzl_task_list,json=bwzlTaskList" json:"bwzl_task_list,omitempty"`
	TitleTaskList        *TitleTaskListProto        `protobuf:"bytes,45,opt,name=title_task_list,json=titleTaskList" json:"title_task_list,omitempty"`
	CollectTaskBoxId     int32                      `protobuf:"varint,99,opt,name=collect_task_box_id,json=collectTaskBoxId,proto3" json:"collect_task_box_id,omitempty"`
}

func (m *HeroTaskProto) Reset()                    { *m = HeroTaskProto{} }
func (m *HeroTaskProto) String() string            { return proto.CompactTextString(m) }
func (*HeroTaskProto) ProtoMessage()               {}
func (*HeroTaskProto) Descriptor() ([]byte, []int) { return fileDescriptorTask, []int{8} }

func (m *HeroTaskProto) GetMainTaskId() int32 {
	if m != nil {
		return m.MainTaskId
	}
	return 0
}

func (m *HeroTaskProto) GetMainTaskProgress() int32 {
	if m != nil {
		return m.MainTaskProgress
	}
	return 0
}

func (m *HeroTaskProto) GetBranchTaskId() []int32 {
	if m != nil {
		return m.BranchTaskId
	}
	return nil
}

func (m *HeroTaskProto) GetBranchTaskProgress() []int32 {
	if m != nil {
		return m.BranchTaskProgress
	}
	return nil
}

func (m *HeroTaskProto) GetBaYeStage() *HeroBaYeStageProto {
	if m != nil {
		return m.BaYeStage
	}
	return nil
}

func (m *HeroTaskProto) GetAchieveTaskList() *AchieveTaskListProto {
	if m != nil {
		return m.AchieveTaskList
	}
	return nil
}

func (m *HeroTaskProto) GetActiveDegreeTaskList() *ActiveDegreeTaskListProto {
	if m != nil {
		return m.ActiveDegreeTaskList
	}
	return nil
}

func (m *HeroTaskProto) GetBwzlTaskList() *BwzlTaskListProto {
	if m != nil {
		return m.BwzlTaskList
	}
	return nil
}

func (m *HeroTaskProto) GetTitleTaskList() *TitleTaskListProto {
	if m != nil {
		return m.TitleTaskList
	}
	return nil
}

func (m *HeroTaskProto) GetCollectTaskBoxId() int32 {
	if m != nil {
		return m.CollectTaskBoxId
	}
	return 0
}

// 玩家霸业数据
type HeroBaYeStageProto struct {
	Stage        int32   `protobuf:"varint,1,opt,name=stage,proto3" json:"stage,omitempty"`
	TaskId       []int32 `protobuf:"varint,11,rep,name=task_id,json=taskId" json:"task_id,omitempty"`
	TaskProgress []int32 `protobuf:"varint,12,rep,name=task_progress,json=taskProgress" json:"task_progress,omitempty"`
	IsCollected  []bool  `protobuf:"varint,13,rep,name=is_collected,json=isCollected" json:"is_collected,omitempty"`
}

func (m *HeroBaYeStageProto) Reset()                    { *m = HeroBaYeStageProto{} }
func (m *HeroBaYeStageProto) String() string            { return proto.CompactTextString(m) }
func (*HeroBaYeStageProto) ProtoMessage()               {}
func (*HeroBaYeStageProto) Descriptor() ([]byte, []int) { return fileDescriptorTask, []int{9} }

func (m *HeroBaYeStageProto) GetStage() int32 {
	if m != nil {
		return m.Stage
	}
	return 0
}

func (m *HeroBaYeStageProto) GetTaskId() []int32 {
	if m != nil {
		return m.TaskId
	}
	return nil
}

func (m *HeroBaYeStageProto) GetTaskProgress() []int32 {
	if m != nil {
		return m.TaskProgress
	}
	return nil
}

func (m *HeroBaYeStageProto) GetIsCollected() []bool {
	if m != nil {
		return m.IsCollected
	}
	return nil
}

// 选择展示的成就，这里是用于他人查看的时候显示的成就任务
type SelectShowAchievesProto struct {
	AchieveTaskId        []int32 `protobuf:"varint,1,rep,name=achieve_task_id,json=achieveTaskId" json:"achieve_task_id,omitempty"`
	AchieveTaskReachTime []int32 `protobuf:"varint,2,rep,name=achieve_task_reach_time,json=achieveTaskReachTime" json:"achieve_task_reach_time,omitempty"`
	TotalStar            int32   `protobuf:"varint,3,opt,name=total_star,json=totalStar,proto3" json:"total_star,omitempty"`
}

func (m *SelectShowAchievesProto) Reset()                    { *m = SelectShowAchievesProto{} }
func (m *SelectShowAchievesProto) String() string            { return proto.CompactTextString(m) }
func (*SelectShowAchievesProto) ProtoMessage()               {}
func (*SelectShowAchievesProto) Descriptor() ([]byte, []int) { return fileDescriptorTask, []int{10} }

func (m *SelectShowAchievesProto) GetAchieveTaskId() []int32 {
	if m != nil {
		return m.AchieveTaskId
	}
	return nil
}

func (m *SelectShowAchievesProto) GetAchieveTaskReachTime() []int32 {
	if m != nil {
		return m.AchieveTaskReachTime
	}
	return nil
}

func (m *SelectShowAchievesProto) GetTotalStar() int32 {
	if m != nil {
		return m.TotalStar
	}
	return 0
}

type AchieveTaskListProto struct {
	List               []*AchieveTaskProto `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
	CollectStarCount   []int32             `protobuf:"varint,2,rep,name=collect_star_count,json=collectStarCount" json:"collect_star_count,omitempty"`
	SelectShowAchieves []int32             `protobuf:"varint,3,rep,name=select_show_achieves,json=selectShowAchieves" json:"select_show_achieves,omitempty"`
}

func (m *AchieveTaskListProto) Reset()                    { *m = AchieveTaskListProto{} }
func (m *AchieveTaskListProto) String() string            { return proto.CompactTextString(m) }
func (*AchieveTaskListProto) ProtoMessage()               {}
func (*AchieveTaskListProto) Descriptor() ([]byte, []int) { return fileDescriptorTask, []int{11} }

func (m *AchieveTaskListProto) GetList() []*AchieveTaskProto {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *AchieveTaskListProto) GetCollectStarCount() []int32 {
	if m != nil {
		return m.CollectStarCount
	}
	return nil
}

func (m *AchieveTaskListProto) GetSelectShowAchieves() []int32 {
	if m != nil {
		return m.SelectShowAchieves
	}
	return nil
}

type OtherAchieveTaskListProto struct {
	List               []*AchieveTaskProto `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
	SelectShowAchieves []int32             `protobuf:"varint,3,rep,name=select_show_achieves,json=selectShowAchieves" json:"select_show_achieves,omitempty"`
}

func (m *OtherAchieveTaskListProto) Reset()                    { *m = OtherAchieveTaskListProto{} }
func (m *OtherAchieveTaskListProto) String() string            { return proto.CompactTextString(m) }
func (*OtherAchieveTaskListProto) ProtoMessage()               {}
func (*OtherAchieveTaskListProto) Descriptor() ([]byte, []int) { return fileDescriptorTask, []int{12} }

func (m *OtherAchieveTaskListProto) GetList() []*AchieveTaskProto {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *OtherAchieveTaskListProto) GetSelectShowAchieves() []int32 {
	if m != nil {
		return m.SelectShowAchieves
	}
	return nil
}

type AchieveTaskProto struct {
	Id          int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Progress    int32 `protobuf:"varint,2,opt,name=progress,proto3" json:"progress,omitempty"`
	IsCollected bool  `protobuf:"varint,3,opt,name=is_collected,json=isCollected,proto3" json:"is_collected,omitempty"`
	ReachTime   int32 `protobuf:"varint,4,opt,name=reach_time,json=reachTime,proto3" json:"reach_time,omitempty"`
}

func (m *AchieveTaskProto) Reset()                    { *m = AchieveTaskProto{} }
func (m *AchieveTaskProto) String() string            { return proto.CompactTextString(m) }
func (*AchieveTaskProto) ProtoMessage()               {}
func (*AchieveTaskProto) Descriptor() ([]byte, []int) { return fileDescriptorTask, []int{13} }

func (m *AchieveTaskProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AchieveTaskProto) GetProgress() int32 {
	if m != nil {
		return m.Progress
	}
	return 0
}

func (m *AchieveTaskProto) GetIsCollected() bool {
	if m != nil {
		return m.IsCollected
	}
	return false
}

func (m *AchieveTaskProto) GetReachTime() int32 {
	if m != nil {
		return m.ReachTime
	}
	return 0
}

type ActiveDegreeTaskListProto struct {
	List                []*ActiveDegreeTaskProto `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
	CollectedPrizeIndex []int32                  `protobuf:"varint,3,rep,name=collected_prize_index,json=collectedPrizeIndex" json:"collected_prize_index,omitempty"`
}

func (m *ActiveDegreeTaskListProto) Reset()                    { *m = ActiveDegreeTaskListProto{} }
func (m *ActiveDegreeTaskListProto) String() string            { return proto.CompactTextString(m) }
func (*ActiveDegreeTaskListProto) ProtoMessage()               {}
func (*ActiveDegreeTaskListProto) Descriptor() ([]byte, []int) { return fileDescriptorTask, []int{14} }

func (m *ActiveDegreeTaskListProto) GetList() []*ActiveDegreeTaskProto {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ActiveDegreeTaskListProto) GetCollectedPrizeIndex() []int32 {
	if m != nil {
		return m.CollectedPrizeIndex
	}
	return nil
}

type ActiveDegreeTaskProto struct {
	Id       int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Progress int32 `protobuf:"varint,2,opt,name=progress,proto3" json:"progress,omitempty"`
}

func (m *ActiveDegreeTaskProto) Reset()                    { *m = ActiveDegreeTaskProto{} }
func (m *ActiveDegreeTaskProto) String() string            { return proto.CompactTextString(m) }
func (*ActiveDegreeTaskProto) ProtoMessage()               {}
func (*ActiveDegreeTaskProto) Descriptor() ([]byte, []int) { return fileDescriptorTask, []int{15} }

func (m *ActiveDegreeTaskProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ActiveDegreeTaskProto) GetProgress() int32 {
	if m != nil {
		return m.Progress
	}
	return 0
}

type BwzlTaskListProto struct {
	List            []*BwzlTaskProto `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
	CollectedPrizes []int32          `protobuf:"varint,2,rep,name=collected_prizes,json=collectedPrizes" json:"collected_prizes,omitempty"`
}

func (m *BwzlTaskListProto) Reset()                    { *m = BwzlTaskListProto{} }
func (m *BwzlTaskListProto) String() string            { return proto.CompactTextString(m) }
func (*BwzlTaskListProto) ProtoMessage()               {}
func (*BwzlTaskListProto) Descriptor() ([]byte, []int) { return fileDescriptorTask, []int{16} }

func (m *BwzlTaskListProto) GetList() []*BwzlTaskProto {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *BwzlTaskListProto) GetCollectedPrizes() []int32 {
	if m != nil {
		return m.CollectedPrizes
	}
	return nil
}

type BwzlTaskProto struct {
	Id          int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Progress    int32 `protobuf:"varint,2,opt,name=progress,proto3" json:"progress,omitempty"`
	IsCollected bool  `protobuf:"varint,3,opt,name=is_collected,json=isCollected,proto3" json:"is_collected,omitempty"`
}

func (m *BwzlTaskProto) Reset()                    { *m = BwzlTaskProto{} }
func (m *BwzlTaskProto) String() string            { return proto.CompactTextString(m) }
func (*BwzlTaskProto) ProtoMessage()               {}
func (*BwzlTaskProto) Descriptor() ([]byte, []int) { return fileDescriptorTask, []int{17} }

func (m *BwzlTaskProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BwzlTaskProto) GetProgress() int32 {
	if m != nil {
		return m.Progress
	}
	return 0
}

func (m *BwzlTaskProto) GetIsCollected() bool {
	if m != nil {
		return m.IsCollected
	}
	return false
}

type TitleTaskListProto struct {
	CompletedTitleId int32             `protobuf:"varint,1,opt,name=completed_title_id,json=completedTitleId,proto3" json:"completed_title_id,omitempty"`
	List             []*TitleTaskProto `protobuf:"bytes,2,rep,name=list" json:"list,omitempty"`
}

func (m *TitleTaskListProto) Reset()                    { *m = TitleTaskListProto{} }
func (m *TitleTaskListProto) String() string            { return proto.CompactTextString(m) }
func (*TitleTaskListProto) ProtoMessage()               {}
func (*TitleTaskListProto) Descriptor() ([]byte, []int) { return fileDescriptorTask, []int{18} }

func (m *TitleTaskListProto) GetCompletedTitleId() int32 {
	if m != nil {
		return m.CompletedTitleId
	}
	return 0
}

func (m *TitleTaskListProto) GetList() []*TitleTaskProto {
	if m != nil {
		return m.List
	}
	return nil
}

type TitleTaskProto struct {
	Id       int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Progress int32 `protobuf:"varint,2,opt,name=progress,proto3" json:"progress,omitempty"`
}

func (m *TitleTaskProto) Reset()                    { *m = TitleTaskProto{} }
func (m *TitleTaskProto) String() string            { return proto.CompactTextString(m) }
func (*TitleTaskProto) ProtoMessage()               {}
func (*TitleTaskProto) Descriptor() ([]byte, []int) { return fileDescriptorTask, []int{19} }

func (m *TitleTaskProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TitleTaskProto) GetProgress() int32 {
	if m != nil {
		return m.Progress
	}
	return 0
}

func init() {
	proto.RegisterType((*TaskMiscDataProto)(nil), "proto.TaskMiscDataProto")
	proto.RegisterType((*TaskDataProto)(nil), "proto.TaskDataProto")
	proto.RegisterType((*TaskTargetProto)(nil), "proto.TaskTargetProto")
	proto.RegisterType((*BaYeStageDataProto)(nil), "proto.BaYeStageDataProto")
	proto.RegisterType((*ActiveDegreePrizeProto)(nil), "proto.ActiveDegreePrizeProto")
	proto.RegisterType((*AchieveTaskStarPrizeProto)(nil), "proto.AchieveTaskStarPrizeProto")
	proto.RegisterType((*BwzlPrizeDataProto)(nil), "proto.BwzlPrizeDataProto")
	proto.RegisterType((*TaskBoxProto)(nil), "proto.TaskBoxProto")
	proto.RegisterType((*HeroTaskProto)(nil), "proto.HeroTaskProto")
	proto.RegisterType((*HeroBaYeStageProto)(nil), "proto.HeroBaYeStageProto")
	proto.RegisterType((*SelectShowAchievesProto)(nil), "proto.SelectShowAchievesProto")
	proto.RegisterType((*AchieveTaskListProto)(nil), "proto.AchieveTaskListProto")
	proto.RegisterType((*OtherAchieveTaskListProto)(nil), "proto.OtherAchieveTaskListProto")
	proto.RegisterType((*AchieveTaskProto)(nil), "proto.AchieveTaskProto")
	proto.RegisterType((*ActiveDegreeTaskListProto)(nil), "proto.ActiveDegreeTaskListProto")
	proto.RegisterType((*ActiveDegreeTaskProto)(nil), "proto.ActiveDegreeTaskProto")
	proto.RegisterType((*BwzlTaskListProto)(nil), "proto.BwzlTaskListProto")
	proto.RegisterType((*BwzlTaskProto)(nil), "proto.BwzlTaskProto")
	proto.RegisterType((*TitleTaskListProto)(nil), "proto.TitleTaskListProto")
	proto.RegisterType((*TitleTaskProto)(nil), "proto.TitleTaskProto")
	proto.RegisterEnum("proto.TaskTargetType", TaskTargetType_name, TaskTargetType_value)
}
func (m *TaskMiscDataProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskMiscDataProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MaxShowAchieveCount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.MaxShowAchieveCount))
	}
	if len(m.BwzlBgImg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTask(dAtA, i, uint64(len(m.BwzlBgImg)))
		i += copy(dAtA[i:], m.BwzlBgImg)
	}
	return i, nil
}

func (m *TaskDataProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskDataProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTask(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Text) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTask(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	if m.Target != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Target.Size()))
		n1, err := m.Target.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Prize != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Prize.Size()))
		n2, err := m.Prize.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Icon) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTask(dAtA, i, uint64(len(m.Icon)))
		i += copy(dAtA[i:], m.Icon)
	}
	if m.Quality != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Quality))
	}
	if m.Order != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Order))
	}
	if m.AchieveType != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.AchieveType))
	}
	if m.Star != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Star))
	}
	if m.TotalStar != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.TotalStar))
	}
	if m.PrevTask != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.PrevTask))
	}
	if m.AddDegree != 0 {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.AddDegree))
	}
	if m.Day != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Day))
	}
	return i, nil
}

func (m *TaskTargetProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskTargetProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Type))
	}
	if m.TotalProgress != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.TotalProgress))
	}
	if m.SubType != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.SubType))
	}
	if m.SubTypeId != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.SubTypeId))
	}
	return i, nil
}

func (m *BaYeStageDataProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaYeStageDataProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Stage != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Stage))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTask(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Tasks) > 0 {
		for _, num := range m.Tasks {
			dAtA[i] = 0x18
			i++
			i = encodeVarintTask(dAtA, i, uint64(num))
		}
	}
	if m.Prize != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Prize.Size()))
		n3, err := m.Prize.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Next != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Next))
	}
	if len(m.StageName) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTask(dAtA, i, uint64(len(m.StageName)))
		i += copy(dAtA[i:], m.StageName)
	}
	return i, nil
}

func (m *ActiveDegreePrizeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActiveDegreePrizeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Degree != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Degree))
	}
	if m.Prize != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Prize.Size()))
		n4, err := m.Prize.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *AchieveTaskStarPrizeProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AchieveTaskStarPrizeProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Star != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Star))
	}
	if len(m.Icon) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTask(dAtA, i, uint64(len(m.Icon)))
		i += copy(dAtA[i:], m.Icon)
	}
	if len(m.Desc) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTask(dAtA, i, uint64(len(m.Desc)))
		i += copy(dAtA[i:], m.Desc)
	}
	if m.Prize != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Prize.Size()))
		n5, err := m.Prize.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *BwzlPrizeDataProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BwzlPrizeDataProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CollectPrizeTaskCount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.CollectPrizeTaskCount))
	}
	if len(m.Icon) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTask(dAtA, i, uint64(len(m.Icon)))
		i += copy(dAtA[i:], m.Icon)
	}
	if m.Prize != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Prize.Size()))
		n6, err := m.Prize.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *TaskBoxProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskBoxProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Id))
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Count))
	}
	if m.Prize != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Prize.Size()))
		n7, err := m.Prize.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *HeroTaskProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeroTaskProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MainTaskId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.MainTaskId))
	}
	if m.MainTaskProgress != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.MainTaskProgress))
	}
	if len(m.BranchTaskId) > 0 {
		for _, num := range m.BranchTaskId {
			dAtA[i] = 0x58
			i++
			i = encodeVarintTask(dAtA, i, uint64(num))
		}
	}
	if len(m.BranchTaskProgress) > 0 {
		for _, num := range m.BranchTaskProgress {
			dAtA[i] = 0x60
			i++
			i = encodeVarintTask(dAtA, i, uint64(num))
		}
	}
	if m.BaYeStage != nil {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.BaYeStage.Size()))
		n8, err := m.BaYeStage.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.AchieveTaskList != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.AchieveTaskList.Size()))
		n9, err := m.AchieveTaskList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.ActiveDegreeTaskList != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.ActiveDegreeTaskList.Size()))
		n10, err := m.ActiveDegreeTaskList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.BwzlTaskList != nil {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.BwzlTaskList.Size()))
		n11, err := m.BwzlTaskList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.TitleTaskList != nil {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.TitleTaskList.Size()))
		n12, err := m.TitleTaskList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.CollectTaskBoxId != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.CollectTaskBoxId))
	}
	return i, nil
}

func (m *HeroBaYeStageProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeroBaYeStageProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Stage != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Stage))
	}
	if len(m.TaskId) > 0 {
		for _, num := range m.TaskId {
			dAtA[i] = 0x58
			i++
			i = encodeVarintTask(dAtA, i, uint64(num))
		}
	}
	if len(m.TaskProgress) > 0 {
		for _, num := range m.TaskProgress {
			dAtA[i] = 0x60
			i++
			i = encodeVarintTask(dAtA, i, uint64(num))
		}
	}
	if len(m.IsCollected) > 0 {
		for _, b := range m.IsCollected {
			dAtA[i] = 0x68
			i++
			if b {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i++
		}
	}
	return i, nil
}

func (m *SelectShowAchievesProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SelectShowAchievesProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AchieveTaskId) > 0 {
		for _, num := range m.AchieveTaskId {
			dAtA[i] = 0x8
			i++
			i = encodeVarintTask(dAtA, i, uint64(num))
		}
	}
	if len(m.AchieveTaskReachTime) > 0 {
		for _, num := range m.AchieveTaskReachTime {
			dAtA[i] = 0x10
			i++
			i = encodeVarintTask(dAtA, i, uint64(num))
		}
	}
	if m.TotalStar != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.TotalStar))
	}
	return i, nil
}

func (m *AchieveTaskListProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AchieveTaskListProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTask(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.CollectStarCount) > 0 {
		for _, num := range m.CollectStarCount {
			dAtA[i] = 0x10
			i++
			i = encodeVarintTask(dAtA, i, uint64(num))
		}
	}
	if len(m.SelectShowAchieves) > 0 {
		for _, num := range m.SelectShowAchieves {
			dAtA[i] = 0x18
			i++
			i = encodeVarintTask(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *OtherAchieveTaskListProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OtherAchieveTaskListProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTask(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.SelectShowAchieves) > 0 {
		for _, num := range m.SelectShowAchieves {
			dAtA[i] = 0x18
			i++
			i = encodeVarintTask(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *AchieveTaskProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AchieveTaskProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Id))
	}
	if m.Progress != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Progress))
	}
	if m.IsCollected {
		dAtA[i] = 0x18
		i++
		if m.IsCollected {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ReachTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.ReachTime))
	}
	return i, nil
}

func (m *ActiveDegreeTaskListProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActiveDegreeTaskListProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTask(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.CollectedPrizeIndex) > 0 {
		for _, num := range m.CollectedPrizeIndex {
			dAtA[i] = 0x18
			i++
			i = encodeVarintTask(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *ActiveDegreeTaskProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActiveDegreeTaskProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Id))
	}
	if m.Progress != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Progress))
	}
	return i, nil
}

func (m *BwzlTaskListProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BwzlTaskListProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTask(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.CollectedPrizes) > 0 {
		for _, num := range m.CollectedPrizes {
			dAtA[i] = 0x10
			i++
			i = encodeVarintTask(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *BwzlTaskProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BwzlTaskProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Id))
	}
	if m.Progress != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Progress))
	}
	if m.IsCollected {
		dAtA[i] = 0x18
		i++
		if m.IsCollected {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *TitleTaskListProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TitleTaskListProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CompletedTitleId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.CompletedTitleId))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTask(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TitleTaskProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TitleTaskProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Id))
	}
	if m.Progress != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTask(dAtA, i, uint64(m.Progress))
	}
	return i, nil
}

func encodeFixed64Task(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Task(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintTask(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TaskMiscDataProto) Size() (n int) {
	var l int
	_ = l
	if m.MaxShowAchieveCount != 0 {
		n += 1 + sovTask(uint64(m.MaxShowAchieveCount))
	}
	l = len(m.BwzlBgImg)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	return n
}

func (m *TaskDataProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTask(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	if m.Target != nil {
		l = m.Target.Size()
		n += 1 + l + sovTask(uint64(l))
	}
	if m.Prize != nil {
		l = m.Prize.Size()
		n += 1 + l + sovTask(uint64(l))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	if m.Quality != 0 {
		n += 1 + sovTask(uint64(m.Quality))
	}
	if m.Order != 0 {
		n += 1 + sovTask(uint64(m.Order))
	}
	if m.AchieveType != 0 {
		n += 2 + sovTask(uint64(m.AchieveType))
	}
	if m.Star != 0 {
		n += 2 + sovTask(uint64(m.Star))
	}
	if m.TotalStar != 0 {
		n += 2 + sovTask(uint64(m.TotalStar))
	}
	if m.PrevTask != 0 {
		n += 2 + sovTask(uint64(m.PrevTask))
	}
	if m.AddDegree != 0 {
		n += 2 + sovTask(uint64(m.AddDegree))
	}
	if m.Day != 0 {
		n += 2 + sovTask(uint64(m.Day))
	}
	return n
}

func (m *TaskTargetProto) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovTask(uint64(m.Type))
	}
	if m.TotalProgress != 0 {
		n += 1 + sovTask(uint64(m.TotalProgress))
	}
	if m.SubType != 0 {
		n += 1 + sovTask(uint64(m.SubType))
	}
	if m.SubTypeId != 0 {
		n += 1 + sovTask(uint64(m.SubTypeId))
	}
	return n
}

func (m *BaYeStageDataProto) Size() (n int) {
	var l int
	_ = l
	if m.Stage != 0 {
		n += 1 + sovTask(uint64(m.Stage))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	if len(m.Tasks) > 0 {
		for _, e := range m.Tasks {
			n += 1 + sovTask(uint64(e))
		}
	}
	if m.Prize != nil {
		l = m.Prize.Size()
		n += 1 + l + sovTask(uint64(l))
	}
	if m.Next != 0 {
		n += 1 + sovTask(uint64(m.Next))
	}
	l = len(m.StageName)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	return n
}

func (m *ActiveDegreePrizeProto) Size() (n int) {
	var l int
	_ = l
	if m.Degree != 0 {
		n += 1 + sovTask(uint64(m.Degree))
	}
	if m.Prize != nil {
		l = m.Prize.Size()
		n += 1 + l + sovTask(uint64(l))
	}
	return n
}

func (m *AchieveTaskStarPrizeProto) Size() (n int) {
	var l int
	_ = l
	if m.Star != 0 {
		n += 1 + sovTask(uint64(m.Star))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	if m.Prize != nil {
		l = m.Prize.Size()
		n += 1 + l + sovTask(uint64(l))
	}
	return n
}

func (m *BwzlPrizeDataProto) Size() (n int) {
	var l int
	_ = l
	if m.CollectPrizeTaskCount != 0 {
		n += 1 + sovTask(uint64(m.CollectPrizeTaskCount))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	if m.Prize != nil {
		l = m.Prize.Size()
		n += 1 + l + sovTask(uint64(l))
	}
	return n
}

func (m *TaskBoxProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTask(uint64(m.Id))
	}
	if m.Count != 0 {
		n += 1 + sovTask(uint64(m.Count))
	}
	if m.Prize != nil {
		l = m.Prize.Size()
		n += 1 + l + sovTask(uint64(l))
	}
	return n
}

func (m *HeroTaskProto) Size() (n int) {
	var l int
	_ = l
	if m.MainTaskId != 0 {
		n += 1 + sovTask(uint64(m.MainTaskId))
	}
	if m.MainTaskProgress != 0 {
		n += 1 + sovTask(uint64(m.MainTaskProgress))
	}
	if len(m.BranchTaskId) > 0 {
		for _, e := range m.BranchTaskId {
			n += 1 + sovTask(uint64(e))
		}
	}
	if len(m.BranchTaskProgress) > 0 {
		for _, e := range m.BranchTaskProgress {
			n += 1 + sovTask(uint64(e))
		}
	}
	if m.BaYeStage != nil {
		l = m.BaYeStage.Size()
		n += 2 + l + sovTask(uint64(l))
	}
	if m.AchieveTaskList != nil {
		l = m.AchieveTaskList.Size()
		n += 2 + l + sovTask(uint64(l))
	}
	if m.ActiveDegreeTaskList != nil {
		l = m.ActiveDegreeTaskList.Size()
		n += 2 + l + sovTask(uint64(l))
	}
	if m.BwzlTaskList != nil {
		l = m.BwzlTaskList.Size()
		n += 2 + l + sovTask(uint64(l))
	}
	if m.TitleTaskList != nil {
		l = m.TitleTaskList.Size()
		n += 2 + l + sovTask(uint64(l))
	}
	if m.CollectTaskBoxId != 0 {
		n += 2 + sovTask(uint64(m.CollectTaskBoxId))
	}
	return n
}

func (m *HeroBaYeStageProto) Size() (n int) {
	var l int
	_ = l
	if m.Stage != 0 {
		n += 1 + sovTask(uint64(m.Stage))
	}
	if len(m.TaskId) > 0 {
		for _, e := range m.TaskId {
			n += 1 + sovTask(uint64(e))
		}
	}
	if len(m.TaskProgress) > 0 {
		for _, e := range m.TaskProgress {
			n += 1 + sovTask(uint64(e))
		}
	}
	if len(m.IsCollected) > 0 {
		n += 2 * len(m.IsCollected)
	}
	return n
}

func (m *SelectShowAchievesProto) Size() (n int) {
	var l int
	_ = l
	if len(m.AchieveTaskId) > 0 {
		for _, e := range m.AchieveTaskId {
			n += 1 + sovTask(uint64(e))
		}
	}
	if len(m.AchieveTaskReachTime) > 0 {
		for _, e := range m.AchieveTaskReachTime {
			n += 1 + sovTask(uint64(e))
		}
	}
	if m.TotalStar != 0 {
		n += 1 + sovTask(uint64(m.TotalStar))
	}
	return n
}

func (m *AchieveTaskListProto) Size() (n int) {
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovTask(uint64(l))
		}
	}
	if len(m.CollectStarCount) > 0 {
		for _, e := range m.CollectStarCount {
			n += 1 + sovTask(uint64(e))
		}
	}
	if len(m.SelectShowAchieves) > 0 {
		for _, e := range m.SelectShowAchieves {
			n += 1 + sovTask(uint64(e))
		}
	}
	return n
}

func (m *OtherAchieveTaskListProto) Size() (n int) {
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovTask(uint64(l))
		}
	}
	if len(m.SelectShowAchieves) > 0 {
		for _, e := range m.SelectShowAchieves {
			n += 1 + sovTask(uint64(e))
		}
	}
	return n
}

func (m *AchieveTaskProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTask(uint64(m.Id))
	}
	if m.Progress != 0 {
		n += 1 + sovTask(uint64(m.Progress))
	}
	if m.IsCollected {
		n += 2
	}
	if m.ReachTime != 0 {
		n += 1 + sovTask(uint64(m.ReachTime))
	}
	return n
}

func (m *ActiveDegreeTaskListProto) Size() (n int) {
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovTask(uint64(l))
		}
	}
	if len(m.CollectedPrizeIndex) > 0 {
		for _, e := range m.CollectedPrizeIndex {
			n += 1 + sovTask(uint64(e))
		}
	}
	return n
}

func (m *ActiveDegreeTaskProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTask(uint64(m.Id))
	}
	if m.Progress != 0 {
		n += 1 + sovTask(uint64(m.Progress))
	}
	return n
}

func (m *BwzlTaskListProto) Size() (n int) {
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovTask(uint64(l))
		}
	}
	if len(m.CollectedPrizes) > 0 {
		for _, e := range m.CollectedPrizes {
			n += 1 + sovTask(uint64(e))
		}
	}
	return n
}

func (m *BwzlTaskProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTask(uint64(m.Id))
	}
	if m.Progress != 0 {
		n += 1 + sovTask(uint64(m.Progress))
	}
	if m.IsCollected {
		n += 2
	}
	return n
}

func (m *TitleTaskListProto) Size() (n int) {
	var l int
	_ = l
	if m.CompletedTitleId != 0 {
		n += 1 + sovTask(uint64(m.CompletedTitleId))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovTask(uint64(l))
		}
	}
	return n
}

func (m *TitleTaskProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTask(uint64(m.Id))
	}
	if m.Progress != 0 {
		n += 1 + sovTask(uint64(m.Progress))
	}
	return n
}

func sovTask(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTask(x uint64) (n int) {
	return sovTask(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TaskMiscDataProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskMiscDataProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskMiscDataProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxShowAchieveCount", wireType)
			}
			m.MaxShowAchieveCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxShowAchieveCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BwzlBgImg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BwzlBgImg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskDataProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskDataProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskDataProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Target == nil {
				m.Target = &TaskTargetProto{}
			}
			if err := m.Target.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Prize == nil {
				m.Prize = &PrizeProto{}
			}
			if err := m.Prize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quality", wireType)
			}
			m.Quality = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quality |= (Quality(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			m.Order = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AchieveType", wireType)
			}
			m.AchieveType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AchieveType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Star", wireType)
			}
			m.Star = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Star |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalStar", wireType)
			}
			m.TotalStar = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalStar |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevTask", wireType)
			}
			m.PrevTask = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrevTask |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddDegree", wireType)
			}
			m.AddDegree = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddDegree |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 40:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Day", wireType)
			}
			m.Day = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Day |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskTargetProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskTargetProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskTargetProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (TaskTargetType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalProgress", wireType)
			}
			m.TotalProgress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalProgress |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubType", wireType)
			}
			m.SubType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubTypeId", wireType)
			}
			m.SubTypeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubTypeId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BaYeStageDataProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaYeStageDataProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaYeStageDataProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stage", wireType)
			}
			m.Stage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stage |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Tasks = append(m.Tasks, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTask
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Tasks = append(m.Tasks, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Tasks", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Prize == nil {
				m.Prize = &PrizeProto{}
			}
			if err := m.Prize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Next", wireType)
			}
			m.Next = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Next |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StageName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActiveDegreePrizeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActiveDegreePrizeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActiveDegreePrizeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Degree", wireType)
			}
			m.Degree = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Degree |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Prize == nil {
				m.Prize = &PrizeProto{}
			}
			if err := m.Prize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AchieveTaskStarPrizeProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AchieveTaskStarPrizeProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AchieveTaskStarPrizeProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Star", wireType)
			}
			m.Star = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Star |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Prize == nil {
				m.Prize = &PrizeProto{}
			}
			if err := m.Prize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BwzlPrizeDataProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BwzlPrizeDataProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BwzlPrizeDataProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectPrizeTaskCount", wireType)
			}
			m.CollectPrizeTaskCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollectPrizeTaskCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Prize == nil {
				m.Prize = &PrizeProto{}
			}
			if err := m.Prize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskBoxProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskBoxProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskBoxProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Prize == nil {
				m.Prize = &PrizeProto{}
			}
			if err := m.Prize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeroTaskProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroTaskProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroTaskProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainTaskId", wireType)
			}
			m.MainTaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MainTaskId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainTaskProgress", wireType)
			}
			m.MainTaskProgress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MainTaskProgress |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BranchTaskId = append(m.BranchTaskId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTask
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BranchTaskId = append(m.BranchTaskId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BranchTaskId", wireType)
			}
		case 12:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BranchTaskProgress = append(m.BranchTaskProgress, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTask
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BranchTaskProgress = append(m.BranchTaskProgress, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BranchTaskProgress", wireType)
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaYeStage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaYeStage == nil {
				m.BaYeStage = &HeroBaYeStageProto{}
			}
			if err := m.BaYeStage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AchieveTaskList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AchieveTaskList == nil {
				m.AchieveTaskList = &AchieveTaskListProto{}
			}
			if err := m.AchieveTaskList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveDegreeTaskList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActiveDegreeTaskList == nil {
				m.ActiveDegreeTaskList = &ActiveDegreeTaskListProto{}
			}
			if err := m.ActiveDegreeTaskList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BwzlTaskList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BwzlTaskList == nil {
				m.BwzlTaskList = &BwzlTaskListProto{}
			}
			if err := m.BwzlTaskList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 45:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TitleTaskList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TitleTaskList == nil {
				m.TitleTaskList = &TitleTaskListProto{}
			}
			if err := m.TitleTaskList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 99:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectTaskBoxId", wireType)
			}
			m.CollectTaskBoxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollectTaskBoxId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeroBaYeStageProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroBaYeStageProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroBaYeStageProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stage", wireType)
			}
			m.Stage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stage |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TaskId = append(m.TaskId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTask
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TaskId = append(m.TaskId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
		case 12:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TaskProgress = append(m.TaskProgress, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTask
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TaskProgress = append(m.TaskProgress, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskProgress", wireType)
			}
		case 13:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.IsCollected = append(m.IsCollected, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTask
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.IsCollected = append(m.IsCollected, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCollected", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SelectShowAchievesProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SelectShowAchievesProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SelectShowAchievesProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AchieveTaskId = append(m.AchieveTaskId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTask
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AchieveTaskId = append(m.AchieveTaskId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AchieveTaskId", wireType)
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AchieveTaskReachTime = append(m.AchieveTaskReachTime, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTask
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AchieveTaskReachTime = append(m.AchieveTaskReachTime, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AchieveTaskReachTime", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalStar", wireType)
			}
			m.TotalStar = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalStar |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AchieveTaskListProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AchieveTaskListProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AchieveTaskListProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &AchieveTaskProto{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CollectStarCount = append(m.CollectStarCount, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTask
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CollectStarCount = append(m.CollectStarCount, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectStarCount", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SelectShowAchieves = append(m.SelectShowAchieves, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTask
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SelectShowAchieves = append(m.SelectShowAchieves, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectShowAchieves", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OtherAchieveTaskListProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OtherAchieveTaskListProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OtherAchieveTaskListProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &AchieveTaskProto{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SelectShowAchieves = append(m.SelectShowAchieves, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTask
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SelectShowAchieves = append(m.SelectShowAchieves, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectShowAchieves", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AchieveTaskProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AchieveTaskProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AchieveTaskProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			m.Progress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Progress |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCollected", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsCollected = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReachTime", wireType)
			}
			m.ReachTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReachTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActiveDegreeTaskListProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActiveDegreeTaskListProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActiveDegreeTaskListProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &ActiveDegreeTaskProto{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CollectedPrizeIndex = append(m.CollectedPrizeIndex, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTask
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CollectedPrizeIndex = append(m.CollectedPrizeIndex, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectedPrizeIndex", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActiveDegreeTaskProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActiveDegreeTaskProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActiveDegreeTaskProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			m.Progress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Progress |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BwzlTaskListProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BwzlTaskListProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BwzlTaskListProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &BwzlTaskProto{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CollectedPrizes = append(m.CollectedPrizes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTask
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CollectedPrizes = append(m.CollectedPrizes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectedPrizes", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BwzlTaskProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BwzlTaskProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BwzlTaskProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			m.Progress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Progress |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCollected", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsCollected = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TitleTaskListProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TitleTaskListProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TitleTaskListProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletedTitleId", wireType)
			}
			m.CompletedTitleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompletedTitleId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &TitleTaskProto{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TitleTaskProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TitleTaskProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TitleTaskProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			m.Progress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Progress |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTask(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTask
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTask
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTask
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTask(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTask = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTask   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/pb/shared_proto/task.proto", fileDescriptorTask)
}

var fileDescriptorTask = []byte{
	// 2818 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x59, 0xdb, 0x76, 0xdb, 0xc6,
	0xd5, 0x0e, 0x74, 0xb0, 0xa5, 0xd1, 0x69, 0x3c, 0xa6, 0x24, 0xca, 0xb2, 0x65, 0x99, 0x8e, 0x6d,
	0xd9, 0x89, 0xe5, 0xfc, 0x8e, 0xff, 0xa4, 0x69, 0xd3, 0xac, 0x05, 0x82, 0x23, 0x72, 0x6c, 0x10,
	0x80, 0x70, 0x90, 0x44, 0xb5, 0xc9, 0x14, 0x14, 0x51, 0x89, 0x0d, 0x25, 0x2a, 0x24, 0x6d, 0xcb,
	0x6e, 0x9b, 0xa6, 0x87, 0xf4, 0xf8, 0x00, 0xcd, 0x55, 0xfb, 0x00, 0xbd, 0xed, 0x55, 0x9f, 0xa0,
	0x57, 0x5d, 0x7d, 0x84, 0xae, 0xf4, 0x45, 0xba, 0xe6, 0x00, 0x10, 0x18, 0x42, 0x4d, 0xdc, 0xf6,
	0xca, 0xe0, 0xec, 0x0f, 0x7b, 0xf6, 0xe1, 0xdb, 0xdf, 0x0c, 0x64, 0xf0, 0xe8, 0xb0, 0x3d, 0x38,
	0x7a, 0xda, 0xdc, 0x3c, 0xe8, 0x1e, 0x3f, 0xe8, 0xb4, 0x0f, 0x8f, 0x06, 0xa7, 0xe1, 0xf3, 0x07,
	0xc7, 0x61, 0x27, 0x7a, 0xf7, 0xc1, 0x69, 0xf3, 0x41, 0xff, 0x28, 0xec, 0x45, 0x2d, 0x7a, 0xda,
	0xeb, 0x0e, 0xba, 0x0f, 0x06, 0x61, 0xff, 0xe3, 0x4d, 0xfe, 0x88, 0x26, 0xf9, 0x3f, 0x57, 0x5e,
	0xe1, 0xe5, 0x66, 0xd8, 0x8f, 0xc4, 0xcb, 0xa5, 0x23, 0x70, 0xc9, 0x0f, 0xfb, 0x1f, 0xd7, 0xdb,
	0xfd, 0x83, 0x4a, 0x38, 0x08, 0x1d, 0xee, 0xf1, 0x6d, 0xb0, 0x74, 0x1c, 0x9e, 0xd1, 0xfe, 0x51,
	0xf7, 0x39, 0x0d, 0x0f, 0x8e, 0xda, 0xd1, 0xb3, 0x88, 0x1e, 0x74, 0x9f, 0x9e, 0x0c, 0x8a, 0xda,
	0xba, 0xb6, 0x31, 0xe9, 0x5e, 0x3e, 0x0e, 0xcf, 0xbc, 0xa3, 0xee, 0x73, 0x5d, 0xd8, 0x0c, 0x66,
	0x42, 0x6b, 0x60, 0xa6, 0xf9, 0xfc, 0x65, 0x87, 0x36, 0x0f, 0x69, 0xfb, 0xf8, 0xb0, 0x38, 0xb6,
	0xae, 0x6d, 0x4c, 0xbb, 0xd3, 0x6c, 0xa9, 0x7c, 0x48, 0x8e, 0x0f, 0x4b, 0x5f, 0x8c, 0x83, 0x39,
	0xb6, 0xd5, 0x70, 0x9b, 0x79, 0x30, 0xd6, 0x6e, 0x49, 0x97, 0x63, 0xed, 0x16, 0x42, 0x60, 0xe2,
	0x24, 0x3c, 0x8e, 0xe4, 0xab, 0xfc, 0x99, 0xad, 0x0d, 0xa2, 0xb3, 0x41, 0x71, 0x5c, 0xac, 0xb1,
	0x67, 0xb4, 0x09, 0x2e, 0x0c, 0xc2, 0xde, 0x61, 0x34, 0x28, 0x4e, 0xac, 0x6b, 0x1b, 0x33, 0x0f,
	0x97, 0x44, 0x2e, 0x9b, 0xcc, 0xbb, 0xcf, 0x0d, 0xdc, 0xbf, 0x2b, 0x51, 0xe8, 0x0e, 0x98, 0x3c,
	0xed, 0xb5, 0x5f, 0x46, 0xc5, 0x49, 0x0e, 0xbf, 0x24, 0xe1, 0x0e, 0x5b, 0x13, 0x48, 0x61, 0x67,
	0x9b, 0xb5, 0x0f, 0xba, 0x27, 0xc5, 0x0b, 0x62, 0x33, 0xf6, 0x8c, 0x36, 0xc0, 0xc5, 0x4f, 0x9e,
	0x86, 0x9d, 0xf6, 0xe0, 0x45, 0xf1, 0xe2, 0xba, 0xb6, 0x31, 0xff, 0x70, 0x5e, 0xbe, 0xbe, 0x2d,
	0x56, 0xdd, 0xd8, 0x8c, 0x0a, 0x60, 0xb2, 0xdb, 0x6b, 0x45, 0xbd, 0xe2, 0x14, 0xcf, 0x48, 0xfc,
	0x40, 0x37, 0xc0, 0x6c, 0x5c, 0xc2, 0xc1, 0x8b, 0xd3, 0xa8, 0x58, 0xe0, 0xc6, 0x19, 0xb9, 0xe6,
	0xbf, 0x38, 0xe5, 0xdb, 0xf6, 0x07, 0x61, 0xaf, 0xb8, 0xc8, 0x4d, 0xfc, 0x19, 0x5d, 0x03, 0x60,
	0xd0, 0x1d, 0x84, 0x1d, 0xca, 0x2d, 0x4b, 0xdc, 0x32, 0xcd, 0x57, 0x3c, 0x66, 0x5e, 0x05, 0xd3,
	0xa7, 0xbd, 0xe8, 0x19, 0x65, 0x34, 0x28, 0x2e, 0x73, 0xeb, 0x14, 0x5b, 0x60, 0x25, 0x60, 0xef,
	0x86, 0xad, 0x16, 0x6d, 0x45, 0x87, 0xbd, 0x28, 0x2a, 0xae, 0x89, 0x77, 0xc3, 0x56, 0xab, 0xc2,
	0x17, 0x10, 0x04, 0xe3, 0xad, 0xf0, 0x45, 0x71, 0x83, 0xaf, 0xb3, 0xc7, 0xd2, 0x1f, 0x34, 0xb0,
	0xa0, 0x14, 0x0f, 0xdd, 0x05, 0x13, 0x3c, 0x5e, 0x8d, 0x27, 0xbd, 0x38, 0x52, 0x62, 0x16, 0xb9,
	0xcb, 0x21, 0xe8, 0x16, 0x98, 0x17, 0xb1, 0x9e, 0xf6, 0xba, 0x87, 0xbd, 0xa8, 0xdf, 0xe7, 0x1d,
	0x9c, 0x74, 0xe7, 0xf8, 0xaa, 0x23, 0x17, 0xd1, 0x0a, 0x98, 0xea, 0x3f, 0x6d, 0x8a, 0x2a, 0xcc,
	0x70, 0xc0, 0xc5, 0xfe, 0xd3, 0x26, 0xaf, 0xc0, 0x1a, 0x98, 0x89, 0x4d, 0xb4, 0xdd, 0x2a, 0xce,
	0x8a, 0x90, 0xa5, 0x95, 0xb4, 0x4a, 0x7f, 0xd6, 0x00, 0x2a, 0x87, 0x8d, 0xc8, 0x1b, 0x84, 0x87,
	0xd1, 0x90, 0x40, 0x05, 0x30, 0xd9, 0x67, 0x2b, 0x92, 0x43, 0xe2, 0x47, 0x2e, 0x8d, 0x8a, 0x60,
	0x92, 0x95, 0xaa, 0x5f, 0x1c, 0x5f, 0x1f, 0xdf, 0x98, 0x2c, 0x8f, 0xc1, 0xd7, 0x5c, 0xb1, 0x30,
	0x24, 0xc7, 0xc4, 0x57, 0x93, 0xe3, 0x84, 0x31, 0x71, 0x52, 0x74, 0x89, 0x3d, 0xb3, 0x4a, 0xf3,
	0x3d, 0x29, 0xdf, 0x50, 0xd0, 0x66, 0x9a, 0xaf, 0x58, 0xe1, 0x71, 0x54, 0x6a, 0x80, 0x25, 0xfd,
	0x60, 0xd0, 0x7e, 0x16, 0x89, 0xca, 0x0f, 0x7d, 0xa2, 0x25, 0x70, 0x41, 0xb6, 0x47, 0x84, 0x2e,
	0x7f, 0x0d, 0xa3, 0x19, 0xfb, 0xf7, 0xd1, 0x94, 0x3e, 0xd3, 0xc0, 0x8a, 0x1c, 0x3f, 0xd6, 0x13,
	0x46, 0x8a, 0x94, 0xfb, 0x98, 0x51, 0x5a, 0x8a, 0x51, 0x31, 0xb9, 0xc7, 0x52, 0xe4, 0x46, 0x60,
	0xa2, 0x15, 0xf5, 0x0f, 0xe2, 0xe9, 0x62, 0xcf, 0x5f, 0xbb, 0x20, 0xa5, 0xdf, 0xb2, 0xa6, 0x3c,
	0x7f, 0xd9, 0xe1, 0x96, 0x61, 0x53, 0xde, 0x05, 0xc5, 0x83, 0x6e, 0xa7, 0x13, 0x1d, 0x0c, 0x28,
	0xc7, 0x71, 0x8e, 0x66, 0xe4, 0x63, 0x51, 0xda, 0xf9, 0x8b, 0x2c, 0x7a, 0x21, 0x20, 0x79, 0x01,
	0x26, 0xc1, 0x8c, 0x7f, 0x45, 0x30, 0x1f, 0x82, 0x59, 0xe6, 0xa9, 0xdc, 0x3d, 0xcb, 0xd7, 0x96,
	0x02, 0x98, 0x14, 0x21, 0x08, 0x6a, 0x8a, 0x1f, 0x5f, 0xdf, 0xfd, 0xdf, 0x26, 0xc0, 0x5c, 0x2d,
	0xea, 0x75, 0xd9, 0x1e, 0x62, 0x83, 0x75, 0x30, 0x7b, 0x1c, 0xb6, 0x4f, 0x44, 0x76, 0xc9, 0x56,
	0x80, 0xad, 0x31, 0x10, 0x69, 0xa1, 0x37, 0x01, 0x1a, 0x22, 0x94, 0xd1, 0x80, 0x31, 0x2e, 0x99,
	0x8e, 0x0d, 0x30, 0xdf, 0xec, 0x85, 0x27, 0x07, 0x47, 0x89, 0xc7, 0x99, 0x84, 0xaa, 0xb3, 0xc2,
	0x22, 0xfd, 0x3e, 0x02, 0x85, 0x34, 0x32, 0xf1, 0x3c, 0x9b, 0xe0, 0xd1, 0x10, 0x9f, 0xf8, 0x7f,
	0x0f, 0xcc, 0x34, 0x43, 0xfa, 0x22, 0xa2, 0x62, 0x62, 0x0a, 0x3c, 0xe1, 0x15, 0x99, 0x30, 0x4b,
	0x2d, 0x99, 0x2f, 0x91, 0xf8, 0x74, 0x33, 0xfe, 0x8d, 0xaa, 0xe0, 0x52, 0x22, 0x61, 0x6c, 0xc7,
	0x4e, 0xbb, 0x3f, 0xe0, 0xb2, 0x32, 0xf3, 0x70, 0x55, 0x3a, 0x48, 0x51, 0xd1, 0x6c, 0xf7, 0xa5,
	0xfe, 0x2e, 0x84, 0xd9, 0x55, 0xb4, 0x0b, 0x96, 0x43, 0x3e, 0x0f, 0x52, 0x9b, 0x52, 0xee, 0xae,
	0x73, 0x77, 0xeb, 0x89, 0xbb, 0xe1, 0xd4, 0x64, 0x7d, 0x16, 0xc2, 0x1c, 0x13, 0xfa, 0x00, 0xcc,
	0xf3, 0xb3, 0x67, 0xe8, 0x6f, 0x83, 0xfb, 0x2b, 0x4a, 0x7f, 0x8c, 0xa6, 0x59, 0x3f, 0xb3, 0xcd,
	0xd4, 0x12, 0xd2, 0xc1, 0xc2, 0xa0, 0x3d, 0xe8, 0xa4, 0x03, 0xba, 0x9f, 0x29, 0x90, 0xcf, 0xac,
	0x59, 0x0f, 0x73, 0x83, 0xf4, 0x1a, 0xba, 0x0f, 0x2e, 0xc7, 0xb4, 0xe7, 0x4e, 0x9a, 0xdd, 0x33,
	0xd6, 0xc4, 0x03, 0xd1, 0x6e, 0x69, 0x92, 0x14, 0x25, 0xad, 0xd2, 0xef, 0x35, 0x80, 0x46, 0xab,
	0x7e, 0x8e, 0xa2, 0xad, 0x82, 0x8b, 0xa3, 0xa4, 0xb8, 0x30, 0x10, 0x74, 0xb8, 0x03, 0xe6, 0xce,
	0xe3, 0xc1, 0xec, 0x20, 0xcd, 0x80, 0x5b, 0x60, 0xb6, 0xdd, 0xa7, 0x32, 0x92, 0xa8, 0x55, 0x9c,
	0x5b, 0x1f, 0xdf, 0x98, 0xe2, 0xb8, 0x99, 0x76, 0xdf, 0x88, 0x97, 0x4b, 0x7f, 0xd4, 0xc0, 0xb2,
	0x17, 0xb1, 0x1f, 0xa9, 0x23, 0xbe, 0x2f, 0xc2, 0xbb, 0x07, 0x16, 0x32, 0x4c, 0xe0, 0xbc, 0x8f,
	0x77, 0x9b, 0x4b, 0xb5, 0x9b, 0xb4, 0xd0, 0x7b, 0xac, 0xd9, 0x29, 0x6c, 0x2f, 0x0a, 0x19, 0x65,
	0xdb, 0x5c, 0x99, 0xe3, 0x77, 0x0a, 0xa9, 0x77, 0x5c, 0x06, 0xf0, 0xdb, 0xc7, 0x91, 0x72, 0xf8,
	0x8d, 0x2b, 0x87, 0x5f, 0xe9, 0x4f, 0x1a, 0x28, 0xe4, 0x11, 0x0e, 0xbd, 0x01, 0x26, 0x78, 0xef,
	0x58, 0x4c, 0x33, 0x0f, 0x97, 0x47, 0xb9, 0x29, 0x3a, 0xc7, 0x41, 0xe8, 0x2d, 0x80, 0xe2, 0x86,
	0xb1, 0x6d, 0x68, 0x2c, 0x0f, 0x71, 0x68, 0x71, 0xcf, 0xd8, 0x96, 0x42, 0xa0, 0x1e, 0x81, 0x42,
	0x3f, 0x12, 0x2f, 0xa4, 0x6e, 0x46, 0xe9, 0x33, 0x05, 0xf5, 0x47, 0x0a, 0x57, 0xfa, 0x14, 0xac,
	0xd8, 0x83, 0xa3, 0xa8, 0xf7, 0xdf, 0x47, 0xfc, 0x9f, 0xed, 0xff, 0x99, 0x06, 0xa0, 0xea, 0x70,
	0x44, 0x1e, 0xaf, 0x80, 0x29, 0x45, 0xa1, 0x92, 0xdf, 0xec, 0x06, 0x93, 0xe1, 0x0d, 0xeb, 0xc7,
	0x54, 0x86, 0x33, 0xac, 0x61, 0xa9, 0xf6, 0x4e, 0x88, 0x86, 0xf5, 0xe2, 0x7e, 0x96, 0x3e, 0xe7,
	0x87, 0xd5, 0x39, 0x23, 0x8d, 0xde, 0xca, 0xd4, 0xe0, 0xea, 0x39, 0x12, 0x90, 0x2e, 0xc4, 0x3b,
	0x60, 0x31, 0x09, 0x47, 0x1e, 0x32, 0xed, 0x93, 0x56, 0x74, 0x96, 0xaa, 0xc4, 0xe5, 0x04, 0xc0,
	0xc5, 0x9c, 0x30, 0x73, 0xc9, 0x00, 0x8b, 0xb9, 0x6e, 0x5f, 0xa5, 0x1c, 0xa5, 0x0e, 0xb8, 0x34,
	0x22, 0x27, 0x68, 0x23, 0x93, 0x43, 0x41, 0x91, 0x9d, 0x74, 0xec, 0xf7, 0x01, 0x54, 0x62, 0xef,
	0xa7, 0x48, 0xb7, 0x90, 0x0d, 0xbb, 0x5f, 0xfa, 0x08, 0xcc, 0x65, 0xbc, 0xfc, 0x8f, 0x3b, 0x57,
	0x3a, 0x06, 0x68, 0x54, 0xdb, 0xd8, 0xd1, 0x75, 0xd0, 0x3d, 0x3e, 0xed, 0x44, 0x2c, 0x48, 0xa1,
	0x8c, 0xc9, 0xa6, 0x30, 0xb1, 0xf0, 0x17, 0x49, 0x8b, 0x5d, 0x15, 0x79, 0xf2, 0x63, 0x3c, 0xf9,
	0x45, 0x55, 0x32, 0x53, 0xd9, 0x97, 0xde, 0x07, 0xf3, 0xd9, 0xf5, 0x57, 0xc9, 0xe7, 0xde, 0x5f,
	0x5e, 0x07, 0xf3, 0xd9, 0x1b, 0x28, 0x5a, 0x01, 0x8b, 0xe4, 0xe4, 0x59, 0xd8, 0x69, 0xb7, 0xb2,
	0x06, 0xf8, 0x1a, 0xba, 0x02, 0x96, 0x7c, 0xdd, 0x7b, 0x42, 0x7d, 0xdd, 0xad, 0x62, 0x9f, 0x96,
	0x75, 0x0f, 0x53, 0x13, 0xef, 0x60, 0x13, 0x6a, 0xaa, 0xad, 0x86, 0x5d, 0x5b, 0xda, 0xc6, 0x54,
	0x9b, 0x8f, 0x8d, 0x9a, 0xb4, 0x8d, 0xa3, 0x35, 0x70, 0x25, 0xe3, 0x33, 0x20, 0x66, 0x85, 0x58,
	0x55, 0x69, 0x9f, 0x40, 0xd7, 0xc1, 0x6a, 0xda, 0xbe, 0x6b, 0xbb, 0x4f, 0xb0, 0x4b, 0x3d, 0x07,
	0xe3, 0x0a, 0x0d, 0x1c, 0xf8, 0x18, 0x5d, 0x03, 0x2b, 0x69, 0x80, 0xa1, 0x3b, 0xbe, 0x4e, 0x2c,
	0x6a, 0xd8, 0x81, 0xe5, 0xc3, 0x49, 0x74, 0x13, 0x5c, 0xcf, 0x33, 0x73, 0xf7, 0x12, 0x74, 0x01,
	0xdd, 0x02, 0x37, 0xf2, 0x40, 0xdb, 0x81, 0x6e, 0x12, 0xbf, 0x21, 0x61, 0x17, 0xd1, 0x0d, 0x70,
	0x2d, 0x0f, 0x86, 0xb7, 0x03, 0xe2, 0xd4, 0xb1, 0xe5, 0xc3, 0xa9, 0xf3, 0x3c, 0xb9, 0x78, 0x8b,
	0x58, 0xb8, 0x42, 0x7d, 0x52, 0xc7, 0x1e, 0x9c, 0x56, 0x61, 0x2e, 0x36, 0xdc, 0x80, 0xf8, 0xd4,
	0xb3, 0xcd, 0x0a, 0xc1, 0xae, 0xdc, 0x70, 0x16, 0x95, 0xc0, 0x5a, 0xb6, 0xa8, 0xba, 0xa9, 0x60,
	0xe6, 0xd4, 0x04, 0xf5, 0x4a, 0x25, 0xd9, 0x55, 0x42, 0xa1, 0xa3, 0x16, 0x29, 0xf6, 0x21, 0x8a,
	0x3c, 0x8f, 0x56, 0xc1, 0x72, 0xa6, 0x41, 0xf6, 0x2e, 0x76, 0xe9, 0x96, 0x69, 0xdb, 0x2e, 0x5c,
	0x40, 0xaf, 0x83, 0xf5, 0x6c, 0xac, 0x9e, 0x1d, 0xb8, 0x06, 0xa6, 0x8e, 0x4d, 0x2c, 0x5f, 0x86,
	0x01, 0xd1, 0x3a, 0xb8, 0x9a, 0x49, 0xdc, 0x36, 0x4d, 0x6c, 0x0c, 0xd1, 0xf0, 0x92, 0xca, 0x82,
	0xc7, 0x36, 0xb1, 0x68, 0x95, 0xb5, 0x1b, 0x22, 0x74, 0x1b, 0x94, 0xd2, 0xb6, 0xc0, 0xa9, 0xba,
	0x7a, 0x05, 0xab, 0x6c, 0xb8, 0xac, 0x16, 0x24, 0xc6, 0xa5, 0x18, 0x55, 0x50, 0x19, 0xa3, 0xd4,
	0x16, 0x2e, 0xaa, 0xa1, 0x3e, 0x26, 0x01, 0xad, 0x06, 0x3a, 0xa3, 0x8c, 0xe5, 0x05, 0xa6, 0x0f,
	0x97, 0xd4, 0x70, 0xd4, 0x64, 0x64, 0x1b, 0x97, 0x47, 0x08, 0x51, 0xd3, 0x4d, 0x13, 0x5b, 0x55,
	0x4c, 0x2b, 0x81, 0x55, 0xc5, 0xb6, 0x05, 0x8b, 0x6a, 0x34, 0x43, 0x08, 0x2f, 0x32, 0x5c, 0x19,
	0xd9, 0x2b, 0x01, 0x78, 0xd8, 0x70, 0xe3, 0x66, 0xc0, 0x2b, 0xea, 0x5e, 0x35, 0x6c, 0x3a, 0x59,
	0xc8, 0xaa, 0x5a, 0x9d, 0xa1, 0xab, 0xb2, 0x4e, 0xe8, 0x7e, 0x4d, 0xb7, 0xe0, 0x55, 0x95, 0x2e,
	0x5b, 0xa4, 0x5a, 0xf3, 0x29, 0xb1, 0xe8, 0x63, 0x56, 0x47, 0x17, 0xeb, 0x66, 0x1d, 0x5e, 0x53,
	0x5b, 0x65, 0xd4, 0x74, 0x5f, 0xe6, 0xbc, 0xc6, 0xf4, 0x21, 0x3b, 0xb0, 0x0d, 0x5a, 0xb5, 0xed,
	0x8a, 0x07, 0xaf, 0xab, 0xb9, 0x26, 0x26, 0x49, 0x92, 0x27, 0x6a, 0x0e, 0xbc, 0xbd, 0x62, 0x7c,
	0x68, 0x45, 0x27, 0x66, 0x03, 0xae, 0xab, 0x54, 0xf4, 0xea, 0xd8, 0xf4, 0x05, 0x04, 0xde, 0x50,
	0xa9, 0x18, 0xf7, 0x65, 0x8f, 0x04, 0xd4, 0x24, 0xba, 0x45, 0xf1, 0x9e, 0x03, 0x6f, 0xa2, 0xab,
	0xa0, 0x98, 0x46, 0x71, 0x8e, 0xd1, 0x8a, 0x6d, 0xe9, 0x3e, 0x86, 0xb7, 0x46, 0xe6, 0xc5, 0xf3,
	0x88, 0x17, 0x83, 0xea, 0xb8, 0x5e, 0xc6, 0x2e, 0xbc, 0xad, 0x46, 0xb1, 0xab, 0xfb, 0x46, 0x8d,
	0xee, 0x90, 0x0a, 0xb6, 0xe1, 0x1d, 0xb4, 0x0c, 0x2e, 0x67, 0x4b, 0xe8, 0xd5, 0x88, 0x55, 0x85,
	0xd5, 0xdc, 0x16, 0x65, 0x1c, 0xd7, 0x46, 0x2a, 0x20, 0x1b, 0x43, 0x1f, 0x07, 0x16, 0xdd, 0x23,
	0xba, 0x05, 0x37, 0x72, 0xc2, 0xa7, 0xfb, 0x81, 0x64, 0xf7, 0xdd, 0x91, 0x1e, 0x27, 0xa3, 0x1e,
	0xc4, 0x72, 0x76, 0x0f, 0xdd, 0x03, 0xb7, 0xcf, 0xc5, 0x64, 0x35, 0xed, 0x0d, 0xb4, 0x01, 0x5e,
	0x3f, 0x17, 0x9b, 0x16, 0xc9, 0x37, 0x55, 0xa5, 0xd6, 0x0d, 0x23, 0xa8, 0x0b, 0xda, 0xd8, 0x2e,
	0x86, 0xf7, 0x55, 0xd2, 0x0c, 0xed, 0x70, 0x53, 0xdd, 0x45, 0xd8, 0x44, 0x69, 0x0c, 0xdb, 0xf2,
	0x5d, 0x52, 0x0e, 0x7c, 0x62, 0x5b, 0xf0, 0x81, 0xca, 0xa1, 0x3d, 0x8a, 0xb7, 0x49, 0xe0, 0xc8,
	0x50, 0x1a, 0xf0, 0x2d, 0x75, 0x5e, 0x62, 0x80, 0x50, 0xd8, 0x04, 0xf7, 0x7f, 0x6a, 0xa5, 0x63,
	0x5c, 0x9c, 0x7f, 0x03, 0x3e, 0x54, 0x6b, 0x99, 0x8e, 0x4a, 0xd2, 0xe5, 0x6d, 0x95, 0x09, 0xc2,
	0x2a, 0x9a, 0xf1, 0x08, 0x2d, 0x82, 0x4b, 0x69, 0x23, 0xde, 0x73, 0xb0, 0x09, 0xff, 0x5f, 0xdd,
	0xba, 0x82, 0xb7, 0xb0, 0xe5, 0x31, 0x45, 0x65, 0xc3, 0xc6, 0xa8, 0xf2, 0x8e, 0xda, 0x64, 0x2f,
	0x05, 0x83, 0x83, 0xfc, 0x72, 0xb9, 0xd8, 0xb0, 0x77, 0xb0, 0x4b, 0x1d, 0xd7, 0xf6, 0x1c, 0xec,
	0x12, 0xbf, 0x01, 0xdf, 0x55, 0x85, 0x5d, 0x20, 0x63, 0x21, 0xfb, 0x06, 0x2a, 0x82, 0x42, 0x46,
	0xea, 0x58, 0xb7, 0x2c, 0xc7, 0x80, 0xef, 0xa9, 0x27, 0x50, 0x4d, 0xf7, 0x72, 0xe4, 0xeb, 0x9b,
	0x23, 0x5c, 0x0f, 0xa8, 0x57, 0xc3, 0x16, 0xfc, 0x96, 0x5a, 0x97, 0xd4, 0x28, 0xc3, 0xf7, 0xd5,
	0xa8, 0x9e, 0x10, 0xd3, 0xa4, 0x35, 0xbb, 0x2e, 0xf6, 0xfe, 0x76, 0x7e, 0xd0, 0xf1, 0x18, 0x7d,
	0x90, 0x4f, 0xb4, 0x44, 0xc2, 0x74, 0xb4, 0x09, 0xee, 0x65, 0x42, 0x27, 0x9e, 0x6f, 0xbb, 0x8d,
	0xf3, 0x94, 0xb3, 0xac, 0x52, 0x4a, 0xfa, 0x4b, 0x74, 0xcb, 0xc8, 0x2f, 0x77, 0x2c, 0x2e, 0xba,
	0xe1, 0x93, 0x1d, 0x4c, 0xcb, 0xf6, 0x1e, 0xac, 0xa8, 0x9d, 0x15, 0xc8, 0xb4, 0x46, 0x61, 0x55,
	0xa3, 0x78, 0xda, 0xf1, 0x49, 0x47, 0x5d, 0x5c, 0x65, 0x34, 0xdf, 0x52, 0xcb, 0xaf, 0xc4, 0x24,
	0x67, 0xce, 0x54, 0x27, 0x99, 0x58, 0x3b, 0xac, 0x83, 0xf5, 0xc0, 0xf4, 0x89, 0xa4, 0x7a, 0xdd,
	0xb6, 0x3c, 0x1f, 0xbb, 0xb0, 0x8e, 0xee, 0x80, 0x9b, 0x19, 0xcd, 0x22, 0x56, 0x2e, 0xd0, 0x56,
	0x81, 0xae, 0x5d, 0xce, 0x05, 0xf6, 0x55, 0xa9, 0xe4, 0xf4, 0x96, 0x27, 0x46, 0x0c, 0xfa, 0x74,
	0xb4, 0x99, 0xbc, 0x5c, 0x15, 0x5c, 0x75, 0x31, 0x86, 0xd6, 0xc8, 0x11, 0x69, 0xd7, 0x1d, 0x13,
	0xfb, 0x98, 0xee, 0xd7, 0xb0, 0x55, 0xa5, 0xbb, 0x01, 0xdc, 0x56, 0x3d, 0xf8, 0x2e, 0xd6, 0xbd,
	0xc0, 0x6d, 0xb0, 0x07, 0x0c, 0x5d, 0x35, 0x0a, 0x56, 0x03, 0x0f, 0x0b, 0x4e, 0xc5, 0x67, 0xba,
	0x77, 0x8e, 0xaa, 0x67, 0x40, 0x7e, 0x3e, 0x11, 0x4c, 0xbb, 0x4a, 0x2c, 0x5a, 0xd1, 0x1b, 0x30,
	0x40, 0x77, 0xc1, 0xad, 0x0c, 0xc0, 0x34, 0xa9, 0xcb, 0xd3, 0xdd, 0x0e, 0xb0, 0xc7, 0x04, 0x8a,
	0xea, 0x75, 0xde, 0x99, 0x1d, 0xb5, 0xcd, 0x92, 0x09, 0xbe, 0xee, 0x0e, 0xc1, 0x70, 0x17, 0xbd,
	0x01, 0xee, 0xe4, 0x14, 0x27, 0x0b, 0x93, 0xcd, 0xde, 0x53, 0xef, 0x25, 0xc2, 0x25, 0x3f, 0x44,
	0x76, 0x75, 0x56, 0xeb, 0xc6, 0x39, 0x4c, 0x66, 0xe5, 0xa8, 0x60, 0xbd, 0x02, 0xf7, 0xf3, 0x01,
	0x75, 0x9b, 0xf1, 0x57, 0xf7, 0x30, 0xfc, 0x4e, 0xbe, 0xe4, 0x55, 0xb0, 0xe7, 0xbb, 0x76, 0x43,
	0x60, 0xbe, 0x9b, 0x3f, 0x0e, 0x31, 0x26, 0xa5, 0x3e, 0x1f, 0xe6, 0x8f, 0x83, 0x6b, 0x97, 0xcb,
	0xec, 0xce, 0xe6, 0x62, 0x0f, 0x7e, 0x34, 0xd2, 0x18, 0x0e, 0x21, 0xd6, 0x0e, 0xcb, 0xbd, 0xaa,
	0xf3, 0x32, 0xd1, 0xfc, 0x1d, 0xcb, 0x18, 0x5b, 0x0a, 0xf2, 0x7b, 0xaa, 0xfa, 0xc7, 0xca, 0xa8,
	0x9b, 0x75, 0xea, 0xec, 0x38, 0xb2, 0xef, 0x30, 0x1c, 0x2d, 0x7c, 0x16, 0xc7, 0x7d, 0x4b, 0x70,
	0x53, 0x15, 0xe3, 0x2d, 0xdd, 0xad, 0xd3, 0x9a, 0xee, 0xb2, 0x9d, 0x61, 0x4b, 0x1d, 0x55, 0x26,
	0x42, 0x8f, 0x89, 0x6e, 0x55, 0x65, 0x1b, 0xc5, 0xbd, 0x28, 0x52, 0x47, 0x75, 0x08, 0x63, 0x77,
	0xcb, 0x6d, 0xa2, 0x27, 0xd4, 0x87, 0xdf, 0x57, 0x27, 0x30, 0x3e, 0x74, 0xed, 0xad, 0x2d, 0x62,
	0x10, 0xdd, 0xa4, 0x81, 0x53, 0x61, 0xa7, 0xcf, 0xe1, 0xc8, 0xbd, 0x9d, 0xef, 0xb8, 0x47, 0x6c,
	0xab, 0x6a, 0x05, 0xf0, 0x28, 0x9f, 0x31, 0x3c, 0x7c, 0xcf, 0xc7, 0xba, 0x09, 0xdb, 0xf9, 0xfd,
	0xd6, 0x03, 0xdf, 0x4e, 0x34, 0xfe, 0x07, 0xf9, 0x35, 0xe5, 0xa4, 0xa4, 0x15, 0x7b, 0xd7, 0xa2,
	0x8e, 0x4b, 0xf6, 0x31, 0xfc, 0xf8, 0xbc, 0x4f, 0x29, 0xbd, 0x4c, 0xf8, 0x89, 0xca, 0x2e, 0x5f,
	0x9d, 0xfc, 0x7e, 0x97, 0x77, 0xf7, 0xcd, 0x61, 0xfe, 0xc7, 0x23, 0x73, 0x16, 0x93, 0x62, 0x64,
	0xb0, 0x4f, 0xf2, 0xa1, 0x79, 0xe3, 0xdd, 0x55, 0x3b, 0x10, 0xf3, 0x96, 0x9f, 0xaa, 0x59, 0xec,
	0x69, 0x7e, 0xce, 0x81, 0x87, 0xa9, 0x1f, 0xd0, 0x2d, 0x4c, 0xe4, 0xd1, 0xf0, 0x89, 0xda, 0xa9,
	0xd4, 0x4c, 0x66, 0x2e, 0x76, 0x3d, 0x95, 0x43, 0x81, 0x65, 0xda, 0xc6, 0x13, 0x5a, 0xd6, 0xed,
	0xdd, 0x00, 0x3e, 0x55, 0x2f, 0xcd, 0x4c, 0x72, 0x85, 0xe9, 0x99, 0xda, 0x62, 0x66, 0xb2, 0x1c,
	0x43, 0x9a, 0x7f, 0xa8, 0x1e, 0x86, 0x7b, 0x81, 0x6e, 0x35, 0xd8, 0xc7, 0x8a, 0x67, 0xb0, 0x5b,
	0xd7, 0x73, 0xd5, 0x1e, 0x37, 0x25, 0x70, 0x18, 0x57, 0xe0, 0x81, 0x4a, 0x00, 0xd7, 0xaa, 0xe0,
	0x1d, 0x6c, 0xb1, 0x03, 0xdf, 0xaa, 0x94, 0x6d, 0xfb, 0x89, 0x07, 0x09, 0x2a, 0x00, 0x98, 0xbd,
	0xb7, 0x96, 0x09, 0x3c, 0x53, 0xef, 0x0e, 0x6c, 0x95, 0x45, 0x07, 0x5f, 0xa0, 0xcb, 0x60, 0x21,
	0x73, 0x27, 0xc2, 0x75, 0xf8, 0x52, 0xcd, 0x23, 0xf9, 0x34, 0x23, 0xbe, 0x89, 0xe1, 0x8f, 0x54,
	0xf3, 0x96, 0x4b, 0xb0, 0x55, 0x89, 0xe5, 0xf4, 0xc7, 0xa3, 0x7f, 0x22, 0xd0, 0xeb, 0xd4, 0xe1,
	0xe7, 0xf7, 0x4f, 0xd0, 0xbd, 0x3c, 0x0a, 0xd4, 0x0d, 0xba, 0xab, 0xbb, 0xd9, 0xb6, 0x7e, 0xa6,
	0xa1, 0x1b, 0x79, 0x13, 0x21, 0xb1, 0xbb, 0xc4, 0x82, 0x3f, 0xd5, 0xd0, 0x26, 0xb8, 0x7b, 0x2e,
	0x24, 0x51, 0x42, 0xf9, 0xe1, 0x09, 0x7f, 0xa6, 0x8d, 0xfe, 0xd5, 0xc3, 0xde, 0x0d, 0xa8, 0x87,
	0x4d, 0x13, 0x96, 0xd0, 0xed, 0xfc, 0xcf, 0x7d, 0xbc, 0xe7, 0xc8, 0x83, 0x3c, 0xf0, 0x30, 0xfc,
	0xb9, 0x86, 0xae, 0x29, 0xd7, 0x3d, 0xdf, 0xd5, 0x7d, 0x5c, 0x6d, 0x70, 0xf3, 0x2f, 0x34, 0x74,
	0x33, 0xdb, 0xa4, 0xb4, 0x00, 0x49, 0x7d, 0xf9, 0x5c, 0x43, 0x57, 0xb3, 0x37, 0x2e, 0x39, 0x2e,
	0x65, 0xdd, 0xde, 0x87, 0xbf, 0xd4, 0xd0, 0x5a, 0xce, 0x95, 0x8b, 0x7d, 0x54, 0xf8, 0x81, 0x6e,
	0xc1, 0x5f, 0x69, 0x68, 0x31, 0xdb, 0xe3, 0xb2, 0x6d, 0x9b, 0xf0, 0xd7, 0x1a, 0x5a, 0xcd, 0x26,
	0x57, 0x37, 0x58, 0x15, 0xd8, 0xa7, 0x39, 0xfc, 0xcd, 0x48, 0xd4, 0xc2, 0x68, 0x1b, 0x46, 0xe0,
	0x34, 0xe0, 0xef, 0xb4, 0xf2, 0xfa, 0x5f, 0xbf, 0x5c, 0xd3, 0xfe, 0xfe, 0xe5, 0x9a, 0xf6, 0x8f,
	0x2f, 0xd7, 0xb4, 0x2f, 0xfe, 0xb9, 0xf6, 0x5a, 0x4d, 0xdb, 0x9f, 0x4d, 0xff, 0xb7, 0x78, 0xf3,
	0x02, 0xff, 0xe7, 0xed, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0x6d, 0xaf, 0x67, 0xc0, 0x87, 0x1f,
	0x00, 0x00,
}
