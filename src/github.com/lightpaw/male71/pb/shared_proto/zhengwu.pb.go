// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/pb/shared_proto/zhengwu.proto
// DO NOT EDIT!

package shared_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ZhengWuDataProto struct {
	Id       int32       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Icon     string      `protobuf:"bytes,3,opt,name=icon,proto3" json:"icon,omitempty"`
	Quality  Quality     `protobuf:"varint,4,opt,name=quality,proto3,enum=proto.Quality" json:"quality,omitempty"`
	Cost     int32       `protobuf:"varint,5,opt,name=cost,proto3" json:"cost,omitempty"`
	Prize    *PrizeProto `protobuf:"bytes,6,opt,name=prize" json:"prize,omitempty"`
	Duration int32       `protobuf:"varint,7,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (m *ZhengWuDataProto) Reset()                    { *m = ZhengWuDataProto{} }
func (m *ZhengWuDataProto) String() string            { return proto.CompactTextString(m) }
func (*ZhengWuDataProto) ProtoMessage()               {}
func (*ZhengWuDataProto) Descriptor() ([]byte, []int) { return fileDescriptorZhengwu, []int{0} }

func (m *ZhengWuDataProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ZhengWuDataProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ZhengWuDataProto) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *ZhengWuDataProto) GetQuality() Quality {
	if m != nil {
		return m.Quality
	}
	return Quality_InvalidQuality
}

func (m *ZhengWuDataProto) GetCost() int32 {
	if m != nil {
		return m.Cost
	}
	return 0
}

func (m *ZhengWuDataProto) GetPrize() *PrizeProto {
	if m != nil {
		return m.Prize
	}
	return nil
}

func (m *ZhengWuDataProto) GetDuration() int32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

// 1、客户端从 HeroZhengWuProto 中取到政务刷新的次数 refreshTimes
// 2、遍历配置中的 ZhengWuRefreshDataProto 列表 list，服务器发送给客户端的政务列表已经根据次数从小到大进行过排序了
//      for(data: list){
//          if data.times >= refreshTimes{
//              return data.cost
//          }
//      }
//      return null
type ZhengWuRefreshDataProto struct {
	Times   int32      `protobuf:"varint,1,opt,name=times,proto3" json:"times,omitempty"`
	Cost    int32      `protobuf:"varint,2,opt,name=cost,proto3" json:"cost,omitempty"`
	NewCost *CostProto `protobuf:"bytes,3,opt,name=new_cost,json=newCost" json:"new_cost,omitempty"`
}

func (m *ZhengWuRefreshDataProto) Reset()                    { *m = ZhengWuRefreshDataProto{} }
func (m *ZhengWuRefreshDataProto) String() string            { return proto.CompactTextString(m) }
func (*ZhengWuRefreshDataProto) ProtoMessage()               {}
func (*ZhengWuRefreshDataProto) Descriptor() ([]byte, []int) { return fileDescriptorZhengwu, []int{1} }

func (m *ZhengWuRefreshDataProto) GetTimes() int32 {
	if m != nil {
		return m.Times
	}
	return 0
}

func (m *ZhengWuRefreshDataProto) GetCost() int32 {
	if m != nil {
		return m.Cost
	}
	return 0
}

func (m *ZhengWuRefreshDataProto) GetNewCost() *CostProto {
	if m != nil {
		return m.NewCost
	}
	return nil
}

type ZhengWuMiscProto struct {
	AutoRefreshDuration []int32 `protobuf:"varint,1,rep,name=auto_refresh_duration,json=autoRefreshDuration" json:"auto_refresh_duration,omitempty"`
}

func (m *ZhengWuMiscProto) Reset()                    { *m = ZhengWuMiscProto{} }
func (m *ZhengWuMiscProto) String() string            { return proto.CompactTextString(m) }
func (*ZhengWuMiscProto) ProtoMessage()               {}
func (*ZhengWuMiscProto) Descriptor() ([]byte, []int) { return fileDescriptorZhengwu, []int{2} }

func (m *ZhengWuMiscProto) GetAutoRefreshDuration() []int32 {
	if m != nil {
		return m.AutoRefreshDuration
	}
	return nil
}

type HeroZhengWuProto struct {
	RefreshTimes    int32               `protobuf:"varint,1,opt,name=refresh_times,json=refreshTimes,proto3" json:"refresh_times,omitempty"`
	NextRefreshTime int32               `protobuf:"varint,2,opt,name=next_refresh_time,json=nextRefreshTime,proto3" json:"next_refresh_time,omitempty"`
	Doing           *ZhengWuProto       `protobuf:"bytes,3,opt,name=doing" json:"doing,omitempty"`
	ToDoList        []*ZhengWuDataProto `protobuf:"bytes,4,rep,name=to_do_list,json=toDoList" json:"to_do_list,omitempty"`
}

func (m *HeroZhengWuProto) Reset()                    { *m = HeroZhengWuProto{} }
func (m *HeroZhengWuProto) String() string            { return proto.CompactTextString(m) }
func (*HeroZhengWuProto) ProtoMessage()               {}
func (*HeroZhengWuProto) Descriptor() ([]byte, []int) { return fileDescriptorZhengwu, []int{3} }

func (m *HeroZhengWuProto) GetRefreshTimes() int32 {
	if m != nil {
		return m.RefreshTimes
	}
	return 0
}

func (m *HeroZhengWuProto) GetNextRefreshTime() int32 {
	if m != nil {
		return m.NextRefreshTime
	}
	return 0
}

func (m *HeroZhengWuProto) GetDoing() *ZhengWuProto {
	if m != nil {
		return m.Doing
	}
	return nil
}

func (m *HeroZhengWuProto) GetToDoList() []*ZhengWuDataProto {
	if m != nil {
		return m.ToDoList
	}
	return nil
}

type ZhengWuProto struct {
	Data    *ZhengWuDataProto `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	EndTime int32             `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (m *ZhengWuProto) Reset()                    { *m = ZhengWuProto{} }
func (m *ZhengWuProto) String() string            { return proto.CompactTextString(m) }
func (*ZhengWuProto) ProtoMessage()               {}
func (*ZhengWuProto) Descriptor() ([]byte, []int) { return fileDescriptorZhengwu, []int{4} }

func (m *ZhengWuProto) GetData() *ZhengWuDataProto {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ZhengWuProto) GetEndTime() int32 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func init() {
	proto.RegisterType((*ZhengWuDataProto)(nil), "proto.ZhengWuDataProto")
	proto.RegisterType((*ZhengWuRefreshDataProto)(nil), "proto.ZhengWuRefreshDataProto")
	proto.RegisterType((*ZhengWuMiscProto)(nil), "proto.ZhengWuMiscProto")
	proto.RegisterType((*HeroZhengWuProto)(nil), "proto.HeroZhengWuProto")
	proto.RegisterType((*ZhengWuProto)(nil), "proto.ZhengWuProto")
}
func (m *ZhengWuDataProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZhengWuDataProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintZhengwu(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintZhengwu(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Icon) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintZhengwu(dAtA, i, uint64(len(m.Icon)))
		i += copy(dAtA[i:], m.Icon)
	}
	if m.Quality != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintZhengwu(dAtA, i, uint64(m.Quality))
	}
	if m.Cost != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintZhengwu(dAtA, i, uint64(m.Cost))
	}
	if m.Prize != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintZhengwu(dAtA, i, uint64(m.Prize.Size()))
		n1, err := m.Prize.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Duration != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintZhengwu(dAtA, i, uint64(m.Duration))
	}
	return i, nil
}

func (m *ZhengWuRefreshDataProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZhengWuRefreshDataProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Times != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintZhengwu(dAtA, i, uint64(m.Times))
	}
	if m.Cost != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintZhengwu(dAtA, i, uint64(m.Cost))
	}
	if m.NewCost != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintZhengwu(dAtA, i, uint64(m.NewCost.Size()))
		n2, err := m.NewCost.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *ZhengWuMiscProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZhengWuMiscProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AutoRefreshDuration) > 0 {
		for _, num := range m.AutoRefreshDuration {
			dAtA[i] = 0x8
			i++
			i = encodeVarintZhengwu(dAtA, i, uint64(num))
		}
	}
	return i, nil
}

func (m *HeroZhengWuProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeroZhengWuProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RefreshTimes != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintZhengwu(dAtA, i, uint64(m.RefreshTimes))
	}
	if m.NextRefreshTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintZhengwu(dAtA, i, uint64(m.NextRefreshTime))
	}
	if m.Doing != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintZhengwu(dAtA, i, uint64(m.Doing.Size()))
		n3, err := m.Doing.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.ToDoList) > 0 {
		for _, msg := range m.ToDoList {
			dAtA[i] = 0x22
			i++
			i = encodeVarintZhengwu(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ZhengWuProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZhengWuProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintZhengwu(dAtA, i, uint64(m.Data.Size()))
		n4, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.EndTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintZhengwu(dAtA, i, uint64(m.EndTime))
	}
	return i, nil
}

func encodeFixed64Zhengwu(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Zhengwu(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintZhengwu(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ZhengWuDataProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovZhengwu(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovZhengwu(uint64(l))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovZhengwu(uint64(l))
	}
	if m.Quality != 0 {
		n += 1 + sovZhengwu(uint64(m.Quality))
	}
	if m.Cost != 0 {
		n += 1 + sovZhengwu(uint64(m.Cost))
	}
	if m.Prize != nil {
		l = m.Prize.Size()
		n += 1 + l + sovZhengwu(uint64(l))
	}
	if m.Duration != 0 {
		n += 1 + sovZhengwu(uint64(m.Duration))
	}
	return n
}

func (m *ZhengWuRefreshDataProto) Size() (n int) {
	var l int
	_ = l
	if m.Times != 0 {
		n += 1 + sovZhengwu(uint64(m.Times))
	}
	if m.Cost != 0 {
		n += 1 + sovZhengwu(uint64(m.Cost))
	}
	if m.NewCost != nil {
		l = m.NewCost.Size()
		n += 1 + l + sovZhengwu(uint64(l))
	}
	return n
}

func (m *ZhengWuMiscProto) Size() (n int) {
	var l int
	_ = l
	if len(m.AutoRefreshDuration) > 0 {
		for _, e := range m.AutoRefreshDuration {
			n += 1 + sovZhengwu(uint64(e))
		}
	}
	return n
}

func (m *HeroZhengWuProto) Size() (n int) {
	var l int
	_ = l
	if m.RefreshTimes != 0 {
		n += 1 + sovZhengwu(uint64(m.RefreshTimes))
	}
	if m.NextRefreshTime != 0 {
		n += 1 + sovZhengwu(uint64(m.NextRefreshTime))
	}
	if m.Doing != nil {
		l = m.Doing.Size()
		n += 1 + l + sovZhengwu(uint64(l))
	}
	if len(m.ToDoList) > 0 {
		for _, e := range m.ToDoList {
			l = e.Size()
			n += 1 + l + sovZhengwu(uint64(l))
		}
	}
	return n
}

func (m *ZhengWuProto) Size() (n int) {
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovZhengwu(uint64(l))
	}
	if m.EndTime != 0 {
		n += 1 + sovZhengwu(uint64(m.EndTime))
	}
	return n
}

func sovZhengwu(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozZhengwu(x uint64) (n int) {
	return sovZhengwu(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ZhengWuDataProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZhengwu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZhengWuDataProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZhengWuDataProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhengwu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhengwu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZhengwu
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhengwu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZhengwu
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quality", wireType)
			}
			m.Quality = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhengwu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quality |= (Quality(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cost", wireType)
			}
			m.Cost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhengwu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cost |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhengwu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZhengwu
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Prize == nil {
				m.Prize = &PrizeProto{}
			}
			if err := m.Prize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhengwu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZhengwu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZhengwu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZhengWuRefreshDataProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZhengwu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZhengWuRefreshDataProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZhengWuRefreshDataProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Times", wireType)
			}
			m.Times = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhengwu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Times |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cost", wireType)
			}
			m.Cost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhengwu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cost |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewCost", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhengwu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZhengwu
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewCost == nil {
				m.NewCost = &CostProto{}
			}
			if err := m.NewCost.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZhengwu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZhengwu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZhengWuMiscProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZhengwu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZhengWuMiscProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZhengWuMiscProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowZhengwu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AutoRefreshDuration = append(m.AutoRefreshDuration, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowZhengwu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthZhengwu
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowZhengwu
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AutoRefreshDuration = append(m.AutoRefreshDuration, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoRefreshDuration", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZhengwu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZhengwu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeroZhengWuProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZhengwu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroZhengWuProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroZhengWuProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshTimes", wireType)
			}
			m.RefreshTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhengwu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefreshTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextRefreshTime", wireType)
			}
			m.NextRefreshTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhengwu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextRefreshTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Doing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhengwu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZhengwu
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Doing == nil {
				m.Doing = &ZhengWuProto{}
			}
			if err := m.Doing.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToDoList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhengwu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZhengwu
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToDoList = append(m.ToDoList, &ZhengWuDataProto{})
			if err := m.ToDoList[len(m.ToDoList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZhengwu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZhengwu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZhengWuProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZhengwu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZhengWuProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZhengWuProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhengwu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZhengwu
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &ZhengWuDataProto{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhengwu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZhengwu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZhengwu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipZhengwu(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowZhengwu
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZhengwu
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZhengwu
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthZhengwu
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowZhengwu
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipZhengwu(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthZhengwu = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowZhengwu   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/pb/shared_proto/zhengwu.proto", fileDescriptorZhengwu)
}

var fileDescriptorZhengwu = []byte{
	// 481 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x4d, 0x6b, 0x13, 0x41,
	0x18, 0xc7, 0x3b, 0x49, 0xb6, 0x89, 0x4f, 0x63, 0x4c, 0xa7, 0x6a, 0xd7, 0x1e, 0xc2, 0x12, 0x0f,
	0xae, 0x16, 0xb2, 0x10, 0x5f, 0x7a, 0xaf, 0x3d, 0x14, 0x51, 0xa8, 0x83, 0x28, 0xf4, 0xb2, 0x4c,
	0x32, 0x63, 0x76, 0x20, 0x99, 0x89, 0x3b, 0xb3, 0x44, 0xfb, 0x49, 0xfc, 0x42, 0x82, 0x17, 0xc1,
	0x8f, 0x20, 0xf1, 0x8b, 0xc8, 0xbc, 0x24, 0xdd, 0x5e, 0xa4, 0xa7, 0x7d, 0x5e, 0xff, 0xcf, 0xff,
	0x37, 0x2c, 0x9c, 0xcc, 0x84, 0x29, 0xaa, 0xc9, 0x68, 0xaa, 0x16, 0xd9, 0x5c, 0xcc, 0x0a, 0xb3,
	0xa4, 0xab, 0x6c, 0x41, 0xe7, 0xfc, 0x24, 0x5b, 0x4e, 0x32, 0x5d, 0xd0, 0x92, 0xb3, 0x7c, 0x59,
	0x2a, 0xa3, 0xb2, 0xab, 0x82, 0xcb, 0xd9, 0xaa, 0x1a, 0xb9, 0x0c, 0x47, 0xee, 0x73, 0xf4, 0xe2,
	0xf6, 0xfb, 0x13, 0xaa, 0xb9, 0x5f, 0x1e, 0xfe, 0x42, 0xd0, 0xbf, 0xb4, 0x72, 0x9f, 0xaa, 0x33,
	0x6a, 0xe8, 0x85, 0x53, 0xec, 0x41, 0x43, 0xb0, 0x18, 0x25, 0x28, 0x8d, 0x48, 0x43, 0x30, 0x8c,
	0xa1, 0x25, 0xe9, 0x82, 0xc7, 0x8d, 0x04, 0xa5, 0x77, 0x88, 0x8b, 0x6d, 0x4d, 0x4c, 0x95, 0x8c,
	0x9b, 0xbe, 0x66, 0x63, 0x9c, 0x42, 0xfb, 0x4b, 0x45, 0xe7, 0xc2, 0x7c, 0x8b, 0x5b, 0x09, 0x4a,
	0x7b, 0xe3, 0x9e, 0xbf, 0x32, 0x7a, 0xef, 0xab, 0x64, 0xd3, 0xb6, 0xdb, 0x53, 0xa5, 0x4d, 0x1c,
	0xb9, 0x1b, 0x2e, 0xc6, 0x4f, 0x20, 0x5a, 0x96, 0xe2, 0x8a, 0xc7, 0xbb, 0x09, 0x4a, 0xf7, 0xc6,
	0xfb, 0x61, 0xf7, 0xc2, 0xd6, 0x9c, 0x2f, 0xe2, 0xfb, 0xf8, 0x08, 0x3a, 0xac, 0x2a, 0xa9, 0x11,
	0x4a, 0xc6, 0x6d, 0x27, 0xb0, 0xcd, 0x87, 0x06, 0x0e, 0x03, 0x0e, 0xe1, 0x9f, 0x4b, 0xae, 0x8b,
	0x6b, 0xaa, 0xfb, 0x10, 0x19, 0xb1, 0xe0, 0x3a, 0x80, 0xf9, 0x04, 0x3f, 0x0c, 0x4e, 0x2c, 0x5b,
	0x74, 0xda, 0x88, 0x51, 0x70, 0x73, 0x0c, 0x1d, 0xc9, 0x57, 0xb9, 0xeb, 0x35, 0x9d, 0xa1, 0x7e,
	0x30, 0xf4, 0x5a, 0x69, 0xe3, 0xfd, 0xb4, 0x25, 0x5f, 0xd9, 0x6c, 0xf8, 0x66, 0xfb, 0x88, 0xef,
	0x84, 0x9e, 0xfa, 0x73, 0xaf, 0xe0, 0x01, 0xad, 0x8c, 0xca, 0x4b, 0xef, 0x23, 0xdf, 0x5a, 0x46,
	0x49, 0xd3, 0x5e, 0xea, 0xef, 0x90, 0x03, 0x3b, 0xb0, 0xf1, 0xb9, 0x21, 0xf8, 0x81, 0xa0, 0x7f,
	0xce, 0x4b, 0x15, 0x04, 0xbd, 0xd8, 0x63, 0xb8, 0xbb, 0xd1, 0xa9, 0x33, 0x74, 0x43, 0xf1, 0x83,
	0x43, 0x79, 0x06, 0xfb, 0x92, 0x7f, 0x35, 0x79, 0x7d, 0xd2, 0x73, 0x91, 0x7b, 0xb6, 0x41, 0xae,
	0x87, 0xf1, 0x53, 0x88, 0x98, 0x12, 0x72, 0x16, 0xd8, 0x0e, 0x02, 0x5b, 0xfd, 0x28, 0xf1, 0x13,
	0xf8, 0x25, 0x80, 0x51, 0x39, 0x53, 0xf9, 0x5c, 0x68, 0x13, 0xb7, 0x92, 0x66, 0xba, 0x37, 0x3e,
	0xbc, 0x39, 0xbf, 0x7d, 0x64, 0xd2, 0x31, 0xea, 0x4c, 0xbd, 0x15, 0xda, 0x0c, 0x3f, 0x42, 0xf7,
	0x06, 0xc2, 0x31, 0xb4, 0x18, 0x35, 0xd4, 0x39, 0xff, 0x8f, 0x80, 0x1b, 0xc2, 0x8f, 0xa0, 0xc3,
	0x25, 0xab, 0x13, 0xb4, 0xb9, 0x64, 0xd6, 0xf9, 0x69, 0xf2, 0x73, 0x3d, 0x40, 0xbf, 0xd7, 0x03,
	0xf4, 0x67, 0x3d, 0x40, 0xdf, 0xff, 0x0e, 0x76, 0xce, 0xd1, 0x65, 0xb7, 0xfe, 0x7b, 0x4f, 0x76,
	0xdd, 0xe7, 0xf9, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8e, 0x80, 0x0e, 0x50, 0x52, 0x03, 0x00,
	0x00,
}
