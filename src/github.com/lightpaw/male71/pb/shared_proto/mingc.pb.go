// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/pb/shared_proto/mingc.proto
// DO NOT EDIT!

package shared_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MincType int32

const (
	MincType_MC_INVALID_MINC MincType = 0
	MincType_MC_XIAN         MincType = 1
	MincType_MC_JUN          MincType = 2
	MincType_MC_DU           MincType = 3
)

var MincType_name = map[int32]string{
	0: "MC_INVALID_MINC",
	1: "MC_XIAN",
	2: "MC_JUN",
	3: "MC_DU",
}
var MincType_value = map[string]int32{
	"MC_INVALID_MINC": 0,
	"MC_XIAN":         1,
	"MC_JUN":          2,
	"MC_DU":           3,
}

func (x MincType) String() string {
	return proto.EnumName(MincType_name, int32(x))
}
func (MincType) EnumDescriptor() ([]byte, []int) { return fileDescriptorMingc, []int{0} }

// 所有名城
type MingcsProto struct {
	Mingcs []*MingcProto `protobuf:"bytes,1,rep,name=mingcs" json:"mingcs,omitempty"`
}

func (m *MingcsProto) Reset()                    { *m = MingcsProto{} }
func (m *MingcsProto) String() string            { return proto.CompactTextString(m) }
func (*MingcsProto) ProtoMessage()               {}
func (*MingcsProto) Descriptor() ([]byte, []int) { return fileDescriptorMingc, []int{0} }

func (m *MingcsProto) GetMingcs() []*MingcProto {
	if m != nil {
		return m.Mingcs
	}
	return nil
}

// 名城
type MingcProto struct {
	Id                int32            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Yinliang          int32            `protobuf:"varint,2,opt,name=yinliang,proto3" json:"yinliang,omitempty"`
	ExtraYinliang     int32            `protobuf:"varint,4,opt,name=extra_yinliang,json=extraYinliang,proto3" json:"extra_yinliang,omitempty"`
	HostGuild         *GuildBasicProto `protobuf:"bytes,3,opt,name=host_guild,json=hostGuild" json:"host_guild,omitempty"`
	HostExtraYinliang int32            `protobuf:"varint,5,opt,name=host_extra_yinliang,json=hostExtraYinliang,proto3" json:"host_extra_yinliang,omitempty"`
	Level             int32            `protobuf:"varint,6,opt,name=level,proto3" json:"level,omitempty"`
	Support           int32            `protobuf:"varint,7,opt,name=support,proto3" json:"support,omitempty"`
	DailyAddedSupport int32            `protobuf:"varint,8,opt,name=daily_added_support,json=dailyAddedSupport,proto3" json:"daily_added_support,omitempty"`
}

func (m *MingcProto) Reset()                    { *m = MingcProto{} }
func (m *MingcProto) String() string            { return proto.CompactTextString(m) }
func (*MingcProto) ProtoMessage()               {}
func (*MingcProto) Descriptor() ([]byte, []int) { return fileDescriptorMingc, []int{1} }

func (m *MingcProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MingcProto) GetYinliang() int32 {
	if m != nil {
		return m.Yinliang
	}
	return 0
}

func (m *MingcProto) GetExtraYinliang() int32 {
	if m != nil {
		return m.ExtraYinliang
	}
	return 0
}

func (m *MingcProto) GetHostGuild() *GuildBasicProto {
	if m != nil {
		return m.HostGuild
	}
	return nil
}

func (m *MingcProto) GetHostExtraYinliang() int32 {
	if m != nil {
		return m.HostExtraYinliang
	}
	return 0
}

func (m *MingcProto) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *MingcProto) GetSupport() int32 {
	if m != nil {
		return m.Support
	}
	return 0
}

func (m *MingcProto) GetDailyAddedSupport() int32 {
	if m != nil {
		return m.DailyAddedSupport
	}
	return 0
}

// 玩家名城营建
type HeroMcBuildProto struct {
	McBuildCount    int32 `protobuf:"varint,1,opt,name=mc_build_count,json=mcBuildCount,proto3" json:"mc_build_count,omitempty"`
	McBuildNextTime int32 `protobuf:"varint,2,opt,name=mc_build_next_time,json=mcBuildNextTime,proto3" json:"mc_build_next_time,omitempty"`
}

func (m *HeroMcBuildProto) Reset()                    { *m = HeroMcBuildProto{} }
func (m *HeroMcBuildProto) String() string            { return proto.CompactTextString(m) }
func (*HeroMcBuildProto) ProtoMessage()               {}
func (*HeroMcBuildProto) Descriptor() ([]byte, []int) { return fileDescriptorMingc, []int{2} }

func (m *HeroMcBuildProto) GetMcBuildCount() int32 {
	if m != nil {
		return m.McBuildCount
	}
	return 0
}

func (m *HeroMcBuildProto) GetMcBuildNextTime() int32 {
	if m != nil {
		return m.McBuildNextTime
	}
	return 0
}

// 名城营建记录
type GuildMcBuildProto struct {
	Log []*SingleGuildMcBuildProto `protobuf:"bytes,1,rep,name=log" json:"log,omitempty"`
}

func (m *GuildMcBuildProto) Reset()                    { *m = GuildMcBuildProto{} }
func (m *GuildMcBuildProto) String() string            { return proto.CompactTextString(m) }
func (*GuildMcBuildProto) ProtoMessage()               {}
func (*GuildMcBuildProto) Descriptor() ([]byte, []int) { return fileDescriptorMingc, []int{3} }

func (m *GuildMcBuildProto) GetLog() []*SingleGuildMcBuildProto {
	if m != nil {
		return m.Log
	}
	return nil
}

type SingleGuildMcBuildProto struct {
	Guild      *GuildBasicProto `protobuf:"bytes,1,opt,name=guild" json:"guild,omitempty"`
	Support    int32            `protobuf:"varint,2,opt,name=support,proto3" json:"support,omitempty"`
	BuildCount int32            `protobuf:"varint,3,opt,name=build_count,json=buildCount,proto3" json:"build_count,omitempty"`
}

func (m *SingleGuildMcBuildProto) Reset()                    { *m = SingleGuildMcBuildProto{} }
func (m *SingleGuildMcBuildProto) String() string            { return proto.CompactTextString(m) }
func (*SingleGuildMcBuildProto) ProtoMessage()               {}
func (*SingleGuildMcBuildProto) Descriptor() ([]byte, []int) { return fileDescriptorMingc, []int{4} }

func (m *SingleGuildMcBuildProto) GetGuild() *GuildBasicProto {
	if m != nil {
		return m.Guild
	}
	return nil
}

func (m *SingleGuildMcBuildProto) GetSupport() int32 {
	if m != nil {
		return m.Support
	}
	return 0
}

func (m *SingleGuildMcBuildProto) GetBuildCount() int32 {
	if m != nil {
		return m.BuildCount
	}
	return 0
}

func init() {
	proto.RegisterType((*MingcsProto)(nil), "proto.MingcsProto")
	proto.RegisterType((*MingcProto)(nil), "proto.MingcProto")
	proto.RegisterType((*HeroMcBuildProto)(nil), "proto.HeroMcBuildProto")
	proto.RegisterType((*GuildMcBuildProto)(nil), "proto.GuildMcBuildProto")
	proto.RegisterType((*SingleGuildMcBuildProto)(nil), "proto.SingleGuildMcBuildProto")
	proto.RegisterEnum("proto.MincType", MincType_name, MincType_value)
}
func (m *MingcsProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MingcsProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Mingcs) > 0 {
		for _, msg := range m.Mingcs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMingc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MingcProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MingcProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMingc(dAtA, i, uint64(m.Id))
	}
	if m.Yinliang != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMingc(dAtA, i, uint64(m.Yinliang))
	}
	if m.HostGuild != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMingc(dAtA, i, uint64(m.HostGuild.Size()))
		n1, err := m.HostGuild.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.ExtraYinliang != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMingc(dAtA, i, uint64(m.ExtraYinliang))
	}
	if m.HostExtraYinliang != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMingc(dAtA, i, uint64(m.HostExtraYinliang))
	}
	if m.Level != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintMingc(dAtA, i, uint64(m.Level))
	}
	if m.Support != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintMingc(dAtA, i, uint64(m.Support))
	}
	if m.DailyAddedSupport != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintMingc(dAtA, i, uint64(m.DailyAddedSupport))
	}
	return i, nil
}

func (m *HeroMcBuildProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeroMcBuildProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.McBuildCount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMingc(dAtA, i, uint64(m.McBuildCount))
	}
	if m.McBuildNextTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMingc(dAtA, i, uint64(m.McBuildNextTime))
	}
	return i, nil
}

func (m *GuildMcBuildProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildMcBuildProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Log) > 0 {
		for _, msg := range m.Log {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMingc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SingleGuildMcBuildProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SingleGuildMcBuildProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Guild != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMingc(dAtA, i, uint64(m.Guild.Size()))
		n2, err := m.Guild.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Support != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMingc(dAtA, i, uint64(m.Support))
	}
	if m.BuildCount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMingc(dAtA, i, uint64(m.BuildCount))
	}
	return i, nil
}

func encodeFixed64Mingc(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Mingc(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintMingc(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *MingcsProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Mingcs) > 0 {
		for _, e := range m.Mingcs {
			l = e.Size()
			n += 1 + l + sovMingc(uint64(l))
		}
	}
	return n
}

func (m *MingcProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMingc(uint64(m.Id))
	}
	if m.Yinliang != 0 {
		n += 1 + sovMingc(uint64(m.Yinliang))
	}
	if m.HostGuild != nil {
		l = m.HostGuild.Size()
		n += 1 + l + sovMingc(uint64(l))
	}
	if m.ExtraYinliang != 0 {
		n += 1 + sovMingc(uint64(m.ExtraYinliang))
	}
	if m.HostExtraYinliang != 0 {
		n += 1 + sovMingc(uint64(m.HostExtraYinliang))
	}
	if m.Level != 0 {
		n += 1 + sovMingc(uint64(m.Level))
	}
	if m.Support != 0 {
		n += 1 + sovMingc(uint64(m.Support))
	}
	if m.DailyAddedSupport != 0 {
		n += 1 + sovMingc(uint64(m.DailyAddedSupport))
	}
	return n
}

func (m *HeroMcBuildProto) Size() (n int) {
	var l int
	_ = l
	if m.McBuildCount != 0 {
		n += 1 + sovMingc(uint64(m.McBuildCount))
	}
	if m.McBuildNextTime != 0 {
		n += 1 + sovMingc(uint64(m.McBuildNextTime))
	}
	return n
}

func (m *GuildMcBuildProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Log) > 0 {
		for _, e := range m.Log {
			l = e.Size()
			n += 1 + l + sovMingc(uint64(l))
		}
	}
	return n
}

func (m *SingleGuildMcBuildProto) Size() (n int) {
	var l int
	_ = l
	if m.Guild != nil {
		l = m.Guild.Size()
		n += 1 + l + sovMingc(uint64(l))
	}
	if m.Support != 0 {
		n += 1 + sovMingc(uint64(m.Support))
	}
	if m.BuildCount != 0 {
		n += 1 + sovMingc(uint64(m.BuildCount))
	}
	return n
}

func sovMingc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMingc(x uint64) (n int) {
	return sovMingc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MingcsProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MingcsProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MingcsProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mingcs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMingc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mingcs = append(m.Mingcs, &MingcProto{})
			if err := m.Mingcs[len(m.Mingcs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMingc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MingcProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MingcProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MingcProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Yinliang", wireType)
			}
			m.Yinliang = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Yinliang |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostGuild", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMingc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HostGuild == nil {
				m.HostGuild = &GuildBasicProto{}
			}
			if err := m.HostGuild.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraYinliang", wireType)
			}
			m.ExtraYinliang = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExtraYinliang |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostExtraYinliang", wireType)
			}
			m.HostExtraYinliang = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HostExtraYinliang |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Support", wireType)
			}
			m.Support = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Support |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DailyAddedSupport", wireType)
			}
			m.DailyAddedSupport = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DailyAddedSupport |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMingc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeroMcBuildProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroMcBuildProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroMcBuildProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field McBuildCount", wireType)
			}
			m.McBuildCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.McBuildCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field McBuildNextTime", wireType)
			}
			m.McBuildNextTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.McBuildNextTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMingc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildMcBuildProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildMcBuildProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildMcBuildProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Log", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMingc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Log = append(m.Log, &SingleGuildMcBuildProto{})
			if err := m.Log[len(m.Log)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMingc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SingleGuildMcBuildProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SingleGuildMcBuildProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SingleGuildMcBuildProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Guild", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMingc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Guild == nil {
				m.Guild = &GuildBasicProto{}
			}
			if err := m.Guild.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Support", wireType)
			}
			m.Support = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Support |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildCount", wireType)
			}
			m.BuildCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuildCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMingc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMingc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMingc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMingc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMingc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMingc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMingc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMingc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMingc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMingc   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/pb/shared_proto/mingc.proto", fileDescriptorMingc)
}

var fileDescriptorMingc = []byte{
	// 504 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xcb, 0x6e, 0xd3, 0x40,
	0x14, 0x86, 0x3b, 0x0e, 0x4e, 0xd2, 0x93, 0x92, 0x3a, 0x53, 0x04, 0x56, 0x17, 0x26, 0xb2, 0x40,
	0x0a, 0x17, 0xc5, 0xa8, 0xa8, 0x82, 0x6d, 0xe2, 0x56, 0x34, 0x08, 0x5b, 0x28, 0x6d, 0x11, 0xb0,
	0x19, 0xf9, 0x32, 0x72, 0x46, 0xf2, 0x4d, 0xf6, 0x04, 0x92, 0x2d, 0x4f, 0xc1, 0x13, 0xf0, 0x2c,
	0x2c, 0x79, 0x04, 0x14, 0x5e, 0x04, 0xcd, 0xd8, 0x09, 0x09, 0x08, 0x24, 0x56, 0x93, 0xf9, 0xcf,
	0x37, 0xff, 0xc9, 0xf9, 0x8f, 0x0c, 0xa7, 0x11, 0xe3, 0xb3, 0xb9, 0x3f, 0x0c, 0xb2, 0xc4, 0x8a,
	0x59, 0x34, 0xe3, 0xb9, 0xf7, 0xd1, 0x4a, 0xbc, 0x98, 0x3e, 0xb3, 0x72, 0xdf, 0x2a, 0x67, 0x5e,
	0x41, 0x43, 0x92, 0x17, 0x19, 0xcf, 0xac, 0x84, 0xa5, 0x51, 0x30, 0x94, 0xbf, 0xb1, 0x2a, 0x8f,
	0xe3, 0xff, 0x78, 0x1d, 0xcd, 0x59, 0x1c, 0x56, 0xaf, 0xcd, 0xe7, 0xd0, 0x71, 0x84, 0x59, 0xf9,
	0x5a, 0x9a, 0x3d, 0x80, 0xa6, 0xf4, 0x2e, 0x75, 0xd4, 0x6f, 0x0c, 0x3a, 0x27, 0xbd, 0x0a, 0x1b,
	0x4a, 0x46, 0x22, 0xd3, 0x1a, 0x30, 0xbf, 0x28, 0x00, 0xbf, 0x64, 0xdc, 0x05, 0x85, 0x85, 0x3a,
	0xea, 0xa3, 0x81, 0x3a, 0x55, 0x58, 0x88, 0x8f, 0xa1, 0xbd, 0x64, 0x69, 0xcc, 0xbc, 0x34, 0xd2,
	0x15, 0xa9, 0x6e, 0xee, 0xf8, 0x14, 0x60, 0x96, 0x95, 0x9c, 0xc8, 0x3f, 0xa2, 0x37, 0xfa, 0x68,
	0xd0, 0x39, 0xb9, 0x5d, 0x77, 0x7a, 0x21, 0xb4, 0xb1, 0x57, 0xb2, 0xba, 0xdd, 0xbe, 0x20, 0xa5,
	0x88, 0xef, 0x43, 0x97, 0x2e, 0x78, 0xe1, 0x91, 0x8d, 0xf1, 0x0d, 0x69, 0x7c, 0x53, 0xaa, 0xef,
	0xd6, 0xee, 0x43, 0x38, 0x92, 0xee, 0xbf, 0xb1, 0xaa, 0x64, 0x7b, 0xa2, 0x74, 0xbe, 0xc3, 0xdf,
	0x02, 0x35, 0xa6, 0x1f, 0x68, 0xac, 0x37, 0x25, 0x51, 0x5d, 0xb0, 0x0e, 0xad, 0x72, 0x9e, 0xe7,
	0x59, 0xc1, 0xf5, 0x96, 0xd4, 0xd7, 0x57, 0xe1, 0x1f, 0x7a, 0x2c, 0x5e, 0x12, 0x2f, 0x0c, 0x69,
	0x48, 0xd6, 0x54, 0xbb, 0xf2, 0x97, 0xa5, 0x91, 0xa8, 0x5c, 0x56, 0x05, 0x93, 0x82, 0x76, 0x41,
	0x8b, 0xcc, 0x09, 0xc6, 0x62, 0x8a, 0x2a, 0xad, 0x7b, 0xd0, 0x4d, 0x02, 0xe2, 0x0b, 0x81, 0x04,
	0xd9, 0x3c, 0xe5, 0x75, 0x72, 0x07, 0x49, 0x45, 0xd9, 0x42, 0xc3, 0x8f, 0x00, 0x6f, 0xa8, 0x94,
	0x2e, 0x38, 0xe1, 0x2c, 0xa1, 0x75, 0x9a, 0x87, 0x35, 0xe9, 0xd2, 0x05, 0xbf, 0x62, 0x09, 0x35,
	0xcf, 0xa1, 0x27, 0x63, 0xda, 0xe9, 0xf3, 0x04, 0x1a, 0x71, 0x16, 0xd5, 0xcb, 0x34, 0xea, 0x88,
	0x2f, 0x59, 0x1a, 0xc5, 0xf4, 0x0f, 0x78, 0x2a, 0x50, 0xf3, 0x13, 0x82, 0x3b, 0x7f, 0x01, 0xf0,
	0x63, 0x50, 0xab, 0x95, 0xa1, 0x7f, 0xae, 0xac, 0x82, 0xb6, 0x13, 0x54, 0x76, 0x13, 0xbc, 0x0b,
	0x9d, 0xed, 0xd1, 0x1b, 0xb2, 0x0a, 0xfe, 0x66, 0xf0, 0x87, 0x36, 0xb4, 0x1d, 0x96, 0x06, 0x57,
	0xcb, 0x9c, 0xe2, 0x23, 0x38, 0x74, 0x6c, 0x32, 0x71, 0xdf, 0x8c, 0x5e, 0x4d, 0xce, 0x88, 0x33,
	0x71, 0x6d, 0x6d, 0x0f, 0x77, 0xa0, 0xe5, 0xd8, 0xe4, 0xed, 0x64, 0xe4, 0x6a, 0x08, 0x03, 0x34,
	0x1d, 0x9b, 0xbc, 0xbc, 0x76, 0x35, 0x05, 0xef, 0x83, 0xea, 0xd8, 0xe4, 0xec, 0x5a, 0x6b, 0x8c,
	0xfb, 0x5f, 0x57, 0x06, 0xfa, 0xb6, 0x32, 0xd0, 0xf7, 0x95, 0x81, 0x3e, 0xff, 0x30, 0xf6, 0x2e,
	0xd0, 0xfb, 0x83, 0xed, 0x0f, 0xc1, 0x6f, 0xca, 0xe3, 0xe9, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xa2, 0x2b, 0x82, 0xe8, 0x7a, 0x03, 0x00, 0x00,
}
