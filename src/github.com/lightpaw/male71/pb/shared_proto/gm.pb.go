// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/pb/shared_proto/gm.proto
// DO NOT EDIT!

package shared_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type GmCmdListProto struct {
	Tab string        `protobuf:"bytes,1,opt,name=tab,proto3" json:"tab,omitempty"`
	Cmd []*GmCmdProto `protobuf:"bytes,2,rep,name=cmd" json:"cmd,omitempty"`
}

func (m *GmCmdListProto) Reset()                    { *m = GmCmdListProto{} }
func (m *GmCmdListProto) String() string            { return proto.CompactTextString(m) }
func (*GmCmdListProto) ProtoMessage()               {}
func (*GmCmdListProto) Descriptor() ([]byte, []int) { return fileDescriptorGm, []int{0} }

func (m *GmCmdListProto) GetTab() string {
	if m != nil {
		return m.Tab
	}
	return ""
}

func (m *GmCmdListProto) GetCmd() []*GmCmdProto {
	if m != nil {
		return m.Cmd
	}
	return nil
}

type GmCmdProto struct {
	Cmd          string `protobuf:"bytes,1,opt,name=cmd,proto3" json:"cmd,omitempty"`
	Desc         string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	HasInput     bool   `protobuf:"varint,11,opt,name=has_input,json=hasInput,proto3" json:"has_input,omitempty"`
	DefaultInput string `protobuf:"bytes,12,opt,name=default_input,json=defaultInput,proto3" json:"default_input,omitempty"`
}

func (m *GmCmdProto) Reset()                    { *m = GmCmdProto{} }
func (m *GmCmdProto) String() string            { return proto.CompactTextString(m) }
func (*GmCmdProto) ProtoMessage()               {}
func (*GmCmdProto) Descriptor() ([]byte, []int) { return fileDescriptorGm, []int{1} }

func (m *GmCmdProto) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

func (m *GmCmdProto) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *GmCmdProto) GetHasInput() bool {
	if m != nil {
		return m.HasInput
	}
	return false
}

func (m *GmCmdProto) GetDefaultInput() string {
	if m != nil {
		return m.DefaultInput
	}
	return ""
}

func init() {
	proto.RegisterType((*GmCmdListProto)(nil), "proto.GmCmdListProto")
	proto.RegisterType((*GmCmdProto)(nil), "proto.GmCmdProto")
}
func (m *GmCmdListProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GmCmdListProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tab) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGm(dAtA, i, uint64(len(m.Tab)))
		i += copy(dAtA[i:], m.Tab)
	}
	if len(m.Cmd) > 0 {
		for _, msg := range m.Cmd {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGm(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GmCmdProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GmCmdProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Cmd) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGm(dAtA, i, uint64(len(m.Cmd)))
		i += copy(dAtA[i:], m.Cmd)
	}
	if len(m.Desc) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGm(dAtA, i, uint64(len(m.Desc)))
		i += copy(dAtA[i:], m.Desc)
	}
	if m.HasInput {
		dAtA[i] = 0x58
		i++
		if m.HasInput {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.DefaultInput) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintGm(dAtA, i, uint64(len(m.DefaultInput)))
		i += copy(dAtA[i:], m.DefaultInput)
	}
	return i, nil
}

func encodeFixed64Gm(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Gm(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintGm(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GmCmdListProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Tab)
	if l > 0 {
		n += 1 + l + sovGm(uint64(l))
	}
	if len(m.Cmd) > 0 {
		for _, e := range m.Cmd {
			l = e.Size()
			n += 1 + l + sovGm(uint64(l))
		}
	}
	return n
}

func (m *GmCmdProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Cmd)
	if l > 0 {
		n += 1 + l + sovGm(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovGm(uint64(l))
	}
	if m.HasInput {
		n += 2
	}
	l = len(m.DefaultInput)
	if l > 0 {
		n += 1 + l + sovGm(uint64(l))
	}
	return n
}

func sovGm(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGm(x uint64) (n int) {
	return sovGm(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GmCmdListProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GmCmdListProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GmCmdListProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tab", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tab = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cmd = append(m.Cmd, &GmCmdProto{})
			if err := m.Cmd[len(m.Cmd)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GmCmdProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GmCmdProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GmCmdProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cmd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasInput", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasInput = bool(v != 0)
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultInput", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultInput = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGm(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGm
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGm
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGm
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGm(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGm = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGm   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/pb/shared_proto/gm.proto", fileDescriptorGm)
}

var fileDescriptorGm = []byte{
	// 238 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x4a, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0xcf, 0xc9, 0x4c, 0xcf, 0x28, 0x29, 0x48, 0x2c, 0xd7,
	0xcf, 0x4d, 0xcc, 0x49, 0x35, 0xd7, 0x2f, 0x48, 0xd2, 0x2f, 0xce, 0x48, 0x2c, 0x4a, 0x4d, 0x89,
	0x2f, 0x28, 0xca, 0x2f, 0xc9, 0xd7, 0x4f, 0xcf, 0xd5, 0x03, 0x33, 0x84, 0x58, 0xc1, 0x94, 0x92,
	0x3b, 0x17, 0x9f, 0x7b, 0xae, 0x73, 0x6e, 0x8a, 0x4f, 0x66, 0x71, 0x49, 0x00, 0x58, 0x42, 0x80,
	0x8b, 0xb9, 0x24, 0x31, 0x49, 0x82, 0x51, 0x81, 0x51, 0x83, 0x33, 0x08, 0xc4, 0x14, 0x52, 0xe6,
	0x62, 0x4e, 0xce, 0x4d, 0x91, 0x60, 0x52, 0x60, 0xd6, 0xe0, 0x36, 0x12, 0x84, 0xe8, 0xd7, 0x03,
	0xeb, 0x02, 0xeb, 0x08, 0x02, 0xc9, 0x2a, 0x95, 0x70, 0x71, 0x21, 0x84, 0x40, 0x86, 0x80, 0xb4,
	0x40, 0x0d, 0x49, 0xce, 0x4d, 0x11, 0x12, 0xe2, 0x62, 0x49, 0x49, 0x2d, 0x4e, 0x96, 0x60, 0x02,
	0x0b, 0x81, 0xd9, 0x42, 0xd2, 0x5c, 0x9c, 0x19, 0x89, 0xc5, 0xf1, 0x99, 0x79, 0x05, 0xa5, 0x25,
	0x12, 0xdc, 0x0a, 0x8c, 0x1a, 0x1c, 0x41, 0x1c, 0x19, 0x89, 0xc5, 0x9e, 0x20, 0xbe, 0x90, 0x32,
	0x17, 0x6f, 0x4a, 0x6a, 0x5a, 0x62, 0x69, 0x4e, 0x09, 0x54, 0x01, 0x0f, 0x58, 0x27, 0x0f, 0x54,
	0x10, 0xac, 0xc8, 0x49, 0xe1, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92,
	0x63, 0x9c, 0xf1, 0x58, 0x8e, 0xc1, 0x83, 0x31, 0x8a, 0x07, 0xd9, 0xc3, 0x49, 0x6c, 0x60, 0xca,
	0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x53, 0x93, 0xa5, 0x34, 0x24, 0x01, 0x00, 0x00,
}
