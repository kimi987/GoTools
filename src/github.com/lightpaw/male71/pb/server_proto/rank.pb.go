// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/pb/server_proto/rank.proto
// DO NOT EDIT!

package server_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RankServerProto struct {
	Tower    []*TowerRankServerProto    `protobuf:"bytes,1,rep,name=tower" json:"tower,omitempty"`
	BaiZhan  []*BaiZhanRankServerProto  `protobuf:"bytes,2,rep,name=bai_zhan,json=baiZhan" json:"bai_zhan,omitempty"`
	StarTask []*StarTaskRankServerProto `protobuf:"bytes,3,rep,name=star_task,json=starTask" json:"star_task,omitempty"`
	Xuanyuan []*XuanyRankServerProto    `protobuf:"bytes,4,rep,name=xuanyuan" json:"xuanyuan,omitempty"`
}

func (m *RankServerProto) Reset()                    { *m = RankServerProto{} }
func (m *RankServerProto) String() string            { return proto.CompactTextString(m) }
func (*RankServerProto) ProtoMessage()               {}
func (*RankServerProto) Descriptor() ([]byte, []int) { return fileDescriptorRank, []int{0} }

func (m *RankServerProto) GetTower() []*TowerRankServerProto {
	if m != nil {
		return m.Tower
	}
	return nil
}

func (m *RankServerProto) GetBaiZhan() []*BaiZhanRankServerProto {
	if m != nil {
		return m.BaiZhan
	}
	return nil
}

func (m *RankServerProto) GetStarTask() []*StarTaskRankServerProto {
	if m != nil {
		return m.StarTask
	}
	return nil
}

func (m *RankServerProto) GetXuanyuan() []*XuanyRankServerProto {
	if m != nil {
		return m.Xuanyuan
	}
	return nil
}

type TowerRankServerProto struct {
	HeroId   int64  `protobuf:"varint,1,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
	MaxFloor uint64 `protobuf:"varint,2,opt,name=max_floor,json=maxFloor,proto3" json:"max_floor,omitempty"`
	Time     int64  `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (m *TowerRankServerProto) Reset()                    { *m = TowerRankServerProto{} }
func (m *TowerRankServerProto) String() string            { return proto.CompactTextString(m) }
func (*TowerRankServerProto) ProtoMessage()               {}
func (*TowerRankServerProto) Descriptor() ([]byte, []int) { return fileDescriptorRank, []int{1} }

func (m *TowerRankServerProto) GetHeroId() int64 {
	if m != nil {
		return m.HeroId
	}
	return 0
}

func (m *TowerRankServerProto) GetMaxFloor() uint64 {
	if m != nil {
		return m.MaxFloor
	}
	return 0
}

func (m *TowerRankServerProto) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

type BaiZhanRankServerProto struct {
	HeroId           int64  `protobuf:"varint,1,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
	JunXianLevel     uint64 `protobuf:"varint,2,opt,name=jun_xian_level,json=junXianLevel,proto3" json:"jun_xian_level,omitempty"`
	LastJunXianLevel uint64 `protobuf:"varint,4,opt,name=last_jun_xian_level,json=lastJunXianLevel,proto3" json:"last_jun_xian_level,omitempty"`
	Point            uint64 `protobuf:"varint,6,opt,name=point,proto3" json:"point,omitempty"`
	Time             int64  `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	FightAmount      uint64 `protobuf:"varint,5,opt,name=fight_amount,json=fightAmount,proto3" json:"fight_amount,omitempty"`
}

func (m *BaiZhanRankServerProto) Reset()                    { *m = BaiZhanRankServerProto{} }
func (m *BaiZhanRankServerProto) String() string            { return proto.CompactTextString(m) }
func (*BaiZhanRankServerProto) ProtoMessage()               {}
func (*BaiZhanRankServerProto) Descriptor() ([]byte, []int) { return fileDescriptorRank, []int{2} }

func (m *BaiZhanRankServerProto) GetHeroId() int64 {
	if m != nil {
		return m.HeroId
	}
	return 0
}

func (m *BaiZhanRankServerProto) GetJunXianLevel() uint64 {
	if m != nil {
		return m.JunXianLevel
	}
	return 0
}

func (m *BaiZhanRankServerProto) GetLastJunXianLevel() uint64 {
	if m != nil {
		return m.LastJunXianLevel
	}
	return 0
}

func (m *BaiZhanRankServerProto) GetPoint() uint64 {
	if m != nil {
		return m.Point
	}
	return 0
}

func (m *BaiZhanRankServerProto) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *BaiZhanRankServerProto) GetFightAmount() uint64 {
	if m != nil {
		return m.FightAmount
	}
	return 0
}

type StarTaskRankServerProto struct {
	HeroId int64  `protobuf:"varint,1,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
	Star   uint64 `protobuf:"varint,2,opt,name=star,proto3" json:"star,omitempty"`
	Time   int64  `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (m *StarTaskRankServerProto) Reset()                    { *m = StarTaskRankServerProto{} }
func (m *StarTaskRankServerProto) String() string            { return proto.CompactTextString(m) }
func (*StarTaskRankServerProto) ProtoMessage()               {}
func (*StarTaskRankServerProto) Descriptor() ([]byte, []int) { return fileDescriptorRank, []int{3} }

func (m *StarTaskRankServerProto) GetHeroId() int64 {
	if m != nil {
		return m.HeroId
	}
	return 0
}

func (m *StarTaskRankServerProto) GetStar() uint64 {
	if m != nil {
		return m.Star
	}
	return 0
}

func (m *StarTaskRankServerProto) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

type XuanyRankServerProto struct {
	HeroId int64  `protobuf:"varint,1,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
	Point  uint64 `protobuf:"varint,2,opt,name=point,proto3" json:"point,omitempty"`
	Win    uint64 `protobuf:"varint,3,opt,name=win,proto3" json:"win,omitempty"`
	Lose   uint64 `protobuf:"varint,4,opt,name=lose,proto3" json:"lose,omitempty"`
}

func (m *XuanyRankServerProto) Reset()                    { *m = XuanyRankServerProto{} }
func (m *XuanyRankServerProto) String() string            { return proto.CompactTextString(m) }
func (*XuanyRankServerProto) ProtoMessage()               {}
func (*XuanyRankServerProto) Descriptor() ([]byte, []int) { return fileDescriptorRank, []int{4} }

func (m *XuanyRankServerProto) GetHeroId() int64 {
	if m != nil {
		return m.HeroId
	}
	return 0
}

func (m *XuanyRankServerProto) GetPoint() uint64 {
	if m != nil {
		return m.Point
	}
	return 0
}

func (m *XuanyRankServerProto) GetWin() uint64 {
	if m != nil {
		return m.Win
	}
	return 0
}

func (m *XuanyRankServerProto) GetLose() uint64 {
	if m != nil {
		return m.Lose
	}
	return 0
}

func init() {
	proto.RegisterType((*RankServerProto)(nil), "proto.RankServerProto")
	proto.RegisterType((*TowerRankServerProto)(nil), "proto.TowerRankServerProto")
	proto.RegisterType((*BaiZhanRankServerProto)(nil), "proto.BaiZhanRankServerProto")
	proto.RegisterType((*StarTaskRankServerProto)(nil), "proto.StarTaskRankServerProto")
	proto.RegisterType((*XuanyRankServerProto)(nil), "proto.XuanyRankServerProto")
}
func (m *RankServerProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankServerProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tower) > 0 {
		for _, msg := range m.Tower {
			dAtA[i] = 0xa
			i++
			i = encodeVarintRank(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.BaiZhan) > 0 {
		for _, msg := range m.BaiZhan {
			dAtA[i] = 0x12
			i++
			i = encodeVarintRank(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.StarTask) > 0 {
		for _, msg := range m.StarTask {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintRank(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Xuanyuan) > 0 {
		for _, msg := range m.Xuanyuan {
			dAtA[i] = 0x22
			i++
			i = encodeVarintRank(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TowerRankServerProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TowerRankServerProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.HeroId))
	}
	if m.MaxFloor != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.MaxFloor))
	}
	if m.Time != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.Time))
	}
	return i, nil
}

func (m *BaiZhanRankServerProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaiZhanRankServerProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.HeroId))
	}
	if m.JunXianLevel != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.JunXianLevel))
	}
	if m.Time != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.Time))
	}
	if m.LastJunXianLevel != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.LastJunXianLevel))
	}
	if m.FightAmount != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.FightAmount))
	}
	if m.Point != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.Point))
	}
	return i, nil
}

func (m *StarTaskRankServerProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StarTaskRankServerProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.HeroId))
	}
	if m.Star != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.Star))
	}
	if m.Time != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.Time))
	}
	return i, nil
}

func (m *XuanyRankServerProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XuanyRankServerProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.HeroId))
	}
	if m.Point != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.Point))
	}
	if m.Win != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.Win))
	}
	if m.Lose != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.Lose))
	}
	return i, nil
}

func encodeFixed64Rank(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Rank(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintRank(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RankServerProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Tower) > 0 {
		for _, e := range m.Tower {
			l = e.Size()
			n += 1 + l + sovRank(uint64(l))
		}
	}
	if len(m.BaiZhan) > 0 {
		for _, e := range m.BaiZhan {
			l = e.Size()
			n += 1 + l + sovRank(uint64(l))
		}
	}
	if len(m.StarTask) > 0 {
		for _, e := range m.StarTask {
			l = e.Size()
			n += 1 + l + sovRank(uint64(l))
		}
	}
	if len(m.Xuanyuan) > 0 {
		for _, e := range m.Xuanyuan {
			l = e.Size()
			n += 1 + l + sovRank(uint64(l))
		}
	}
	return n
}

func (m *TowerRankServerProto) Size() (n int) {
	var l int
	_ = l
	if m.HeroId != 0 {
		n += 1 + sovRank(uint64(m.HeroId))
	}
	if m.MaxFloor != 0 {
		n += 1 + sovRank(uint64(m.MaxFloor))
	}
	if m.Time != 0 {
		n += 1 + sovRank(uint64(m.Time))
	}
	return n
}

func (m *BaiZhanRankServerProto) Size() (n int) {
	var l int
	_ = l
	if m.HeroId != 0 {
		n += 1 + sovRank(uint64(m.HeroId))
	}
	if m.JunXianLevel != 0 {
		n += 1 + sovRank(uint64(m.JunXianLevel))
	}
	if m.Time != 0 {
		n += 1 + sovRank(uint64(m.Time))
	}
	if m.LastJunXianLevel != 0 {
		n += 1 + sovRank(uint64(m.LastJunXianLevel))
	}
	if m.FightAmount != 0 {
		n += 1 + sovRank(uint64(m.FightAmount))
	}
	if m.Point != 0 {
		n += 1 + sovRank(uint64(m.Point))
	}
	return n
}

func (m *StarTaskRankServerProto) Size() (n int) {
	var l int
	_ = l
	if m.HeroId != 0 {
		n += 1 + sovRank(uint64(m.HeroId))
	}
	if m.Star != 0 {
		n += 1 + sovRank(uint64(m.Star))
	}
	if m.Time != 0 {
		n += 1 + sovRank(uint64(m.Time))
	}
	return n
}

func (m *XuanyRankServerProto) Size() (n int) {
	var l int
	_ = l
	if m.HeroId != 0 {
		n += 1 + sovRank(uint64(m.HeroId))
	}
	if m.Point != 0 {
		n += 1 + sovRank(uint64(m.Point))
	}
	if m.Win != 0 {
		n += 1 + sovRank(uint64(m.Win))
	}
	if m.Lose != 0 {
		n += 1 + sovRank(uint64(m.Lose))
	}
	return n
}

func sovRank(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRank(x uint64) (n int) {
	return sovRank(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RankServerProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RankServerProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RankServerProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tower", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tower = append(m.Tower, &TowerRankServerProto{})
			if err := m.Tower[len(m.Tower)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaiZhan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaiZhan = append(m.BaiZhan, &BaiZhanRankServerProto{})
			if err := m.BaiZhan[len(m.BaiZhan)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StarTask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StarTask = append(m.StarTask, &StarTaskRankServerProto{})
			if err := m.StarTask[len(m.StarTask)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Xuanyuan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Xuanyuan = append(m.Xuanyuan, &XuanyRankServerProto{})
			if err := m.Xuanyuan[len(m.Xuanyuan)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TowerRankServerProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TowerRankServerProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TowerRankServerProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroId", wireType)
			}
			m.HeroId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFloor", wireType)
			}
			m.MaxFloor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxFloor |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BaiZhanRankServerProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaiZhanRankServerProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaiZhanRankServerProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroId", wireType)
			}
			m.HeroId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JunXianLevel", wireType)
			}
			m.JunXianLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JunXianLevel |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastJunXianLevel", wireType)
			}
			m.LastJunXianLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastJunXianLevel |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FightAmount", wireType)
			}
			m.FightAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FightAmount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Point", wireType)
			}
			m.Point = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Point |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StarTaskRankServerProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StarTaskRankServerProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StarTaskRankServerProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroId", wireType)
			}
			m.HeroId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Star", wireType)
			}
			m.Star = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Star |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XuanyRankServerProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XuanyRankServerProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XuanyRankServerProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroId", wireType)
			}
			m.HeroId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Point", wireType)
			}
			m.Point = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Point |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Win", wireType)
			}
			m.Win = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Win |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lose", wireType)
			}
			m.Lose = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lose |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRank(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRank
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRank
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRank
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRank
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRank
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRank(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRank = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRank   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/pb/server_proto/rank.proto", fileDescriptorRank)
}

var fileDescriptorRank = []byte{
	// 449 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x93, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc7, 0xd9, 0xda, 0x49, 0xd3, 0x69, 0x04, 0xd5, 0x12, 0xd1, 0x95, 0x2a, 0xac, 0x10, 0x71,
	0xc8, 0x85, 0x58, 0x7c, 0x48, 0x45, 0xe2, 0x44, 0x0f, 0x08, 0x10, 0x07, 0xe4, 0xf6, 0x50, 0xe5,
	0xb2, 0x8c, 0xe9, 0xb6, 0xde, 0xda, 0xde, 0x8d, 0xd6, 0xeb, 0x26, 0xf0, 0x24, 0x3c, 0x12, 0x47,
	0x24, 0x5e, 0x00, 0x85, 0x57, 0xe0, 0x01, 0xd0, 0x6e, 0x0c, 0x0a, 0xc1, 0x39, 0xed, 0xec, 0x7f,
	0xe6, 0x37, 0x1f, 0x3b, 0x36, 0x3c, 0xbb, 0x92, 0x36, 0xab, 0xd3, 0xc9, 0x47, 0x5d, 0xc6, 0x85,
	0xbc, 0xca, 0xec, 0x0c, 0xe7, 0x71, 0x89, 0x85, 0x38, 0x8e, 0x67, 0x69, 0x5c, 0x09, 0x73, 0x23,
	0x0c, 0x9f, 0x19, 0x6d, 0x75, 0x6c, 0x50, 0xe5, 0x13, 0x6f, 0xd2, 0x8e, 0x3f, 0x46, 0xbf, 0x08,
	0xdc, 0x49, 0x50, 0xe5, 0xa7, 0x3e, 0xec, 0xbd, 0x77, 0x3d, 0x86, 0x8e, 0xd5, 0x73, 0x61, 0x18,
	0x19, 0x06, 0xe3, 0xfd, 0x27, 0x47, 0x2b, 0x62, 0x72, 0xe6, 0xb4, 0x8d, 0xd8, 0x64, 0x15, 0x49,
	0x9f, 0x43, 0x2f, 0x45, 0xc9, 0x3f, 0x67, 0xa8, 0xd8, 0x8e, 0xa7, 0xee, 0x37, 0xd4, 0x09, 0xca,
	0x69, 0x86, 0x6a, 0x93, 0xdb, 0x4d, 0x57, 0x3a, 0x7d, 0x01, 0x7b, 0x95, 0x45, 0xc3, 0x2d, 0x56,
	0x39, 0x0b, 0x3c, 0x1a, 0x35, 0xe8, 0xa9, 0x45, 0x73, 0x86, 0x55, 0xbe, 0xc9, 0xf6, 0xaa, 0xc6,
	0x41, 0x8f, 0xa1, 0xb7, 0xa8, 0x51, 0x7d, 0xaa, 0x51, 0xb1, 0xf0, 0x9f, 0x66, 0xcf, 0x9d, 0xfc,
	0x1f, 0xf8, 0x27, 0x78, 0xf4, 0x01, 0x06, 0x6d, 0xe3, 0xd0, 0x43, 0xd8, 0xcd, 0x84, 0xd1, 0x5c,
	0x5e, 0x30, 0x32, 0x24, 0xe3, 0x20, 0xe9, 0xba, 0xeb, 0x9b, 0x0b, 0x7a, 0x04, 0x7b, 0x25, 0x2e,
	0xf8, 0x65, 0xa1, 0xb5, 0x61, 0x3b, 0x43, 0x32, 0x0e, 0x93, 0x5e, 0x89, 0x8b, 0x57, 0xee, 0x4e,
	0x29, 0x84, 0x56, 0x96, 0x82, 0x05, 0x1e, 0xf1, 0xf6, 0xe8, 0x3b, 0x81, 0x7b, 0xed, 0xb3, 0x6f,
	0x2f, 0xf2, 0x10, 0x6e, 0x5f, 0xd7, 0x8a, 0x2f, 0x24, 0x2a, 0x5e, 0x88, 0x1b, 0x51, 0x34, 0x95,
	0xfa, 0xd7, 0xb5, 0x3a, 0x97, 0xa8, 0xde, 0x39, 0xad, 0xad, 0x1a, 0x7d, 0x04, 0x77, 0x0b, 0xac,
	0x2c, 0xdf, 0xc0, 0x43, 0x8f, 0x1f, 0x38, 0xd7, 0xdb, 0xf5, 0x14, 0x0f, 0xa0, 0x7f, 0xe9, 0xbe,
	0x14, 0x8e, 0xa5, 0xae, 0x95, 0x65, 0x1d, 0x1f, 0xb7, 0xef, 0xb5, 0x97, 0x5e, 0xa2, 0x03, 0xe8,
	0xcc, 0xb4, 0x54, 0x96, 0x75, 0xbd, 0x6f, 0x75, 0x19, 0x4d, 0xe1, 0x70, 0xcb, 0x56, 0xb6, 0x4f,
	0x45, 0x21, 0x74, 0x0b, 0x6b, 0x66, 0xf1, 0x76, 0xeb, 0x8b, 0xe5, 0x30, 0x68, 0xdb, 0xda, 0xf6,
	0xc4, 0x7f, 0x5b, 0xdc, 0x59, 0x6b, 0x91, 0x1e, 0x40, 0x30, 0x97, 0xca, 0x67, 0x0e, 0x13, 0x67,
	0xba, 0x62, 0x85, 0xae, 0x44, 0xf3, 0x1a, 0xde, 0x3e, 0x19, 0x7e, 0x5d, 0x46, 0xe4, 0xdb, 0x32,
	0x22, 0x3f, 0x96, 0x11, 0xf9, 0xf2, 0x33, 0xba, 0xf5, 0x9a, 0x4c, 0xfb, 0xeb, 0xff, 0x4a, 0xda,
	0xf5, 0xc7, 0xd3, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x65, 0x49, 0x8a, 0xf4, 0x5f, 0x03, 0x00,
	0x00,
}
