// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/pb/server_proto/combatx.proto
// DO NOT EDIT!

package server_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import proto5 "github.com/lightpaw/male7/pb/shared_proto"
import proto6 "github.com/lightpaw/male7/pb/shared_proto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 请求打架
type CombatXRequestServerProto struct {
	Seed           int64  `protobuf:"varint,1,opt,name=seed,proto3" json:"seed,omitempty"`
	UploadFilePath string `protobuf:"bytes,2,opt,name=upload_file_path,json=uploadFilePath,proto3" json:"upload_file_path,omitempty"`
	ReturnResult   bool   `protobuf:"varint,3,opt,name=return_result,json=returnResult,proto3" json:"return_result,omitempty"`
	// 初始数据 进攻方 防守方
	AttackerId int64                     `protobuf:"varint,9,opt,name=attacker_id,json=attackerId,proto3" json:"attacker_id,omitempty"`
	DefenserId int64                     `protobuf:"varint,10,opt,name=defenser_id,json=defenserId,proto3" json:"defenser_id,omitempty"`
	Attacker   *proto5.CombatPlayerProto `protobuf:"bytes,11,opt,name=attacker" json:"attacker,omitempty"`
	Defenser   *proto5.CombatPlayerProto `protobuf:"bytes,12,opt,name=defenser" json:"defenser,omitempty"`
	// 地图资源
	MapRes  string `protobuf:"bytes,13,opt,name=map_res,json=mapRes,proto3" json:"map_res,omitempty"`
	MapXLen int32  `protobuf:"varint,14,opt,name=map_x_len,json=mapXLen,proto3" json:"map_x_len,omitempty"`
	MapYLen int32  `protobuf:"varint,15,opt,name=map_y_len,json=mapYLen,proto3" json:"map_y_len,omitempty"`
	// 配置
	ConfigSum string `protobuf:"bytes,30,opt,name=config_sum,json=configSum,proto3" json:"config_sum,omitempty"`
	Config    []byte `protobuf:"bytes,31,opt,name=config,proto3" json:"config,omitempty"`
	Debug     bool   `protobuf:"varint,32,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (m *CombatXRequestServerProto) Reset()                    { *m = CombatXRequestServerProto{} }
func (m *CombatXRequestServerProto) String() string            { return proto.CompactTextString(m) }
func (*CombatXRequestServerProto) ProtoMessage()               {}
func (*CombatXRequestServerProto) Descriptor() ([]byte, []int) { return fileDescriptorCombatx, []int{0} }

func (m *CombatXRequestServerProto) GetSeed() int64 {
	if m != nil {
		return m.Seed
	}
	return 0
}

func (m *CombatXRequestServerProto) GetUploadFilePath() string {
	if m != nil {
		return m.UploadFilePath
	}
	return ""
}

func (m *CombatXRequestServerProto) GetReturnResult() bool {
	if m != nil {
		return m.ReturnResult
	}
	return false
}

func (m *CombatXRequestServerProto) GetAttackerId() int64 {
	if m != nil {
		return m.AttackerId
	}
	return 0
}

func (m *CombatXRequestServerProto) GetDefenserId() int64 {
	if m != nil {
		return m.DefenserId
	}
	return 0
}

func (m *CombatXRequestServerProto) GetAttacker() *proto5.CombatPlayerProto {
	if m != nil {
		return m.Attacker
	}
	return nil
}

func (m *CombatXRequestServerProto) GetDefenser() *proto5.CombatPlayerProto {
	if m != nil {
		return m.Defenser
	}
	return nil
}

func (m *CombatXRequestServerProto) GetMapRes() string {
	if m != nil {
		return m.MapRes
	}
	return ""
}

func (m *CombatXRequestServerProto) GetMapXLen() int32 {
	if m != nil {
		return m.MapXLen
	}
	return 0
}

func (m *CombatXRequestServerProto) GetMapYLen() int32 {
	if m != nil {
		return m.MapYLen
	}
	return 0
}

func (m *CombatXRequestServerProto) GetConfigSum() string {
	if m != nil {
		return m.ConfigSum
	}
	return ""
}

func (m *CombatXRequestServerProto) GetConfig() []byte {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *CombatXRequestServerProto) GetDebug() bool {
	if m != nil {
		return m.Debug
	}
	return false
}

type CombatXResponseServerProto struct {
	ReturnCode    int32                    `protobuf:"varint,1,opt,name=return_code,json=returnCode,proto3" json:"return_code,omitempty"`
	ReturnMsg     string                   `protobuf:"bytes,2,opt,name=return_msg,json=returnMsg,proto3" json:"return_msg,omitempty"`
	Link          string                   `protobuf:"bytes,5,opt,name=link,proto3" json:"link,omitempty"`
	AttackerShare *proto5.CombatShareProto `protobuf:"bytes,6,opt,name=attacker_share,json=attackerShare" json:"attacker_share,omitempty"`
	DefenserShare *proto5.CombatShareProto `protobuf:"bytes,7,opt,name=defenser_share,json=defenserShare" json:"defenser_share,omitempty"`
	// 胜利方 true表示进攻方胜利了
	AttackerId  int64 `protobuf:"varint,9,opt,name=attacker_id,json=attackerId,proto3" json:"attacker_id,omitempty"`
	DefenserId  int64 `protobuf:"varint,10,opt,name=defenser_id,json=defenserId,proto3" json:"defenser_id,omitempty"`
	AttackerWin bool  `protobuf:"varint,11,opt,name=attacker_win,json=attackerWin,proto3" json:"attacker_win,omitempty"`
	// 双方剩余兵力 key是武将id，value是剩余兵力
	AttackerAliveSoldier map[int32]int32 `protobuf:"bytes,12,rep,name=attacker_alive_soldier,json=attackerAliveSoldier" json:"attacker_alive_soldier,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	DefenserAliveSoldier map[int32]int32 `protobuf:"bytes,13,rep,name=defenser_alive_soldier,json=defenserAliveSoldier" json:"defenser_alive_soldier,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	AttackerKillSoldier  map[int32]int32 `protobuf:"bytes,15,rep,name=attacker_kill_soldier,json=attackerKillSoldier" json:"attacker_kill_soldier,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	DefenserKillSoldier  map[int32]int32 `protobuf:"bytes,16,rep,name=defenser_kill_soldier,json=defenserKillSoldier" json:"defenser_kill_soldier,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// 评分，0-险胜 1-小胜 2-大胜 3-完胜
	Score int32 `protobuf:"varint,14,opt,name=score,proto3" json:"score,omitempty"`
	// 总共花费的帧数
	TotalFrame int32                `protobuf:"varint,17,opt,name=total_frame,json=totalFrame,proto3" json:"total_frame,omitempty"`
	Result     *proto6.CombatXProto `protobuf:"bytes,99,opt,name=result" json:"result,omitempty"`
}

func (m *CombatXResponseServerProto) Reset()         { *m = CombatXResponseServerProto{} }
func (m *CombatXResponseServerProto) String() string { return proto.CompactTextString(m) }
func (*CombatXResponseServerProto) ProtoMessage()    {}
func (*CombatXResponseServerProto) Descriptor() ([]byte, []int) {
	return fileDescriptorCombatx, []int{1}
}

func (m *CombatXResponseServerProto) GetReturnCode() int32 {
	if m != nil {
		return m.ReturnCode
	}
	return 0
}

func (m *CombatXResponseServerProto) GetReturnMsg() string {
	if m != nil {
		return m.ReturnMsg
	}
	return ""
}

func (m *CombatXResponseServerProto) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *CombatXResponseServerProto) GetAttackerShare() *proto5.CombatShareProto {
	if m != nil {
		return m.AttackerShare
	}
	return nil
}

func (m *CombatXResponseServerProto) GetDefenserShare() *proto5.CombatShareProto {
	if m != nil {
		return m.DefenserShare
	}
	return nil
}

func (m *CombatXResponseServerProto) GetAttackerId() int64 {
	if m != nil {
		return m.AttackerId
	}
	return 0
}

func (m *CombatXResponseServerProto) GetDefenserId() int64 {
	if m != nil {
		return m.DefenserId
	}
	return 0
}

func (m *CombatXResponseServerProto) GetAttackerWin() bool {
	if m != nil {
		return m.AttackerWin
	}
	return false
}

func (m *CombatXResponseServerProto) GetAttackerAliveSoldier() map[int32]int32 {
	if m != nil {
		return m.AttackerAliveSoldier
	}
	return nil
}

func (m *CombatXResponseServerProto) GetDefenserAliveSoldier() map[int32]int32 {
	if m != nil {
		return m.DefenserAliveSoldier
	}
	return nil
}

func (m *CombatXResponseServerProto) GetAttackerKillSoldier() map[int32]int32 {
	if m != nil {
		return m.AttackerKillSoldier
	}
	return nil
}

func (m *CombatXResponseServerProto) GetDefenserKillSoldier() map[int32]int32 {
	if m != nil {
		return m.DefenserKillSoldier
	}
	return nil
}

func (m *CombatXResponseServerProto) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *CombatXResponseServerProto) GetTotalFrame() int32 {
	if m != nil {
		return m.TotalFrame
	}
	return 0
}

func (m *CombatXResponseServerProto) GetResult() *proto6.CombatXProto {
	if m != nil {
		return m.Result
	}
	return nil
}

func init() {
	proto.RegisterType((*CombatXRequestServerProto)(nil), "proto.CombatXRequestServerProto")
	proto.RegisterType((*CombatXResponseServerProto)(nil), "proto.CombatXResponseServerProto")
}
func (m *CombatXRequestServerProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CombatXRequestServerProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seed != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCombatx(dAtA, i, uint64(m.Seed))
	}
	if len(m.UploadFilePath) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCombatx(dAtA, i, uint64(len(m.UploadFilePath)))
		i += copy(dAtA[i:], m.UploadFilePath)
	}
	if m.ReturnResult {
		dAtA[i] = 0x18
		i++
		if m.ReturnResult {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.AttackerId != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintCombatx(dAtA, i, uint64(m.AttackerId))
	}
	if m.DefenserId != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintCombatx(dAtA, i, uint64(m.DefenserId))
	}
	if m.Attacker != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintCombatx(dAtA, i, uint64(m.Attacker.Size()))
		n1, err := m.Attacker.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Defenser != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintCombatx(dAtA, i, uint64(m.Defenser.Size()))
		n2, err := m.Defenser.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.MapRes) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintCombatx(dAtA, i, uint64(len(m.MapRes)))
		i += copy(dAtA[i:], m.MapRes)
	}
	if m.MapXLen != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintCombatx(dAtA, i, uint64(m.MapXLen))
	}
	if m.MapYLen != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintCombatx(dAtA, i, uint64(m.MapYLen))
	}
	if len(m.ConfigSum) > 0 {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCombatx(dAtA, i, uint64(len(m.ConfigSum)))
		i += copy(dAtA[i:], m.ConfigSum)
	}
	if len(m.Config) > 0 {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCombatx(dAtA, i, uint64(len(m.Config)))
		i += copy(dAtA[i:], m.Config)
	}
	if m.Debug {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x2
		i++
		if m.Debug {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *CombatXResponseServerProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CombatXResponseServerProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReturnCode != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCombatx(dAtA, i, uint64(m.ReturnCode))
	}
	if len(m.ReturnMsg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCombatx(dAtA, i, uint64(len(m.ReturnMsg)))
		i += copy(dAtA[i:], m.ReturnMsg)
	}
	if len(m.Link) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCombatx(dAtA, i, uint64(len(m.Link)))
		i += copy(dAtA[i:], m.Link)
	}
	if m.AttackerShare != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCombatx(dAtA, i, uint64(m.AttackerShare.Size()))
		n3, err := m.AttackerShare.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.DefenserShare != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCombatx(dAtA, i, uint64(m.DefenserShare.Size()))
		n4, err := m.DefenserShare.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.AttackerId != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintCombatx(dAtA, i, uint64(m.AttackerId))
	}
	if m.DefenserId != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintCombatx(dAtA, i, uint64(m.DefenserId))
	}
	if m.AttackerWin {
		dAtA[i] = 0x58
		i++
		if m.AttackerWin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.AttackerAliveSoldier) > 0 {
		for k, _ := range m.AttackerAliveSoldier {
			dAtA[i] = 0x62
			i++
			v := m.AttackerAliveSoldier[k]
			mapSize := 1 + sovCombatx(uint64(k)) + 1 + sovCombatx(uint64(v))
			i = encodeVarintCombatx(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintCombatx(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			i = encodeVarintCombatx(dAtA, i, uint64(v))
		}
	}
	if len(m.DefenserAliveSoldier) > 0 {
		for k, _ := range m.DefenserAliveSoldier {
			dAtA[i] = 0x6a
			i++
			v := m.DefenserAliveSoldier[k]
			mapSize := 1 + sovCombatx(uint64(k)) + 1 + sovCombatx(uint64(v))
			i = encodeVarintCombatx(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintCombatx(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			i = encodeVarintCombatx(dAtA, i, uint64(v))
		}
	}
	if m.Score != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintCombatx(dAtA, i, uint64(m.Score))
	}
	if len(m.AttackerKillSoldier) > 0 {
		for k, _ := range m.AttackerKillSoldier {
			dAtA[i] = 0x7a
			i++
			v := m.AttackerKillSoldier[k]
			mapSize := 1 + sovCombatx(uint64(k)) + 1 + sovCombatx(uint64(v))
			i = encodeVarintCombatx(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintCombatx(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			i = encodeVarintCombatx(dAtA, i, uint64(v))
		}
	}
	if len(m.DefenserKillSoldier) > 0 {
		for k, _ := range m.DefenserKillSoldier {
			dAtA[i] = 0x82
			i++
			dAtA[i] = 0x1
			i++
			v := m.DefenserKillSoldier[k]
			mapSize := 1 + sovCombatx(uint64(k)) + 1 + sovCombatx(uint64(v))
			i = encodeVarintCombatx(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintCombatx(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			i = encodeVarintCombatx(dAtA, i, uint64(v))
		}
	}
	if m.TotalFrame != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintCombatx(dAtA, i, uint64(m.TotalFrame))
	}
	if m.Result != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintCombatx(dAtA, i, uint64(m.Result.Size()))
		n5, err := m.Result.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func encodeFixed64Combatx(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Combatx(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintCombatx(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CombatXRequestServerProto) Size() (n int) {
	var l int
	_ = l
	if m.Seed != 0 {
		n += 1 + sovCombatx(uint64(m.Seed))
	}
	l = len(m.UploadFilePath)
	if l > 0 {
		n += 1 + l + sovCombatx(uint64(l))
	}
	if m.ReturnResult {
		n += 2
	}
	if m.AttackerId != 0 {
		n += 1 + sovCombatx(uint64(m.AttackerId))
	}
	if m.DefenserId != 0 {
		n += 1 + sovCombatx(uint64(m.DefenserId))
	}
	if m.Attacker != nil {
		l = m.Attacker.Size()
		n += 1 + l + sovCombatx(uint64(l))
	}
	if m.Defenser != nil {
		l = m.Defenser.Size()
		n += 1 + l + sovCombatx(uint64(l))
	}
	l = len(m.MapRes)
	if l > 0 {
		n += 1 + l + sovCombatx(uint64(l))
	}
	if m.MapXLen != 0 {
		n += 1 + sovCombatx(uint64(m.MapXLen))
	}
	if m.MapYLen != 0 {
		n += 1 + sovCombatx(uint64(m.MapYLen))
	}
	l = len(m.ConfigSum)
	if l > 0 {
		n += 2 + l + sovCombatx(uint64(l))
	}
	l = len(m.Config)
	if l > 0 {
		n += 2 + l + sovCombatx(uint64(l))
	}
	if m.Debug {
		n += 3
	}
	return n
}

func (m *CombatXResponseServerProto) Size() (n int) {
	var l int
	_ = l
	if m.ReturnCode != 0 {
		n += 1 + sovCombatx(uint64(m.ReturnCode))
	}
	l = len(m.ReturnMsg)
	if l > 0 {
		n += 1 + l + sovCombatx(uint64(l))
	}
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovCombatx(uint64(l))
	}
	if m.AttackerShare != nil {
		l = m.AttackerShare.Size()
		n += 1 + l + sovCombatx(uint64(l))
	}
	if m.DefenserShare != nil {
		l = m.DefenserShare.Size()
		n += 1 + l + sovCombatx(uint64(l))
	}
	if m.AttackerId != 0 {
		n += 1 + sovCombatx(uint64(m.AttackerId))
	}
	if m.DefenserId != 0 {
		n += 1 + sovCombatx(uint64(m.DefenserId))
	}
	if m.AttackerWin {
		n += 2
	}
	if len(m.AttackerAliveSoldier) > 0 {
		for k, v := range m.AttackerAliveSoldier {
			_ = k
			_ = v
			mapEntrySize := 1 + sovCombatx(uint64(k)) + 1 + sovCombatx(uint64(v))
			n += mapEntrySize + 1 + sovCombatx(uint64(mapEntrySize))
		}
	}
	if len(m.DefenserAliveSoldier) > 0 {
		for k, v := range m.DefenserAliveSoldier {
			_ = k
			_ = v
			mapEntrySize := 1 + sovCombatx(uint64(k)) + 1 + sovCombatx(uint64(v))
			n += mapEntrySize + 1 + sovCombatx(uint64(mapEntrySize))
		}
	}
	if m.Score != 0 {
		n += 1 + sovCombatx(uint64(m.Score))
	}
	if len(m.AttackerKillSoldier) > 0 {
		for k, v := range m.AttackerKillSoldier {
			_ = k
			_ = v
			mapEntrySize := 1 + sovCombatx(uint64(k)) + 1 + sovCombatx(uint64(v))
			n += mapEntrySize + 1 + sovCombatx(uint64(mapEntrySize))
		}
	}
	if len(m.DefenserKillSoldier) > 0 {
		for k, v := range m.DefenserKillSoldier {
			_ = k
			_ = v
			mapEntrySize := 1 + sovCombatx(uint64(k)) + 1 + sovCombatx(uint64(v))
			n += mapEntrySize + 2 + sovCombatx(uint64(mapEntrySize))
		}
	}
	if m.TotalFrame != 0 {
		n += 2 + sovCombatx(uint64(m.TotalFrame))
	}
	if m.Result != nil {
		l = m.Result.Size()
		n += 2 + l + sovCombatx(uint64(l))
	}
	return n
}

func sovCombatx(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCombatx(x uint64) (n int) {
	return sovCombatx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CombatXRequestServerProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCombatx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CombatXRequestServerProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CombatXRequestServerProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seed", wireType)
			}
			m.Seed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCombatx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seed |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UploadFilePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCombatx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCombatx
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UploadFilePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnResult", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCombatx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReturnResult = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackerId", wireType)
			}
			m.AttackerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCombatx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttackerId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefenserId", wireType)
			}
			m.DefenserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCombatx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefenserId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attacker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCombatx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCombatx
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attacker == nil {
				m.Attacker = &proto5.CombatPlayerProto{}
			}
			if err := m.Attacker.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Defenser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCombatx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCombatx
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Defenser == nil {
				m.Defenser = &proto5.CombatPlayerProto{}
			}
			if err := m.Defenser.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapRes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCombatx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCombatx
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MapRes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapXLen", wireType)
			}
			m.MapXLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCombatx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapXLen |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapYLen", wireType)
			}
			m.MapYLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCombatx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapYLen |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigSum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCombatx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCombatx
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfigSum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCombatx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCombatx
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Config = append(m.Config[:0], dAtA[iNdEx:postIndex]...)
			if m.Config == nil {
				m.Config = []byte{}
			}
			iNdEx = postIndex
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCombatx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Debug = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCombatx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCombatx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CombatXResponseServerProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCombatx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CombatXResponseServerProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CombatXResponseServerProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnCode", wireType)
			}
			m.ReturnCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCombatx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReturnCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCombatx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCombatx
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReturnMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCombatx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCombatx
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackerShare", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCombatx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCombatx
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AttackerShare == nil {
				m.AttackerShare = &proto5.CombatShareProto{}
			}
			if err := m.AttackerShare.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefenserShare", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCombatx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCombatx
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DefenserShare == nil {
				m.DefenserShare = &proto5.CombatShareProto{}
			}
			if err := m.DefenserShare.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackerId", wireType)
			}
			m.AttackerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCombatx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AttackerId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefenserId", wireType)
			}
			m.DefenserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCombatx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefenserId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackerWin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCombatx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AttackerWin = bool(v != 0)
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackerAliveSoldier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCombatx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCombatx
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCombatx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapkey int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCombatx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				mapkey |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if m.AttackerAliveSoldier == nil {
				m.AttackerAliveSoldier = make(map[int32]int32)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCombatx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapvalue int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCombatx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					mapvalue |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AttackerAliveSoldier[mapkey] = mapvalue
			} else {
				var mapvalue int32
				m.AttackerAliveSoldier[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefenserAliveSoldier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCombatx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCombatx
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCombatx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapkey int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCombatx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				mapkey |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if m.DefenserAliveSoldier == nil {
				m.DefenserAliveSoldier = make(map[int32]int32)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCombatx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapvalue int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCombatx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					mapvalue |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DefenserAliveSoldier[mapkey] = mapvalue
			} else {
				var mapvalue int32
				m.DefenserAliveSoldier[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCombatx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackerKillSoldier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCombatx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCombatx
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCombatx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapkey int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCombatx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				mapkey |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if m.AttackerKillSoldier == nil {
				m.AttackerKillSoldier = make(map[int32]int32)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCombatx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapvalue int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCombatx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					mapvalue |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AttackerKillSoldier[mapkey] = mapvalue
			} else {
				var mapvalue int32
				m.AttackerKillSoldier[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefenserKillSoldier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCombatx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCombatx
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCombatx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapkey int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCombatx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				mapkey |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if m.DefenserKillSoldier == nil {
				m.DefenserKillSoldier = make(map[int32]int32)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCombatx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapvalue int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCombatx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					mapvalue |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DefenserKillSoldier[mapkey] = mapvalue
			} else {
				var mapvalue int32
				m.DefenserKillSoldier[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalFrame", wireType)
			}
			m.TotalFrame = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCombatx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalFrame |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 99:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCombatx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCombatx
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &proto6.CombatXProto{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCombatx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCombatx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCombatx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCombatx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCombatx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCombatx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCombatx
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCombatx
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCombatx(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCombatx = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCombatx   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/pb/server_proto/combatx.proto", fileDescriptorCombatx)
}

var fileDescriptorCombatx = []byte{
	// 713 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0xdf, 0x4e, 0x13, 0x4f,
	0x14, 0xfe, 0x2d, 0xfd, 0xb5, 0xd0, 0x69, 0x0b, 0x38, 0x20, 0x0c, 0x4d, 0x2c, 0x2b, 0xde, 0x6c,
	0x62, 0xd2, 0x26, 0x68, 0xc4, 0x60, 0x62, 0x82, 0x28, 0x4a, 0xd4, 0x84, 0x6c, 0x2f, 0x44, 0x6f,
	0x36, 0xd3, 0xee, 0x69, 0xbb, 0xe9, 0xec, 0x1f, 0x76, 0x66, 0x81, 0xbe, 0x89, 0xb7, 0xbe, 0x8d,
	0xf1, 0xca, 0x47, 0x30, 0xf8, 0x22, 0x66, 0x66, 0x76, 0x37, 0x6c, 0x68, 0x85, 0xc6, 0xab, 0xdd,
	0xf3, 0x9d, 0xef, 0x3b, 0xff, 0xb7, 0x45, 0x7b, 0x43, 0x4f, 0x8c, 0x92, 0x5e, 0xbb, 0x1f, 0xfa,
	0x1d, 0xe6, 0x0d, 0x47, 0x22, 0xa2, 0x17, 0x1d, 0x9f, 0x32, 0xd8, 0xeb, 0x44, 0xbd, 0x0e, 0x87,
	0xf8, 0x1c, 0x62, 0x27, 0x8a, 0x43, 0x11, 0x76, 0xfa, 0xa1, 0xdf, 0xa3, 0xe2, 0xb2, 0xad, 0x2c,
	0x5c, 0x56, 0x8f, 0xe6, 0xb3, 0xbf, 0xeb, 0x47, 0x34, 0x06, 0xb7, 0xa0, 0xd7, 0xf2, 0xe6, 0xde,
	0xbc, 0xba, 0x34, 0xef, 0xce, 0x8f, 0x12, 0xda, 0x3a, 0x54, 0xc8, 0xa9, 0x0d, 0x67, 0x09, 0x70,
	0xd1, 0x55, 0x45, 0x9e, 0xa8, 0xaa, 0x30, 0xfa, 0x9f, 0x03, 0xb8, 0xc4, 0x30, 0x0d, 0xab, 0x64,
	0xab, 0x77, 0x6c, 0xa1, 0xd5, 0x24, 0x62, 0x21, 0x75, 0x9d, 0x81, 0xc7, 0xc0, 0x89, 0xa8, 0x18,
	0x91, 0x05, 0xd3, 0xb0, 0xaa, 0xf6, 0xb2, 0xc6, 0x8f, 0x3c, 0x06, 0x27, 0x54, 0x8c, 0xf0, 0x23,
	0xd4, 0x88, 0x41, 0x24, 0x71, 0xe0, 0xc4, 0xc0, 0x13, 0x26, 0x48, 0xc9, 0x34, 0xac, 0x25, 0xbb,
	0xae, 0x41, 0x5b, 0x61, 0x78, 0x1b, 0xd5, 0xa8, 0x10, 0xb4, 0x3f, 0x86, 0xd8, 0xf1, 0x5c, 0x52,
	0x55, 0x99, 0x50, 0x06, 0x1d, 0xbb, 0x92, 0xe0, 0xc2, 0x00, 0x02, 0xae, 0x09, 0x48, 0x13, 0x32,
	0xe8, 0xd8, 0xc5, 0x4f, 0xd1, 0x52, 0x46, 0x27, 0x35, 0xd3, 0xb0, 0x6a, 0xbb, 0x44, 0x37, 0xd7,
	0xd6, 0x8d, 0x9d, 0x30, 0x3a, 0x49, 0x1b, 0xb2, 0x73, 0xa6, 0x54, 0x65, 0x31, 0x48, 0xfd, 0x36,
	0x55, 0xc6, 0xc4, 0x9b, 0x68, 0xd1, 0xa7, 0x91, 0xec, 0x87, 0x34, 0x54, 0xcf, 0x15, 0x9f, 0x46,
	0x36, 0x70, 0xdc, 0x44, 0x55, 0xe9, 0xb8, 0x74, 0x18, 0x04, 0x64, 0xd9, 0x34, 0xac, 0xb2, 0x2d,
	0x99, 0xa7, 0x1f, 0x20, 0xc8, 0x7c, 0x13, 0xe5, 0x5b, 0xc9, 0x7d, 0x9f, 0xa5, 0xef, 0x01, 0x42,
	0xfd, 0x30, 0x18, 0x78, 0x43, 0x87, 0x27, 0x3e, 0x69, 0xa9, 0x98, 0x55, 0x8d, 0x74, 0x13, 0x1f,
	0x6f, 0xa0, 0x8a, 0x36, 0xc8, 0xb6, 0x69, 0x58, 0x75, 0x3b, 0xb5, 0xf0, 0x3a, 0x2a, 0xbb, 0xd0,
	0x4b, 0x86, 0xc4, 0x54, 0x23, 0xd5, 0xc6, 0xce, 0xb7, 0x2a, 0x6a, 0xe6, 0xcb, 0xe4, 0x51, 0x18,
	0x70, 0xb8, 0xbe, 0xcd, 0x6d, 0x54, 0x4b, 0xf7, 0xd1, 0x0f, 0x5d, 0x50, 0x4b, 0x2d, 0xdb, 0x48,
	0x43, 0x87, 0xa1, 0x0b, 0xb2, 0x98, 0x94, 0xe0, 0xf3, 0x61, 0xba, 0xd4, 0xaa, 0x46, 0x3e, 0xf2,
	0xa1, 0xbc, 0x06, 0xe6, 0x05, 0x63, 0x52, 0x56, 0x0e, 0xf5, 0x8e, 0x5f, 0xa2, 0xe5, 0x7c, 0x7d,
	0xea, 0xcc, 0x48, 0x45, 0x0d, 0x73, 0xb3, 0x30, 0xcc, 0xae, 0xf4, 0xe8, 0x59, 0x36, 0x32, 0xba,
	0xc2, 0xa4, 0x3e, 0xdf, 0xae, 0xd6, 0x2f, 0xde, 0xa2, 0xcf, 0xe8, 0x5a, 0xff, 0xef, 0xe7, 0xf3,
	0x10, 0xd5, 0xf3, 0x08, 0x17, 0x5e, 0xa0, 0x4e, 0x68, 0xc9, 0xce, 0xa3, 0x7e, 0xf2, 0x02, 0x7c,
	0x86, 0x36, 0x72, 0x0a, 0x65, 0xde, 0x39, 0x38, 0x3c, 0x64, 0xae, 0xa7, 0x2e, 0xa7, 0x64, 0xd5,
	0x76, 0x5f, 0x14, 0x8a, 0x9d, 0x36, 0xfb, 0xf6, 0x41, 0xaa, 0x3f, 0x90, 0xf2, 0xae, 0x56, 0xbf,
	0x09, 0x44, 0x3c, 0xb1, 0xd7, 0xe9, 0x14, 0x97, 0x4c, 0x99, 0x97, 0x5d, 0x4c, 0xd9, 0xb8, 0x6b,
	0xca, 0xd7, 0xa9, 0x7e, 0x4a, 0x4a, 0x77, 0x8a, 0x4b, 0xde, 0x14, 0xef, 0x87, 0x31, 0xa4, 0xe7,
	0xab, 0x0d, 0x1c, 0xa0, 0xfb, 0x79, 0xef, 0x63, 0x8f, 0xb1, 0xbc, 0x8e, 0x15, 0x55, 0xc7, 0xfe,
	0xdd, 0x5b, 0x7f, 0xef, 0x31, 0x56, 0x28, 0x63, 0x8d, 0xde, 0xf4, 0xc8, 0x7c, 0x79, 0xe3, 0x85,
	0x7c, 0xab, 0x77, 0xcd, 0x97, 0xf5, 0x7d, 0x33, 0x9f, 0x7b, 0xd3, 0x23, 0xef, 0x43, 0x84, 0x82,
	0x32, 0x67, 0x10, 0x53, 0x1f, 0xc8, 0x3d, 0xfd, 0x51, 0x28, 0xe8, 0x48, 0x22, 0xf8, 0x31, 0xaa,
	0xa4, 0x3f, 0x5f, 0x7d, 0x75, 0x99, 0x6b, 0xc5, 0x0a, 0xf4, 0x55, 0xa6, 0x94, 0xe6, 0x5b, 0xb4,
	0x35, 0x73, 0xd3, 0x78, 0x15, 0x95, 0xc6, 0x30, 0x49, 0xbf, 0x3b, 0xf9, 0x2a, 0x47, 0x7e, 0x4e,
	0x59, 0x02, 0xea, 0x5b, 0x2b, 0xdb, 0xda, 0xd8, 0x5f, 0x78, 0x6e, 0xc8, 0x40, 0x33, 0xf7, 0x37,
	0x57, 0xa0, 0x23, 0x44, 0x66, 0x2d, 0x60, 0xde, 0x38, 0xb3, 0x06, 0x3b, 0x4f, 0x9c, 0x57, 0xe6,
	0xf7, 0xab, 0x96, 0xf1, 0xf3, 0xaa, 0x65, 0xfc, 0xba, 0x6a, 0x19, 0x5f, 0x7f, 0xb7, 0xfe, 0x7b,
	0x67, 0x7c, 0xa9, 0x5f, 0xff, 0x63, 0xec, 0x55, 0xd4, 0xe3, 0xc9, 0x9f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x33, 0xe0, 0x1a, 0x78, 0x4c, 0x07, 0x00, 0x00,
}
