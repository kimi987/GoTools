// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/pb/server_proto/country.proto
// DO NOT EDIT!

package server_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import proto1 "github.com/lightpaw/male7/pb/shared_proto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CountriesServerProto struct {
	Country []*CountryServerProto `protobuf:"bytes,1,rep,name=country" json:"country,omitempty"`
}

func (m *CountriesServerProto) Reset()                    { *m = CountriesServerProto{} }
func (m *CountriesServerProto) String() string            { return proto.CompactTextString(m) }
func (*CountriesServerProto) ProtoMessage()               {}
func (*CountriesServerProto) Descriptor() ([]byte, []int) { return fileDescriptorCountry, []int{0} }

func (m *CountriesServerProto) GetCountry() []*CountryServerProto {
	if m != nil {
		return m.Country
	}
	return nil
}

// 当前的国家
type CountryServerProto struct {
	Id                 uint64                            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Prestige           uint64                            `protobuf:"varint,2,opt,name=prestige,proto3" json:"prestige,omitempty"`
	Name               string                            `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Destroyed          bool                              `protobuf:"varint,4,opt,name=destroyed,proto3" json:"destroyed,omitempty"`
	Officials          []*CountryOfficialServerProto     `protobuf:"bytes,3,rep,name=officials" json:"officials,omitempty"`
	Vote               *CountryChangeNameVoteServerProto `protobuf:"bytes,6,opt,name=vote" json:"vote,omitempty"`
	NextChangeNameTime int64                             `protobuf:"varint,7,opt,name=next_change_name_time,json=nextChangeNameTime,proto3" json:"next_change_name_time,omitempty"`
}

func (m *CountryServerProto) Reset()                    { *m = CountryServerProto{} }
func (m *CountryServerProto) String() string            { return proto.CompactTextString(m) }
func (*CountryServerProto) ProtoMessage()               {}
func (*CountryServerProto) Descriptor() ([]byte, []int) { return fileDescriptorCountry, []int{1} }

func (m *CountryServerProto) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CountryServerProto) GetPrestige() uint64 {
	if m != nil {
		return m.Prestige
	}
	return 0
}

func (m *CountryServerProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CountryServerProto) GetDestroyed() bool {
	if m != nil {
		return m.Destroyed
	}
	return false
}

func (m *CountryServerProto) GetOfficials() []*CountryOfficialServerProto {
	if m != nil {
		return m.Officials
	}
	return nil
}

func (m *CountryServerProto) GetVote() *CountryChangeNameVoteServerProto {
	if m != nil {
		return m.Vote
	}
	return nil
}

func (m *CountryServerProto) GetNextChangeNameTime() int64 {
	if m != nil {
		return m.NextChangeNameTime
	}
	return 0
}

type CountryChangeNameVoteServerProto struct {
	Id            int32  `protobuf:"varint,6,opt,name=id,proto3" json:"id,omitempty"`
	NewName       string `protobuf:"bytes,1,opt,name=new_name,json=newName,proto3" json:"new_name,omitempty"`
	EndTime       int64  `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	AgreeCount    uint64 `protobuf:"varint,3,opt,name=agree_count,json=agreeCount,proto3" json:"agree_count,omitempty"`
	DisagreeCount uint64 `protobuf:"varint,4,opt,name=disagree_count,json=disagreeCount,proto3" json:"disagree_count,omitempty"`
	Completed     bool   `protobuf:"varint,5,opt,name=completed,proto3" json:"completed,omitempty"`
}

func (m *CountryChangeNameVoteServerProto) Reset()         { *m = CountryChangeNameVoteServerProto{} }
func (m *CountryChangeNameVoteServerProto) String() string { return proto.CompactTextString(m) }
func (*CountryChangeNameVoteServerProto) ProtoMessage()    {}
func (*CountryChangeNameVoteServerProto) Descriptor() ([]byte, []int) {
	return fileDescriptorCountry, []int{2}
}

func (m *CountryChangeNameVoteServerProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CountryChangeNameVoteServerProto) GetNewName() string {
	if m != nil {
		return m.NewName
	}
	return ""
}

func (m *CountryChangeNameVoteServerProto) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *CountryChangeNameVoteServerProto) GetAgreeCount() uint64 {
	if m != nil {
		return m.AgreeCount
	}
	return 0
}

func (m *CountryChangeNameVoteServerProto) GetDisagreeCount() uint64 {
	if m != nil {
		return m.DisagreeCount
	}
	return 0
}

func (m *CountryChangeNameVoteServerProto) GetCompleted() bool {
	if m != nil {
		return m.Completed
	}
	return false
}

// 国家官职
type CountryOfficialServerProto struct {
	Type  proto1.CountryOfficialType                `protobuf:"varint,1,opt,name=type,proto3,enum=proto.CountryOfficialType" json:"type,omitempty"`
	Heros map[int64]*CountryOfficialHeroServerProto `protobuf:"bytes,2,rep,name=heros" json:"heros,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *CountryOfficialServerProto) Reset()         { *m = CountryOfficialServerProto{} }
func (m *CountryOfficialServerProto) String() string { return proto.CompactTextString(m) }
func (*CountryOfficialServerProto) ProtoMessage()    {}
func (*CountryOfficialServerProto) Descriptor() ([]byte, []int) {
	return fileDescriptorCountry, []int{3}
}

func (m *CountryOfficialServerProto) GetType() proto1.CountryOfficialType {
	if m != nil {
		return m.Type
	}
	return proto1.CountryOfficialType_COT_NO_OFFICIAL
}

func (m *CountryOfficialServerProto) GetHeros() map[int64]*CountryOfficialHeroServerProto {
	if m != nil {
		return m.Heros
	}
	return nil
}

type CountryOfficialHeroServerProto struct {
	HeroId      int64 `protobuf:"varint,1,opt,name=hero_id,json=heroId,proto3" json:"hero_id,omitempty"`
	AppointTime int64 `protobuf:"varint,2,opt,name=appoint_time,json=appointTime,proto3" json:"appoint_time,omitempty"`
	Pos         int32 `protobuf:"varint,3,opt,name=pos,proto3" json:"pos,omitempty"`
}

func (m *CountryOfficialHeroServerProto) Reset()         { *m = CountryOfficialHeroServerProto{} }
func (m *CountryOfficialHeroServerProto) String() string { return proto.CompactTextString(m) }
func (*CountryOfficialHeroServerProto) ProtoMessage()    {}
func (*CountryOfficialHeroServerProto) Descriptor() ([]byte, []int) {
	return fileDescriptorCountry, []int{4}
}

func (m *CountryOfficialHeroServerProto) GetHeroId() int64 {
	if m != nil {
		return m.HeroId
	}
	return 0
}

func (m *CountryOfficialHeroServerProto) GetAppointTime() int64 {
	if m != nil {
		return m.AppointTime
	}
	return 0
}

func (m *CountryOfficialHeroServerProto) GetPos() int32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

type HeroCountryMiscServerProto struct {
	OfficialType proto1.CountryOfficialType            `protobuf:"varint,1,opt,name=official_type,json=officialType,proto3,enum=proto.CountryOfficialType" json:"official_type,omitempty"`
	AppointTime  int64                                 `protobuf:"varint,3,opt,name=appoint_time,json=appointTime,proto3" json:"appoint_time,omitempty"`
	Vote         *HeroCountryChangeNameVoteServerProto `protobuf:"bytes,2,opt,name=vote" json:"vote,omitempty"`
}

func (m *HeroCountryMiscServerProto) Reset()         { *m = HeroCountryMiscServerProto{} }
func (m *HeroCountryMiscServerProto) String() string { return proto.CompactTextString(m) }
func (*HeroCountryMiscServerProto) ProtoMessage()    {}
func (*HeroCountryMiscServerProto) Descriptor() ([]byte, []int) {
	return fileDescriptorCountry, []int{5}
}

func (m *HeroCountryMiscServerProto) GetOfficialType() proto1.CountryOfficialType {
	if m != nil {
		return m.OfficialType
	}
	return proto1.CountryOfficialType_COT_NO_OFFICIAL
}

func (m *HeroCountryMiscServerProto) GetAppointTime() int64 {
	if m != nil {
		return m.AppointTime
	}
	return 0
}

func (m *HeroCountryMiscServerProto) GetVote() *HeroCountryChangeNameVoteServerProto {
	if m != nil {
		return m.Vote
	}
	return nil
}

type HeroCountryChangeNameVoteServerProto struct {
	Id    int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Votes uint64 `protobuf:"varint,2,opt,name=votes,proto3" json:"votes,omitempty"`
	Agree bool   `protobuf:"varint,3,opt,name=agree,proto3" json:"agree,omitempty"`
}

func (m *HeroCountryChangeNameVoteServerProto) Reset()         { *m = HeroCountryChangeNameVoteServerProto{} }
func (m *HeroCountryChangeNameVoteServerProto) String() string { return proto.CompactTextString(m) }
func (*HeroCountryChangeNameVoteServerProto) ProtoMessage()    {}
func (*HeroCountryChangeNameVoteServerProto) Descriptor() ([]byte, []int) {
	return fileDescriptorCountry, []int{6}
}

func (m *HeroCountryChangeNameVoteServerProto) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *HeroCountryChangeNameVoteServerProto) GetVotes() uint64 {
	if m != nil {
		return m.Votes
	}
	return 0
}

func (m *HeroCountryChangeNameVoteServerProto) GetAgree() bool {
	if m != nil {
		return m.Agree
	}
	return false
}

func init() {
	proto.RegisterType((*CountriesServerProto)(nil), "proto.CountriesServerProto")
	proto.RegisterType((*CountryServerProto)(nil), "proto.CountryServerProto")
	proto.RegisterType((*CountryChangeNameVoteServerProto)(nil), "proto.CountryChangeNameVoteServerProto")
	proto.RegisterType((*CountryOfficialServerProto)(nil), "proto.CountryOfficialServerProto")
	proto.RegisterType((*CountryOfficialHeroServerProto)(nil), "proto.CountryOfficialHeroServerProto")
	proto.RegisterType((*HeroCountryMiscServerProto)(nil), "proto.HeroCountryMiscServerProto")
	proto.RegisterType((*HeroCountryChangeNameVoteServerProto)(nil), "proto.HeroCountryChangeNameVoteServerProto")
}
func (m *CountriesServerProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountriesServerProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Country) > 0 {
		for _, msg := range m.Country {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCountry(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CountryServerProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountryServerProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.Id))
	}
	if m.Prestige != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.Prestige))
	}
	if len(m.Officials) > 0 {
		for _, msg := range m.Officials {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintCountry(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Destroyed {
		dAtA[i] = 0x20
		i++
		if m.Destroyed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCountry(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Vote != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.Vote.Size()))
		n1, err := m.Vote.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.NextChangeNameTime != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.NextChangeNameTime))
	}
	return i, nil
}

func (m *CountryChangeNameVoteServerProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountryChangeNameVoteServerProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NewName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCountry(dAtA, i, uint64(len(m.NewName)))
		i += copy(dAtA[i:], m.NewName)
	}
	if m.EndTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.EndTime))
	}
	if m.AgreeCount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.AgreeCount))
	}
	if m.DisagreeCount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.DisagreeCount))
	}
	if m.Completed {
		dAtA[i] = 0x28
		i++
		if m.Completed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Id != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *CountryOfficialServerProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountryOfficialServerProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.Type))
	}
	if len(m.Heros) > 0 {
		for k, _ := range m.Heros {
			dAtA[i] = 0x12
			i++
			v := m.Heros[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovCountry(uint64(msgSize))
			}
			mapSize := 1 + sovCountry(uint64(k)) + msgSize
			i = encodeVarintCountry(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintCountry(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintCountry(dAtA, i, uint64(v.Size()))
				n2, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n2
			}
		}
	}
	return i, nil
}

func (m *CountryOfficialHeroServerProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountryOfficialHeroServerProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.HeroId))
	}
	if m.AppointTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.AppointTime))
	}
	if m.Pos != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.Pos))
	}
	return i, nil
}

func (m *HeroCountryMiscServerProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeroCountryMiscServerProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OfficialType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.OfficialType))
	}
	if m.Vote != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.Vote.Size()))
		n3, err := m.Vote.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.AppointTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.AppointTime))
	}
	return i, nil
}

func (m *HeroCountryChangeNameVoteServerProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeroCountryChangeNameVoteServerProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.Id))
	}
	if m.Votes != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCountry(dAtA, i, uint64(m.Votes))
	}
	if m.Agree {
		dAtA[i] = 0x18
		i++
		if m.Agree {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeFixed64Country(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Country(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintCountry(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CountriesServerProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Country) > 0 {
		for _, e := range m.Country {
			l = e.Size()
			n += 1 + l + sovCountry(uint64(l))
		}
	}
	return n
}

func (m *CountryServerProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCountry(uint64(m.Id))
	}
	if m.Prestige != 0 {
		n += 1 + sovCountry(uint64(m.Prestige))
	}
	if len(m.Officials) > 0 {
		for _, e := range m.Officials {
			l = e.Size()
			n += 1 + l + sovCountry(uint64(l))
		}
	}
	if m.Destroyed {
		n += 2
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCountry(uint64(l))
	}
	if m.Vote != nil {
		l = m.Vote.Size()
		n += 1 + l + sovCountry(uint64(l))
	}
	if m.NextChangeNameTime != 0 {
		n += 1 + sovCountry(uint64(m.NextChangeNameTime))
	}
	return n
}

func (m *CountryChangeNameVoteServerProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.NewName)
	if l > 0 {
		n += 1 + l + sovCountry(uint64(l))
	}
	if m.EndTime != 0 {
		n += 1 + sovCountry(uint64(m.EndTime))
	}
	if m.AgreeCount != 0 {
		n += 1 + sovCountry(uint64(m.AgreeCount))
	}
	if m.DisagreeCount != 0 {
		n += 1 + sovCountry(uint64(m.DisagreeCount))
	}
	if m.Completed {
		n += 2
	}
	if m.Id != 0 {
		n += 1 + sovCountry(uint64(m.Id))
	}
	return n
}

func (m *CountryOfficialServerProto) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovCountry(uint64(m.Type))
	}
	if len(m.Heros) > 0 {
		for k, v := range m.Heros {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovCountry(uint64(l))
			}
			mapEntrySize := 1 + sovCountry(uint64(k)) + l
			n += mapEntrySize + 1 + sovCountry(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *CountryOfficialHeroServerProto) Size() (n int) {
	var l int
	_ = l
	if m.HeroId != 0 {
		n += 1 + sovCountry(uint64(m.HeroId))
	}
	if m.AppointTime != 0 {
		n += 1 + sovCountry(uint64(m.AppointTime))
	}
	if m.Pos != 0 {
		n += 1 + sovCountry(uint64(m.Pos))
	}
	return n
}

func (m *HeroCountryMiscServerProto) Size() (n int) {
	var l int
	_ = l
	if m.OfficialType != 0 {
		n += 1 + sovCountry(uint64(m.OfficialType))
	}
	if m.Vote != nil {
		l = m.Vote.Size()
		n += 1 + l + sovCountry(uint64(l))
	}
	if m.AppointTime != 0 {
		n += 1 + sovCountry(uint64(m.AppointTime))
	}
	return n
}

func (m *HeroCountryChangeNameVoteServerProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCountry(uint64(m.Id))
	}
	if m.Votes != 0 {
		n += 1 + sovCountry(uint64(m.Votes))
	}
	if m.Agree {
		n += 2
	}
	return n
}

func sovCountry(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCountry(x uint64) (n int) {
	return sovCountry(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CountriesServerProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCountry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountriesServerProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountriesServerProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCountry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = append(m.Country, &CountryServerProto{})
			if err := m.Country[len(m.Country)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCountry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCountry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountryServerProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCountry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountryServerProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountryServerProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prestige", wireType)
			}
			m.Prestige = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Prestige |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Officials", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCountry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Officials = append(m.Officials, &CountryOfficialServerProto{})
			if err := m.Officials[len(m.Officials)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destroyed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Destroyed = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCountry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCountry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vote == nil {
				m.Vote = &CountryChangeNameVoteServerProto{}
			}
			if err := m.Vote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextChangeNameTime", wireType)
			}
			m.NextChangeNameTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextChangeNameTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCountry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCountry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountryChangeNameVoteServerProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCountry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountryChangeNameVoteServerProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountryChangeNameVoteServerProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCountry
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgreeCount", wireType)
			}
			m.AgreeCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AgreeCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisagreeCount", wireType)
			}
			m.DisagreeCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisagreeCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Completed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Completed = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCountry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCountry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountryOfficialServerProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCountry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountryOfficialServerProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountryOfficialServerProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (proto1.CountryOfficialType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Heros", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCountry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapkey int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				mapkey |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if m.Heros == nil {
				m.Heros = make(map[int64]*CountryOfficialHeroServerProto)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCountry
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapmsglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCountry
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					mapmsglen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if mapmsglen < 0 {
					return ErrInvalidLengthCountry
				}
				postmsgIndex := iNdEx + mapmsglen
				if mapmsglen < 0 {
					return ErrInvalidLengthCountry
				}
				if postmsgIndex > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := &CountryOfficialHeroServerProto{}
				if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
					return err
				}
				iNdEx = postmsgIndex
				m.Heros[mapkey] = mapvalue
			} else {
				var mapvalue *CountryOfficialHeroServerProto
				m.Heros[mapkey] = mapvalue
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCountry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCountry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountryOfficialHeroServerProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCountry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountryOfficialHeroServerProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountryOfficialHeroServerProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroId", wireType)
			}
			m.HeroId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppointTime", wireType)
			}
			m.AppointTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppointTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			m.Pos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCountry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCountry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeroCountryMiscServerProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCountry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroCountryMiscServerProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroCountryMiscServerProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfficialType", wireType)
			}
			m.OfficialType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OfficialType |= (proto1.CountryOfficialType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCountry
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vote == nil {
				m.Vote = &HeroCountryChangeNameVoteServerProto{}
			}
			if err := m.Vote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppointTime", wireType)
			}
			m.AppointTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppointTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCountry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCountry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeroCountryChangeNameVoteServerProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCountry
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroCountryChangeNameVoteServerProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroCountryChangeNameVoteServerProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Votes", wireType)
			}
			m.Votes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Votes |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agree", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Agree = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCountry(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCountry
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCountry(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCountry
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCountry
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCountry
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCountry
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCountry(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCountry = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCountry   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/pb/server_proto/country.proto", fileDescriptorCountry)
}

var fileDescriptorCountry = []byte{
	// 642 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xcf, 0x6e, 0xd3, 0x4e,
	0x10, 0xfe, 0xad, 0x1d, 0x37, 0xc9, 0xa4, 0xad, 0xaa, 0x55, 0x7f, 0xc2, 0x8d, 0xaa, 0xe0, 0x5a,
	0x54, 0x44, 0x02, 0x25, 0x22, 0x45, 0x2a, 0xa2, 0x87, 0x4a, 0xad, 0x90, 0x8a, 0x10, 0x7f, 0xb4,
	0x54, 0x1c, 0xb8, 0x58, 0x4e, 0x3c, 0x4d, 0x56, 0xc4, 0x5e, 0xcb, 0xde, 0xb6, 0xe4, 0x4d, 0xb8,
	0xf3, 0x24, 0xdc, 0x38, 0x21, 0x1e, 0x01, 0x95, 0x27, 0xe0, 0x0d, 0xd0, 0x8e, 0x5d, 0xe2, 0xd2,
	0xd2, 0xf6, 0x64, 0xcf, 0xcc, 0x37, 0xdf, 0xb7, 0x3b, 0xdf, 0xee, 0xc2, 0xf6, 0x58, 0xea, 0xc9,
	0xf1, 0xb0, 0x37, 0x52, 0x71, 0x7f, 0x2a, 0xc7, 0x13, 0x9d, 0x86, 0xa7, 0xfd, 0x38, 0x9c, 0xe2,
	0x76, 0x3f, 0x1d, 0xf6, 0x73, 0xcc, 0x4e, 0x30, 0x0b, 0xd2, 0x4c, 0x69, 0xd5, 0x1f, 0xa9, 0xe3,
	0x44, 0x67, 0xb3, 0x1e, 0x45, 0xdc, 0xa1, 0x4f, 0xfb, 0xf1, 0xf5, 0xfd, 0x93, 0x30, 0xc3, 0xa8,
	0xec, 0x1f, 0x86, 0x39, 0x16, 0xcd, 0xfe, 0x0b, 0x58, 0xdd, 0x27, 0x36, 0x89, 0xf9, 0x5b, 0xd2,
	0x78, 0x43, 0xa4, 0x5b, 0x50, 0x2f, 0x55, 0x5c, 0xe6, 0xd9, 0xdd, 0xd6, 0x60, 0xad, 0x68, 0xe8,
	0x15, 0xe8, 0x59, 0x05, 0x2b, 0xce, 0x91, 0xfe, 0x67, 0x0b, 0xf8, 0xe5, 0x3a, 0x5f, 0x06, 0x4b,
	0x46, 0x2e, 0xf3, 0x58, 0xb7, 0x26, 0x2c, 0x19, 0xf1, 0x36, 0x34, 0xd2, 0x0c, 0x73, 0x2d, 0xc7,
	0xe8, 0x5a, 0x94, 0xfd, 0x13, 0xf3, 0x5d, 0x68, 0xaa, 0xa3, 0x23, 0x39, 0x92, 0xe1, 0x34, 0x77,
	0x6d, 0x52, 0xde, 0xb8, 0xa8, 0xfc, 0xba, 0x2c, 0x57, 0x57, 0x30, 0xef, 0xe1, 0xeb, 0xd0, 0x8c,
	0x30, 0xd7, 0x99, 0x9a, 0x61, 0xe4, 0xd6, 0x3c, 0xd6, 0x6d, 0x88, 0x79, 0x82, 0x73, 0xa8, 0x25,
	0x61, 0x8c, 0xae, 0xe3, 0xb1, 0x6e, 0x53, 0xd0, 0x3f, 0xdf, 0x81, 0xda, 0x89, 0xd2, 0xe8, 0x2e,
	0x78, 0xac, 0xdb, 0x1a, 0xdc, 0xbf, 0xa8, 0xb6, 0x3f, 0x09, 0x93, 0x31, 0xbe, 0x0a, 0x63, 0x7c,
	0xa7, 0x34, 0x56, 0x35, 0xa9, 0x89, 0x3f, 0x82, 0xff, 0x13, 0xfc, 0xa8, 0x83, 0x11, 0xe1, 0x02,
	0x43, 0x18, 0x68, 0x19, 0xa3, 0x5b, 0xf7, 0x58, 0xd7, 0x16, 0xdc, 0x14, 0xe7, 0x1c, 0x87, 0x32,
	0x46, 0xff, 0x1b, 0x03, 0xef, 0x26, 0x76, 0xbe, 0x06, 0x8d, 0x04, 0x4f, 0x89, 0x8f, 0x26, 0xd7,
	0x14, 0xf5, 0x04, 0x4f, 0x0d, 0xd2, 0x94, 0x30, 0x89, 0x0a, 0x15, 0x8b, 0x54, 0xea, 0x98, 0x44,
	0x86, 0x9a, 0xdf, 0x85, 0x56, 0x38, 0xce, 0x10, 0x03, 0x72, 0xc4, 0xb5, 0x69, 0xb8, 0x40, 0x29,
	0x52, 0xe4, 0x9b, 0xb0, 0x1c, 0xc9, 0xbc, 0x8a, 0xa9, 0x11, 0x66, 0xe9, 0x3c, 0x5b, 0xc0, 0xd6,
	0xa1, 0x39, 0x52, 0x71, 0x3a, 0x45, 0x8d, 0x11, 0xcd, 0xaa, 0x21, 0xe6, 0x89, 0xd2, 0x4f, 0x33,
	0x2e, 0xc7, 0xf8, 0xe9, 0xff, 0x62, 0xd0, 0xfe, 0xb7, 0x39, 0xbc, 0x07, 0x35, 0x3d, 0x4b, 0x8b,
	0x6d, 0x2c, 0x0f, 0xda, 0x57, 0xbb, 0x79, 0x38, 0x4b, 0x51, 0x10, 0x8e, 0xef, 0x81, 0x33, 0xc1,
	0x4c, 0xe5, 0xae, 0x45, 0xf6, 0x3f, 0xbc, 0xd1, 0xfe, 0xde, 0x81, 0x81, 0x3f, 0x33, 0x55, 0x51,
	0xb4, 0xb6, 0x03, 0x80, 0x79, 0x92, 0xaf, 0x80, 0xfd, 0x01, 0x67, 0xb4, 0x00, 0x5b, 0x98, 0x5f,
	0xbe, 0x03, 0xce, 0x49, 0x38, 0x3d, 0x2e, 0x06, 0xd8, 0x1a, 0x6c, 0x5e, 0xad, 0x61, 0x28, 0xaa,
	0x96, 0x17, 0x3d, 0x4f, 0xad, 0x27, 0xcc, 0x4f, 0xa0, 0x73, 0x3d, 0x98, 0xdf, 0x81, 0xba, 0x59,
	0x4b, 0x50, 0x1e, 0x7d, 0x5b, 0x2c, 0x98, 0xf0, 0x79, 0xc4, 0x37, 0x60, 0x31, 0x4c, 0x53, 0x25,
	0x13, 0x5d, 0xf5, 0xb0, 0x55, 0xe6, 0xc8, 0xc7, 0x15, 0xb0, 0x53, 0x95, 0x93, 0x7f, 0x8e, 0x30,
	0xbf, 0xfe, 0x17, 0x06, 0x6d, 0xa3, 0x50, 0x8a, 0xbe, 0x94, 0xf9, 0xa8, 0x2a, 0xb6, 0x0b, 0x4b,
	0xe7, 0x57, 0x20, 0xb8, 0xe5, 0xb0, 0x17, 0x55, 0x25, 0xe2, 0xbb, 0xe5, 0x25, 0x28, 0xe6, 0xf1,
	0xa0, 0xec, 0xab, 0x28, 0xde, 0x74, 0x11, 0xfe, 0xde, 0x95, 0x7d, 0x69, 0x57, 0xfe, 0x10, 0xee,
	0xdd, 0x86, 0xb0, 0xf2, 0x5e, 0xd0, 0xf9, 0xe2, 0xab, 0xe0, 0x18, 0x89, 0xbc, 0x7c, 0x2c, 0x8a,
	0xc0, 0x64, 0xe9, 0xc4, 0x92, 0x52, 0x43, 0x14, 0xc1, 0x9e, 0xf7, 0xf5, 0xac, 0xc3, 0xbe, 0x9f,
	0x75, 0xd8, 0x8f, 0xb3, 0x0e, 0xfb, 0xf4, 0xb3, 0xf3, 0xdf, 0x01, 0x7b, 0xbf, 0x58, 0x7d, 0x3c,
	0x87, 0x0b, 0xf4, 0xd9, 0xfa, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xfc, 0xd2, 0xd7, 0x54, 0x70, 0x05,
	0x00, 0x00,
}
