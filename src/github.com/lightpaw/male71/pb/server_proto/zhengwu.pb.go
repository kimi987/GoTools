// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/pb/server_proto/zhengwu.proto
// DO NOT EDIT!

package server_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/lightpaw/male7/pb/shared_proto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type HeroZhengWuServerProto struct {
	RefreshTimes    uint64              `protobuf:"varint,1,opt,name=refresh_times,json=refreshTimes,proto3" json:"refresh_times,omitempty"`
	NextRefreshTime int64               `protobuf:"varint,2,opt,name=next_refresh_time,json=nextRefreshTime,proto3" json:"next_refresh_time,omitempty"`
	Doing           *ZhengWuServerProto `protobuf:"bytes,3,opt,name=doing" json:"doing,omitempty"`
	ToDoList        []uint64            `protobuf:"varint,4,rep,packed,name=to_do_list,json=toDoList" json:"to_do_list,omitempty"`
}

func (m *HeroZhengWuServerProto) Reset()                    { *m = HeroZhengWuServerProto{} }
func (m *HeroZhengWuServerProto) String() string            { return proto.CompactTextString(m) }
func (*HeroZhengWuServerProto) ProtoMessage()               {}
func (*HeroZhengWuServerProto) Descriptor() ([]byte, []int) { return fileDescriptorZhengwu, []int{0} }

func (m *HeroZhengWuServerProto) GetRefreshTimes() uint64 {
	if m != nil {
		return m.RefreshTimes
	}
	return 0
}

func (m *HeroZhengWuServerProto) GetNextRefreshTime() int64 {
	if m != nil {
		return m.NextRefreshTime
	}
	return 0
}

func (m *HeroZhengWuServerProto) GetDoing() *ZhengWuServerProto {
	if m != nil {
		return m.Doing
	}
	return nil
}

func (m *HeroZhengWuServerProto) GetToDoList() []uint64 {
	if m != nil {
		return m.ToDoList
	}
	return nil
}

type ZhengWuServerProto struct {
	Data    uint64 `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`
	EndTime int64  `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (m *ZhengWuServerProto) Reset()                    { *m = ZhengWuServerProto{} }
func (m *ZhengWuServerProto) String() string            { return proto.CompactTextString(m) }
func (*ZhengWuServerProto) ProtoMessage()               {}
func (*ZhengWuServerProto) Descriptor() ([]byte, []int) { return fileDescriptorZhengwu, []int{1} }

func (m *ZhengWuServerProto) GetData() uint64 {
	if m != nil {
		return m.Data
	}
	return 0
}

func (m *ZhengWuServerProto) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func init() {
	proto.RegisterType((*HeroZhengWuServerProto)(nil), "proto.HeroZhengWuServerProto")
	proto.RegisterType((*ZhengWuServerProto)(nil), "proto.ZhengWuServerProto")
}
func (m *HeroZhengWuServerProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeroZhengWuServerProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RefreshTimes != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintZhengwu(dAtA, i, uint64(m.RefreshTimes))
	}
	if m.NextRefreshTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintZhengwu(dAtA, i, uint64(m.NextRefreshTime))
	}
	if m.Doing != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintZhengwu(dAtA, i, uint64(m.Doing.Size()))
		n1, err := m.Doing.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.ToDoList) > 0 {
		dAtA3 := make([]byte, len(m.ToDoList)*10)
		var j2 int
		for _, num := range m.ToDoList {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintZhengwu(dAtA, i, uint64(j2))
		i += copy(dAtA[i:], dAtA3[:j2])
	}
	return i, nil
}

func (m *ZhengWuServerProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZhengWuServerProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintZhengwu(dAtA, i, uint64(m.Data))
	}
	if m.EndTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintZhengwu(dAtA, i, uint64(m.EndTime))
	}
	return i, nil
}

func encodeFixed64Zhengwu(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Zhengwu(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintZhengwu(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *HeroZhengWuServerProto) Size() (n int) {
	var l int
	_ = l
	if m.RefreshTimes != 0 {
		n += 1 + sovZhengwu(uint64(m.RefreshTimes))
	}
	if m.NextRefreshTime != 0 {
		n += 1 + sovZhengwu(uint64(m.NextRefreshTime))
	}
	if m.Doing != nil {
		l = m.Doing.Size()
		n += 1 + l + sovZhengwu(uint64(l))
	}
	if len(m.ToDoList) > 0 {
		l = 0
		for _, e := range m.ToDoList {
			l += sovZhengwu(uint64(e))
		}
		n += 1 + sovZhengwu(uint64(l)) + l
	}
	return n
}

func (m *ZhengWuServerProto) Size() (n int) {
	var l int
	_ = l
	if m.Data != 0 {
		n += 1 + sovZhengwu(uint64(m.Data))
	}
	if m.EndTime != 0 {
		n += 1 + sovZhengwu(uint64(m.EndTime))
	}
	return n
}

func sovZhengwu(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozZhengwu(x uint64) (n int) {
	return sovZhengwu(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HeroZhengWuServerProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZhengwu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroZhengWuServerProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroZhengWuServerProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshTimes", wireType)
			}
			m.RefreshTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhengwu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefreshTimes |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextRefreshTime", wireType)
			}
			m.NextRefreshTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhengwu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextRefreshTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Doing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhengwu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZhengwu
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Doing == nil {
				m.Doing = &ZhengWuServerProto{}
			}
			if err := m.Doing.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowZhengwu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ToDoList = append(m.ToDoList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowZhengwu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthZhengwu
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowZhengwu
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ToDoList = append(m.ToDoList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ToDoList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZhengwu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZhengwu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZhengWuServerProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZhengwu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZhengWuServerProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZhengWuServerProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			m.Data = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhengwu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Data |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhengwu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZhengwu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZhengwu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipZhengwu(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowZhengwu
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZhengwu
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZhengwu
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthZhengwu
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowZhengwu
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipZhengwu(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthZhengwu = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowZhengwu   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/pb/server_proto/zhengwu.proto", fileDescriptorZhengwu)
}

var fileDescriptorZhengwu = []byte{
	// 290 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0x4d, 0x4a, 0xc4, 0x30,
	0x14, 0xc7, 0x8d, 0xd3, 0xd1, 0x21, 0x8e, 0x88, 0x59, 0x48, 0x47, 0xa4, 0x94, 0x71, 0x53, 0x5c,
	0x34, 0xa0, 0xc2, 0xec, 0xd5, 0xc5, 0x2c, 0x5c, 0x48, 0x15, 0x84, 0xd9, 0x94, 0xd4, 0x3c, 0xdb,
	0x40, 0xdb, 0x94, 0x24, 0x75, 0xc4, 0x93, 0x78, 0x14, 0x8f, 0xe0, 0xd2, 0x23, 0x48, 0xbd, 0x88,
	0x34, 0x2d, 0x58, 0x50, 0x5c, 0xbd, 0xe4, 0xe5, 0xff, 0xf1, 0x23, 0x78, 0x91, 0x0a, 0x93, 0xd5,
	0x49, 0xf8, 0x20, 0x0b, 0x9a, 0x8b, 0x34, 0x33, 0x15, 0x5b, 0xd3, 0x82, 0xe5, 0xb0, 0xa0, 0x55,
	0x42, 0x35, 0xa8, 0x27, 0x50, 0x71, 0xa5, 0xa4, 0x91, 0xf4, 0x25, 0x83, 0x32, 0x5d, 0xd7, 0xa1,
	0xbd, 0x91, 0xb1, 0x1d, 0x87, 0xe7, 0xff, 0xfb, 0x33, 0xa6, 0x80, 0xf7, 0xfe, 0x84, 0x69, 0xe8,
	0xcc, 0xf3, 0x37, 0x84, 0x0f, 0x96, 0xa0, 0xe4, 0xaa, 0x8d, 0xbc, 0xaf, 0x6f, 0x6d, 0xcd, 0x8d,
	0xcd, 0x3d, 0xc6, 0xbb, 0x0a, 0x1e, 0x15, 0xe8, 0x2c, 0x36, 0xa2, 0x00, 0xed, 0x22, 0x1f, 0x05,
	0x4e, 0x34, 0xed, 0x97, 0x77, 0xed, 0x8e, 0x9c, 0xe0, 0xfd, 0x12, 0x9e, 0x4d, 0x3c, 0x54, 0xba,
	0x9b, 0x3e, 0x0a, 0x46, 0xd1, 0x5e, 0xfb, 0x10, 0xfd, 0x88, 0x09, 0xc5, 0x63, 0x2e, 0x45, 0x99,
	0xba, 0x23, 0x1f, 0x05, 0x3b, 0xa7, 0xb3, 0x0e, 0x21, 0xfc, 0x5d, 0x1d, 0x75, 0x3a, 0x72, 0x84,
	0xb1, 0x91, 0x31, 0x97, 0x71, 0x2e, 0xb4, 0x71, 0x1d, 0x7f, 0x14, 0x38, 0xd1, 0xc4, 0xc8, 0x2b,
	0x79, 0x2d, 0xb4, 0x99, 0x5f, 0x62, 0xf2, 0x07, 0x35, 0xc1, 0x0e, 0x67, 0x86, 0xf5, 0xb0, 0xf6,
	0x4c, 0x66, 0x78, 0x02, 0x25, 0x1f, 0xb2, 0x6d, 0x43, 0xc9, 0x5b, 0xa6, 0x0b, 0xff, 0xbd, 0xf1,
	0xd0, 0x47, 0xe3, 0xa1, 0xcf, 0xc6, 0x43, 0xaf, 0x5f, 0xde, 0xc6, 0x12, 0xad, 0xa6, 0xc3, 0xcf,
	0x4e, 0xb6, 0xec, 0x38, 0xfb, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x6a, 0xd4, 0xcd, 0x32, 0xa0, 0x01,
	0x00, 0x00,
}
