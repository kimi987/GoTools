// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/pb/server_proto/goods.proto
// DO NOT EDIT!

package server_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type EquipmentServerProto struct {
	Id               uint64 `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	DataId           uint64 `protobuf:"varint,1,opt,name=data_id,json=dataId,proto3" json:"data_id,omitempty"`
	Level            uint64 `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	RefinedLevel     uint64 `protobuf:"varint,3,opt,name=refined_level,json=refinedLevel,proto3" json:"refined_level,omitempty"`
	UpgradeCostCount uint64 `protobuf:"varint,5,opt,name=upgrade_cost_count,json=upgradeCostCount,proto3" json:"upgrade_cost_count,omitempty"`
}

func (m *EquipmentServerProto) Reset()                    { *m = EquipmentServerProto{} }
func (m *EquipmentServerProto) String() string            { return proto.CompactTextString(m) }
func (*EquipmentServerProto) ProtoMessage()               {}
func (*EquipmentServerProto) Descriptor() ([]byte, []int) { return fileDescriptorGoods, []int{0} }

func (m *EquipmentServerProto) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EquipmentServerProto) GetDataId() uint64 {
	if m != nil {
		return m.DataId
	}
	return 0
}

func (m *EquipmentServerProto) GetLevel() uint64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *EquipmentServerProto) GetRefinedLevel() uint64 {
	if m != nil {
		return m.RefinedLevel
	}
	return 0
}

func (m *EquipmentServerProto) GetUpgradeCostCount() uint64 {
	if m != nil {
		return m.UpgradeCostCount
	}
	return 0
}

func init() {
	proto.RegisterType((*EquipmentServerProto)(nil), "proto.EquipmentServerProto")
}
func (m *EquipmentServerProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EquipmentServerProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DataId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGoods(dAtA, i, uint64(m.DataId))
	}
	if m.Level != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGoods(dAtA, i, uint64(m.Level))
	}
	if m.RefinedLevel != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGoods(dAtA, i, uint64(m.RefinedLevel))
	}
	if m.Id != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGoods(dAtA, i, uint64(m.Id))
	}
	if m.UpgradeCostCount != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGoods(dAtA, i, uint64(m.UpgradeCostCount))
	}
	return i, nil
}

func encodeFixed64Goods(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Goods(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintGoods(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *EquipmentServerProto) Size() (n int) {
	var l int
	_ = l
	if m.DataId != 0 {
		n += 1 + sovGoods(uint64(m.DataId))
	}
	if m.Level != 0 {
		n += 1 + sovGoods(uint64(m.Level))
	}
	if m.RefinedLevel != 0 {
		n += 1 + sovGoods(uint64(m.RefinedLevel))
	}
	if m.Id != 0 {
		n += 1 + sovGoods(uint64(m.Id))
	}
	if m.UpgradeCostCount != 0 {
		n += 1 + sovGoods(uint64(m.UpgradeCostCount))
	}
	return n
}

func sovGoods(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGoods(x uint64) (n int) {
	return sovGoods(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EquipmentServerProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGoods
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EquipmentServerProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EquipmentServerProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataId", wireType)
			}
			m.DataId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefinedLevel", wireType)
			}
			m.RefinedLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefinedLevel |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgradeCostCount", wireType)
			}
			m.UpgradeCostCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpgradeCostCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGoods(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGoods
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGoods(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGoods
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGoods
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGoods
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGoods
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGoods(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGoods = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGoods   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/pb/server_proto/goods.proto", fileDescriptorGoods)
}

var fileDescriptorGoods = []byte{
	// 236 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x4d, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0xcf, 0xc9, 0x4c, 0xcf, 0x28, 0x29, 0x48, 0x2c, 0xd7,
	0xcf, 0x4d, 0xcc, 0x49, 0x35, 0xd7, 0x2f, 0x48, 0xd2, 0x2f, 0x4e, 0x2d, 0x2a, 0x4b, 0x2d, 0x8a,
	0x2f, 0x28, 0xca, 0x2f, 0xc9, 0xd7, 0x4f, 0xcf, 0xcf, 0x4f, 0x29, 0xd6, 0x03, 0xb3, 0x85, 0x58,
	0xc1, 0x94, 0xd2, 0x0a, 0x46, 0x2e, 0x11, 0xd7, 0xc2, 0xd2, 0xcc, 0x82, 0xdc, 0xd4, 0xbc, 0x92,
	0x60, 0xb0, 0xe2, 0x00, 0xb0, 0xbc, 0x38, 0x17, 0x7b, 0x4a, 0x62, 0x49, 0x62, 0x7c, 0x66, 0x8a,
	0x04, 0xa3, 0x02, 0xa3, 0x06, 0x4b, 0x10, 0x1b, 0x88, 0xeb, 0x99, 0x22, 0x24, 0xc2, 0xc5, 0x9a,
	0x93, 0x5a, 0x96, 0x9a, 0x23, 0xc1, 0x04, 0x16, 0x86, 0x70, 0x84, 0x94, 0xb9, 0x78, 0x8b, 0x52,
	0xd3, 0x32, 0xf3, 0x52, 0x53, 0xe2, 0x21, 0xb2, 0xcc, 0x60, 0x59, 0x1e, 0xa8, 0xa0, 0x0f, 0x58,
	0x11, 0x1f, 0x17, 0x53, 0x66, 0x8a, 0x04, 0x0b, 0x58, 0x86, 0x29, 0x33, 0x45, 0x48, 0x87, 0x4b,
	0xa8, 0xb4, 0x20, 0xbd, 0x28, 0x31, 0x25, 0x35, 0x3e, 0x39, 0xbf, 0xb8, 0x24, 0x3e, 0x39, 0xbf,
	0x34, 0xaf, 0x44, 0x82, 0x15, 0x2c, 0x2f, 0x00, 0x95, 0x71, 0xce, 0x2f, 0x2e, 0x71, 0x06, 0x89,
	0x3b, 0x29, 0x9c, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x33,
	0x1e, 0xcb, 0x31, 0x78, 0x30, 0x46, 0xf1, 0x20, 0xfb, 0x2f, 0x89, 0x0d, 0x4c, 0x19, 0x03, 0x02,
	0x00, 0x00, 0xff, 0xff, 0xae, 0xbf, 0xc6, 0x76, 0x13, 0x01, 0x00, 0x00,
}
