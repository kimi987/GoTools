// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/pb/server_proto/red_packet.proto
// DO NOT EDIT!

package server_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/lightpaw/male7/pb/shared_proto"
import proto3 "github.com/lightpaw/male7/pb/shared_proto"
import proto13 "github.com/lightpaw/male7/pb/shared_proto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type HeroRedPacketServerProto struct {
	GrabbedId             []int64           `protobuf:"varint,1,rep,packed,name=grabbed_id,json=grabbedId" json:"grabbed_id,omitempty"`
	BoughtRedPacketCounts map[uint64]uint64 `protobuf:"bytes,2,rep,name=bought_red_packet_counts,json=boughtRedPacketCounts" json:"bought_red_packet_counts,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *HeroRedPacketServerProto) Reset()         { *m = HeroRedPacketServerProto{} }
func (m *HeroRedPacketServerProto) String() string { return proto.CompactTextString(m) }
func (*HeroRedPacketServerProto) ProtoMessage()    {}
func (*HeroRedPacketServerProto) Descriptor() ([]byte, []int) {
	return fileDescriptorRedPacket, []int{0}
}

func (m *HeroRedPacketServerProto) GetGrabbedId() []int64 {
	if m != nil {
		return m.GrabbedId
	}
	return nil
}

func (m *HeroRedPacketServerProto) GetBoughtRedPacketCounts() map[uint64]uint64 {
	if m != nil {
		return m.BoughtRedPacketCounts
	}
	return nil
}

type AllRedPacketServerProto struct {
	CurrIdPrefix int64                   `protobuf:"varint,1,opt,name=curr_id_prefix,json=currIdPrefix,proto3" json:"curr_id_prefix,omitempty"`
	RedPackets   []*RedPacketServerProto `protobuf:"bytes,2,rep,name=red_packets,json=redPackets" json:"red_packets,omitempty"`
}

func (m *AllRedPacketServerProto) Reset()                    { *m = AllRedPacketServerProto{} }
func (m *AllRedPacketServerProto) String() string            { return proto.CompactTextString(m) }
func (*AllRedPacketServerProto) ProtoMessage()               {}
func (*AllRedPacketServerProto) Descriptor() ([]byte, []int) { return fileDescriptorRedPacket, []int{1} }

func (m *AllRedPacketServerProto) GetCurrIdPrefix() int64 {
	if m != nil {
		return m.CurrIdPrefix
	}
	return 0
}

func (m *AllRedPacketServerProto) GetRedPackets() []*RedPacketServerProto {
	if m != nil {
		return m.RedPackets
	}
	return nil
}

type RedPacketServerProto struct {
	Id          int64                       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DataId      uint64                      `protobuf:"varint,2,opt,name=data_id,json=dataId,proto3" json:"data_id,omitempty"`
	CreateTime  int64                       `protobuf:"varint,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	CreateHero  *proto3.HeroBasicProto      `protobuf:"bytes,4,opt,name=create_hero,json=createHero" json:"create_hero,omitempty"`
	Text        string                      `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	ChatType    proto13.ChatType            `protobuf:"varint,6,opt,name=chat_type,json=chatType,proto3,enum=proto.ChatType" json:"chat_type,omitempty"`
	Parts       []*RedPacketPartServerProto `protobuf:"bytes,8,rep,name=parts" json:"parts,omitempty"`
	GrabbedHero map[int64]bool              `protobuf:"bytes,9,rep,name=grabbed_hero,json=grabbedHero" json:"grabbed_hero,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ChatId      int64                       `protobuf:"varint,10,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
}

func (m *RedPacketServerProto) Reset()                    { *m = RedPacketServerProto{} }
func (m *RedPacketServerProto) String() string            { return proto.CompactTextString(m) }
func (*RedPacketServerProto) ProtoMessage()               {}
func (*RedPacketServerProto) Descriptor() ([]byte, []int) { return fileDescriptorRedPacket, []int{2} }

func (m *RedPacketServerProto) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RedPacketServerProto) GetDataId() uint64 {
	if m != nil {
		return m.DataId
	}
	return 0
}

func (m *RedPacketServerProto) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *RedPacketServerProto) GetCreateHero() *proto3.HeroBasicProto {
	if m != nil {
		return m.CreateHero
	}
	return nil
}

func (m *RedPacketServerProto) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *RedPacketServerProto) GetChatType() proto13.ChatType {
	if m != nil {
		return m.ChatType
	}
	return proto13.ChatType_ChatWorld
}

func (m *RedPacketServerProto) GetParts() []*RedPacketPartServerProto {
	if m != nil {
		return m.Parts
	}
	return nil
}

func (m *RedPacketServerProto) GetGrabbedHero() map[int64]bool {
	if m != nil {
		return m.GrabbedHero
	}
	return nil
}

func (m *RedPacketServerProto) GetChatId() int64 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

type RedPacketPartServerProto struct {
	Money       uint64                 `protobuf:"varint,1,opt,name=money,proto3" json:"money,omitempty"`
	GrabbedTime int64                  `protobuf:"varint,2,opt,name=grabbed_time,json=grabbedTime,proto3" json:"grabbed_time,omitempty"`
	GrabbedHero *proto3.HeroBasicProto `protobuf:"bytes,3,opt,name=grabbed_hero,json=grabbedHero" json:"grabbed_hero,omitempty"`
}

func (m *RedPacketPartServerProto) Reset()         { *m = RedPacketPartServerProto{} }
func (m *RedPacketPartServerProto) String() string { return proto.CompactTextString(m) }
func (*RedPacketPartServerProto) ProtoMessage()    {}
func (*RedPacketPartServerProto) Descriptor() ([]byte, []int) {
	return fileDescriptorRedPacket, []int{3}
}

func (m *RedPacketPartServerProto) GetMoney() uint64 {
	if m != nil {
		return m.Money
	}
	return 0
}

func (m *RedPacketPartServerProto) GetGrabbedTime() int64 {
	if m != nil {
		return m.GrabbedTime
	}
	return 0
}

func (m *RedPacketPartServerProto) GetGrabbedHero() *proto3.HeroBasicProto {
	if m != nil {
		return m.GrabbedHero
	}
	return nil
}

func init() {
	proto.RegisterType((*HeroRedPacketServerProto)(nil), "proto.HeroRedPacketServerProto")
	proto.RegisterType((*AllRedPacketServerProto)(nil), "proto.AllRedPacketServerProto")
	proto.RegisterType((*RedPacketServerProto)(nil), "proto.RedPacketServerProto")
	proto.RegisterType((*RedPacketPartServerProto)(nil), "proto.RedPacketPartServerProto")
}
func (m *HeroRedPacketServerProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeroRedPacketServerProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GrabbedId) > 0 {
		dAtA2 := make([]byte, len(m.GrabbedId)*10)
		var j1 int
		for _, num1 := range m.GrabbedId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintRedPacket(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.BoughtRedPacketCounts) > 0 {
		for k, _ := range m.BoughtRedPacketCounts {
			dAtA[i] = 0x12
			i++
			v := m.BoughtRedPacketCounts[k]
			mapSize := 1 + sovRedPacket(uint64(k)) + 1 + sovRedPacket(uint64(v))
			i = encodeVarintRedPacket(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintRedPacket(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			i = encodeVarintRedPacket(dAtA, i, uint64(v))
		}
	}
	return i, nil
}

func (m *AllRedPacketServerProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllRedPacketServerProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurrIdPrefix != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRedPacket(dAtA, i, uint64(m.CurrIdPrefix))
	}
	if len(m.RedPackets) > 0 {
		for _, msg := range m.RedPackets {
			dAtA[i] = 0x12
			i++
			i = encodeVarintRedPacket(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RedPacketServerProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedPacketServerProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRedPacket(dAtA, i, uint64(m.Id))
	}
	if m.DataId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRedPacket(dAtA, i, uint64(m.DataId))
	}
	if m.CreateTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRedPacket(dAtA, i, uint64(m.CreateTime))
	}
	if m.CreateHero != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRedPacket(dAtA, i, uint64(m.CreateHero.Size()))
		n3, err := m.CreateHero.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.Text) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRedPacket(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	if m.ChatType != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintRedPacket(dAtA, i, uint64(m.ChatType))
	}
	if len(m.Parts) > 0 {
		for _, msg := range m.Parts {
			dAtA[i] = 0x42
			i++
			i = encodeVarintRedPacket(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.GrabbedHero) > 0 {
		for k, _ := range m.GrabbedHero {
			dAtA[i] = 0x4a
			i++
			v := m.GrabbedHero[k]
			mapSize := 1 + sovRedPacket(uint64(k)) + 1 + 1
			i = encodeVarintRedPacket(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintRedPacket(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			if v {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i++
		}
	}
	if m.ChatId != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintRedPacket(dAtA, i, uint64(m.ChatId))
	}
	return i, nil
}

func (m *RedPacketPartServerProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedPacketPartServerProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Money != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRedPacket(dAtA, i, uint64(m.Money))
	}
	if m.GrabbedTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRedPacket(dAtA, i, uint64(m.GrabbedTime))
	}
	if m.GrabbedHero != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRedPacket(dAtA, i, uint64(m.GrabbedHero.Size()))
		n4, err := m.GrabbedHero.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func encodeFixed64RedPacket(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32RedPacket(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintRedPacket(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *HeroRedPacketServerProto) Size() (n int) {
	var l int
	_ = l
	if len(m.GrabbedId) > 0 {
		l = 0
		for _, e := range m.GrabbedId {
			l += sovRedPacket(uint64(e))
		}
		n += 1 + sovRedPacket(uint64(l)) + l
	}
	if len(m.BoughtRedPacketCounts) > 0 {
		for k, v := range m.BoughtRedPacketCounts {
			_ = k
			_ = v
			mapEntrySize := 1 + sovRedPacket(uint64(k)) + 1 + sovRedPacket(uint64(v))
			n += mapEntrySize + 1 + sovRedPacket(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *AllRedPacketServerProto) Size() (n int) {
	var l int
	_ = l
	if m.CurrIdPrefix != 0 {
		n += 1 + sovRedPacket(uint64(m.CurrIdPrefix))
	}
	if len(m.RedPackets) > 0 {
		for _, e := range m.RedPackets {
			l = e.Size()
			n += 1 + l + sovRedPacket(uint64(l))
		}
	}
	return n
}

func (m *RedPacketServerProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovRedPacket(uint64(m.Id))
	}
	if m.DataId != 0 {
		n += 1 + sovRedPacket(uint64(m.DataId))
	}
	if m.CreateTime != 0 {
		n += 1 + sovRedPacket(uint64(m.CreateTime))
	}
	if m.CreateHero != nil {
		l = m.CreateHero.Size()
		n += 1 + l + sovRedPacket(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovRedPacket(uint64(l))
	}
	if m.ChatType != 0 {
		n += 1 + sovRedPacket(uint64(m.ChatType))
	}
	if len(m.Parts) > 0 {
		for _, e := range m.Parts {
			l = e.Size()
			n += 1 + l + sovRedPacket(uint64(l))
		}
	}
	if len(m.GrabbedHero) > 0 {
		for k, v := range m.GrabbedHero {
			_ = k
			_ = v
			mapEntrySize := 1 + sovRedPacket(uint64(k)) + 1 + 1
			n += mapEntrySize + 1 + sovRedPacket(uint64(mapEntrySize))
		}
	}
	if m.ChatId != 0 {
		n += 1 + sovRedPacket(uint64(m.ChatId))
	}
	return n
}

func (m *RedPacketPartServerProto) Size() (n int) {
	var l int
	_ = l
	if m.Money != 0 {
		n += 1 + sovRedPacket(uint64(m.Money))
	}
	if m.GrabbedTime != 0 {
		n += 1 + sovRedPacket(uint64(m.GrabbedTime))
	}
	if m.GrabbedHero != nil {
		l = m.GrabbedHero.Size()
		n += 1 + l + sovRedPacket(uint64(l))
	}
	return n
}

func sovRedPacket(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRedPacket(x uint64) (n int) {
	return sovRedPacket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HeroRedPacketServerProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRedPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroRedPacketServerProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroRedPacketServerProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRedPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GrabbedId = append(m.GrabbedId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRedPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRedPacket
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRedPacket
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GrabbedId = append(m.GrabbedId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GrabbedId", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoughtRedPacketCounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRedPacket
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				mapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if m.BoughtRedPacketCounts == nil {
				m.BoughtRedPacketCounts = make(map[uint64]uint64)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRedPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRedPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					mapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BoughtRedPacketCounts[mapkey] = mapvalue
			} else {
				var mapvalue uint64
				m.BoughtRedPacketCounts[mapkey] = mapvalue
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRedPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRedPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllRedPacketServerProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRedPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllRedPacketServerProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllRedPacketServerProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrIdPrefix", wireType)
			}
			m.CurrIdPrefix = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrIdPrefix |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedPackets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRedPacket
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedPackets = append(m.RedPackets, &RedPacketServerProto{})
			if err := m.RedPackets[len(m.RedPackets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRedPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRedPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RedPacketServerProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRedPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RedPacketServerProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RedPacketServerProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataId", wireType)
			}
			m.DataId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateHero", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRedPacket
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreateHero == nil {
				m.CreateHero = &proto3.HeroBasicProto{}
			}
			if err := m.CreateHero.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRedPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatType", wireType)
			}
			m.ChatType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatType |= (proto13.ChatType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRedPacket
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parts = append(m.Parts, &RedPacketPartServerProto{})
			if err := m.Parts[len(m.Parts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrabbedHero", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRedPacket
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapkey int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				mapkey |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if m.GrabbedHero == nil {
				m.GrabbedHero = make(map[int64]bool)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRedPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapvaluetemp int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRedPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					mapvaluetemp |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				mapvalue := bool(mapvaluetemp != 0)
				m.GrabbedHero[mapkey] = mapvalue
			} else {
				var mapvalue bool
				m.GrabbedHero[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRedPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRedPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RedPacketPartServerProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRedPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RedPacketPartServerProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RedPacketPartServerProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Money", wireType)
			}
			m.Money = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Money |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrabbedTime", wireType)
			}
			m.GrabbedTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GrabbedTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrabbedHero", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRedPacket
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GrabbedHero == nil {
				m.GrabbedHero = &proto3.HeroBasicProto{}
			}
			if err := m.GrabbedHero.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRedPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRedPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRedPacket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRedPacket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRedPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRedPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRedPacket
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRedPacket
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRedPacket(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRedPacket = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRedPacket   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/pb/server_proto/red_packet.proto", fileDescriptorRedPacket)
}

var fileDescriptorRedPacket = []byte{
	// 572 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x66, 0xed, 0x26, 0x34, 0x93, 0xaa, 0x54, 0xab, 0x56, 0x5d, 0x05, 0x91, 0x9a, 0x88, 0x83,
	0x0f, 0x55, 0x22, 0x85, 0xbf, 0x28, 0x42, 0x48, 0xa4, 0x42, 0x24, 0x27, 0x22, 0xd3, 0x13, 0x17,
	0x6b, 0x6d, 0x2f, 0xb1, 0xd5, 0x24, 0xb6, 0xd6, 0x9b, 0xd2, 0x1c, 0x78, 0x04, 0xee, 0xbc, 0x0b,
	0x2f, 0xc0, 0x91, 0x47, 0x40, 0xe1, 0x25, 0x38, 0xa2, 0x1d, 0x3b, 0x3f, 0x44, 0x4e, 0xe9, 0xc9,
	0xbb, 0xdf, 0xce, 0x37, 0x33, 0xdf, 0x37, 0x23, 0x43, 0x77, 0x14, 0xa9, 0x70, 0xe6, 0x35, 0xfd,
	0x78, 0xd2, 0x1a, 0x47, 0xa3, 0x50, 0x25, 0xfc, 0x73, 0x6b, 0xc2, 0xc7, 0xe2, 0x65, 0x2b, 0xf1,
	0x5a, 0xa9, 0x90, 0xd7, 0x42, 0xba, 0x89, 0x8c, 0x55, 0xdc, 0x92, 0x22, 0x70, 0x13, 0xee, 0x5f,
	0x09, 0xd5, 0x44, 0x80, 0x96, 0xf0, 0x53, 0xfb, 0x4f, 0x8a, 0x90, 0x23, 0xb1, 0x30, 0x45, 0xad,
	0x73, 0x77, 0x6e, 0x3a, 0xe5, 0x49, 0x1a, 0xc6, 0x4b, 0xe6, 0xb3, 0xbb, 0x33, 0xfd, 0x90, 0xe7,
	0xac, 0xc6, 0x1f, 0x02, 0xac, 0x2f, 0x64, 0xec, 0x88, 0x60, 0x88, 0x7d, 0x7c, 0x40, 0x85, 0x43,
	0xd4, 0xf3, 0x08, 0x60, 0x24, 0xb9, 0xe7, 0x89, 0xc0, 0x8d, 0x02, 0x46, 0x2c, 0xd3, 0x36, 0x9d,
	0x4a, 0x8e, 0x0c, 0x02, 0x9a, 0x02, 0xf3, 0xe2, 0xd9, 0x28, 0x54, 0xee, 0x5a, 0x86, 0xeb, 0xc7,
	0xb3, 0xa9, 0x4a, 0x99, 0x61, 0x99, 0x76, 0xb5, 0xdd, 0xcd, 0xaa, 0x34, 0x77, 0x55, 0x68, 0xf6,
	0x90, 0xbf, 0x7a, 0xba, 0x40, 0xf2, 0xdb, 0xa9, 0x92, 0x73, 0xe7, 0xc4, 0x2b, 0x7a, 0xab, 0xf5,
	0xa1, 0xb6, 0x9b, 0x44, 0x8f, 0xc0, 0xbc, 0x12, 0x73, 0x46, 0x2c, 0x62, 0xef, 0x39, 0xfa, 0x48,
	0x8f, 0xa1, 0x74, 0xcd, 0xc7, 0x33, 0xc1, 0x0c, 0xc4, 0xb2, 0x4b, 0xd7, 0xe8, 0x90, 0xc6, 0x17,
	0x38, 0x7d, 0x33, 0x1e, 0x17, 0x0a, 0x7f, 0x02, 0x87, 0xfe, 0x4c, 0x4a, 0x37, 0xd2, 0x8e, 0x89,
	0x4f, 0xd1, 0x0d, 0x66, 0x34, 0x9d, 0x03, 0x8d, 0x0e, 0x82, 0x21, 0x62, 0xf4, 0x15, 0x54, 0xd7,
	0xc2, 0x97, 0x92, 0x1f, 0xe6, 0x92, 0x8b, 0xf2, 0x3a, 0x20, 0x97, 0x68, 0xda, 0xf8, 0x6e, 0xc2,
	0x71, 0x61, 0xf1, 0x43, 0x30, 0xd0, 0x6d, 0x5d, 0xd0, 0x88, 0x02, 0x7a, 0x0a, 0xf7, 0x03, 0xae,
	0xb8, 0x1e, 0x41, 0xa6, 0xa1, 0xac, 0xaf, 0x83, 0x80, 0x9e, 0x41, 0xd5, 0x97, 0x82, 0x2b, 0xe1,
	0xaa, 0x68, 0x22, 0x98, 0x89, 0x0c, 0xc8, 0xa0, 0xcb, 0x68, 0x22, 0xe8, 0x8b, 0x55, 0x40, 0x28,
	0x64, 0xcc, 0xf6, 0x2c, 0x62, 0x57, 0xdb, 0x27, 0x1b, 0x33, 0xe9, 0xf1, 0x34, 0xf2, 0xf3, 0xd6,
	0xb2, 0x48, 0x8d, 0x52, 0x0a, 0x7b, 0x4a, 0xdc, 0x28, 0x56, 0xb2, 0x88, 0x5d, 0x71, 0xf0, 0x4c,
	0xcf, 0xa1, 0xa2, 0xd7, 0xc6, 0x55, 0xf3, 0x44, 0xb0, 0xb2, 0x45, 0xec, 0xc3, 0xf6, 0x83, 0x3c,
	0xd3, 0x45, 0xc8, 0xd5, 0xe5, 0x3c, 0x11, 0xce, 0xbe, 0x9f, 0x9f, 0xe8, 0x73, 0x28, 0x25, 0x5c,
	0xaa, 0x94, 0xed, 0xa3, 0x29, 0x67, 0xdb, 0xa6, 0x0c, 0xb9, 0xfc, 0xc7, 0x98, 0x2c, 0x9a, 0xbe,
	0x87, 0x83, 0xe5, 0xc2, 0x61, 0xc7, 0x15, 0x64, 0x9f, 0xdf, 0x62, 0x69, 0xf3, 0x5d, 0x16, 0xaf,
	0xfb, 0xce, 0xf6, 0xa6, 0x3a, 0x5a, 0x23, 0xda, 0x3b, 0xec, 0x3a, 0x0a, 0x18, 0xa0, 0x3d, 0x65,
	0x7d, 0x1d, 0x04, 0xb5, 0xd7, 0x70, 0xb4, 0xcd, 0xdc, 0x5c, 0x1e, 0xb3, 0x60, 0x79, 0xf6, 0x37,
	0x97, 0xe7, 0x2b, 0x01, 0xb6, 0x4b, 0x8d, 0xa6, 0x4d, 0xe2, 0xe9, 0x6a, 0x0f, 0xb3, 0x0b, 0x7d,
	0xbc, 0x16, 0x87, 0xf3, 0x32, 0xb0, 0xce, 0xb2, 0x5d, 0x1c, 0x58, 0x67, 0x4b, 0xbf, 0x79, 0xdb,
	0xc4, 0x36, 0x85, 0xf6, 0xac, 0x1f, 0x8b, 0x3a, 0xf9, 0xb9, 0xa8, 0x93, 0x5f, 0x8b, 0x3a, 0xf9,
	0xf6, 0xbb, 0x7e, 0xaf, 0x4f, 0x3e, 0x1e, 0x6c, 0xfe, 0xad, 0xbc, 0x32, 0x7e, 0x9e, 0xfe, 0x0d,
	0x00, 0x00, 0xff, 0xff, 0x92, 0xeb, 0xcc, 0xbb, 0xe1, 0x04, 0x00, 0x00,
}
