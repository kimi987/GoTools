// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/pb/server_proto/mingc.proto
// DO NOT EDIT!

package server_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MingcsServerProto struct {
	Mcs []*MingcServerProto `protobuf:"bytes,1,rep,name=mcs" json:"mcs,omitempty"`
}

func (m *MingcsServerProto) Reset()                    { *m = MingcsServerProto{} }
func (m *MingcsServerProto) String() string            { return proto.CompactTextString(m) }
func (*MingcsServerProto) ProtoMessage()               {}
func (*MingcsServerProto) Descriptor() ([]byte, []int) { return fileDescriptorMingc, []int{0} }

func (m *MingcsServerProto) GetMcs() []*MingcServerProto {
	if m != nil {
		return m.Mcs
	}
	return nil
}

type MingcServerProto struct {
	Id                uint64        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	HostGuildId       int64         `protobuf:"varint,2,opt,name=host_guild_id,json=hostGuildId,proto3" json:"host_guild_id,omitempty"`
	Yinliang          uint64        `protobuf:"varint,3,opt,name=yinliang,proto3" json:"yinliang,omitempty"`
	ExtraYinliang     uint64        `protobuf:"varint,4,opt,name=extra_yinliang,json=extraYinliang,proto3" json:"extra_yinliang,omitempty"`
	LastResetTime     int64         `protobuf:"varint,5,opt,name=last_reset_time,json=lastResetTime,proto3" json:"last_reset_time,omitempty"`
	HostExtraYinliang uint64        `protobuf:"varint,6,opt,name=host_extra_yinliang,json=hostExtraYinliang,proto3" json:"host_extra_yinliang,omitempty"`
	McBuild           *McBuildProto `protobuf:"bytes,7,opt,name=mc_build,json=mcBuild" json:"mc_build,omitempty"`
}

func (m *MingcServerProto) Reset()                    { *m = MingcServerProto{} }
func (m *MingcServerProto) String() string            { return proto.CompactTextString(m) }
func (*MingcServerProto) ProtoMessage()               {}
func (*MingcServerProto) Descriptor() ([]byte, []int) { return fileDescriptorMingc, []int{1} }

func (m *MingcServerProto) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MingcServerProto) GetHostGuildId() int64 {
	if m != nil {
		return m.HostGuildId
	}
	return 0
}

func (m *MingcServerProto) GetYinliang() uint64 {
	if m != nil {
		return m.Yinliang
	}
	return 0
}

func (m *MingcServerProto) GetExtraYinliang() uint64 {
	if m != nil {
		return m.ExtraYinliang
	}
	return 0
}

func (m *MingcServerProto) GetLastResetTime() int64 {
	if m != nil {
		return m.LastResetTime
	}
	return 0
}

func (m *MingcServerProto) GetHostExtraYinliang() uint64 {
	if m != nil {
		return m.HostExtraYinliang
	}
	return 0
}

func (m *MingcServerProto) GetMcBuild() *McBuildProto {
	if m != nil {
		return m.McBuild
	}
	return nil
}

// 玩家名城营建
type HeroMcBuildServerProto struct {
	McBuildCount    uint64 `protobuf:"varint,1,opt,name=mc_build_count,json=mcBuildCount,proto3" json:"mc_build_count,omitempty"`
	McBuildNextTime int64  `protobuf:"varint,2,opt,name=mc_build_next_time,json=mcBuildNextTime,proto3" json:"mc_build_next_time,omitempty"`
}

func (m *HeroMcBuildServerProto) Reset()                    { *m = HeroMcBuildServerProto{} }
func (m *HeroMcBuildServerProto) String() string            { return proto.CompactTextString(m) }
func (*HeroMcBuildServerProto) ProtoMessage()               {}
func (*HeroMcBuildServerProto) Descriptor() ([]byte, []int) { return fileDescriptorMingc, []int{2} }

func (m *HeroMcBuildServerProto) GetMcBuildCount() uint64 {
	if m != nil {
		return m.McBuildCount
	}
	return 0
}

func (m *HeroMcBuildServerProto) GetMcBuildNextTime() int64 {
	if m != nil {
		return m.McBuildNextTime
	}
	return 0
}

type McBuildProto struct {
	Level             uint64                           `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Support           uint64                           `protobuf:"varint,2,opt,name=support,proto3" json:"support,omitempty"`
	DailyAddedSupport uint64                           `protobuf:"varint,3,opt,name=daily_added_support,json=dailyAddedSupport,proto3" json:"daily_added_support,omitempty"`
	GuildInfos        map[int64]*McBuildGuildInfoProto `protobuf:"bytes,4,rep,name=guild_infos,json=guildInfos" json:"guild_infos,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *McBuildProto) Reset()                    { *m = McBuildProto{} }
func (m *McBuildProto) String() string            { return proto.CompactTextString(m) }
func (*McBuildProto) ProtoMessage()               {}
func (*McBuildProto) Descriptor() ([]byte, []int) { return fileDescriptorMingc, []int{3} }

func (m *McBuildProto) GetLevel() uint64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *McBuildProto) GetSupport() uint64 {
	if m != nil {
		return m.Support
	}
	return 0
}

func (m *McBuildProto) GetDailyAddedSupport() uint64 {
	if m != nil {
		return m.DailyAddedSupport
	}
	return 0
}

func (m *McBuildProto) GetGuildInfos() map[int64]*McBuildGuildInfoProto {
	if m != nil {
		return m.GuildInfos
	}
	return nil
}

type McBuildGuildInfoProto struct {
	Support    uint64                          `protobuf:"varint,1,opt,name=support,proto3" json:"support,omitempty"`
	BuildCount uint64                          `protobuf:"varint,2,opt,name=build_count,json=buildCount,proto3" json:"build_count,omitempty"`
	HeroInfos  map[int64]*McBuildHeroInfoProto `protobuf:"bytes,4,rep,name=hero_infos,json=heroInfos" json:"hero_infos,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *McBuildGuildInfoProto) Reset()                    { *m = McBuildGuildInfoProto{} }
func (m *McBuildGuildInfoProto) String() string            { return proto.CompactTextString(m) }
func (*McBuildGuildInfoProto) ProtoMessage()               {}
func (*McBuildGuildInfoProto) Descriptor() ([]byte, []int) { return fileDescriptorMingc, []int{4} }

func (m *McBuildGuildInfoProto) GetSupport() uint64 {
	if m != nil {
		return m.Support
	}
	return 0
}

func (m *McBuildGuildInfoProto) GetBuildCount() uint64 {
	if m != nil {
		return m.BuildCount
	}
	return 0
}

func (m *McBuildGuildInfoProto) GetHeroInfos() map[int64]*McBuildHeroInfoProto {
	if m != nil {
		return m.HeroInfos
	}
	return nil
}

type McBuildHeroInfoProto struct {
	Support    uint64 `protobuf:"varint,1,opt,name=support,proto3" json:"support,omitempty"`
	BuildCount uint64 `protobuf:"varint,2,opt,name=build_count,json=buildCount,proto3" json:"build_count,omitempty"`
}

func (m *McBuildHeroInfoProto) Reset()                    { *m = McBuildHeroInfoProto{} }
func (m *McBuildHeroInfoProto) String() string            { return proto.CompactTextString(m) }
func (*McBuildHeroInfoProto) ProtoMessage()               {}
func (*McBuildHeroInfoProto) Descriptor() ([]byte, []int) { return fileDescriptorMingc, []int{5} }

func (m *McBuildHeroInfoProto) GetSupport() uint64 {
	if m != nil {
		return m.Support
	}
	return 0
}

func (m *McBuildHeroInfoProto) GetBuildCount() uint64 {
	if m != nil {
		return m.BuildCount
	}
	return 0
}

func init() {
	proto.RegisterType((*MingcsServerProto)(nil), "proto.MingcsServerProto")
	proto.RegisterType((*MingcServerProto)(nil), "proto.MingcServerProto")
	proto.RegisterType((*HeroMcBuildServerProto)(nil), "proto.HeroMcBuildServerProto")
	proto.RegisterType((*McBuildProto)(nil), "proto.McBuildProto")
	proto.RegisterType((*McBuildGuildInfoProto)(nil), "proto.McBuildGuildInfoProto")
	proto.RegisterType((*McBuildHeroInfoProto)(nil), "proto.McBuildHeroInfoProto")
}
func (m *MingcsServerProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MingcsServerProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Mcs) > 0 {
		for _, msg := range m.Mcs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMingc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MingcServerProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MingcServerProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMingc(dAtA, i, uint64(m.Id))
	}
	if m.HostGuildId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMingc(dAtA, i, uint64(m.HostGuildId))
	}
	if m.Yinliang != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMingc(dAtA, i, uint64(m.Yinliang))
	}
	if m.ExtraYinliang != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMingc(dAtA, i, uint64(m.ExtraYinliang))
	}
	if m.LastResetTime != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMingc(dAtA, i, uint64(m.LastResetTime))
	}
	if m.HostExtraYinliang != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintMingc(dAtA, i, uint64(m.HostExtraYinliang))
	}
	if m.McBuild != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintMingc(dAtA, i, uint64(m.McBuild.Size()))
		n1, err := m.McBuild.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *HeroMcBuildServerProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeroMcBuildServerProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.McBuildCount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMingc(dAtA, i, uint64(m.McBuildCount))
	}
	if m.McBuildNextTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMingc(dAtA, i, uint64(m.McBuildNextTime))
	}
	return i, nil
}

func (m *McBuildProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *McBuildProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Level != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMingc(dAtA, i, uint64(m.Level))
	}
	if m.Support != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMingc(dAtA, i, uint64(m.Support))
	}
	if m.DailyAddedSupport != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMingc(dAtA, i, uint64(m.DailyAddedSupport))
	}
	if len(m.GuildInfos) > 0 {
		for k, _ := range m.GuildInfos {
			dAtA[i] = 0x22
			i++
			v := m.GuildInfos[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovMingc(uint64(msgSize))
			}
			mapSize := 1 + sovMingc(uint64(k)) + msgSize
			i = encodeVarintMingc(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintMingc(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintMingc(dAtA, i, uint64(v.Size()))
				n2, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n2
			}
		}
	}
	return i, nil
}

func (m *McBuildGuildInfoProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *McBuildGuildInfoProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Support != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMingc(dAtA, i, uint64(m.Support))
	}
	if m.BuildCount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMingc(dAtA, i, uint64(m.BuildCount))
	}
	if len(m.HeroInfos) > 0 {
		for k, _ := range m.HeroInfos {
			dAtA[i] = 0x22
			i++
			v := m.HeroInfos[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovMingc(uint64(msgSize))
			}
			mapSize := 1 + sovMingc(uint64(k)) + msgSize
			i = encodeVarintMingc(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintMingc(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintMingc(dAtA, i, uint64(v.Size()))
				n3, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n3
			}
		}
	}
	return i, nil
}

func (m *McBuildHeroInfoProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *McBuildHeroInfoProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Support != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMingc(dAtA, i, uint64(m.Support))
	}
	if m.BuildCount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMingc(dAtA, i, uint64(m.BuildCount))
	}
	return i, nil
}

func encodeFixed64Mingc(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Mingc(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintMingc(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *MingcsServerProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Mcs) > 0 {
		for _, e := range m.Mcs {
			l = e.Size()
			n += 1 + l + sovMingc(uint64(l))
		}
	}
	return n
}

func (m *MingcServerProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMingc(uint64(m.Id))
	}
	if m.HostGuildId != 0 {
		n += 1 + sovMingc(uint64(m.HostGuildId))
	}
	if m.Yinliang != 0 {
		n += 1 + sovMingc(uint64(m.Yinliang))
	}
	if m.ExtraYinliang != 0 {
		n += 1 + sovMingc(uint64(m.ExtraYinliang))
	}
	if m.LastResetTime != 0 {
		n += 1 + sovMingc(uint64(m.LastResetTime))
	}
	if m.HostExtraYinliang != 0 {
		n += 1 + sovMingc(uint64(m.HostExtraYinliang))
	}
	if m.McBuild != nil {
		l = m.McBuild.Size()
		n += 1 + l + sovMingc(uint64(l))
	}
	return n
}

func (m *HeroMcBuildServerProto) Size() (n int) {
	var l int
	_ = l
	if m.McBuildCount != 0 {
		n += 1 + sovMingc(uint64(m.McBuildCount))
	}
	if m.McBuildNextTime != 0 {
		n += 1 + sovMingc(uint64(m.McBuildNextTime))
	}
	return n
}

func (m *McBuildProto) Size() (n int) {
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovMingc(uint64(m.Level))
	}
	if m.Support != 0 {
		n += 1 + sovMingc(uint64(m.Support))
	}
	if m.DailyAddedSupport != 0 {
		n += 1 + sovMingc(uint64(m.DailyAddedSupport))
	}
	if len(m.GuildInfos) > 0 {
		for k, v := range m.GuildInfos {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMingc(uint64(l))
			}
			mapEntrySize := 1 + sovMingc(uint64(k)) + l
			n += mapEntrySize + 1 + sovMingc(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *McBuildGuildInfoProto) Size() (n int) {
	var l int
	_ = l
	if m.Support != 0 {
		n += 1 + sovMingc(uint64(m.Support))
	}
	if m.BuildCount != 0 {
		n += 1 + sovMingc(uint64(m.BuildCount))
	}
	if len(m.HeroInfos) > 0 {
		for k, v := range m.HeroInfos {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMingc(uint64(l))
			}
			mapEntrySize := 1 + sovMingc(uint64(k)) + l
			n += mapEntrySize + 1 + sovMingc(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *McBuildHeroInfoProto) Size() (n int) {
	var l int
	_ = l
	if m.Support != 0 {
		n += 1 + sovMingc(uint64(m.Support))
	}
	if m.BuildCount != 0 {
		n += 1 + sovMingc(uint64(m.BuildCount))
	}
	return n
}

func sovMingc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMingc(x uint64) (n int) {
	return sovMingc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MingcsServerProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MingcsServerProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MingcsServerProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mcs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMingc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mcs = append(m.Mcs, &MingcServerProto{})
			if err := m.Mcs[len(m.Mcs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMingc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MingcServerProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MingcServerProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MingcServerProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostGuildId", wireType)
			}
			m.HostGuildId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HostGuildId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Yinliang", wireType)
			}
			m.Yinliang = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Yinliang |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraYinliang", wireType)
			}
			m.ExtraYinliang = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExtraYinliang |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastResetTime", wireType)
			}
			m.LastResetTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastResetTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostExtraYinliang", wireType)
			}
			m.HostExtraYinliang = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HostExtraYinliang |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field McBuild", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMingc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.McBuild == nil {
				m.McBuild = &McBuildProto{}
			}
			if err := m.McBuild.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMingc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HeroMcBuildServerProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroMcBuildServerProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroMcBuildServerProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field McBuildCount", wireType)
			}
			m.McBuildCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.McBuildCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field McBuildNextTime", wireType)
			}
			m.McBuildNextTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.McBuildNextTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMingc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *McBuildProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: McBuildProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: McBuildProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Support", wireType)
			}
			m.Support = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Support |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DailyAddedSupport", wireType)
			}
			m.DailyAddedSupport = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DailyAddedSupport |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMingc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapkey int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				mapkey |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if m.GuildInfos == nil {
				m.GuildInfos = make(map[int64]*McBuildGuildInfoProto)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMingc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapmsglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMingc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					mapmsglen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if mapmsglen < 0 {
					return ErrInvalidLengthMingc
				}
				postmsgIndex := iNdEx + mapmsglen
				if mapmsglen < 0 {
					return ErrInvalidLengthMingc
				}
				if postmsgIndex > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := &McBuildGuildInfoProto{}
				if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
					return err
				}
				iNdEx = postmsgIndex
				m.GuildInfos[mapkey] = mapvalue
			} else {
				var mapvalue *McBuildGuildInfoProto
				m.GuildInfos[mapkey] = mapvalue
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMingc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *McBuildGuildInfoProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: McBuildGuildInfoProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: McBuildGuildInfoProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Support", wireType)
			}
			m.Support = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Support |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildCount", wireType)
			}
			m.BuildCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuildCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMingc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapkey int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				mapkey |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if m.HeroInfos == nil {
				m.HeroInfos = make(map[int64]*McBuildHeroInfoProto)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMingc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapmsglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMingc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					mapmsglen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if mapmsglen < 0 {
					return ErrInvalidLengthMingc
				}
				postmsgIndex := iNdEx + mapmsglen
				if mapmsglen < 0 {
					return ErrInvalidLengthMingc
				}
				if postmsgIndex > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := &McBuildHeroInfoProto{}
				if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
					return err
				}
				iNdEx = postmsgIndex
				m.HeroInfos[mapkey] = mapvalue
			} else {
				var mapvalue *McBuildHeroInfoProto
				m.HeroInfos[mapkey] = mapvalue
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMingc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *McBuildHeroInfoProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMingc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: McBuildHeroInfoProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: McBuildHeroInfoProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Support", wireType)
			}
			m.Support = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Support |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildCount", wireType)
			}
			m.BuildCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMingc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuildCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMingc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMingc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMingc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMingc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMingc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMingc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMingc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMingc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMingc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMingc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMingc   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/pb/server_proto/mingc.proto", fileDescriptorMingc)
}

var fileDescriptorMingc = []byte{
	// 559 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x66, 0xe3, 0xa4, 0x29, 0xe3, 0xfc, 0x34, 0xdb, 0x02, 0x56, 0x40, 0x21, 0x0a, 0x3f, 0x0a,
	0xaa, 0xe4, 0x88, 0x20, 0x04, 0xe2, 0x80, 0x44, 0xa1, 0xa2, 0x20, 0x81, 0xc0, 0xe5, 0x52, 0x38,
	0xac, 0x1c, 0x7b, 0x71, 0x56, 0xf5, 0x4f, 0x64, 0x6f, 0x42, 0xf2, 0x18, 0xdc, 0x78, 0x24, 0x8e,
	0x3c, 0x02, 0x0a, 0x4f, 0xc1, 0x0d, 0xed, 0xae, 0x6d, 0xec, 0x10, 0x71, 0xe9, 0xc9, 0x3b, 0xdf,
	0x7c, 0x33, 0x3b, 0xdf, 0x37, 0x2b, 0xc3, 0x43, 0x8f, 0xf1, 0xe9, 0x7c, 0x62, 0x3a, 0x51, 0x30,
	0xf2, 0x99, 0x37, 0xe5, 0x33, 0xfb, 0xcb, 0x28, 0xb0, 0x7d, 0xfa, 0x68, 0x34, 0x9b, 0x8c, 0x12,
	0x1a, 0x2f, 0x68, 0x4c, 0x66, 0x71, 0xc4, 0xa3, 0x51, 0xc0, 0x42, 0xcf, 0x31, 0xe5, 0x19, 0xd7,
	0xe4, 0x67, 0xf0, 0x14, 0x3a, 0x6f, 0x04, 0x9a, 0x9c, 0x4a, 0xe2, 0x3b, 0x99, 0xbb, 0x07, 0x5a,
	0xe0, 0x24, 0x06, 0xea, 0x6b, 0x43, 0x7d, 0x7c, 0x4d, 0x15, 0x98, 0x92, 0x56, 0x60, 0x59, 0x82,
	0x33, 0xf8, 0x5a, 0x81, 0xbd, 0xcd, 0x0c, 0x6e, 0x41, 0x85, 0xb9, 0x06, 0xea, 0xa3, 0x61, 0xd5,
	0xaa, 0x30, 0x17, 0x0f, 0xa0, 0x39, 0x8d, 0x12, 0x4e, 0xbc, 0x39, 0xf3, 0x5d, 0xc2, 0x5c, 0xa3,
	0xd2, 0x47, 0x43, 0xcd, 0xd2, 0x05, 0xf8, 0x52, 0x60, 0xaf, 0x5c, 0xdc, 0x85, 0xdd, 0x15, 0x0b,
	0x7d, 0x66, 0x87, 0x9e, 0xa1, 0xc9, 0xca, 0x3c, 0xc6, 0x77, 0xa0, 0x45, 0x97, 0x3c, 0xb6, 0x49,
	0xce, 0xa8, 0x4a, 0x46, 0x53, 0xa2, 0x67, 0x19, 0xed, 0x2e, 0xb4, 0x7d, 0x3b, 0xe1, 0x24, 0xa6,
	0x09, 0xe5, 0x84, 0xb3, 0x80, 0x1a, 0x35, 0x79, 0x51, 0x53, 0xc0, 0x96, 0x40, 0x3f, 0xb0, 0x80,
	0x62, 0x13, 0xf6, 0xe5, 0x38, 0x1b, 0x3d, 0x77, 0x64, 0xcf, 0x8e, 0x48, 0x1d, 0x97, 0xfa, 0x9a,
	0xb0, 0x1b, 0x38, 0x64, 0x22, 0x06, 0x35, 0xea, 0x7d, 0x34, 0xd4, 0xc7, 0xfb, 0x99, 0x27, 0xce,
	0x91, 0x40, 0x95, 0x1f, 0xf5, 0x40, 0x45, 0x83, 0x73, 0xb8, 0x7a, 0x42, 0xe3, 0x28, 0x4d, 0x16,
	0x8d, 0xb9, 0x0d, 0xad, 0xac, 0x13, 0x71, 0xa2, 0x79, 0xc8, 0x53, 0x93, 0x1a, 0x69, 0xe9, 0x73,
	0x81, 0xe1, 0x43, 0xc0, 0x39, 0x2b, 0xa4, 0xcb, 0x54, 0x8a, 0xf2, 0xac, 0x9d, 0x32, 0xdf, 0xd2,
	0xa5, 0x14, 0x23, 0x16, 0xd0, 0x28, 0x8e, 0x81, 0x0f, 0xa0, 0xe6, 0xd3, 0x05, 0xf5, 0xd3, 0xd6,
	0x2a, 0xc0, 0x06, 0xd4, 0x93, 0xf9, 0x6c, 0x16, 0xc5, 0x5c, 0x36, 0xaa, 0x5a, 0x59, 0x28, 0xdc,
	0x70, 0x6d, 0xe6, 0xaf, 0x88, 0xed, 0xba, 0xd4, 0x25, 0x19, 0x4b, 0xed, 0xa0, 0x23, 0x53, 0xcf,
	0x44, 0xe6, 0x34, 0xe5, 0xbf, 0x00, 0x3d, 0xdd, 0x63, 0xf8, 0x39, 0x4a, 0x8c, 0xaa, 0x7c, 0x24,
	0xb7, 0xb6, 0x18, 0x62, 0xaa, 0xd5, 0x0a, 0xd6, 0x71, 0xc8, 0xe3, 0x95, 0x05, 0x5e, 0x0e, 0x74,
	0x3f, 0x41, 0x7b, 0x23, 0x8d, 0xf7, 0x40, 0x3b, 0xa7, 0x2b, 0x39, 0xb6, 0x66, 0x89, 0x23, 0x1e,
	0x43, 0x6d, 0x61, 0xfb, 0x73, 0xa5, 0x5d, 0x1f, 0xdf, 0x28, 0x5f, 0x92, 0xd7, 0x2b, 0xfb, 0x15,
	0xf5, 0x49, 0xe5, 0x31, 0x1a, 0xfc, 0x46, 0x70, 0x65, 0x2b, 0xa9, 0x68, 0x03, 0x2a, 0xdb, 0x70,
	0x13, 0xf4, 0xe2, 0x5e, 0x94, 0x49, 0x30, 0xf9, 0xbb, 0x95, 0xd7, 0x00, 0x53, 0x1a, 0x47, 0x25,
	0xd9, 0x87, 0xff, 0x9b, 0xc8, 0x14, 0x8f, 0xa0, 0x20, 0xff, 0xf2, 0x34, 0x8b, 0xbb, 0x67, 0xd0,
	0x2a, 0x27, 0xb7, 0x88, 0xbf, 0x5f, 0x16, 0x7f, 0xbd, 0x7c, 0x55, 0x56, 0xfe, 0x8f, 0xf6, 0xf7,
	0x70, 0xb0, 0x8d, 0x72, 0x01, 0xe5, 0x47, 0xfd, 0xef, 0xeb, 0x1e, 0xfa, 0xb1, 0xee, 0xa1, 0x9f,
	0xeb, 0x1e, 0xfa, 0xf6, 0xab, 0x77, 0xe9, 0x04, 0x7d, 0x6c, 0x14, 0x7f, 0x2c, 0x93, 0x1d, 0xf9,
	0x79, 0xf0, 0x27, 0x00, 0x00, 0xff, 0xff, 0xab, 0x18, 0xbc, 0xd4, 0x8c, 0x04, 0x00, 0x00,
}
