// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/pb/server_proto/tss.proto
// DO NOT EDIT!

package server_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import proto13 "github.com/lightpaw/male7/pb/shared_proto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TssChatCallbackProto struct {
	SenderId     int64                 `protobuf:"varint,1,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	TargetId     int64                 `protobuf:"varint,2,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	RoomIdBytes  []byte                `protobuf:"bytes,3,opt,name=room_id_bytes,json=roomIdBytes,proto3" json:"room_id_bytes,omitempty"`
	TargetSender []byte                `protobuf:"bytes,4,opt,name=target_sender,json=targetSender,proto3" json:"target_sender,omitempty"`
	Proto        *proto13.ChatMsgProto `protobuf:"bytes,5,opt,name=proto" json:"proto,omitempty"`
}

func (m *TssChatCallbackProto) Reset()                    { *m = TssChatCallbackProto{} }
func (m *TssChatCallbackProto) String() string            { return proto.CompactTextString(m) }
func (*TssChatCallbackProto) ProtoMessage()               {}
func (*TssChatCallbackProto) Descriptor() ([]byte, []int) { return fileDescriptorTss, []int{0} }

func (m *TssChatCallbackProto) GetSenderId() int64 {
	if m != nil {
		return m.SenderId
	}
	return 0
}

func (m *TssChatCallbackProto) GetTargetId() int64 {
	if m != nil {
		return m.TargetId
	}
	return 0
}

func (m *TssChatCallbackProto) GetRoomIdBytes() []byte {
	if m != nil {
		return m.RoomIdBytes
	}
	return nil
}

func (m *TssChatCallbackProto) GetTargetSender() []byte {
	if m != nil {
		return m.TargetSender
	}
	return nil
}

func (m *TssChatCallbackProto) GetProto() *proto13.ChatMsgProto {
	if m != nil {
		return m.Proto
	}
	return nil
}

func init() {
	proto.RegisterType((*TssChatCallbackProto)(nil), "proto.TssChatCallbackProto")
}
func (m *TssChatCallbackProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TssChatCallbackProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SenderId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTss(dAtA, i, uint64(m.SenderId))
	}
	if m.TargetId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTss(dAtA, i, uint64(m.TargetId))
	}
	if len(m.RoomIdBytes) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTss(dAtA, i, uint64(len(m.RoomIdBytes)))
		i += copy(dAtA[i:], m.RoomIdBytes)
	}
	if len(m.TargetSender) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTss(dAtA, i, uint64(len(m.TargetSender)))
		i += copy(dAtA[i:], m.TargetSender)
	}
	if m.Proto != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTss(dAtA, i, uint64(m.Proto.Size()))
		n1, err := m.Proto.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func encodeFixed64Tss(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Tss(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintTss(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TssChatCallbackProto) Size() (n int) {
	var l int
	_ = l
	if m.SenderId != 0 {
		n += 1 + sovTss(uint64(m.SenderId))
	}
	if m.TargetId != 0 {
		n += 1 + sovTss(uint64(m.TargetId))
	}
	l = len(m.RoomIdBytes)
	if l > 0 {
		n += 1 + l + sovTss(uint64(l))
	}
	l = len(m.TargetSender)
	if l > 0 {
		n += 1 + l + sovTss(uint64(l))
	}
	if m.Proto != nil {
		l = m.Proto.Size()
		n += 1 + l + sovTss(uint64(l))
	}
	return n
}

func sovTss(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTss(x uint64) (n int) {
	return sovTss(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TssChatCallbackProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TssChatCallbackProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TssChatCallbackProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderId", wireType)
			}
			m.SenderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetId", wireType)
			}
			m.TargetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomIdBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTss
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomIdBytes = append(m.RoomIdBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.RoomIdBytes == nil {
				m.RoomIdBytes = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetSender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTss
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetSender = append(m.TargetSender[:0], dAtA[iNdEx:postIndex]...)
			if m.TargetSender == nil {
				m.TargetSender = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proto", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proto == nil {
				m.Proto = &proto13.ChatMsgProto{}
			}
			if err := m.Proto.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTss(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTss
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTss
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTss
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTss
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTss
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTss(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTss = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTss   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/pb/server_proto/tss.proto", fileDescriptorTss)
}

var fileDescriptorTss = []byte{
	// 265 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x4e, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0xcf, 0xc9, 0x4c, 0xcf, 0x28, 0x29, 0x48, 0x2c, 0xd7,
	0xcf, 0x4d, 0xcc, 0x49, 0x35, 0xd7, 0x2f, 0x48, 0xd2, 0x2f, 0x4e, 0x2d, 0x2a, 0x4b, 0x2d, 0x8a,
	0x2f, 0x28, 0xca, 0x2f, 0xc9, 0xd7, 0x2f, 0x29, 0x2e, 0xd6, 0x03, 0xb3, 0x84, 0x58, 0xc1, 0x94,
	0x94, 0x09, 0x7e, 0xbd, 0x19, 0x89, 0x45, 0xa9, 0x29, 0x50, 0xbd, 0xc9, 0x19, 0x89, 0x25, 0x10,
	0xcd, 0x4a, 0x47, 0x18, 0xb9, 0x44, 0x42, 0x8a, 0x8b, 0x9d, 0x33, 0x12, 0x4b, 0x9c, 0x13, 0x73,
	0x72, 0x92, 0x12, 0x93, 0xb3, 0x03, 0xc0, 0xa6, 0x4a, 0x73, 0x71, 0x16, 0xa7, 0xe6, 0xa5, 0xa4,
	0x16, 0xc5, 0x67, 0xa6, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0x30, 0x07, 0x71, 0x40, 0x04, 0x3c, 0x53,
	0x40, 0x92, 0x25, 0x89, 0x45, 0xe9, 0xa9, 0x25, 0x20, 0x49, 0x26, 0x88, 0x24, 0x44, 0xc0, 0x33,
	0x45, 0x48, 0x89, 0x8b, 0xb7, 0x28, 0x3f, 0x3f, 0x37, 0x3e, 0x33, 0x25, 0x3e, 0xa9, 0xb2, 0x24,
	0xb5, 0x58, 0x82, 0x59, 0x81, 0x51, 0x83, 0x27, 0x88, 0x1b, 0x24, 0xe8, 0x99, 0xe2, 0x04, 0x12,
	0x12, 0x52, 0xe6, 0xe2, 0x85, 0x1a, 0x00, 0x31, 0x53, 0x82, 0x05, 0xac, 0x86, 0x07, 0x22, 0x18,
	0x0c, 0x16, 0x13, 0xd2, 0xe4, 0x82, 0x78, 0x4d, 0x82, 0x55, 0x81, 0x51, 0x83, 0xdb, 0x48, 0x18,
	0xe2, 0x64, 0x3d, 0x90, 0x5b, 0x7d, 0x8b, 0xd3, 0xc1, 0xce, 0x0c, 0x82, 0xa8, 0x70, 0x52, 0x38,
	0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x67, 0x3c, 0x96, 0x63,
	0xf0, 0x60, 0x8c, 0xe2, 0x41, 0x0e, 0xaf, 0x24, 0x36, 0x30, 0x65, 0x0c, 0x08, 0x00, 0x00, 0xff,
	0xff, 0x02, 0x8a, 0x3e, 0xee, 0x63, 0x01, 0x00, 0x00,
}
