// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/pb/server_proto/captain_soul.proto
// DO NOT EDIT!

package server_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type HeroCaptainSoulServerProto struct {
	AllUnlockCaptainSouls  []*CaptainSoulServerProto `protobuf:"bytes,4,rep,name=all_unlock_captain_souls,json=allUnlockCaptainSouls" json:"all_unlock_captain_souls,omitempty"`
	AllCollectPrizeFetters []uint64                  `protobuf:"varint,2,rep,packed,name=all_collect_prize_fetters,json=allCollectPrizeFetters" json:"all_collect_prize_fetters,omitempty"`
	AllActivatedFetters    []uint64                  `protobuf:"varint,3,rep,packed,name=all_activated_fetters,json=allActivatedFetters" json:"all_activated_fetters,omitempty"`
}

func (m *HeroCaptainSoulServerProto) Reset()         { *m = HeroCaptainSoulServerProto{} }
func (m *HeroCaptainSoulServerProto) String() string { return proto.CompactTextString(m) }
func (*HeroCaptainSoulServerProto) ProtoMessage()    {}
func (*HeroCaptainSoulServerProto) Descriptor() ([]byte, []int) {
	return fileDescriptorCaptainSoul, []int{0}
}

func (m *HeroCaptainSoulServerProto) GetAllUnlockCaptainSouls() []*CaptainSoulServerProto {
	if m != nil {
		return m.AllUnlockCaptainSouls
	}
	return nil
}

func (m *HeroCaptainSoulServerProto) GetAllCollectPrizeFetters() []uint64 {
	if m != nil {
		return m.AllCollectPrizeFetters
	}
	return nil
}

func (m *HeroCaptainSoulServerProto) GetAllActivatedFetters() []uint64 {
	if m != nil {
		return m.AllActivatedFetters
	}
	return nil
}

type CaptainSoulServerProto struct {
	Id             uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Level          uint64 `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	Exp            uint64 `protobuf:"varint,3,opt,name=exp,proto3" json:"exp,omitempty"`
	UnlockedSpells []bool `protobuf:"varint,4,rep,packed,name=unlocked_spells,json=unlockedSpells" json:"unlocked_spells,omitempty"`
	Mark           bool   `protobuf:"varint,5,opt,name=mark,proto3" json:"mark,omitempty"`
}

func (m *CaptainSoulServerProto) Reset()         { *m = CaptainSoulServerProto{} }
func (m *CaptainSoulServerProto) String() string { return proto.CompactTextString(m) }
func (*CaptainSoulServerProto) ProtoMessage()    {}
func (*CaptainSoulServerProto) Descriptor() ([]byte, []int) {
	return fileDescriptorCaptainSoul, []int{1}
}

func (m *CaptainSoulServerProto) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CaptainSoulServerProto) GetLevel() uint64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *CaptainSoulServerProto) GetExp() uint64 {
	if m != nil {
		return m.Exp
	}
	return 0
}

func (m *CaptainSoulServerProto) GetUnlockedSpells() []bool {
	if m != nil {
		return m.UnlockedSpells
	}
	return nil
}

func (m *CaptainSoulServerProto) GetMark() bool {
	if m != nil {
		return m.Mark
	}
	return false
}

func init() {
	proto.RegisterType((*HeroCaptainSoulServerProto)(nil), "proto.HeroCaptainSoulServerProto")
	proto.RegisterType((*CaptainSoulServerProto)(nil), "proto.CaptainSoulServerProto")
}
func (m *HeroCaptainSoulServerProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeroCaptainSoulServerProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AllCollectPrizeFetters) > 0 {
		dAtA2 := make([]byte, len(m.AllCollectPrizeFetters)*10)
		var j1 int
		for _, num := range m.AllCollectPrizeFetters {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.AllActivatedFetters) > 0 {
		dAtA4 := make([]byte, len(m.AllActivatedFetters)*10)
		var j3 int
		for _, num := range m.AllActivatedFetters {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	if len(m.AllUnlockCaptainSouls) > 0 {
		for _, msg := range m.AllUnlockCaptainSouls {
			dAtA[i] = 0x22
			i++
			i = encodeVarintCaptainSoul(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CaptainSoulServerProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CaptainSoulServerProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(m.Id))
	}
	if m.Level != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(m.Level))
	}
	if m.Exp != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(m.Exp))
	}
	if len(m.UnlockedSpells) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCaptainSoul(dAtA, i, uint64(len(m.UnlockedSpells)))
		for _, b := range m.UnlockedSpells {
			if b {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i++
		}
	}
	if m.Mark {
		dAtA[i] = 0x28
		i++
		if m.Mark {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeFixed64CaptainSoul(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32CaptainSoul(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintCaptainSoul(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *HeroCaptainSoulServerProto) Size() (n int) {
	var l int
	_ = l
	if len(m.AllCollectPrizeFetters) > 0 {
		l = 0
		for _, e := range m.AllCollectPrizeFetters {
			l += sovCaptainSoul(uint64(e))
		}
		n += 1 + sovCaptainSoul(uint64(l)) + l
	}
	if len(m.AllActivatedFetters) > 0 {
		l = 0
		for _, e := range m.AllActivatedFetters {
			l += sovCaptainSoul(uint64(e))
		}
		n += 1 + sovCaptainSoul(uint64(l)) + l
	}
	if len(m.AllUnlockCaptainSouls) > 0 {
		for _, e := range m.AllUnlockCaptainSouls {
			l = e.Size()
			n += 1 + l + sovCaptainSoul(uint64(l))
		}
	}
	return n
}

func (m *CaptainSoulServerProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCaptainSoul(uint64(m.Id))
	}
	if m.Level != 0 {
		n += 1 + sovCaptainSoul(uint64(m.Level))
	}
	if m.Exp != 0 {
		n += 1 + sovCaptainSoul(uint64(m.Exp))
	}
	if len(m.UnlockedSpells) > 0 {
		n += 1 + sovCaptainSoul(uint64(len(m.UnlockedSpells))) + len(m.UnlockedSpells)*1
	}
	if m.Mark {
		n += 2
	}
	return n
}

func sovCaptainSoul(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCaptainSoul(x uint64) (n int) {
	return sovCaptainSoul(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HeroCaptainSoulServerProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCaptainSoul
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroCaptainSoulServerProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroCaptainSoulServerProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCaptainSoul
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AllCollectPrizeFetters = append(m.AllCollectPrizeFetters, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCaptainSoul
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCaptainSoul
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCaptainSoul
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AllCollectPrizeFetters = append(m.AllCollectPrizeFetters, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AllCollectPrizeFetters", wireType)
			}
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCaptainSoul
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AllActivatedFetters = append(m.AllActivatedFetters, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCaptainSoul
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCaptainSoul
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCaptainSoul
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AllActivatedFetters = append(m.AllActivatedFetters, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AllActivatedFetters", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllUnlockCaptainSouls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCaptainSoul
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllUnlockCaptainSouls = append(m.AllUnlockCaptainSouls, &CaptainSoulServerProto{})
			if err := m.AllUnlockCaptainSouls[len(m.AllUnlockCaptainSouls)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCaptainSoul(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCaptainSoul
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CaptainSoulServerProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCaptainSoul
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CaptainSoulServerProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CaptainSoulServerProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			m.Exp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exp |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCaptainSoul
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UnlockedSpells = append(m.UnlockedSpells, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCaptainSoul
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCaptainSoul
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCaptainSoul
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UnlockedSpells = append(m.UnlockedSpells, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockedSpells", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mark", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Mark = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCaptainSoul(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCaptainSoul
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCaptainSoul(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCaptainSoul
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCaptainSoul
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCaptainSoul
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCaptainSoul
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCaptainSoul(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCaptainSoul = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCaptainSoul   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/pb/server_proto/captain_soul.proto", fileDescriptorCaptainSoul)
}

var fileDescriptorCaptainSoul = []byte{
	// 333 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xc1, 0x4a, 0xf3, 0x40,
	0x14, 0x85, 0xff, 0x49, 0xd2, 0x9f, 0x32, 0x4a, 0x95, 0xa8, 0x25, 0x0a, 0x86, 0xd0, 0x8d, 0x59,
	0x35, 0x50, 0x17, 0x22, 0xb8, 0xd1, 0x82, 0x74, 0x59, 0x52, 0x74, 0xe1, 0x66, 0x98, 0x26, 0xd7,
	0x76, 0xe8, 0x6d, 0x67, 0x98, 0x4c, 0xaa, 0xf8, 0x0e, 0xee, 0x7d, 0x24, 0x97, 0x3e, 0x82, 0xb4,
	0x2f, 0x22, 0x99, 0x58, 0xe9, 0x42, 0x57, 0xf7, 0xce, 0x39, 0xe7, 0x63, 0xce, 0x30, 0xf4, 0x6a,
	0x22, 0xcc, 0xb4, 0x1c, 0x77, 0x33, 0x39, 0x4f, 0x50, 0x4c, 0xa6, 0x46, 0xf1, 0xa7, 0x64, 0xce,
	0x11, 0x2e, 0x12, 0x35, 0x4e, 0x0a, 0xd0, 0x4b, 0xd0, 0x4c, 0x69, 0x69, 0x64, 0x92, 0x71, 0x65,
	0xb8, 0x58, 0xb0, 0x42, 0x96, 0xd8, 0xb5, 0x92, 0xdf, 0xb0, 0xa3, 0xb3, 0x26, 0xf4, 0x64, 0x00,
	0x5a, 0xf6, 0xeb, 0xc4, 0x48, 0x96, 0x38, 0xb2, 0xe4, 0xd0, 0xa6, 0x2e, 0xe9, 0x31, 0x47, 0x64,
	0x99, 0x44, 0x84, 0xcc, 0x30, 0xa5, 0xc5, 0x0b, 0xb0, 0x47, 0x30, 0x06, 0x74, 0x11, 0x38, 0x91,
	0x1b, 0x7b, 0x69, 0x9b, 0x23, 0xf6, 0x6b, 0x7f, 0x58, 0xd9, 0xb7, 0xb5, 0xeb, 0xf7, 0xe8, 0x51,
	0x85, 0xf2, 0xcc, 0x88, 0x25, 0x37, 0x90, 0xff, 0x60, 0xae, 0xc5, 0x0e, 0x38, 0xe2, 0xf5, 0xc6,
	0xdb, 0x30, 0xf7, 0x34, 0xa8, 0x98, 0x72, 0x81, 0x32, 0x9b, 0xb1, 0xed, 0xd6, 0x45, 0xe0, 0x45,
	0x6e, 0xbc, 0xd3, 0x3b, 0xad, 0xeb, 0x77, 0x7f, 0xef, 0x9b, 0x56, 0x57, 0xde, 0x59, 0x7a, 0x2b,
	0x50, 0x74, 0x5e, 0x09, 0x6d, 0xff, 0xf1, 0xc2, 0x16, 0x75, 0x44, 0x1e, 0x90, 0x88, 0xc4, 0x5e,
	0xea, 0x88, 0xdc, 0x3f, 0xa4, 0x0d, 0x84, 0x25, 0x60, 0xe0, 0x58, 0xa9, 0x3e, 0xf8, 0xfb, 0xd4,
	0x85, 0x67, 0x15, 0xb8, 0x56, 0xab, 0x56, 0xff, 0x8c, 0xee, 0xd5, 0x35, 0x21, 0x67, 0x85, 0x02,
	0xfc, 0x6e, 0xd8, 0x4c, 0x5b, 0x1b, 0x79, 0x64, 0x55, 0xdf, 0xa7, 0xde, 0x9c, 0xeb, 0x59, 0xd0,
	0x88, 0x48, 0xdc, 0x4c, 0xed, 0x7e, 0x13, 0xbd, 0xaf, 0x42, 0xf2, 0xb1, 0x0a, 0xc9, 0xe7, 0x2a,
	0x24, 0x6f, 0xeb, 0xf0, 0xdf, 0x80, 0x3c, 0xec, 0x6e, 0xff, 0xd8, 0xf8, 0xbf, 0x1d, 0xe7, 0x5f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x90, 0x41, 0x1e, 0x4f, 0xe5, 0x01, 0x00, 0x00,
}
