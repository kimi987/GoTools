// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/pb/server_proto/snapshot.proto
// DO NOT EDIT!

package server_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type HeroBasicSnapshotServerProto struct {
	Id            int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Head          string `protobuf:"bytes,3,opt,name=head,proto3" json:"head,omitempty"`
	Level         uint64 `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
	Male          bool   `protobuf:"varint,5,opt,name=male,proto3" json:"male,omitempty"`
	BaseRegion    int64  `protobuf:"varint,21,opt,name=base_region,json=baseRegion,proto3" json:"base_region,omitempty"`
	BaseLevel     uint64 `protobuf:"varint,22,opt,name=base_level,json=baseLevel,proto3" json:"base_level,omitempty"`
	BaseX         int32  `protobuf:"varint,23,opt,name=base_x,json=baseX,proto3" json:"base_x,omitempty"`
	BaseY         int32  `protobuf:"varint,24,opt,name=base_y,json=baseY,proto3" json:"base_y,omitempty"`
	FightAmount   uint64 `protobuf:"varint,25,opt,name=fight_amount,json=fightAmount,proto3" json:"fight_amount,omitempty"`
	Prosperity    uint64 `protobuf:"varint,26,opt,name=prosperity,proto3" json:"prosperity,omitempty"`
	GuildId       int64  `protobuf:"varint,31,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	GuildName     string `protobuf:"bytes,32,opt,name=guild_name,json=guildName,proto3" json:"guild_name,omitempty"`
	GuildFlagName string `protobuf:"bytes,33,opt,name=guild_flag_name,json=guildFlagName,proto3" json:"guild_flag_name,omitempty"`
}

func (m *HeroBasicSnapshotServerProto) Reset()         { *m = HeroBasicSnapshotServerProto{} }
func (m *HeroBasicSnapshotServerProto) String() string { return proto.CompactTextString(m) }
func (*HeroBasicSnapshotServerProto) ProtoMessage()    {}
func (*HeroBasicSnapshotServerProto) Descriptor() ([]byte, []int) {
	return fileDescriptorSnapshot, []int{0}
}

func (m *HeroBasicSnapshotServerProto) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *HeroBasicSnapshotServerProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HeroBasicSnapshotServerProto) GetHead() string {
	if m != nil {
		return m.Head
	}
	return ""
}

func (m *HeroBasicSnapshotServerProto) GetLevel() uint64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *HeroBasicSnapshotServerProto) GetMale() bool {
	if m != nil {
		return m.Male
	}
	return false
}

func (m *HeroBasicSnapshotServerProto) GetBaseRegion() int64 {
	if m != nil {
		return m.BaseRegion
	}
	return 0
}

func (m *HeroBasicSnapshotServerProto) GetBaseLevel() uint64 {
	if m != nil {
		return m.BaseLevel
	}
	return 0
}

func (m *HeroBasicSnapshotServerProto) GetBaseX() int32 {
	if m != nil {
		return m.BaseX
	}
	return 0
}

func (m *HeroBasicSnapshotServerProto) GetBaseY() int32 {
	if m != nil {
		return m.BaseY
	}
	return 0
}

func (m *HeroBasicSnapshotServerProto) GetFightAmount() uint64 {
	if m != nil {
		return m.FightAmount
	}
	return 0
}

func (m *HeroBasicSnapshotServerProto) GetProsperity() uint64 {
	if m != nil {
		return m.Prosperity
	}
	return 0
}

func (m *HeroBasicSnapshotServerProto) GetGuildId() int64 {
	if m != nil {
		return m.GuildId
	}
	return 0
}

func (m *HeroBasicSnapshotServerProto) GetGuildName() string {
	if m != nil {
		return m.GuildName
	}
	return ""
}

func (m *HeroBasicSnapshotServerProto) GetGuildFlagName() string {
	if m != nil {
		return m.GuildFlagName
	}
	return ""
}

func init() {
	proto.RegisterType((*HeroBasicSnapshotServerProto)(nil), "proto.HeroBasicSnapshotServerProto")
}
func (m *HeroBasicSnapshotServerProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeroBasicSnapshotServerProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSnapshot(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSnapshot(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Head) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSnapshot(dAtA, i, uint64(len(m.Head)))
		i += copy(dAtA[i:], m.Head)
	}
	if m.Level != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSnapshot(dAtA, i, uint64(m.Level))
	}
	if m.Male {
		dAtA[i] = 0x28
		i++
		if m.Male {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BaseRegion != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSnapshot(dAtA, i, uint64(m.BaseRegion))
	}
	if m.BaseLevel != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSnapshot(dAtA, i, uint64(m.BaseLevel))
	}
	if m.BaseX != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSnapshot(dAtA, i, uint64(m.BaseX))
	}
	if m.BaseY != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSnapshot(dAtA, i, uint64(m.BaseY))
	}
	if m.FightAmount != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSnapshot(dAtA, i, uint64(m.FightAmount))
	}
	if m.Prosperity != 0 {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSnapshot(dAtA, i, uint64(m.Prosperity))
	}
	if m.GuildId != 0 {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintSnapshot(dAtA, i, uint64(m.GuildId))
	}
	if len(m.GuildName) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintSnapshot(dAtA, i, uint64(len(m.GuildName)))
		i += copy(dAtA[i:], m.GuildName)
	}
	if len(m.GuildFlagName) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintSnapshot(dAtA, i, uint64(len(m.GuildFlagName)))
		i += copy(dAtA[i:], m.GuildFlagName)
	}
	return i, nil
}

func encodeFixed64Snapshot(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Snapshot(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintSnapshot(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *HeroBasicSnapshotServerProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSnapshot(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSnapshot(uint64(l))
	}
	l = len(m.Head)
	if l > 0 {
		n += 1 + l + sovSnapshot(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovSnapshot(uint64(m.Level))
	}
	if m.Male {
		n += 2
	}
	if m.BaseRegion != 0 {
		n += 2 + sovSnapshot(uint64(m.BaseRegion))
	}
	if m.BaseLevel != 0 {
		n += 2 + sovSnapshot(uint64(m.BaseLevel))
	}
	if m.BaseX != 0 {
		n += 2 + sovSnapshot(uint64(m.BaseX))
	}
	if m.BaseY != 0 {
		n += 2 + sovSnapshot(uint64(m.BaseY))
	}
	if m.FightAmount != 0 {
		n += 2 + sovSnapshot(uint64(m.FightAmount))
	}
	if m.Prosperity != 0 {
		n += 2 + sovSnapshot(uint64(m.Prosperity))
	}
	if m.GuildId != 0 {
		n += 2 + sovSnapshot(uint64(m.GuildId))
	}
	l = len(m.GuildName)
	if l > 0 {
		n += 2 + l + sovSnapshot(uint64(l))
	}
	l = len(m.GuildFlagName)
	if l > 0 {
		n += 2 + l + sovSnapshot(uint64(l))
	}
	return n
}

func sovSnapshot(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSnapshot(x uint64) (n int) {
	return sovSnapshot(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HeroBasicSnapshotServerProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnapshot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroBasicSnapshotServerProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroBasicSnapshotServerProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnapshot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnapshot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Head = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Male", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Male = bool(v != 0)
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseRegion", wireType)
			}
			m.BaseRegion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaseRegion |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseLevel", wireType)
			}
			m.BaseLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaseLevel |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseX", wireType)
			}
			m.BaseX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaseX |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseY", wireType)
			}
			m.BaseY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaseY |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FightAmount", wireType)
			}
			m.FightAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FightAmount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prosperity", wireType)
			}
			m.Prosperity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Prosperity |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildId", wireType)
			}
			m.GuildId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuildId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnapshot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildFlagName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSnapshot
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildFlagName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnapshot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnapshot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSnapshot(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSnapshot
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSnapshot
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSnapshot
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSnapshot
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSnapshot(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSnapshot = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSnapshot   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/pb/server_proto/snapshot.proto", fileDescriptorSnapshot)
}

var fileDescriptorSnapshot = []byte{
	// 361 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0xb1, 0x4e, 0xe3, 0x40,
	0x10, 0x86, 0x6f, 0x93, 0x38, 0x97, 0x4c, 0x72, 0x77, 0xd2, 0xea, 0x02, 0x1b, 0x04, 0x8e, 0x43,
	0x81, 0x5c, 0xc5, 0x05, 0x05, 0xb4, 0xa4, 0x40, 0x41, 0x42, 0x08, 0x39, 0x0d, 0xd0, 0x58, 0xeb,
	0x78, 0x63, 0xaf, 0x64, 0x7b, 0xad, 0xb5, 0x13, 0xc8, 0x73, 0xd0, 0xf0, 0x48, 0x94, 0x3c, 0x02,
	0x0a, 0x2f, 0x82, 0x76, 0x8c, 0x20, 0xd5, 0xcc, 0xff, 0xcd, 0xef, 0xf1, 0xe8, 0x5f, 0x38, 0x8f,
	0x65, 0x95, 0xac, 0xc2, 0xc9, 0x42, 0x65, 0x5e, 0x2a, 0xe3, 0xa4, 0x2a, 0xf8, 0xa3, 0x97, 0xf1,
	0x54, 0x9c, 0x79, 0x45, 0xe8, 0x95, 0x42, 0xaf, 0x85, 0x0e, 0x0a, 0xad, 0x2a, 0xe5, 0x95, 0x39,
	0x2f, 0xca, 0x44, 0x55, 0x13, 0x94, 0xd4, 0xc2, 0x72, 0xfc, 0xdc, 0x84, 0xc3, 0x99, 0xd0, 0x6a,
	0xca, 0x4b, 0xb9, 0x98, 0x7f, 0x59, 0xe6, 0xf8, 0xdd, 0x2d, 0xfa, 0xfe, 0x42, 0x43, 0x46, 0x8c,
	0x38, 0xc4, 0x6d, 0xfa, 0x0d, 0x19, 0x51, 0x0a, 0xad, 0x9c, 0x67, 0x82, 0x35, 0x1c, 0xe2, 0x76,
	0x7d, 0xec, 0x0d, 0x4b, 0x04, 0x8f, 0x58, 0xb3, 0x66, 0xa6, 0xa7, 0xff, 0xc1, 0x4a, 0xc5, 0x5a,
	0xa4, 0xac, 0xe5, 0x10, 0xb7, 0xe5, 0xd7, 0xc2, 0x38, 0xcd, 0x75, 0xcc, 0x72, 0x88, 0xdb, 0xf1,
	0xb1, 0xa7, 0x23, 0xe8, 0x85, 0xbc, 0x14, 0x81, 0x16, 0xb1, 0x54, 0x39, 0x1b, 0xe0, 0xaf, 0xc0,
	0x20, 0x1f, 0x09, 0x3d, 0x02, 0x54, 0x41, 0xbd, 0x6f, 0x0f, 0xf7, 0x75, 0x0d, 0xb9, 0xc6, 0x9d,
	0x03, 0x68, 0xe3, 0xf8, 0x89, 0xed, 0x3b, 0xc4, 0xb5, 0x7c, 0xcb, 0xa8, 0xbb, 0x6f, 0xbc, 0x61,
	0xec, 0x07, 0xdf, 0xd3, 0x31, 0xf4, 0x97, 0x26, 0xa8, 0x80, 0x67, 0x6a, 0x95, 0x57, 0x6c, 0x88,
	0xeb, 0x7a, 0xc8, 0x2e, 0x10, 0x51, 0x1b, 0xa0, 0xd0, 0xaa, 0x2c, 0x84, 0x96, 0xd5, 0x86, 0x1d,
	0xa0, 0x61, 0x87, 0xd0, 0x21, 0x74, 0xe2, 0x95, 0x4c, 0xa3, 0x40, 0x46, 0x6c, 0x84, 0xd7, 0xfe,
	0x46, 0x7d, 0x15, 0x99, 0x53, 0xeb, 0x11, 0x66, 0xe4, 0x60, 0x1e, 0x5d, 0x24, 0x37, 0x26, 0xa8,
	0x13, 0xf8, 0x57, 0x8f, 0x97, 0x29, 0x8f, 0x6b, 0xcf, 0x18, 0x3d, 0x7f, 0x10, 0x5f, 0xa6, 0x3c,
	0x36, 0xbe, 0xa9, 0xf3, 0xba, 0xb5, 0xc9, 0xdb, 0xd6, 0x26, 0xef, 0x5b, 0x9b, 0xbc, 0x7c, 0xd8,
	0xbf, 0x66, 0xe4, 0xa1, 0xbf, 0xfb, 0x9a, 0x61, 0x1b, 0xcb, 0xe9, 0x67, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x0b, 0x34, 0xb6, 0x12, 0x01, 0x02, 0x00, 0x00,
}
