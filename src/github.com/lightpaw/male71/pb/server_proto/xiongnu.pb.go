// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/pb/server_proto/xiongnu.proto
// DO NOT EDIT!

package server_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type AllXiongNuServerProto struct {
	Datas              []*XiongNuServerProto `protobuf:"bytes,1,rep,name=datas" json:"datas,omitempty"`
	TodayJoinIds       []int64               `protobuf:"varint,2,rep,packed,name=today_join_ids,json=todayJoinIds" json:"today_join_ids,omitempty"`
	LastResetDailyTime int64                 `protobuf:"varint,3,opt,name=last_reset_daily_time,json=lastResetDailyTime,proto3" json:"last_reset_daily_time,omitempty"`
}

func (m *AllXiongNuServerProto) Reset()                    { *m = AllXiongNuServerProto{} }
func (m *AllXiongNuServerProto) String() string            { return proto.CompactTextString(m) }
func (*AllXiongNuServerProto) ProtoMessage()               {}
func (*AllXiongNuServerProto) Descriptor() ([]byte, []int) { return fileDescriptorXiongnu, []int{0} }

func (m *AllXiongNuServerProto) GetDatas() []*XiongNuServerProto {
	if m != nil {
		return m.Datas
	}
	return nil
}

func (m *AllXiongNuServerProto) GetTodayJoinIds() []int64 {
	if m != nil {
		return m.TodayJoinIds
	}
	return nil
}

func (m *AllXiongNuServerProto) GetLastResetDailyTime() int64 {
	if m != nil {
		return m.LastResetDailyTime
	}
	return 0
}

type XiongNuServerProto struct {
	Level                  uint64   `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	GuildId                int64    `protobuf:"varint,2,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	BaseId                 int64    `protobuf:"varint,3,opt,name=base_id,json=baseId,proto3" json:"base_id,omitempty"`
	BaseX                  int32    `protobuf:"varint,13,opt,name=base_x,json=baseX,proto3" json:"base_x,omitempty"`
	BaseY                  int32    `protobuf:"varint,14,opt,name=base_y,json=baseY,proto3" json:"base_y,omitempty"`
	StartTime              int64    `protobuf:"varint,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	WipeOutMonsterCount    uint64   `protobuf:"varint,5,opt,name=wipe_out_monster_count,json=wipeOutMonsterCount,proto3" json:"wipe_out_monster_count,omitempty"`
	Morale                 uint64   `protobuf:"varint,6,opt,name=morale,proto3" json:"morale,omitempty"`
	GivePrizeMembers       []int64  `protobuf:"varint,7,rep,packed,name=give_prize_members,json=givePrizeMembers" json:"give_prize_members,omitempty"`
	Defenders              []int64  `protobuf:"varint,8,rep,packed,name=defenders" json:"defenders,omitempty"`
	Wave                   uint64   `protobuf:"varint,10,opt,name=wave,proto3" json:"wave,omitempty"`
	AddMonsterCount        uint64   `protobuf:"varint,11,opt,name=add_monster_count,json=addMonsterCount,proto3" json:"add_monster_count,omitempty"`
	NextRefreshMonsterTime int64    `protobuf:"varint,12,opt,name=next_refresh_monster_time,json=nextRefreshMonsterTime,proto3" json:"next_refresh_monster_time,omitempty"`
	AccumReduceMorale      uint64   `protobuf:"varint,15,opt,name=accum_reduce_morale,json=accumReduceMorale,proto3" json:"accum_reduce_morale,omitempty"`
	Defeated               bool     `protobuf:"varint,16,opt,name=defeated,proto3" json:"defeated,omitempty"`
	Resist                 bool     `protobuf:"varint,9,opt,name=resist,proto3" json:"resist,omitempty"`
	HeroId                 []int64  `protobuf:"varint,17,rep,packed,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	HeroKillSoldier        []uint64 `protobuf:"varint,18,rep,packed,name=hero_kill_soldier,json=heroKillSoldier" json:"hero_kill_soldier,omitempty"`
	HeroBeenKillSoldier    []uint64 `protobuf:"varint,19,rep,packed,name=hero_been_kill_soldier,json=heroBeenKillSoldier" json:"hero_been_kill_soldier,omitempty"`
}

func (m *XiongNuServerProto) Reset()                    { *m = XiongNuServerProto{} }
func (m *XiongNuServerProto) String() string            { return proto.CompactTextString(m) }
func (*XiongNuServerProto) ProtoMessage()               {}
func (*XiongNuServerProto) Descriptor() ([]byte, []int) { return fileDescriptorXiongnu, []int{1} }

func (m *XiongNuServerProto) GetLevel() uint64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *XiongNuServerProto) GetGuildId() int64 {
	if m != nil {
		return m.GuildId
	}
	return 0
}

func (m *XiongNuServerProto) GetBaseId() int64 {
	if m != nil {
		return m.BaseId
	}
	return 0
}

func (m *XiongNuServerProto) GetBaseX() int32 {
	if m != nil {
		return m.BaseX
	}
	return 0
}

func (m *XiongNuServerProto) GetBaseY() int32 {
	if m != nil {
		return m.BaseY
	}
	return 0
}

func (m *XiongNuServerProto) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *XiongNuServerProto) GetWipeOutMonsterCount() uint64 {
	if m != nil {
		return m.WipeOutMonsterCount
	}
	return 0
}

func (m *XiongNuServerProto) GetMorale() uint64 {
	if m != nil {
		return m.Morale
	}
	return 0
}

func (m *XiongNuServerProto) GetGivePrizeMembers() []int64 {
	if m != nil {
		return m.GivePrizeMembers
	}
	return nil
}

func (m *XiongNuServerProto) GetDefenders() []int64 {
	if m != nil {
		return m.Defenders
	}
	return nil
}

func (m *XiongNuServerProto) GetWave() uint64 {
	if m != nil {
		return m.Wave
	}
	return 0
}

func (m *XiongNuServerProto) GetAddMonsterCount() uint64 {
	if m != nil {
		return m.AddMonsterCount
	}
	return 0
}

func (m *XiongNuServerProto) GetNextRefreshMonsterTime() int64 {
	if m != nil {
		return m.NextRefreshMonsterTime
	}
	return 0
}

func (m *XiongNuServerProto) GetAccumReduceMorale() uint64 {
	if m != nil {
		return m.AccumReduceMorale
	}
	return 0
}

func (m *XiongNuServerProto) GetDefeated() bool {
	if m != nil {
		return m.Defeated
	}
	return false
}

func (m *XiongNuServerProto) GetResist() bool {
	if m != nil {
		return m.Resist
	}
	return false
}

func (m *XiongNuServerProto) GetHeroId() []int64 {
	if m != nil {
		return m.HeroId
	}
	return nil
}

func (m *XiongNuServerProto) GetHeroKillSoldier() []uint64 {
	if m != nil {
		return m.HeroKillSoldier
	}
	return nil
}

func (m *XiongNuServerProto) GetHeroBeenKillSoldier() []uint64 {
	if m != nil {
		return m.HeroBeenKillSoldier
	}
	return nil
}

func init() {
	proto.RegisterType((*AllXiongNuServerProto)(nil), "proto.AllXiongNuServerProto")
	proto.RegisterType((*XiongNuServerProto)(nil), "proto.XiongNuServerProto")
}
func (m *AllXiongNuServerProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllXiongNuServerProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, msg := range m.Datas {
			dAtA[i] = 0xa
			i++
			i = encodeVarintXiongnu(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.TodayJoinIds) > 0 {
		dAtA2 := make([]byte, len(m.TodayJoinIds)*10)
		var j1 int
		for _, num1 := range m.TodayJoinIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if m.LastResetDailyTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(m.LastResetDailyTime))
	}
	return i, nil
}

func (m *XiongNuServerProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XiongNuServerProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Level != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(m.Level))
	}
	if m.GuildId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(m.GuildId))
	}
	if m.BaseId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(m.BaseId))
	}
	if m.StartTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(m.StartTime))
	}
	if m.WipeOutMonsterCount != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(m.WipeOutMonsterCount))
	}
	if m.Morale != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(m.Morale))
	}
	if len(m.GivePrizeMembers) > 0 {
		dAtA4 := make([]byte, len(m.GivePrizeMembers)*10)
		var j3 int
		for _, num1 := range m.GivePrizeMembers {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x3a
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	if len(m.Defenders) > 0 {
		dAtA6 := make([]byte, len(m.Defenders)*10)
		var j5 int
		for _, num1 := range m.Defenders {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		dAtA[i] = 0x42
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(j5))
		i += copy(dAtA[i:], dAtA6[:j5])
	}
	if m.Resist {
		dAtA[i] = 0x48
		i++
		if m.Resist {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Wave != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(m.Wave))
	}
	if m.AddMonsterCount != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(m.AddMonsterCount))
	}
	if m.NextRefreshMonsterTime != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(m.NextRefreshMonsterTime))
	}
	if m.BaseX != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(m.BaseX))
	}
	if m.BaseY != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(m.BaseY))
	}
	if m.AccumReduceMorale != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(m.AccumReduceMorale))
	}
	if m.Defeated {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		if m.Defeated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.HeroId) > 0 {
		dAtA8 := make([]byte, len(m.HeroId)*10)
		var j7 int
		for _, num1 := range m.HeroId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(j7))
		i += copy(dAtA[i:], dAtA8[:j7])
	}
	if len(m.HeroKillSoldier) > 0 {
		dAtA10 := make([]byte, len(m.HeroKillSoldier)*10)
		var j9 int
		for _, num := range m.HeroKillSoldier {
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(j9))
		i += copy(dAtA[i:], dAtA10[:j9])
	}
	if len(m.HeroBeenKillSoldier) > 0 {
		dAtA12 := make([]byte, len(m.HeroBeenKillSoldier)*10)
		var j11 int
		for _, num := range m.HeroBeenKillSoldier {
			for num >= 1<<7 {
				dAtA12[j11] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j11++
			}
			dAtA12[j11] = uint8(num)
			j11++
		}
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintXiongnu(dAtA, i, uint64(j11))
		i += copy(dAtA[i:], dAtA12[:j11])
	}
	return i, nil
}

func encodeFixed64Xiongnu(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Xiongnu(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintXiongnu(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AllXiongNuServerProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, e := range m.Datas {
			l = e.Size()
			n += 1 + l + sovXiongnu(uint64(l))
		}
	}
	if len(m.TodayJoinIds) > 0 {
		l = 0
		for _, e := range m.TodayJoinIds {
			l += sovXiongnu(uint64(e))
		}
		n += 1 + sovXiongnu(uint64(l)) + l
	}
	if m.LastResetDailyTime != 0 {
		n += 1 + sovXiongnu(uint64(m.LastResetDailyTime))
	}
	return n
}

func (m *XiongNuServerProto) Size() (n int) {
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovXiongnu(uint64(m.Level))
	}
	if m.GuildId != 0 {
		n += 1 + sovXiongnu(uint64(m.GuildId))
	}
	if m.BaseId != 0 {
		n += 1 + sovXiongnu(uint64(m.BaseId))
	}
	if m.StartTime != 0 {
		n += 1 + sovXiongnu(uint64(m.StartTime))
	}
	if m.WipeOutMonsterCount != 0 {
		n += 1 + sovXiongnu(uint64(m.WipeOutMonsterCount))
	}
	if m.Morale != 0 {
		n += 1 + sovXiongnu(uint64(m.Morale))
	}
	if len(m.GivePrizeMembers) > 0 {
		l = 0
		for _, e := range m.GivePrizeMembers {
			l += sovXiongnu(uint64(e))
		}
		n += 1 + sovXiongnu(uint64(l)) + l
	}
	if len(m.Defenders) > 0 {
		l = 0
		for _, e := range m.Defenders {
			l += sovXiongnu(uint64(e))
		}
		n += 1 + sovXiongnu(uint64(l)) + l
	}
	if m.Resist {
		n += 2
	}
	if m.Wave != 0 {
		n += 1 + sovXiongnu(uint64(m.Wave))
	}
	if m.AddMonsterCount != 0 {
		n += 1 + sovXiongnu(uint64(m.AddMonsterCount))
	}
	if m.NextRefreshMonsterTime != 0 {
		n += 1 + sovXiongnu(uint64(m.NextRefreshMonsterTime))
	}
	if m.BaseX != 0 {
		n += 1 + sovXiongnu(uint64(m.BaseX))
	}
	if m.BaseY != 0 {
		n += 1 + sovXiongnu(uint64(m.BaseY))
	}
	if m.AccumReduceMorale != 0 {
		n += 1 + sovXiongnu(uint64(m.AccumReduceMorale))
	}
	if m.Defeated {
		n += 3
	}
	if len(m.HeroId) > 0 {
		l = 0
		for _, e := range m.HeroId {
			l += sovXiongnu(uint64(e))
		}
		n += 2 + sovXiongnu(uint64(l)) + l
	}
	if len(m.HeroKillSoldier) > 0 {
		l = 0
		for _, e := range m.HeroKillSoldier {
			l += sovXiongnu(uint64(e))
		}
		n += 2 + sovXiongnu(uint64(l)) + l
	}
	if len(m.HeroBeenKillSoldier) > 0 {
		l = 0
		for _, e := range m.HeroBeenKillSoldier {
			l += sovXiongnu(uint64(e))
		}
		n += 2 + sovXiongnu(uint64(l)) + l
	}
	return n
}

func sovXiongnu(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozXiongnu(x uint64) (n int) {
	return sovXiongnu(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AllXiongNuServerProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXiongnu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllXiongNuServerProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllXiongNuServerProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthXiongnu
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datas = append(m.Datas, &XiongNuServerProto{})
			if err := m.Datas[len(m.Datas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXiongnu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TodayJoinIds = append(m.TodayJoinIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXiongnu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthXiongnu
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXiongnu
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TodayJoinIds = append(m.TodayJoinIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TodayJoinIds", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastResetDailyTime", wireType)
			}
			m.LastResetDailyTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastResetDailyTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXiongnu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXiongnu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XiongNuServerProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowXiongnu
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XiongNuServerProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XiongNuServerProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildId", wireType)
			}
			m.GuildId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuildId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseId", wireType)
			}
			m.BaseId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaseId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WipeOutMonsterCount", wireType)
			}
			m.WipeOutMonsterCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WipeOutMonsterCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Morale", wireType)
			}
			m.Morale = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Morale |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXiongnu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GivePrizeMembers = append(m.GivePrizeMembers, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXiongnu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthXiongnu
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXiongnu
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GivePrizeMembers = append(m.GivePrizeMembers, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GivePrizeMembers", wireType)
			}
		case 8:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXiongnu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Defenders = append(m.Defenders, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXiongnu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthXiongnu
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXiongnu
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Defenders = append(m.Defenders, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Defenders", wireType)
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resist", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Resist = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wave", wireType)
			}
			m.Wave = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wave |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddMonsterCount", wireType)
			}
			m.AddMonsterCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddMonsterCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextRefreshMonsterTime", wireType)
			}
			m.NextRefreshMonsterTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextRefreshMonsterTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseX", wireType)
			}
			m.BaseX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaseX |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseY", wireType)
			}
			m.BaseY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaseY |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccumReduceMorale", wireType)
			}
			m.AccumReduceMorale = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccumReduceMorale |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Defeated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Defeated = bool(v != 0)
		case 17:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXiongnu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.HeroId = append(m.HeroId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXiongnu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthXiongnu
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXiongnu
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.HeroId = append(m.HeroId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroId", wireType)
			}
		case 18:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXiongnu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.HeroKillSoldier = append(m.HeroKillSoldier, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXiongnu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthXiongnu
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXiongnu
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.HeroKillSoldier = append(m.HeroKillSoldier, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroKillSoldier", wireType)
			}
		case 19:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXiongnu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.HeroBeenKillSoldier = append(m.HeroBeenKillSoldier, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowXiongnu
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthXiongnu
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowXiongnu
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.HeroBeenKillSoldier = append(m.HeroBeenKillSoldier, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroBeenKillSoldier", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipXiongnu(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthXiongnu
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipXiongnu(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowXiongnu
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowXiongnu
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthXiongnu
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowXiongnu
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipXiongnu(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthXiongnu = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowXiongnu   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/pb/server_proto/xiongnu.proto", fileDescriptorXiongnu)
}

var fileDescriptorXiongnu = []byte{
	// 579 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x93, 0xcf, 0x6e, 0x13, 0x3b,
	0x14, 0xc6, 0xef, 0x34, 0x9d, 0x34, 0x75, 0x7b, 0xfb, 0xc7, 0xb9, 0xed, 0x75, 0x11, 0x44, 0xa3,
	0x8a, 0x45, 0x84, 0x50, 0x22, 0xe8, 0xa2, 0x62, 0x49, 0x61, 0x41, 0x40, 0x85, 0x6a, 0xca, 0xa2,
	0xb0, 0xb1, 0x9c, 0xf8, 0x34, 0x31, 0x78, 0xc6, 0x91, 0xed, 0x49, 0x5b, 0x9e, 0x84, 0x0d, 0x0b,
	0xde, 0x86, 0x25, 0x8f, 0x80, 0xca, 0x8b, 0xa0, 0x73, 0x26, 0xea, 0x1f, 0x60, 0xe5, 0x7c, 0xe7,
	0xf7, 0x9d, 0x9c, 0xe3, 0xcf, 0x1a, 0xb6, 0x3f, 0x36, 0x71, 0x52, 0x0d, 0x7b, 0x23, 0x57, 0xf4,
	0xad, 0x19, 0x4f, 0xe2, 0x54, 0x9d, 0xf5, 0x0b, 0x65, 0x61, 0xbf, 0x3f, 0x1d, 0xf6, 0x03, 0xf8,
	0x19, 0x78, 0x39, 0xf5, 0x2e, 0xba, 0xfe, 0xb9, 0x71, 0xe5, 0xb8, 0xac, 0x7a, 0xa4, 0x78, 0x4a,
	0xc7, 0xee, 0xd7, 0x84, 0x6d, 0x3d, 0xb5, 0xf6, 0x04, 0xd9, 0xeb, 0xea, 0x98, 0xfc, 0x47, 0x64,
	0xe8, 0xb3, 0x54, 0xab, 0xa8, 0x82, 0x48, 0xb2, 0x46, 0x77, 0xe5, 0xf1, 0x4e, 0xdd, 0xd7, 0xfb,
	0xd3, 0x99, 0xd7, 0x3e, 0x7e, 0x9f, 0xad, 0x45, 0xa7, 0xd5, 0x85, 0xfc, 0xe0, 0x4c, 0x29, 0x8d,
	0x0e, 0x62, 0x21, 0x6b, 0x74, 0x1b, 0xf9, 0x2a, 0x55, 0x5f, 0x3a, 0x53, 0x0e, 0x74, 0xe0, 0x8f,
	0xd8, 0x96, 0x55, 0x21, 0x4a, 0x0f, 0x01, 0xa2, 0xd4, 0xca, 0xd8, 0x0b, 0x19, 0x4d, 0x01, 0xa2,
	0x91, 0x25, 0xdd, 0x46, 0xce, 0x11, 0xe6, 0xc8, 0x9e, 0x23, 0x7a, 0x6b, 0x0a, 0xd8, 0xfd, 0x92,
	0x32, 0xfe, 0x97, 0x05, 0xff, 0x63, 0xa9, 0x85, 0x19, 0x58, 0x91, 0x64, 0x49, 0x77, 0x31, 0xaf,
	0x05, 0xdf, 0x61, 0xad, 0x71, 0x65, 0xac, 0x96, 0x46, 0x8b, 0x05, 0xfa, 0xcb, 0x25, 0xd2, 0x03,
	0xcd, 0xff, 0x67, 0x4b, 0x43, 0x15, 0x00, 0x49, 0x3d, 0xac, 0x89, 0x72, 0xa0, 0xf9, 0x3d, 0xc6,
	0x42, 0x54, 0x3e, 0xd6, 0x8b, 0x2c, 0x12, 0x5b, 0xa6, 0x0a, 0xce, 0xe7, 0x7b, 0x6c, 0xfb, 0xcc,
	0x4c, 0x41, 0xba, 0x2a, 0xca, 0xc2, 0x95, 0x21, 0x82, 0x97, 0x23, 0x57, 0x95, 0x51, 0xa4, 0x34,
	0xb9, 0x8d, 0xf4, 0x4d, 0x15, 0x0f, 0x6b, 0xf6, 0x0c, 0x11, 0xdf, 0x66, 0xcd, 0xc2, 0x79, 0x65,
	0x41, 0x34, 0xc9, 0x34, 0x57, 0xfc, 0x21, 0xe3, 0x63, 0x33, 0x03, 0x39, 0xf5, 0xe6, 0x13, 0xc8,
	0x02, 0x8a, 0x21, 0xf8, 0x20, 0x96, 0x28, 0xa9, 0x0d, 0x24, 0x47, 0x08, 0x0e, 0xeb, 0x3a, 0xbf,
	0xcb, 0x96, 0x35, 0x9c, 0x42, 0xa9, 0xd1, 0xd4, 0x22, 0xd3, 0x75, 0x01, 0x67, 0x78, 0x08, 0x26,
	0x44, 0xb1, 0x9c, 0x25, 0xdd, 0x56, 0x3e, 0x57, 0x9c, 0xb3, 0xc5, 0x33, 0x35, 0x03, 0xc1, 0x68,
	0x32, 0xfd, 0xe6, 0x0f, 0xd8, 0xa6, 0xd2, 0xfa, 0xb7, 0xfd, 0x57, 0xc8, 0xb0, 0xae, 0xb4, 0xbe,
	0xb5, 0xfb, 0x13, 0xb6, 0x53, 0xc2, 0x39, 0xbe, 0xd1, 0xa9, 0x87, 0x30, 0xb9, 0x6a, 0xa2, 0x78,
	0x56, 0x29, 0x9e, 0x6d, 0x34, 0xe4, 0x35, 0x9f, 0xf7, 0x52, 0x56, 0x5b, 0x8c, 0x42, 0x95, 0xe7,
	0xe2, 0xdf, 0x2c, 0xe9, 0xa6, 0x79, 0x8a, 0xea, 0xe4, 0xaa, 0x7c, 0x21, 0xd6, 0xae, 0xcb, 0xef,
	0x78, 0x8f, 0xb5, 0xd5, 0x68, 0x54, 0x15, 0xd2, 0x83, 0xae, 0x46, 0x20, 0xe7, 0x89, 0xad, 0xd3,
	0x5a, 0x9b, 0x84, 0x72, 0x22, 0x87, 0x75, 0x78, 0x77, 0x58, 0x0b, 0x6f, 0xaf, 0x22, 0x68, 0xb1,
	0x41, 0x57, 0xbe, 0xd2, 0xf8, 0xba, 0x13, 0xf0, 0x0e, 0x5f, 0x77, 0x93, 0x82, 0x6a, 0xa2, 0x1c,
	0x68, 0xbc, 0x39, 0x81, 0x8f, 0xc6, 0x5a, 0x19, 0x9c, 0xd5, 0x06, 0xbc, 0xe0, 0x59, 0x03, 0x6f,
	0x8e, 0xe0, 0x95, 0xb1, 0xf6, 0xb8, 0x2e, 0xe3, 0x53, 0x93, 0x77, 0x08, 0x50, 0xde, 0x6e, 0x68,
	0x53, 0x43, 0x1b, 0xe9, 0x01, 0x40, 0x79, 0xa3, 0xe9, 0x20, 0xfb, 0x76, 0xd9, 0x49, 0xbe, 0x5f,
	0x76, 0x92, 0x1f, 0x97, 0x9d, 0xe4, 0xf3, 0xcf, 0xce, 0x3f, 0x2f, 0x92, 0xf7, 0xab, 0x37, 0x3f,
	0xbd, 0x61, 0x93, 0x8e, 0xbd, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa4, 0x06, 0xe5, 0xab, 0xae,
	0x03, 0x00, 0x00,
}
