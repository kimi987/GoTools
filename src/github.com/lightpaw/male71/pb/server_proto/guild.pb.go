// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/pb/server_proto/guild.proto
// DO NOT EDIT!

package server_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import proto10 "github.com/lightpaw/male7/pb/shared_proto"
import proto9 "github.com/lightpaw/male7/pb/shared_proto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type GuildTaskType int32

const (
	GuildTaskType_InvalidGuildTask GuildTaskType = 0
	GuildTaskType_BaoWu            GuildTaskType = 1
	GuildTaskType_McWar            GuildTaskType = 2
	GuildTaskType_Workshop         GuildTaskType = 3
	GuildTaskType_Donate           GuildTaskType = 4
	GuildTaskType_QuanRong         GuildTaskType = 5
	GuildTaskType_HeBi             GuildTaskType = 6
	GuildTaskType_XiongNv          GuildTaskType = 7
)

var GuildTaskType_name = map[int32]string{
	0: "InvalidGuildTask",
	1: "BaoWu",
	2: "McWar",
	3: "Workshop",
	4: "Donate",
	5: "QuanRong",
	6: "HeBi",
	7: "XiongNv",
}
var GuildTaskType_value = map[string]int32{
	"InvalidGuildTask": 0,
	"BaoWu":            1,
	"McWar":            2,
	"Workshop":         3,
	"Donate":           4,
	"QuanRong":         5,
	"HeBi":             6,
	"XiongNv":          7,
}

func (x GuildTaskType) String() string {
	return proto.EnumName(GuildTaskType_name, int32(x))
}
func (GuildTaskType) EnumDescriptor() ([]byte, []int) { return fileDescriptorGuild, []int{0} }

type GuildServerProto struct {
	Name                     string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	FlagName                 string   `protobuf:"bytes,3,opt,name=flag_name,json=flagName,proto3" json:"flag_name,omitempty"`
	CreateTime               int64    `protobuf:"varint,45,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	FlagType                 uint64   `protobuf:"varint,4,opt,name=flagType,proto3" json:"flagType,omitempty"`
	Level                    uint64   `protobuf:"varint,5,opt,name=level,proto3" json:"level,omitempty"`
	BuildingAmount           uint64   `protobuf:"varint,41,opt,name=building_amount,json=buildingAmount,proto3" json:"building_amount,omitempty"`
	UpdateBuildingAmountTime int64    `protobuf:"varint,44,opt,name=update_building_amount_time,json=updateBuildingAmountTime,proto3" json:"update_building_amount_time,omitempty"`
	UpgradeEndTime           int64    `protobuf:"varint,42,opt,name=upgrade_end_time,json=upgradeEndTime,proto3" json:"upgrade_end_time,omitempty"`
	CdrTimes                 uint64   `protobuf:"varint,43,opt,name=cdr_times,json=cdrTimes,proto3" json:"cdr_times,omitempty"`
	Text                     string   `protobuf:"bytes,8,opt,name=text,proto3" json:"text,omitempty"`
	InternalText             string   `protobuf:"bytes,9,opt,name=internal_text,json=internalText,proto3" json:"internal_text,omitempty"`
	Labels                   []string `protobuf:"bytes,10,rep,name=labels" json:"labels,omitempty"`
	// 入盟条件
	RejectAutoJoin           bool                              `protobuf:"varint,11,opt,name=reject_auto_join,json=rejectAutoJoin,proto3" json:"reject_auto_join,omitempty"`
	RequiredHeroLevel        uint64                            `protobuf:"varint,12,opt,name=required_hero_level,json=requiredHeroLevel,proto3" json:"required_hero_level,omitempty"`
	RequiredJunXianLevel     uint64                            `protobuf:"varint,13,opt,name=required_jun_xian_level,json=requiredJunXianLevel,proto3" json:"required_jun_xian_level,omitempty"`
	RequiredTowerMaxFloor    uint64                            `protobuf:"varint,14,opt,name=required_tower_max_floor,json=requiredTowerMaxFloor,proto3" json:"required_tower_max_floor,omitempty"`
	ClassNames               []string                          `protobuf:"bytes,21,rep,name=class_names,json=classNames" json:"class_names,omitempty"`
	Members                  []*GuildMemberServerProto         `protobuf:"bytes,22,rep,name=members" json:"members,omitempty"`
	ChangeLeaderId           int64                             `protobuf:"varint,23,opt,name=change_leader_id,json=changeLeaderId,proto3" json:"change_leader_id,omitempty"`
	ChangeLeaderTime         int64                             `protobuf:"varint,24,opt,name=change_leader_time,json=changeLeaderTime,proto3" json:"change_leader_time,omitempty"`
	NextChangeNameTime       int64                             `protobuf:"varint,25,opt,name=next_change_name_time,json=nextChangeNameTime,proto3" json:"next_change_name_time,omitempty"`
	FreeChangeName           bool                              `protobuf:"varint,31,opt,name=free_change_name,json=freeChangeName,proto3" json:"free_change_name,omitempty"`
	KickMemberCount          uint64                            `protobuf:"varint,32,opt,name=kick_member_count,json=kickMemberCount,proto3" json:"kick_member_count,omitempty"`
	ImpeachLeader            *GuildImpeachServerProto          `protobuf:"bytes,26,opt,name=impeach_leader,json=impeachLeader" json:"impeach_leader,omitempty"`
	InvateHeroIds            []int64                           `protobuf:"varint,27,rep,packed,name=invate_hero_ids,json=invateHeroIds" json:"invate_hero_ids,omitempty"`
	InvateExpiredTime        []int64                           `protobuf:"varint,28,rep,packed,name=invate_expired_time,json=invateExpiredTime" json:"invate_expired_time,omitempty"`
	RequestJoinHeroIds       []int64                           `protobuf:"varint,29,rep,packed,name=request_join_hero_ids,json=requestJoinHeroIds" json:"request_join_hero_ids,omitempty"`
	RequestJoinExpiredTime   []int64                           `protobuf:"varint,30,rep,packed,name=request_join_expired_time,json=requestJoinExpiredTime" json:"request_join_expired_time,omitempty"`
	ClassTitle               *proto10.GuildClassTitleProto     `protobuf:"bytes,33,opt,name=class_title,json=classTitle" json:"class_title,omitempty"`
	LastPrestigeRank         uint64                            `protobuf:"varint,38,opt,name=last_prestige_rank,json=lastPrestigeRank,proto3" json:"last_prestige_rank,omitempty"`
	Prestige                 uint64                            `protobuf:"varint,35,opt,name=prestige,proto3" json:"prestige,omitempty"`
	HistoryMaxPrestige       uint64                            `protobuf:"varint,37,opt,name=history_max_prestige,json=historyMaxPrestige,proto3" json:"history_max_prestige,omitempty"`
	Country                  uint64                            `protobuf:"varint,34,opt,name=country,proto3" json:"country,omitempty"`
	PrestigeDaily            []uint64                          `protobuf:"varint,36,rep,packed,name=prestige_daily,json=prestigeDaily" json:"prestige_daily,omitempty"`
	PrestigeCoreHourly       []uint64                          `protobuf:"varint,39,rep,packed,name=prestige_core_hourly,json=prestigeCoreHourly" json:"prestige_core_hourly,omitempty"`
	Hufu                     uint64                            `protobuf:"varint,46,opt,name=hufu,proto3" json:"hufu,omitempty"`
	Yinliang                 uint64                            `protobuf:"varint,47,opt,name=yinliang,proto3" json:"yinliang,omitempty"`
	FriendGuildText          string                            `protobuf:"bytes,50,opt,name=friend_guild_text,json=friendGuildText,proto3" json:"friend_guild_text,omitempty"`
	EnemyGuildText           string                            `protobuf:"bytes,51,opt,name=enemy_guild_text,json=enemyGuildText,proto3" json:"enemy_guild_text,omitempty"`
	DonateRecords            []*proto10.GuildDonateRecordProto `protobuf:"bytes,55,rep,name=donate_records,json=donateRecords" json:"donate_records,omitempty"`
	BigEvents                []*proto10.GuildBigEventProto     `protobuf:"bytes,56,rep,name=big_events,json=bigEvents" json:"big_events,omitempty"`
	Dynamics                 []*proto10.GuildDynamicProto      `protobuf:"bytes,57,rep,name=dynamics" json:"dynamics,omitempty"`
	CompleteGuildTargetTimes uint64                            `protobuf:"varint,58,opt,name=complete_guild_target_times,json=completeGuildTargetTimes,proto3" json:"complete_guild_target_times,omitempty"`
	// 联盟雕像放置的场景
	StatueRealmId                int64                                     `protobuf:"varint,59,opt,name=statueRealmId,proto3" json:"statueRealmId,omitempty"`
	SeekHelp                     []*proto10.GuildSeekHelpProto             `protobuf:"bytes,62,rep,name=seek_help,json=seekHelp" json:"seek_help,omitempty"`
	BigBoxId                     uint64                                    `protobuf:"varint,63,opt,name=big_box_id,json=bigBoxId,proto3" json:"big_box_id,omitempty"`
	BigBoxEnergy                 uint64                                    `protobuf:"varint,64,opt,name=big_box_energy,json=bigBoxEnergy,proto3" json:"big_box_energy,omitempty"`
	FullBigBoxId                 uint64                                    `protobuf:"varint,65,opt,name=full_big_box_id,json=fullBigBoxId,proto3" json:"full_big_box_id,omitempty"`
	FullBigBoxMemberIds          []int64                                   `protobuf:"varint,66,rep,packed,name=full_big_box_member_ids,json=fullBigBoxMemberIds" json:"full_big_box_member_ids,omitempty"`
	Technologys                  []uint64                                  `protobuf:"varint,67,rep,packed,name=technologys" json:"technologys,omitempty"`
	UpgradeTechnology            uint64                                    `protobuf:"varint,68,opt,name=upgrade_technology,json=upgradeTechnology,proto3" json:"upgrade_technology,omitempty"`
	TechUpgradeEndTime           int64                                     `protobuf:"varint,69,opt,name=tech_upgrade_end_time,json=techUpgradeEndTime,proto3" json:"tech_upgrade_end_time,omitempty"`
	TechCdrTimes                 uint64                                    `protobuf:"varint,70,opt,name=tech_cdr_times,json=techCdrTimes,proto3" json:"tech_cdr_times,omitempty"`
	NextUpdatePrestigeTargetTime int64                                     `protobuf:"varint,71,opt,name=next_update_prestige_target_time,json=nextUpdatePrestigeTargetTime,proto3" json:"next_update_prestige_target_time,omitempty"`
	IsStartResistXiongNuToday    bool                                      `protobuf:"varint,75,opt,name=is_start_resist_xiong_nu_today,json=isStartResistXiongNuToday,proto3" json:"is_start_resist_xiong_nu_today,omitempty"`
	ResistXiongNuDefenders       []int64                                   `protobuf:"varint,76,rep,packed,name=resist_xiong_nu_defenders,json=resistXiongNuDefenders" json:"resist_xiong_nu_defenders,omitempty"`
	UnlockResistXiongNuLevel     uint64                                    `protobuf:"varint,77,opt,name=unlock_resist_xiong_nu_level,json=unlockResistXiongNuLevel,proto3" json:"unlock_resist_xiong_nu_level,omitempty"`
	LastResistXiongNu            *proto9.LastResistXiongNuProto            `protobuf:"bytes,78,opt,name=last_resist_xiong_nu,json=lastResistXiongNu" json:"last_resist_xiong_nu,omitempty"`
	LastResistXiongNuFightProto  *proto9.ResistXiongNuFightProto           `protobuf:"bytes,83,opt,name=last_resist_xiong_nu_fight_proto,json=lastResistXiongNuFightProto" json:"last_resist_xiong_nu_fight_proto,omitempty"`
	MemberLeaveTimeMap           map[int64]int64                           `protobuf:"bytes,79,rep,name=member_leave_time_map,json=memberLeaveTimeMap" json:"member_leave_time_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Record                       *proto10.McWarAllRecordProto              `protobuf:"bytes,81,opt,name=record" json:"record,omitempty"`
	Mark                         []*proto10.GuildMarkProto                 `protobuf:"bytes,80,rep,name=mark" json:"mark,omitempty"`
	Template                     uint64                                    `protobuf:"varint,99,opt,name=template,proto3" json:"template,omitempty"`
	DailyResetTime               int64                                     `protobuf:"varint,100,opt,name=daily_reset_time,json=dailyResetTime,proto3" json:"daily_reset_time,omitempty"`
	WeeklyResetTime              int64                                     `protobuf:"varint,101,opt,name=weekly_reset_time,json=weeklyResetTime,proto3" json:"weekly_reset_time,omitempty"`
	YinliangRecord               []*proto10.GuildYinliangRecordProto       `protobuf:"bytes,82,rep,name=yinliang_record,json=yinliangRecord" json:"yinliang_record,omitempty"`
	YinliangSendToGuild          []*proto10.GuildYinliangSendToGuildProto  `protobuf:"bytes,84,rep,name=yinliang_send_to_guild,json=yinliangSendToGuild" json:"yinliang_send_to_guild,omitempty"`
	YinliangSendToMe             map[int64]*proto10.GuildYinliangSendProto `protobuf:"bytes,85,rep,name=yinliang_send_to_me,json=yinliangSendToMe" json:"yinliang_send_to_me,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	HostMingcIds                 map[uint64]int64                          `protobuf:"bytes,86,rep,name=host_mingc_ids,json=hostMingcIds" json:"host_mingc_ids,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// 联盟工坊
	Workshop               *GuildWorkshopServerProto `protobuf:"bytes,87,opt,name=workshop" json:"workshop,omitempty"`
	WorkshopTodayCompleted bool                      `protobuf:"varint,88,opt,name=workshop_today_completed,json=workshopTodayCompleted,proto3" json:"workshop_today_completed,omitempty"`
	// 联盟工坊生产次数，奖励个数，不能因为拆了，就重新计算
	WorkshopOutput uint64 `protobuf:"varint,89,opt,name=workshop_output,json=workshopOutput,proto3" json:"workshop_output,omitempty"`
	// 联盟工坊产出奖励个数
	WorkshopPrizeCount uint64 `protobuf:"varint,90,opt,name=workshop_prize_count,json=workshopPrizeCount,proto3" json:"workshop_prize_count,omitempty"`
	// 联盟工坊今日被破坏次数
	WorkshopBeenHurtTimes uint64   `protobuf:"varint,91,opt,name=workshop_been_hurt_times,json=workshopBeenHurtTimes,proto3" json:"workshop_been_hurt_times,omitempty"`
	RecommendMcBuilds     []uint64 `protobuf:"varint,92,rep,packed,name=recommend_mc_builds,json=recommendMcBuilds" json:"recommend_mc_builds,omitempty"`
	// 周任务进度
	WeeklyTasks map[int32]uint64 `protobuf:"bytes,93,rep,name=weekly_tasks,json=weeklyTasks" json:"weekly_tasks,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// 联盟转国
	ChangeCountryWaitEndTime int64  `protobuf:"varint,94,opt,name=change_country_wait_end_time,json=changeCountryWaitEndTime,proto3" json:"change_country_wait_end_time,omitempty"`
	ChangeCountryTarget      uint64 `protobuf:"varint,95,opt,name=change_country_target,json=changeCountryTarget,proto3" json:"change_country_target,omitempty"`
	ChangeCountryNextTime    int64  `protobuf:"varint,96,opt,name=change_country_next_time,json=changeCountryNextTime,proto3" json:"change_country_next_time,omitempty"`
}

func (m *GuildServerProto) Reset()                    { *m = GuildServerProto{} }
func (m *GuildServerProto) String() string            { return proto.CompactTextString(m) }
func (*GuildServerProto) ProtoMessage()               {}
func (*GuildServerProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{0} }

func (m *GuildServerProto) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GuildServerProto) GetFlagName() string {
	if m != nil {
		return m.FlagName
	}
	return ""
}

func (m *GuildServerProto) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *GuildServerProto) GetFlagType() uint64 {
	if m != nil {
		return m.FlagType
	}
	return 0
}

func (m *GuildServerProto) GetLevel() uint64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *GuildServerProto) GetBuildingAmount() uint64 {
	if m != nil {
		return m.BuildingAmount
	}
	return 0
}

func (m *GuildServerProto) GetUpdateBuildingAmountTime() int64 {
	if m != nil {
		return m.UpdateBuildingAmountTime
	}
	return 0
}

func (m *GuildServerProto) GetUpgradeEndTime() int64 {
	if m != nil {
		return m.UpgradeEndTime
	}
	return 0
}

func (m *GuildServerProto) GetCdrTimes() uint64 {
	if m != nil {
		return m.CdrTimes
	}
	return 0
}

func (m *GuildServerProto) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *GuildServerProto) GetInternalText() string {
	if m != nil {
		return m.InternalText
	}
	return ""
}

func (m *GuildServerProto) GetLabels() []string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *GuildServerProto) GetRejectAutoJoin() bool {
	if m != nil {
		return m.RejectAutoJoin
	}
	return false
}

func (m *GuildServerProto) GetRequiredHeroLevel() uint64 {
	if m != nil {
		return m.RequiredHeroLevel
	}
	return 0
}

func (m *GuildServerProto) GetRequiredJunXianLevel() uint64 {
	if m != nil {
		return m.RequiredJunXianLevel
	}
	return 0
}

func (m *GuildServerProto) GetRequiredTowerMaxFloor() uint64 {
	if m != nil {
		return m.RequiredTowerMaxFloor
	}
	return 0
}

func (m *GuildServerProto) GetClassNames() []string {
	if m != nil {
		return m.ClassNames
	}
	return nil
}

func (m *GuildServerProto) GetMembers() []*GuildMemberServerProto {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *GuildServerProto) GetChangeLeaderId() int64 {
	if m != nil {
		return m.ChangeLeaderId
	}
	return 0
}

func (m *GuildServerProto) GetChangeLeaderTime() int64 {
	if m != nil {
		return m.ChangeLeaderTime
	}
	return 0
}

func (m *GuildServerProto) GetNextChangeNameTime() int64 {
	if m != nil {
		return m.NextChangeNameTime
	}
	return 0
}

func (m *GuildServerProto) GetFreeChangeName() bool {
	if m != nil {
		return m.FreeChangeName
	}
	return false
}

func (m *GuildServerProto) GetKickMemberCount() uint64 {
	if m != nil {
		return m.KickMemberCount
	}
	return 0
}

func (m *GuildServerProto) GetImpeachLeader() *GuildImpeachServerProto {
	if m != nil {
		return m.ImpeachLeader
	}
	return nil
}

func (m *GuildServerProto) GetInvateHeroIds() []int64 {
	if m != nil {
		return m.InvateHeroIds
	}
	return nil
}

func (m *GuildServerProto) GetInvateExpiredTime() []int64 {
	if m != nil {
		return m.InvateExpiredTime
	}
	return nil
}

func (m *GuildServerProto) GetRequestJoinHeroIds() []int64 {
	if m != nil {
		return m.RequestJoinHeroIds
	}
	return nil
}

func (m *GuildServerProto) GetRequestJoinExpiredTime() []int64 {
	if m != nil {
		return m.RequestJoinExpiredTime
	}
	return nil
}

func (m *GuildServerProto) GetClassTitle() *proto10.GuildClassTitleProto {
	if m != nil {
		return m.ClassTitle
	}
	return nil
}

func (m *GuildServerProto) GetLastPrestigeRank() uint64 {
	if m != nil {
		return m.LastPrestigeRank
	}
	return 0
}

func (m *GuildServerProto) GetPrestige() uint64 {
	if m != nil {
		return m.Prestige
	}
	return 0
}

func (m *GuildServerProto) GetHistoryMaxPrestige() uint64 {
	if m != nil {
		return m.HistoryMaxPrestige
	}
	return 0
}

func (m *GuildServerProto) GetCountry() uint64 {
	if m != nil {
		return m.Country
	}
	return 0
}

func (m *GuildServerProto) GetPrestigeDaily() []uint64 {
	if m != nil {
		return m.PrestigeDaily
	}
	return nil
}

func (m *GuildServerProto) GetPrestigeCoreHourly() []uint64 {
	if m != nil {
		return m.PrestigeCoreHourly
	}
	return nil
}

func (m *GuildServerProto) GetHufu() uint64 {
	if m != nil {
		return m.Hufu
	}
	return 0
}

func (m *GuildServerProto) GetYinliang() uint64 {
	if m != nil {
		return m.Yinliang
	}
	return 0
}

func (m *GuildServerProto) GetFriendGuildText() string {
	if m != nil {
		return m.FriendGuildText
	}
	return ""
}

func (m *GuildServerProto) GetEnemyGuildText() string {
	if m != nil {
		return m.EnemyGuildText
	}
	return ""
}

func (m *GuildServerProto) GetDonateRecords() []*proto10.GuildDonateRecordProto {
	if m != nil {
		return m.DonateRecords
	}
	return nil
}

func (m *GuildServerProto) GetBigEvents() []*proto10.GuildBigEventProto {
	if m != nil {
		return m.BigEvents
	}
	return nil
}

func (m *GuildServerProto) GetDynamics() []*proto10.GuildDynamicProto {
	if m != nil {
		return m.Dynamics
	}
	return nil
}

func (m *GuildServerProto) GetCompleteGuildTargetTimes() uint64 {
	if m != nil {
		return m.CompleteGuildTargetTimes
	}
	return 0
}

func (m *GuildServerProto) GetStatueRealmId() int64 {
	if m != nil {
		return m.StatueRealmId
	}
	return 0
}

func (m *GuildServerProto) GetSeekHelp() []*proto10.GuildSeekHelpProto {
	if m != nil {
		return m.SeekHelp
	}
	return nil
}

func (m *GuildServerProto) GetBigBoxId() uint64 {
	if m != nil {
		return m.BigBoxId
	}
	return 0
}

func (m *GuildServerProto) GetBigBoxEnergy() uint64 {
	if m != nil {
		return m.BigBoxEnergy
	}
	return 0
}

func (m *GuildServerProto) GetFullBigBoxId() uint64 {
	if m != nil {
		return m.FullBigBoxId
	}
	return 0
}

func (m *GuildServerProto) GetFullBigBoxMemberIds() []int64 {
	if m != nil {
		return m.FullBigBoxMemberIds
	}
	return nil
}

func (m *GuildServerProto) GetTechnologys() []uint64 {
	if m != nil {
		return m.Technologys
	}
	return nil
}

func (m *GuildServerProto) GetUpgradeTechnology() uint64 {
	if m != nil {
		return m.UpgradeTechnology
	}
	return 0
}

func (m *GuildServerProto) GetTechUpgradeEndTime() int64 {
	if m != nil {
		return m.TechUpgradeEndTime
	}
	return 0
}

func (m *GuildServerProto) GetTechCdrTimes() uint64 {
	if m != nil {
		return m.TechCdrTimes
	}
	return 0
}

func (m *GuildServerProto) GetNextUpdatePrestigeTargetTime() int64 {
	if m != nil {
		return m.NextUpdatePrestigeTargetTime
	}
	return 0
}

func (m *GuildServerProto) GetIsStartResistXiongNuToday() bool {
	if m != nil {
		return m.IsStartResistXiongNuToday
	}
	return false
}

func (m *GuildServerProto) GetResistXiongNuDefenders() []int64 {
	if m != nil {
		return m.ResistXiongNuDefenders
	}
	return nil
}

func (m *GuildServerProto) GetUnlockResistXiongNuLevel() uint64 {
	if m != nil {
		return m.UnlockResistXiongNuLevel
	}
	return 0
}

func (m *GuildServerProto) GetLastResistXiongNu() *proto9.LastResistXiongNuProto {
	if m != nil {
		return m.LastResistXiongNu
	}
	return nil
}

func (m *GuildServerProto) GetLastResistXiongNuFightProto() *proto9.ResistXiongNuFightProto {
	if m != nil {
		return m.LastResistXiongNuFightProto
	}
	return nil
}

func (m *GuildServerProto) GetMemberLeaveTimeMap() map[int64]int64 {
	if m != nil {
		return m.MemberLeaveTimeMap
	}
	return nil
}

func (m *GuildServerProto) GetRecord() *proto10.McWarAllRecordProto {
	if m != nil {
		return m.Record
	}
	return nil
}

func (m *GuildServerProto) GetMark() []*proto10.GuildMarkProto {
	if m != nil {
		return m.Mark
	}
	return nil
}

func (m *GuildServerProto) GetTemplate() uint64 {
	if m != nil {
		return m.Template
	}
	return 0
}

func (m *GuildServerProto) GetDailyResetTime() int64 {
	if m != nil {
		return m.DailyResetTime
	}
	return 0
}

func (m *GuildServerProto) GetWeeklyResetTime() int64 {
	if m != nil {
		return m.WeeklyResetTime
	}
	return 0
}

func (m *GuildServerProto) GetYinliangRecord() []*proto10.GuildYinliangRecordProto {
	if m != nil {
		return m.YinliangRecord
	}
	return nil
}

func (m *GuildServerProto) GetYinliangSendToGuild() []*proto10.GuildYinliangSendToGuildProto {
	if m != nil {
		return m.YinliangSendToGuild
	}
	return nil
}

func (m *GuildServerProto) GetYinliangSendToMe() map[int64]*proto10.GuildYinliangSendProto {
	if m != nil {
		return m.YinliangSendToMe
	}
	return nil
}

func (m *GuildServerProto) GetHostMingcIds() map[uint64]int64 {
	if m != nil {
		return m.HostMingcIds
	}
	return nil
}

func (m *GuildServerProto) GetWorkshop() *GuildWorkshopServerProto {
	if m != nil {
		return m.Workshop
	}
	return nil
}

func (m *GuildServerProto) GetWorkshopTodayCompleted() bool {
	if m != nil {
		return m.WorkshopTodayCompleted
	}
	return false
}

func (m *GuildServerProto) GetWorkshopOutput() uint64 {
	if m != nil {
		return m.WorkshopOutput
	}
	return 0
}

func (m *GuildServerProto) GetWorkshopPrizeCount() uint64 {
	if m != nil {
		return m.WorkshopPrizeCount
	}
	return 0
}

func (m *GuildServerProto) GetWorkshopBeenHurtTimes() uint64 {
	if m != nil {
		return m.WorkshopBeenHurtTimes
	}
	return 0
}

func (m *GuildServerProto) GetRecommendMcBuilds() []uint64 {
	if m != nil {
		return m.RecommendMcBuilds
	}
	return nil
}

func (m *GuildServerProto) GetWeeklyTasks() map[int32]uint64 {
	if m != nil {
		return m.WeeklyTasks
	}
	return nil
}

func (m *GuildServerProto) GetChangeCountryWaitEndTime() int64 {
	if m != nil {
		return m.ChangeCountryWaitEndTime
	}
	return 0
}

func (m *GuildServerProto) GetChangeCountryTarget() uint64 {
	if m != nil {
		return m.ChangeCountryTarget
	}
	return 0
}

func (m *GuildServerProto) GetChangeCountryNextTime() int64 {
	if m != nil {
		return m.ChangeCountryNextTime
	}
	return 0
}

type GuildWorkshopServerProto struct {
	StartTime  int32 `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime    int32 `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	IsComplete bool  `protobuf:"varint,3,opt,name=is_complete,json=isComplete,proto3" json:"is_complete,omitempty"`
	// 坐标
	X int32 `protobuf:"varint,4,opt,name=x,proto3" json:"x,omitempty"`
	Y int32 `protobuf:"varint,5,opt,name=y,proto3" json:"y,omitempty"`
	// 繁荣度
	Prosperity uint64 `protobuf:"varint,6,opt,name=prosperity,proto3" json:"prosperity,omitempty"`
	// 日志
	Log []*proto10.GuildWorkshopLogProto `protobuf:"bytes,7,rep,name=log" json:"log,omitempty"`
}

func (m *GuildWorkshopServerProto) Reset()                    { *m = GuildWorkshopServerProto{} }
func (m *GuildWorkshopServerProto) String() string            { return proto.CompactTextString(m) }
func (*GuildWorkshopServerProto) ProtoMessage()               {}
func (*GuildWorkshopServerProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{1} }

func (m *GuildWorkshopServerProto) GetStartTime() int32 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *GuildWorkshopServerProto) GetEndTime() int32 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *GuildWorkshopServerProto) GetIsComplete() bool {
	if m != nil {
		return m.IsComplete
	}
	return false
}

func (m *GuildWorkshopServerProto) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *GuildWorkshopServerProto) GetY() int32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *GuildWorkshopServerProto) GetProsperity() uint64 {
	if m != nil {
		return m.Prosperity
	}
	return 0
}

func (m *GuildWorkshopServerProto) GetLog() []*proto10.GuildWorkshopLogProto {
	if m != nil {
		return m.Log
	}
	return nil
}

type GuildMemberServerProto struct {
	Id                       int64                         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Hero                     *HeroBasicSnapshotServerProto `protobuf:"bytes,31,opt,name=hero" json:"hero,omitempty"`
	IsTechHelpable           bool                          `protobuf:"varint,19,opt,name=is_tech_helpable,json=isTechHelpable,proto3" json:"is_tech_helpable,omitempty"`
	ClassTitle               uint64                        `protobuf:"varint,20,opt,name=class_title,json=classTitle,proto3" json:"class_title,omitempty"`
	ClassLevel               uint64                        `protobuf:"varint,21,opt,name=class_level,json=classLevel,proto3" json:"class_level,omitempty"`
	CreateTime               int64                         `protobuf:"varint,23,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	HufuAmount               uint64                        `protobuf:"varint,38,opt,name=hufu_amount,json=hufuAmount,proto3" json:"hufu_amount,omitempty"`
	HufuTotalAmount          uint64                        `protobuf:"varint,39,opt,name=hufu_total_amount,json=hufuTotalAmount,proto3" json:"hufu_total_amount,omitempty"`
	HufuAmountPerDay         []uint64                      `protobuf:"varint,40,rep,packed,name=hufu_amount_per_day,json=hufuAmountPerDay" json:"hufu_amount_per_day,omitempty"`
	ContributionAmount       uint64                        `protobuf:"varint,41,opt,name=contribution_amount,json=contributionAmount,proto3" json:"contribution_amount,omitempty"`
	ContributionTotalAmount  uint64                        `protobuf:"varint,42,opt,name=contribution_total_amount,json=contributionTotalAmount,proto3" json:"contribution_total_amount,omitempty"`
	ContributionAmountPerDay []uint64                      `protobuf:"varint,43,rep,packed,name=contribution_amount_per_day,json=contributionAmountPerDay" json:"contribution_amount_per_day,omitempty"`
	DonationAmount           uint64                        `protobuf:"varint,44,opt,name=donation_amount,json=donationAmount,proto3" json:"donation_amount,omitempty"`
	DonationTotalAmount      uint64                        `protobuf:"varint,45,opt,name=donation_total_amount,json=donationTotalAmount,proto3" json:"donation_total_amount,omitempty"`
	DonationAmountPerDay     []uint64                      `protobuf:"varint,46,rep,packed,name=donation_amount_per_day,json=donationAmountPerDay" json:"donation_amount_per_day,omitempty"`
	DonationTotalYuanbao     uint64                        `protobuf:"varint,48,opt,name=donation_total_yuanbao,json=donationTotalYuanbao,proto3" json:"donation_total_yuanbao,omitempty"`
	Salary                   uint64                        `protobuf:"varint,49,opt,name=salary,proto3" json:"salary,omitempty"`
	HistorySalary            uint64                        `protobuf:"varint,50,opt,name=history_salary,json=historySalary,proto3" json:"history_salary,omitempty"`
	WorkshopPrizeCount       uint64                        `protobuf:"varint,51,opt,name=workshop_prize_count,json=workshopPrizeCount,proto3" json:"workshop_prize_count,omitempty"`
}

func (m *GuildMemberServerProto) Reset()                    { *m = GuildMemberServerProto{} }
func (m *GuildMemberServerProto) String() string            { return proto.CompactTextString(m) }
func (*GuildMemberServerProto) ProtoMessage()               {}
func (*GuildMemberServerProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{2} }

func (m *GuildMemberServerProto) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GuildMemberServerProto) GetHero() *HeroBasicSnapshotServerProto {
	if m != nil {
		return m.Hero
	}
	return nil
}

func (m *GuildMemberServerProto) GetIsTechHelpable() bool {
	if m != nil {
		return m.IsTechHelpable
	}
	return false
}

func (m *GuildMemberServerProto) GetClassTitle() uint64 {
	if m != nil {
		return m.ClassTitle
	}
	return 0
}

func (m *GuildMemberServerProto) GetClassLevel() uint64 {
	if m != nil {
		return m.ClassLevel
	}
	return 0
}

func (m *GuildMemberServerProto) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *GuildMemberServerProto) GetHufuAmount() uint64 {
	if m != nil {
		return m.HufuAmount
	}
	return 0
}

func (m *GuildMemberServerProto) GetHufuTotalAmount() uint64 {
	if m != nil {
		return m.HufuTotalAmount
	}
	return 0
}

func (m *GuildMemberServerProto) GetHufuAmountPerDay() []uint64 {
	if m != nil {
		return m.HufuAmountPerDay
	}
	return nil
}

func (m *GuildMemberServerProto) GetContributionAmount() uint64 {
	if m != nil {
		return m.ContributionAmount
	}
	return 0
}

func (m *GuildMemberServerProto) GetContributionTotalAmount() uint64 {
	if m != nil {
		return m.ContributionTotalAmount
	}
	return 0
}

func (m *GuildMemberServerProto) GetContributionAmountPerDay() []uint64 {
	if m != nil {
		return m.ContributionAmountPerDay
	}
	return nil
}

func (m *GuildMemberServerProto) GetDonationAmount() uint64 {
	if m != nil {
		return m.DonationAmount
	}
	return 0
}

func (m *GuildMemberServerProto) GetDonationTotalAmount() uint64 {
	if m != nil {
		return m.DonationTotalAmount
	}
	return 0
}

func (m *GuildMemberServerProto) GetDonationAmountPerDay() []uint64 {
	if m != nil {
		return m.DonationAmountPerDay
	}
	return nil
}

func (m *GuildMemberServerProto) GetDonationTotalYuanbao() uint64 {
	if m != nil {
		return m.DonationTotalYuanbao
	}
	return 0
}

func (m *GuildMemberServerProto) GetSalary() uint64 {
	if m != nil {
		return m.Salary
	}
	return 0
}

func (m *GuildMemberServerProto) GetHistorySalary() uint64 {
	if m != nil {
		return m.HistorySalary
	}
	return 0
}

func (m *GuildMemberServerProto) GetWorkshopPrizeCount() uint64 {
	if m != nil {
		return m.WorkshopPrizeCount
	}
	return 0
}

// 弹劾盟主
type GuildImpeachServerProto struct {
	ImpeachStartTime int64   `protobuf:"varint,11,opt,name=impeach_start_time,json=impeachStartTime,proto3" json:"impeach_start_time,omitempty"`
	ImpeachEndTime   int64   `protobuf:"varint,1,opt,name=impeach_end_time,json=impeachEndTime,proto3" json:"impeach_end_time,omitempty"`
	Candidates       []int64 `protobuf:"varint,2,rep,packed,name=candidates" json:"candidates,omitempty"`
	ImpeachMemberId  int64   `protobuf:"varint,3,opt,name=impeach_member_id,json=impeachMemberId,proto3" json:"impeach_member_id,omitempty"`
	VoteHeros        []int64 `protobuf:"varint,4,rep,packed,name=vote_heros,json=voteHeros" json:"vote_heros,omitempty"`
	VoteTarget       []int64 `protobuf:"varint,5,rep,packed,name=vote_target,json=voteTarget" json:"vote_target,omitempty"`
}

func (m *GuildImpeachServerProto) Reset()                    { *m = GuildImpeachServerProto{} }
func (m *GuildImpeachServerProto) String() string            { return proto.CompactTextString(m) }
func (*GuildImpeachServerProto) ProtoMessage()               {}
func (*GuildImpeachServerProto) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{3} }

func (m *GuildImpeachServerProto) GetImpeachStartTime() int64 {
	if m != nil {
		return m.ImpeachStartTime
	}
	return 0
}

func (m *GuildImpeachServerProto) GetImpeachEndTime() int64 {
	if m != nil {
		return m.ImpeachEndTime
	}
	return 0
}

func (m *GuildImpeachServerProto) GetCandidates() []int64 {
	if m != nil {
		return m.Candidates
	}
	return nil
}

func (m *GuildImpeachServerProto) GetImpeachMemberId() int64 {
	if m != nil {
		return m.ImpeachMemberId
	}
	return 0
}

func (m *GuildImpeachServerProto) GetVoteHeros() []int64 {
	if m != nil {
		return m.VoteHeros
	}
	return nil
}

func (m *GuildImpeachServerProto) GetVoteTarget() []int64 {
	if m != nil {
		return m.VoteTarget
	}
	return nil
}

func init() {
	proto.RegisterType((*GuildServerProto)(nil), "proto.GuildServerProto")
	proto.RegisterType((*GuildWorkshopServerProto)(nil), "proto.GuildWorkshopServerProto")
	proto.RegisterType((*GuildMemberServerProto)(nil), "proto.GuildMemberServerProto")
	proto.RegisterType((*GuildImpeachServerProto)(nil), "proto.GuildImpeachServerProto")
	proto.RegisterEnum("proto.GuildTaskType", GuildTaskType_name, GuildTaskType_value)
}
func (m *GuildServerProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildServerProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.FlagName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.FlagName)))
		i += copy(dAtA[i:], m.FlagName)
	}
	if m.FlagType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.FlagType))
	}
	if m.Level != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Level))
	}
	if len(m.Text) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	if len(m.InternalText) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.InternalText)))
		i += copy(dAtA[i:], m.InternalText)
	}
	if len(m.Labels) > 0 {
		for _, s := range m.Labels {
			dAtA[i] = 0x52
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.RejectAutoJoin {
		dAtA[i] = 0x58
		i++
		if m.RejectAutoJoin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.RequiredHeroLevel != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.RequiredHeroLevel))
	}
	if m.RequiredJunXianLevel != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.RequiredJunXianLevel))
	}
	if m.RequiredTowerMaxFloor != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.RequiredTowerMaxFloor))
	}
	if len(m.ClassNames) > 0 {
		for _, s := range m.ClassNames {
			dAtA[i] = 0xaa
			i++
			dAtA[i] = 0x1
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Members) > 0 {
		for _, msg := range m.Members {
			dAtA[i] = 0xb2
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintGuild(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ChangeLeaderId != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.ChangeLeaderId))
	}
	if m.ChangeLeaderTime != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.ChangeLeaderTime))
	}
	if m.NextChangeNameTime != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.NextChangeNameTime))
	}
	if m.ImpeachLeader != nil {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.ImpeachLeader.Size()))
		n1, err := m.ImpeachLeader.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.InvateHeroIds) > 0 {
		dAtA3 := make([]byte, len(m.InvateHeroIds)*10)
		var j2 int
		for _, num1 := range m.InvateHeroIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGuild(dAtA, i, uint64(j2))
		i += copy(dAtA[i:], dAtA3[:j2])
	}
	if len(m.InvateExpiredTime) > 0 {
		dAtA5 := make([]byte, len(m.InvateExpiredTime)*10)
		var j4 int
		for _, num1 := range m.InvateExpiredTime {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGuild(dAtA, i, uint64(j4))
		i += copy(dAtA[i:], dAtA5[:j4])
	}
	if len(m.RequestJoinHeroIds) > 0 {
		dAtA7 := make([]byte, len(m.RequestJoinHeroIds)*10)
		var j6 int
		for _, num1 := range m.RequestJoinHeroIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGuild(dAtA, i, uint64(j6))
		i += copy(dAtA[i:], dAtA7[:j6])
	}
	if len(m.RequestJoinExpiredTime) > 0 {
		dAtA9 := make([]byte, len(m.RequestJoinExpiredTime)*10)
		var j8 int
		for _, num1 := range m.RequestJoinExpiredTime {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGuild(dAtA, i, uint64(j8))
		i += copy(dAtA[i:], dAtA9[:j8])
	}
	if m.FreeChangeName {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x1
		i++
		if m.FreeChangeName {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.KickMemberCount != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.KickMemberCount))
	}
	if m.ClassTitle != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.ClassTitle.Size()))
		n10, err := m.ClassTitle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.Country != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Country))
	}
	if m.Prestige != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Prestige))
	}
	if len(m.PrestigeDaily) > 0 {
		dAtA12 := make([]byte, len(m.PrestigeDaily)*10)
		var j11 int
		for _, num := range m.PrestigeDaily {
			for num >= 1<<7 {
				dAtA12[j11] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j11++
			}
			dAtA12[j11] = uint8(num)
			j11++
		}
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintGuild(dAtA, i, uint64(j11))
		i += copy(dAtA[i:], dAtA12[:j11])
	}
	if m.HistoryMaxPrestige != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.HistoryMaxPrestige))
	}
	if m.LastPrestigeRank != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.LastPrestigeRank))
	}
	if len(m.PrestigeCoreHourly) > 0 {
		dAtA14 := make([]byte, len(m.PrestigeCoreHourly)*10)
		var j13 int
		for _, num := range m.PrestigeCoreHourly {
			for num >= 1<<7 {
				dAtA14[j13] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j13++
			}
			dAtA14[j13] = uint8(num)
			j13++
		}
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintGuild(dAtA, i, uint64(j13))
		i += copy(dAtA[i:], dAtA14[:j13])
	}
	if m.BuildingAmount != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.BuildingAmount))
	}
	if m.UpgradeEndTime != 0 {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.UpgradeEndTime))
	}
	if m.CdrTimes != 0 {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.CdrTimes))
	}
	if m.UpdateBuildingAmountTime != 0 {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.UpdateBuildingAmountTime))
	}
	if m.CreateTime != 0 {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.CreateTime))
	}
	if m.Hufu != 0 {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Hufu))
	}
	if m.Yinliang != 0 {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Yinliang))
	}
	if len(m.FriendGuildText) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.FriendGuildText)))
		i += copy(dAtA[i:], m.FriendGuildText)
	}
	if len(m.EnemyGuildText) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.EnemyGuildText)))
		i += copy(dAtA[i:], m.EnemyGuildText)
	}
	if len(m.DonateRecords) > 0 {
		for _, msg := range m.DonateRecords {
			dAtA[i] = 0xba
			i++
			dAtA[i] = 0x3
			i++
			i = encodeVarintGuild(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.BigEvents) > 0 {
		for _, msg := range m.BigEvents {
			dAtA[i] = 0xc2
			i++
			dAtA[i] = 0x3
			i++
			i = encodeVarintGuild(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Dynamics) > 0 {
		for _, msg := range m.Dynamics {
			dAtA[i] = 0xca
			i++
			dAtA[i] = 0x3
			i++
			i = encodeVarintGuild(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.CompleteGuildTargetTimes != 0 {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.CompleteGuildTargetTimes))
	}
	if m.StatueRealmId != 0 {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.StatueRealmId))
	}
	if len(m.SeekHelp) > 0 {
		for _, msg := range m.SeekHelp {
			dAtA[i] = 0xf2
			i++
			dAtA[i] = 0x3
			i++
			i = encodeVarintGuild(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.BigBoxId != 0 {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.BigBoxId))
	}
	if m.BigBoxEnergy != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.BigBoxEnergy))
	}
	if m.FullBigBoxId != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.FullBigBoxId))
	}
	if len(m.FullBigBoxMemberIds) > 0 {
		dAtA16 := make([]byte, len(m.FullBigBoxMemberIds)*10)
		var j15 int
		for _, num1 := range m.FullBigBoxMemberIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA16[j15] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j15++
			}
			dAtA16[j15] = uint8(num)
			j15++
		}
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintGuild(dAtA, i, uint64(j15))
		i += copy(dAtA[i:], dAtA16[:j15])
	}
	if len(m.Technologys) > 0 {
		dAtA18 := make([]byte, len(m.Technologys)*10)
		var j17 int
		for _, num := range m.Technologys {
			for num >= 1<<7 {
				dAtA18[j17] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j17++
			}
			dAtA18[j17] = uint8(num)
			j17++
		}
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintGuild(dAtA, i, uint64(j17))
		i += copy(dAtA[i:], dAtA18[:j17])
	}
	if m.UpgradeTechnology != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.UpgradeTechnology))
	}
	if m.TechUpgradeEndTime != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.TechUpgradeEndTime))
	}
	if m.TechCdrTimes != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.TechCdrTimes))
	}
	if m.NextUpdatePrestigeTargetTime != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.NextUpdatePrestigeTargetTime))
	}
	if m.IsStartResistXiongNuToday {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x4
		i++
		if m.IsStartResistXiongNuToday {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.ResistXiongNuDefenders) > 0 {
		dAtA20 := make([]byte, len(m.ResistXiongNuDefenders)*10)
		var j19 int
		for _, num1 := range m.ResistXiongNuDefenders {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA20[j19] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j19++
			}
			dAtA20[j19] = uint8(num)
			j19++
		}
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintGuild(dAtA, i, uint64(j19))
		i += copy(dAtA[i:], dAtA20[:j19])
	}
	if m.UnlockResistXiongNuLevel != 0 {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.UnlockResistXiongNuLevel))
	}
	if m.LastResistXiongNu != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x4
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.LastResistXiongNu.Size()))
		n21, err := m.LastResistXiongNu.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if len(m.MemberLeaveTimeMap) > 0 {
		for k, _ := range m.MemberLeaveTimeMap {
			dAtA[i] = 0xfa
			i++
			dAtA[i] = 0x4
			i++
			v := m.MemberLeaveTimeMap[k]
			mapSize := 1 + sovGuild(uint64(k)) + 1 + sovGuild(uint64(v))
			i = encodeVarintGuild(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintGuild(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			i = encodeVarintGuild(dAtA, i, uint64(v))
		}
	}
	if len(m.Mark) > 0 {
		for _, msg := range m.Mark {
			dAtA[i] = 0x82
			i++
			dAtA[i] = 0x5
			i++
			i = encodeVarintGuild(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Record != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Record.Size()))
		n22, err := m.Record.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	if len(m.YinliangRecord) > 0 {
		for _, msg := range m.YinliangRecord {
			dAtA[i] = 0x92
			i++
			dAtA[i] = 0x5
			i++
			i = encodeVarintGuild(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.LastResistXiongNuFightProto != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.LastResistXiongNuFightProto.Size()))
		n23, err := m.LastResistXiongNuFightProto.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	if len(m.YinliangSendToGuild) > 0 {
		for _, msg := range m.YinliangSendToGuild {
			dAtA[i] = 0xa2
			i++
			dAtA[i] = 0x5
			i++
			i = encodeVarintGuild(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.YinliangSendToMe) > 0 {
		for k, _ := range m.YinliangSendToMe {
			dAtA[i] = 0xaa
			i++
			dAtA[i] = 0x5
			i++
			v := m.YinliangSendToMe[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovGuild(uint64(msgSize))
			}
			mapSize := 1 + sovGuild(uint64(k)) + msgSize
			i = encodeVarintGuild(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintGuild(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintGuild(dAtA, i, uint64(v.Size()))
				n24, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n24
			}
		}
	}
	if len(m.HostMingcIds) > 0 {
		for k, _ := range m.HostMingcIds {
			dAtA[i] = 0xb2
			i++
			dAtA[i] = 0x5
			i++
			v := m.HostMingcIds[k]
			mapSize := 1 + sovGuild(uint64(k)) + 1 + sovGuild(uint64(v))
			i = encodeVarintGuild(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintGuild(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			i = encodeVarintGuild(dAtA, i, uint64(v))
		}
	}
	if m.Workshop != nil {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Workshop.Size()))
		n25, err := m.Workshop.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	if m.WorkshopTodayCompleted {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x5
		i++
		if m.WorkshopTodayCompleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.WorkshopOutput != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.WorkshopOutput))
	}
	if m.WorkshopPrizeCount != 0 {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.WorkshopPrizeCount))
	}
	if m.WorkshopBeenHurtTimes != 0 {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.WorkshopBeenHurtTimes))
	}
	if len(m.RecommendMcBuilds) > 0 {
		dAtA27 := make([]byte, len(m.RecommendMcBuilds)*10)
		var j26 int
		for _, num := range m.RecommendMcBuilds {
			for num >= 1<<7 {
				dAtA27[j26] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j26++
			}
			dAtA27[j26] = uint8(num)
			j26++
		}
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintGuild(dAtA, i, uint64(j26))
		i += copy(dAtA[i:], dAtA27[:j26])
	}
	if len(m.WeeklyTasks) > 0 {
		for k, _ := range m.WeeklyTasks {
			dAtA[i] = 0xea
			i++
			dAtA[i] = 0x5
			i++
			v := m.WeeklyTasks[k]
			mapSize := 1 + sovGuild(uint64(k)) + 1 + sovGuild(uint64(v))
			i = encodeVarintGuild(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintGuild(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			i = encodeVarintGuild(dAtA, i, uint64(v))
		}
	}
	if m.ChangeCountryWaitEndTime != 0 {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.ChangeCountryWaitEndTime))
	}
	if m.ChangeCountryTarget != 0 {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x5
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.ChangeCountryTarget))
	}
	if m.ChangeCountryNextTime != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.ChangeCountryNextTime))
	}
	if m.Template != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Template))
	}
	if m.DailyResetTime != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.DailyResetTime))
	}
	if m.WeeklyResetTime != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.WeeklyResetTime))
	}
	return i, nil
}

func (m *GuildWorkshopServerProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildWorkshopServerProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StartTime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.EndTime))
	}
	if m.IsComplete {
		dAtA[i] = 0x18
		i++
		if m.IsComplete {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.X != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.X))
	}
	if m.Y != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Y))
	}
	if m.Prosperity != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Prosperity))
	}
	if len(m.Log) > 0 {
		for _, msg := range m.Log {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintGuild(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GuildMemberServerProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildMemberServerProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Id))
	}
	if m.IsTechHelpable {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		if m.IsTechHelpable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ClassTitle != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.ClassTitle))
	}
	if m.ClassLevel != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.ClassLevel))
	}
	if m.CreateTime != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.CreateTime))
	}
	if m.Hero != nil {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Hero.Size()))
		n28, err := m.Hero.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	if m.HufuAmount != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.HufuAmount))
	}
	if m.HufuTotalAmount != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.HufuTotalAmount))
	}
	if len(m.HufuAmountPerDay) > 0 {
		dAtA30 := make([]byte, len(m.HufuAmountPerDay)*10)
		var j29 int
		for _, num := range m.HufuAmountPerDay {
			for num >= 1<<7 {
				dAtA30[j29] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j29++
			}
			dAtA30[j29] = uint8(num)
			j29++
		}
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintGuild(dAtA, i, uint64(j29))
		i += copy(dAtA[i:], dAtA30[:j29])
	}
	if m.ContributionAmount != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.ContributionAmount))
	}
	if m.ContributionTotalAmount != 0 {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.ContributionTotalAmount))
	}
	if len(m.ContributionAmountPerDay) > 0 {
		dAtA32 := make([]byte, len(m.ContributionAmountPerDay)*10)
		var j31 int
		for _, num := range m.ContributionAmountPerDay {
			for num >= 1<<7 {
				dAtA32[j31] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j31++
			}
			dAtA32[j31] = uint8(num)
			j31++
		}
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintGuild(dAtA, i, uint64(j31))
		i += copy(dAtA[i:], dAtA32[:j31])
	}
	if m.DonationAmount != 0 {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.DonationAmount))
	}
	if m.DonationTotalAmount != 0 {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.DonationTotalAmount))
	}
	if len(m.DonationAmountPerDay) > 0 {
		dAtA34 := make([]byte, len(m.DonationAmountPerDay)*10)
		var j33 int
		for _, num := range m.DonationAmountPerDay {
			for num >= 1<<7 {
				dAtA34[j33] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j33++
			}
			dAtA34[j33] = uint8(num)
			j33++
		}
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintGuild(dAtA, i, uint64(j33))
		i += copy(dAtA[i:], dAtA34[:j33])
	}
	if m.DonationTotalYuanbao != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.DonationTotalYuanbao))
	}
	if m.Salary != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Salary))
	}
	if m.HistorySalary != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.HistorySalary))
	}
	if m.WorkshopPrizeCount != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x3
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.WorkshopPrizeCount))
	}
	return i, nil
}

func (m *GuildImpeachServerProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildImpeachServerProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ImpeachEndTime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.ImpeachEndTime))
	}
	if len(m.Candidates) > 0 {
		dAtA36 := make([]byte, len(m.Candidates)*10)
		var j35 int
		for _, num1 := range m.Candidates {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA36[j35] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j35++
			}
			dAtA36[j35] = uint8(num)
			j35++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintGuild(dAtA, i, uint64(j35))
		i += copy(dAtA[i:], dAtA36[:j35])
	}
	if m.ImpeachMemberId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.ImpeachMemberId))
	}
	if len(m.VoteHeros) > 0 {
		dAtA38 := make([]byte, len(m.VoteHeros)*10)
		var j37 int
		for _, num1 := range m.VoteHeros {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA38[j37] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j37++
			}
			dAtA38[j37] = uint8(num)
			j37++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintGuild(dAtA, i, uint64(j37))
		i += copy(dAtA[i:], dAtA38[:j37])
	}
	if len(m.VoteTarget) > 0 {
		dAtA40 := make([]byte, len(m.VoteTarget)*10)
		var j39 int
		for _, num1 := range m.VoteTarget {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA40[j39] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j39++
			}
			dAtA40[j39] = uint8(num)
			j39++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGuild(dAtA, i, uint64(j39))
		i += copy(dAtA[i:], dAtA40[:j39])
	}
	if m.ImpeachStartTime != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.ImpeachStartTime))
	}
	return i, nil
}

func encodeFixed64Guild(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Guild(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintGuild(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GuildServerProto) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	l = len(m.FlagName)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.FlagType != 0 {
		n += 1 + sovGuild(uint64(m.FlagType))
	}
	if m.Level != 0 {
		n += 1 + sovGuild(uint64(m.Level))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	l = len(m.InternalText)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if len(m.Labels) > 0 {
		for _, s := range m.Labels {
			l = len(s)
			n += 1 + l + sovGuild(uint64(l))
		}
	}
	if m.RejectAutoJoin {
		n += 2
	}
	if m.RequiredHeroLevel != 0 {
		n += 1 + sovGuild(uint64(m.RequiredHeroLevel))
	}
	if m.RequiredJunXianLevel != 0 {
		n += 1 + sovGuild(uint64(m.RequiredJunXianLevel))
	}
	if m.RequiredTowerMaxFloor != 0 {
		n += 1 + sovGuild(uint64(m.RequiredTowerMaxFloor))
	}
	if len(m.ClassNames) > 0 {
		for _, s := range m.ClassNames {
			l = len(s)
			n += 2 + l + sovGuild(uint64(l))
		}
	}
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 2 + l + sovGuild(uint64(l))
		}
	}
	if m.ChangeLeaderId != 0 {
		n += 2 + sovGuild(uint64(m.ChangeLeaderId))
	}
	if m.ChangeLeaderTime != 0 {
		n += 2 + sovGuild(uint64(m.ChangeLeaderTime))
	}
	if m.NextChangeNameTime != 0 {
		n += 2 + sovGuild(uint64(m.NextChangeNameTime))
	}
	if m.ImpeachLeader != nil {
		l = m.ImpeachLeader.Size()
		n += 2 + l + sovGuild(uint64(l))
	}
	if len(m.InvateHeroIds) > 0 {
		l = 0
		for _, e := range m.InvateHeroIds {
			l += sovGuild(uint64(e))
		}
		n += 2 + sovGuild(uint64(l)) + l
	}
	if len(m.InvateExpiredTime) > 0 {
		l = 0
		for _, e := range m.InvateExpiredTime {
			l += sovGuild(uint64(e))
		}
		n += 2 + sovGuild(uint64(l)) + l
	}
	if len(m.RequestJoinHeroIds) > 0 {
		l = 0
		for _, e := range m.RequestJoinHeroIds {
			l += sovGuild(uint64(e))
		}
		n += 2 + sovGuild(uint64(l)) + l
	}
	if len(m.RequestJoinExpiredTime) > 0 {
		l = 0
		for _, e := range m.RequestJoinExpiredTime {
			l += sovGuild(uint64(e))
		}
		n += 2 + sovGuild(uint64(l)) + l
	}
	if m.FreeChangeName {
		n += 3
	}
	if m.KickMemberCount != 0 {
		n += 2 + sovGuild(uint64(m.KickMemberCount))
	}
	if m.ClassTitle != nil {
		l = m.ClassTitle.Size()
		n += 2 + l + sovGuild(uint64(l))
	}
	if m.Country != 0 {
		n += 2 + sovGuild(uint64(m.Country))
	}
	if m.Prestige != 0 {
		n += 2 + sovGuild(uint64(m.Prestige))
	}
	if len(m.PrestigeDaily) > 0 {
		l = 0
		for _, e := range m.PrestigeDaily {
			l += sovGuild(uint64(e))
		}
		n += 2 + sovGuild(uint64(l)) + l
	}
	if m.HistoryMaxPrestige != 0 {
		n += 2 + sovGuild(uint64(m.HistoryMaxPrestige))
	}
	if m.LastPrestigeRank != 0 {
		n += 2 + sovGuild(uint64(m.LastPrestigeRank))
	}
	if len(m.PrestigeCoreHourly) > 0 {
		l = 0
		for _, e := range m.PrestigeCoreHourly {
			l += sovGuild(uint64(e))
		}
		n += 2 + sovGuild(uint64(l)) + l
	}
	if m.BuildingAmount != 0 {
		n += 2 + sovGuild(uint64(m.BuildingAmount))
	}
	if m.UpgradeEndTime != 0 {
		n += 2 + sovGuild(uint64(m.UpgradeEndTime))
	}
	if m.CdrTimes != 0 {
		n += 2 + sovGuild(uint64(m.CdrTimes))
	}
	if m.UpdateBuildingAmountTime != 0 {
		n += 2 + sovGuild(uint64(m.UpdateBuildingAmountTime))
	}
	if m.CreateTime != 0 {
		n += 2 + sovGuild(uint64(m.CreateTime))
	}
	if m.Hufu != 0 {
		n += 2 + sovGuild(uint64(m.Hufu))
	}
	if m.Yinliang != 0 {
		n += 2 + sovGuild(uint64(m.Yinliang))
	}
	l = len(m.FriendGuildText)
	if l > 0 {
		n += 2 + l + sovGuild(uint64(l))
	}
	l = len(m.EnemyGuildText)
	if l > 0 {
		n += 2 + l + sovGuild(uint64(l))
	}
	if len(m.DonateRecords) > 0 {
		for _, e := range m.DonateRecords {
			l = e.Size()
			n += 2 + l + sovGuild(uint64(l))
		}
	}
	if len(m.BigEvents) > 0 {
		for _, e := range m.BigEvents {
			l = e.Size()
			n += 2 + l + sovGuild(uint64(l))
		}
	}
	if len(m.Dynamics) > 0 {
		for _, e := range m.Dynamics {
			l = e.Size()
			n += 2 + l + sovGuild(uint64(l))
		}
	}
	if m.CompleteGuildTargetTimes != 0 {
		n += 2 + sovGuild(uint64(m.CompleteGuildTargetTimes))
	}
	if m.StatueRealmId != 0 {
		n += 2 + sovGuild(uint64(m.StatueRealmId))
	}
	if len(m.SeekHelp) > 0 {
		for _, e := range m.SeekHelp {
			l = e.Size()
			n += 2 + l + sovGuild(uint64(l))
		}
	}
	if m.BigBoxId != 0 {
		n += 2 + sovGuild(uint64(m.BigBoxId))
	}
	if m.BigBoxEnergy != 0 {
		n += 2 + sovGuild(uint64(m.BigBoxEnergy))
	}
	if m.FullBigBoxId != 0 {
		n += 2 + sovGuild(uint64(m.FullBigBoxId))
	}
	if len(m.FullBigBoxMemberIds) > 0 {
		l = 0
		for _, e := range m.FullBigBoxMemberIds {
			l += sovGuild(uint64(e))
		}
		n += 2 + sovGuild(uint64(l)) + l
	}
	if len(m.Technologys) > 0 {
		l = 0
		for _, e := range m.Technologys {
			l += sovGuild(uint64(e))
		}
		n += 2 + sovGuild(uint64(l)) + l
	}
	if m.UpgradeTechnology != 0 {
		n += 2 + sovGuild(uint64(m.UpgradeTechnology))
	}
	if m.TechUpgradeEndTime != 0 {
		n += 2 + sovGuild(uint64(m.TechUpgradeEndTime))
	}
	if m.TechCdrTimes != 0 {
		n += 2 + sovGuild(uint64(m.TechCdrTimes))
	}
	if m.NextUpdatePrestigeTargetTime != 0 {
		n += 2 + sovGuild(uint64(m.NextUpdatePrestigeTargetTime))
	}
	if m.IsStartResistXiongNuToday {
		n += 3
	}
	if len(m.ResistXiongNuDefenders) > 0 {
		l = 0
		for _, e := range m.ResistXiongNuDefenders {
			l += sovGuild(uint64(e))
		}
		n += 2 + sovGuild(uint64(l)) + l
	}
	if m.UnlockResistXiongNuLevel != 0 {
		n += 2 + sovGuild(uint64(m.UnlockResistXiongNuLevel))
	}
	if m.LastResistXiongNu != nil {
		l = m.LastResistXiongNu.Size()
		n += 2 + l + sovGuild(uint64(l))
	}
	if len(m.MemberLeaveTimeMap) > 0 {
		for k, v := range m.MemberLeaveTimeMap {
			_ = k
			_ = v
			mapEntrySize := 1 + sovGuild(uint64(k)) + 1 + sovGuild(uint64(v))
			n += mapEntrySize + 2 + sovGuild(uint64(mapEntrySize))
		}
	}
	if len(m.Mark) > 0 {
		for _, e := range m.Mark {
			l = e.Size()
			n += 2 + l + sovGuild(uint64(l))
		}
	}
	if m.Record != nil {
		l = m.Record.Size()
		n += 2 + l + sovGuild(uint64(l))
	}
	if len(m.YinliangRecord) > 0 {
		for _, e := range m.YinliangRecord {
			l = e.Size()
			n += 2 + l + sovGuild(uint64(l))
		}
	}
	if m.LastResistXiongNuFightProto != nil {
		l = m.LastResistXiongNuFightProto.Size()
		n += 2 + l + sovGuild(uint64(l))
	}
	if len(m.YinliangSendToGuild) > 0 {
		for _, e := range m.YinliangSendToGuild {
			l = e.Size()
			n += 2 + l + sovGuild(uint64(l))
		}
	}
	if len(m.YinliangSendToMe) > 0 {
		for k, v := range m.YinliangSendToMe {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovGuild(uint64(l))
			}
			mapEntrySize := 1 + sovGuild(uint64(k)) + l
			n += mapEntrySize + 2 + sovGuild(uint64(mapEntrySize))
		}
	}
	if len(m.HostMingcIds) > 0 {
		for k, v := range m.HostMingcIds {
			_ = k
			_ = v
			mapEntrySize := 1 + sovGuild(uint64(k)) + 1 + sovGuild(uint64(v))
			n += mapEntrySize + 2 + sovGuild(uint64(mapEntrySize))
		}
	}
	if m.Workshop != nil {
		l = m.Workshop.Size()
		n += 2 + l + sovGuild(uint64(l))
	}
	if m.WorkshopTodayCompleted {
		n += 3
	}
	if m.WorkshopOutput != 0 {
		n += 2 + sovGuild(uint64(m.WorkshopOutput))
	}
	if m.WorkshopPrizeCount != 0 {
		n += 2 + sovGuild(uint64(m.WorkshopPrizeCount))
	}
	if m.WorkshopBeenHurtTimes != 0 {
		n += 2 + sovGuild(uint64(m.WorkshopBeenHurtTimes))
	}
	if len(m.RecommendMcBuilds) > 0 {
		l = 0
		for _, e := range m.RecommendMcBuilds {
			l += sovGuild(uint64(e))
		}
		n += 2 + sovGuild(uint64(l)) + l
	}
	if len(m.WeeklyTasks) > 0 {
		for k, v := range m.WeeklyTasks {
			_ = k
			_ = v
			mapEntrySize := 1 + sovGuild(uint64(k)) + 1 + sovGuild(uint64(v))
			n += mapEntrySize + 2 + sovGuild(uint64(mapEntrySize))
		}
	}
	if m.ChangeCountryWaitEndTime != 0 {
		n += 2 + sovGuild(uint64(m.ChangeCountryWaitEndTime))
	}
	if m.ChangeCountryTarget != 0 {
		n += 2 + sovGuild(uint64(m.ChangeCountryTarget))
	}
	if m.ChangeCountryNextTime != 0 {
		n += 2 + sovGuild(uint64(m.ChangeCountryNextTime))
	}
	if m.Template != 0 {
		n += 2 + sovGuild(uint64(m.Template))
	}
	if m.DailyResetTime != 0 {
		n += 2 + sovGuild(uint64(m.DailyResetTime))
	}
	if m.WeeklyResetTime != 0 {
		n += 2 + sovGuild(uint64(m.WeeklyResetTime))
	}
	return n
}

func (m *GuildWorkshopServerProto) Size() (n int) {
	var l int
	_ = l
	if m.StartTime != 0 {
		n += 1 + sovGuild(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovGuild(uint64(m.EndTime))
	}
	if m.IsComplete {
		n += 2
	}
	if m.X != 0 {
		n += 1 + sovGuild(uint64(m.X))
	}
	if m.Y != 0 {
		n += 1 + sovGuild(uint64(m.Y))
	}
	if m.Prosperity != 0 {
		n += 1 + sovGuild(uint64(m.Prosperity))
	}
	if len(m.Log) > 0 {
		for _, e := range m.Log {
			l = e.Size()
			n += 1 + l + sovGuild(uint64(l))
		}
	}
	return n
}

func (m *GuildMemberServerProto) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGuild(uint64(m.Id))
	}
	if m.IsTechHelpable {
		n += 3
	}
	if m.ClassTitle != 0 {
		n += 2 + sovGuild(uint64(m.ClassTitle))
	}
	if m.ClassLevel != 0 {
		n += 2 + sovGuild(uint64(m.ClassLevel))
	}
	if m.CreateTime != 0 {
		n += 2 + sovGuild(uint64(m.CreateTime))
	}
	if m.Hero != nil {
		l = m.Hero.Size()
		n += 2 + l + sovGuild(uint64(l))
	}
	if m.HufuAmount != 0 {
		n += 2 + sovGuild(uint64(m.HufuAmount))
	}
	if m.HufuTotalAmount != 0 {
		n += 2 + sovGuild(uint64(m.HufuTotalAmount))
	}
	if len(m.HufuAmountPerDay) > 0 {
		l = 0
		for _, e := range m.HufuAmountPerDay {
			l += sovGuild(uint64(e))
		}
		n += 2 + sovGuild(uint64(l)) + l
	}
	if m.ContributionAmount != 0 {
		n += 2 + sovGuild(uint64(m.ContributionAmount))
	}
	if m.ContributionTotalAmount != 0 {
		n += 2 + sovGuild(uint64(m.ContributionTotalAmount))
	}
	if len(m.ContributionAmountPerDay) > 0 {
		l = 0
		for _, e := range m.ContributionAmountPerDay {
			l += sovGuild(uint64(e))
		}
		n += 2 + sovGuild(uint64(l)) + l
	}
	if m.DonationAmount != 0 {
		n += 2 + sovGuild(uint64(m.DonationAmount))
	}
	if m.DonationTotalAmount != 0 {
		n += 2 + sovGuild(uint64(m.DonationTotalAmount))
	}
	if len(m.DonationAmountPerDay) > 0 {
		l = 0
		for _, e := range m.DonationAmountPerDay {
			l += sovGuild(uint64(e))
		}
		n += 2 + sovGuild(uint64(l)) + l
	}
	if m.DonationTotalYuanbao != 0 {
		n += 2 + sovGuild(uint64(m.DonationTotalYuanbao))
	}
	if m.Salary != 0 {
		n += 2 + sovGuild(uint64(m.Salary))
	}
	if m.HistorySalary != 0 {
		n += 2 + sovGuild(uint64(m.HistorySalary))
	}
	if m.WorkshopPrizeCount != 0 {
		n += 2 + sovGuild(uint64(m.WorkshopPrizeCount))
	}
	return n
}

func (m *GuildImpeachServerProto) Size() (n int) {
	var l int
	_ = l
	if m.ImpeachEndTime != 0 {
		n += 1 + sovGuild(uint64(m.ImpeachEndTime))
	}
	if len(m.Candidates) > 0 {
		l = 0
		for _, e := range m.Candidates {
			l += sovGuild(uint64(e))
		}
		n += 1 + sovGuild(uint64(l)) + l
	}
	if m.ImpeachMemberId != 0 {
		n += 1 + sovGuild(uint64(m.ImpeachMemberId))
	}
	if len(m.VoteHeros) > 0 {
		l = 0
		for _, e := range m.VoteHeros {
			l += sovGuild(uint64(e))
		}
		n += 1 + sovGuild(uint64(l)) + l
	}
	if len(m.VoteTarget) > 0 {
		l = 0
		for _, e := range m.VoteTarget {
			l += sovGuild(uint64(e))
		}
		n += 1 + sovGuild(uint64(l)) + l
	}
	if m.ImpeachStartTime != 0 {
		n += 1 + sovGuild(uint64(m.ImpeachStartTime))
	}
	return n
}

func sovGuild(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGuild(x uint64) (n int) {
	return sovGuild(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GuildServerProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildServerProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildServerProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlagName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FlagName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlagType", wireType)
			}
			m.FlagType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlagType |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Labels = append(m.Labels, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejectAutoJoin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RejectAutoJoin = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredHeroLevel", wireType)
			}
			m.RequiredHeroLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequiredHeroLevel |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredJunXianLevel", wireType)
			}
			m.RequiredJunXianLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequiredJunXianLevel |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequiredTowerMaxFloor", wireType)
			}
			m.RequiredTowerMaxFloor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequiredTowerMaxFloor |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassNames = append(m.ClassNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &GuildMemberServerProto{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeLeaderId", wireType)
			}
			m.ChangeLeaderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChangeLeaderId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeLeaderTime", wireType)
			}
			m.ChangeLeaderTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChangeLeaderTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextChangeNameTime", wireType)
			}
			m.NextChangeNameTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextChangeNameTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImpeachLeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ImpeachLeader == nil {
				m.ImpeachLeader = &GuildImpeachServerProto{}
			}
			if err := m.ImpeachLeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.InvateHeroIds = append(m.InvateHeroIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGuild
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.InvateHeroIds = append(m.InvateHeroIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field InvateHeroIds", wireType)
			}
		case 28:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.InvateExpiredTime = append(m.InvateExpiredTime, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGuild
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.InvateExpiredTime = append(m.InvateExpiredTime, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field InvateExpiredTime", wireType)
			}
		case 29:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RequestJoinHeroIds = append(m.RequestJoinHeroIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGuild
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RequestJoinHeroIds = append(m.RequestJoinHeroIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestJoinHeroIds", wireType)
			}
		case 30:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RequestJoinExpiredTime = append(m.RequestJoinExpiredTime, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGuild
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RequestJoinExpiredTime = append(m.RequestJoinExpiredTime, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestJoinExpiredTime", wireType)
			}
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreeChangeName", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FreeChangeName = bool(v != 0)
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KickMemberCount", wireType)
			}
			m.KickMemberCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KickMemberCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassTitle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClassTitle == nil {
				m.ClassTitle = &proto10.GuildClassTitleProto{}
			}
			if err := m.ClassTitle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			m.Country = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Country |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prestige", wireType)
			}
			m.Prestige = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Prestige |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 36:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PrestigeDaily = append(m.PrestigeDaily, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGuild
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PrestigeDaily = append(m.PrestigeDaily, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PrestigeDaily", wireType)
			}
		case 37:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryMaxPrestige", wireType)
			}
			m.HistoryMaxPrestige = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HistoryMaxPrestige |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 38:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPrestigeRank", wireType)
			}
			m.LastPrestigeRank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastPrestigeRank |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 39:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PrestigeCoreHourly = append(m.PrestigeCoreHourly, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGuild
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PrestigeCoreHourly = append(m.PrestigeCoreHourly, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PrestigeCoreHourly", wireType)
			}
		case 41:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildingAmount", wireType)
			}
			m.BuildingAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuildingAmount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 42:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgradeEndTime", wireType)
			}
			m.UpgradeEndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpgradeEndTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 43:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CdrTimes", wireType)
			}
			m.CdrTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CdrTimes |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 44:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateBuildingAmountTime", wireType)
			}
			m.UpdateBuildingAmountTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateBuildingAmountTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 45:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 46:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hufu", wireType)
			}
			m.Hufu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hufu |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 47:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Yinliang", wireType)
			}
			m.Yinliang = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Yinliang |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 50:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendGuildText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FriendGuildText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 51:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnemyGuildText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnemyGuildText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 55:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DonateRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DonateRecords = append(m.DonateRecords, &proto10.GuildDonateRecordProto{})
			if err := m.DonateRecords[len(m.DonateRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 56:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BigEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BigEvents = append(m.BigEvents, &proto10.GuildBigEventProto{})
			if err := m.BigEvents[len(m.BigEvents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dynamics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dynamics = append(m.Dynamics, &proto10.GuildDynamicProto{})
			if err := m.Dynamics[len(m.Dynamics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 58:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompleteGuildTargetTimes", wireType)
			}
			m.CompleteGuildTargetTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompleteGuildTargetTimes |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 59:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatueRealmId", wireType)
			}
			m.StatueRealmId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatueRealmId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 62:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeekHelp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SeekHelp = append(m.SeekHelp, &proto10.GuildSeekHelpProto{})
			if err := m.SeekHelp[len(m.SeekHelp)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 63:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BigBoxId", wireType)
			}
			m.BigBoxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BigBoxId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 64:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BigBoxEnergy", wireType)
			}
			m.BigBoxEnergy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BigBoxEnergy |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 65:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullBigBoxId", wireType)
			}
			m.FullBigBoxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FullBigBoxId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 66:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.FullBigBoxMemberIds = append(m.FullBigBoxMemberIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGuild
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.FullBigBoxMemberIds = append(m.FullBigBoxMemberIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field FullBigBoxMemberIds", wireType)
			}
		case 67:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Technologys = append(m.Technologys, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGuild
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Technologys = append(m.Technologys, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Technologys", wireType)
			}
		case 68:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpgradeTechnology", wireType)
			}
			m.UpgradeTechnology = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpgradeTechnology |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 69:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TechUpgradeEndTime", wireType)
			}
			m.TechUpgradeEndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TechUpgradeEndTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 70:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TechCdrTimes", wireType)
			}
			m.TechCdrTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TechCdrTimes |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 71:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextUpdatePrestigeTargetTime", wireType)
			}
			m.NextUpdatePrestigeTargetTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextUpdatePrestigeTargetTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 75:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsStartResistXiongNuToday", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsStartResistXiongNuToday = bool(v != 0)
		case 76:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ResistXiongNuDefenders = append(m.ResistXiongNuDefenders, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGuild
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ResistXiongNuDefenders = append(m.ResistXiongNuDefenders, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ResistXiongNuDefenders", wireType)
			}
		case 77:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockResistXiongNuLevel", wireType)
			}
			m.UnlockResistXiongNuLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnlockResistXiongNuLevel |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 78:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastResistXiongNu", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastResistXiongNu == nil {
				m.LastResistXiongNu = &proto9.LastResistXiongNuProto{}
			}
			if err := m.LastResistXiongNu.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 79:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberLeaveTimeMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapkey int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				mapkey |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if m.MemberLeaveTimeMap == nil {
				m.MemberLeaveTimeMap = make(map[int64]int64)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapvalue int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					mapvalue |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MemberLeaveTimeMap[mapkey] = mapvalue
			} else {
				var mapvalue int64
				m.MemberLeaveTimeMap[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 80:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mark", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mark = append(m.Mark, &proto10.GuildMarkProto{})
			if err := m.Mark[len(m.Mark)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 81:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Record == nil {
				m.Record = &proto10.McWarAllRecordProto{}
			}
			if err := m.Record.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 82:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field YinliangRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.YinliangRecord = append(m.YinliangRecord, &proto10.GuildYinliangRecordProto{})
			if err := m.YinliangRecord[len(m.YinliangRecord)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 83:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastResistXiongNuFightProto", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastResistXiongNuFightProto == nil {
				m.LastResistXiongNuFightProto = &proto9.ResistXiongNuFightProto{}
			}
			if err := m.LastResistXiongNuFightProto.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 84:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field YinliangSendToGuild", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.YinliangSendToGuild = append(m.YinliangSendToGuild, &proto10.GuildYinliangSendToGuildProto{})
			if err := m.YinliangSendToGuild[len(m.YinliangSendToGuild)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 85:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field YinliangSendToMe", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapkey int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				mapkey |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if m.YinliangSendToMe == nil {
				m.YinliangSendToMe = make(map[int64]*proto10.GuildYinliangSendProto)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapmsglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					mapmsglen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if mapmsglen < 0 {
					return ErrInvalidLengthGuild
				}
				postmsgIndex := iNdEx + mapmsglen
				if mapmsglen < 0 {
					return ErrInvalidLengthGuild
				}
				if postmsgIndex > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := &proto10.GuildYinliangSendProto{}
				if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
					return err
				}
				iNdEx = postmsgIndex
				m.YinliangSendToMe[mapkey] = mapvalue
			} else {
				var mapvalue *proto10.GuildYinliangSendProto
				m.YinliangSendToMe[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 86:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostMingcIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				mapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if m.HostMingcIds == nil {
				m.HostMingcIds = make(map[uint64]int64)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapvalue int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					mapvalue |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.HostMingcIds[mapkey] = mapvalue
			} else {
				var mapvalue int64
				m.HostMingcIds[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 87:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workshop", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Workshop == nil {
				m.Workshop = &GuildWorkshopServerProto{}
			}
			if err := m.Workshop.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 88:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkshopTodayCompleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WorkshopTodayCompleted = bool(v != 0)
		case 89:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkshopOutput", wireType)
			}
			m.WorkshopOutput = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkshopOutput |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 90:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkshopPrizeCount", wireType)
			}
			m.WorkshopPrizeCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkshopPrizeCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 91:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkshopBeenHurtTimes", wireType)
			}
			m.WorkshopBeenHurtTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkshopBeenHurtTimes |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 92:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RecommendMcBuilds = append(m.RecommendMcBuilds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGuild
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RecommendMcBuilds = append(m.RecommendMcBuilds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RecommendMcBuilds", wireType)
			}
		case 93:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeeklyTasks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapkey int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				mapkey |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if m.WeeklyTasks == nil {
				m.WeeklyTasks = make(map[int32]uint64)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					mapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.WeeklyTasks[mapkey] = mapvalue
			} else {
				var mapvalue uint64
				m.WeeklyTasks[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 94:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeCountryWaitEndTime", wireType)
			}
			m.ChangeCountryWaitEndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChangeCountryWaitEndTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 95:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeCountryTarget", wireType)
			}
			m.ChangeCountryTarget = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChangeCountryTarget |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 96:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeCountryNextTime", wireType)
			}
			m.ChangeCountryNextTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChangeCountryNextTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 99:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Template", wireType)
			}
			m.Template = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Template |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DailyResetTime", wireType)
			}
			m.DailyResetTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DailyResetTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeeklyResetTime", wireType)
			}
			m.WeeklyResetTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WeeklyResetTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildWorkshopServerProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildWorkshopServerProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildWorkshopServerProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsComplete", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsComplete = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			m.X = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.X |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			m.Y = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Y |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prosperity", wireType)
			}
			m.Prosperity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Prosperity |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Log", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Log = append(m.Log, &proto10.GuildWorkshopLogProto{})
			if err := m.Log[len(m.Log)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildMemberServerProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildMemberServerProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildMemberServerProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTechHelpable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsTechHelpable = bool(v != 0)
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassTitle", wireType)
			}
			m.ClassTitle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClassTitle |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassLevel", wireType)
			}
			m.ClassLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClassLevel |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hero", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hero == nil {
				m.Hero = &HeroBasicSnapshotServerProto{}
			}
			if err := m.Hero.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 38:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HufuAmount", wireType)
			}
			m.HufuAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HufuAmount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HufuTotalAmount", wireType)
			}
			m.HufuTotalAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HufuTotalAmount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 40:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.HufuAmountPerDay = append(m.HufuAmountPerDay, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGuild
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.HufuAmountPerDay = append(m.HufuAmountPerDay, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field HufuAmountPerDay", wireType)
			}
		case 41:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContributionAmount", wireType)
			}
			m.ContributionAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContributionAmount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 42:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContributionTotalAmount", wireType)
			}
			m.ContributionTotalAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContributionTotalAmount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 43:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ContributionAmountPerDay = append(m.ContributionAmountPerDay, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGuild
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ContributionAmountPerDay = append(m.ContributionAmountPerDay, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ContributionAmountPerDay", wireType)
			}
		case 44:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DonationAmount", wireType)
			}
			m.DonationAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DonationAmount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 45:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DonationTotalAmount", wireType)
			}
			m.DonationTotalAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DonationTotalAmount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 46:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DonationAmountPerDay = append(m.DonationAmountPerDay, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGuild
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DonationAmountPerDay = append(m.DonationAmountPerDay, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DonationAmountPerDay", wireType)
			}
		case 48:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DonationTotalYuanbao", wireType)
			}
			m.DonationTotalYuanbao = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DonationTotalYuanbao |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 49:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Salary", wireType)
			}
			m.Salary = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Salary |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 50:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistorySalary", wireType)
			}
			m.HistorySalary = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HistorySalary |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkshopPrizeCount", wireType)
			}
			m.WorkshopPrizeCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkshopPrizeCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildImpeachServerProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildImpeachServerProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildImpeachServerProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImpeachEndTime", wireType)
			}
			m.ImpeachEndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ImpeachEndTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Candidates = append(m.Candidates, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGuild
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Candidates = append(m.Candidates, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Candidates", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImpeachMemberId", wireType)
			}
			m.ImpeachMemberId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ImpeachMemberId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.VoteHeros = append(m.VoteHeros, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGuild
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.VoteHeros = append(m.VoteHeros, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteHeros", wireType)
			}
		case 5:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.VoteTarget = append(m.VoteTarget, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGuild
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.VoteTarget = append(m.VoteTarget, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteTarget", wireType)
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImpeachStartTime", wireType)
			}
			m.ImpeachStartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ImpeachStartTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGuild(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGuild
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGuild(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGuild = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGuild   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/pb/server_proto/guild.proto", fileDescriptorGuild)
}

var fileDescriptorGuild = []byte{
	// 2513 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x58, 0x6f, 0x5b, 0x1b, 0xc7,
	0x11, 0x8f, 0x40, 0x60, 0x18, 0x40, 0x88, 0xc5, 0xc0, 0x1a, 0x3b, 0x58, 0x71, 0xec, 0x58, 0x71,
	0x6c, 0x48, 0x70, 0x52, 0x9c, 0x7f, 0x4e, 0x0d, 0xc6, 0x01, 0xc7, 0x38, 0x8e, 0x20, 0x75, 0x9c,
	0xa6, 0xbd, 0xae, 0x74, 0x8b, 0xb4, 0xd1, 0xe9, 0x4e, 0xbd, 0xbd, 0xc3, 0x52, 0x3e, 0x49, 0x3f,
	0x44, 0x3f, 0x48, 0x5f, 0xf6, 0x5d, 0xdf, 0xb6, 0xee, 0xe7, 0xe8, 0xf3, 0xf4, 0xd9, 0x99, 0xdd,
	0xe3, 0x0e, 0xc1, 0x93, 0xbc, 0x92, 0x6e, 0x7e, 0xbf, 0xf9, 0x73, 0x3b, 0x3b, 0xb3, 0xb3, 0x07,
	0x9f, 0xb4, 0x55, 0xd2, 0x49, 0x9b, 0xeb, 0xad, 0xa8, 0xb7, 0x11, 0xa8, 0x76, 0x27, 0xe9, 0x8b,
	0xd7, 0x1b, 0x3d, 0x11, 0xc8, 0xad, 0x8d, 0x7e, 0x73, 0x43, 0xcb, 0xf8, 0x44, 0xc6, 0x5e, 0x3f,
	0x8e, 0x92, 0x68, 0xa3, 0x9d, 0xaa, 0xc0, 0x5f, 0xc7, 0xff, 0x6c, 0x02, 0x7f, 0x56, 0x7f, 0x45,
	0xbb, 0x23, 0x62, 0xe9, 0x8f, 0x6a, 0xaf, 0x6e, 0xfd, 0x76, 0xb5, 0x81, 0x8a, 0xc2, 0x76, 0x98,
	0x5a, 0xc5, 0x07, 0xbf, 0x3d, 0x5a, 0x1d, 0x8a, 0xbe, 0xee, 0x44, 0x09, 0x69, 0xde, 0xf8, 0xfb,
	0x3b, 0x50, 0xfd, 0xda, 0x84, 0x70, 0x88, 0xa4, 0x17, 0xf8, 0x16, 0x0c, 0xca, 0xa1, 0xe8, 0x49,
	0x3e, 0x56, 0x2b, 0xd5, 0xa7, 0x1b, 0xf8, 0x9f, 0x5d, 0x85, 0xe9, 0xe3, 0x40, 0xb4, 0x3d, 0x04,
	0xc6, 0x11, 0x98, 0x32, 0x82, 0xe7, 0x06, 0x5c, 0x05, 0xfc, 0x7f, 0x34, 0xec, 0x4b, 0x5e, 0xae,
	0x95, 0xea, 0xe5, 0x46, 0xf6, 0xcc, 0x2e, 0xc3, 0x44, 0x20, 0x4f, 0x64, 0xc0, 0x27, 0x10, 0xa0,
	0x07, 0xe3, 0x22, 0x91, 0x83, 0x84, 0x4f, 0x91, 0x0b, 0xf3, 0x9f, 0xbd, 0x0b, 0x73, 0x2a, 0x4c,
	0x64, 0x1c, 0x8a, 0xc0, 0x43, 0x70, 0x1a, 0xc1, 0x59, 0x27, 0x3c, 0x32, 0xa4, 0x65, 0x98, 0x0c,
	0x44, 0x53, 0x06, 0x9a, 0x43, 0x6d, 0xbc, 0x3e, 0xdd, 0xb0, 0x4f, 0xac, 0x0e, 0xd5, 0x58, 0xfe,
	0x2c, 0x5b, 0x89, 0x27, 0xd2, 0x24, 0xf2, 0x7e, 0x8e, 0x54, 0xc8, 0x67, 0x6a, 0xa5, 0xfa, 0x54,
	0xa3, 0x42, 0xf2, 0x47, 0x69, 0x12, 0x3d, 0x8d, 0x54, 0xc8, 0xd6, 0x61, 0x31, 0x96, 0x7f, 0x4d,
	0x95, 0x59, 0xcc, 0x8e, 0x8c, 0x23, 0x8f, 0xc2, 0x9b, 0xc5, 0xf0, 0x16, 0x1c, 0xb4, 0x27, 0xe3,
	0xe8, 0x19, 0x86, 0xfa, 0x09, 0xac, 0x64, 0xfc, 0x9f, 0xd3, 0xd0, 0x1b, 0x28, 0x11, 0x5a, 0x9d,
	0x39, 0xd4, 0xb9, 0xec, 0xe0, 0xa7, 0x69, 0xf8, 0x83, 0x12, 0x21, 0xa9, 0x6d, 0x01, 0xcf, 0xd4,
	0x92, 0xe8, 0xb5, 0x8c, 0xbd, 0x9e, 0x18, 0x78, 0xc7, 0x41, 0x14, 0xc5, 0xbc, 0x82, 0x7a, 0x4b,
	0x0e, 0x3f, 0x32, 0xf0, 0x81, 0x18, 0x3c, 0x31, 0x20, 0xbb, 0x0e, 0x33, 0xad, 0x40, 0x68, 0x8d,
	0x4b, 0xad, 0xf9, 0x12, 0xbe, 0x26, 0xa0, 0xc8, 0x2c, 0xb6, 0x66, 0x5b, 0x70, 0xa9, 0x27, 0x7b,
	0x4d, 0x19, 0x6b, 0xbe, 0x5c, 0x1b, 0xaf, 0xcf, 0x6c, 0xbe, 0x4d, 0xc9, 0x5c, 0xc7, 0x44, 0x1e,
	0x20, 0x94, 0x4b, 0x67, 0xc3, 0xb1, 0xcd, 0x1a, 0xb5, 0x3a, 0x22, 0x6c, 0x4b, 0x2f, 0x90, 0xc2,
	0x97, 0xb1, 0xa7, 0x7c, 0xbe, 0x52, 0x2b, 0xd5, 0xc7, 0x1b, 0x15, 0x92, 0x3f, 0x43, 0xf1, 0xbe,
	0xcf, 0xee, 0x02, 0x2b, 0x32, 0x13, 0xd5, 0x93, 0x9c, 0x23, 0xb7, 0x9a, 0xe7, 0x1e, 0xa9, 0x9e,
	0x64, 0x1f, 0xc1, 0x52, 0x28, 0x07, 0x89, 0x67, 0x55, 0x4c, 0xdc, 0xa4, 0x70, 0x05, 0x15, 0x98,
	0x01, 0x77, 0x10, 0x33, 0x2f, 0x80, 0x2a, 0xbb, 0x50, 0x51, 0xbd, 0xbe, 0x14, 0xad, 0x8e, 0xf5,
	0xc0, 0x57, 0x6b, 0xa5, 0xfa, 0xcc, 0xe6, 0x5a, 0xfe, 0x55, 0xf6, 0x89, 0x91, 0x7f, 0x97, 0x39,
	0xab, 0x45, 0xde, 0xd9, 0x7b, 0x30, 0xaf, 0xc2, 0x13, 0x91, 0x48, 0xca, 0xa4, 0xf2, 0x35, 0xbf,
	0x5a, 0x1b, 0xaf, 0x8f, 0x37, 0xe6, 0x48, 0x6c, 0xb2, 0xb8, 0xef, 0x6b, 0x93, 0x73, 0xcb, 0x93,
	0x83, 0x3e, 0xa5, 0xc4, 0xc4, 0x77, 0x0d, 0xb9, 0x0b, 0x04, 0xed, 0x12, 0xe2, 0xde, 0xc8, 0x24,
	0x47, 0xea, 0x04, 0x77, 0xd2, 0xa9, 0xf5, 0xb7, 0x51, 0x83, 0x59, 0xd0, 0xec, 0x27, 0xe7, 0xe2,
	0x53, 0xb8, 0x52, 0x50, 0x29, 0x38, 0x5a, 0x43, 0xb5, 0xe5, 0x9c, 0x5a, 0xde, 0x5b, 0x1d, 0xaa,
	0xc7, 0xb1, 0x94, 0xf9, 0xf5, 0xe3, 0xd7, 0x69, 0xef, 0x1a, 0xf9, 0xe9, 0xd2, 0xb1, 0x3b, 0xb0,
	0xd0, 0x55, 0xad, 0xae, 0x47, 0x19, 0xf5, 0x5a, 0x51, 0x1a, 0x26, 0xbc, 0x86, 0xbb, 0x69, 0xde,
	0x00, 0x94, 0xfc, 0x1d, 0x23, 0x66, 0x5f, 0xb8, 0x7d, 0x94, 0xa8, 0x24, 0x90, 0xfc, 0x1d, 0x5c,
	0xdf, 0xab, 0xf9, 0xf5, 0xdd, 0x31, 0xf0, 0x91, 0x41, 0x69, 0x71, 0x69, 0x93, 0xa1, 0x80, 0x71,
	0xb8, 0x84, 0xd6, 0xe3, 0x21, 0xbf, 0x81, 0xf6, 0xdd, 0xa3, 0x29, 0xf6, 0x7e, 0x2c, 0x75, 0xa2,
	0xda, 0x92, 0xbf, 0x4b, 0xc5, 0xee, 0x9e, 0xd9, 0x2d, 0xa8, 0xb8, 0xff, 0x9e, 0x2f, 0x54, 0x30,
	0xe4, 0x37, 0x6b, 0xe3, 0xf5, 0x72, 0x63, 0xce, 0x49, 0x1f, 0x1b, 0x21, 0xfb, 0x10, 0x2e, 0x77,
	0x94, 0x4e, 0xa2, 0x78, 0x88, 0x45, 0x91, 0x99, 0xbb, 0x85, 0xe6, 0x98, 0xc5, 0x0e, 0xc4, 0xe0,
	0x85, 0x33, 0x7c, 0x17, 0x58, 0x20, 0x74, 0x92, 0x51, 0xbd, 0x58, 0x84, 0x5d, 0xfe, 0x1e, 0xf2,
	0xab, 0x06, 0x71, 0xcc, 0x86, 0x08, 0xbb, 0xc6, 0x7e, 0x46, 0x6c, 0x45, 0xb1, 0xf4, 0x3a, 0x51,
	0x1a, 0x07, 0x43, 0x7e, 0x1b, 0x83, 0x61, 0x0e, 0xdb, 0x89, 0x62, 0xb9, 0x87, 0x08, 0xbb, 0x0d,
	0xf3, 0x4d, 0xb3, 0x24, 0x2a, 0x6c, 0x7b, 0xa2, 0x87, 0xcb, 0xfa, 0x3e, 0x1a, 0xaf, 0x38, 0xf1,
	0x23, 0x94, 0x9a, 0x5c, 0xa5, 0xfd, 0x76, 0x2c, 0x7c, 0xe9, 0xc9, 0xd0, 0x66, 0xf7, 0x0e, 0xd5,
	0x90, 0x95, 0xef, 0x86, 0x94, 0xd5, 0xab, 0x30, 0xdd, 0xf2, 0xa9, 0x72, 0x34, 0xff, 0x80, 0x16,
	0xaa, 0xe5, 0x63, 0xc5, 0x68, 0xf6, 0x25, 0x5c, 0x4d, 0xfb, 0xbe, 0xd9, 0x90, 0x67, 0xdc, 0x92,
	0xc5, 0xbb, 0x68, 0x91, 0x13, 0x65, 0xbb, 0x10, 0x01, 0xda, 0x36, 0x3d, 0x22, 0x96, 0x46, 0x1d,
	0xe9, 0xf7, 0x90, 0x0e, 0x24, 0x42, 0x02, 0x83, 0x72, 0x27, 0x3d, 0x4e, 0xf9, 0x3a, 0xfa, 0xc5,
	0xff, 0x26, 0x71, 0x43, 0x15, 0x06, 0x4a, 0x84, 0x6d, 0xbe, 0x41, 0xf1, 0xb8, 0x67, 0xb3, 0xb1,
	0x8e, 0x63, 0x65, 0xde, 0x08, 0x0f, 0x24, 0xea, 0xbf, 0x9b, 0xd8, 0x7f, 0xe7, 0x09, 0xc0, 0x1d,
	0x83, 0x2d, 0xb8, 0x0e, 0x55, 0x19, 0xca, 0xde, 0x30, 0x4f, 0xbd, 0x8f, 0xd4, 0x0a, 0xca, 0x4f,
	0x99, 0x8f, 0xa1, 0xe2, 0x47, 0xa1, 0x09, 0x33, 0x96, 0xad, 0x28, 0xf6, 0x35, 0xdf, 0x1a, 0x6d,
	0x58, 0x8f, 0x91, 0xd1, 0x40, 0x82, 0x2d, 0x72, 0x3f, 0x27, 0xd2, 0xec, 0x01, 0x40, 0x53, 0xb5,
	0x3d, 0x79, 0x22, 0xc3, 0x44, 0xf3, 0x07, 0x68, 0xe1, 0x4a, 0xde, 0xc2, 0xb6, 0x6a, 0xef, 0x1a,
	0x90, 0xb4, 0xa7, 0x9b, 0xf6, 0x51, 0xb3, 0x8f, 0x61, 0xca, 0x1f, 0x86, 0xa2, 0xa7, 0x5a, 0x9a,
	0x7f, 0x8a, 0x7a, 0xbc, 0xe0, 0x99, 0x30, 0x52, 0xcb, 0x98, 0x26, 0x37, 0xad, 0xa8, 0xd7, 0x0f,
	0x64, 0x22, 0xdd, 0x2b, 0x8a, 0xb8, 0x2d, 0x13, 0x9b, 0xca, 0xcf, 0x70, 0xe9, 0xb8, 0xa3, 0xd0,
	0xdb, 0x22, 0x81, 0x52, 0x7b, 0x13, 0xe6, 0x74, 0x22, 0x92, 0x54, 0x36, 0xa4, 0x08, 0x7a, 0xfb,
	0x3e, 0xff, 0x1c, 0xb3, 0x53, 0x14, 0xb2, 0xdf, 0xc1, 0xb4, 0x96, 0xb2, 0xeb, 0x75, 0x64, 0xd0,
	0xe7, 0x0f, 0x47, 0xdf, 0xe9, 0x50, 0xca, 0xee, 0x9e, 0x0c, 0xfa, 0x36, 0x38, 0x6d, 0x1f, 0xd9,
	0x35, 0x5a, 0x8c, 0x66, 0x34, 0x30, 0xdd, 0xfb, 0x2b, 0x4a, 0x63, 0x53, 0xb5, 0xb7, 0xa3, 0xc1,
	0xbe, 0xcf, 0x6e, 0x42, 0xc5, 0xa1, 0x32, 0x94, 0x71, 0x7b, 0xc8, 0x7f, 0x8f, 0x8c, 0x59, 0x62,
	0xec, 0xa2, 0x8c, 0xdd, 0x82, 0xf9, 0xe3, 0x34, 0x08, 0xbc, 0x9c, 0xa1, 0x47, 0x44, 0x33, 0xe2,
	0x6d, 0x67, 0xec, 0x63, 0x58, 0x29, 0xd0, 0x6c, 0xd3, 0x31, 0x6d, 0x70, 0x1b, 0xfb, 0xd9, 0xe2,
	0x29, 0x9d, 0x1a, 0x8f, 0xe9, 0x83, 0x35, 0x98, 0x49, 0x64, 0xab, 0x13, 0x46, 0x41, 0xd4, 0x1e,
	0x6a, 0xbe, 0x83, 0x25, 0x97, 0x17, 0xb1, 0x7b, 0xc0, 0x5c, 0x09, 0x9d, 0x8a, 0xf9, 0x63, 0x3a,
	0x7f, 0x2d, 0x72, 0x94, 0x01, 0xa6, 0x17, 0x1b, 0x9a, 0x37, 0x52, 0x76, 0xbb, 0x74, 0xba, 0x18,
	0xf0, 0xfb, 0x62, 0xe9, 0xdd, 0x84, 0x0a, 0xaa, 0x9c, 0xd6, 0xdf, 0x13, 0x7a, 0x3f, 0x23, 0xdd,
	0x71, 0x35, 0xf8, 0x04, 0x6a, 0x78, 0x6c, 0xd9, 0x42, 0xcc, 0x3a, 0x46, 0x2e, 0xdb, 0xfc, 0x6b,
	0xf4, 0x71, 0xcd, 0xf0, 0xbe, 0x47, 0x9a, 0xeb, 0x33, 0xa7, 0x19, 0x67, 0x8f, 0x60, 0x4d, 0x69,
	0x4f, 0x27, 0x22, 0x4e, 0xbc, 0x58, 0x6a, 0xa5, 0x13, 0x0f, 0xc7, 0x33, 0x2f, 0x4c, 0xbd, 0x24,
	0xf2, 0xc5, 0x90, 0x7f, 0x83, 0xcd, 0xfc, 0x8a, 0xd2, 0x87, 0x86, 0xd4, 0x40, 0xce, 0x0f, 0x86,
	0xf2, 0x3c, 0x3d, 0x32, 0x04, 0x3a, 0x3c, 0x8a, 0x9a, 0xbe, 0x3c, 0x96, 0xa1, 0x6f, 0x0e, 0xf9,
	0x67, 0xee, 0xf0, 0xc8, 0xa9, 0x3d, 0x76, 0x28, 0x7b, 0x08, 0xd7, 0xd2, 0x30, 0x88, 0x5a, 0xdd,
	0x11, 0xdf, 0x34, 0xa3, 0x1c, 0xd0, 0x76, 0x25, 0x4e, 0xc1, 0x35, 0xcd, 0x29, 0xcf, 0xe1, 0x32,
	0x76, 0xd6, 0x33, 0xda, 0xfc, 0x39, 0x9e, 0x17, 0xae, 0x52, 0x9f, 0x09, 0x5d, 0x8c, 0x9b, 0xf6,
	0xe5, 0x42, 0x70, 0x56, 0xce, 0x9a, 0xb0, 0x64, 0x37, 0x4a, 0x20, 0xc5, 0x09, 0x35, 0x28, 0xaf,
	0x27, 0xfa, 0xfc, 0x5b, 0xdc, 0xe4, 0x1b, 0xc5, 0x4d, 0x9e, 0x9d, 0xec, 0xeb, 0xb4, 0x83, 0x9e,
	0x19, 0x1d, 0xb3, 0xaa, 0x07, 0xa2, 0xbf, 0x6b, 0x8e, 0x9b, 0x06, 0xeb, 0x8d, 0x00, 0xec, 0x7d,
	0x28, 0xf7, 0x44, 0xdc, 0xe5, 0x2f, 0xd0, 0xe4, 0x52, 0x61, 0xfc, 0x11, 0x71, 0x97, 0x62, 0x43,
	0x0a, 0xdb, 0x84, 0x49, 0xea, 0x3d, 0xfc, 0x3b, 0x7c, 0xa1, 0x55, 0x4b, 0x3e, 0x68, 0xbd, 0x14,
	0xf1, 0xa3, 0x20, 0xc8, 0xf7, 0x1d, 0xcb, 0x64, 0x7b, 0x30, 0xef, 0x1a, 0xa3, 0x6d, 0x5c, 0xbc,
	0x81, 0x9e, 0xae, 0xe7, 0x3d, 0xbd, 0xb2, 0x94, 0xbc, 0x85, 0xca, 0xb0, 0x20, 0x64, 0x12, 0x6a,
	0xe7, 0x2d, 0xae, 0x77, 0x6c, 0x86, 0x74, 0x9a, 0xc8, 0xf9, 0x61, 0x61, 0xf0, 0x29, 0x2c, 0xe6,
	0x13, 0x43, 0x23, 0xcb, 0x57, 0x47, 0x56, 0xfa, 0x14, 0x64, 0xaf, 0x60, 0x39, 0x0b, 0x58, 0x63,
	0x7d, 0x44, 0xd4, 0xb9, 0xf8, 0x11, 0xc6, 0x7d, 0xf3, 0xbc, 0xb8, 0x0f, 0x65, 0xe8, 0x1f, 0x45,
	0x28, 0x22, 0x17, 0x8b, 0xc3, 0x51, 0x84, 0xfd, 0x04, 0x8b, 0x23, 0xa6, 0x7b, 0x92, 0x7f, 0x8f,
	0x76, 0xef, 0x5d, 0x94, 0xcc, 0xa2, 0x8f, 0x03, 0x49, 0xa9, 0xac, 0x0e, 0xcf, 0x88, 0xd9, 0xb7,
	0x50, 0xe9, 0x44, 0x3a, 0xf1, 0x7a, 0x2a, 0x6c, 0xb7, 0xb0, 0xb3, 0xfc, 0x01, 0x0d, 0xbf, 0x7f,
	0x91, 0xe1, 0xbd, 0x48, 0x27, 0x07, 0x86, 0xbc, 0xef, 0x6b, 0x32, 0x3a, 0xdb, 0xc9, 0x89, 0xd8,
	0xe7, 0x30, 0xf5, 0x3a, 0x8a, 0xbb, 0xba, 0x13, 0xf5, 0xf9, 0x4b, 0x5c, 0xd8, 0x42, 0xce, 0x5e,
	0x5a, 0x2c, 0x3f, 0x52, 0x66, 0x0a, 0xec, 0x01, 0x70, 0xf7, 0x9f, 0x0a, 0xd7, 0x73, 0x4d, 0xde,
	0xe7, 0x3f, 0x60, 0x09, 0x2f, 0x3b, 0x1c, 0xcb, 0x76, 0xc7, 0xa1, 0x66, 0x7c, 0xc8, 0x34, 0xa3,
	0x34, 0xe9, 0xa7, 0x09, 0x7f, 0x45, 0xe3, 0x83, 0x13, 0x7f, 0x8b, 0x52, 0x33, 0x99, 0x64, 0xc4,
	0x7e, 0xac, 0x7e, 0x91, 0x76, 0x86, 0xfb, 0x91, 0x26, 0x1f, 0x87, 0xbd, 0x30, 0x10, 0x8d, 0x71,
	0x5b, 0xb9, 0xa0, 0x9a, 0x52, 0x86, 0x5e, 0x27, 0x8d, 0xdd, 0x51, 0xf4, 0x47, 0xba, 0x47, 0x38,
	0x7c, 0x5b, 0xca, 0x70, 0x2f, 0x8d, 0xed, 0x39, 0x84, 0xf7, 0x9c, 0x56, 0xd4, 0xeb, 0x99, 0xac,
	0xf5, 0x5a, 0x34, 0x68, 0x68, 0xfe, 0x13, 0x36, 0xe4, 0x85, 0x0c, 0x3a, 0x68, 0xe1, 0x7c, 0xa1,
	0xd9, 0x37, 0x30, 0xfb, 0x5a, 0xca, 0x6e, 0x30, 0xf4, 0x12, 0xa1, 0xbb, 0x9a, 0xff, 0x09, 0x33,
	0x51, 0xbf, 0x28, 0x13, 0x2f, 0x91, 0x7b, 0x64, 0xa8, 0x94, 0x88, 0x99, 0xd7, 0xa7, 0x12, 0xd3,
	0x95, 0xec, 0x34, 0x6b, 0xc7, 0x46, 0xef, 0xb5, 0x50, 0xc9, 0x69, 0xef, 0xfe, 0x33, 0x0d, 0x38,
	0xc4, 0xd9, 0x21, 0xca, 0x4b, 0xa1, 0x12, 0xd7, 0xc1, 0x37, 0x61, 0xe9, 0x8c, 0x3e, 0x75, 0x65,
	0xee, 0xe1, 0x2b, 0x2f, 0x16, 0x14, 0xa9, 0x17, 0x9b, 0x95, 0x3a, 0xa3, 0x83, 0xed, 0x1d, 0xfd,
	0xfd, 0x05, 0xfd, 0x2d, 0x15, 0xd4, 0x9e, 0xcb, 0x01, 0x35, 0xf0, 0x55, 0x98, 0x4a, 0x64, 0xaf,
	0x1f, 0x88, 0x44, 0xf2, 0x16, 0x9d, 0xa8, 0xee, 0xd9, 0x0c, 0x3b, 0x38, 0xc8, 0x9a, 0x12, 0x76,
	0x87, 0x82, 0x4f, 0xf3, 0x1e, 0xca, 0x1b, 0x46, 0x8c, 0x56, 0xee, 0xc0, 0x82, 0x5d, 0xbf, 0x1c,
	0x55, 0x22, 0x75, 0x9e, 0x80, 0x8c, 0xbb, 0xba, 0x0b, 0x2b, 0x17, 0xf4, 0x3b, 0x56, 0x85, 0xf1,
	0xae, 0x1c, 0xf2, 0x12, 0x2a, 0x9a, 0xbf, 0xe6, 0x06, 0x7d, 0x22, 0x82, 0x94, 0xee, 0xe3, 0xe3,
	0x0d, 0x7a, 0xf8, 0x6c, 0xec, 0x41, 0x69, 0xb5, 0x09, 0x4b, 0xe7, 0x56, 0xda, 0x39, 0x46, 0xee,
	0xe7, 0x8d, 0x9c, 0x99, 0xc0, 0xf2, 0x36, 0xa8, 0x26, 0x72, 0x3e, 0xbe, 0x82, 0x85, 0x91, 0xa2,
	0xcb, 0xdb, 0x2f, 0xff, 0x5a, 0x90, 0x0f, 0xa1, 0x7a, 0x76, 0xaf, 0xe4, 0xf5, 0x27, 0xce, 0xd1,
	0x2f, 0xe7, 0xf4, 0x9f, 0x96, 0xa7, 0xbe, 0xa8, 0x7e, 0xf9, 0xb4, 0x3c, 0xf5, 0x65, 0xf5, 0xe1,
	0x8d, 0xff, 0x94, 0x80, 0x5f, 0x54, 0xc8, 0xec, 0x6d, 0x00, 0x3a, 0x84, 0x71, 0xe5, 0xc9, 0xf6,
	0x34, 0x4a, 0x30, 0x3f, 0x57, 0x60, 0x2a, 0xdb, 0x7e, 0x63, 0x08, 0x5e, 0x92, 0x76, 0xb7, 0x5d,
	0x87, 0x19, 0xa5, 0xb3, 0x62, 0xc7, 0xcf, 0x1b, 0x53, 0x0d, 0x50, 0xda, 0x15, 0x38, 0x9b, 0x85,
	0xd2, 0x00, 0xbf, 0x6c, 0x4c, 0x34, 0x4a, 0x03, 0xf3, 0x34, 0xc4, 0xcf, 0x19, 0x13, 0x8d, 0xd2,
	0x90, 0xad, 0x01, 0xf4, 0xe3, 0x48, 0xf7, 0x65, 0xac, 0x92, 0x21, 0x9f, 0xc4, 0xf0, 0x73, 0x12,
	0xb6, 0x0e, 0xe3, 0x41, 0xd4, 0xe6, 0x97, 0xb0, 0x9c, 0xae, 0x9d, 0xd7, 0x8d, 0x9e, 0x45, 0x6d,
	0x5a, 0x76, 0x43, 0xbc, 0xf1, 0xaf, 0x49, 0x58, 0x3e, 0xff, 0x26, 0xcf, 0x2a, 0x30, 0xa6, 0x7c,
	0x9b, 0xd5, 0x31, 0xe5, 0x9b, 0xcd, 0xa9, 0x34, 0x0e, 0x51, 0x38, 0x47, 0x8a, 0x66, 0x20, 0xf9,
	0x22, 0x5d, 0x1c, 0x95, 0x36, 0x23, 0xd4, 0x9e, 0x95, 0x9e, 0x7e, 0x54, 0xa0, 0xcb, 0xe0, 0x65,
	0x8a, 0x32, 0x77, 0xdf, 0xcb, 0x08, 0x34, 0x35, 0x2c, 0xe5, 0x08, 0x34, 0x27, 0x9c, 0xb9, 0x72,
	0xac, 0x8c, 0x5c, 0x39, 0xb6, 0xa0, 0x6c, 0xae, 0xc9, 0x78, 0x73, 0x9d, 0xd9, 0x7c, 0xd7, 0xbe,
	0xa8, 0xb9, 0x1e, 0x6f, 0x0b, 0xad, 0x5a, 0x87, 0xf6, 0xc3, 0x53, 0xbe, 0xf5, 0xa2, 0x82, 0xb1,
	0x6c, 0xee, 0x27, 0xee, 0xde, 0x45, 0x97, 0x3a, 0x30, 0x22, 0x7b, 0xe7, 0xba, 0x03, 0x0b, 0x48,
	0x48, 0xa2, 0x44, 0x04, 0x8e, 0x76, 0x9b, 0x6e, 0xbd, 0x06, 0x38, 0x32, 0x72, 0xcb, 0xbd, 0x07,
	0x8b, 0x39, 0x63, 0x5e, 0x5f, 0xc6, 0x9e, 0x99, 0xc0, 0xea, 0xd8, 0xf5, 0xaa, 0xa7, 0x46, 0x5f,
	0xc8, 0xf8, 0xb1, 0x18, 0xb2, 0x0d, 0x58, 0x6c, 0x45, 0x61, 0x12, 0xab, 0x66, 0x9a, 0xa8, 0x28,
	0x2c, 0xde, 0xfd, 0x58, 0x1e, 0xb2, 0xf6, 0x3f, 0x83, 0x2b, 0x05, 0x85, 0x42, 0x4c, 0x77, 0x50,
	0x6d, 0x25, 0x4f, 0xc8, 0xc7, 0x86, 0x17, 0x8b, 0x11, 0x67, 0x59, 0x8c, 0x1f, 0x60, 0x8c, 0x7c,
	0xd4, 0xa9, 0x8d, 0xf5, 0x36, 0xcc, 0xe3, 0xc5, 0x28, 0x17, 0xe7, 0x5d, 0x3a, 0x64, 0x9c, 0xd8,
	0xfa, 0xd9, 0x84, 0xa5, 0x8c, 0x58, 0x88, 0xef, 0x1e, 0x35, 0x4f, 0x07, 0xe6, 0x63, 0xfb, 0x04,
	0x56, 0xce, 0x18, 0xcf, 0xe2, 0x5a, 0xc7, 0xb8, 0x2e, 0x17, 0x9d, 0xd8, 0x98, 0x3e, 0x86, 0xe5,
	0x33, 0xae, 0x86, 0xa9, 0x08, 0x9b, 0x22, 0xe2, 0x1f, 0xd2, 0xb7, 0xb1, 0x82, 0xaf, 0x57, 0x84,
	0xb1, 0x65, 0x98, 0xd4, 0x22, 0x10, 0xf1, 0x90, 0x7f, 0x84, 0x2c, 0xfb, 0xc4, 0x6e, 0x41, 0xc5,
	0x7d, 0x17, 0xb0, 0xf8, 0x26, 0xe2, 0x73, 0x56, 0x7a, 0x48, 0xb4, 0x8b, 0x0e, 0xd1, 0xfb, 0x17,
	0x1d, 0xa2, 0x4f, 0xcb, 0x53, 0xcb, 0xd5, 0x95, 0x1b, 0xff, 0x2b, 0xc1, 0xca, 0x05, 0x1f, 0x96,
	0xb0, 0x94, 0xec, 0x07, 0xa9, 0xac, 0x4b, 0x50, 0xa1, 0xb9, 0x0f, 0x55, 0xee, 0x68, 0x5a, 0x03,
	0x68, 0x89, 0xd0, 0x57, 0xe6, 0x36, 0xa0, 0xf9, 0x18, 0x0e, 0xe7, 0x39, 0x89, 0xd9, 0xad, 0xce,
	0x52, 0x76, 0x63, 0xc2, 0x96, 0x32, 0xde, 0x98, 0xb7, 0x80, 0xbb, 0x2d, 0x99, 0x96, 0x75, 0x12,
	0xd9, 0xaf, 0x57, 0x9a, 0x97, 0xd1, 0xd6, 0xb4, 0x91, 0x98, 0xb2, 0xd1, 0xa6, 0x32, 0x10, 0xb6,
	0x67, 0xdf, 0x04, 0xf9, 0x32, 0x22, 0x7b, 0xe4, 0xdd, 0x05, 0xe6, 0x7c, 0xe5, 0x5a, 0xdf, 0x0c,
	0x7d, 0xa7, 0xb3, 0xc8, 0xa1, 0xeb, 0x80, 0x77, 0x7e, 0x81, 0x39, 0x7b, 0x5b, 0xd5, 0x5d, 0xfb,
	0x6d, 0xb6, 0xba, 0x1f, 0x9e, 0x88, 0x40, 0xf9, 0x99, 0xbc, 0xfa, 0x16, 0x9b, 0x86, 0x89, 0x6d,
	0x11, 0xbd, 0x4c, 0xab, 0x25, 0xf3, 0x17, 0x07, 0xe5, 0xea, 0x18, 0x9b, 0x85, 0x29, 0xd7, 0xaf,
	0xaa, 0xe3, 0x0c, 0x60, 0x92, 0xee, 0xed, 0xd5, 0xb2, 0x41, 0xbe, 0x4b, 0x45, 0xd8, 0x88, 0xc2,
	0x76, 0x75, 0x82, 0x4d, 0x41, 0x79, 0x4f, 0x6e, 0xab, 0xea, 0x24, 0x9b, 0x81, 0x4b, 0x34, 0xaa,
	0x9e, 0x54, 0x2f, 0x6d, 0xd7, 0xfe, 0xf1, 0x66, 0xad, 0xf4, 0xcf, 0x37, 0x6b, 0xa5, 0x7f, 0xbf,
	0x59, 0x2b, 0xfd, 0xed, 0xbf, 0x6b, 0x6f, 0xed, 0x95, 0x7e, 0x9c, 0xcd, 0x7f, 0x99, 0x6e, 0x4e,
	0xe2, 0xcf, 0xfd, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0x90, 0xff, 0x9d, 0x9c, 0x7b, 0x17, 0x00,
	0x00,
}
