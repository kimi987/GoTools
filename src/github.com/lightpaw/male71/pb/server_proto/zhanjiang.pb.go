// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/pb/server_proto/zhanjiang.proto
// DO NOT EDIT!

package server_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 过关斩将
type HeroZhanJiangServerProto struct {
	OpenTimes     uint64                         `protobuf:"varint,1,opt,name=open_times,json=openTimes,proto3" json:"open_times,omitempty"`
	PassGuanQia   []uint64                       `protobuf:"varint,2,rep,packed,name=pass_guan_qia,json=passGuanQia" json:"pass_guan_qia,omitempty"`
	CurChallenge  *ZhanJiangChallengeServerProto `protobuf:"bytes,3,opt,name=cur_challenge,json=curChallenge" json:"cur_challenge,omitempty"`
	LastCaptainId uint64                         `protobuf:"varint,4,opt,name=last_captain_id,json=lastCaptainId,proto3" json:"last_captain_id,omitempty"`
}

func (m *HeroZhanJiangServerProto) Reset()         { *m = HeroZhanJiangServerProto{} }
func (m *HeroZhanJiangServerProto) String() string { return proto.CompactTextString(m) }
func (*HeroZhanJiangServerProto) ProtoMessage()    {}
func (*HeroZhanJiangServerProto) Descriptor() ([]byte, []int) {
	return fileDescriptorZhanjiang, []int{0}
}

func (m *HeroZhanJiangServerProto) GetOpenTimes() uint64 {
	if m != nil {
		return m.OpenTimes
	}
	return 0
}

func (m *HeroZhanJiangServerProto) GetPassGuanQia() []uint64 {
	if m != nil {
		return m.PassGuanQia
	}
	return nil
}

func (m *HeroZhanJiangServerProto) GetCurChallenge() *ZhanJiangChallengeServerProto {
	if m != nil {
		return m.CurChallenge
	}
	return nil
}

func (m *HeroZhanJiangServerProto) GetLastCaptainId() uint64 {
	if m != nil {
		return m.LastCaptainId
	}
	return 0
}

type ZhanJiangChallengeServerProto struct {
	GuanQia   uint64 `protobuf:"varint,1,opt,name=guan_qia,json=guanQia,proto3" json:"guan_qia,omitempty"`
	PassCount uint64 `protobuf:"varint,2,opt,name=passCount,proto3" json:"passCount,omitempty"`
	CaptainId uint64 `protobuf:"varint,3,opt,name=captain_id,json=captainId,proto3" json:"captain_id,omitempty"`
}

func (m *ZhanJiangChallengeServerProto) Reset()         { *m = ZhanJiangChallengeServerProto{} }
func (m *ZhanJiangChallengeServerProto) String() string { return proto.CompactTextString(m) }
func (*ZhanJiangChallengeServerProto) ProtoMessage()    {}
func (*ZhanJiangChallengeServerProto) Descriptor() ([]byte, []int) {
	return fileDescriptorZhanjiang, []int{1}
}

func (m *ZhanJiangChallengeServerProto) GetGuanQia() uint64 {
	if m != nil {
		return m.GuanQia
	}
	return 0
}

func (m *ZhanJiangChallengeServerProto) GetPassCount() uint64 {
	if m != nil {
		return m.PassCount
	}
	return 0
}

func (m *ZhanJiangChallengeServerProto) GetCaptainId() uint64 {
	if m != nil {
		return m.CaptainId
	}
	return 0
}

func init() {
	proto.RegisterType((*HeroZhanJiangServerProto)(nil), "proto.HeroZhanJiangServerProto")
	proto.RegisterType((*ZhanJiangChallengeServerProto)(nil), "proto.ZhanJiangChallengeServerProto")
}
func (m *HeroZhanJiangServerProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeroZhanJiangServerProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OpenTimes != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintZhanjiang(dAtA, i, uint64(m.OpenTimes))
	}
	if len(m.PassGuanQia) > 0 {
		dAtA2 := make([]byte, len(m.PassGuanQia)*10)
		var j1 int
		for _, num := range m.PassGuanQia {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintZhanjiang(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if m.CurChallenge != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintZhanjiang(dAtA, i, uint64(m.CurChallenge.Size()))
		n3, err := m.CurChallenge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.LastCaptainId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintZhanjiang(dAtA, i, uint64(m.LastCaptainId))
	}
	return i, nil
}

func (m *ZhanJiangChallengeServerProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZhanJiangChallengeServerProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GuanQia != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintZhanjiang(dAtA, i, uint64(m.GuanQia))
	}
	if m.PassCount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintZhanjiang(dAtA, i, uint64(m.PassCount))
	}
	if m.CaptainId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintZhanjiang(dAtA, i, uint64(m.CaptainId))
	}
	return i, nil
}

func encodeFixed64Zhanjiang(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Zhanjiang(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintZhanjiang(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *HeroZhanJiangServerProto) Size() (n int) {
	var l int
	_ = l
	if m.OpenTimes != 0 {
		n += 1 + sovZhanjiang(uint64(m.OpenTimes))
	}
	if len(m.PassGuanQia) > 0 {
		l = 0
		for _, e := range m.PassGuanQia {
			l += sovZhanjiang(uint64(e))
		}
		n += 1 + sovZhanjiang(uint64(l)) + l
	}
	if m.CurChallenge != nil {
		l = m.CurChallenge.Size()
		n += 1 + l + sovZhanjiang(uint64(l))
	}
	if m.LastCaptainId != 0 {
		n += 1 + sovZhanjiang(uint64(m.LastCaptainId))
	}
	return n
}

func (m *ZhanJiangChallengeServerProto) Size() (n int) {
	var l int
	_ = l
	if m.GuanQia != 0 {
		n += 1 + sovZhanjiang(uint64(m.GuanQia))
	}
	if m.PassCount != 0 {
		n += 1 + sovZhanjiang(uint64(m.PassCount))
	}
	if m.CaptainId != 0 {
		n += 1 + sovZhanjiang(uint64(m.CaptainId))
	}
	return n
}

func sovZhanjiang(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozZhanjiang(x uint64) (n int) {
	return sovZhanjiang(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HeroZhanJiangServerProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZhanjiang
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroZhanJiangServerProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroZhanJiangServerProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenTimes", wireType)
			}
			m.OpenTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhanjiang
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpenTimes |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowZhanjiang
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PassGuanQia = append(m.PassGuanQia, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowZhanjiang
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthZhanjiang
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowZhanjiang
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PassGuanQia = append(m.PassGuanQia, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PassGuanQia", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurChallenge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhanjiang
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZhanjiang
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CurChallenge == nil {
				m.CurChallenge = &ZhanJiangChallengeServerProto{}
			}
			if err := m.CurChallenge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastCaptainId", wireType)
			}
			m.LastCaptainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhanjiang
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastCaptainId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZhanjiang(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZhanjiang
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ZhanJiangChallengeServerProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZhanjiang
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZhanJiangChallengeServerProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZhanJiangChallengeServerProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuanQia", wireType)
			}
			m.GuanQia = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhanjiang
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuanQia |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassCount", wireType)
			}
			m.PassCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhanjiang
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PassCount |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainId", wireType)
			}
			m.CaptainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZhanjiang
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CaptainId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZhanjiang(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZhanjiang
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipZhanjiang(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowZhanjiang
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZhanjiang
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZhanjiang
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthZhanjiang
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowZhanjiang
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipZhanjiang(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthZhanjiang = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowZhanjiang   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/pb/server_proto/zhanjiang.proto", fileDescriptorZhanjiang)
}

var fileDescriptorZhanjiang = []byte{
	// 309 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xcf, 0x4e, 0x02, 0x31,
	0x10, 0xc6, 0x2d, 0xe0, 0x1f, 0x0a, 0xc4, 0x64, 0x4f, 0x6b, 0x22, 0x9b, 0x0d, 0x31, 0x86, 0x13,
	0x9b, 0xe8, 0xc1, 0x78, 0x95, 0x83, 0xe0, 0x49, 0xd1, 0x13, 0x97, 0x66, 0x28, 0x4d, 0xb7, 0x66,
	0x69, 0x6b, 0xb7, 0x95, 0xc4, 0x27, 0xf1, 0x91, 0x3c, 0xf2, 0x08, 0x06, 0x5f, 0xc4, 0xb4, 0x2b,
	0x1b, 0x4e, 0x9e, 0x26, 0xfd, 0x7d, 0xd3, 0x7e, 0xdf, 0x74, 0xf0, 0x2d, 0x17, 0x36, 0x77, 0x8b,
	0x11, 0x55, 0xab, 0xac, 0x10, 0x3c, 0xb7, 0x1a, 0xd6, 0xd9, 0x0a, 0x0a, 0x76, 0x93, 0xe9, 0x45,
	0x56, 0x32, 0xf3, 0xce, 0x0c, 0xd1, 0x46, 0x59, 0x95, 0x7d, 0xe4, 0x20, 0x5f, 0x05, 0x48, 0x3e,
	0x0a, 0xe7, 0xe8, 0x30, 0x94, 0xc1, 0x06, 0xe1, 0x78, 0xc2, 0x8c, 0x9a, 0xe7, 0x20, 0x1f, 0xbc,
	0xfc, 0x1c, 0x2e, 0x3d, 0x86, 0x9e, 0x3e, 0xc6, 0x4a, 0x33, 0x49, 0xac, 0x58, 0xb1, 0x32, 0x46,
	0x29, 0x1a, 0xb6, 0x66, 0x6d, 0x4f, 0x5e, 0x3c, 0x88, 0x06, 0xb8, 0xa7, 0xa1, 0x2c, 0x09, 0x77,
	0x20, 0xc9, 0x9b, 0x80, 0xb8, 0x91, 0x36, 0x87, 0xad, 0x59, 0xc7, 0xc3, 0x7b, 0x07, 0xf2, 0x49,
	0x40, 0x34, 0xc5, 0x3d, 0xea, 0x0c, 0xa1, 0x39, 0x14, 0x05, 0x93, 0x9c, 0xc5, 0xcd, 0x14, 0x0d,
	0x3b, 0x57, 0x17, 0x55, 0x8a, 0x51, 0x6d, 0x3b, 0xde, 0x35, 0xec, 0xf9, 0xcf, 0xba, 0xd4, 0x99,
	0x5a, 0x88, 0x2e, 0xf1, 0x69, 0x01, 0xa5, 0x25, 0x14, 0xb4, 0x05, 0x21, 0x89, 0x58, 0xc6, 0xad,
	0x10, 0xa9, 0xe7, 0xf1, 0xb8, 0xa2, 0xd3, 0xe5, 0x60, 0x8d, 0xfb, 0xff, 0x3e, 0x1b, 0x9d, 0xe1,
	0x93, 0x3a, 0x72, 0x35, 0xd4, 0x31, 0xff, 0x8b, 0x7b, 0x8e, 0xdb, 0x3e, 0xfd, 0x58, 0x39, 0x69,
	0xe3, 0x46, 0x35, 0x70, 0x0d, 0xfc, 0x7f, 0xec, 0x99, 0x37, 0x2b, 0x99, 0xee, 0x8c, 0xef, 0xd2,
	0xaf, 0x6d, 0x82, 0x36, 0xdb, 0x04, 0x7d, 0x6f, 0x13, 0xf4, 0xf9, 0x93, 0x1c, 0x4c, 0xd0, 0xbc,
	0xbb, 0xbf, 0x84, 0xc5, 0x51, 0x28, 0xd7, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x74, 0x76, 0x16,
	0xb8, 0xb8, 0x01, 0x00, 0x00,
}
