// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/pb/server_proto/buff.proto
// DO NOT EDIT!

package server_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type HeroBuffServerProto struct {
	Buff map[int32]*BuffInfoServerProto `protobuf:"bytes,1,rep,name=buff" json:"buff,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *HeroBuffServerProto) Reset()                    { *m = HeroBuffServerProto{} }
func (m *HeroBuffServerProto) String() string            { return proto.CompactTextString(m) }
func (*HeroBuffServerProto) ProtoMessage()               {}
func (*HeroBuffServerProto) Descriptor() ([]byte, []int) { return fileDescriptorBuff, []int{0} }

func (m *HeroBuffServerProto) GetBuff() map[int32]*BuffInfoServerProto {
	if m != nil {
		return m.Buff
	}
	return nil
}

type BuffInfoServerProto struct {
	StartTime    int64  `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime      int64  `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	BuffEffectId uint64 `protobuf:"varint,3,opt,name=buff_effect_id,json=buffEffectId,proto3" json:"buff_effect_id,omitempty"`
	OperId       int64  `protobuf:"varint,4,opt,name=oper_id,json=operId,proto3" json:"oper_id,omitempty"`
}

func (m *BuffInfoServerProto) Reset()                    { *m = BuffInfoServerProto{} }
func (m *BuffInfoServerProto) String() string            { return proto.CompactTextString(m) }
func (*BuffInfoServerProto) ProtoMessage()               {}
func (*BuffInfoServerProto) Descriptor() ([]byte, []int) { return fileDescriptorBuff, []int{1} }

func (m *BuffInfoServerProto) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *BuffInfoServerProto) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *BuffInfoServerProto) GetBuffEffectId() uint64 {
	if m != nil {
		return m.BuffEffectId
	}
	return 0
}

func (m *BuffInfoServerProto) GetOperId() int64 {
	if m != nil {
		return m.OperId
	}
	return 0
}

func init() {
	proto.RegisterType((*HeroBuffServerProto)(nil), "proto.HeroBuffServerProto")
	proto.RegisterType((*BuffInfoServerProto)(nil), "proto.BuffInfoServerProto")
}
func (m *HeroBuffServerProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeroBuffServerProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Buff) > 0 {
		for k, _ := range m.Buff {
			dAtA[i] = 0xa
			i++
			v := m.Buff[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovBuff(uint64(msgSize))
			}
			mapSize := 1 + sovBuff(uint64(k)) + msgSize
			i = encodeVarintBuff(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintBuff(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintBuff(dAtA, i, uint64(v.Size()))
				n1, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n1
			}
		}
	}
	return i, nil
}

func (m *BuffInfoServerProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuffInfoServerProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StartTime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBuff(dAtA, i, uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBuff(dAtA, i, uint64(m.EndTime))
	}
	if m.BuffEffectId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBuff(dAtA, i, uint64(m.BuffEffectId))
	}
	if m.OperId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintBuff(dAtA, i, uint64(m.OperId))
	}
	return i, nil
}

func encodeFixed64Buff(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Buff(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintBuff(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *HeroBuffServerProto) Size() (n int) {
	var l int
	_ = l
	if len(m.Buff) > 0 {
		for k, v := range m.Buff {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovBuff(uint64(l))
			}
			mapEntrySize := 1 + sovBuff(uint64(k)) + l
			n += mapEntrySize + 1 + sovBuff(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *BuffInfoServerProto) Size() (n int) {
	var l int
	_ = l
	if m.StartTime != 0 {
		n += 1 + sovBuff(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovBuff(uint64(m.EndTime))
	}
	if m.BuffEffectId != 0 {
		n += 1 + sovBuff(uint64(m.BuffEffectId))
	}
	if m.OperId != 0 {
		n += 1 + sovBuff(uint64(m.OperId))
	}
	return n
}

func sovBuff(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBuff(x uint64) (n int) {
	return sovBuff(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HeroBuffServerProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuff
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroBuffServerProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroBuffServerProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buff", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBuff
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapkey int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				mapkey |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if m.Buff == nil {
				m.Buff = make(map[int32]*BuffInfoServerProto)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBuff
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapmsglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBuff
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					mapmsglen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if mapmsglen < 0 {
					return ErrInvalidLengthBuff
				}
				postmsgIndex := iNdEx + mapmsglen
				if mapmsglen < 0 {
					return ErrInvalidLengthBuff
				}
				if postmsgIndex > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := &BuffInfoServerProto{}
				if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
					return err
				}
				iNdEx = postmsgIndex
				m.Buff[mapkey] = mapvalue
			} else {
				var mapvalue *BuffInfoServerProto
				m.Buff[mapkey] = mapvalue
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBuff(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBuff
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuffInfoServerProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBuff
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuffInfoServerProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuffInfoServerProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuffEffectId", wireType)
			}
			m.BuffEffectId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuffEffectId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperId", wireType)
			}
			m.OperId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBuff(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBuff
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBuff(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBuff
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBuff
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBuff
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBuff
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBuff
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBuff(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBuff = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBuff   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/pb/server_proto/buff.proto", fileDescriptorBuff)
}

var fileDescriptorBuff = []byte{
	// 310 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x49, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0xcf, 0xc9, 0x4c, 0xcf, 0x28, 0x29, 0x48, 0x2c, 0xd7,
	0xcf, 0x4d, 0xcc, 0x49, 0x35, 0xd7, 0x2f, 0x48, 0xd2, 0x2f, 0x4e, 0x2d, 0x2a, 0x4b, 0x2d, 0x8a,
	0x2f, 0x28, 0xca, 0x2f, 0xc9, 0xd7, 0x4f, 0x2a, 0x4d, 0x4b, 0xd3, 0x03, 0x33, 0x85, 0x58, 0xc1,
	0x94, 0xd2, 0x12, 0x46, 0x2e, 0x61, 0x8f, 0xd4, 0xa2, 0x7c, 0xa7, 0xd2, 0xb4, 0xb4, 0x60, 0xb0,
	0xd2, 0x00, 0xb0, 0xb4, 0x05, 0x17, 0x0b, 0x48, 0xb1, 0x04, 0xa3, 0x02, 0xb3, 0x06, 0xb7, 0x91,
	0x0a, 0x44, 0x93, 0x1e, 0x16, 0x95, 0x7a, 0x20, 0xbe, 0x6b, 0x5e, 0x49, 0x51, 0x65, 0x10, 0x58,
	0x87, 0x54, 0x30, 0x17, 0x27, 0x5c, 0x48, 0x48, 0x80, 0x8b, 0x39, 0x3b, 0xb5, 0x52, 0x82, 0x51,
	0x81, 0x51, 0x83, 0x35, 0x08, 0xc4, 0x14, 0x32, 0xe0, 0x62, 0x2d, 0x4b, 0xcc, 0x29, 0x4d, 0x95,
	0x60, 0x52, 0x60, 0xd4, 0xe0, 0x36, 0x92, 0x82, 0x9a, 0x0c, 0xd2, 0xe2, 0x99, 0x97, 0x96, 0x8f,
	0x64, 0x72, 0x10, 0x44, 0xa1, 0x15, 0x93, 0x05, 0xa3, 0x52, 0x1f, 0x23, 0x97, 0x30, 0x16, 0x25,
	0x42, 0xb2, 0x5c, 0x5c, 0xc5, 0x25, 0x89, 0x45, 0x25, 0xf1, 0x25, 0x99, 0xb9, 0xa9, 0x60, 0x6b,
	0x98, 0x83, 0x38, 0xc1, 0x22, 0x21, 0x99, 0xb9, 0xa9, 0x42, 0x92, 0x5c, 0x1c, 0xa9, 0x79, 0x29,
	0x10, 0x49, 0x26, 0xb0, 0x24, 0x7b, 0x6a, 0x5e, 0x0a, 0x58, 0x4a, 0x85, 0x8b, 0x0f, 0xe4, 0xdc,
	0xf8, 0xd4, 0xb4, 0xb4, 0xd4, 0xe4, 0x92, 0xf8, 0xcc, 0x14, 0x09, 0x66, 0x05, 0x46, 0x0d, 0x96,
	0x20, 0x1e, 0x90, 0xa8, 0x2b, 0x58, 0xd0, 0x33, 0x45, 0x48, 0x9c, 0x8b, 0x3d, 0xbf, 0x20, 0xb5,
	0x08, 0x24, 0xcd, 0x02, 0xd6, 0xcf, 0x06, 0xe2, 0x7a, 0xa6, 0x38, 0x29, 0x9c, 0x78, 0x24, 0xc7,
	0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x33, 0x1e, 0xcb, 0x31, 0x78, 0x30, 0x46,
	0xf1, 0x20, 0x87, 0x75, 0x12, 0x1b, 0x98, 0x32, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x1e, 0x36,
	0x86, 0x27, 0x9f, 0x01, 0x00, 0x00,
}
