// Code generated by protoc-gen-gogo.
// source: github.com/lightpaw/male7/pb/server_proto/vip.proto
// DO NOT EDIT!

package server_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type HeroVipServerProto struct {
	Level                     uint64            `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Exp                       uint64            `protobuf:"varint,2,opt,name=exp,proto3" json:"exp,omitempty"`
	DailyFirstLoginTime       int64             `protobuf:"varint,3,opt,name=daily_first_login_time,json=dailyFirstLoginTime,proto3" json:"daily_first_login_time,omitempty"`
	ContinueDays              uint64            `protobuf:"varint,4,opt,name=continue_days,json=continueDays,proto3" json:"continue_days,omitempty"`
	CollectDailyPrizeTime     int64             `protobuf:"varint,5,opt,name=collect_daily_prize_time,json=collectDailyPrizeTime,proto3" json:"collect_daily_prize_time,omitempty"`
	DailyPrizeCanCollectLevel map[uint64]bool   `protobuf:"bytes,6,rep,name=daily_prize_can_collect_level,json=dailyPrizeCanCollectLevel" json:"daily_prize_can_collect_level,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	LevelPrizeCollectedLevel  map[uint64]bool   `protobuf:"bytes,7,rep,name=level_prize_collected_level,json=levelPrizeCollectedLevel" json:"level_prize_collected_level,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	VipShopBoughtCount        map[uint64]uint64 `protobuf:"bytes,8,rep,name=vip_shop_bought_count,json=vipShopBoughtCount" json:"vip_shop_bought_count,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	DailyPrizeCollectedLevel  []uint64          `protobuf:"varint,9,rep,packed,name=daily_prize_collected_level,json=dailyPrizeCollectedLevel" json:"daily_prize_collected_level,omitempty"`
}

func (m *HeroVipServerProto) Reset()                    { *m = HeroVipServerProto{} }
func (m *HeroVipServerProto) String() string            { return proto.CompactTextString(m) }
func (*HeroVipServerProto) ProtoMessage()               {}
func (*HeroVipServerProto) Descriptor() ([]byte, []int) { return fileDescriptorVip, []int{0} }

func (m *HeroVipServerProto) GetLevel() uint64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *HeroVipServerProto) GetExp() uint64 {
	if m != nil {
		return m.Exp
	}
	return 0
}

func (m *HeroVipServerProto) GetDailyFirstLoginTime() int64 {
	if m != nil {
		return m.DailyFirstLoginTime
	}
	return 0
}

func (m *HeroVipServerProto) GetContinueDays() uint64 {
	if m != nil {
		return m.ContinueDays
	}
	return 0
}

func (m *HeroVipServerProto) GetCollectDailyPrizeTime() int64 {
	if m != nil {
		return m.CollectDailyPrizeTime
	}
	return 0
}

func (m *HeroVipServerProto) GetDailyPrizeCanCollectLevel() map[uint64]bool {
	if m != nil {
		return m.DailyPrizeCanCollectLevel
	}
	return nil
}

func (m *HeroVipServerProto) GetLevelPrizeCollectedLevel() map[uint64]bool {
	if m != nil {
		return m.LevelPrizeCollectedLevel
	}
	return nil
}

func (m *HeroVipServerProto) GetVipShopBoughtCount() map[uint64]uint64 {
	if m != nil {
		return m.VipShopBoughtCount
	}
	return nil
}

func (m *HeroVipServerProto) GetDailyPrizeCollectedLevel() []uint64 {
	if m != nil {
		return m.DailyPrizeCollectedLevel
	}
	return nil
}

func init() {
	proto.RegisterType((*HeroVipServerProto)(nil), "proto.HeroVipServerProto")
}
func (m *HeroVipServerProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HeroVipServerProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Level != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.Level))
	}
	if m.Exp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.Exp))
	}
	if m.DailyFirstLoginTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.DailyFirstLoginTime))
	}
	if m.ContinueDays != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.ContinueDays))
	}
	if m.CollectDailyPrizeTime != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.CollectDailyPrizeTime))
	}
	if len(m.DailyPrizeCanCollectLevel) > 0 {
		for k, _ := range m.DailyPrizeCanCollectLevel {
			dAtA[i] = 0x32
			i++
			v := m.DailyPrizeCanCollectLevel[k]
			mapSize := 1 + sovVip(uint64(k)) + 1 + 1
			i = encodeVarintVip(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintVip(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			if v {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i++
		}
	}
	if len(m.LevelPrizeCollectedLevel) > 0 {
		for k, _ := range m.LevelPrizeCollectedLevel {
			dAtA[i] = 0x3a
			i++
			v := m.LevelPrizeCollectedLevel[k]
			mapSize := 1 + sovVip(uint64(k)) + 1 + 1
			i = encodeVarintVip(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintVip(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			if v {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i++
		}
	}
	if len(m.VipShopBoughtCount) > 0 {
		for k, _ := range m.VipShopBoughtCount {
			dAtA[i] = 0x42
			i++
			v := m.VipShopBoughtCount[k]
			mapSize := 1 + sovVip(uint64(k)) + 1 + sovVip(uint64(v))
			i = encodeVarintVip(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintVip(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			i = encodeVarintVip(dAtA, i, uint64(v))
		}
	}
	if len(m.DailyPrizeCollectedLevel) > 0 {
		dAtA2 := make([]byte, len(m.DailyPrizeCollectedLevel)*10)
		var j1 int
		for _, num := range m.DailyPrizeCollectedLevel {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x4a
		i++
		i = encodeVarintVip(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	return i, nil
}

func encodeFixed64Vip(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Vip(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintVip(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *HeroVipServerProto) Size() (n int) {
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovVip(uint64(m.Level))
	}
	if m.Exp != 0 {
		n += 1 + sovVip(uint64(m.Exp))
	}
	if m.DailyFirstLoginTime != 0 {
		n += 1 + sovVip(uint64(m.DailyFirstLoginTime))
	}
	if m.ContinueDays != 0 {
		n += 1 + sovVip(uint64(m.ContinueDays))
	}
	if m.CollectDailyPrizeTime != 0 {
		n += 1 + sovVip(uint64(m.CollectDailyPrizeTime))
	}
	if len(m.DailyPrizeCanCollectLevel) > 0 {
		for k, v := range m.DailyPrizeCanCollectLevel {
			_ = k
			_ = v
			mapEntrySize := 1 + sovVip(uint64(k)) + 1 + 1
			n += mapEntrySize + 1 + sovVip(uint64(mapEntrySize))
		}
	}
	if len(m.LevelPrizeCollectedLevel) > 0 {
		for k, v := range m.LevelPrizeCollectedLevel {
			_ = k
			_ = v
			mapEntrySize := 1 + sovVip(uint64(k)) + 1 + 1
			n += mapEntrySize + 1 + sovVip(uint64(mapEntrySize))
		}
	}
	if len(m.VipShopBoughtCount) > 0 {
		for k, v := range m.VipShopBoughtCount {
			_ = k
			_ = v
			mapEntrySize := 1 + sovVip(uint64(k)) + 1 + sovVip(uint64(v))
			n += mapEntrySize + 1 + sovVip(uint64(mapEntrySize))
		}
	}
	if len(m.DailyPrizeCollectedLevel) > 0 {
		l = 0
		for _, e := range m.DailyPrizeCollectedLevel {
			l += sovVip(uint64(e))
		}
		n += 1 + sovVip(uint64(l)) + l
	}
	return n
}

func sovVip(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozVip(x uint64) (n int) {
	return sovVip(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HeroVipServerProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HeroVipServerProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HeroVipServerProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			m.Exp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exp |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DailyFirstLoginTime", wireType)
			}
			m.DailyFirstLoginTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DailyFirstLoginTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContinueDays", wireType)
			}
			m.ContinueDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContinueDays |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectDailyPrizeTime", wireType)
			}
			m.CollectDailyPrizeTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollectDailyPrizeTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DailyPrizeCanCollectLevel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVip
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				mapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if m.DailyPrizeCanCollectLevel == nil {
				m.DailyPrizeCanCollectLevel = make(map[uint64]bool)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVip
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapvaluetemp int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVip
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					mapvaluetemp |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				mapvalue := bool(mapvaluetemp != 0)
				m.DailyPrizeCanCollectLevel[mapkey] = mapvalue
			} else {
				var mapvalue bool
				m.DailyPrizeCanCollectLevel[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelPrizeCollectedLevel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVip
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				mapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if m.LevelPrizeCollectedLevel == nil {
				m.LevelPrizeCollectedLevel = make(map[uint64]bool)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVip
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapvaluetemp int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVip
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					mapvaluetemp |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				mapvalue := bool(mapvaluetemp != 0)
				m.LevelPrizeCollectedLevel[mapkey] = mapvalue
			} else {
				var mapvalue bool
				m.LevelPrizeCollectedLevel[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipShopBoughtCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVip
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var mapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				mapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if m.VipShopBoughtCount == nil {
				m.VipShopBoughtCount = make(map[uint64]uint64)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVip
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapvalue uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVip
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					mapvalue |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.VipShopBoughtCount[mapkey] = mapvalue
			} else {
				var mapvalue uint64
				m.VipShopBoughtCount[mapkey] = mapvalue
			}
			iNdEx = postIndex
		case 9:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVip
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DailyPrizeCollectedLevel = append(m.DailyPrizeCollectedLevel, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVip
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthVip
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVip
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DailyPrizeCollectedLevel = append(m.DailyPrizeCollectedLevel, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DailyPrizeCollectedLevel", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVip(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVip
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVip
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVip
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthVip
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowVip
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipVip(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthVip = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVip   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/lightpaw/male7/pb/server_proto/vip.proto", fileDescriptorVip)
}

var fileDescriptorVip = []byte{
	// 451 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0x26, 0x4b, 0x5b, 0x86, 0x19, 0x12, 0x32, 0x0c, 0xcc, 0xa6, 0x45, 0x11, 0x5c, 0x7a, 0x6a,
	0x04, 0x3d, 0x74, 0x42, 0xe2, 0xb2, 0x6e, 0x68, 0x12, 0x3d, 0x4c, 0x01, 0x71, 0xe0, 0x62, 0xb9,
	0x89, 0x69, 0x2c, 0xdc, 0xd8, 0x4a, 0x9c, 0x40, 0xf6, 0x4b, 0xf8, 0x49, 0x88, 0x13, 0x3f, 0x01,
	0x95, 0x3f, 0x82, 0xfc, 0xdc, 0x88, 0x8c, 0x29, 0x43, 0x9c, 0xfc, 0x9e, 0xbf, 0x7c, 0xdf, 0x97,
	0xf7, 0xe9, 0x19, 0x4d, 0x57, 0xc2, 0x64, 0xd5, 0x72, 0x92, 0xa8, 0x75, 0x24, 0xc5, 0x2a, 0x33,
	0x9a, 0x7d, 0x8e, 0xd6, 0x4c, 0xf2, 0x59, 0xa4, 0x97, 0x51, 0xc9, 0x8b, 0x9a, 0x17, 0x54, 0x17,
	0xca, 0xa8, 0xa8, 0x16, 0x7a, 0x02, 0x15, 0x1e, 0xc2, 0xf1, 0xf4, 0xfb, 0x08, 0xe1, 0x73, 0x5e,
	0xa8, 0xf7, 0x42, 0xbf, 0x85, 0x0f, 0x2f, 0x00, 0x7d, 0x88, 0x86, 0x92, 0xd7, 0x5c, 0x12, 0x2f,
	0xf4, 0xc6, 0x83, 0xd8, 0x35, 0xf8, 0x3e, 0xf2, 0xf9, 0x17, 0x4d, 0x76, 0xe0, 0xce, 0x96, 0x78,
	0x8a, 0x1e, 0xa5, 0x4c, 0xc8, 0x86, 0x7e, 0x14, 0x45, 0x69, 0xa8, 0x54, 0x2b, 0x91, 0x53, 0x23,
	0xd6, 0x9c, 0xf8, 0xa1, 0x37, 0xf6, 0xe3, 0x07, 0x80, 0xbe, 0xb6, 0xe0, 0xc2, 0x62, 0xef, 0xc4,
	0x9a, 0xe3, 0x67, 0xe8, 0x5e, 0xa2, 0x72, 0x23, 0xf2, 0x8a, 0xd3, 0x94, 0x35, 0x25, 0x19, 0x80,
	0xe0, 0x5e, 0x7b, 0x79, 0xca, 0x9a, 0x12, 0xcf, 0x10, 0x49, 0x94, 0x94, 0x3c, 0x31, 0xd4, 0x39,
	0xe8, 0x42, 0x5c, 0x72, 0xa7, 0x3d, 0x04, 0xed, 0xfd, 0x2d, 0x7e, 0x6a, 0xe1, 0x0b, 0x8b, 0x82,
	0xfa, 0x25, 0x3a, 0xea, 0x12, 0x12, 0x96, 0xd3, 0x56, 0xc8, 0x8d, 0x34, 0x0a, 0xfd, 0xf1, 0xdd,
	0x17, 0xc7, 0x2e, 0x87, 0xc9, 0xf5, 0xe1, 0x27, 0x7f, 0x04, 0xe7, 0x2c, 0x9f, 0x3b, 0xee, 0xc2,
	0x52, 0xcf, 0x72, 0x53, 0x34, 0xf1, 0x93, 0xb4, 0x0f, 0xc7, 0x35, 0x3a, 0x04, 0x8f, 0xd6, 0xdb,
	0x61, 0x3c, 0xdd, 0x3a, 0xdf, 0x06, 0xe7, 0x59, 0xbf, 0x33, 0xa8, 0x38, 0xe5, 0x96, 0xda, 0x31,
	0x26, 0xb2, 0x07, 0xc6, 0x29, 0xda, 0xaf, 0x85, 0xa6, 0x65, 0xa6, 0x34, 0x5d, 0xaa, 0x6a, 0x95,
	0x19, 0x9a, 0xa8, 0x2a, 0x37, 0x64, 0x17, 0x1c, 0x9f, 0xf7, 0x3b, 0xda, 0x36, 0x53, 0xfa, 0x04,
	0x48, 0x73, 0xcb, 0x71, 0x5e, 0xb8, 0xbe, 0x06, 0xe0, 0x57, 0xe8, 0xf0, 0x4a, 0xb2, 0x7f, 0x4d,
	0x77, 0x27, 0xf4, 0xc7, 0x83, 0x98, 0x74, 0xd2, 0xb9, 0xf2, 0x93, 0x07, 0x0b, 0x14, 0xdc, 0x9c,
	0xac, 0xdd, 0xaf, 0x4f, 0xbc, 0xd9, 0xee, 0x9c, 0x2d, 0xed, 0x1e, 0xd6, 0x4c, 0x56, 0x1c, 0x76,
	0x6e, 0x37, 0x76, 0xcd, 0xcb, 0x9d, 0x63, 0xef, 0xe0, 0x0d, 0x3a, 0xba, 0x31, 0xad, 0xff, 0x12,
	0x3b, 0x43, 0x8f, 0x7b, 0x82, 0xf8, 0x97, 0xcc, 0xa0, 0x23, 0x73, 0x12, 0x7e, 0xdb, 0x04, 0xde,
	0x8f, 0x4d, 0xe0, 0xfd, 0xdc, 0x04, 0xde, 0xd7, 0x5f, 0xc1, 0xad, 0x73, 0xef, 0xc3, 0x5e, 0xf7,
	0xfd, 0x2d, 0x47, 0x70, 0x4c, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x7a, 0x72, 0x5e, 0xf5, 0xb3,
	0x03, 0x00, 0x00,
}
