
gen_error_msg: true

client_pb_import:
  "shared.proto"

# 解锁新的密室id，这个id只会越来越大
# 如果此前密室没有开启，客户端会收到 times_change 消息，会给你一个默认的次数
# 客户端判断xxx密室是否开启，可以通过 xxx密室.id <= 开放了的secret_tower_id
unlock_secret_tower:
  s2c:
    secret_tower_id: int // 解锁的密室id<=该密室id的密室全部都解锁了，收到该消息之后，客户端本地缓存该数据

# 请求密室队伍数量，客户端缓存一定的时间，缓存10s，10s之后如果还是打开着这个面板，可以继续来请求一次
# 收到返回后，如果该密室的队伍数量跟 request_team_list 缓存的密室的队伍数量不匹配，将 request_team_count 该密室的队伍数量设置为该密室队伍数量
request_team_count:
  c2s:
  s2c:
    secret_tower_id: int[] // 密室id
    team_count: int[] // 队伍数量，跟密室id一一对应
  s2c_fail:
    not_open: 密室没有开启

# 请求队伍列表，清空掉所有的密室队伍列表，缓存新的列表，缓存10s，10s之后如果还是打开着这个面板，可以继续来请求一次，如果玩家点击了刷新按钮，如果时间没到，用缓存来显示，否则来请求
# 收到返回后，如果该密室的队伍数量跟 request_team_count 返回的丢无数量不匹配，将 request_team_count 该密室的队伍数量设置为该密室队伍数量
request_team_list:
  c2s:
    secret_tower_id: int // 密室id
  s2c:
    secret_tower_id: int // 密室id
    team_list: bytes[] // 队伍列表, []shared_proto.SecretTeamShowProto
  s2c_fail:
    not_open: 密室没有开启
    unknown_secret_tower: 未知密室

# 创建队伍
create_team:
  c2s:
    secret_tower_id: int // 密室id
    is_guild: bool // 帮派密室(true)/普通密室(false)
  # 创建队伍成功
  s2c:
    team_detail: bytes // 队伍详细信息, shared_proto.SecretTeamDetailProto，收到消息后，客户端缓存10s，如有需要，可以再来请求一次 此处同request_team_detail
  s2c_fail:
    unknown_tower_id: 未知密室
    unopen: 密室未开启
    have_team_now: 当前有队伍
    no_guild: 没有联盟
    times_not_enough: 次数不足
    captain_not_full: 上阵武将未满
    captain_too_much: 上阵武将超出上限
    captain_not_exist: 上阵武将不存在
    captain_id_duplicate: 上阵武将id重复
    server_error: 服务器错误

# 加入房间
#
# 一键加入房间说明
# 必须有挑战次数才能一键加入，只有协助次数不能一键加入
#
# team_id == 0 表示判断一键加入密室，否则表示加入队伍
join_team:
  c2s:
    team_id: int // 队伍id，这个有值，优先这个
    secret_tower_id: int // 密室id, 0表示不限
  s2c:
    team_detail: bytes // 队伍详细信息, shared_proto.SecretTeamDetailProto, 收到消息后，客户端缓存10s，如有需要，可以再来请求一次 此处同request_team_detail
  s2c_other_join:
    member: bytes // 队伍详细信息, shared_proto.SecretTeamMemberProto
    protect_end_time: int // 新的保护结束unix时间戳
  s2c_fail:
    unopen: 密室未开启
    have_team_now: 当前有队伍
    not_target_guild: 不是目标队伍联盟的
    team_not_found: 队伍没找到
    team_full: 队伍已满
    times_not_enough: 次数不足
    captain_not_full: 上阵武将未满
    captain_too_much: 上阵武将超出上限
    captain_not_exist: 上阵武将不存在
    captain_id_duplicate: 上阵武将id重复
    can_not_help_max_tower: 不可以协助自己能够参与的最高层的密室
    can_not_help_no_guild_member_team: 队伍中没有盟友，不能以协助模式加入队伍
    not_valid_team: 没找到合适的队伍可以加入，请尝试创建队伍
    server_error: 服务器错误

## 一键加入房间
#auto_join_team:
#  c2s:
#    secret_tower_id: int // 密室id, 0表示不限
#  s2c:
#    team_detail: bytes // 队伍详细信息, shared_proto.SecretTeamDetailProto, 收到消息后，客户端缓存10s，如有需要，可以再来请求一次 此处同request_team_detail
#  s2c_fail:
#    have_team_now: 当前有队伍


# 离开房间
leave_team:
  c2s:
  # 离开房间成功了
  s2c:
  # 房间里面有人离开了
  s2c_other_leave:
    id: bytes // 离开的人的id
    new_team_leader_id: bytes // 新的队长id，跟此前队长id相同表示队长没变
  s2c_fail:
    no_team: 没有队伍

# 踢出房间
kick_member:
  c2s:
    id: bytes // 要踢出的人的id
  # xx被踢出房间了
  s2c:
    id: bytes // 离开的人的id
  # 你呗踢出队伍了
  s2c_you_been_kicked:
  # 房间里面有人离开了，房主不会收到该消息，被踢的人不会收到该消息
  s2c_other_been_kick:
    id: bytes // 离开的人的id
  s2c_fail:
    no_team: 没有队伍
    target_not_found: 目标没找到
    not_leader: 不是队长
    cant_kick_self: 不能踢出自己

# 移动队伍成员
move_member:
  c2s:
    id: bytes // 要移动的成员
    up: bool // true(上移)/false(下移)
  #广播谁谁谁被上移还是下移了
  s2c_broadcsat:
    id: bytes // 要移动的成员
    up: bool // true(上移)/false(下移)
  s2c_fail:
    no_team: 没有队伍
    not_leader: 不是队长
    target_not_found: 要移动的成员没找到
    target_is_first: 要移动的成员已经是第一个了
    target_is_last: 要移动的成员已经是最后一个了

# 更新队伍列表
update_member_pos:
  c2s:
    id: bytes[] // 新成员列表
  s2c:
    id: bytes[] // 新成员列表
  s2c_fail:
    no_team: 没有队伍
    not_leader: 不是队长
    target_not_found: 要移动的成员没找到
    target_duplicate: 发送的成员列表重复

# 修改模式
change_mode:
  c2s:
    mode: int // 模式类型
  s2c:
    mode: int // 模式类型
  #有人变更了模式
  s2c_other_changed:
    id: bytes // 谁修改了自己的模式
    mode: int // 模式类型
  s2c_fail:
    no_team: 没有队伍
    unknown_mode: 未知模式
    no_times: 没次数了，无法调整到目标模式
    mode_not_change: 模式没变
    is_leader: 队长不可以变更模式
    can_not_help_max_tower: 不可以协助自己能够参与的最高层的密室
    can_not_help_no_guild_member: 队伍中没有盟友，不能协助
    no_help_times: 没有协助次数了
    server_error: 服务器错误

# 协助次数变更了
# 当收到misc_message.yaml中的reset_daily的消息的时候，将协助次数重置为0
help_times_change:
  s2c:
    new_times: int // 新的协助次数

# 次数变更了
# HeroSecretTowerProto
#      int32 challenge_times = 11; // 当前挑战次数，最大挑战次数Config.SecretTowerMisc.MaxTimes
#
# 当收到reset_daily的时候，将挑战次数重置为0
# 收到后将HeroSecretTowerProto.history_challenge_times次数+1
times_change:
  s2c:
    challenge_times: int // 当前挑战次数
    history_challenge_times: int // 历史挑战次数

# 邀请别人
invite:
  c2s:
    id: bytes // 邀请的玩家id
  # 邀请成功
  s2c:
    id: bytes // 邀请的玩家id
  s2c_fail_target_not_found:
    id: bytes // 邀请的玩家id，玩家没找到
  s2c_fail_target_not_in_my_guild:
    id: bytes // 邀请的玩家id，目标玩家不在本盟
  s2c_fail_target_not_open:
    id: bytes // 邀请的玩家id，目标玩家没有开启该密室
  s2c_fail_target_not_online:
    id: bytes // 邀请的玩家id，目标玩家没有在线
  s2c_fail_target_in_your_team:
    id: bytes // 邀请的玩家id，目标玩家在队伍中了
  s2c_fail_target_no_times:
    id: bytes // 邀请的玩家id，目标玩家没次数了
  s2c_fail:
    no_team: 没有队伍
    team_full: 队伍已满
    server_error: 服务器错误

# 一键邀请所有
invite_all:
  c2s:
    id: bytes[] // 邀请的玩家id
  s2c:
    id: bytes[] // 邀请的玩家id
  s2c_fail:
    invalid_id: 无效的id
    no_team: 没有队伍
    team_full: 队伍已满
    server_error: 服务器错误

# 收到重楼密室邀请，本次登录期间客户端都要保存邀请的数量，登录的时候，数量是0
# 收到该消息后，清空客户端缓存的邀请列表，如果需要数据，可以立刻来请求邀请列表
receive_invite:
  s2c:
    count: int // 邀请的数量，客户端根据邀请数量自己决定是否显示图标
    have_new: bool // 是否有新的(新的的定义是，从我上次看到这个邀请列表到现在有没有新的邀请)

# 请求密室邀请列表，如果邀请的数量为0，那么久没必要申请了
# 将返回的列表在本地缓存
request_invite_list:
  c2s:
  s2c:
    invite_list: bytes[] // 邀请列表, []shared_proto.SecretTeamShowProto

# 请求队伍成员列表，收到消息后，客户端缓存10s，如有需要，可以再来请求一次 request_team_detail
request_team_detail:
  c2s:
  s2c:
    team_detail: bytes // 队伍详细信息, shared_proto.SecretTeamDetailProto
  s2c_fail:
    no_team: 没有队伍

# 开启挑战
start_challenge:
  c2s:
  # 开启广播，收到广播后，把玩家移除队伍，队伍已经没有了
  s2c_broadcast:
    result: bytes // 结果 shared_proto.SecretChallengeResultProto

  #xxx 挑战次数不够
  s2c_fail_with_member_times_not_enough:
    id: bytes // 玩家id
    name: string // 玩家名字
    guild_flag: string // 玩家帮旗
  #xxx 协助次数不够
  s2c_fail_with_member_help_times_not_enough:
    id: bytes // 玩家id
    name: string // 玩家名字
    guild_flag: string // 玩家帮旗
  #xxx 没有联盟的
  s2c_fail_with_member_no_guild:
    id: bytes // 玩家id
    name: string // 玩家名字
    guild_flag: string // 玩家帮旗
  #xxx 不是该联盟的
  s2c_fail_with_member_not_my_guild:
    id: bytes // 玩家id
    name: string // 玩家名字
    guild_flag: string // 玩家帮旗
  #xxx 开的是协助模式，但是没有联盟
  s2c_fail_with_member_is_help_but_no_guild:
    id: bytes // 玩家id
    name: string // 玩家名字
    guild_flag: string // 玩家帮旗
  #xxx 开的是协助模式，但是没有盟友
  s2c_fail_with_member_is_help_but_no_guild_member:
    id: bytes // 玩家id
    name: string // 玩家名字
    guild_flag: string // 玩家帮旗
  s2c_fail:
    no_team: 没有队伍
    not_team_leader: 不是队长
    team_member_not_enough: 队伍人数不够
    wait_protect_end: 请等待其他人都准备好
    no_challenge_people: 没有人是挑战模式，无法开启
    server_error: 服务器繁忙，请稍后再试

# 队伍过期解散了
team_expired:
  s2c:

# 队伍解散了(对战离开导致)
team_destroyed_because_of_leader_leave:
  s2c:

# 快速请求队伍基本信息，最多请求五个队伍id，超出的，服务器不返回，请求间隔可以3秒请求一次
quick_query_team_basic:
  c2s:
    ids: int[] // 队伍的id
  s2c:
    basics: bytes[] // 队伍基本信息, []shared_proto.SecretTeamShowProto
    not_exist_ids: int[] // 不存在了的队伍id
  s2c_fail:
    server_error: 服务器繁忙，请稍后再试

# 变更联盟模式
change_guild_mode:
  c2s:
  # 仅做提示
  s2c:
  s2c_fail:
    no_team: 没有队伍
    not_leader: 不是队长
    no_guild: 没有加入联盟，无法变更为联盟模式
    sb_not_in_my_guild: 有玩家没有加入我们联盟
    server_error: 服务器繁忙，请稍后再试

# 变更队伍联盟模式广播
change_guild_mode_broadcast:
  s2c:
    guild_id: int // guild_id != 0 表示联盟模式，0表示随便组队模式

# 成员队伍变更了
member_troop_changed:
  s2c:
    member: bytes // 队伍成员详细信息, shared_proto.SecretTeamMemberProto
    protect_end_time: int // 新的保护结束unix时间戳

server_pb_import:
 - "github.com/lightpaw/male7/pb/shared_proto/tower.proto"

# 获取密室记录（倒过来排序，最后一个时间最近）
# 第一次打开密室记录，请求一次，缓存下来
# 如果打开过密室记录，收到挑战结果 shared_proto.SecretChallengeResultProto，客户端自己添加一条密室记录
# 如果没打开过，忽略挑战结果
#
list_record:
  c2s:
  s2c:
    record: shared_proto.SecretRecordProto[] // 密室记录

# 请求密室战报，请求一次，缓存起来 TODO 未完待续（先客户端实现一般复杂的）
#get_record_details:
#  c2s:
#    hero_id: bytes // 英雄id，现在传空值进来
#    id: int // 记录id
#  s2c:
#    hero_id: bytes // 英雄id，返回客户端传入的值
#    id: int // 记录id

# 房间内气泡说话
team_talk:
  c2s:
    words_id: int // 说的话id，SecretTowerWordsDataProto.id
    text: string // 当自定义内容时候,这里存入输入的内容,words_id就为0
  s2c:
    words_id: int // 说的话id，SecretTowerWordsDataProto.id
    text: string // 当words_id为0时候取这里内容
  s2c_fail:
    invalid_words: id 错误
    no_team: 没有队伍

# 房间内有人说话, 不会发给说话的人
team_who_talk:
  s2c:
    hero_id: bytes // 谁说的话
    words_id: int // 说的话 id, SecretTowerWordsDataProto.id
    text: string // 当words_id=0的时候,就取这里的内容显示

# 刚进房间的人会收到10条最近的聊天记录
team_history_talk:
  s2c:
    records: shared_proto.SecretTowerChatRecordProto[] // 聊天记录
