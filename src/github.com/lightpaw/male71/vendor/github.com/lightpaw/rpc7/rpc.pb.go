// Code generated by protoc-gen-gogo.
// source: rpc.proto
// DO NOT EDIT!

/*
	Package rpc7 is a generated protocol buffer package.

	It is generated from these files:
		rpc.proto

	It has these top-level messages:
		RpcRequest
		RpcResponse
		HealthCheckRequest
		HealthCheckResponse
*/
package rpc7

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RspCode int32

const (
	RspCode_SUCCESS           RspCode = 0
	RspCode_HANDLER_NOT_FOUND RspCode = 1
	RspCode_HANDLER_TOO_OLD   RspCode = 2
	RspCode_BAD_C2S_PROTO     RspCode = 3
	RspCode_BAD_S2C_PROTO     RspCode = 4
	RspCode_HANDLE_ERROR      RspCode = 5
	RspCode_INVALID_CODE      RspCode = 9
	// 透传
	RspCode_CONTINUE          RspCode = 30
	RspCode_PASS_TO_NOT_FOUND RspCode = 31
	RspCode_INVALID_PASS_TYPE RspCode = 32
	RspCode_PASS_TO_TIMEOUT   RspCode = 33
	// 程序逻辑返回值
	RspCode_OUT_OF_KEY_RANGE RspCode = 51
)

var RspCode_name = map[int32]string{
	0:  "SUCCESS",
	1:  "HANDLER_NOT_FOUND",
	2:  "HANDLER_TOO_OLD",
	3:  "BAD_C2S_PROTO",
	4:  "BAD_S2C_PROTO",
	5:  "HANDLE_ERROR",
	9:  "INVALID_CODE",
	30: "CONTINUE",
	31: "PASS_TO_NOT_FOUND",
	32: "INVALID_PASS_TYPE",
	33: "PASS_TO_TIMEOUT",
	51: "OUT_OF_KEY_RANGE",
}
var RspCode_value = map[string]int32{
	"SUCCESS":           0,
	"HANDLER_NOT_FOUND": 1,
	"HANDLER_TOO_OLD":   2,
	"BAD_C2S_PROTO":     3,
	"BAD_S2C_PROTO":     4,
	"HANDLE_ERROR":      5,
	"INVALID_CODE":      9,
	"CONTINUE":          30,
	"PASS_TO_NOT_FOUND": 31,
	"INVALID_PASS_TYPE": 32,
	"PASS_TO_TIMEOUT":   33,
	"OUT_OF_KEY_RANGE":  51,
}

func (x RspCode) String() string {
	return proto.EnumName(RspCode_name, int32(x))
}
func (RspCode) EnumDescriptor() ([]byte, []int) { return fileDescriptorRpc, []int{0} }

type RpcRequest_PassType int32

const (
	RpcRequest_Pass      RpcRequest_PassType = 0
	RpcRequest_Random    RpcRequest_PassType = 1
	RpcRequest_Broadcast RpcRequest_PassType = 2
)

var RpcRequest_PassType_name = map[int32]string{
	0: "Pass",
	1: "Random",
	2: "Broadcast",
}
var RpcRequest_PassType_value = map[string]int32{
	"Pass":      0,
	"Random":    1,
	"Broadcast": 2,
}

func (x RpcRequest_PassType) String() string {
	return proto.EnumName(RpcRequest_PassType_name, int32(x))
}
func (RpcRequest_PassType) EnumDescriptor() ([]byte, []int) { return fileDescriptorRpc, []int{0, 0} }

type HealthCheckResponse_ServingStatus int32

const (
	HealthCheckResponse_UNKNOWN     HealthCheckResponse_ServingStatus = 0
	HealthCheckResponse_SERVING     HealthCheckResponse_ServingStatus = 1
	HealthCheckResponse_NOT_SERVING HealthCheckResponse_ServingStatus = 2
)

var HealthCheckResponse_ServingStatus_name = map[int32]string{
	0: "UNKNOWN",
	1: "SERVING",
	2: "NOT_SERVING",
}
var HealthCheckResponse_ServingStatus_value = map[string]int32{
	"UNKNOWN":     0,
	"SERVING":     1,
	"NOT_SERVING": 2,
}

func (x HealthCheckResponse_ServingStatus) String() string {
	return proto.EnumName(HealthCheckResponse_ServingStatus_name, int32(x))
}
func (HealthCheckResponse_ServingStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorRpc, []int{3, 0}
}

type RpcRequest struct {
	Handler string `protobuf:"bytes,1,opt,name=handler,proto3" json:"handler,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Key     int64  `protobuf:"varint,11,opt,name=key,proto3" json:"key,omitempty"`
	Proto   []byte `protobuf:"bytes,12,opt,name=proto,proto3" json:"proto,omitempty"`
	// pass 透传数据，登陆服中转
	PassFrom string              `protobuf:"bytes,31,opt,name=pass_from,json=passFrom,proto3" json:"pass_from,omitempty"`
	PassTo   string              `protobuf:"bytes,32,opt,name=pass_to,json=passTo,proto3" json:"pass_to,omitempty"`
	PassType RpcRequest_PassType `protobuf:"varint,33,opt,name=pass_type,json=passType,proto3,enum=proto.RpcRequest_PassType" json:"pass_type,omitempty"`
}

func (m *RpcRequest) Reset()                    { *m = RpcRequest{} }
func (m *RpcRequest) String() string            { return proto.CompactTextString(m) }
func (*RpcRequest) ProtoMessage()               {}
func (*RpcRequest) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{0} }

func (m *RpcRequest) GetHandler() string {
	if m != nil {
		return m.Handler
	}
	return ""
}

func (m *RpcRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *RpcRequest) GetKey() int64 {
	if m != nil {
		return m.Key
	}
	return 0
}

func (m *RpcRequest) GetProto() []byte {
	if m != nil {
		return m.Proto
	}
	return nil
}

func (m *RpcRequest) GetPassFrom() string {
	if m != nil {
		return m.PassFrom
	}
	return ""
}

func (m *RpcRequest) GetPassTo() string {
	if m != nil {
		return m.PassTo
	}
	return ""
}

func (m *RpcRequest) GetPassType() RpcRequest_PassType {
	if m != nil {
		return m.PassType
	}
	return RpcRequest_Pass
}

type RpcResponse struct {
	Code  RspCode `protobuf:"varint,1,opt,name=code,proto3,enum=proto.RspCode" json:"code,omitempty"`
	Msg   string  `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Proto []byte  `protobuf:"bytes,12,opt,name=proto,proto3" json:"proto,omitempty"`
}

func (m *RpcResponse) Reset()                    { *m = RpcResponse{} }
func (m *RpcResponse) String() string            { return proto.CompactTextString(m) }
func (*RpcResponse) ProtoMessage()               {}
func (*RpcResponse) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{1} }

func (m *RpcResponse) GetCode() RspCode {
	if m != nil {
		return m.Code
	}
	return RspCode_SUCCESS
}

func (m *RpcResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *RpcResponse) GetProto() []byte {
	if m != nil {
		return m.Proto
	}
	return nil
}

type HealthCheckRequest struct {
	Service string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
}

func (m *HealthCheckRequest) Reset()                    { *m = HealthCheckRequest{} }
func (m *HealthCheckRequest) String() string            { return proto.CompactTextString(m) }
func (*HealthCheckRequest) ProtoMessage()               {}
func (*HealthCheckRequest) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{2} }

func (m *HealthCheckRequest) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

type HealthCheckResponse struct {
	Status HealthCheckResponse_ServingStatus `protobuf:"varint,1,opt,name=status,proto3,enum=proto.HealthCheckResponse_ServingStatus" json:"status,omitempty"`
}

func (m *HealthCheckResponse) Reset()                    { *m = HealthCheckResponse{} }
func (m *HealthCheckResponse) String() string            { return proto.CompactTextString(m) }
func (*HealthCheckResponse) ProtoMessage()               {}
func (*HealthCheckResponse) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{3} }

func (m *HealthCheckResponse) GetStatus() HealthCheckResponse_ServingStatus {
	if m != nil {
		return m.Status
	}
	return HealthCheckResponse_UNKNOWN
}

func init() {
	proto.RegisterType((*RpcRequest)(nil), "proto.RpcRequest")
	proto.RegisterType((*RpcResponse)(nil), "proto.RpcResponse")
	proto.RegisterType((*HealthCheckRequest)(nil), "proto.HealthCheckRequest")
	proto.RegisterType((*HealthCheckResponse)(nil), "proto.HealthCheckResponse")
	proto.RegisterEnum("proto.RspCode", RspCode_name, RspCode_value)
	proto.RegisterEnum("proto.RpcRequest_PassType", RpcRequest_PassType_name, RpcRequest_PassType_value)
	proto.RegisterEnum("proto.HealthCheckResponse_ServingStatus", HealthCheckResponse_ServingStatus_name, HealthCheckResponse_ServingStatus_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RpcService service

type RpcServiceClient interface {
	Handle(ctx context.Context, in *RpcRequest, opts ...grpc.CallOption) (*RpcResponse, error)
	Check(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type rpcServiceClient struct {
	cc *grpc.ClientConn
}

func NewRpcServiceClient(cc *grpc.ClientConn) RpcServiceClient {
	return &rpcServiceClient{cc}
}

func (c *rpcServiceClient) Handle(ctx context.Context, in *RpcRequest, opts ...grpc.CallOption) (*RpcResponse, error) {
	out := new(RpcResponse)
	err := grpc.Invoke(ctx, "/proto.RpcService/Handle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcServiceClient) Check(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := grpc.Invoke(ctx, "/proto.RpcService/Check", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RpcService service

type RpcServiceServer interface {
	Handle(context.Context, *RpcRequest) (*RpcResponse, error)
	Check(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
}

func RegisterRpcServiceServer(s *grpc.Server, srv RpcServiceServer) {
	s.RegisterService(&_RpcService_serviceDesc, srv)
}

func _RpcService_Handle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServiceServer).Handle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RpcService/Handle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServiceServer).Handle(ctx, req.(*RpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcService_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServiceServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RpcService/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServiceServer).Check(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RpcService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.RpcService",
	HandlerType: (*RpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Handle",
			Handler:    _RpcService_Handle_Handler,
		},
		{
			MethodName: "Check",
			Handler:    _RpcService_Check_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

func (m *RpcRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Handler) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Handler)))
		i += copy(dAtA[i:], m.Handler)
	}
	if len(m.Version) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	if m.Key != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintRpc(dAtA, i, uint64(m.Key))
	}
	if len(m.Proto) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Proto)))
		i += copy(dAtA[i:], m.Proto)
	}
	if len(m.PassFrom) > 0 {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(m.PassFrom)))
		i += copy(dAtA[i:], m.PassFrom)
	}
	if len(m.PassTo) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(m.PassTo)))
		i += copy(dAtA[i:], m.PassTo)
	}
	if m.PassType != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintRpc(dAtA, i, uint64(m.PassType))
	}
	return i, nil
}

func (m *RpcResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRpc(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if len(m.Proto) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Proto)))
		i += copy(dAtA[i:], m.Proto)
	}
	return i, nil
}

func (m *HealthCheckRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HealthCheckRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Service) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Service)))
		i += copy(dAtA[i:], m.Service)
	}
	return i, nil
}

func (m *HealthCheckResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HealthCheckResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRpc(dAtA, i, uint64(m.Status))
	}
	return i, nil
}

func encodeFixed64Rpc(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Rpc(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintRpc(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RpcRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Handler)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	if m.Key != 0 {
		n += 1 + sovRpc(uint64(m.Key))
	}
	l = len(m.Proto)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	l = len(m.PassFrom)
	if l > 0 {
		n += 2 + l + sovRpc(uint64(l))
	}
	l = len(m.PassTo)
	if l > 0 {
		n += 2 + l + sovRpc(uint64(l))
	}
	if m.PassType != 0 {
		n += 2 + sovRpc(uint64(m.PassType))
	}
	return n
}

func (m *RpcResponse) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovRpc(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	l = len(m.Proto)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}

func (m *HealthCheckRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Service)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}

func (m *HealthCheckResponse) Size() (n int) {
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovRpc(uint64(m.Status))
	}
	return n
}

func sovRpc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRpc(x uint64) (n int) {
	return sovRpc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RpcRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RpcRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RpcRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Handler", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Handler = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			m.Key = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Key |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proto", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proto = append(m.Proto[:0], dAtA[iNdEx:postIndex]...)
			if m.Proto == nil {
				m.Proto = []byte{}
			}
			iNdEx = postIndex
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassFrom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PassFrom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassTo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PassTo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PassType", wireType)
			}
			m.PassType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PassType |= (RpcRequest_PassType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RpcResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RpcResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (RspCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proto", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proto = append(m.Proto[:0], dAtA[iNdEx:postIndex]...)
			if m.Proto == nil {
				m.Proto = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HealthCheckRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HealthCheckRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HealthCheckRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HealthCheckResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HealthCheckResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HealthCheckResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (HealthCheckResponse_ServingStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRpc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRpc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRpc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRpc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRpc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRpc   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("rpc.proto", fileDescriptorRpc) }

var fileDescriptorRpc = []byte{
	// 597 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x53, 0xcf, 0x4e, 0xdb, 0x4e,
	0x10, 0xce, 0x86, 0x90, 0x3f, 0x93, 0x00, 0xcb, 0xc0, 0x4f, 0x3f, 0x97, 0x4a, 0x21, 0xf8, 0x14,
	0xf5, 0x10, 0xa4, 0x70, 0x40, 0xea, 0xa1, 0x6a, 0x70, 0x0c, 0x89, 0xa0, 0xde, 0x68, 0xed, 0x50,
	0xd1, 0x8b, 0xe5, 0x3a, 0x5b, 0x40, 0x90, 0xd8, 0xf5, 0x1a, 0x24, 0x0e, 0xbd, 0xf7, 0xde, 0x4b,
	0x1f, 0xa9, 0xc7, 0x3e, 0x42, 0x45, 0x1f, 0xa1, 0x2f, 0x50, 0xed, 0xda, 0x56, 0x41, 0xa5, 0xa7,
	0xcc, 0x7c, 0xdf, 0x7c, 0x93, 0x6f, 0x66, 0xbc, 0xd0, 0x48, 0xe2, 0xb0, 0x17, 0x27, 0x51, 0x1a,
	0xe1, 0xb2, 0xfe, 0x31, 0x3f, 0x97, 0x01, 0x78, 0x1c, 0x72, 0xf1, 0xf1, 0x46, 0xc8, 0x14, 0x0d,
	0xa8, 0x5d, 0x04, 0x8b, 0xd9, 0xb5, 0x48, 0x0c, 0xd2, 0x21, 0xdd, 0x06, 0x2f, 0x52, 0xc5, 0xdc,
	0x8a, 0x44, 0x5e, 0x46, 0x0b, 0xa3, 0x9c, 0x31, 0x79, 0x8a, 0x14, 0x96, 0xae, 0xc4, 0x9d, 0xd1,
	0xec, 0x90, 0xee, 0x12, 0x57, 0x21, 0x6e, 0x42, 0xd6, 0xdd, 0x68, 0x75, 0x48, 0xb7, 0xc5, 0xb3,
	0x04, 0x9f, 0x43, 0x23, 0x0e, 0xa4, 0xf4, 0x3f, 0x24, 0xd1, 0xdc, 0xd8, 0xd6, 0x3d, 0xea, 0x0a,
	0x38, 0x4c, 0xa2, 0x39, 0xfe, 0x0f, 0x35, 0x4d, 0xa6, 0x91, 0xd1, 0xd1, 0x54, 0x55, 0xa5, 0x5e,
	0x84, 0xfb, 0xb9, 0x2a, 0xbd, 0x8b, 0x85, 0xb1, 0xd3, 0x21, 0xdd, 0xd5, 0xfe, 0x56, 0x36, 0x42,
	0xef, 0x8f, 0xef, 0xde, 0x44, 0x15, 0xdf, 0xc5, 0x22, 0xeb, 0xa8, 0x22, 0x73, 0x17, 0xea, 0x05,
	0x8a, 0x75, 0xa8, 0xa8, 0x98, 0x96, 0x10, 0xa0, 0xca, 0x83, 0xc5, 0x2c, 0x9a, 0x53, 0x82, 0x2b,
	0xd0, 0x38, 0x48, 0xa2, 0x60, 0x16, 0x06, 0x32, 0xa5, 0x65, 0xf3, 0x0c, 0x9a, 0xba, 0xa3, 0x8c,
	0xa3, 0x85, 0x14, 0x68, 0x42, 0x25, 0x8c, 0x66, 0x42, 0xef, 0x61, 0xb5, 0xbf, 0x5a, 0xfc, 0xa7,
	0x8c, 0xad, 0x68, 0x26, 0xb8, 0xe6, 0xd4, 0xe8, 0x73, 0x79, 0x9e, 0x2f, 0x44, 0x85, 0x4f, 0x8f,
	0x6e, 0xf6, 0x00, 0x47, 0x22, 0xb8, 0x4e, 0x2f, 0xac, 0x0b, 0x11, 0x5e, 0x3d, 0x58, 0xb6, 0x14,
	0xc9, 0xed, 0x65, 0x28, 0x8a, 0x65, 0xe7, 0xa9, 0xf9, 0x85, 0xc0, 0xc6, 0x23, 0x41, 0xee, 0xe9,
	0x35, 0x54, 0x65, 0x1a, 0xa4, 0x37, 0x32, 0x77, 0xd5, 0xcd, 0x5d, 0x3d, 0x51, 0xdb, 0x73, 0x55,
	0xaf, 0xc5, 0xb9, 0xab, 0xeb, 0x79, 0xae, 0x33, 0x5f, 0xc2, 0xca, 0x23, 0x02, 0x9b, 0x50, 0x9b,
	0x3a, 0xc7, 0x0e, 0x7b, 0xeb, 0xd0, 0x92, 0x4a, 0x5c, 0x9b, 0x9f, 0x8e, 0x9d, 0x23, 0x4a, 0x70,
	0x0d, 0x9a, 0x0e, 0xf3, 0xfc, 0x02, 0x28, 0xbf, 0xf8, 0x45, 0xa0, 0x96, 0xcf, 0xaf, 0x2b, 0xa7,
	0x96, 0x65, 0xbb, 0x2e, 0x2d, 0xe1, 0x7f, 0xb0, 0x3e, 0x1a, 0x38, 0xc3, 0x13, 0x9b, 0xfb, 0x4a,
	0x71, 0xc8, 0xa6, 0xce, 0x90, 0x12, 0xdc, 0x80, 0xb5, 0x02, 0xf6, 0x18, 0xf3, 0xd9, 0xc9, 0x90,
	0x96, 0x71, 0x1d, 0x56, 0x0e, 0x06, 0x43, 0xdf, 0xea, 0xbb, 0xfe, 0x84, 0x33, 0x8f, 0xd1, 0xa5,
	0x02, 0x72, 0xfb, 0x56, 0x0e, 0x55, 0x90, 0x42, 0x2b, 0x93, 0xfa, 0x36, 0xe7, 0x8c, 0xd3, 0x65,
	0x85, 0x8c, 0x9d, 0xd3, 0xc1, 0xc9, 0x78, 0xe8, 0x5b, 0x6c, 0x68, 0xd3, 0x06, 0xb6, 0xa0, 0x6e,
	0x31, 0xc7, 0x1b, 0x3b, 0x53, 0x9b, 0xb6, 0x95, 0x87, 0xc9, 0xc0, 0x75, 0x7d, 0x8f, 0x3d, 0xf0,
	0xb0, 0xad, 0xe0, 0x42, 0x96, 0xd1, 0x67, 0x13, 0x9b, 0x76, 0x94, 0xb5, 0xa2, 0xda, 0x1b, 0xbf,
	0xb1, 0xd9, 0xd4, 0xa3, 0x3b, 0xb8, 0x09, 0x94, 0x4d, 0x3d, 0x9f, 0x1d, 0xfa, 0xc7, 0xf6, 0x99,
	0xcf, 0x07, 0xce, 0x91, 0x4d, 0xf7, 0xfa, 0x9f, 0xf4, 0x03, 0x71, 0xb3, 0xcb, 0xe0, 0x2e, 0x54,
	0x47, 0xfa, 0x45, 0xe0, 0xfa, 0x5f, 0x5f, 0xe1, 0x16, 0x3e, 0x84, 0xf2, 0x93, 0xbd, 0x82, 0x65,
	0x7d, 0x17, 0x7c, 0xf6, 0xd4, 0xad, 0x32, 0xdd, 0xd6, 0xbf, 0xcf, 0x78, 0x60, 0x7c, 0xbb, 0x6f,
	0x93, 0xef, 0xf7, 0x6d, 0xf2, 0xe3, 0xbe, 0x4d, 0xbe, 0xfe, 0x6c, 0x97, 0x46, 0xe4, 0x5d, 0x25,
	0x89, 0xc3, 0xfd, 0xf7, 0x55, 0x2d, 0xda, 0xfb, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x84, 0xab, 0xc7,
	0xbf, 0xd5, 0x03, 0x00, 0x00,
}
